nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    711.447      0.500000    
Tfreq:   50
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    711.447      0.500000    
Tfreq:   50
 Estimating   50 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       2371.49          3.96          1.11         21.42          0.57          0.04         27.10
iter,obj,time:      3       2546.00          0.84          1.12         21.82          0.24          0.04         24.06
iter,obj,time:      4       2353.20          0.86          1.12         21.73          0.25          0.05         24.01
iter,obj,time:      5       2407.88          0.86          1.12         21.81          0.23          0.05         24.07
iter,obj,time:      6       2605.89          0.86          1.12         21.91          0.25          0.05         24.18
iter,obj,time:      7       2273.73          0.86          1.12         21.76          0.23          0.05         24.02
iter,obj,time:      8       2487.66          0.85          1.12         21.80          0.25          0.05         24.07
iter,obj,time:      9       2472.78          0.86          1.12         21.76          0.23          0.05         24.02
iter,obj,time:     10       2478.50          0.86          1.12         21.82          0.25          0.05         24.09
iter,obj,time:     11       2458.75          0.86          1.12         21.80          0.23          0.05         24.06
iter,obj,time:     12       2396.44          0.86          1.12         21.73          0.22          0.05         23.98
iter,obj,time:     13       2210.51          0.86          1.12         21.85          0.26          0.05         24.14
iter,obj,time:     14       2382.09          0.86          1.12         21.87          0.25          0.05         24.14
iter,obj,time:     15       2764.54          0.86          1.12         21.79          0.24          0.05         24.05
iter,obj,time:     16       2371.65          0.86          1.12         21.84          0.25          0.05         24.11
iter,obj,time:     17       2371.58          0.86          1.12         22.04          0.24          0.05         24.31
iter,obj,time:     18       2371.49          0.86          1.12         21.85          0.23          0.05         24.12
iter,obj,time:     19       2293.12          0.86          1.12         21.73          0.26          0.05         24.02
iter,obj,time:     20       2350.62          0.86          1.12         21.82          0.24          0.05         24.09
iter,obj,time:     21       2291.81          0.86          1.12         21.77          0.24          0.05         24.04
iter,obj,time:     22       2322.53          0.86          1.12         21.77          0.22          0.05         24.02
iter,obj,time:     23       2310.46          0.86          1.12         21.85          0.23          0.05         24.11
iter,obj,time:     24       2328.11          0.86          1.12         21.81          0.22          0.05         24.05
iter,obj,time:     25       2289.32          0.86          1.12         21.83          0.23          0.05         24.09
iter,obj,time:     26       2288.25          0.86          1.12         21.98          0.25          0.05         24.25
iter,obj,time:     27       2369.32          0.86          1.12         21.94          0.23          0.05         24.20
iter,obj,time:     28       2338.49          0.86          1.12         21.82          0.25          0.05         24.11
iter,obj,time:     29       2297.40          0.86          1.12         21.77          0.22          0.05         24.01
iter,obj,time:     30       2328.23          0.86          1.12         21.98          0.23          0.05         24.23
iter,obj,time:     31       2272.57          0.86          1.12         21.79          0.22          0.05         24.03
iter,obj,time:     32       2353.23          0.86          1.12         21.73          0.25          0.05         24.00
iter,obj,time:     33       2293.75          0.86          1.12         21.87          0.21          0.05         24.11
iter,obj,time:     34       2301.96          0.86          1.12         21.78          0.23          0.05         24.04
iter,obj,time:     35       2284.45          0.86          1.12         21.81          0.24          0.05         24.07
iter,obj,time:     36       2286.61          0.86          1.12         21.77          0.24          0.05         24.04
iter,obj,time:     37       2362.77          0.85          1.12         21.71          0.25          0.05         23.98
iter,obj,time:     38       2362.57          0.86          1.12         21.81          0.26          0.05         24.09
iter,obj,time:     39       2246.24          0.86          1.12         21.88          0.24          0.05         24.14
iter,obj,time:     40       2245.90          0.86          1.12         22.09          0.25          0.05         24.36
iter,obj,time:     41       2319.02          0.86          1.11         21.78          0.23          0.05         24.03
iter,obj,time:     42       2371.57          0.86          1.12         21.77          0.22          0.05         24.02
iter,obj,time:     43       2303.54          0.86          1.12         21.93          0.21          0.05         24.17
iter,obj,time:     44       2254.58          0.86          1.12         21.75          0.24          0.05         24.01
iter,obj,time:     45       2525.42          0.85          1.11         21.82          0.21          0.04         24.04
iter,obj,time:     46       2366.57          0.86          1.11         21.77          0.18          0.05         23.98
iter,obj,time:     47       2297.60          0.86          1.12         21.75          0.23          0.05         24.01
iter,obj,time:     48       2302.72          0.86          1.12         21.77          0.25          0.05         24.04
iter,obj,time:     49       2411.97          0.86          1.12         21.84          0.18          0.05         24.04
iter,obj,time:     50       2380.03          0.86          1.11         21.88          0.27          0.05         24.17
iter,obj,time:     51       2272.69          0.86          1.12         21.89          0.24          0.05         24.16
iter,obj,time:     52       2260.02          0.86          1.12         21.95          0.25          0.05         24.24

    1    2371.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    2    2546.0      -0.6850     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    3    2353.2        1.315     -4.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    4    2407.9        1.315     -2.102      1.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    5    2605.9        1.315     -2.102      3.011     -102.6    -0.9390    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    6    2273.7        1.315     -2.102      3.011     -102.6      1.061    
                      -1.148      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    7    2487.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518    -0.5920     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    8    2472.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      1.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    9    2478.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     -1.541    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   10    2458.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                      0.1570     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   11    2396.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -3.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   12    2210.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -1.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   13    2382.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500    -0.9650     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   14    2764.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965      1.382     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   15    2371.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -3.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   16    2371.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      11.41    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   17    2371.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -9.390     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   18    2293.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3110     0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   19    2350.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.5544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   20    2291.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544     0.2665     0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   21    2322.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.4510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   22    2310.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486     0.1554     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   23    2328.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.4394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   24    2289.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.3804     0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   25    2288.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.3916    



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   26    2369.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                      0.4970E-01-0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   27    2338.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503      0.000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   28    2297.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.3846    -0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   29    2328.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01 0.2607    

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   30    2272.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                      0.2530     0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   31    2353.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.4431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   32    2293.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116     0.1859     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   33    2302.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.5695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   34    2284.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3329     0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   35    2286.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.3015    -0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   36    2362.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.3074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   37    2362.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074    -0.9290      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   38    2246.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.604      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   39    2245.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      9.120    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   40    2319.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                      0.5712     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   41    2371.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -1.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   42    2303.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.754      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   43    2254.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      9.208    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   44    2525.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000      1.585    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   45    2366.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846     0.6307      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   46    2297.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      9.265      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   47    2302.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.457    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   48    2412.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000     0.3511    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   49    2380.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489     0.3668      9.076    

                       8.777    -0.1891E+05 -6.000    

   50    2272.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.476    

                       8.777    -0.1891E+05 -6.000    

   51    2260.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       9.177    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          51          51

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        1
neval is:       51


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       51     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -1050.04       1050.04       2371.49       3421.53    
   2  0.709707     -0.342904      -243.958       243.958       2546.00       2789.96    
   3  0.151889      -1.88460      -1340.80       1340.80       2353.20       3694.00    
   4  0.456170E-01  -3.08747      -2196.58       2196.58       2407.88       4604.46    
   5  0.882557     -0.124932      -88.8824       88.8824       2605.89       2694.78    
   6  0.711292     -0.340672      -242.370       242.370       2273.73       2516.10    
   7  0.241669      -1.42019      -1010.39       1010.39       2487.66       3498.05    
   8  0.682871     -0.381450      -271.381       271.381       2472.78       2744.16    
   9  0.500657     -0.691834      -492.204       492.204       2478.50       2970.70    
  10  0.494633     -0.703939      -500.815       500.815       2458.75       2959.56    
  11  0.437126     -0.827535      -588.748       588.748       2396.44       2985.19    
  12  0.462981     -0.770069      -547.864       547.864       2210.51       2758.37    
  13  0.988878     -0.111840E-01  -7.95682       7.95682       2382.09       2390.05    
  14  0.878158     -0.129929      -92.4377       92.4377       2764.54       2856.98    
  15  0.825605     -0.191638      -136.341       136.341       2371.65       2507.99    
  16  0.966665     -0.339033E-01  -24.1204       24.1204       2371.58       2395.70    
  17  0.340930      -1.07608      -765.572       765.572       2371.49       3137.06    
  18  0.288920      -1.24161      -883.338       883.338       2293.12       3176.46    
  19  0.442843     -0.814539      -579.502       579.502       2350.62       2930.12    
  20  0.878635     -0.129386      -92.0511       92.0511       2291.81       2383.86    
  21  0.198777E-01  -3.91816      -2787.56       2787.56       2322.53       5110.09    
  22  0.315829      -1.15255      -819.981       819.981       2310.46       3130.44    
  23  0.208690      -1.56690      -1114.77       1114.77       2328.11       3442.88    
  24  0.849393     -0.163234      -116.132       116.132       2289.32       2405.46    
  25  0.945818     -0.557056E-01  -39.6316       39.6316       2288.25       2327.89    
  26  0.567839     -0.565917      -402.620       402.620       2369.32       2771.94    
  27  0.718388     -0.330745      -235.308       235.308       2338.49       2573.80    
  28  0.115406      -2.15930      -1536.23       1536.23       2297.40       3833.62    
  29  0.659869E-01  -2.71830      -1933.93       1933.93       2328.23       4262.16    
  30  0.171393      -1.76380      -1254.85       1254.85       2272.57       3527.42    
  31  0.161953      -1.82045      -1295.16       1295.16       2353.23       3648.39    
  32  0.455406     -0.786566      -559.600       559.600       2293.75       2853.35    
  33  0.788693     -0.237378      -168.882       168.882       2301.96       2470.84    
  34  0.157754      -1.84672      -1313.84       1313.84       2284.45       3598.29    
  35  0.126279      -2.06926      -1472.17       1472.17       2286.61       3758.78    
  36  0.646962     -0.435467      -309.812       309.812       2362.77       2672.58    
  37  0.730769     -0.313658      -223.151       223.151       2362.57       2585.73    
  38  0.443446E-01  -3.11577      -2216.70       2216.70       2246.24       4462.94    
  39  0.219048      -1.51847      -1080.31       1080.31       2245.90       3326.20    
  40  0.311223E-01  -3.46983      -2468.60       2468.60       2319.02       4787.62    
  41  0.864417     -0.145700      -103.658       103.658       2371.57       2475.23    
  42  0.372606     -0.987233      -702.364       702.364       2303.54       3005.91    
  43  0.599250E-01  -2.81466      -2002.48       2002.48       2254.58       4257.06    
  44  0.250528      -1.38418      -984.773       984.773       2525.42       3510.20    
  45  0.404968E-01  -3.20653      -2281.28       2281.28       2366.57       4647.85    
  46  0.792822     -0.232156      -165.167       165.167       2297.60       2462.77    
  47  0.826691     -0.190324      -135.406       135.406       2302.72       2438.12    
  48  0.258424      -1.35316      -962.699       962.699       2411.97       3374.67    
  49  0.713620     -0.337405      -240.046       240.046       2380.03       2620.08    
  50  0.936186     -0.659413E-01  -46.9137       46.9137       2272.69       2319.60    
  51  0.655367E-01  -2.72514      -1938.80       1938.80       2260.02       4198.82    
loop,thermsimp(1:2)        1   1050.04       243.958    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     53       2317.12          0.84          1.12         21.75          0.26          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     54       2527.11          0.86          1.12         21.71          0.23          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2317.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        1
neval is:       53
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        2
neval is:       53


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       53     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -741.359       741.359       2272.69       3014.05    
   2  0.440787     -0.819193      -582.813       582.813       2288.25       2871.07    
   3  0.685789     -0.377185      -268.347       268.347       2291.81       2560.16    
   4  0.673104     -0.395856      -281.631       281.631       2382.09       2663.72    
   5  0.655536     -0.422301      -300.445       300.445       2371.58       2672.02    
   6  0.422838     -0.860766      -612.390       612.390       2289.32       2901.71    
   7  0.300870      -1.20108      -854.503       854.503       2302.72       3157.22    
   8  0.776987     -0.252331      -179.520       179.520       2297.60       2477.12    
   9  0.170551      -1.76872      -1258.35       1258.35       2301.96       3560.31    
  10  0.587497     -0.531884      -378.408       378.408       2371.57       2749.98    
  11  0.250425      -1.38459      -985.066       985.066       2371.65       3356.71    
  12  0.776362E-01  -2.55572      -1818.26       1818.26       2273.73       4091.99    
  13  0.766647     -0.265729      -189.052       189.052       2338.49       2527.55    
  14  0.480193     -0.733568      -521.895       521.895       2362.57       2884.47    
  15  0.434643     -0.833231      -592.800       592.800       2380.03       2972.83    
  16  0.815924E-01  -2.50602      -1782.90       1782.90       2362.77       4145.67    
  17  0.724257E-01  -2.62519      -1867.69       1867.69       2605.89       4473.58    
  18  0.573795     -0.555483      -395.197       395.197       2472.78       2867.98    
  19  0.196096      -1.62915      -1159.05       1159.05       2210.51       3369.56    
  20  0.240673      -1.42432      -1013.33       1013.33       2369.32       3382.65    
  21  0.194228      -1.63872      -1165.87       1165.87       2546.00       3711.86    
  22  0.236387      -1.44229      -1026.11       1026.11       2293.75       3319.86    
  23  0.261662      -1.34070      -953.838       953.838       2764.54       3718.38    
  24  0.146321      -1.92195      -1367.37       1367.37       2350.62       3717.99    
  25  0.169637      -1.77410      -1262.18       1262.18       2458.75       3720.93    
  26  0.886717     -0.120229      -85.5367       85.5367       2478.50       2564.03    
  27  0.253412      -1.37274      -976.632       976.632       2396.44       3373.07    
  28  0.470820     -0.753279      -535.918       535.918       2303.54       2839.46    
  29  0.329871      -1.10905      -789.034       789.034       2310.46       3099.49    
  30  0.726784     -0.319126      -227.041       227.041       2371.49       2598.53    
  31  0.612351     -0.490450      -348.930       348.930       2293.12       2642.05    
  32  0.146573      -1.92023      -1366.14       1366.14       2245.90       3612.04    
  33  0.812633     -0.207476      -147.608       147.608       2411.97       2559.58    
  34  0.486789     -0.719925      -512.189       512.189       2371.49       2883.68    
  35  0.653508     -0.425400      -302.650       302.650       2328.11       2630.76    
  36  0.180127      -1.71409      -1219.49       1219.49       2487.66       3707.15    
  37  0.155218      -1.86292      -1325.37       1325.37       2525.42       3850.80    
  38  0.830615     -0.185589      -132.037       132.037       2272.57       2404.61    
  39  0.728345     -0.316980      -225.515       225.515       2284.45       2509.96    
  40  0.262318      -1.33820      -952.058       952.058       2353.23       3305.29    
  41  0.234222      -1.45148      -1032.65       1032.65       2353.20       3385.86    
  42  0.250201      -1.38549      -985.705       985.705       2286.61       3272.32    
  43  0.898433     -0.107103      -76.1984       76.1984       2297.40       2373.59    
  44  0.580277     -0.544250      -387.206       387.206       2260.02       2647.23    
  45  0.823617     -0.194050      -138.056       138.056       2254.58       2392.63    
  46  0.820676     -0.197627      -140.601       140.601       2328.23       2468.83    
  47  0.502494     -0.688171      -489.597       489.597       2246.24       2735.84    
  48  0.751016     -0.286329      -203.708       203.708       2407.88       2611.59    
  49  0.360461      -1.02037      -725.940       725.940       2366.57       3092.51    
  50  0.948712     -0.526497E-01  -37.4575       37.4575       2319.02       2356.47    
  51  0.452918     -0.792045      -563.499       563.499       2317.12       2880.62    
loop,thermsimp(1:2)        2   741.359       582.813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     55       2190.57          0.85          1.12         21.78          0.26          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     56       2322.14          0.84          1.12         21.68          0.29          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2190.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        2
neval is:       55
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        3
neval is:       55


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       55     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -1269.51       1269.51       2319.02       3588.52    
   2  0.274399      -1.29317      -920.024       920.024       2297.40       3217.42    
   3  0.597410E-01  -2.81774      -2004.67       2004.67       2254.58       4259.25    
   4  0.283115E-01  -3.56449      -2535.95       2535.95       2272.57       4808.52    
   5  0.901069     -0.104174      -74.1143       74.1143       2328.23       2402.35    
   6  0.717939     -0.331371      -235.753       235.753       2297.60       2533.36    
   7  0.294866      -1.22123      -868.844       868.844       2284.45       3153.29    
   8  0.935651     -0.665127E-01  -47.3203       47.3203       2338.49       2385.81    
   9  0.314362      -1.15721      -823.294       823.294       2411.97       3235.27    
  10  0.807729     -0.213529      -151.915       151.915       2291.81       2443.73    
  11  0.757191     -0.278140      -197.882       197.882       2478.50       2676.38    
  12  0.508654     -0.675987      -480.929       480.929       2371.49       2852.42    
  13  0.722060     -0.325647      -231.680       231.680       2407.88       2639.56    
  14  0.424032     -0.857947      -610.384       610.384       2328.11       2938.49    
  15  0.786154     -0.240602      -171.176       171.176       2293.12       2464.30    
  16  0.399894     -0.916557      -652.082       652.082       2260.02       2912.10    
  17  0.757416     -0.277843      -197.671       197.671       2382.09       2579.76    
  18  0.637270     -0.450563      -320.552       320.552       2371.58       2692.13    
  19  0.586055     -0.534342      -380.156       380.156       2246.24       2626.40    
  20  0.821724     -0.196351      -139.694       139.694       2371.57       2511.27    
  21  0.921558     -0.816897E-01  -58.1179       58.1179       2303.54       2361.66    
  22  0.985596     -0.145083E-01  -10.3219       10.3219       2472.78       2483.10    
  23  0.257194      -1.35793      -966.092       966.092       2288.25       3254.35    
  24  0.921438E-01  -2.38440      -1696.38       1696.38       2317.12       4013.50    
  25  0.114653      -2.16584      -1540.88       1540.88       2371.49       3912.38    
  26  0.379827     -0.968040      -688.710       688.710       2362.57       3051.28    
  27  0.541451     -0.613503      -436.475       436.475       2289.32       2725.80    
  28  0.544274     -0.608302      -432.775       432.775       2380.03       2812.81    
  29  0.934365     -0.678883E-01  -48.2990       48.2990       2272.69       2320.99    
  30  0.266419E-01  -3.62527      -2579.19       2579.19       2366.57       4945.76    
  31  0.919572     -0.838466E-01  -59.6524       59.6524       2310.46       2370.11    
  32  0.864639     -0.145444      -103.476       103.476       2302.72       2406.19    
  33  0.341156      -1.07542      -765.102       765.102       2286.61       3051.71    
  34  0.803175     -0.219182      -155.937       155.937       2353.23       2509.17    
  35  0.699424     -0.357498      -254.341       254.341       2293.75       2548.09    
  36  0.223868E-01  -3.79928      -2702.99       2702.99       2371.65       5074.64    
  37  0.605689     -0.501389      -356.712       356.712       2210.51       2567.22    
  38  0.312349      -1.16363      -827.864       827.864       2396.44       3224.31    
  39  0.437501     -0.826675      -588.136       588.136       2369.32       2957.46    
  40  0.303330      -1.19293      -848.709       848.709       2353.20       3201.91    
  41  0.129735      -2.04226      -1452.96       1452.96       2301.96       3754.92    
  42  0.954352     -0.467224E-01  -33.2405       33.2405       2245.90       2279.14    
  43  0.519807     -0.654297      -465.498       465.498       2487.66       2953.16    
  44  0.950560     -0.507036E-01  -36.0729       36.0729       2546.00       2582.07    
  45  0.443941     -0.812064      -577.741       577.741       2350.62       2928.36    
  46  0.911446     -0.927229E-01  -65.9675       65.9675       2764.54       2830.51    
  47  0.782475     -0.245293      -174.513       174.513       2458.75       2633.26    
  48  0.412534     -0.885438      -629.942       629.942       2525.42       3155.37    
  49  0.843850     -0.169780      -120.790       120.790       2273.73       2394.52    
  50  0.149432      -1.90091      -1352.40       1352.40       2362.77       3715.17    
  51  0.292747      -1.22845      -873.976       873.976       2190.57       3064.54    
loop,thermsimp(1:2)        3   1269.51       920.024    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     57       2238.56          0.86          1.12         21.75          0.25          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     58       2154.87          0.86          1.12         21.78          0.28          0.05         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2154.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        3
neval is:       57
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        4
neval is:       57


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       57     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -88.3347       88.3347       2245.90       2334.23    
   2  0.114178      -2.16999      -1543.84       1543.84       2272.69       3816.53    
   3  0.217017      -1.52778      -1086.93       1086.93       2303.54       3390.48    
   4  0.138317      -1.97821      -1407.39       1407.39       2310.46       3717.85    
   5  0.832728     -0.183048      -130.229       130.229       2338.49       2468.72    
   6  0.390825     -0.939496      -668.402       668.402       2273.73       2942.13    
   7  0.283633      -1.26007      -896.477       896.477       2328.23       3224.71    
   8  0.725809     -0.320468      -227.996       227.996       2302.72       2530.72    
   9  0.506121     -0.680979      -484.481       484.481       2291.81       2776.29    
  10  0.216234      -1.53139      -1089.51       1089.51       2293.12       3382.63    
  11  0.637942     -0.449509      -319.802       319.802       2472.78       2792.58    
  12  0.536707     -0.622302      -442.736       442.736       2353.23       2795.97    
  13  0.231844      -1.46169      -1039.92       1039.92       2371.57       3411.49    
  14  0.491379     -0.710540      -505.512       505.512       2297.60       2803.11    
  15  0.825774     -0.191434      -136.195       136.195       2293.75       2429.95    
  16  0.671593     -0.398102      -283.229       283.229       2210.51       2493.74    
  17  0.549103     -0.599470      -426.491       426.491       2382.09       2808.58    
  18  0.659287     -0.416597      -296.387       296.387       2546.00       2842.39    
  19  0.205012      -1.58469      -1127.42       1127.42       2246.24       3373.66    
  20  0.400541E-02  -5.52011      -3927.27       3927.27       2458.75       6386.02    
  21  0.750831     -0.286575      -203.883       203.883       2407.88       2611.76    
  22  0.619921     -0.478162      -340.187       340.187       2478.50       2818.69    
  23  0.435226     -0.831889      -591.845       591.845       2371.58       2963.42    
  24  0.460974     -0.774414      -550.955       550.955       2289.32       2840.28    
  25  0.891582E-01  -2.41734      -1719.81       1719.81       2380.03       4099.84    
  26  0.589618E-01  -2.83087      -2014.01       2014.01       2764.54       4778.56    
  27  0.541391     -0.613613      -436.554       436.554       2371.49       2808.05    
  28  0.545108E-01  -2.90936      -2069.85       2069.85       2260.02       4329.87    
  29  0.744722     -0.294744      -209.695       209.695       2350.62       2560.31    
  30  0.712477     -0.339008      -241.186       241.186       2328.11       2569.30    
  31  0.563836     -0.572992      -407.653       407.653       2487.66       2895.32    
  32  0.161455      -1.82353      -1297.34       1297.34       2369.32       3666.67    
  33  0.640738     -0.445135      -316.690       316.690       2362.57       2679.26    
  34  0.157494      -1.84837      -1315.02       1315.02       2286.61       3601.63    
  35  0.695323     -0.363378      -258.525       258.525       2190.57       2449.09    
  36  0.792798     -0.232186      -165.188       165.188       2284.45       2449.64    
  37  0.940634     -0.612017E-01  -43.5418       43.5418       2525.42       2568.97    
  38  0.750008     -0.287672      -204.663       204.663       2353.20       2557.87    
  39  0.298939E-01  -3.51010      -2497.25       2497.25       2297.40       4794.65    
  40  0.633510     -0.456480      -324.761       324.761       2396.44       2721.20    
  41  0.465723     -0.764164      -543.663       543.663       2411.97       2955.64    
  42  0.916259     -0.874560E-01  -62.2204       62.2204       2288.25       2350.48    
  43  0.451376     -0.795456      -565.925       565.925       2319.02       2884.94    
  44  0.414090     -0.881672      -627.263       627.263       2362.77       2990.03    
  45  0.273092      -1.29795      -923.421       923.421       2301.96       3225.38    
  46  0.361379      -1.01783      -724.131       724.131       2371.49       3095.62    
  47  0.548848     -0.599934      -426.821       426.821       2317.12       2743.94    
  48  0.832309     -0.183552      -130.588       130.588       2254.58       2385.17    
  49  0.673017     -0.395985      -281.722       281.722       2272.57       2554.29    
  50  0.692516     -0.367425      -261.403       261.403       2366.57       2627.97    
  51  0.354468E-01  -3.33972      -2376.04       2376.04       2154.87       4530.91    
loop,thermsimp(1:2)        4   88.3347       1543.84    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     59       2219.60          0.86          1.12         21.74          0.24          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     60       2145.14          0.85          1.12         21.73          0.28          0.05         24.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2145.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        4
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        5
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       59     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -22.9995       22.9995       2245.90       2268.89    
   2  0.384676     -0.955353      -679.683       679.683       2288.25       2967.94    
   3  0.472770     -0.749146      -532.978       532.978       2254.58       2787.56    
   4  0.131186      -2.03114      -1445.05       1445.05       2293.75       3738.80    
   5  0.387497     -0.948046      -674.485       674.485       2190.57       2865.05    
   6  0.474858     -0.744739      -529.842       529.842       2284.45       2814.29    
   7  0.654056     -0.424563      -302.054       302.054       2338.49       2640.55    
   8  0.375266     -0.980119      -697.303       697.303       2210.51       2907.81    
   9  0.605577     -0.501574      -356.843       356.843       2302.72       2659.56    
  10  0.485605     -0.722360      -513.922       513.922       2272.57       2786.49    
  11  0.503843     -0.685490      -487.690       487.690       2353.20       2840.89    
  12  0.374521     -0.982108      -698.718       698.718       2350.62       3049.34    
  13  0.955542E-01  -2.34806      -1670.52       1670.52       2525.42       4195.95    
  14  0.902567     -0.102512      -72.9320       72.9320       2328.11       2401.04    
  15  0.347215      -1.05781      -752.576       752.576       2407.88       3160.46    
  16  0.893138     -0.113014      -80.4037       80.4037       2366.57       2446.97    
  17  0.561145     -0.577776      -411.057       411.057       2362.57       2773.63    
  18  0.667287     -0.404536      -287.806       287.806       2396.44       2684.25    
  19  0.601102     -0.508991      -362.120       362.120       2317.12       2679.24    
  20  0.569928     -0.562245      -400.008       400.008       2291.81       2691.82    
  21  0.655926     -0.421708      -300.023       300.023       2472.78       2772.81    
  22  0.355892      -1.03313      -735.016       735.016       2353.23       3088.25    
  23  0.208013      -1.57015      -1117.08       1117.08       2297.60       3414.68    
  24  0.879772     -0.128093      -91.1313       91.1313       2371.49       2462.62    
  25  0.114206E-01  -4.47233      -3181.83       3181.83       2382.09       5563.92    
  26  0.950245     -0.510357E-01  -36.3092       36.3092       2478.50       2514.81    
  27  0.321268      -1.13548      -807.834       807.834       2289.32       3097.16    
  28  0.379005     -0.970207      -690.251       690.251       2546.00       3236.25    
  29  0.117960      -2.13741      -1520.66       1520.66       2319.02       3839.67    
  30  0.822558     -0.195337      -138.972       138.972       2487.66       2626.64    
  31  0.671085     -0.398860      -283.768       283.768       2273.73       2557.49    
  32  0.220279      -1.51286      -1076.32       1076.32       2411.97       3488.29    
  33  0.836335     -0.178727      -127.155       127.155       2371.58       2498.73    
  34  0.982442E-01  -2.32030      -1650.77       1650.77       2362.77       4013.54    
  35  0.912526     -0.915389E-01  -65.1251       65.1251       2371.49       2436.62    
  36  0.758802     -0.276015      -196.370       196.370       2328.23       2524.60    
  37  0.562651     -0.575096      -409.150       409.150       2301.96       2711.11    
  38  0.248142      -1.39375      -991.583       991.583       2246.24       3237.82    
  39  0.864881     -0.145163      -103.276       103.276       2293.12       2396.40    
  40  0.495151     -0.702893      -500.072       500.072       2303.54       2803.61    
  41  0.112352E-01  -4.48870      -3193.47       3193.47       2371.57       5565.05    
  42  0.745500     -0.293700      -208.952       208.952       2286.61       2495.56    
  43  0.405071     -0.903693      -642.930       642.930       2369.32       3012.25    
  44  0.617259     -0.482466      -343.250       343.250       2310.46       2653.71    
  45  0.992755     -0.727089E-02  -5.17286       5.17286       2272.69       2277.86    
  46  0.888739     -0.117952      -83.9168       83.9168       2380.03       2463.95    
  47  0.976701     -0.235748E-01  -16.7722       16.7722       2260.02       2276.79    
  48  0.461976     -0.772242      -549.410       549.410       2154.87       2704.28    
  49  0.150581      -1.89325      -1346.95       1346.95       2764.54       4111.49    
  50  0.726286E-01  -2.62240      -1865.70       1865.70       2297.40       4163.09    
  51  0.280837      -1.26998      -903.524       903.524       2145.14       3048.66    
loop,thermsimp(1:2)        5   22.9995       679.683    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61       2206.52          0.86          1.12         21.73          0.25          0.04         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     62       2127.03          0.85          1.12         21.69          0.25          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    2206.5        1.214     -2.203      2.910     -102.6      1.150    
                      0.7509      1.307     -99.70      3.451     0.3579    

                       2.382     -2.052      1.540      7000.      7000.    

                      -1.950      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.713     -3.366     -9.261      6.665    

                      -14.14     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2619E-01 0.2695    -0.1834E-01 0.1364    

                     -0.2486    -0.1295     0.1545     0.9559E-01 0.1067    



                     -0.4251    -0.4748      0.000     0.9971E-01-0.2417E-01

                     -0.3183E-01 0.1582    -0.7116    -0.9896E-01 0.2846    

                      0.4802E-01 0.1666E-01-0.5923     -1.214      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.224      8.740    -0.1672E+05 -6.000    

                     -0.3783     -3.371      9.374      8.828    -0.1969E+05



                      -6.000     0.6351    -0.3188      8.885      9.077    

                     -0.1944E+05 -6.000    -0.5984    -0.5827      9.096    

                       8.797    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2127.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        5
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        6
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       61     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -153.233       153.233       2245.90       2399.13    
   2  0.337878      -1.08507      -771.971       771.971       2260.02       3031.99    
   3  0.930612     -0.719127E-01  -51.1621       51.1621       2272.69       2323.85    
   4  0.843645     -0.170024      -120.963       120.963       2293.12       2414.09    
   5  0.757799     -0.277337      -197.310       197.310       2328.11       2525.42    
   6  0.627925     -0.465335      -331.062       331.062       2371.49       2702.55    
   7  0.412314     -0.885971      -630.322       630.322       2366.57       2996.89    
   8  0.282274      -1.26488      -899.893       899.893       2371.49       3271.38    
   9  0.426609E-01  -3.15447      -2244.24       2244.24       2380.03       4624.27    
  10  0.484876     -0.723862      -514.990       514.990       2286.61       2801.60    
  11  0.372210     -0.988296      -703.121       703.121       2371.58       3074.70    
  12  0.740507     -0.300421      -213.734       213.734       2478.50       2692.23    
  13  0.361519      -1.01744      -723.856       723.856       2328.23       3052.09    
  14  0.421034     -0.865042      -615.432       615.432       2273.73       2889.16    
  15  0.780595     -0.247699      -176.225       176.225       2487.66       2663.89    
  16  0.758410     -0.276531      -196.737       196.737       2338.49       2535.23    
  17  0.522921E-01  -2.95091      -2099.42       2099.42       2310.46       4409.88    
  18  0.609673     -0.494833      -352.048       352.048       2302.72       2654.77    
  19  0.204029      -1.58949      -1130.84       1130.84       2317.12       3447.96    
  20  0.516385     -0.660902      -470.197       470.197       2396.44       2866.64    
  21  0.323918      -1.12726      -801.989       801.989       2291.81       3093.80    
  22  0.671820     -0.397765      -282.989       282.989       2154.87       2437.86    
  23  0.850344     -0.162114      -115.335       115.335       2301.96       2417.30    
  24  0.515631     -0.662364      -471.237       471.237       2472.78       2944.02    
  25  0.919408     -0.840249E-01  -59.7793       59.7793       2362.57       2422.35    
  26  0.516519     -0.660643      -470.013       470.013       2272.57       2742.58    
  27  0.986900     -0.131869E-01  -9.38176       9.38176       2254.58       2263.96    
  28  0.127351      -2.06081      -1466.16       1466.16       2303.54       3769.70    
  29  0.775028E-01  -2.55744      -1819.49       1819.49       2284.45       4103.93    
  30  0.778307     -0.250634      -178.313       178.313       2353.20       2531.52    
  31  0.548570     -0.600441      -427.182       427.182       2190.57       2617.75    
  32  0.191672      -1.65197      -1175.29       1175.29       2210.51       3385.80    
  33  0.593733     -0.521326      -370.896       370.896       2288.25       2659.15    
  34  0.612853     -0.489631      -348.347       348.347       2369.32       2717.67    
  35  0.872749     -0.136107      -96.8329       96.8329       2145.14       2241.97    
  36  0.291105E-01  -3.53666      -2516.15       2516.15       2350.62       4866.76    
  37  0.310804      -1.16859      -831.392       831.392       2353.23       3184.63    
  38  0.238051      -1.43527      -1021.12       1021.12       2289.32       3310.44    
  39  0.600295     -0.510334      -363.076       363.076       2407.88       2770.96    
  40  0.856575     -0.154813      -110.141       110.141       2546.00       2656.14    
  41  0.127990      -2.05580      -1462.60       1462.60       2246.24       3708.84    
  42  0.390396E-01  -3.24318      -2307.35       2307.35       2297.60       4604.95    
  43  0.469298E-01  -3.05910      -2176.39       2176.39       2411.97       4588.36    
  44  0.170208      -1.77073      -1259.78       1259.78       2293.75       3553.54    
  45  0.457801     -0.781320      -555.868       555.868       2319.02       2874.88    
  46  0.451589     -0.794982      -565.588       565.588       2362.77       2928.36    
  47  0.601844     -0.507757      -361.242       361.242       2764.54       3125.79    
  48  0.923684     -0.793857E-01  -56.4788       56.4788       2297.40       2353.87    
  49  0.113154      -2.17901      -1550.25       1550.25       2525.42       4075.67    
  50  0.652894     -0.426340      -303.319       303.319       2382.09       2685.41    
  51  0.600010     -0.510809      -363.414       363.414       2127.03       2490.45    
loop,thermsimp(1:2)        6   153.233       771.971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63       2235.53          0.86          1.12         21.76          0.27          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64       2322.99          0.85          1.11         21.75          0.23          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2235.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        6
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        7
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       63     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1522.14       1522.14       2145.14       3667.27    
   2  0.421875     -0.863045      -614.012       614.012       2254.58       2868.59    
   3  0.700103     -0.356528      -253.651       253.651       2272.69       2526.34    
   4  0.209367      -1.56367      -1112.47       1112.47       2297.40       3409.86    
   5  0.117251      -2.14344      -1524.94       1524.94       2245.90       3770.84    
   6  0.898330     -0.107218      -76.2797       76.2797       2293.12       2369.40    
   7  0.209806      -1.56157      -1110.98       1110.98       2301.96       3412.94    
   8  0.917155     -0.864790E-01  -61.5253       61.5253       2362.57       2424.10    
   9  0.120514E-01  -4.41857      -3143.58       3143.58       2154.87       5298.45    
  10  0.189983      -1.66082      -1181.59       1181.59       2127.03       3308.62    
  11  0.257131      -1.35817      -966.265       966.265       2328.11       3294.38    
  12  0.913158E-01  -2.39343      -1702.80       1702.80       2353.20       4056.00    
  13  0.336531      -1.08906      -774.812       774.812       2338.49       3113.30    
  14  0.318351      -1.14460      -814.323       814.323       2190.57       3004.89    
  15  0.919606     -0.838101E-01  -59.6265       59.6265       2302.72       2362.35    
  16  0.719771E-01  -2.63141      -1872.11       1872.11       2546.00       4418.11    
  17  0.788730E-01  -2.53992      -1807.02       1807.02       2288.25       4095.27    
  18  0.905929     -0.987941E-01  -70.2868       70.2868       2487.66       2557.95    
  19  0.665501     -0.407215      -289.712       289.712       2382.09       2671.80    
  20  0.812159     -0.208059      -148.023       148.023       2478.50       2626.52    
  21  0.412726E-01  -3.18756      -2267.78       2267.78       2371.49       4639.27    
  22  0.256064      -1.36233      -969.225       969.225       2369.32       3338.55    
  23  0.277519      -1.28187      -911.980       911.980       2272.57       3184.55    
  24  0.279550      -1.27457      -906.792       906.792       2407.88       3314.67    
  25  0.857884     -0.153286      -109.055       109.055       2286.61       2395.67    
  26  0.205158      -1.58398      -1126.92       1126.92       2396.44       3523.36    
  27  0.482085     -0.729635      -519.097       519.097       2319.02       2838.11    
  28  0.494966E-01  -3.00585      -2138.51       2138.51       2273.73       4412.23    
  29  0.338791      -1.08237      -770.051       770.051       2362.77       3132.82    
  30  0.249491E-01  -3.69092      -2625.89       2625.89       2472.78       5098.68    
  31  0.480710     -0.732491      -521.129       521.129       2366.57       2887.70    
  32  0.908951E-01  -2.39805      -1706.09       1706.09       2260.02       3966.11    
  33  0.283223      -1.26152      -897.507       897.507       2328.23       3225.74    
  34  0.277734      -1.28109      -911.429       911.429       2371.58       3283.00    
  35  0.504407     -0.684372      -486.895       486.895       2291.81       2778.71    
  36  0.251881      -1.37880      -980.942       980.942       2764.54       3745.49    
  37  0.568193     -0.565294      -402.177       402.177       2353.23       2755.41    
  38  0.186135      -1.68128      -1196.14       1196.14       2371.49       3567.63    
  39  0.964582     -0.360604E-01  -25.6551       25.6551       2289.32       2314.98    
  40  0.493045     -0.707155      -503.104       503.104       2210.51       2713.61    
  41  0.477950     -0.738248      -525.225       525.225       2317.12       2842.35    
  42  0.114879      -2.16388      -1539.48       1539.48       2293.75       3833.24    
  43  0.324003      -1.12700      -801.802       801.802       2246.24       3048.04    
  44  0.720573     -0.327708      -233.147       233.147       2303.54       2536.69    
  45  0.934913     -0.673019E-01  -47.8818       47.8818       2525.42       2573.31    
  46  0.516467     -0.660745      -470.085       470.085       2284.45       2754.53    
  47  0.351513      -1.04551      -743.824       743.824       2310.46       3054.28    
  48  0.310221      -1.17047      -832.729       832.729       2411.97       3244.70    
  49  0.467571     -0.760204      -540.845       540.845       2297.60       2838.45    
  50  0.700644     -0.355756      -253.101       253.101       2380.03       2633.13    
  51  0.608579E-01  -2.79921      -1991.49       1991.49       2235.53       4227.02    
loop,thermsimp(1:2)        7   1522.14       614.012    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65       2528.01          0.86          1.12         21.76          0.25          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66       3159.08          0.85          1.12         21.93          0.18          0.05         24.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2528.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        7
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        8
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       65     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -511.295       511.295       2289.32       2800.62    
   2  0.568497     -0.564760      -401.797       401.797       2302.72       2704.52    
   3  0.632037E-01  -2.76139      -1964.59       1964.59       2293.12       4257.71    
   4  0.184325      -1.69105      -1203.10       1203.10       2286.61       3489.71    
   5  0.949772     -0.515332E-01  -36.6631       36.6631       2362.57       2399.24    
   6  0.512179     -0.669081      -476.016       476.016       2272.69       2748.71    
   7  0.573767     -0.555532      -395.232       395.232       2303.54       2698.77    
   8  0.590189     -0.527312      -375.155       375.155       2487.66       2862.82    
   9  0.323917      -1.12727      -801.992       801.992       2525.42       3327.42    
  10  0.246420E-01  -3.70330      -2634.71       2634.71       2478.50       5113.20    
  11  0.923153E-01  -2.38255      -1695.06       1695.06       2380.03       4075.09    
  12  0.236043      -1.44374      -1027.15       1027.15       2382.09       3409.24    
  13  0.885388     -0.121730      -86.6042       86.6042       2210.51       2297.11    
  14  0.617726     -0.481710      -342.711       342.711       2284.45       2627.16    
  15  0.349992      -1.04985      -746.910       746.910       2353.23       3100.14    
  16  0.892028     -0.114257      -81.2881       81.2881       2291.81       2373.10    
  17  0.382423     -0.961227      -683.863       683.863       2319.02       3002.88    
  18  0.850527     -0.161899      -115.183       115.183       2297.60       2412.78    
  19  0.653461     -0.425472      -302.701       302.701       2317.12       2619.82    
  20  0.413959     -0.881988      -627.488       627.488       2254.58       2882.07    
  21  0.807813     -0.213424      -151.840       151.840       2366.57       2518.41    
  22  0.348045      -1.05542      -750.879       750.879       2190.57       2941.45    
  23  0.435267     -0.831795      -591.778       591.778       2246.24       2838.02    
  24  0.434284     -0.834056      -593.387       593.387       2310.46       2903.85    
  25  0.983564     -0.165728E-01  -11.7907       11.7907       2338.49       2350.28    
  26  0.545923     -0.605277      -430.623       430.623       2362.77       2793.39    
  27  0.227140      -1.48219      -1054.50       1054.50       2272.57       3327.07    
  28  0.965085     -0.355395E-01  -25.2845       25.2845       2328.23       2353.52    
  29  0.183882      -1.69346      -1204.81       1204.81       2411.97       3616.78    
  30  0.187300E-02  -6.28022      -4468.04       4468.04       2371.58       6839.62    
  31  0.428736     -0.846914      -602.535       602.535       2328.11       2930.64    
  32  0.459764     -0.777041      -552.824       552.824       2127.03       2679.86    
  33  0.914786     -0.890649E-01  -63.3650       63.3650       2407.88       2471.25    
  34  0.872236     -0.136696      -97.2517       97.2517       2369.32       2466.57    
  35  0.789367     -0.236524      -168.274       168.274       2297.40       2465.67    
  36  0.619233E-01  -2.78186      -1979.15       1979.15       2301.96       4281.11    
  37  0.138004E-01  -4.28306      -3047.17       3047.17       2396.44       5443.61    
  38  0.287035      -1.24815      -887.993       887.993       2371.49       3259.48    
  39  0.138758E-01  -4.27761      -3043.29       3043.29       2145.14       5188.43    
  40  0.593330     -0.522005      -371.379       371.379       2764.54       3135.92    
  41  0.399445     -0.917679      -652.880       652.880       2245.90       2898.78    
  42  0.982947     -0.172001E-01  -12.2370       12.2370       2293.75       2305.99    
  43  0.259534      -1.34887      -959.648       959.648       2260.02       3219.67    
  44  0.816592E-01  -2.50520      -1782.32       1782.32       2353.20       4135.52    
  45  0.166083      -1.79527      -1277.24       1277.24       2288.25       3565.49    
  46  0.967370     -0.331741E-01  -23.6016       23.6016       2235.53       2259.13    
  47  0.371024     -0.991488      -705.392       705.392       2273.73       2979.12    
  48  0.941964     -0.597885E-01  -42.5364       42.5364       2546.00       2588.54    
  49  0.130219      -2.03854      -1450.31       1450.31       2371.49       3821.80    
  50  0.599455     -0.511734      -364.072       364.072       2472.78       2836.85    
  51  0.519323     -0.655230      -466.162       466.162       2528.01       2994.17    
loop,thermsimp(1:2)        8   511.295       401.797    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       2209.31          0.84          1.12         21.93          0.30          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68       2155.47          0.86          1.12         21.82          0.28          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2155.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        8
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:        9
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       67     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1730.50       1730.50       2235.53       3966.03    
   2  0.192227      -1.64908      -1173.23       1173.23       2210.51       3383.74    
   3  0.872733     -0.136126      -96.8466       96.8466       2293.75       2390.60    
   4  0.444113     -0.811675      -577.464       577.464       2338.49       2915.96    
   5  0.194382      -1.63793      -1165.30       1165.30       2328.23       3493.53    
   6  0.358074      -1.02702      -730.669       730.669       2291.81       3022.48    
   7  0.461693     -0.772855      -549.846       549.846       2362.57       2912.42    
   8  0.180202      -1.71368      -1219.19       1219.19       2297.60       3516.79    
   9  0.944954     -0.566187E-01  -40.2813       40.2813       2297.40       2337.68    
  10  0.738770     -0.302769      -215.404       215.404       2369.32       2584.73    
  11  0.822491E-01  -2.49800      -1777.20       1777.20       2407.88       4185.08    
  12  0.313602      -1.15963      -825.016       825.016       2366.57       3191.58    
  13  0.978185     -0.220567E-01  -15.6922       15.6922       2546.00       2561.69    
  14  0.540591E-01  -2.91768      -2075.77       2075.77       2317.12       4392.90    
  15  0.872885     -0.135951      -96.7220       96.7220       2284.45       2381.17    
  16  0.209079      -1.56504      -1113.44       1113.44       2127.03       3240.48    
  17  0.789205E-01  -2.53931      -1806.59       1806.59       2303.54       4110.13    
  18  0.746404     -0.292489      -208.090       208.090       2302.72       2510.81    
  19  0.110219      -2.20529      -1568.95       1568.95       2272.69       3841.64    
  20  0.656016     -0.421570      -299.925       299.925       2362.77       2662.69    
  21  0.665675     -0.406953      -289.526       289.526       2289.32       2578.85    
  22  0.563292     -0.573957      -408.340       408.340       2472.78       2881.12    
  23  0.615044     -0.486062      -345.807       345.807       2246.24       2592.05    
  24  0.128081      -2.05509      -1462.09       1462.09       2487.66       3949.75    
  25  0.459916     -0.776711      -552.589       552.589       2254.58       2807.17    
  26  0.433297     -0.836332      -595.007       595.007       2245.90       2840.90    
  27  0.225675      -1.48866      -1059.10       1059.10       2310.46       3369.56    
  28  0.808805     -0.212197      -150.967       150.967       2328.11       2479.08    
  29  0.578238     -0.547770      -389.709       389.709       2190.57       2580.28    
  30  0.569572     -0.562871      -400.453       400.453       2273.73       2674.18    
  31  0.291272      -1.23350      -877.568       877.568       2528.01       3405.58    
  32  0.144426      -1.93499      -1376.64       1376.64       2319.02       3695.66    
  33  0.908321     -0.961572E-01  -68.4108       68.4108       2353.23       2421.64    
  34  0.593166     -0.522281      -371.576       371.576       2764.54       3136.12    
  35  0.327630      -1.11587      -793.884       793.884       2260.02       3053.90    
  36  0.823214E-01  -2.49712      -1776.57       1776.57       2371.49       4148.06    
  37  0.742531     -0.297691      -211.791       211.791       2272.57       2484.36    
  38  0.476201E-01  -3.04450      -2166.00       2166.00       2525.42       4691.43    
  39  0.183829      -1.69375      -1205.01       1205.01       2382.09       3587.11    
  40  0.417257     -0.874053      -621.843       621.843       2286.61       2908.45    
  41  0.647723E-01  -2.73688      -1947.14       1947.14       2288.25       4235.40    
  42  0.123950E-01  -4.39046      -3123.58       3123.58       2411.97       5535.55    
  43  0.281372E-01  -3.57066      -2540.34       2540.34       2371.49       4911.83    
  44  0.883044     -0.124380      -88.4899       88.4899       2380.03       2468.52    
  45  0.445413     -0.808754      -575.386       575.386       2353.20       2928.59    
  46  0.418101     -0.872031      -620.404       620.404       2293.12       2913.53    
  47  0.301534      -1.19887      -852.935       852.935       2301.96       3154.90    
  48  0.674500     -0.393783      -280.156       280.156       2478.50       2758.65    
  49  0.732783     -0.310905      -221.193       221.193       2145.14       2366.33    
  50  0.970355     -0.300929E-01  -21.4096       21.4096       2396.44       2417.85    
  51  0.981589     -0.185824E-01  -13.2204       13.2204       2155.47       2168.69    
loop,thermsimp(1:2)        9   1730.50       1173.23    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69       2195.29          0.85          1.12         21.81          0.18          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70       2131.28          0.85          1.12         21.93          0.11          0.05         24.06
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2131.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:        9
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       10
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       69     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -349.562       349.562       2155.47       2505.03    
   2  0.877337     -0.130865      -93.1033       93.1033       2297.40       2390.50    
   3  0.821280     -0.196891      -140.078       140.078       2145.14       2285.21    
   4  0.989636     -0.104181E-01  -7.41193       7.41193       2284.45       2291.86    
   5  0.492813     -0.707625      -503.438       503.438       2293.75       2797.19    
   6  0.904083     -0.100835      -71.7385       71.7385       2396.44       2468.18    
   7  0.490620     -0.712086      -506.612       506.612       2353.23       2859.85    
   8  0.572439     -0.557850      -396.881       396.881       2380.03       2776.91    
   9  0.588753     -0.529749      -376.889       376.889       2328.11       2705.00    
  10  0.341799      -1.07353      -763.761       763.761       2272.57       3036.33    
  11  0.449605     -0.799385      -568.721       568.721       2302.72       2871.44    
  12  0.740720     -0.300132      -213.528       213.528       2546.00       2759.53    
  13  0.173164E-01  -4.05610      -2885.70       2885.70       2289.32       5175.03    
  14  0.828389     -0.188272      -133.946       133.946       2190.57       2324.51    
  15  0.110451      -2.20318      -1567.45       1567.45       2369.32       3936.77    
  16  0.646816     -0.435693      -309.973       309.973       2246.24       2556.21    
  17  0.857676     -0.153529      -109.228       109.228       2362.77       2471.99    
  18  0.691202E-02  -4.97449      -3539.09       3539.09       2273.73       5812.82    
  19  0.530885     -0.633210      -450.496       450.496       2478.50       2928.99    
  20  0.742957     -0.297117      -211.383       211.383       2254.58       2465.96    
  21  0.883526E-01  -2.42642      -1726.27       1726.27       2245.90       3972.17    
  22  0.599138     -0.512263      -364.448       364.448       2472.78       2837.23    
  23  0.476407     -0.741482      -527.526       527.526       2286.61       2814.14    
  24  0.509994E-01  -2.97594      -2117.23       2117.23       2362.57       4479.80    
  25  0.669768     -0.400824      -285.165       285.165       2293.12       2578.29    
  26  0.874430     -0.134183      -95.4640       95.4640       2338.49       2433.96    
  27  0.830739     -0.185440      -131.931       131.931       2353.20       2485.13    
  28  0.166673      -1.79172      -1274.72       1274.72       2291.81       3566.53    
  29  0.578742     -0.546898      -389.089       389.089       2260.02       2649.11    
  30  0.433531     -0.835791      -594.622       594.622       2764.54       3359.17    
  31  0.979127     -0.210935E-01  -15.0069       15.0069       2301.96       2316.97    
  32  0.310252      -1.17037      -832.657       832.657       2366.57       3199.22    
  33  0.686879     -0.375597      -267.218       267.218       2127.03       2394.25    
  34  0.243104      -1.41427      -1006.18       1006.18       2310.46       3316.64    
  35  0.459407     -0.777818      -553.377       553.377       2210.51       2763.88    
  36  0.332163      -1.10213      -784.107       784.107       2528.01       3312.12    
  37  0.512243     -0.668956      -475.927       475.927       2328.23       2804.16    
  38  0.323240      -1.12936      -803.481       803.481       2297.60       3101.08    
  39  0.667455     -0.404284      -287.627       287.627       2382.09       2669.72    
  40  0.460037     -0.776449      -552.403       552.403       2319.02       2871.42    
  41  0.227415      -1.48098      -1053.64       1053.64       2272.69       3326.33    
  42  0.636494     -0.451780      -321.418       321.418       2487.66       2809.08    
  43  0.432078     -0.839149      -597.010       597.010       2235.53       2832.54    
  44  0.609015     -0.495913      -352.816       352.816       2303.54       2656.36    
  45  0.427755     -0.849205      -604.164       604.164       2371.49       2975.66    
  46  0.496712     -0.699745      -497.832       497.832       2407.88       2905.71    
  47  0.295308      -1.21974      -867.779       867.779       2288.25       3156.03    
  48  0.928979     -0.736692E-01  -52.4118       52.4118       2317.12       2369.53    
  49  0.245696E-01  -3.70625      -2636.80       2636.80       2525.42       5162.22    
  50  0.833617E-01  -2.48457      -1767.64       1767.64       2371.49       4139.13    
  51  0.499690     -0.693767      -493.579       493.579       2131.28       2624.86    
loop,thermsimp(1:2)       10   349.562       93.1033    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       2433.63          0.86          1.12         21.74          0.22          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72       2478.74          0.84          1.12         21.72          0.25          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2433.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       10
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       11
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       71     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -733.244       733.244       2145.14       2878.38    
   2  0.318207      -1.14505      -814.646       814.646       2284.45       3099.09    
   3  0.410972E-01  -3.19181      -2270.81       2270.81       2301.96       4572.77    
   4  0.217948      -1.52350      -1083.89       1083.89       2190.57       3274.46    
   5  0.460755     -0.774888      -551.292       551.292       2317.12       2868.41    
   6  0.694214     -0.364975      -259.660       259.660       2297.40       2557.06    
   7  0.237764      -1.43648      -1021.98       1021.98       2127.03       3149.01    
   8  0.635477     -0.453379      -322.555       322.555       2338.49       2661.05    
   9  0.882831E-01  -2.42721      -1726.83       1726.83       2254.58       3981.41    
  10  0.889613     -0.116969      -83.2172       83.2172       2396.44       2479.66    
  11  0.236395      -1.44225      -1026.09       1026.09       2362.77       3388.85    
  12  0.785560     -0.241359      -171.714       171.714       2353.20       2524.92    
  13  0.253594      -1.37202      -976.121       976.121       2155.47       3131.59    
  14  0.767743     -0.264300      -188.036       188.036       2246.24       2434.28    
  15  0.425111     -0.855405      -608.576       608.576       2293.12       2901.70    
  16  0.334680E-01  -3.39717      -2416.90       2416.90       2131.28       4548.19    
  17  0.737903     -0.303943      -216.239       216.239       2260.02       2476.26    
  18  0.530906     -0.633170      -450.467       450.467       2303.54       2754.01    
  19  0.811772     -0.208536      -148.363       148.363       2382.09       2530.45    
  20  0.781494     -0.246548      -175.406       175.406       2328.11       2503.52    
  21  0.668871     -0.402164      -286.119       286.119       2546.00       2832.12    
  22  0.609633     -0.494898      -352.094       352.094       2210.51       2562.60    
  23  0.732795E-01  -2.61347      -1859.35       1859.35       2380.03       4239.38    
  24  0.999755     -0.244962E-03 -0.174278      0.174278       2293.75       2293.93    
  25  0.556911     -0.585350      -416.446       416.446       2328.23       2744.68    
  26  0.381942     -0.962485      -684.758       684.758       2487.66       3172.42    
  27  0.230973      -1.46546      -1042.59       1042.59       2286.61       3329.21    
  28  0.791084     -0.234351      -166.729       166.729       2235.53       2402.26    
  29  0.122039      -2.10341      -1496.47       1496.47       2472.78       3969.25    
  30  0.411383     -0.888231      -631.930       631.930       2353.23       2985.16    
  31  0.753656     -0.282819      -201.211       201.211       2319.02       2520.23    
  32  0.846821     -0.166266      -118.290       118.290       2302.72       2421.01    
  33  0.577745     -0.548622      -390.316       390.316       2407.88       2798.20    
  34  0.859903     -0.150936      -107.383       107.383       2478.50       2585.88    
  35  0.915816     -0.879395E-01  -62.5644       62.5644       2371.49       2434.06    
  36  0.220499      -1.51186      -1075.61       1075.61       2272.57       3348.18    
  37  0.539962     -0.616256      -438.434       438.434       2297.60       2736.04    
  38  0.810725     -0.209827      -149.281       149.281       2288.25       2437.54    
  39  0.901567     -0.103621      -73.7207       73.7207       2366.57       2440.29    
  40  0.196148      -1.62888      -1158.87       1158.87       2528.01       3686.87    
  41  0.413437     -0.883250      -628.386       628.386       2310.46       2938.84    
  42  0.192892      -1.64562      -1170.77       1170.77       2272.69       3443.46    
  43  0.194290      -1.63840      -1165.64       1165.64       2764.54       3930.18    
  44  0.988313     -0.117563E-01  -8.36400       8.36400       2291.81       2300.18    
  45  0.917980     -0.855792E-01  -60.8851       60.8851       2369.32       2430.21    
  46  0.136083      -1.99449      -1418.97       1418.97       2245.90       3664.87    
  47  0.847126     -0.165905      -118.033       118.033       2371.49       2489.52    
  48  0.513003     -0.667474      -474.872       474.872       2362.57       2837.45    
  49  0.562161     -0.575967      -409.770       409.770       2525.42       2935.19    
  50  0.926079     -0.767957E-01  -54.6361       54.6361       2289.32       2343.96    
  51  0.890313     -0.116182      -82.6574       82.6574       2433.63       2516.29    
loop,thermsimp(1:2)       11   733.244       814.646    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73       2260.88          0.86          1.12         21.75          0.25          0.05         24.04
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74       2288.21          0.86          1.11         21.74          0.19          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2260.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       11
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       12
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       73     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1833.61       1833.61       2293.75       4127.36    
   2  0.804470     -0.217571      -154.790       154.790       2291.81       2446.60    
   3  0.984017     -0.161120E-01  -11.4628       11.4628       2289.32       2300.79    
   4  0.587639     -0.531643      -378.236       378.236       2235.53       2613.76    
   5  0.523810     -0.646626      -460.040       460.040       2302.72       2762.76    
   6  0.930607     -0.719181E-01  -51.1659       51.1659       2369.32       2420.49    
   7  0.360114E-01  -3.32392      -2364.79       2364.79       2371.49       4736.29    
   8  0.963815     -0.368556E-01  -26.2208       26.2208       2246.24       2272.46    
   9  0.201264E-01  -3.90572      -2778.72       2778.72       2288.25       5066.97    
  10  0.954897     -0.461522E-01  -32.8349       32.8349       2366.57       2399.40    
  11  0.374160     -0.983071      -699.404       699.404       2260.02       2959.42    
  12  0.174967      -1.74316      -1240.16       1240.16       2396.44       3636.61    
  13  0.381618     -0.963335      -685.362       685.362       2371.49       3056.85    
  14  0.191097      -1.65498      -1177.43       1177.43       2328.11       3505.54    
  15  0.425287     -0.854991      -608.281       608.281       2433.63       3041.91    
  16  0.426180     -0.852893      -606.789       606.789       2319.02       2925.81    
  17  0.615671     -0.485042      -345.082       345.082       2353.20       2698.29    
  18  0.787264     -0.239192      -170.172       170.172       2382.09       2552.26    
  19  0.812636     -0.207472      -147.606       147.606       2297.40       2445.00    
  20  0.917241E-01  -2.38897      -1699.63       1699.63       2210.51       3910.13    
  21  0.671310     -0.398525      -283.529       283.529       2478.50       2762.03    
  22  0.548174     -0.601162      -427.695       427.695       2338.49       2766.19    
  23  0.134851      -2.00359      -1425.45       1425.45       2297.60       3723.05    
  24  0.373236     -0.985545      -701.164       701.164       2328.23       3029.39    
  25  0.578774     -0.546843      -389.050       389.050       2303.54       2692.59    
  26  0.910021     -0.942872E-01  -67.0804       67.0804       2407.88       2474.96    
  27  0.192323      -1.64858      -1172.88       1172.88       2546.00       3718.88    
  28  0.366342      -1.00419      -714.427       714.427       2362.57       3077.00    
  29  0.686994     -0.375430      -267.099       267.099       2317.12       2584.22    
  30  0.486551     -0.720414      -512.537       512.537       2145.14       2657.67    
  31  0.256801      -1.35945      -967.180       967.180       2293.12       3260.30    
  32  0.284977      -1.25535      -893.114       893.114       2525.42       3418.54    
  33  0.903072     -0.101953      -72.5339       72.5339       2310.46       2382.99    
  34  0.226450      -1.48523      -1056.66       1056.66       2353.23       3409.90    
  35  0.446078     -0.807261      -574.324       574.324       2284.45       2858.77    
  36  0.152634      -1.87971      -1337.32       1337.32       2155.47       3492.79    
  37  0.511955     -0.669518      -476.327       476.327       2127.03       2603.36    
  38  0.513138     -0.667210      -474.685       474.685       2487.66       2962.35    
  39  0.637309     -0.450501      -320.508       320.508       2190.57       2511.08    
  40  0.861477     -0.149107      -106.082       106.082       2286.61       2392.69    
  41  0.817364     -0.201671      -143.478       143.478       2272.57       2416.05    
  42  0.793820     -0.230898      -164.272       164.272       2362.77       2527.04    
  43  0.253309      -1.37315      -976.921       976.921       2272.69       3249.61    
  44  0.702532     -0.353065      -251.187       251.187       2245.90       2497.08    
  45  0.822324     -0.195620      -139.174       139.174       2528.01       2667.18    
  46  0.720485     -0.327831      -233.234       233.234       2764.54       2997.78    
  47  0.881589     -0.126029      -89.6633       89.6633       2472.78       2562.45    
  48  0.584479     -0.537035      -382.072       382.072       2254.58       2636.65    
  49  0.697197     -0.360688      -256.610       256.610       2380.03       2636.64    
  50  0.320931      -1.13653      -808.581       808.581       2131.28       2939.87    
  51  0.780071     -0.248371      -176.703       176.703       2260.88       2437.58    
loop,thermsimp(1:2)       12   1833.61       154.790    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75       2249.11          0.86          1.12         21.81          0.22          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     76       2368.26          0.85          1.12         21.72          0.24          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2249.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       12
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       13
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       75     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -97.0889       97.0889       2246.24       2343.33    
   2  0.311340      -1.16687      -830.167       830.167       2289.32       3119.49    
   3  0.293828      -1.22476      -871.353       871.353       2310.46       3181.81    
   4  0.586668     -0.533296      -379.412       379.412       2286.61       2666.02    
   5  0.360311      -1.02079      -726.237       726.237       2366.57       3092.80    
   6  0.315643      -1.15314      -820.400       820.400       2272.57       3092.97    
   7  0.481464     -0.730923      -520.013       520.013       2369.32       2889.34    
   8  0.720279     -0.328116      -233.438       233.438       2260.88       2494.31    
   9  0.551471     -0.595166      -423.429       423.429       2297.40       2720.82    
  10  0.524434     -0.645435      -459.193       459.193       2291.81       2751.01    
  11  0.781600     -0.246412      -175.309       175.309       2407.88       2583.19    
  12  0.353648      -1.03945      -739.516       739.516       2245.90       2985.41    
  13  0.451044     -0.796190      -566.448       566.448       2190.57       2757.02    
  14  0.325353      -1.12284      -798.844       798.844       2362.77       3161.61    
  15  0.312157      -1.16425      -828.301       828.301       2382.09       3210.39    
  16  0.432418     -0.838362      -596.451       596.451       2472.78       3069.23    
  17  0.296543      -1.21556      -864.809       864.809       2317.12       3181.93    
  18  0.705416     -0.348967      -248.272       248.272       2127.03       2375.30    
  19  0.146505      -1.92069      -1366.47       1366.47       2235.53       3602.00    
  20  0.471608     -0.751607      -534.729       534.729       2380.03       2914.76    
  21  0.633095     -0.457134      -325.227       325.227       2254.58       2579.81    
  22  0.754855     -0.281230      -200.080       200.080       2145.14       2345.22    
  23  0.444501E-01  -3.11339      -2215.01       2215.01       2528.01       4743.02    
  24  0.160973      -1.82652      -1299.47       1299.47       2303.54       3603.01    
  25  0.943694     -0.579536E-01  -41.2309       41.2309       2353.20       2394.44    
  26  0.187304      -1.67502      -1191.69       1191.69       2478.50       3670.19    
  27  0.840922     -0.173257      -123.263       123.263       2302.72       2425.98    
  28  0.888648     -0.118054      -83.9891       83.9891       2338.49       2422.48    
  29  0.920614E-01  -2.38530      -1697.02       1697.02       2284.45       3981.46    
  30  0.906493     -0.981722E-01  -69.8444       69.8444       2319.02       2388.86    
  31  0.221761      -1.50616      -1071.55       1071.55       2131.28       3202.84    
  32  0.248725      -1.39141      -989.913       989.913       2260.02       3249.93    
  33  0.315928      -1.15224      -819.760       819.760       2487.66       3307.42    
  34  0.949967     -0.513283E-01  -36.5174       36.5174       2764.54       2801.06    
  35  0.802748     -0.219715      -156.316       156.316       2328.23       2484.55    
  36  0.558987     -0.581628      -413.798       413.798       2433.63       2847.43    
  37  0.638133     -0.449209      -319.588       319.588       2371.49       2691.08    
  38  0.637852     -0.449648      -319.901       319.901       2362.57       2682.48    
  39  0.382908     -0.959961      -682.962       682.962       2272.69       2955.65    
  40  0.982834     -0.173149E-01  -12.3187       12.3187       2293.12       2305.44    
  41  0.497022     -0.699120      -497.387       497.387       2353.23       2850.62    
  42  0.263620      -1.33325      -948.535       948.535       2525.42       3473.96    
  43  0.296939      -1.21423      -863.861       863.861       2155.47       3019.33    
  44  0.784161     -0.243141      -172.982       172.982       2328.11       2501.09    
  45  0.545321     -0.606380      -431.408       431.408       2396.44       2827.85    
  46  0.770080     -0.261260      -185.873       185.873       2546.00       2731.87    
  47  0.358755      -1.02511      -729.315       729.315       2297.60       3026.92    
  48  0.325126      -1.12354      -799.342       799.342       2210.51       3009.85    
  49  0.599396     -0.511832      -364.142       364.142       2293.75       2657.89    
  50  0.323708      -1.12791      -802.452       802.452       2371.49       3173.94    
  51  0.329142      -1.11127      -790.607       790.607       2249.11       3039.72    
loop,thermsimp(1:2)       13   97.0889       830.167    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77       2137.07          0.85          1.12         21.69          0.29          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78       2209.50          0.86          1.11         21.80          0.22          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2137.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       13
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       14
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       77     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -757.962       757.962       2293.12       3051.09    
   2  0.267720      -1.31781      -937.556       937.556       2246.24       3183.80    
   3  0.279825      -1.27359      -906.094       906.094       2145.14       3051.23    
   4  0.281095      -1.26906      -902.872       902.872       2127.03       3029.90    
   5  0.245867      -1.40297      -998.137       998.137       2319.02       3317.15    
   6  0.914239     -0.896636E-01  -63.7909       63.7909       2353.20       2417.00    
   7  0.180116      -1.71415      -1219.53       1219.53       2338.49       3558.02    
   8  0.567917     -0.565780      -402.523       402.523       2302.72       2705.24    
   9  0.431941     -0.839465      -597.236       597.236       2328.23       2925.47    
  10  0.877920     -0.130199      -92.6301       92.6301       2260.88       2353.51    
  11  0.280355      -1.27170      -904.746       904.746       2328.11       3232.86    
  12  0.486947     -0.719601      -511.958       511.958       2254.58       2766.54    
  13  0.216546      -1.52995      -1088.48       1088.48       2407.88       3496.36    
  14  0.483718E-02  -5.33142      -3793.03       3793.03       2293.75       6086.78    
  15  0.785152E-03  -7.14963      -5086.59       5086.59       2286.61       7373.20    
  16  0.300781      -1.20137      -854.713       854.713       2362.57       3217.29    
  17  0.869691     -0.139618      -99.3307       99.3307       2371.49       2470.82    
  18  0.694261E-01  -2.66749      -1897.78       1897.78       2297.40       4195.18    
  19  0.635475     -0.453382      -322.558       322.558       2546.00       2868.56    
  20  0.894977     -0.110958      -78.9404       78.9404       2291.81       2370.75    
  21  0.442267     -0.815841      -580.428       580.428       2190.57       2771.00    
  22  0.283362      -1.26103      -897.156       897.156       2764.54       3661.70    
  23  0.518611     -0.656601      -467.137       467.137       2396.44       2863.58    
  24  0.858122E-01  -2.45559      -1747.03       1747.03       2433.63       4180.65    
  25  0.461153     -0.774026      -550.679       550.679       2353.23       2903.91    
  26  0.180026      -1.71465      -1219.89       1219.89       2369.32       3589.21    
  27  0.446938E-01  -3.10792      -2211.12       2211.12       2380.03       4591.15    
  28  0.152352      -1.88156      -1338.63       1338.63       2272.69       3611.32    
  29  0.163937E-01  -4.11086      -2924.66       2924.66       2245.90       5170.56    
  30  0.721347     -0.326635      -232.384       232.384       2210.51       2442.89    
  31  0.813323     -0.206626      -147.004       147.004       2155.47       2302.48    
  32  0.569343     -0.563273      -400.739       400.739       2297.60       2698.34    
  33  0.275899      -1.28772      -916.145       916.145       2249.11       3165.25    
  34  0.933187     -0.691492E-01  -49.1960       49.1960       2472.78       2521.98    
  35  0.716570     -0.333279      -237.110       237.110       2366.57       2603.68    
  36  0.405413     -0.902848      -642.329       642.329       2272.57       2914.90    
  37  0.907528     -0.970314E-01  -69.0327       69.0327       2289.32       2358.36    
  38  0.554651     -0.589416      -419.338       419.338       2362.77       2782.11    
  39  0.419962     -0.867592      -617.246       617.246       2371.49       2988.74    
  40  0.824173     -0.193375      -137.576       137.576       2310.46       2448.04    
  41  0.865647     -0.144278      -102.647       102.647       2317.12       2419.77    
  42  0.300944      -1.20083      -854.329       854.329       2131.28       2985.61    
  43  0.339688      -1.07973      -768.170       768.170       2382.09       3150.26    
  44  0.217032      -1.52771      -1086.89       1086.89       2260.02       3346.91    
  45  0.792618E-01  -2.53500      -1803.52       1803.52       2487.66       4291.18    
  46  0.997677     -0.232582E-02  -1.65470       1.65470       2525.42       2527.08    
  47  0.174239      -1.74733      -1243.13       1243.13       2235.53       3478.66    
  48  0.834084     -0.181422      -129.072       129.072       2303.54       2432.61    
  49  0.324404      -1.12577      -800.924       800.924       2478.50       3279.42    
  50  0.927598     -0.751564E-01  -53.4699       53.4699       2284.45       2337.92    
  51  0.981384     -0.187911E-01  -13.3689       13.3689       2137.07       2150.44    
loop,thermsimp(1:2)       14   757.962       937.556    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79       2245.22          0.85          1.12         21.70          0.30          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80       2377.64          0.85          1.12         21.85          0.17          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2245.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       14
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       15
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       79     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -1045.76       1045.76       2137.07       3182.82    
   2  0.322822      -1.13066      -804.402       804.402       2155.47       2959.87    
   3  0.327586      -1.11601      -793.979       793.979       2284.45       3078.43    
   4  0.799078     -0.224296      -159.575       159.575       2260.88       2420.45    
   5  0.698072     -0.359433      -255.718       255.718       2289.32       2545.04    
   6  0.733871     -0.309421      -220.137       220.137       2291.81       2511.95    
   7  0.823872     -0.193740      -137.836       137.836       2353.20       2491.04    
   8  0.800045     -0.223087      -158.715       158.715       2317.12       2475.84    
   9  0.162010      -1.82010      -1294.90       1294.90       2303.54       3598.44    
  10  0.113138      -2.17915      -1550.35       1550.35       2210.51       3760.86    
  11  0.973966     -0.263784E-01  -18.7668       18.7668       2310.46       2329.23    
  12  0.998107     -0.189521E-02  -1.34834       1.34834       2371.49       2372.84    
  13  0.631351     -0.459893      -327.190       327.190       2472.78       2799.97    
  14  0.698229     -0.359208      -255.558       255.558       2525.42       2780.98    
  15  0.359252      -1.02373      -728.331       728.331       2366.57       3094.90    
  16  0.936266     -0.658562E-01  -46.8532       46.8532       2297.60       2344.46    
  17  0.843107     -0.170662      -121.417       121.417       2302.72       2424.14    
  18  0.181284      -1.70769      -1214.93       1214.93       2254.58       3469.51    
  19  0.354246      -1.03777      -738.315       738.315       2190.57       2928.88    
  20  0.981540     -0.186324E-01  -13.2560       13.2560       2362.77       2376.02    
  21  0.582284E-01  -2.84338      -2022.92       2022.92       2396.44       4419.36    
  22  0.935088     -0.671143E-01  -47.7483       47.7483       2546.00       2593.75    
  23  0.682144     -0.382515      -272.139       272.139       2353.23       2625.37    
  24  0.441439     -0.817715      -581.761       581.761       2272.57       2854.33    
  25  0.325829      -1.12138      -797.804       797.804       2328.23       3126.04    
  26  0.956968E-01  -2.34657      -1669.46       1669.46       2131.28       3800.75    
  27  0.465124E-01  -3.06804      -2182.75       2182.75       2371.49       4554.24    
  28  0.645503     -0.437726      -311.419       311.419       2127.03       2438.45    
  29  0.184751      -1.68875      -1201.45       1201.45       2293.12       3494.58    
  30  0.676303     -0.391115      -278.258       278.258       2145.14       2423.39    
  31  0.408248     -0.895880      -637.372       637.372       2382.09       3019.46    
  32  0.215511      -1.53474      -1091.89       1091.89       2249.11       3341.00    
  33  0.762109     -0.271666      -193.276       193.276       2246.24       2439.52    
  34  0.445022     -0.809632      -576.010       576.010       2362.57       2938.58    
  35  0.667113     -0.404797      -287.991       287.991       2328.11       2616.10    
  36  0.995785     -0.422376E-02  -3.00499       3.00499       2478.50       2481.50    
  37  0.278840      -1.27712      -908.603       908.603       2319.02       3227.62    
  38  0.624255     -0.471196      -335.231       335.231       2260.02       2595.25    
  39  0.368212     -0.999097      -710.805       710.805       2235.53       2946.33    
  40  0.330266      -1.10786      -788.183       788.183       2407.88       3196.06    
  41  0.969155     -0.313304E-01  -22.2900       22.2900       2338.49       2360.78    
  42  0.686816     -0.375688      -267.282       267.282       2369.32       2636.60    
  43  0.201053      -1.60419      -1141.29       1141.29       2272.69       3413.98    
  44  0.481166     -0.731544      -520.455       520.455       2764.54       3285.00    
  45  0.992829     -0.719725E-02  -5.12046       5.12046       2433.63       2438.75    
  46  0.665697     -0.406921      -289.503       289.503       2297.40       2586.90    
  47  0.991934E-02  -4.61327      -3282.10       3282.10       2487.66       5769.76    
  48  0.211644      -1.55285      -1104.77       1104.77       2380.03       3484.80    
  49  0.908243E-01  -2.39883      -1706.64       1706.64       2245.90       3952.54    
  50  0.643762     -0.440426      -313.340       313.340       2293.75       2607.09    
  51  0.568794E-01  -2.86682      -2039.59       2039.59       2245.22       4284.82    
loop,thermsimp(1:2)       15   1045.76       804.402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       2203.38          0.86          1.12         21.70          0.30          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82       2146.80          0.85          1.11         21.77          0.19          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    2203.4        1.162     -2.255      2.858     -102.6      1.197    
                      0.8898      3.335     -99.70      3.399     0.3059    

                       2.514     -2.104      1.540      7000.      7000.    

                      -1.924      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.583     -3.236     -9.202      5.723    

                      -14.01     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3399E-01 0.2433    -0.1054E-01 0.1289    

                     -0.2486    -0.1217     0.1623     0.1034     0.8803E-01



                     -0.4121    -0.4618      0.000     0.1075    -0.1637E-01

                     -0.2403E-01 0.1660    -0.7116    -0.9116E-01 0.2649    

                      0.5582E-01-0.1719E-04-0.5845     -1.206      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.235      8.751    -0.1672E+05 -6.000    

                     -0.3523     -2.541      9.385      8.839    -0.1969E+05



                      -6.000     0.6611    -0.2928      8.896      9.088    

                     -0.1944E+05 -6.000    -0.7710    -0.5567      9.107    

                       8.808    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2146.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       15
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       16
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       81     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -415.305       415.305       2310.46       2725.76    
   2  0.850944     -0.161409      -114.834       114.834       2297.60       2412.44    
   3  0.343999      -1.06712      -759.197       759.197       2338.49       3097.69    
   4  0.481777E-02  -5.33544      -3795.89       3795.89       2371.49       6167.38    
   5  0.146991      -1.91738      -1364.12       1364.12       2362.77       3726.88    
   6  0.545677     -0.605728      -430.943       430.943       2260.88       2691.82    
   7  0.761940     -0.271888      -193.434       193.434       2145.14       2338.57    
   8  0.944477     -0.571238E-01  -40.6406       40.6406       2302.72       2343.36    
   9  0.965249     -0.353688E-01  -25.1630       25.1630       2127.03       2152.19    
  10  0.634176     -0.455429      -324.014       324.014       2433.63       2757.64    
  11  0.793205     -0.231673      -164.823       164.823       2246.24       2411.06    
  12  0.743605     -0.296246      -210.763       210.763       2317.12       2527.89    
  13  0.983069E-01  -2.31966      -1650.32       1650.32       2478.50       4128.82    
  14  0.618437     -0.480560      -341.893       341.893       2353.20       2695.10    
  15  0.429182     -0.845875      -601.795       601.795       2291.81       2893.61    
  16  0.771528     -0.259382      -184.537       184.537       2289.32       2473.86    
  17  0.218286      -1.52195      -1082.79       1082.79       2297.40       3380.18    
  18  0.556408     -0.586254      -417.089       417.089       2546.00       2963.09    
  19  0.526292     -0.641899      -456.678       456.678       2260.02       2716.70    
  20  0.665532     -0.407169      -289.679       289.679       2293.75       2583.43    
  21  0.261756      -1.34034      -953.585       953.585       2328.11       3281.69    
  22  0.975508     -0.247971E-01  -17.6418       17.6418       2353.23       2370.88    
  23  0.257613      -1.35630      -964.934       964.934       2369.32       3334.26    
  24  0.981555E-01  -2.32120      -1651.41       1651.41       2525.42       4176.84    
  25  0.955054     -0.459870E-01  -32.7173       32.7173       2472.78       2505.50    
  26  0.887906     -0.118890      -84.5839       84.5839       2272.57       2357.16    
  27  0.407043     -0.898837      -639.475       639.475       2190.57       2830.04    
  28  0.876870     -0.131396      -93.4815       93.4815       2362.57       2456.06    
  29  0.957152     -0.437935E-01  -31.1568       31.1568       2235.53       2266.69    
  30  0.827730     -0.189068      -134.512       134.512       2155.47       2289.98    
  31  0.289027      -1.24124      -883.074       883.074       2382.09       3265.17    
  32  0.125230      -2.07760      -1478.10       1478.10       2284.45       3762.55    
  33  0.242443      -1.41699      -1008.11       1008.11       2366.57       3374.68    
  34  0.654103     -0.424490      -302.002       302.002       2328.23       2630.23    
  35  0.811871     -0.208414      -148.275       148.275       2137.07       2285.34    
  36  0.145201E-01  -4.23222      -3011.00       3011.00       2407.88       5418.88    
  37  0.344449      -1.06581      -758.267       758.267       2319.02       3077.28    
  38  0.265532      -1.32602      -943.393       943.393       2764.54       3707.94    
  39  0.811851     -0.208438      -148.293       148.293       2249.11       2397.40    
  40  0.983290E-01  -2.31944      -1650.16       1650.16       2272.69       3922.85    
  41  0.347314      -1.05753      -752.375       752.375       2254.58       3006.95    
  42  0.923773     -0.792888E-01  -56.4098       56.4098       2380.03       2436.44    
  43  0.690375     -0.370520      -263.606       263.606       2293.12       2556.73    
  44  0.227523      -1.48051      -1053.30       1053.30       2303.54       3356.84    
  45  0.652275     -0.427289      -303.994       303.994       2210.51       2514.50    
  46  0.669640     -0.401014      -285.301       285.301       2131.28       2416.59    
  47  0.288804      -1.24201      -883.623       883.623       2245.90       3129.52    
  48  0.404648     -0.904738      -643.674       643.674       2245.22       2888.90    
  49  0.371042     -0.991440      -705.357       705.357       2396.44       3101.80    
  50  0.308424      -1.17628      -836.862       836.862       2371.49       3208.35    
  51  0.911221     -0.929703E-01  -66.1435       66.1435       2146.80       2212.94    
loop,thermsimp(1:2)       16   415.305       114.834    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83       2200.21          0.86          1.12         21.74          0.25          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84       2125.67          0.85          1.12         22.02          0.16          0.05         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2125.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       16
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       17
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       83     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -214.421       214.421       2127.03       2341.45    
   2  0.527958     -0.638738      -454.429       454.429       2146.80       2601.22    
   3  0.326119      -1.12049      -797.171       797.171       2235.53       3032.70    
   4  0.647061     -0.435314      -309.703       309.703       2137.07       2446.77    
   5  0.419805     -0.867966      -617.512       617.512       2155.47       2772.98    
   6  0.218417      -1.52135      -1082.36       1082.36       2145.14       3227.49    
   7  0.168864      -1.77866      -1265.42       1265.42       2302.72       3568.14    
   8  0.761417     -0.272575      -193.922       193.922       2272.57       2466.49    
   9  0.383989     -0.957143      -680.957       680.957       2353.23       3034.19    
  10  0.104774      -2.25595      -1604.99       1604.99       2249.11       3854.10    
  11  0.167912      -1.78432      -1269.45       1269.45       2246.24       3515.69    
  12  0.997930     -0.207190E-02  -1.47405       1.47405       2297.60       2299.08    
  13  0.493294     -0.706650      -502.744       502.744       2131.28       2634.03    
  14  0.483048     -0.727639      -517.677       517.677       2380.03       2897.71    
  15  0.715967     -0.334121      -237.710       237.710       2362.57       2600.28    
  16  0.595423E-01  -2.82107      -2007.04       2007.04       2289.32       4296.37    
  17  0.636569     -0.451662      -321.334       321.334       2472.78       2794.12    
  18  0.482980     -0.727779      -517.777       517.777       2210.51       2728.28    
  19  0.500121     -0.692905      -492.966       492.966       2317.12       2810.09    
  20  0.426980     -0.851018      -605.454       605.454       2293.12       2898.58    
  21  0.546576     -0.604082      -429.773       429.773       2293.75       2723.52    
  22  0.142720      -1.94687      -1385.10       1385.10       2328.23       3713.33    
  23  0.473622     -0.747346      -531.697       531.697       2260.88       2792.57    
  24  0.892718E-01  -2.41607      -1718.91       1718.91       2353.20       4072.11    
  25  0.660659     -0.414518      -294.907       294.907       2260.02       2554.93    
  26  0.328755      -1.11244      -791.445       791.445       2310.46       3101.90    
  27  0.544150     -0.608530      -432.937       432.937       2433.63       2866.57    
  28  0.199068      -1.61411      -1148.35       1148.35       2190.57       3338.92    
  29  0.685070     -0.378234      -269.094       269.094       2245.22       2514.32    
  30  0.500258     -0.692632      -492.771       492.771       2291.81       2784.58    
  31  0.130607      -2.03556      -1448.20       1448.20       2546.00       3994.19    
  32  0.982013E-01  -2.32074      -1651.08       1651.08       2254.58       3905.66    
  33  0.581494E-01  -2.84474      -2023.88       2023.88       2319.02       4342.90    
  34  0.841391     -0.172699      -122.866       122.866       2338.49       2461.36    
  35  0.838937E-01  -2.47820      -1763.11       1763.11       2396.44       4159.55    
  36  0.729848     -0.314919      -224.048       224.048       2245.90       2469.94    
  37  0.748292     -0.289962      -206.293       206.293       2371.49       2577.78    
  38  0.229216      -1.47309      -1048.03       1048.03       2382.09       3430.12    
  39  0.710713     -0.341487      -242.950       242.950       2328.11       2571.06    
  40  0.511506     -0.670395      -476.951       476.951       2369.32       2846.27    
  41  0.106756      -2.23721      -1591.65       1591.65       2303.54       3895.20    
  42  0.583466     -0.538770      -383.306       383.306       2366.57       2749.87    
  43  0.993140E-01  -2.30947      -1643.07       1643.07       2297.40       3940.46    
  44  0.461224     -0.773871      -550.568       550.568       2764.54       3315.11    
  45  0.574465     -0.554316      -394.366       394.366       2362.77       2757.13    
  46  0.715977     -0.334107      -237.700       237.700       2284.45       2522.15    
  47  0.877584     -0.130583      -92.9029       92.9029       2272.69       2365.59    
  48  0.492354     -0.708558      -504.102       504.102       2478.50       2982.60    
  49  0.874926     -0.133616      -95.0611       95.0611       2525.42       2620.49    
  50  0.800367     -0.222685      -158.429       158.429       2407.88       2566.31    
  51  0.507308     -0.678636      -482.814       482.814       2125.67       2608.48    
loop,thermsimp(1:2)       17   214.421       454.429    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85       2245.03          0.86          1.12         21.89          0.18          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86       2201.87          0.85          1.12         21.77          0.22          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2201.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       17
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       18
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       85     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -683.051       683.051       2297.60       2980.65    
   2  0.293468      -1.22599      -872.226       872.226       2127.03       2999.26    
   3  0.954036     -0.470539E-01  -33.4763       33.4763       2272.69       2306.17    
   4  0.452934     -0.792010      -563.473       563.473       2137.07       2700.54    
   5  0.251692      -1.37955      -981.477       981.477       2338.49       3319.97    
   6  0.881081     -0.126605      -90.0731       90.0731       2272.57       2362.64    
   7  0.855311     -0.156290      -111.192       111.192       2245.90       2357.09    
   8  0.576474     -0.550824      -391.882       391.882       2245.22       2637.11    
   9  0.433835     -0.835090      -594.123       594.123       2284.45       2878.57    
  10  0.298626      -1.20856      -859.830       859.830       2260.02       3119.85    
  11  0.269991      -1.30937      -931.546       931.546       2407.88       3339.43    
  12  0.884826     -0.122364      -87.0556       87.0556       2328.11       2415.17    
  13  0.664124     -0.409287      -291.186       291.186       2371.49       2662.68    
  14  0.580836     -0.543287      -386.520       386.520       2362.57       2749.09    
  15  0.285501      -1.25351      -891.806       891.806       2146.80       3038.60    
  16  0.690757     -0.369967      -263.212       263.212       2125.67       2388.88    
  17  0.578320     -0.547628      -389.609       389.609       2525.42       2915.03    
  18  0.563230     -0.574067      -408.419       408.419       2131.28       2539.70    
  19  0.681565     -0.383363      -272.743       272.743       2293.75       2566.49    
  20  0.453362     -0.791065      -562.801       562.801       2210.51       2773.31    
  21  0.645457     -0.437797      -311.470       311.470       2366.57       2678.04    
  22  0.982222E-01  -2.32052      -1650.93       1650.93       2362.77       4013.70    
  23  0.843064     -0.170712      -121.453       121.453       2155.47       2276.92    
  24  0.505683     -0.681845      -485.097       485.097       2291.81       2776.91    
  25  0.350376      -1.04875      -746.130       746.130       2260.88       3007.01    
  26  0.367167      -1.00194      -712.828       712.828       2472.78       3185.61    
  27  0.268175      -1.31611      -936.346       936.346       2317.12       3253.47    
  28  0.989085E-01  -2.31356      -1645.98       1645.98       2369.32       4015.30    
  29  0.349392      -1.05156      -748.131       748.131       2433.63       3181.76    
  30  0.945468     -0.560755E-01  -39.8947       39.8947       2380.03       2419.93    
  31  0.305400      -1.18613      -843.870       843.870       2293.12       3136.99    
  32  0.942706     -0.590006E-01  -41.9759       41.9759       2478.50       2520.47    
  33  0.778346     -0.250584      -178.277       178.277       2235.53       2413.81    
  34  0.256449      -1.36083      -968.156       968.156       2353.23       3321.39    
  35  0.338120      -1.08436      -771.462       771.462       2310.46       3081.92    
  36  0.644609     -0.439112      -312.405       312.405       2145.14       2457.54    
  37  0.420837     -0.865509      -615.764       615.764       2764.54       3380.31    
  38  0.793406     -0.231421      -164.644       164.644       2190.57       2355.21    
  39  0.685561     -0.377517      -268.584       268.584       2382.09       2650.67    
  40  0.278740      -1.27748      -908.858       908.858       2246.24       3155.10    
  41  0.414078     -0.881700      -627.284       627.284       2302.72       2930.00    
  42  0.999720     -0.280334E-03 -0.199443      0.199443       2328.23       2328.43    
  43  0.714259     -0.336509      -239.409       239.409       2249.11       2488.52    
  44  0.713371     -0.337753      -240.294       240.294       2303.54       2543.83    
  45  0.451360     -0.795490      -565.950       565.950       2254.58       2820.53    
  46  0.887280     -0.119595      -85.0856       85.0856       2297.40       2382.48    
  47  0.234319      -1.45107      -1032.36       1032.36       2546.00       3578.36    
  48  0.277567E-01  -3.58428      -2550.03       2550.03       2353.20       4903.23    
  49  0.582411     -0.540579      -384.593       384.593       2396.44       2781.03    
  50  0.969019     -0.314707E-01  -22.3897       22.3897       2289.32       2311.71    
  51  0.441889     -0.816696      -581.036       581.036       2201.87       2782.91    
loop,thermsimp(1:2)       18   683.051       872.226    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87       2368.05          0.86          1.12         21.70          0.29          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88       4603.50          0.86          1.12         21.78          0.19          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2368.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       18
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       19
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       87     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -740.837       740.837       2155.47       2896.31    
   2  0.270835E-01  -3.60883      -2567.49       2567.49       2272.69       4840.18    
   3  0.923755     -0.793087E-01  -56.4240       56.4240       2289.32       2345.75    
   4  0.535520     -0.624517      -444.311       444.311       2328.23       2772.54    
   5  0.629344     -0.463078      -329.455       329.455       2190.57       2520.02    
   6  0.572648E-01  -2.86007      -2034.79       2034.79       2245.90       4280.68    
   7  0.353113E-01  -3.34355      -2378.76       2378.76       2272.57       4651.33    
   8  0.580838     -0.543283      -386.517       386.517       2297.40       2683.91    
   9  0.370403     -0.993164      -706.584       706.584       2125.67       2832.25    
  10  0.443010     -0.814162      -579.233       579.233       2235.53       2814.76    
  11  0.188704      -1.66757      -1186.39       1186.39       2328.11       3514.50    
  12  0.177608      -1.72818      -1229.51       1229.51       2380.03       3609.54    
  13  0.694998     -0.363847      -258.858       258.858       2145.14       2403.99    
  14  0.160742      -1.82796      -1300.49       1300.49       2249.11       3549.60    
  15  0.290050      -1.23770      -880.560       880.560       2478.50       3359.06    
  16  0.441138E-01  -3.12098      -2220.41       2220.41       2131.28       4351.70    
  17  0.372461     -0.987622      -702.641       702.641       2303.54       3006.18    
  18  0.652779     -0.426517      -303.444       303.444       2293.75       2597.20    
  19  0.998108     -0.189387E-02  -1.34739       1.34739       2245.22       2246.57    
  20  0.741140     -0.299566      -213.126       213.126       2382.09       2595.22    
  21  0.623042     -0.473141      -336.615       336.615       2371.49       2708.11    
  22  0.504617     -0.683955      -486.598       486.598       2366.57       2853.17    
  23  0.872499     -0.136394      -97.0372       97.0372       2137.07       2234.11    
  24  0.142620      -1.94757      -1385.59       1385.59       2362.57       3748.17    
  25  0.580285     -0.544236      -387.195       387.195       2210.51       2597.70    
  26  0.860063E-01  -2.45334      -1745.42       1745.42       2291.81       4037.23    
  27  0.401846     -0.911687      -648.617       648.617       2396.44       3045.06    
  28  0.161242      -1.82485      -1298.29       1298.29       2201.87       3500.16    
  29  0.550753     -0.596469      -424.357       424.357       2254.58       2678.93    
  30  0.815012     -0.204553      -145.528       145.528       2284.45       2429.98    
  31  0.438663     -0.824024      -586.249       586.249       2525.42       3111.67    
  32  0.542283     -0.611968      -435.383       435.383       2302.72       2738.10    
  33  0.943132E-01  -2.36113      -1679.82       1679.82       2297.60       3977.43    
  34  0.236587      -1.44144      -1025.51       1025.51       2127.03       3152.54    
  35  0.283068      -1.26207      -897.895       897.895       2260.88       3158.77    
  36  0.973178     -0.271886E-01  -19.3433       19.3433       2146.80       2166.14    
  37  0.596723     -0.516302      -367.321       367.321       2310.46       2677.78    
  38  0.595114     -0.519003      -369.243       369.243       2260.02       2629.26    
  39  0.948736     -0.526250E-01  -37.4399       37.4399       2293.12       2330.56    
  40  0.216072E-01  -3.83473      -2728.21       2728.21       2246.24       4974.45    
  41  0.440213     -0.820496      -583.740       583.740       2433.63       3017.37    
  42  0.905197     -0.996023E-01  -70.8618       70.8618       2472.78       2543.64    
  43  0.158396      -1.84266      -1310.96       1310.96       2317.12       3628.08    
  44  0.287789      -1.24553      -886.127       886.127       2338.49       3224.62    
  45  0.238244      -1.43446      -1020.54       1020.54       2353.23       3373.78    
  46  0.363881      -1.01093      -719.222       719.222       2407.88       3127.10    
  47  0.828805     -0.187771      -133.589       133.589       2764.54       2898.13    
  48  0.587140     -0.532492      -378.840       378.840       2546.00       2924.84    
  49  0.141687      -1.95414      -1390.27       1390.27       2362.77       3753.03    
  50  0.879115     -0.128839      -91.6622       91.6622       2369.32       2460.98    
  51  0.742190     -0.298150      -212.118       212.118       2368.05       2580.17    
loop,thermsimp(1:2)       19   740.837       2567.49    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89       2386.98          0.86          1.12         21.73          0.28          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90       2743.20          0.85          1.11         21.75          0.21          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2386.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       19
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       20
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       89     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -445.340       445.340       2146.80       2592.14    
   2  0.288348      -1.24359      -884.748       884.748       2137.07       3021.82    
   3  0.910112E-01  -2.39677      -1705.18       1705.18       2245.22       3950.40    
   4  0.213812      -1.54266      -1097.52       1097.52       2293.12       3390.64    
   5  0.575222     -0.552999      -393.430       393.430       2289.32       2682.75    
   6  0.855707     -0.155827      -110.863       110.863       2145.14       2256.00    
   7  0.818692     -0.200047      -142.323       142.323       2284.45       2426.77    
   8  0.309911      -1.17147      -833.440       833.440       2369.32       3202.76    
   9  0.773438     -0.256910      -182.778       182.778       2190.57       2373.35    
  10  0.440502E-01  -3.12243      -2221.44       2221.44       2472.78       4694.22    
  11  0.211655      -1.55280      -1104.73       1104.73       2368.05       3472.78    
  12  0.713577     -0.337465      -240.089       240.089       2382.09       2622.18    
  13  0.927405     -0.753650E-01  -53.6183       53.6183       2293.75       2347.37    
  14  0.360229      -1.02101      -726.398       726.398       2210.51       2936.91    
  15  0.911872     -0.922553E-01  -65.6348       65.6348       2260.02       2325.65    
  16  0.800691     -0.222280      -158.141       158.141       2310.46       2468.60    
  17  0.169830      -1.77296      -1261.37       1261.37       2254.58       3515.95    
  18  0.581014     -0.542980      -386.302       386.302       2297.40       2683.70    
  19  0.869395     -0.139958      -99.5725       99.5725       2371.49       2471.06    
  20  0.773880     -0.256338      -182.371       182.371       2302.72       2485.09    
  21  0.496085     -0.701008      -498.731       498.731       2328.23       2826.96    
  22  0.530037     -0.634809      -451.633       451.633       2235.53       2687.16    
  23  0.239414      -1.42956      -1017.06       1017.06       2125.67       3142.72    
  24  0.595728     -0.517972      -368.510       368.510       2366.57       2735.08    
  25  0.170793      -1.76730      -1257.34       1257.34       2155.47       3412.82    
  26  0.983027     -0.171183E-01  -12.1788       12.1788       2764.54       2776.72    
  27  0.608714     -0.496407      -353.167       353.167       2546.00       2899.17    
  28  0.518727     -0.656378      -466.979       466.979       2303.54       2770.52    
  29  0.887918     -0.118876      -84.5739       84.5739       2433.63       2518.20    
  30  0.140498      -1.96256      -1396.26       1396.26       2396.44       3792.70    
  31  0.256308      -1.36138      -968.547       968.547       2525.42       3493.97    
  32  0.887238     -0.119642      -85.1188       85.1188       2407.88       2493.00    
  33  0.306042      -1.18403      -842.377       842.377       2127.03       2969.41    
  34  0.993873     -0.614632E-02  -4.37278       4.37278       2260.88       2265.25    
  35  0.275412E-01  -3.59207      -2555.57       2555.57       2338.49       4894.06    
  36  0.698960     -0.358161      -254.813       254.813       2478.50       2733.31    
  37  0.268424      -1.31519      -935.686       935.686       2353.23       3288.92    
  38  0.580935E-01  -2.84570      -2024.57       2024.57       2201.87       4226.44    
  39  0.242705      -1.41591      -1007.34       1007.34       2328.11       3335.45    
  40  0.443517     -0.813019      -578.420       578.420       2249.11       2827.53    
  41  0.904179     -0.100728      -71.6625       71.6625       2380.03       2451.69    
  42  0.454025     -0.789603      -561.761       561.761       2317.12       2878.88    
  43  0.592994     -0.522572      -371.782       371.782       2362.57       2734.36    
  44  0.401796     -0.911812      -648.706       648.706       2362.77       3011.47    
  45  0.130776      -2.03427      -1447.28       1447.28       2297.60       3744.88    
  46  0.709753     -0.342839      -243.912       243.912       2291.81       2535.72    
  47  0.388071     -0.946568      -673.433       673.433       2245.90       2919.33    
  48  0.362521      -1.01467      -721.886       721.886       2131.28       2853.17    
  49  0.285379      -1.25394      -892.110       892.110       2272.57       3164.68    
  50  0.286508      -1.24999      -889.301       889.301       2272.69       3161.99    
  51  0.951542     -0.496714E-01  -35.3386       35.3386       2386.98       2422.32    
loop,thermsimp(1:2)       20   445.340       884.748    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91       2244.85          0.86          1.12         21.73          0.27          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     92       2439.19          0.85          1.11         21.79          0.21          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2244.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       20
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       21
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       91     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -862.704       862.704       2145.14       3007.84    
   2  0.663536     -0.410173      -291.816       291.816       2260.88       2552.69    
   3  0.263982      -1.33188      -947.560       947.560       2260.02       3207.58    
   4  0.792402     -0.232686      -165.544       165.544       2293.75       2459.30    
   5  0.624731     -0.470434      -334.689       334.689       2190.57       2525.26    
   6  0.170977      -1.76622      -1256.58       1256.58       2386.98       3643.55    
   7  0.362487      -1.01477      -721.954       721.954       2284.45       3006.40    
   8  0.659245     -0.416659      -296.431       296.431       2380.03       2676.46    
   9  0.746481E-03  -7.20014      -5122.52       5122.52       2310.46       7432.98    
  10  0.690046     -0.370998      -263.945       263.945       2371.49       2635.44    
  11  0.905636     -0.991173E-01  -70.5167       70.5167       2302.72       2373.24    
  12  0.317643      -1.14683      -815.908       815.908       2407.88       3223.79    
  13  0.321948      -1.13336      -806.330       806.330       2433.63       3239.96    
  14  0.293974      -1.22426      -871.000       871.000       2291.81       3162.81    
  15  0.679275     -0.386729      -275.137       275.137       2146.80       2421.93    
  16  0.180340      -1.71291      -1218.65       1218.65       2382.09       3600.74    
  17  0.539600     -0.616927      -438.911       438.911       2289.32       2728.24    
  18  0.260315      -1.34586      -957.510       957.510       2297.40       3254.90    
  19  0.256777      -1.35955      -967.246       967.246       2235.53       3202.77    
  20  0.518851     -0.656138      -466.808       466.808       2478.50       2945.31    
  21  0.485887     -0.721780      -513.508       513.508       2362.57       2876.08    
  22  0.562814     -0.574805      -408.944       408.944       2366.57       2775.51    
  23  0.906369     -0.983082E-01  -69.9412       69.9412       2303.54       2373.48    
  24  0.332143      -1.10219      -784.150       784.150       2764.54       3548.69    
  25  0.912001E-01  -2.39470      -1703.70       1703.70       2328.23       4031.93    
  26  0.302569      -1.19545      -850.497       850.497       2249.11       3099.61    
  27  0.362040      -1.01600      -722.831       722.831       2131.28       2854.12    
  28  0.630870     -0.460656      -327.732       327.732       2317.12       2644.85    
  29  0.685312     -0.377881      -268.842       268.842       2546.00       2814.84    
  30  0.329910      -1.10894      -788.950       788.950       2245.90       3034.85    
  31  0.906630E-01  -2.40061      -1707.90       1707.90       2210.51       3918.41    
  32  0.339749      -1.07955      -768.043       768.043       2127.03       2895.07    
  33  0.783039     -0.244573      -174.001       174.001       2362.77       2536.77    
  34  0.322673      -1.13112      -804.730       804.730       2137.07       2941.80    
  35  0.255311      -1.36527      -971.319       971.319       2125.67       3096.98    
  36  0.645921     -0.437078      -310.958       310.958       2272.69       2583.65    
  37  0.240122      -1.42661      -1014.96       1014.96       2272.57       3287.53    
  38  0.224638      -1.49326      -1062.38       1062.38       2369.32       3431.70    
  39  0.682659     -0.381760      -271.602       271.602       2353.23       2624.84    
  40  0.533856     -0.627629      -446.525       446.525       2328.11       2774.63    
  41  0.439620E-02  -5.42701      -3861.04       3861.04       2293.12       6154.16    
  42  0.409891     -0.891863      -634.514       634.514       2155.47       2789.99    
  43  0.379406     -0.969149      -689.499       689.499       2368.05       3057.55    
  44  0.982111     -0.180514E-01  -12.8426       12.8426       2525.42       2538.27    
  45  0.243530      -1.41251      -1004.93       1004.93       2254.58       3259.51    
  46  0.709323     -0.343445      -244.343       244.343       2297.60       2541.94    
  47  0.212014      -1.55110      -1103.53       1103.53       2396.44       3499.97    
  48  0.530919     -0.633146      -450.450       450.450       2245.22       2695.67    
  49  0.439600     -0.821890      -584.732       584.732       2201.87       2786.60    
  50  0.304385      -1.18946      -846.239       846.239       2472.78       3319.02    
  51  0.850253     -0.162221      -115.412       115.412       2244.85       2360.26    
loop,thermsimp(1:2)       21   862.704       291.816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93       2264.20          0.86          1.11         21.89          0.18          0.05         24.08
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     94       2538.85          0.85          1.11         21.67          0.32          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2264.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       21
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       22
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       93     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -681.545       681.545       2244.85       2926.40    
   2  0.741480     -0.299107      -212.799       212.799       2302.72       2515.52    
   3  0.138898      -1.97401      -1404.41       1404.41       2303.54       3707.95    
   4  0.751974E-01  -2.58764      -1840.97       1840.97       2146.80       3987.77    
   5  0.824485     -0.192996      -137.307       137.307       2293.75       2431.06    
   6  0.982900     -0.172482E-01  -12.2712       12.2712       2190.57       2202.84    
   7  0.693409     -0.366136      -260.486       260.486       2362.77       2623.25    
   8  0.941572     -0.602045E-01  -42.8323       42.8323       2525.42       2568.26    
   9  0.812713     -0.207378      -147.538       147.538       2297.60       2445.14    
  10  0.879507     -0.128393      -91.3451       91.3451       2260.88       2352.22    
  11  0.418958     -0.869984      -618.948       618.948       2272.69       2891.64    
  12  0.314952      -1.15533      -821.959       821.959       2353.23       3175.19    
  13  0.812426     -0.207731      -147.790       147.790       2371.49       2519.28    
  14  0.213788      -1.54277      -1097.60       1097.60       2317.12       3414.72    
  15  0.521629     -0.650798      -463.009       463.009       2380.03       2843.04    
  16  0.287143      -1.24777      -887.726       887.726       2245.22       3132.95    
  17  0.518340     -0.657125      -467.510       467.510       2289.32       2756.83    
  18  0.712802E-02  -4.94372      -3517.20       3517.20       2328.11       5845.31    
  19  0.579935     -0.544838      -387.624       387.624       2366.57       2754.19    
  20  0.508101E-02  -5.28224      -3758.04       3758.04       2201.87       5959.91    
  21  0.984466     -0.156557E-01  -11.1382       11.1382       2155.47       2166.61    
  22  0.394325     -0.930579      -662.058       662.058       2546.00       3208.06    
  23  0.837309     -0.177562      -126.326       126.326       2131.28       2257.61    
  24  0.683519     -0.380501      -270.706       270.706       2362.57       2633.28    
  25  0.892337     -0.113912      -81.0423       81.0423       2127.03       2208.07    
  26  0.297675      -1.21175      -862.099       862.099       2137.07       2999.17    
  27  0.566054     -0.569065      -404.860       404.860       2478.50       2883.36    
  28  0.325499E-01  -3.42498      -2436.69       2436.69       2284.45       4721.14    
  29  0.721169     -0.326882      -232.559       232.559       2145.14       2377.69    
  30  0.370449     -0.993040      -706.496       706.496       2245.90       2952.39    
  31  0.398952     -0.918913      -653.759       653.759       2368.05       3021.81    
  32  0.942469     -0.592518E-01  -42.1546       42.1546       2125.67       2167.82    
  33  0.379045     -0.970101      -690.176       690.176       2249.11       2939.29    
  34  0.218373      -1.52155      -1082.50       1082.50       2291.81       3374.32    
  35  0.413944     -0.882024      -627.513       627.513       2235.53       2863.04    
  36  0.452532     -0.792896      -564.104       564.104       2260.02       2824.12    
  37  0.938896     -0.630505E-01  -44.8571       44.8571       2407.88       2452.74    
  38  0.389299     -0.943409      -671.186       671.186       2433.63       3104.81    
  39  0.943794     -0.578471E-01  -41.1552       41.1552       2297.40       2338.55    
  40  0.706887     -0.346884      -246.790       246.790       2254.58       2501.37    
  41  0.274873      -1.29145      -918.796       918.796       2272.57       3191.37    
  42  0.343864      -1.06751      -759.477       759.477       2472.78       3232.26    
  43  0.869527E-01  -2.44239      -1737.63       1737.63       2369.32       4106.96    
  44  0.859615     -0.151271      -107.621       107.621       2396.44       2504.06    
  45  0.264079      -1.33151      -947.297       947.297       2764.54       3711.84    
  46  0.494871     -0.703457      -500.473       500.473       2382.09       2882.56    
  47  0.112943      -2.18087      -1551.58       1551.58       2386.98       3938.56    
  48  0.358273      -1.02646      -730.273       730.273       2210.51       2940.78    
  49  0.215257      -1.53592      -1092.73       1092.73       2328.23       3420.96    
  50  0.441681     -0.817166      -581.371       581.371       2293.12       2874.49    
  51  0.888276     -0.118473      -84.2874       84.2874       2264.20       2348.48    
loop,thermsimp(1:2)       22   681.545       212.799    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95       2703.12          0.86          1.09         21.81          0.27          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2703.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       22
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       23
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       94     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -793.827       793.827       2155.47       2949.30    
   2  0.736029     -0.306486      -218.048       218.048       2125.67       2343.71    
   3  0.608436     -0.496864      -353.493       353.493       2190.57       2544.06    
   4  0.584882     -0.536346      -381.582       381.582       2127.03       2508.61    
   5  0.617514     -0.482053      -342.955       342.955       2131.28       2474.24    
   6  0.376473     -0.976909      -695.019       695.019       2297.40       2992.41    
   7  0.535145     -0.625218      -444.810       444.810       2264.20       2709.01    
   8  0.341783      -1.07358      -763.795       763.795       2260.88       3024.67    
   9  0.804208E-01  -2.52048      -1793.19       1793.19       2145.14       3938.33    
  10  0.660499     -0.414760      -295.080       295.080       2293.75       2588.83    
  11  0.739860E-01  -2.60388      -1852.52       1852.52       2297.60       4150.13    
  12  0.203251      -1.59331      -1133.56       1133.56       2407.88       3541.44    
  13  0.637025     -0.450946      -320.824       320.824       2254.58       2575.40    
  14  0.687460     -0.374752      -266.616       266.616       2396.44       2663.06    
  15  0.663581     -0.410105      -291.768       291.768       2302.72       2594.49    
  16  0.579690     -0.545263      -387.926       387.926       2371.49       2759.42    
  17  0.775653     -0.254050      -180.744       180.744       2525.42       2706.17    
  18  0.284124      -1.25834      -895.245       895.245       2362.77       3258.01    
  19  0.317710      -1.14662      -815.757       815.757       2362.57       3178.33    
  20  0.958871     -0.419990E-01  -29.8801       29.8801       2366.57       2396.45    
  21  0.582932     -0.539685      -383.958       383.958       2289.32       2673.28    
  22  0.905476     -0.992942E-01  -70.6426       70.6426       2260.02       2330.66    
  23  0.225214      -1.49070      -1060.56       1060.56       2380.03       3440.59    
  24  0.618260     -0.480846      -342.096       342.096       2235.53       2577.62    
  25  0.608706     -0.496420      -353.177       353.177       2293.12       2646.30    
  26  0.651052     -0.429165      -305.328       305.328       2382.09       2687.42    
  27  0.138439E-02  -6.58249      -4683.10       4683.10       2478.50       7161.60    
  28  0.157375      -1.84913      -1315.56       1315.56       2272.69       3588.25    
  29  0.168063      -1.78342      -1268.81       1268.81       2244.85       3513.66    
  30  0.924354     -0.786598E-01  -55.9623       55.9623       2249.11       2305.07    
  31  0.985585     -0.145204E-01  -10.3305       10.3305       2210.51       2220.84    
  32  0.540844E-01  -2.91721      -2075.44       2075.44       2245.90       4321.34    
  33  0.535345     -0.624843      -444.543       444.543       2137.07       2581.61    
  34  0.736351     -0.306048      -217.737       217.737       2368.05       2585.79    
  35  0.283062E-01  -3.56467      -2536.08       2536.08       2433.63       4969.71    
  36  0.690743     -0.369987      -263.226       263.226       2245.22       2508.45    
  37  0.260994      -1.34326      -955.656       955.656       2353.23       3308.89    
  38  0.243637      -1.41208      -1004.62       1004.62       2272.57       3277.19    
  39  0.850226     -0.162253      -115.435       115.435       2546.00       2661.43    
  40  0.589307     -0.528809      -376.220       376.220       2472.78       2849.00    
  41  0.515087     -0.663420      -471.989       471.989       2291.81       2763.80    
  42  0.348855      -1.05310      -749.225       749.225       2317.12       3066.35    
  43  0.791407     -0.233943      -166.438       166.438       2328.23       2494.67    
  44  0.370775     -0.992160      -705.869       705.869       2303.54       3009.41    
  45  0.676021     -0.391531      -278.554       278.554       2764.54       3043.10    
  46  0.125601      -2.07465      -1476.00       1476.00       2386.98       3862.98    
  47  0.582904     -0.539733      -383.992       383.992       2146.80       2530.79    
  48  0.818994     -0.199679      -142.061       142.061       2369.32       2511.38    
  49  0.291406      -1.23304      -877.242       877.242       2284.45       3161.69    
  50  0.887104     -0.119794      -85.2268       85.2268       2328.11       2413.34    
  51  0.666242     -0.406102      -288.920       288.920       2703.12       2992.04    
loop,thermsimp(1:2)       23   793.827       218.048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       2162.21          0.85          1.11         22.05          0.12          0.05         24.20
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97       2131.91          0.85          1.11         22.05          0.18          0.05         24.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2131.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       23
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       24
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       96     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -877.007       877.007       2210.51       3087.51    
   2  0.991852     -0.818183E-02  -5.82094       5.82094       2249.11       2254.93    
   3  0.317368      -1.14769      -816.524       816.524       2260.02       3076.54    
   4  0.737330     -0.304720      -216.792       216.792       2125.67       2342.46    
   5  0.834641     -0.180753      -128.596       128.596       2366.57       2495.16    
   6  0.464401     -0.767007      -545.686       545.686       2328.11       2873.80    
   7  0.592116     -0.524053      -372.836       372.836       2131.28       2504.12    
   8  0.464372     -0.767069      -545.729       545.729       2328.23       2873.96    
   9  0.636055E-01  -2.75505      -1960.08       1960.08       2245.22       4205.30    
  10  0.712927     -0.338376      -240.737       240.737       2127.03       2367.77    
  11  0.265597      -1.32578      -943.220       943.220       2369.32       3312.54    
  12  0.152318      -1.88178      -1338.79       1338.79       2146.80       3485.59    
  13  0.629580     -0.462703      -329.189       329.189       2190.57       2519.76    
  14  0.849464     -0.163150      -116.072       116.072       2254.58       2370.65    
  15  0.487816     -0.717817      -510.689       510.689       2235.53       2746.22    
  16  0.374667     -0.981718      -698.441       698.441       2137.07       2835.51    
  17  0.657383     -0.419488      -298.444       298.444       2368.05       2666.49    
  18  0.846901     -0.166172      -118.222       118.222       2293.75       2411.97    
  19  0.201185      -1.60353      -1140.83       1140.83       2302.72       3443.55    
  20  0.771980     -0.258797      -184.120       184.120       2293.12       2477.24    
  21  0.507739     -0.677788      -482.211       482.211       2546.00       3028.21    
  22  0.280262      -1.27203      -904.984       904.984       2396.44       3301.43    
  23  0.285359      -1.25401      -892.161       892.161       2289.32       3181.48    
  24  0.246191      -1.40165      -997.197       997.197       2382.09       3379.29    
  25  0.559989E-01  -2.88242      -2050.69       2050.69       2525.42       4576.12    
  26  0.330462      -1.10726      -787.760       787.760       2264.20       3051.96    
  27  0.899405     -0.106022      -75.4292       75.4292       2371.49       2446.92    
  28  0.637003     -0.450981      -320.849       320.849       2291.81       2612.66    
  29  0.699726E-01  -2.65965      -1892.20       1892.20       2472.78       4364.98    
  30  0.677191     -0.389802      -277.324       277.324       2155.47       2432.80    
  31  0.649507     -0.431542      -307.019       307.019       2703.12       3010.14    
  32  0.527986     -0.638685      -454.391       454.391       2297.40       2751.79    
  33  0.374870E-01  -3.28376      -2336.22       2336.22       2303.54       4639.77    
  34  0.448697     -0.801407      -570.159       570.159       2260.88       2831.04    
  35  0.809612     -0.211200      -150.258       150.258       2764.54       2914.80    
  36  0.836235     -0.178846      -127.239       127.239       2317.12       2444.36    
  37  0.198161      -1.61867      -1151.60       1151.60       2284.45       3436.05    
  38  0.222702      -1.50192      -1068.54       1068.54       2362.57       3431.11    
  39  0.888863     -0.117812      -83.8170       83.8170       2362.77       2446.58    
  40  0.868267     -0.141256      -100.496       100.496       2272.57       2373.07    
  41  0.164066      -1.80749      -1285.93       1285.93       2353.23       3639.17    
  42  0.163797      -1.80912      -1287.10       1287.10       2380.03       3667.13    
  43  0.883498     -0.123867      -88.1246       88.1246       2244.85       2332.98    
  44  0.749983     -0.287705      -204.687       204.687       2407.88       2612.57    
  45  0.666691     -0.405428      -288.441       288.441       2272.69       2561.13    
  46  0.978530     -0.217038E-01  -15.4411       15.4411       2386.98       2402.42    
  47  0.442024     -0.816391      -580.820       580.820       2145.14       2725.95    
  48  0.228080      -1.47806      -1051.56       1051.56       2297.60       3349.16    
  49  0.226174      -1.48645      -1057.53       1057.53       2245.90       3303.43    
  50  0.388394     -0.945736      -672.842       672.842       2433.63       3106.47    
  51  0.257425      -1.35703      -965.452       965.452       2131.91       3097.36    
loop,thermsimp(1:2)       24   877.007       5.82094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98       2322.59          0.86          1.12         22.09          0.02          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99       2578.12          0.85          1.11         21.90          0.11          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2322.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       24
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       25
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       98     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -1369.41       1369.41       2249.11       3618.52    
   2  0.438196     -0.825090      -587.008       587.008       2244.85       2831.86    
   3  0.637359     -0.450422      -320.452       320.452       2125.67       2446.12    
   4  0.122813      -2.09709      -1491.97       1491.97       2127.03       3619.00    
   5  0.926899     -0.759107E-01  -54.0065       54.0065       2254.58       2308.58    
   6  0.456580     -0.783992      -557.769       557.769       2272.57       2830.34    
   7  0.988763     -0.113008E-01  -8.03996       8.03996       2386.98       2395.02    
   8  0.499609     -0.693930      -493.695       493.695       2293.75       2787.45    
   9  0.432617     -0.837902      -596.123       596.123       2155.47       2751.59    
  10  0.403570     -0.907406      -645.572       645.572       2317.12       2962.69    
  11  0.435824     -0.830517      -590.869       590.869       2362.77       2953.64    
  12  0.504807     -0.683579      -486.330       486.330       2371.49       2857.82    
  13  0.778763     -0.250048      -177.896       177.896       2293.12       2471.02    
  14  0.429140     -0.845972      -601.865       601.865       2366.57       2968.43    
  15  0.597763     -0.514562      -366.084       366.084       2131.28       2497.37    
  16  0.425932     -0.853476      -607.203       607.203       2190.57       2797.77    
  17  0.825778     -0.191430      -136.192       136.192       2272.69       2408.88    
  18  0.448772     -0.801241      -570.041       570.041       2407.88       2977.92    
  19  0.701335     -0.354770      -252.400       252.400       2291.81       2544.21    
  20  0.425857     -0.853651      -607.328       607.328       2368.05       2975.38    
  21  0.800815     -0.222126      -158.031       158.031       2145.14       2303.17    
  22  0.724239     -0.322634      -229.537       229.537       2235.53       2465.07    
  23  0.312194      -1.16413      -828.218       828.218       2297.40       3125.61    
  24  0.796592     -0.227412      -161.792       161.792       2260.88       2422.67    
  25  0.164146      -1.80700      -1285.59       1285.59       2137.07       3422.66    
  26  0.503041     -0.687083      -488.823       488.823       2328.11       2816.93    
  27  0.640838     -0.444978      -316.579       316.579       2328.23       2644.81    
  28  0.327752      -1.11550      -793.618       793.618       2764.54       3558.16    
  29  0.720325     -0.328053      -233.393       233.393       2703.12       2936.51    
  30  0.447570     -0.803922      -571.948       571.948       2546.00       3117.95    
  31  0.377461     -0.974289      -693.155       693.155       2264.20       2957.35    
  32  0.951264     -0.499633E-01  -35.5463       35.5463       2260.02       2295.57    
  33  0.610405     -0.493632      -351.194       351.194       2210.51       2561.70    
  34  0.564697     -0.571466      -406.568       406.568       2131.91       2538.48    
  35  0.993998     -0.601974E-02  -4.28273       4.28273       2433.63       2437.91    
  36  0.908032     -0.964757E-01  -68.6374       68.6374       2289.32       2357.96    
  37  0.731210     -0.313055      -222.722       222.722       2396.44       2619.16    
  38  0.818812     -0.199901      -142.219       142.219       2245.90       2388.11    
  39  0.423172     -0.859976      -611.828       611.828       2369.32       2981.15    
  40  0.554414     -0.589843      -419.643       419.643       2297.60       2717.24    
  41  0.244903E-01  -3.70948      -2639.10       2639.10       2382.09       5021.19    
  42  0.337898      -1.08501      -771.928       771.928       2362.57       3134.50    
  43  0.634521E-01  -2.75747      -1961.80       1961.80       2284.45       4246.24    
  44  0.824978     -0.192398      -136.881       136.881       2302.72       2439.60    
  45  0.954123     -0.469622E-01  -33.4111       33.4111       2146.80       2180.21    
  46  0.807852     -0.213376      -151.806       151.806       2353.23       2505.04    
  47  0.335430      -1.09234      -777.143       777.143       2380.03       3157.18    
  48  0.266194      -1.32353      -941.623       941.623       2245.22       3186.85    
  49  0.797818     -0.225874      -160.698       160.698       2472.78       2633.48    
  50  0.710601     -0.341644      -243.062       243.062       2525.42       2768.49    
  51  0.469059     -0.757026      -538.584       538.584       2322.59       2861.17    
loop,thermsimp(1:2)       25   1369.41       587.008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       2164.09          0.85          1.11         21.96          0.08          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101       2174.30          0.84          1.11         21.78          0.23          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    2174.3       0.8539     -2.134      2.550     -102.6      1.470    
                      0.9664      1.858     -99.70      3.091     0.6766    

                       3.234     -2.412      1.540      7000.      7000.    

                      -1.769      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -20.21     -2.465     -10.35      4.333    

                      -13.24     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.8021E-01 0.2209     0.3568E-01 0.8450E-01

                     -0.2486    -0.1326     0.2086     0.1496     0.8090E-01



                     -0.3350    -0.4839      0.000     0.1537     0.2985E-01

                      0.2219E-01 0.2123    -0.7116    -0.4494E-01 0.2556    

                      0.1020    -0.3125E-02-0.5382     -1.160      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.214      8.812    -0.1672E+05 -6.000    

                     -0.7971E-01 -2.862      9.381      8.900    -0.1969E+05



                      -6.000     0.8151    -0.1388      8.957      9.149    

                     -0.1944E+05 -6.000     -1.017    -0.4027      9.168    

                       8.869    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2164.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       25
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       26
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:      100     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -175.817       175.817       2146.80       2322.61    
   2  0.928800     -0.738619E-01  -52.5489       52.5489       2260.02       2312.57    
   3  0.727994     -0.317462      -225.858       225.858       2145.14       2370.99    
   4  0.109723E-01  -4.51238      -3210.32       3210.32       2254.58       5464.90    
   5  0.160096      -1.83198      -1303.36       1303.36       2289.32       3592.68    
   6  0.497079     -0.699006      -497.306       497.306       2245.90       2743.20    
   7  0.789473     -0.236389      -168.178       168.178       2386.98       2555.16    
   8  0.763780     -0.269476      -191.718       191.718       2272.69       2464.41    
   9  0.217288      -1.52653      -1086.05       1086.05       2260.88       3346.92    
  10  0.867642     -0.141976      -101.009       101.009       2433.63       2534.64    
  11  0.740966     -0.299800      -213.292       213.292       2302.72       2516.01    
  12  0.999757     -0.242662E-03 -0.172641      0.172641       2125.67       2125.84    
  13  0.587476     -0.531920      -378.433       378.433       2235.53       2613.96    
  14  0.703619     -0.351518      -250.087       250.087       2293.12       2543.21    
  15  0.740946     -0.299828      -213.312       213.312       2131.28       2344.60    
  16  0.335927      -1.09086      -776.090       776.090       2353.23       3129.32    
  17  0.736553     -0.305774      -217.542       217.542       2131.91       2349.45    
  18  0.597397     -0.515174      -366.519       366.519       2291.81       2658.33    
  19  0.126601      -2.06672      -1470.36       1470.36       2210.51       3680.87    
  20  0.990194     -0.985477E-02  -7.01115       7.01115       2396.44       2403.45    
  21  0.716453     -0.333443      -237.227       237.227       2472.78       2710.01    
  22  0.279233E-01  -3.57829      -2545.77       2545.77       2328.23       4874.00    
  23  0.413932     -0.882054      -627.535       627.535       2297.60       2925.14    
  24  0.109516      -2.21168      -1573.50       1573.50       2155.47       3728.97    
  25  0.440749     -0.819279      -582.874       582.874       2525.42       3108.30    
  26  0.412115     -0.886453      -630.665       630.665       2293.75       2924.42    
  27  0.146963      -1.91758      -1364.26       1364.26       2190.57       3554.82    
  28  0.345919      -1.06155      -755.237       755.237       2328.11       3083.35    
  29  0.343614      -1.06824      -759.993       759.993       2272.57       3032.57    
  30  0.600334E-01  -2.81285      -2001.20       2001.20       2244.85       4246.05    
  31  0.751538     -0.285634      -203.213       203.213       2371.49       2574.71    
  32  0.878119     -0.129973      -92.4692       92.4692       2322.59       2415.06    
  33  0.544046     -0.608721      -433.073       433.073       2703.12       3136.19    
  34  0.931023     -0.714714E-01  -50.8482       50.8482       2362.77       2413.62    
  35  0.131968      -2.02520      -1440.82       1440.82       2264.20       3705.02    
  36  0.826694E-01  -2.49291      -1773.57       1773.57       2317.12       4090.69    
  37  0.174702E-02  -6.34984      -4517.58       4517.58       2366.57       6884.15    
  38  0.233470      -1.45470      -1034.95       1034.95       2368.05       3402.99    
  39  0.232927      -1.45703      -1036.60       1036.60       2407.88       3444.48    
  40  0.958279     -0.426163E-01  -30.3193       30.3193       2369.32       2399.64    
  41  0.820100     -0.198330      -141.101       141.101       2546.00       2687.10    
  42  0.305797      -1.18483      -842.948       842.948       2297.40       3140.34    
  43  0.260853      -1.34380      -956.042       956.042       2362.57       3318.62    
  44  0.960408     -0.403967E-01  -28.7401       28.7401       2380.03       2408.77    
  45  0.318957      -1.14270      -812.970       812.970       2245.22       3058.19    
  46  0.146887      -1.91809      -1364.62       1364.62       2137.07       3501.69    
  47  0.787623     -0.238735      -169.848       169.848       2764.54       2934.39    
  48  0.452412     -0.793163      -564.293       564.293       2249.11       2813.40    
  49  0.218339      -1.52170      -1082.61       1082.61       2127.03       3209.64    
  50  0.177672      -1.72782      -1229.25       1229.25       2284.45       3513.70    
  51  0.928922     -0.737304E-01  -52.4553       52.4553       2164.09       2216.55    
loop,thermsimp(1:2)       26   175.817       52.5489    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102       2166.27          0.86          1.12         21.88          0.09          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2166.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       26
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       27
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:      101     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -142.482       142.482       2125.67       2268.15    
   2  0.309452      -1.17295      -834.495       834.495       2164.09       2998.59    
   3  0.303638      -1.19192      -847.988       847.988       2260.02       3108.01    
   4  0.754457     -0.281757      -200.455       200.455       2146.80       2347.25    
   5  0.623133     -0.472996      -336.512       336.512       2131.28       2467.80    
   6  0.989422E-01  -2.31322      -1645.73       1645.73       2131.91       3777.65    
   7  0.695126     -0.363662      -258.726       258.726       2145.14       2403.86    
   8  0.832210E-01  -2.48626      -1768.84       1768.84       2369.32       4138.16    
   9  0.869521     -0.139813      -99.4698       99.4698       2396.44       2495.91    
  10  0.488136     -0.717160      -510.222       510.222       2380.03       2890.25    
  11  0.579877     -0.544940      -387.696       387.696       2362.77       2750.46    
  12  0.480435     -0.733064      -521.536       521.536       2322.59       2844.12    
  13  0.792626     -0.232404      -165.343       165.343       2272.69       2438.03    
  14  0.870230     -0.138998      -98.8896       98.8896       2302.72       2401.61    
  15  0.886361     -0.120631      -85.8224       85.8224       2433.63       2519.45    
  16  0.358181      -1.02672      -730.456       730.456       2293.12       3023.58    
  17  0.560125     -0.579594      -412.351       412.351       2386.98       2799.33    
  18  0.546151     -0.604859      -430.325       430.325       2371.49       2801.82    
  19  0.732086     -0.311858      -221.871       221.871       2235.53       2457.40    
  20  0.590102     -0.527460      -375.260       375.260       2291.81       2667.07    
  21  0.867355     -0.142307      -101.244       101.244       2546.00       2647.24    
  22  0.749758     -0.288005      -204.901       204.901       2472.78       2677.68    
  23  0.721970     -0.325772      -231.770       231.770       2245.90       2477.66    
  24  0.596865     -0.516065      -367.153       367.153       2249.11       2616.26    
  25  0.878161     -0.129925      -92.4347       92.4347       2293.75       2386.19    
  26  0.558752E-01  -2.88463      -2052.27       2052.27       2297.60       4349.87    
  27  0.555543     -0.587810      -418.196       418.196       2764.54       3182.74    
  28  0.597562     -0.514897      -366.322       366.322       2272.57       2638.89    
  29  0.995329     -0.468202E-02  -3.33101       3.33101       2245.22       2248.55    
  30  0.206787      -1.57606      -1121.29       1121.29       2328.11       3449.40    
  31  0.645457     -0.437797      -311.470       311.470       2525.42       2836.89    
  32  0.871352     -0.137710      -97.9731       97.9731       2353.23       2451.21    
  33  0.701360     -0.354733      -252.374       252.374       2703.12       2955.49    
  34  0.936151     -0.659784E-01  -46.9402       46.9402       2297.40       2344.34    
  35  0.590091     -0.527478      -375.273       375.273       2127.03       2502.30    
  36  0.750433     -0.287105      -204.260       204.260       2362.57       2566.83    
  37  0.326255      -1.12007      -796.874       796.874       2260.88       3057.75    
  38  0.873133     -0.135668      -96.5206       96.5206       2368.05       2464.57    
  39  0.621627     -0.475415      -338.233       338.233       2407.88       2746.11    
  40  0.153041      -1.87705      -1335.42       1335.42       2137.07       3472.49    
  41  0.196696      -1.62610      -1156.88       1156.88       2284.45       3441.33    
  42  0.365028      -1.00778      -716.983       716.983       2190.57       2907.55    
  43  0.398429     -0.920226      -654.693       654.693       2289.32       2944.02    
  44  0.549691     -0.598399      -425.730       425.730       2210.51       2636.24    
  45  0.994179     -0.583795E-02  -4.15340       4.15340       2264.20       2268.35    
  46  0.147335E-01  -4.21763      -3000.62       3000.62       2155.47       5156.10    
  47  0.224737      -1.49282      -1062.07       1062.07       2317.12       3379.19    
  48  0.182172      -1.70281      -1211.46       1211.46       2244.85       3456.31    
  49  0.230919      -1.46569      -1042.76       1042.76       2328.23       3370.99    
  50  0.491818     -0.709647      -504.876       504.876       2254.58       2759.45    
  51  0.370754     -0.992217      -705.910       705.910       2166.27       2872.18    
loop,thermsimp(1:2)       27   142.482       834.495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       2411.76          0.86          1.11         21.95          0.02          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104       2996.98          0.86          1.12         21.87          0.05          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2411.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    711.447               101
loop is:       27
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    711.447               101
loop is:       28
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    355.724               151

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      103     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -75.5488       75.5488       2245.22       2320.77    
   2  0.162004E-01  -4.12272      -1466.55       1466.55       2125.67       3592.22    
   3  0.446841E-01  -3.10814      -1105.64       1105.64       2264.20       3369.83    
   4  0.757954     -0.277132      -98.5826       98.5826       2297.40       2395.98    
   5  0.525315     -0.643757      -229.000       229.000       2146.80       2375.80    
   6  0.229940      -1.46994      -522.892       522.892       2293.75       2816.64    
   7  0.273310E-01  -3.59973      -1280.51       1280.51       2302.72       3583.23    
   8  0.228047      -1.47820      -525.832       525.832       2145.14       2670.97    
   9  0.963384E-01  -2.33989      -832.354       832.354       2272.69       3105.04    
  10  0.495504     -0.702179      -249.782       249.782       2353.23       2603.02    
  11  0.930436     -0.721018E-01  -25.6483       25.6483       2235.53       2261.18    
  12  0.138744      -1.97513      -702.600       702.600       2368.05       3070.65    
  13  0.676381     -0.390999      -139.088       139.088       2131.28       2270.37    
  14  0.763696     -0.269586      -95.8981       95.8981       2245.90       2341.79    
  15  0.282468      -1.26419      -449.703       449.703       2396.44       2846.14    
  16  0.359172      -1.02395      -364.244       364.244       2127.03       2491.28    
  17  0.392258     -0.935834      -332.898       332.898       2433.63       2766.53    
  18  0.524686     -0.644955      -229.426       229.426       2362.57       2592.00    
  19  0.850465     -0.161972      -57.6173       57.6173       2249.11       2306.73    
  20  0.227056      -1.48256      -527.381       527.381       2210.51       2737.89    
  21  0.942039     -0.597082E-01  -21.2396       21.2396       2272.57       2293.81    
  22  0.807336     -0.214016      -76.1305       76.1305       2546.00       2622.13    
  23  0.345853      -1.06174      -377.687       377.687       2291.81       2669.50    
  24  0.762940     -0.270575      -96.2501       96.2501       2472.78       2569.03    
  25  0.589959     -0.527702      -187.716       187.716       2407.88       2595.60    
  26  0.563539     -0.573518      -204.014       204.014       2362.77       2566.78    
  27  0.812044     -0.208201      -74.0621       74.0621       2254.58       2328.64    
  28  0.735850     -0.306729      -109.111       109.111       2386.98       2496.09    
  29  0.396292     -0.925605      -329.260       329.260       2371.49       2700.75    
  30  0.623568     -0.472298      -168.008       168.008       2525.42       2693.43    
  31  0.925937     -0.769486E-01  -27.3724       27.3724       2322.59       2349.96    
  32  0.880074     -0.127749      -45.4435       45.4435       2166.27       2211.71    
  33  0.379958     -0.967693      -344.232       344.232       2380.03       2724.26    
  34  0.842940E-01  -2.47344      -879.863       879.863       2190.57       3070.43    
  35  0.199092      -1.61399      -574.134       574.134       2289.32       2863.46    
  36  0.625899     -0.468566      -166.680       166.680       2703.12       2869.80    
  37  0.888337     -0.118405      -42.1193       42.1193       2164.09       2206.21    
  38  0.959633     -0.412048E-01  -14.6575       14.6575       2293.12       2307.78    
  39  0.289813      -1.23852      -440.570       440.570       2260.88       2701.45    
  40  0.889440     -0.117163      -41.6777       41.6777       2260.02       2301.70    
  41  0.797260     -0.226575      -80.5979       80.5979       2764.54       2845.14    
  42  0.451097     -0.796073      -283.182       283.182       2328.23       2611.41    
  43  0.609578     -0.494989      -176.079       176.079       2317.12       2493.20    
  44  0.910850     -0.933770E-01  -33.2164       33.2164       2284.45       2317.66    
  45  0.448191     -0.802536      -285.481       285.481       2328.11       2613.59    
  46  0.831229     -0.184850      -65.7554       65.7554       2244.85       2310.61    
  47  0.246260      -1.40137      -498.500       498.500       2137.07       2635.57    
  48  0.280480      -1.27125      -452.215       452.215       2131.91       2584.13    
  49  0.161513      -1.82317      -648.544       648.544       2369.32       3017.87    
  50  0.337020      -1.08761      -386.890       386.890       2297.60       2684.49    
  51  0.160136      -1.83173      -651.590       651.590       2411.76       3063.35    
loop,thermsimp(1:2)       28   75.5488       1466.55    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105       2576.66          0.86          1.12         21.93          0.08          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2576.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       28
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       29
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      104     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -766.639       766.639       2164.09       2930.73    
   2  0.685048     -0.378267      -134.558       134.558       2166.27       2300.83    
   3  0.739526     -0.301746      -107.338       107.338       2235.53       2342.87    
   4  0.161448      -1.82357      -648.687       648.687       2131.28       2779.97    
   5  0.819608     -0.198929      -70.7638       70.7638       2272.57       2343.34    
   6  0.750679     -0.286777      -102.013       102.013       2260.02       2362.03    
   7  0.797409     -0.226388      -80.5314       80.5314       2249.11       2329.64    
   8  0.193123      -1.64443      -584.963       584.963       2293.12       2878.09    
   9  0.189346E-01  -3.96676      -1411.07       1411.07       2244.85       3655.92    
  10  0.715264     -0.335103      -119.204       119.204       2284.45       2403.65    
  11  0.384856     -0.954886      -339.676       339.676       2245.22       2584.90    
  12  0.268023      -1.31668      -468.376       468.376       2254.58       2722.95    
  13  0.777164     -0.252104      -89.6793       89.6793       2245.90       2335.57    
  14  0.707495E-01  -2.64861      -942.174       942.174       2322.59       3264.76    
  15  0.233610      -1.45410      -517.259       517.259       2146.80       2664.06    
  16  0.193057      -1.64477      -585.085       585.085       2297.40       2882.48    
  17  0.486879     -0.719739      -256.028       256.028       2127.03       2383.06    
  18  0.735370     -0.307381      -109.343       109.343       2317.12       2426.46    
  19  0.147509      -1.91387      -680.808       680.808       2386.98       3067.79    
  20  0.739111     -0.302308      -107.538       107.538       2362.77       2470.31    
  21  0.886241     -0.120766      -42.9593       42.9593       2472.78       2515.74    
  22  0.158672      -1.84092      -654.857       654.857       2131.91       2786.77    
  23  0.143658      -1.94032      -690.219       690.219       2362.57       3052.79    
  24  0.637431E-02  -5.05548      -1798.35       1798.35       2407.88       4206.23    
  25  0.753372     -0.283196      -100.740       100.740       2353.23       2453.97    
  26  0.555831     -0.587292      -208.914       208.914       2328.23       2537.14    
  27  0.280013      -1.27292      -452.807       452.807       2328.11       2780.92    
  28  0.811304     -0.209112      -74.3863       74.3863       2546.00       2620.39    
  29  0.972296E-02  -4.63327      -1648.16       1648.16       2137.07       3785.23    
  30  0.713459     -0.337631      -120.103       120.103       2291.81       2411.92    
  31  0.194621      -1.63670      -582.213       582.213       2145.14       2727.35    
  32  0.492587     -0.708083      -251.882       251.882       2297.60       2549.48    
  33  0.759094E-01  -2.57821      -917.132       917.132       2525.42       3442.56    
  34  0.494544     -0.704119      -250.472       250.472       2371.49       2621.96    
  35  0.297023      -1.21395      -431.830       431.830       2260.88       2692.71    
  36  0.429878E-01  -3.14684      -1119.41       1119.41       2380.03       3499.44    
  37  0.490931     -0.711452      -253.080       253.080       2210.51       2463.59    
  38  0.534417     -0.626578      -222.889       222.889       2433.63       2656.52    
  39  0.254967      -1.36662      -486.139       486.139       2293.75       2779.89    
  40  0.995945     -0.406335E-02  -1.44543       1.44543       2764.54       2765.99    
  41  0.428814E-01  -3.14932      -1120.29       1120.29       2396.44       3516.73    
  42  0.332915      -1.09987      -391.249       391.249       2289.32       2680.57    
  43  0.657266     -0.419666      -149.285       149.285       2703.12       2852.40    
  44  0.301071      -1.20041      -427.014       427.014       2369.32       2796.34    
  45  0.998178     -0.182349E-02 -0.648660      0.648660       2411.76       2412.41    
  46  0.533372     -0.628536      -223.585       223.585       2190.57       2414.15    
  47  0.244746      -1.40753      -500.693       500.693       2368.05       2868.74    
  48  0.345321      -1.06328      -378.235       378.235       2272.69       2650.93    
  49  0.339541      -1.08016      -384.239       384.239       2264.20       2648.43    
  50  0.456434     -0.784311      -278.998       278.998       2302.72       2581.72    
  51  0.510210     -0.672933      -239.378       239.378       2576.66       2816.04    
loop,thermsimp(1:2)       29   766.639       134.558    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106       2175.46          0.85          1.12         21.98          0.05          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    107       2167.07          0.84          1.11         21.91          0.09          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2167.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       29
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       30
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      106     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -1148.26       1148.26       2166.27       3314.52    
   2  0.712690     -0.338709      -120.487       120.487       2249.11       2369.60    
   3  0.284498      -1.25703      -447.155       447.155       2245.90       2693.05    
   4  0.132414      -2.02182      -719.210       719.210       2235.53       2954.74    
   5  0.868558     -0.140920      -50.1287       50.1287       2272.57       2322.70    
   6  0.695240     -0.363498      -129.305       129.305       2260.02       2389.32    
   7  0.777362     -0.251849      -89.5887       89.5887       2127.03       2216.62    
   8  0.302494      -1.19569      -425.337       425.337       2284.45       2709.78    
   9  0.710188     -0.342225      -121.738       121.738       2291.81       2413.55    
  10  0.884530     -0.122698      -43.6467       43.6467       2411.76       2455.41    
  11  0.146421E-01  -4.22386      -1502.53       1502.53       2190.57       3693.09    
  12  0.834801     -0.180562      -64.2301       64.2301       2317.12       2381.35    
  13  0.414011     -0.881863      -313.700       313.700       2353.23       2666.93    
  14  0.655777     -0.421935      -150.092       150.092       2210.51       2360.60    
  15  0.530106     -0.634679      -225.770       225.770       2362.77       2588.54    
  16  0.325231      -1.12322      -399.556       399.556       2472.78       2872.34    
  17  0.293550      -1.22571      -436.014       436.014       2328.23       2764.24    
  18  0.194161      -1.63907      -583.056       583.056       2297.60       2880.66    
  19  0.589029E-01  -2.83186      -1007.36       1007.36       2302.72       3310.08    
  20  0.385142     -0.954143      -339.411       339.411       2245.22       2584.63    
  21  0.287461      -1.24667      -443.469       443.469       2546.00       2989.47    
  22  0.528518     -0.637678      -226.837       226.837       2371.49       2598.33    
  23  0.517042     -0.659630      -234.646       234.646       2264.20       2498.84    
  24  0.453375     -0.791035      -281.390       281.390       2272.69       2554.08    
  25  0.695596     -0.362986      -129.123       129.123       2433.63       2562.75    
  26  0.645178     -0.438228      -155.888       155.888       2146.80       2302.68    
  27  0.696076     -0.362297      -128.878       128.878       2289.32       2418.20    
  28  0.483522     -0.726659      -258.490       258.490       2260.88       2519.37    
  29  0.155396E-01  -4.16436      -1481.36       1481.36       2254.58       3735.94    
  30  0.883154     -0.124256      -44.2008       44.2008       2145.14       2189.34    
  31  0.525944     -0.642561      -228.574       228.574       2764.54       2993.12    
  32  0.746799     -0.291959      -103.857       103.857       2293.75       2397.61    
  33  0.458658     -0.779449      -277.269       277.269       2131.28       2408.55    
  34  0.614284     -0.487298      -173.344       173.344       2328.11       2501.45    
  35  0.581412     -0.542295      -192.907       192.907       2131.91       2324.82    
  36  0.820935     -0.197312      -70.1885       70.1885       2369.32       2439.51    
  37  0.852366     -0.159739      -56.8230       56.8230       2576.66       2633.48    
  38  0.527059     -0.640443      -227.821       227.821       2703.12       2930.94    
  39  0.376404     -0.977092      -347.575       347.575       2368.05       2715.62    
  40  0.729525E-01  -2.61795      -931.266       931.266       2293.12       3224.39    
  41  0.342258      -1.07219      -381.404       381.404       2297.40       2678.80    
  42  0.955065     -0.459761E-01  -16.3548       16.3548       2164.09       2180.45    
  43  0.508654E-01  -2.97857      -1059.55       1059.55       2362.57       3422.12    
  44  0.471716     -0.751379      -267.283       267.283       2386.98       2654.26    
  45  0.137118      -1.98691      -706.793       706.793       2322.59       3029.38    
  46  0.844826     -0.168625      -59.9838       59.9838       2525.42       2585.41    
  47  0.841708     -0.172322      -61.2990       61.2990       2380.03       2441.33    
  48  0.360396E-01  -3.32314      -1182.12       1182.12       2396.44       3578.56    
  49  0.953282     -0.478444E-01  -17.0194       17.0194       2244.85       2261.87    
  50  0.503408     -0.686355      -244.153       244.153       2137.07       2381.22    
  51  0.593854     -0.521122      -185.376       185.376       2167.07       2352.45    
loop,thermsimp(1:2)       30   1148.26       120.487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108       2194.93          0.86          1.11         21.91          0.11          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109       2280.66          0.85          1.12         21.94          0.01          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2194.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       30
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       31
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      108     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -495.163       495.163       2164.09       2659.26    
   2  0.247647      -1.39575      -496.502       496.502       2145.14       2641.64    
   3  0.396263     -0.925678      -329.286       329.286       2127.03       2456.32    
   4  0.386461     -0.950723      -338.195       338.195       2244.85       2583.05    
   5  0.729285     -0.315691      -112.299       112.299       2146.80       2259.10    
   6  0.665866     -0.406667      -144.661       144.661       2272.57       2417.23    
   7  0.385122     -0.954194      -339.430       339.430       2131.91       2471.34    
   8  0.625701     -0.468883      -166.793       166.793       2167.07       2333.86    
   9  0.392668     -0.934792      -332.528       332.528       2210.51       2543.04    
  10  0.698356     -0.359026      -127.714       127.714       2249.11       2376.82    
  11  0.537534E-01  -2.92335      -1039.90       1039.90       2137.07       3176.97    
  12  0.289307      -1.24027      -441.193       441.193       2317.12       2758.31    
  13  0.138460E-01  -4.27976      -1522.41       1522.41       2260.02       3782.43    
  14  0.824110     -0.193451      -68.8150       68.8150       2293.75       2362.57    
  15  0.560983     -0.578065      -205.631       205.631       2131.28       2336.92    
  16  0.116087E-01  -4.45600      -1585.11       1585.11       2291.81       3876.92    
  17  0.218033      -1.52311      -541.806       541.806       2289.32       2831.13    
  18  0.893705E-01  -2.41497      -859.060       859.060       2369.32       3228.38    
  19  0.304886      -1.18782      -422.534       422.534       2380.03       2802.57    
  20  0.179833      -1.71573      -610.326       610.326       2411.76       3022.09    
  21  0.867378     -0.142281      -50.6126       50.6126       2264.20       2314.81    
  22  0.243287      -1.41351      -502.820       502.820       2328.11       2830.93    
  23  0.772489     -0.258138      -91.8257       91.8257       2260.88       2352.70    
  24  0.321011      -1.13628      -404.202       404.202       2272.69       2676.89    
  25  0.499417     -0.694314      -246.984       246.984       2433.63       2680.61    
  26  0.396806     -0.924307      -328.798       328.798       2245.22       2574.02    
  27  0.580203E-01  -2.84696      -1012.73       1012.73       2525.42       3538.16    
  28  0.854206     -0.157583      -56.0560       56.0560       2362.77       2418.82    
  29  0.914649     -0.892145E-01  -31.7357       31.7357       2371.49       2403.23    
  30  0.167601      -1.78617      -635.383       635.383       2576.66       3212.04    
  31  0.350137      -1.04943      -373.307       373.307       2386.98       2760.29    
  32  0.522932     -0.648304      -230.617       230.617       2353.23       2583.85    
  33  0.538779     -0.618450      -219.997       219.997       2297.40       2517.39    
  34  0.693066     -0.366629      -130.419       130.419       2245.90       2376.31    
  35  0.361961      -1.01622      -361.493       361.493       2284.45       2645.94    
  36  0.310665      -1.16904      -415.855       415.855       2368.05       2783.90    
  37  0.818669     -0.200076      -71.1717       71.1717       2328.23       2399.40    
  38  0.582861     -0.539807      -192.022       192.022       2472.78       2664.80    
  39  0.401728     -0.911979      -324.413       324.413       2297.60       2622.01    
  40  0.171089      -1.76557      -628.056       628.056       2703.12       3331.17    
  41  0.980174     -0.200248E-01  -7.12330       7.12330       2235.53       2242.65    
  42  0.495496     -0.702196      -249.788       249.788       2546.00       2795.79    
  43  0.436683     -0.828549      -294.734       294.734       2764.54       3059.28    
  44  0.910411     -0.938588E-01  -33.3878       33.3878       2322.59       2355.97    
  45  0.649932     -0.430887      -153.277       153.277       2293.12       2446.40    
  46  0.755226     -0.280738      -99.8651       99.8651       2302.72       2402.58    
  47  0.927352     -0.754221E-01  -26.8294       26.8294       2166.27       2193.10    
  48  0.848028     -0.164842      -58.6381       58.6381       2362.57       2421.21    
  49  0.146193      -1.92283      -683.997       683.997       2396.44       3080.44    
  50  0.571278     -0.559879      -199.162       199.162       2190.57       2389.73    
  51  0.244418      -1.40888      -501.171       501.171       2194.93       2696.10    
loop,thermsimp(1:2)       31   495.163       496.502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110       2210.66          0.86          1.11         22.12          0.02          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    111       2455.53          0.86          1.12         22.14          0.05          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2210.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       31
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       32
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      110     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -1.40070       1.40070       2166.27       2167.67    
   2  0.758684E-02  -4.88134      -1736.41       1736.41       2235.53       3971.94    
   3  0.404439     -0.905254      -322.020       322.020       2146.80       2468.82    
   4  0.947917E-01  -2.35607      -838.111       838.111       2264.20       3102.31    
   5  0.834417     -0.181022      -64.3939       64.3939       2167.07       2231.46    
   6  0.891274     -0.115104      -40.9452       40.9452       2131.28       2172.23    
   7  0.744451     -0.295108      -104.977       104.977       2260.88       2365.85    
   8  0.559638     -0.580466      -206.485       206.485       2322.59       2529.07    
   9  0.821724     -0.196351      -69.8466       69.8466       2293.75       2363.60    
  10  0.847292     -0.165710      -58.9468       58.9468       2245.90       2304.84    
  11  0.661676     -0.412979      -146.907       146.907       2249.11       2396.02    
  12  0.993427     -0.659478E-02  -2.34592       2.34592       2190.57       2192.91    
  13  0.425996     -0.853326      -303.548       303.548       2328.23       2631.78    
  14  0.673132     -0.395813      -140.800       140.800       2302.72       2443.52    
  15  0.234810      -1.44898      -515.436       515.436       2371.49       2886.93    
  16  0.122926      -2.09617      -745.658       745.658       2272.57       3018.23    
  17  0.523553     -0.647118      -230.195       230.195       2362.77       2592.96    
  18  0.959317     -0.415333E-01  -14.7744       14.7744       2362.57       2377.35    
  19  0.321726      -1.13406      -403.411       403.411       2293.12       2696.53    
  20  0.493112     -0.707018      -251.503       251.503       2127.03       2378.53    
  21  0.416134     -0.876748      -311.880       311.880       2131.91       2443.79    
  22  0.409432     -0.892985      -317.656       317.656       2297.40       2615.05    
  23  0.657956     -0.418617      -148.912       148.912       2210.51       2359.42    
  24  0.904324     -0.100567      -35.7742       35.7742       2245.22       2281.00    
  25  0.714426     -0.336276      -119.621       119.621       2244.85       2364.47    
  26  0.150521      -1.89365      -673.616       673.616       2353.23       3026.85    
  27  0.758740     -0.276096      -98.2139       98.2139       2297.60       2395.82    
  28  0.359105      -1.02414      -364.311       364.311       2145.14       2509.45    
  29  0.666937     -0.405060      -144.089       144.089       2284.45       2428.54    
  30  0.343213      -1.06940      -380.412       380.412       2164.09       2544.51    
  31  0.484849     -0.723918      -257.515       257.515       2472.78       2730.30    
  32  0.874661     -0.133919      -47.6381       47.6381       2272.69       2320.33    
  33  0.994710     -0.530415E-02  -1.88681       1.88681       2433.63       2435.52    
  34  0.821923     -0.196109      -69.7607       69.7607       2194.93       2264.69    
  35  0.954096E-02  -4.65216      -1654.88       1654.88       2317.12       3972.01    
  36  0.240030      -1.42699      -507.614       507.614       2386.98       2894.59    
  37  0.279003      -1.27653      -454.093       454.093       2368.05       2822.14    
  38  0.553830     -0.590898      -210.197       210.197       2546.00       2756.20    
  39  0.400809     -0.914271      -325.228       325.228       2380.03       2705.26    
  40  0.146125      -1.92330      -684.162       684.162       2328.11       3012.27    
  41  0.811879     -0.208403      -74.1340       74.1340       2289.32       2363.46    
  42  0.349149      -1.05226      -374.313       374.313       2411.76       2786.07    
  43  0.897422     -0.108229      -38.4996       38.4996       2764.54       2803.04    
  44  0.114492      -2.16725      -770.943       770.943       2396.44       3167.38    
  45  0.831901E-01  -2.48663      -884.552       884.552       2137.07       3021.62    
  46  0.721169     -0.326882      -116.280       116.280       2576.66       2692.94    
  47  0.801724     -0.220991      -78.6118       78.6118       2369.32       2447.93    
  48  0.466569     -0.762349      -271.186       271.186       2703.12       2974.30    
  49  0.103404      -2.26911      -807.177       807.177       2525.42       3332.60    
  50  0.417206     -0.874175      -310.965       310.965       2260.02       2570.98    
  51  0.267666      -1.31802      -468.849       468.849       2210.66       2679.51    
loop,thermsimp(1:2)       32   1.40070       1736.41    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    112       2197.36          0.85          1.12         21.96          0.02          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    113       4036.36          0.86          1.12         21.89          0.05          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2197.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       32
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       33
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      112     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -279.656       279.656       2166.27       2445.92    
   2  0.588265E-01  -2.83316      -1007.82       1007.82       2131.28       3139.11    
   3  0.787103E-01  -2.54198      -904.243       904.243       2190.57       3094.81    
   4  0.597713     -0.514644      -183.071       183.071       2167.07       2350.14    
   5  0.110741      -2.20056      -782.792       782.792       2194.93       2977.72    
   6  0.677861     -0.388813      -138.310       138.310       2245.22       2383.53    
   7  0.307724      -1.17855      -419.239       419.239       2245.90       2665.13    
   8  0.550587     -0.596770      -212.285       212.285       2272.69       2484.98    
   9  0.601295     -0.508669      -180.946       180.946       2210.51       2391.45    
  10  0.487121     -0.719243      -255.852       255.852       2289.32       2545.18    
  11  0.146295      -1.92213      -683.746       683.746       2293.75       2977.50    
  12  0.714050     -0.336802      -119.808       119.808       2244.85       2364.66    
  13  0.723089     -0.324223      -115.334       115.334       2260.88       2376.21    
  14  0.805432     -0.216376      -76.9702       76.9702       2362.57       2439.54    
  15  0.123280      -2.09329      -744.635       744.635       2127.03       2871.67    
  16  0.853039     -0.158950      -56.5424       56.5424       2297.60       2354.14    
  17  0.288289      -1.24379      -442.446       442.446       2249.11       2691.56    
  18  0.705126     -0.349379      -124.282       124.282       2284.45       2408.73    
  19  0.772420     -0.258227      -91.8574       91.8574       2433.63       2525.49    
  20  0.962845     -0.378631E-01  -13.4688       13.4688       2302.72       2316.19    
  21  0.245802      -1.40323      -499.161       499.161       2131.91       2631.07    
  22  0.752702     -0.284087      -101.056       101.056       2369.32       2470.38    
  23  0.729896     -0.314853      -112.001       112.001       2146.80       2258.80    
  24  0.869278     -0.140092      -49.8342       49.8342       2145.14       2194.97    
  25  0.597817E-01  -2.81706      -1002.09       1002.09       2322.59       3324.68    
  26  0.984108     -0.160195E-01  -5.69852       5.69852       2164.09       2169.79    
  27  0.278288      -1.27910      -455.006       455.006       2260.02       2715.03    
  28  0.588278     -0.530555      -188.731       188.731       2362.77       2551.50    
  29  0.807614     -0.213671      -76.0079       76.0079       2297.40       2373.40    
  30  0.428679     -0.847047      -301.315       301.315       2328.23       2629.55    
  31  0.452991     -0.791883      -281.692       281.692       2210.66       2492.35    
  32  0.678742     -0.387514      -137.848       137.848       2576.66       2714.51    
  33  0.504500     -0.684188      -243.382       243.382       2293.12       2536.51    
  34  0.894800     -0.111155      -39.5404       39.5404       2380.03       2419.57    
  35  0.854311     -0.157461      -56.0124       56.0124       2472.78       2528.79    
  36  0.756230     -0.279410      -99.3927       99.3927       2546.00       2645.39    
  37  0.744369     -0.295219      -105.016       105.016       2411.76       2516.78    
  38  0.435758     -0.830668      -295.488       295.488       2764.54       3060.03    
  39  0.677387     -0.389513      -138.559       138.559       2368.05       2506.61    
  40  0.504989     -0.683219      -243.037       243.037       2371.49       2614.53    
  41  0.325676      -1.12185      -399.069       399.069       2386.98       2786.05    
  42  0.147207      -1.91591      -681.536       681.536       2703.12       3384.65    
  43  0.432041     -0.839234      -298.536       298.536       2328.11       2626.65    
  44  0.615972     -0.484555      -172.368       172.368       2272.57       2444.94    
  45  0.150867      -1.89136      -672.801       672.801       2137.07       2809.87    
  46  0.464307     -0.767210      -272.915       272.915       2353.23       2626.15    
  47  0.379753     -0.968234      -344.424       344.424       2264.20       2608.62    
  48  0.886192     -0.120822      -42.9792       42.9792       2396.44       2439.42    
  49  0.231751E-01  -3.76468      -1339.19       1339.19       2525.42       3864.61    
  50  0.257662      -1.35611      -482.399       482.399       2235.53       2717.93    
  51  0.470381E-01  -3.05680      -1087.38       1087.38       2197.36       3284.74    
loop,thermsimp(1:2)       33   279.656       1007.82    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114       2177.50          0.85          1.14         22.04          0.05          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115       2322.14          0.85          1.13         22.00          0.04          0.05         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2177.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       33
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       34
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      114     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -833.015       833.015       2164.09       2997.11    
   2  0.298819      -1.20792      -429.685       429.685       2145.14       2574.82    
   3  0.706385     -0.347595      -123.648       123.648       2146.80       2270.44    
   4  0.958764     -0.421100E-01  -14.9795       14.9795       2302.72       2317.70    
   5  0.306496      -1.18255      -420.661       420.661       2167.07       2587.73    
   6  0.905447     -0.993270E-01  -35.3330       35.3330       2297.60       2332.93    
   7  0.234113      -1.45195      -516.493       516.493       2244.85       2761.34    
   8  0.704141     -0.350777      -124.780       124.780       2297.40       2422.17    
   9  0.908200     -0.962902E-01  -34.2527       34.2527       2260.88       2295.13    
  10  0.656383     -0.421011      -149.764       149.764       2245.22       2394.99    
  11  0.967894     -0.326327E-01  -11.6082       11.6082       2210.51       2222.12    
  12  0.754670     -0.281475      -100.127       100.127       2284.45       2384.58    
  13  0.488960     -0.715475      -254.511       254.511       2380.03       2634.54    
  14  0.451577     -0.795009      -282.804       282.804       2396.44       2679.25    
  15  0.387599E-01  -3.25037      -1156.23       1156.23       2362.57       3518.81    
  16  0.210942E-02  -6.16134      -2191.73       2191.73       2272.57       4464.31    
  17  0.656530     -0.420787      -149.684       149.684       2166.27       2315.95    
  18  0.181246      -1.70790      -607.541       607.541       2369.32       2976.86    
  19  0.758879     -0.275913      -98.1488       98.1488       2272.69       2370.84    
  20  0.392052     -0.936362      -333.086       333.086       2210.66       2543.74    
  21  0.406710     -0.899654      -320.028       320.028       2368.05       2688.08    
  22  0.830107     -0.186201      -66.2360       66.2360       2411.76       2478.00    
  23  0.311833      -1.16529      -414.521       414.521       2433.63       2848.15    
  24  0.945407     -0.561396E-01  -19.9702       19.9702       2472.78       2492.75    
  25  0.303319      -1.19297      -424.368       424.368       2293.12       2717.49    
  26  0.284230      -1.25797      -447.490       447.490       2289.32       2736.81    
  27  0.292492      -1.22932      -437.297       437.297       2362.77       2800.06    
  28  0.401496     -0.912557      -324.618       324.618       2264.20       2588.81    
  29  0.379648     -0.968510      -344.522       344.522       2371.49       2716.01    
  30  0.723496E-01  -2.62625      -934.218       934.218       2353.23       3287.45    
  31  0.940338     -0.615157E-01  -21.8826       21.8826       2328.11       2349.99    
  32  0.766237     -0.266264      -94.7163       94.7163       2328.23       2422.95    
  33  0.984920     -0.151946E-01  -5.40508       5.40508       2131.91       2137.32    
  34  0.552546     -0.593218      -211.022       211.022       2546.00       2757.02    
  35  0.735557     -0.307128      -109.253       109.253       2245.90       2355.15    
  36  0.142195      -1.95056      -693.859       693.859       2249.11       2942.97    
  37  0.304783      -1.18816      -422.655       422.655       2576.66       2999.32    
  38  0.868582     -0.140894      -50.1193       50.1193       2260.02       2310.14    
  39  0.382741     -0.960397      -341.636       341.636       2235.53       2577.16    
  40  0.273812      -1.29531      -460.774       460.774       2386.98       2847.75    
  41  0.601920     -0.507631      -180.577       180.577       2137.07       2317.65    
  42  0.827744     -0.189051      -67.2501       67.2501       2127.03       2194.28    
  43  0.881186E-01  -2.42907      -864.078       864.078       2293.75       3157.83    
  44  0.386744     -0.949994      -337.935       337.935       2194.93       2532.86    
  45  0.852312     -0.159803      -56.8457       56.8457       2764.54       2821.39    
  46  0.830189     -0.186102      -66.2011       66.2011       2190.57       2256.77    
  47  0.216531      -1.53002      -544.265       544.265       2131.28       2675.55    
  48  0.835540     -0.179677      -63.9154       63.9154       2197.36       2261.28    
  49  0.962152     -0.385824E-01  -13.7247       13.7247       2322.59       2336.31    
  50  0.866477     -0.143320      -50.9822       50.9822       2703.12       2754.10    
  51  0.640111     -0.446114      -158.693       158.693       2177.50       2336.19    
loop,thermsimp(1:2)       34   833.015       429.685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116       2206.52          0.86          1.11         21.91          0.07          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117       2532.27          0.86          1.12         21.94          0.03          0.04         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2206.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       34
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       35
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      116     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -375.387       375.387       2131.91       2507.30    
   2  0.175000      -1.74297      -620.017       620.017       2127.03       2747.05    
   3  0.131587      -2.02809      -721.440       721.440       2210.51       2931.95    
   4  0.301717      -1.19826      -426.251       426.251       2190.57       2616.82    
   5  0.166877      -1.79050      -636.924       636.924       2197.36       2834.28    
   6  0.481073     -0.731736      -260.296       260.296       2146.80       2407.09    
   7  0.706381     -0.347600      -123.650       123.650       2260.88       2384.53    
   8  0.702617     -0.352943      -125.550       125.550       2260.02       2385.57    
   9  0.552795     -0.592767      -210.861       210.861       2166.27       2377.13    
  10  0.495420     -0.702349      -249.842       249.842       2137.07       2386.91    
  11  0.479343     -0.735339      -261.578       261.578       2302.72       2564.30    
  12  0.462659     -0.770765      -274.180       274.180       2297.60       2571.78    
  13  0.631315E-01  -2.76253      -982.699       982.699       2177.50       3160.19    
  14  0.785681     -0.241205      -85.8023       85.8023       2322.59       2408.39    
  15  0.767932     -0.264055      -93.9305       93.9305       2328.11       2422.04    
  16  0.262689E-01  -3.63937      -1294.61       1294.61       2245.90       3540.51    
  17  0.871353     -0.137708      -48.9860       48.9860       2272.69       2321.68    
  18  0.618350     -0.480701      -170.997       170.997       2284.45       2455.44    
  19  0.196090      -1.62918      -579.539       579.539       2245.22       2824.76    
  20  0.925050     -0.779078E-01  -27.7137       27.7137       2297.40       2325.11    
  21  0.903269     -0.101735      -36.1896       36.1896       2328.23       2364.42    
  22  0.958828     -0.420436E-01  -14.9559       14.9559       2411.76       2426.72    
  23  0.969274     -0.312081E-01  -11.1015       11.1015       2472.78       2483.88    
  24  0.313932      -1.15858      -412.134       412.134       2194.93       2607.06    
  25  0.106324      -2.24126      -797.271       797.271       2210.66       3007.93    
  26  0.718705     -0.330304      -117.497       117.497       2145.14       2262.63    
  27  0.751116     -0.286195      -101.806       101.806       2235.53       2337.33    
  28  0.996391     -0.361592E-02  -1.28627       1.28627       2167.07       2168.36    
  29  0.313387      -1.16032      -412.753       412.753       2264.20       2676.95    
  30  0.305057      -1.18726      -422.335       422.335       2380.03       2802.37    
  31  0.408833     -0.894447      -318.176       318.176       2131.28       2449.46    
  32  0.589856     -0.527877      -187.778       187.778       2396.44       2584.22    
  33  0.808683     -0.212349      -75.5375       75.5375       2368.05       2443.59    
  34  0.481635     -0.730569      -259.881       259.881       2371.49       2631.37    
  35  0.677481     -0.389374      -138.509       138.509       2293.12       2431.63    
  36  0.673605     -0.395111      -140.550       140.550       2289.32       2429.87    
  37  0.409374E-01  -3.19571      -1136.79       1136.79       2703.12       3839.91    
  38  0.362144      -1.01571      -361.314       361.314       2546.00       2907.31    
  39  0.364718E-01  -3.31122      -1177.88       1177.88       2244.85       3422.73    
  40  0.280272      -1.27199      -452.478       452.478       2362.77       2815.25    
  41  0.532528     -0.630120      -224.149       224.149       2764.54       2988.69    
  42  0.901591     -0.103595      -36.8511       36.8511       2386.98       2423.83    
  43  0.262858      -1.33614      -475.297       475.297       2433.63       2908.92    
  44  0.168755      -1.77931      -632.943       632.943       2249.11       2882.05    
  45  0.504619     -0.683952      -243.298       243.298       2369.32       2612.62    
  46  0.900650     -0.104639      -37.2225       37.2225       2164.09       2201.32    
  47  0.438495     -0.824406      -293.261       293.261       2576.66       2869.92    
  48  0.984597     -0.155233E-01  -5.52202       5.52202       2293.75       2299.27    
  49  0.469739     -0.755579      -268.777       268.777       2353.23       2622.01    
  50  0.252111      -1.37789      -490.147       490.147       2362.57       2852.72    
  51  0.764692     -0.268282      -95.4344       95.4344       2206.52       2301.95    
loop,thermsimp(1:2)       35   375.387       620.017    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118       2218.66          0.86          1.12         21.91          0.15          0.05         24.08
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119       3076.88          0.86          1.12         21.89          0.12          0.05         24.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2218.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       35
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       36
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      118     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -917.690       917.690       2167.07       3084.76    
   2  0.962370     -0.383559E-01  -13.6441       13.6441       2164.09       2177.74    
   3  0.356737      -1.03076      -366.664       366.664       2145.14       2511.80    
   4  0.884319     -0.122937      -43.7317       43.7317       2293.75       2337.48    
   5  0.919725E-01  -2.38627      -848.851       848.851       2206.52       3055.37    
   6  0.900184     -0.105156      -37.4065       37.4065       2272.69       2310.10    
   7  0.390055     -0.941468      -334.902       334.902       2297.40       2632.30    
   8  0.263976      -1.33190      -473.787       473.787       2235.53       2709.32    
   9  0.898455     -0.107078      -38.0903       38.0903       2328.23       2366.32    
  10  0.697674E-01  -2.66259      -947.146       947.146       2166.27       3113.41    
  11  0.888938     -0.117727      -41.8784       41.8784       2260.88       2302.76    
  12  0.824147     -0.193406      -68.7991       68.7991       2260.02       2328.82    
  13  0.941109     -0.606968E-01  -21.5913       21.5913       2137.07       2158.66    
  14  0.885654     -0.121429      -43.1951       43.1951       2146.80       2189.99    
  15  0.798208     -0.225386      -80.1750       80.1750       2322.59       2402.76    
  16  0.365331      -1.00695      -358.197       358.197       2328.11       2686.31    
  17  0.519490     -0.654907      -232.966       232.966       2386.98       2619.94    
  18  0.922741     -0.804065E-01  -28.6025       28.6025       2411.76       2440.36    
  19  0.877443     -0.130744      -46.5086       46.5086       2289.32       2335.83    
  20  0.584844     -0.536410      -190.814       190.814       2293.12       2483.94    
  21  0.671390     -0.398406      -141.722       141.722       2368.05       2509.77    
  22  0.203335      -1.59290      -566.632       566.632       2131.28       2697.92    
  23  0.330236E-01  -3.41053      -1213.21       1213.21       2284.45       3497.66    
  24  0.879725     -0.128146      -45.5847       45.5847       2472.78       2518.37    
  25  0.833976     -0.181550      -64.5818       64.5818       2131.91       2196.49    
  26  0.901698     -0.103475      -36.8086       36.8086       2302.72       2339.53    
  27  0.692847     -0.366946      -130.531       130.531       2297.60       2428.13    
  28  0.550572     -0.596797      -212.295       212.295       2396.44       2608.74    
  29  0.158383E-01  -4.14532      -1474.59       1474.59       2194.93       3669.52    
  30  0.503246     -0.686677      -244.267       244.267       2369.32       2613.59    
  31  0.648812     -0.432612      -153.890       153.890       2190.57       2344.46    
  32  0.306980      -1.18097      -420.100       420.100       2353.23       2773.33    
  33  0.205188      -1.58383      -563.406       563.406       2371.49       2934.90    
  34  0.265146      -1.32748      -472.215       472.215       2264.20       2736.41    
  35  0.272730E-01  -3.60186      -1281.27       1281.27       2127.03       3408.30    
  36  0.262990E-01  -3.63823      -1294.20       1294.20       2380.03       3674.24    
  37  0.492753     -0.707748      -251.763       251.763       2362.77       2614.53    
  38  0.255065      -1.36624      -486.002       486.002       2245.22       2731.23    
  39  0.623259     -0.472794      -168.184       168.184       2197.36       2365.54    
  40  0.949296     -0.520343E-01  -18.5098       18.5098       2362.57       2381.08    
  41  0.982394     -0.177630E-01  -6.31871       6.31871       2576.66       2582.98    
  42  0.566450     -0.568366      -202.181       202.181       2249.11       2451.29    
  43  0.557613     -0.584090      -207.775       207.775       2546.00       2753.77    
  44  0.900731     -0.104549      -37.1905       37.1905       2433.63       2470.82    
  45  0.671339     -0.398481      -141.749       141.749       2210.51       2352.26    
  46  0.650454     -0.430084      -152.991       152.991       2764.54       2917.54    
  47  0.749315     -0.288595      -102.660       102.660       2210.66       2313.32    
  48  0.667497     -0.404220      -143.791       143.791       2177.50       2321.29    
  49  0.132870      -2.01838      -717.987       717.987       2244.85       2962.84    
  50  0.964787     -0.358480E-01  -12.7520       12.7520       2245.90       2258.65    
  51  0.835780     -0.179390      -63.8131       63.8131       2218.66       2282.47    
loop,thermsimp(1:2)       36   917.690       13.6441    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       2143.46          0.85          1.12         21.95          0.04          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121       2278.51          0.85          1.12         21.90          0.10          0.05         24.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    2278.5       0.6906     -2.071      3.213     -102.6      1.642    
                       1.085      2.142     -99.70      2.928     0.9197    

                       3.648     -2.575      1.540      7000.      7000.    

                      -1.688      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.658     -2.057     -11.46      6.727    

                      -12.83     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1047     0.2068     0.2906E-02 0.1139    

                     -0.2486    -0.1384     0.2331     0.1741     0.6624E-01



                     -0.2942    -0.4955      0.000     0.1782     0.5435E-01

                     -0.4226E-02 0.2368    -0.7116    -0.2044E-01 0.2394    

                      0.1265    -0.1483E-01-0.5137     -1.135      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.203      8.845    -0.1672E+05 -6.000    

                     -0.4187     -3.048      9.375      8.853    -0.1969E+05



                      -6.000     0.7203    -0.2983      8.990      9.182    

                     -0.1944E+05 -6.000     -1.229     -3.401      9.201    

                       8.902    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2143.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       36
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       37
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      120     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -22.3268       22.3268       2137.07       2159.40    
   2  0.112532E-01  -4.48710      -1596.17       1596.17       2164.09       3760.26    
   3  0.907929     -0.965891E-01  -34.3590       34.3590       2146.80       2181.16    
   4  0.478640     -0.736807      -262.100       262.100       2131.91       2394.01    
   5  0.737686     -0.304237      -108.224       108.224       2245.90       2354.12    
   6  0.114880      -2.16387      -769.739       769.739       2218.66       2988.40    
   7  0.309837      -1.17171      -416.805       416.805       2260.88       2677.68    
   8  0.469091     -0.756958      -269.268       269.268       2272.69       2541.96    
   9  0.721151     -0.326907      -116.288       116.288       2210.66       2326.94    
  10  0.557251     -0.584740      -208.006       208.006       2177.50       2385.50    
  11  0.581534     -0.542085      -192.833       192.833       2260.02       2452.85    
  12  0.501412     -0.690326      -245.565       245.565       2289.32       2534.89    
  13  0.783062     -0.244543      -86.9898       86.9898       2293.75       2380.74    
  14  0.571322     -0.559803      -199.135       199.135       2302.72       2501.85    
  15  0.902729E-01  -2.40492      -855.487       855.487       2190.57       3046.05    
  16  0.695403E-01  -2.66585      -948.306       948.306       2210.51       3158.81    
  17  0.128872      -2.04894      -728.856       728.856       2197.36       2926.22    
  18  0.940828E-01  -2.36358      -840.782       840.782       2328.23       3169.01    
  19  0.326350      -1.11979      -398.334       398.334       2362.57       2760.91    
  20  0.102915      -2.27385      -808.864       808.864       2322.59       3131.45    
  21  0.324524      -1.12540      -400.330       400.330       2297.60       2697.93    
  22  0.259454      -1.34918      -479.934       479.934       2411.76       2891.70    
  23  0.782812     -0.244863      -87.1035       87.1035       2249.11       2336.21    
  24  0.383591     -0.958178      -340.847       340.847       2433.63       2774.48    
  25  0.626880     -0.466999      -166.123       166.123       2293.12       2459.25    
  26  0.292269      -1.23008      -437.568       437.568       2368.05       2805.62    
  27  0.448852     -0.801062      -284.957       284.957       2145.14       2430.09    
  28  0.685432     -0.377706      -134.359       134.359       2472.78       2607.14    
  29  0.995399     -0.461118E-02  -1.64031       1.64031       2576.66       2578.30    
  30  0.163323      -1.81203      -644.582       644.582       2396.44       3041.02    
  31  0.952940     -0.482038E-01  -17.1472       17.1472       2369.32       2386.47    
  32  0.861306     -0.149306      -53.1116       53.1116       2362.77       2415.88    
  33  0.587276     -0.532261      -189.338       189.338       2386.98       2576.32    
  34  0.908704     -0.957357E-01  -34.0555       34.0555       2297.40       2331.45    
  35  0.585935     -0.534546      -190.151       190.151       2328.11       2518.26    
  36  0.429836     -0.844352      -300.356       300.356       2131.28       2431.64    
  37  0.726203     -0.319926      -113.805       113.805       2235.53       2349.33    
  38  0.151145E-01  -4.19210      -1491.23       1491.23       2245.22       3736.45    
  39  0.927869     -0.748646E-01  -26.6311       26.6311       2264.20       2290.83    
  40  0.961645     -0.391099E-01  -13.9123       13.9123       2546.00       2559.91    
  41  0.253977      -1.37051      -487.523       487.523       2353.23       2840.76    
  42  0.768038     -0.263917      -93.8814       93.8814       2764.54       2858.43    
  43  0.569441E-01  -2.86569      -1019.39       1019.39       2371.49       3390.88    
  44  0.103919      -2.26415      -805.410       805.410       2244.85       3050.26    
  45  0.312226      -1.16403      -414.072       414.072       2206.52       2620.59    
  46  0.473636E-02  -5.35249      -1904.01       1904.01       2167.07       4071.08    
  47  0.192099      -1.64975      -586.853       586.853       2166.27       2753.12    
  48  0.799429     -0.223858      -79.6316       79.6316       2127.03       2206.66    
  49  0.164379      -1.80558      -642.288       642.288       2284.45       2926.74    
  50  0.421896     -0.862996      -306.988       306.988       2194.93       2501.92    
  51  0.361660      -1.01705      -361.789       361.789       2143.46       2505.25    
loop,thermsimp(1:2)       37   22.3268       1596.17    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122       4206.22          0.86          1.12         21.90          0.07          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123       2541.69          0.85          1.12         21.89          0.06          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2541.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       37
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       38
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      122     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -351.998       351.998       2137.07       2489.07    
   2  0.687927     -0.374072      -133.066       133.066       2146.80       2279.86    
   3  0.288957      -1.24148      -441.623       441.623       2127.03       2568.65    
   4  0.192838      -1.64590      -585.487       585.487       2264.20       2849.68    
   5  0.369869     -0.994607      -353.805       353.805       2210.66       2564.46    
   6  0.735973     -0.306562      -109.051       109.051       2297.40       2406.45    
   7  0.637144     -0.450760      -160.346       160.346       2249.11       2409.46    
   8  0.703934     -0.351071      -124.884       124.884       2235.53       2360.41    
   9  0.864279     -0.145859      -51.8856       51.8856       2245.90       2297.78    
  10  0.473452     -0.747705      -265.976       265.976       2293.75       2559.73    
  11  0.242010      -1.41877      -504.692       504.692       2177.50       2682.19    
  12  0.510769     -0.671838      -238.989       238.989       2369.32       2608.31    
  13  0.829624     -0.186782      -66.4430       66.4430       2131.91       2198.35    
  14  0.228911      -1.47442      -524.488       524.488       2362.77       2887.25    
  15  0.310006      -1.17116      -416.611       416.611       2145.14       2561.75    
  16  0.248341      -1.39295      -495.507       495.507       2131.28       2626.79    
  17  0.723214     -0.324050      -115.272       115.272       2260.02       2375.29    
  18  0.420900     -0.865360      -307.829       307.829       2293.12       2600.95    
  19  0.133903      -2.01064      -715.231       715.231       2302.72       3017.95    
  20  0.571916     -0.558763      -198.765       198.765       2194.93       2393.69    
  21  0.609104     -0.495766      -176.356       176.356       2143.46       2319.81    
  22  0.582057     -0.541186      -192.513       192.513       2328.11       2520.62    
  23  0.440731     -0.819321      -291.452       291.452       2289.32       2580.78    
  24  0.211006      -1.55587      -553.460       553.460       2272.69       2826.15    
  25  0.665769     -0.406813      -144.713       144.713       2546.00       2690.71    
  26  0.766062     -0.266493      -94.7977       94.7977       2386.98       2481.78    
  27  0.321416E-01  -3.43760      -1222.84       1222.84       2576.66       3799.50    
  28  0.165897E-01  -4.09897      -1458.10       1458.10       2472.78       3930.88    
  29  0.634553     -0.454835      -161.796       161.796       2206.52       2368.31    
  30  0.981834     -0.183335E-01  -6.52167       6.52167       2260.88       2267.40    
  31  0.511720     -0.669978      -238.327       238.327       2297.60       2535.93    
  32  0.426358     -0.852477      -303.246       303.246       2166.27       2469.51    
  33  0.500527     -0.692094      -246.194       246.194       2362.57       2608.77    
  34  0.100483      -2.29777      -817.372       817.372       2433.63       3251.00    
  35  0.837324     -0.177545      -63.1569       63.1569       2368.05       2431.21    
  36  0.257741      -1.35580      -482.290       482.290       2353.23       2835.52    
  37  0.437184     -0.827401      -294.326       294.326       2764.54       3058.87    
  38  0.707529     -0.345976      -123.072       123.072       2411.76       2534.83    
  39  0.538379     -0.619193      -220.262       220.262       2197.36       2417.62    
  40  0.611820     -0.491317      -174.773       174.773       2284.45       2459.22    
  41  0.404533     -0.905022      -321.938       321.938       2218.66       2540.60    
  42  0.902499     -0.102588      -36.4931       36.4931       2396.44       2432.93    
  43  0.704299     -0.350552      -124.700       124.700       2190.57       2315.27    
  44  0.511818     -0.669786      -238.259       238.259       2244.85       2483.11    
  45  0.748131     -0.290178      -103.223       103.223       2322.59       2425.81    
  46  0.296598      -1.21538      -432.339       432.339       2210.51       2642.85    
  47  0.805122     -0.216762      -77.1073       77.1073       2328.23       2405.34    
  48  0.525063     -0.644236      -229.170       229.170       2371.49       2600.66    
  49  0.192567      -1.64731      -585.988       585.988       2245.22       2831.21    
  50  0.991898     -0.813527E-02  -2.89391       2.89391       2164.09       2166.99    
  51  0.238175      -1.43475      -510.374       510.374       2541.69       3052.07    
loop,thermsimp(1:2)       38   351.998       133.066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       2126.23          0.86          1.12         21.91          0.09          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125       2263.12          0.85          1.12         22.04          0.02          0.05         24.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2126.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       38
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       39
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      124     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -114.756       114.756       2164.09       2278.85    
   2  0.309663      -1.17227      -417.004       417.004       2131.91       2548.92    
   3  0.688114     -0.373801      -132.970       132.970       2260.88       2393.85    
   4  0.677876     -0.388791      -138.302       138.302       2146.80       2285.10    
   5  0.283701      -1.25984      -448.153       448.153       2245.90       2694.05    
   6  0.183733      -1.69427      -602.692       602.692       2190.57       2793.26    
   7  0.243414      -1.41299      -502.635       502.635       2143.46       2646.09    
   8  0.785389     -0.241576      -85.9342       85.9342       2235.53       2321.46    
   9  0.258033      -1.35467      -481.888       481.888       2206.52       2688.41    
  10  0.137887      -1.98132      -704.804       704.804       2260.02       2964.82    
  11  0.386520     -0.950573      -338.141       338.141       2194.93       2533.07    
  12  0.882934     -0.124505      -44.2895       44.2895       2328.23       2372.52    
  13  0.395106     -0.928602      -330.326       330.326       2297.40       2627.72    
  14  0.107633      -2.22903      -792.920       792.920       2249.11       3042.03    
  15  0.434094     -0.834495      -296.850       296.850       2197.36       2494.21    
  16  0.558484     -0.582529      -207.220       207.220       2322.59       2529.81    
  17  0.102706      -2.27589      -809.587       809.587       2368.05       3177.64    
  18  0.325804      -1.12146      -398.929       398.929       2396.44       2795.37    
  19  0.693871     -0.365469      -130.006       130.006       2284.45       2414.45    
  20  0.832622     -0.183176      -65.1600       65.1600       2166.27       2231.43    
  21  0.691207     -0.369316      -131.374       131.374       2386.98       2518.35    
  22  0.903946     -0.100985      -35.9228       35.9228       2244.85       2280.77    
  23  0.258785E-01  -3.65434      -1299.94       1299.94       2137.07       3437.00    
  24  0.247338      -1.39700      -496.946       496.946       2328.11       2825.06    
  25  0.861464     -0.149122      -53.0463       53.0463       2411.76       2464.81    
  26  0.954919     -0.461290E-01  -16.4092       16.4092       2297.60       2314.01    
  27  0.579638     -0.545352      -193.995       193.995       2218.66       2412.65    
  28  0.537182     -0.621418      -221.053       221.053       2293.75       2514.80    
  29  0.407710     -0.897199      -319.155       319.155       2145.14       2464.29    
  30  0.958466     -0.424211E-01  -15.0902       15.0902       2210.66       2225.75    
  31  0.884674     -0.122536      -43.5890       43.5890       2127.03       2170.62    
  32  0.395055     -0.928731      -330.372       330.372       2289.32       2619.70    
  33  0.325425      -1.12262      -399.343       399.343       2371.49       2770.84    
  34  0.679842     -0.385895      -137.272       137.272       2293.12       2430.40    
  35  0.765292     -0.267498      -95.1553       95.1553       2369.32       2464.48    
  36  0.217460      -1.52574      -542.742       542.742       2362.57       2905.32    
  37  0.181189      -1.70822      -607.653       607.653       2131.28       2738.94    
  38  0.518456     -0.656899      -233.675       233.675       2210.51       2444.18    
  39  0.249864E-01  -3.68942      -1312.42       1312.42       2177.50       3489.91    
  40  0.336654      -1.08870      -387.277       387.277       2546.00       2933.28    
  41  0.873801     -0.134903      -47.9881       47.9881       2272.69       2320.68    
  42  0.478904     -0.736255      -261.903       261.903       2245.22       2507.13    
  43  0.819950     -0.198512      -70.6155       70.6155       2353.23       2423.85    
  44  0.966813     -0.337500E-01  -12.0057       12.0057       2264.20       2276.20    
  45  0.514109     -0.665319      -236.670       236.670       2362.77       2599.44    
  46  0.483734     -0.726221      -258.334       258.334       2302.72       2561.05    
  47  0.227743E-01  -3.78212      -1345.39       1345.39       2541.69       3887.08    
  48  0.409495     -0.892830      -317.601       317.601       2764.54       3082.14    
  49  0.198361      -1.61767      -575.443       575.443       2433.63       3009.07    
  50  0.925767     -0.771331E-01  -27.4381       27.4381       2576.66       2604.10    
  51  0.842113     -0.171842      -61.1281       61.1281       2126.23       2187.36    
loop,thermsimp(1:2)       39   114.756       417.004    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126       2136.16          0.86          1.11         22.05          0.00          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127       2324.70          0.85          1.11         22.25          0.03          0.05         24.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2136.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       39
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       40
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      126     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -16.5161       16.5161       2127.03       2143.55    
   2  0.450411     -0.797594      -283.723       283.723       2126.23       2409.95    
   3  0.691912E-01  -2.67088      -950.096       950.096       2210.66       3160.75    
   4  0.740935     -0.299842      -106.661       106.661       2166.27       2272.93    
   5  0.452531     -0.792898      -282.053       282.053       2264.20       2546.25    
   6  0.461330     -0.773642      -275.203       275.203       2164.09       2439.30    
   7  0.102999      -2.27303      -808.572       808.572       2244.85       3053.42    
   8  0.475106     -0.744217      -264.736       264.736       2146.80       2411.53    
   9  0.240275      -1.42597      -507.251       507.251       2297.60       2804.85    
  10  0.276707E-01  -3.58738      -1276.12       1276.12       2272.69       3548.81    
  11  0.132701E-01  -4.32224      -1537.52       1537.52       2235.53       3773.05    
  12  0.997219     -0.278509E-02 -0.990721      0.990721       2328.23       2329.22    
  13  0.563305     -0.573934      -204.162       204.162       2260.88       2465.04    
  14  0.347949      -1.05570      -375.538       375.538       2218.66       2594.20    
  15  0.546018     -0.605103      -215.250       215.250       2284.45       2499.70    
  16  0.343968      -1.06721      -379.631       379.631       2353.23       2732.86    
  17  0.945234     -0.563230E-01  -20.0354       20.0354       2293.12       2313.16    
  18  0.346208      -1.06072      -377.322       377.322       2210.51       2587.83    
  19  0.406433     -0.900337      -320.271       320.271       2145.14       2465.41    
  20  0.632259     -0.458455      -163.083       163.083       2369.32       2532.41    
  21  0.983930     -0.162002E-01  -5.76279       5.76279       2411.76       2417.52    
  22  0.200798      -1.60546      -571.099       571.099       2197.36       2768.46    
  23  0.223962      -1.49628      -532.261       532.261       2245.22       2777.48    
  24  0.594322     -0.520335      -185.095       185.095       2293.75       2478.85    
  25  0.875298     -0.133191      -47.3792       47.3792       2386.98       2434.36    
  26  0.327822      -1.11529      -396.733       396.733       2322.59       2719.32    
  27  0.215105      -1.53663      -546.615       546.615       2194.93       2741.54    
  28  0.905181     -0.996198E-01  -35.4371       35.4371       2131.91       2167.35    
  29  0.699086     -0.357981      -127.343       127.343       2302.72       2430.06    
  30  0.747401     -0.291154      -103.570       103.570       2362.77       2466.34    
  31  0.699189     -0.357834      -127.290       127.290       2576.66       2703.95    
  32  0.563488     -0.573610      -204.047       204.047       2289.32       2493.37    
  33  0.155576      -1.86062      -661.868       661.868       2297.40       2959.26    
  34  0.380593     -0.966025      -343.638       343.638       2143.46       2487.10    
  35  0.626112     -0.468226      -166.559       166.559       2206.52       2373.08    
  36  0.372369     -0.987870      -351.409       351.409       2245.90       2597.30    
  37  0.517531     -0.658686      -234.310       234.310       2131.28       2365.60    
  38  0.673247     -0.395643      -140.739       140.739       2371.49       2512.23    
  39  0.741527     -0.299044      -106.377       106.377       2190.57       2296.94    
  40  0.280982      -1.26947      -451.579       451.579       2396.44       2848.02    
  41  0.331745      -1.10339      -392.502       392.502       2328.11       2720.61    
  42  0.712030     -0.339635      -120.816       120.816       2362.57       2483.39    
  43  0.200581      -1.60654      -571.483       571.483       2546.00       3117.48    
  44  0.989915     -0.101357E-01  -3.60551       3.60551       2260.02       2263.62    
  45  0.808031     -0.213155      -75.8244       75.8244       2433.63       2509.45    
  46  0.893446     -0.112670      -40.0793       40.0793       2249.11       2289.19    
  47  0.364885      -1.00817      -358.631       358.631       2764.54       3123.17    
  48  0.923731     -0.793347E-01  -28.2212       28.2212       2368.05       2396.27    
  49  0.504880     -0.683434      -243.114       243.114       2137.07       2380.18    
  50  0.724988     -0.321600      -114.401       114.401       2177.50       2291.90    
  51  0.927322     -0.754540E-01  -26.8408       26.8408       2136.16       2163.00    
loop,thermsimp(1:2)       40   16.5161       283.723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128       2223.68          0.86          1.12         21.92          0.01          0.05         23.96
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129       5768.18          0.85          1.12         21.86          0.11          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2223.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       40
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       41
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      128     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -365.442       365.442       2127.03       2492.47    
   2  0.414955     -0.879585      -312.889       312.889       2136.16       2449.05    
   3  0.407443     -0.897854      -319.388       319.388       2131.91       2451.30    
   4  0.883897     -0.123414      -43.9014       43.9014       2260.02       2303.92    
   5  0.520045     -0.653840      -232.587       232.587       2166.27       2398.85    
   6  0.634521     -0.454885      -161.813       161.813       2249.11       2410.92    
   7  0.344406      -1.06594      -379.178       379.178       2177.50       2556.67    
   8  0.545595     -0.605879      -215.526       215.526       2190.57       2406.09    
   9  0.766876     -0.265430      -94.4196       94.4196       2293.12       2387.54    
  10  0.639043     -0.447783      -159.287       159.287       2328.23       2487.52    
  11  0.850701     -0.161694      -57.5186       57.5186       2131.28       2188.80    
  12  0.832060     -0.183851      -65.4002       65.4002       2206.52       2271.92    
  13  0.728209     -0.317167      -112.824       112.824       2137.07       2249.89    
  14  0.531327     -0.632378      -224.952       224.952       2368.05       2593.00    
  15  0.188974E-01  -3.96873      -1411.77       1411.77       2126.23       3538.00    
  16  0.246817      -1.39911      -497.695       497.695       2146.80       2644.49    
  17  0.935336     -0.668496E-01  -23.7800       23.7800       2411.76       2435.54    
  18  0.730823     -0.313585      -111.549       111.549       2302.72       2414.27    
  19  0.482288     -0.729213      -259.398       259.398       2386.98       2646.38    
  20  0.782974E-04  -9.45500      -3363.37       3363.37       2164.09       5527.46    
  21  0.258744      -1.35192      -480.909       480.909       2260.88       2741.79    
  22  0.389044     -0.944063      -335.825       335.825       2145.14       2480.96    
  23  0.611459E-01  -2.79449      -994.067       994.067       2362.77       3356.83    
  24  0.124922      -2.08006      -739.928       739.928       2293.75       3033.68    
  25  0.253683      -1.37167      -487.936       487.936       2362.57       2850.51    
  26  0.781437     -0.246621      -87.7288       87.7288       2143.46       2231.19    
  27  0.835634     -0.179565      -63.8755       63.8755       2289.32       2353.20    
  28  0.542030     -0.612434      -217.857       217.857       2284.45       2502.31    
  29  0.463443     -0.769071      -273.577       273.577       2433.63       2707.21    
  30  0.120587      -2.11538      -752.492       752.492       2371.49       3123.98    
  31  0.733316     -0.310178      -110.338       110.338       2369.32       2479.66    
  32  0.955530     -0.454889E-01  -16.1815       16.1815       2264.20       2280.38    
  33  0.419735     -0.868132      -308.815       308.815       2210.51       2519.32    
  34  0.284829      -1.25587      -446.741       446.741       2218.66       2665.40    
  35  0.924079     -0.789582E-01  -28.0873       28.0873       2245.90       2273.98    
  36  0.432674     -0.837770      -298.015       298.015       2576.66       2874.68    
  37  0.155293      -1.86244      -662.514       662.514       2322.59       2985.10    
  38  0.634342     -0.455168      -161.914       161.914       2328.11       2490.02    
  39  0.935635     -0.665293E-01  -23.6661       23.6661       2353.23       2376.90    
  40  0.931832     -0.706024E-01  -25.1149       25.1149       2194.93       2220.04    
  41  0.875970     -0.132424      -47.1063       47.1063       2197.36       2244.47    
  42  0.273544      -1.29629      -461.122       461.122       2245.22       2706.34    
  43  0.799596     -0.223649      -79.5573       79.5573       2297.60       2377.16    
  44  0.772883     -0.257628      -91.6443       91.6443       2396.44       2488.09    
  45  0.274276      -1.29362      -460.172       460.172       2297.40       2757.57    
  46  0.116034      -2.15387      -766.184       766.184       2244.85       3011.03    
  47  0.700214     -0.356369      -126.769       126.769       2546.00       2672.77    
  48  0.704184E-01  -2.65330      -943.842       943.842       2764.54       3708.39    
  49  0.699980E-01  -2.65929      -945.972       945.972       2210.66       3156.63    
  50  0.186964      -1.67684      -596.492       596.492       2272.69       2869.18    
  51  0.342641      -1.07107      -381.006       381.006       2223.68       2604.69    
loop,thermsimp(1:2)       41   365.442       312.889    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130       2292.94          0.86          1.12         21.98          0.02          0.06         24.04
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131       3134.86          0.85          1.13         21.89          0.01          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2292.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       41
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       42
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      130     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -1025.71       1025.71       2131.28       3157.00    
   2  0.688513     -0.373221      -132.764       132.764       2194.93       2327.69    
   3  0.530653     -0.633647      -225.403       225.403       2143.46       2368.86    
   4  0.542886     -0.610856      -217.296       217.296       2197.36       2414.66    
   5  0.603382     -0.505205      -179.713       179.713       2137.07       2316.78    
   6  0.478412     -0.737283      -262.269       262.269       2206.52       2468.79    
   7  0.809657     -0.211144      -75.1091       75.1091       2245.90       2321.00    
   8  0.764585     -0.268422      -95.4840       95.4840       2264.20       2359.68    
   9  0.228600      -1.47578      -524.970       524.970       2260.02       2784.99    
  10  0.495526     -0.702136      -249.766       249.766       2289.32       2539.09    
  11  0.368264     -0.998954      -355.352       355.352       2353.23       2708.59    
  12  0.407647     -0.897355      -319.210       319.210       2297.60       2616.81    
  13  0.316165      -1.15149      -409.613       409.613       2293.12       2702.74    
  14  0.458518     -0.779756      -277.378       277.378       2166.27       2443.65    
  15  0.643610     -0.440663      -156.754       156.754       2190.57       2347.32    
  16  0.316553E-01  -3.45285      -1228.26       1228.26       2249.11       3477.37    
  17  0.570171     -0.561819      -199.852       199.852       2302.72       2502.57    
  18  0.448642E-01  -3.10412      -1104.21       1104.21       2411.76       3515.97    
  19  0.128957      -2.04828      -728.621       728.621       2136.16       2864.78    
  20  0.159422      -1.83620      -653.181       653.181       2131.91       2785.09    
  21  0.154083      -1.87026      -665.296       665.296       2369.32       3034.62    
  22  0.696997     -0.360974      -128.407       128.407       2145.14       2273.54    
  23  0.579421     -0.545727      -194.128       194.128       2328.23       2522.36    
  24  0.528206     -0.638269      -227.048       227.048       2396.44       2623.49    
  25  0.322914      -1.13037      -402.099       402.099       2328.11       2730.21    
  26  0.369562     -0.995437      -354.101       354.101       2127.03       2481.13    
  27  0.134248      -2.00806      -714.316       714.316       2284.45       2998.76    
  28  0.950150     -0.511358E-01  -18.1902       18.1902       2210.51       2228.70    
  29  0.138040      -1.98021      -704.408       704.408       2177.50       2881.90    
  30  0.316838      -1.14936      -408.856       408.856       2368.05       2776.90    
  31  0.151783      -1.88530      -670.648       670.648       2223.68       2894.33    
  32  0.338674      -1.08272      -385.149       385.149       2146.80       2531.94    
  33  0.814165     -0.205592      -73.1341       73.1341       2386.98       2460.11    
  34  0.578183     -0.547865      -194.888       194.888       2218.66       2413.55    
  35  0.208707      -1.56682      -557.356       557.356       2546.00       3103.36    
  36  0.540561     -0.615147      -218.823       218.823       2245.22       2464.05    
  37  0.910129     -0.941686E-01  -33.4980       33.4980       2433.63       2467.13    
  38  0.907740     -0.967972E-01  -34.4331       34.4331       2260.88       2295.31    
  39  0.549661     -0.598453      -212.884       212.884       2297.40       2510.28    
  40  0.193889      -1.64047      -583.555       583.555       2362.57       2946.13    
  41  0.807651     -0.213625      -75.9916       75.9916       2272.69       2348.68    
  42  0.613777     -0.488124      -173.637       173.637       2576.66       2750.30    
  43  0.664452     -0.408793      -145.417       145.417       2322.59       2468.00    
  44  0.584630     -0.536776      -190.944       190.944       2244.85       2435.79    
  45  0.618915     -0.479787      -170.672       170.672       2293.75       2464.42    
  46  0.542097     -0.612311      -217.814       217.814       2371.49       2589.31    
  47  0.133641      -2.01260      -715.930       715.930       2210.66       2926.59    
  48  0.479627     -0.734747      -261.367       261.367       2362.77       2624.13    
  49  0.225939      -1.48749      -529.136       529.136       2126.23       2655.37    
  50  0.324869      -1.12433      -399.952       399.952       2764.54       3164.50    
  51  0.669051     -0.401895      -142.964       142.964       2292.94       2435.91    
loop,thermsimp(1:2)       42   1025.71       132.764    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       2154.56          0.83          1.11         21.91          0.13          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133       2312.80          0.85          1.11         22.06          0.04          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2154.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       42
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       43
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      132     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -84.4825       84.4825       2210.51       2294.99    
   2  0.796559     -0.227454      -80.9108       80.9108       2145.14       2226.05    
   3  0.784232     -0.243051      -86.4589       86.4589       2260.88       2347.34    
   4  0.503549     -0.686074      -244.053       244.053       2137.07       2381.12    
   5  0.468337     -0.758566      -269.840       269.840       2245.90       2515.74    
   6  0.198518      -1.61688      -575.162       575.162       2194.93       2770.09    
   7  0.857529     -0.153700      -54.6747       54.6747       2190.57       2245.24    
   8  0.845427     -0.167913      -59.7306       59.7306       2272.69       2332.42    
   9  0.710919     -0.341197      -121.372       121.372       2264.20       2385.57    
  10  0.934107     -0.681640E-01  -24.2476       24.2476       2143.46       2167.71    
  11  0.565087     -0.570775      -203.038       203.038       2218.66       2421.70    
  12  0.147377      -1.91476      -681.126       681.126       2197.36       2878.49    
  13  0.471965     -0.750851      -267.096       267.096       2244.85       2511.95    
  14  0.287319      -1.24716      -443.645       443.645       2292.94       2736.59    
  15  0.526906     -0.640733      -227.924       227.924       2166.27       2394.19    
  16  0.176999      -1.73161      -615.975       615.975       2386.98       3002.95    
  17  0.868579     -0.140897      -50.1202       50.1202       2245.22       2295.34    
  18  0.621282     -0.475971      -169.314       169.314       2293.75       2463.07    
  19  0.181881      -1.70440      -606.297       606.297       2433.63       3039.93    
  20  0.565209     -0.570560      -202.962       202.962       2322.59       2525.55    
  21  0.927617     -0.751364E-01  -26.7278       26.7278       2206.52       2233.25    
  22  0.296120      -1.21699      -432.912       432.912       2127.03       2559.94    
  23  0.152389      -1.88132      -669.229       669.229       2302.72       2971.95    
  24  0.508731     -0.675835      -240.411       240.411       2297.40       2537.81    
  25  0.389654     -0.942496      -335.268       335.268       2328.23       2663.50    
  26  0.770754     -0.260386      -92.6255       92.6255       2146.80       2239.42    
  27  0.144347      -1.93554      -688.516       688.516       2289.32       2977.84    
  28  0.690124     -0.370884      -131.932       131.932       2371.49       2503.42    
  29  0.882429     -0.125077      -44.4929       44.4929       2297.60       2342.09    
  30  0.781105     -0.247045      -87.8799       87.8799       2396.44       2484.32    
  31  0.331946      -1.10278      -392.286       392.286       2362.77       2755.05    
  32  0.157011      -1.85144      -658.600       658.600       2126.23       2784.83    
  33  0.734200     -0.308973      -109.909       109.909       2293.12       2403.03    
  34  0.563390     -0.573784      -204.108       204.108       2353.23       2557.34    
  35  0.349498      -1.05126      -373.957       373.957       2328.11       2702.07    
  36  0.256822      -1.35937      -483.560       483.560       2576.66       3060.22    
  37  0.563556     -0.573488      -204.003       204.003       2368.05       2572.05    
  38  0.945419E-01  -2.35871      -839.050       839.050       2260.02       3099.07    
  39  0.571450     -0.559577      -199.055       199.055       2131.91       2330.97    
  40  0.583029E-01  -2.84210      -1011.00       1011.00       2136.16       3147.16    
  41  0.428808     -0.846746      -301.208       301.208       2177.50       2478.70    
  42  0.628450     -0.464499      -165.233       165.233       2223.68       2388.92    
  43  0.152789      -1.87869      -668.296       668.296       2210.66       2878.95    
  44  0.787004E-01  -2.54211      -904.288       904.288       2362.57       3266.86    
  45  0.170927E-01  -4.06911      -1447.48       1447.48       2284.45       3731.93    
  46  0.531078     -0.632847      -225.119       225.119       2369.32       2594.44    
  47  0.206082E-01  -3.88206      -1380.94       1380.94       2546.00       3926.94    
  48  0.909565     -0.947891E-01  -33.7187       33.7187       2131.28       2165.00    
  49  0.456291     -0.784625      -279.110       279.110       2764.54       3043.65    
  50  0.997425E-02  -4.60775      -1639.09       1639.09       2249.11       3888.20    
  51  0.251070      -1.38202      -491.618       491.618       2154.56       2646.18    
loop,thermsimp(1:2)       43   84.4825       80.9108    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       2106.11          0.86          1.12         22.20          0.00          0.06         24.25
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135       2326.96          0.85          1.12         21.98          0.02          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2106.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       43
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       44
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      134     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -801.773       801.773       2131.28       2933.06    
   2  0.780131E-01  -2.55088      -907.408       907.408       2143.46       3050.87    
   3  0.723689     -0.323394      -115.039       115.039       2145.14       2260.17    
   4  0.439896     -0.821218      -292.127       292.127       2206.52       2498.65    
   5  0.967364     -0.331803E-01  -11.8030       11.8030       2146.80       2158.60    
   6  0.235884      -1.44441      -513.813       513.813       2190.57       2704.38    
   7  0.311956      -1.16489      -414.381       414.381       2210.51       2624.89    
   8  0.600573     -0.509870      -181.373       181.373       2245.22       2426.60    
   9  0.781739     -0.246234      -87.5913       87.5913       2131.91       2219.50    
  10  0.505036     -0.683126      -243.004       243.004       2272.69       2515.69    
  11  0.896130     -0.109670      -39.0123       39.0123       2297.60       2336.61    
  12  0.545040     -0.606897      -215.888       215.888       2260.88       2476.76    
  13  0.338019      -1.08465      -385.837       385.837       2137.07       2522.91    
  14  0.200467      -1.60711      -571.686       571.686       2264.20       2835.88    
  15  0.548763     -0.600089      -213.466       213.466       2223.68       2437.15    
  16  0.897241     -0.108431      -38.5714       38.5714       2166.27       2204.84    
  17  0.229905      -1.47009      -522.945       522.945       2293.12       2816.07    
  18  0.387828     -0.947193      -336.939       336.939       2218.66       2555.60    
  19  0.789400     -0.236482      -84.1224       84.1224       2293.75       2377.87    
  20  0.495667     -0.701851      -249.665       249.665       2177.50       2427.16    
  21  0.818926     -0.199761      -71.0598       71.0598       2396.44       2467.50    
  22  0.181319      -1.70750      -607.397       607.397       2371.49       2978.89    
  23  0.901986     -0.103156      -36.6952       36.6952       2244.85       2281.55    
  24  0.933790E-01  -2.37109      -843.452       843.452       2245.90       3089.35    
  25  0.171523      -1.76304      -627.154       627.154       2322.59       2949.74    
  26  0.648450     -0.433170      -154.089       154.089       2297.40       2451.48    
  27  0.777448     -0.251739      -89.5494       89.5494       2353.23       2442.78    
  28  0.777670     -0.251453      -89.4478       89.4478       2127.03       2216.48    
  29  0.972420     -0.279672E-01  -9.94861       9.94861       2368.05       2378.00    
  30  0.825305     -0.192002      -68.2996       68.2996       2369.32       2437.62    
  31  0.470649     -0.753642      -268.088       268.088       2154.56       2422.65    
  32  0.263953      -1.33198      -473.818       473.818       2328.23       2802.05    
  33  0.857551     -0.153675      -54.6659       54.6659       2328.11       2382.78    
  34  0.950157     -0.511279E-01  -18.1874       18.1874       2292.94       2311.13    
  35  0.866482     -0.143314      -50.9801       50.9801       2362.77       2413.75    
  36  0.904889     -0.999433E-01  -35.5522       35.5522       2194.93       2230.48    
  37  0.297565      -1.21212      -431.180       431.180       2126.23       2557.41    
  38  0.902696     -0.102369      -36.4152       36.4152       2197.36       2233.78    
  39  0.800054     -0.223076      -79.3535       79.3535       2210.66       2290.01    
  40  0.534162     -0.627057      -223.059       223.059       2302.72       2525.78    
  41  0.593018     -0.522530      -185.876       185.876       2289.32       2475.20    
  42  0.682417E-01  -2.68470      -955.011       955.011       2386.98       3341.99    
  43  0.336048      -1.09050      -387.917       387.917       2433.63       2821.55    
  44  0.576540     -0.550710      -195.901       195.901       2764.54       2960.44    
  45  0.217955      -1.52347      -541.933       541.933       2576.66       3118.60    
  46  0.281607      -1.26724      -450.788       450.788       2260.02       2710.81    
  47  0.306631      -1.18211      -420.504       420.504       2136.16       2556.66    
  48  0.676335E-01  -2.69365      -958.196       958.196       2362.57       3320.77    
  49  0.145631      -1.92668      -685.365       685.365       2284.45       2969.81    
  50  0.820952     -0.197291      -70.1810       70.1810       2249.11       2319.29    
  51  0.224137      -1.49550      -531.984       531.984       2106.11       2638.09    
loop,thermsimp(1:2)       44   801.773       907.408    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       2143.13          0.84          1.12         21.87          0.07          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137       2856.18          0.85          1.12         21.94          0.07          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2143.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       44
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       45
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      136     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -48.4714       48.4714       2146.80       2195.27    
   2  0.990306     -0.974175E-02  -3.46537       3.46537       2166.27       2169.73    
   3  0.488656     -0.716096      -254.732       254.732       2127.03       2381.76    
   4  0.865115E-01  -2.44748      -870.626       870.626       2131.91       3002.54    
   5  0.234262      -1.45132      -516.268       516.268       2194.93       2711.20    
   6  0.906541     -0.981186E-01  -34.9031       34.9031       2197.36       2232.26    
   7  0.680454     -0.384995      -136.952       136.952       2145.14       2282.09    
   8  0.575574     -0.552388      -196.498       196.498       2244.85       2441.35    
   9  0.537443E-02  -5.22610      -1859.05       1859.05       2210.66       4069.70    
  10  0.421676     -0.863518      -307.174       307.174       2292.94       2600.12    
  11  0.297588      -1.21204      -431.153       431.153       2249.11       2680.26    
  12  0.119337      -2.12581      -756.200       756.200       2297.60       3053.80    
  13  0.958276     -0.426192E-01  -15.1607       15.1607       2293.75       2308.91    
  14  0.115549      -2.15806      -767.672       767.672       2368.05       3135.72    
  15  0.104220      -2.26125      -804.382       804.382       2328.11       3132.49    
  16  0.719503     -0.329194      -117.102       117.102       2362.77       2479.87    
  17  0.875656     -0.132782      -47.2336       47.2336       2154.56       2201.80    
  18  0.578760     -0.546868      -194.534       194.534       2245.22       2439.76    
  19  0.923704     -0.793639E-01  -28.2316       28.2316       2177.50       2205.73    
  20  0.457980     -0.780930      -277.795       277.795       2223.68       2501.48    
  21  0.783173     -0.244401      -86.9393       86.9393       2369.32       2456.26    
  22  0.764479     -0.268561      -95.5335       95.5335       2353.23       2448.77    
  23  0.496891     -0.699384      -248.788       248.788       2297.40       2546.18    
  24  0.554859     -0.589041      -209.536       209.536       2396.44       2605.98    
  25  0.734503E-02  -4.91373      -1747.93       1747.93       2289.32       4037.25    
  26  0.117643      -2.14010      -761.286       761.286       2260.88       3022.16    
  27  0.145440      -1.92799      -685.832       685.832       2206.52       2892.35    
  28  0.375449     -0.979633      -348.479       348.479       2272.69       2621.17    
  29  0.954324E-01  -2.34934      -835.715       835.715       2137.07       2972.78    
  30  0.449085     -0.800543      -284.772       284.772       2302.72       2587.49    
  31  0.354483      -1.03709      -368.919       368.919       2218.66       2587.58    
  32  0.153971      -1.87099      -665.556       665.556       2136.16       2801.71    
  33  0.871598     -0.137427      -48.8859       48.8859       2126.23       2175.12    
  34  0.633061     -0.457188      -162.633       162.633       2210.51       2373.14    
  35  0.947022E-01  -2.35702      -838.447       838.447       2106.11       2944.56    
  36  0.793812     -0.230909      -82.1398       82.1398       2190.57       2272.71    
  37  0.760585     -0.273667      -97.3499       97.3499       2260.02       2357.37    
  38  0.124312      -2.08496      -741.671       741.671       2328.23       3069.90    
  39  0.961605E-03  -6.94691      -2471.18       2471.18       2293.12       4764.30    
  40  0.672529     -0.396710      -141.119       141.119       2433.63       2574.75    
  41  0.749847E-01  -2.59047      -921.492       921.492       2264.20       3185.69    
  42  0.982441     -0.177147E-01  -6.30155       6.30155       2131.28       2137.59    
  43  0.340727      -1.07667      -382.998       382.998       2322.59       2705.58    
  44  0.915043     -0.887846E-01  -31.5828       31.5828       2764.54       2796.13    
  45  0.150614      -1.89303      -673.397       673.397       2284.45       2957.85    
  46  0.892785     -0.113409      -40.3423       40.3423       2371.49       2411.83    
  47  0.844073     -0.169516      -60.3008       60.3008       2143.46       2203.76    
  48  0.469949     -0.755131      -268.618       268.618       2245.90       2514.51    
  49  0.389072     -0.943991      -335.800       335.800       2576.66       2912.46    
  50  0.738049     -0.303745      -108.049       108.049       2362.57       2470.62    
  51  0.250173      -1.38560      -492.892       492.892       2143.13       2636.02    
loop,thermsimp(1:2)       45   48.4714       3.46537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138       2126.88          0.86          1.12         21.95          0.04          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139       2423.71          0.86          1.12         21.96          0.02          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2126.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       45
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       46
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      138     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -864.332       864.332       2131.28       2995.62    
   2  0.312747      -1.16236      -413.480       413.480       2166.27       2579.75    
   3  0.317683      -1.14670      -407.908       407.908       2126.23       2534.14    
   4  0.693053     -0.366649      -130.426       130.426       2146.80       2277.22    
   5  0.361881      -1.01644      -361.571       361.571       2154.56       2516.13    
   6  0.127478      -2.05981      -732.723       732.723       2143.46       2876.18    
   7  0.718706     -0.330302      -117.496       117.496       2177.50       2294.99    
   8  0.609419E-01  -2.79783      -995.256       995.256       2197.36       3192.62    
   9  0.320798      -1.13695      -404.438       404.438       2190.57       2595.01    
  10  0.343503      -1.06856      -380.112       380.112       2145.14       2525.25    
  11  0.671828     -0.397753      -141.490       141.490       2293.75       2435.24    
  12  0.616702     -0.483369      -171.946       171.946       2260.02       2431.97    
  13  0.806358E-01  -2.51781      -895.646       895.646       2210.51       3106.15    
  14  0.997284     -0.271972E-02 -0.967471      0.967471       2127.03       2128.00    
  15  0.554344     -0.589969      -209.866       209.866       2371.49       2581.36    
  16  0.411057     -0.889023      -316.246       316.246       2245.22       2561.47    
  17  0.846258E-01  -2.46952      -878.466       878.466       2244.85       3123.32    
  18  0.737439     -0.304571      -108.343       108.343       2353.23       2461.58    
  19  0.393790     -0.931939      -331.513       331.513       2369.32       2700.84    
  20  0.965947     -0.346467E-01  -12.3246       12.3246       2362.57       2374.90    
  21  0.150166      -1.89601      -674.457       674.457       2362.77       3037.22    
  22  0.212005      -1.55114      -551.779       551.779       2223.68       2775.46    
  23  0.615060     -0.486036      -172.895       172.895       2245.90       2418.79    
  24  0.382142     -0.961962      -342.193       342.193       2297.40       2639.59    
  25  0.249044      -1.39013      -494.501       494.501       2433.63       2928.13    
  26  0.245943      -1.40266      -498.958       498.958       2302.72       2801.68    
  27  0.108882      -2.21749      -788.815       788.815       2218.66       3007.47    
  28  0.199835      -1.61026      -572.809       572.809       2292.94       2865.75    
  29  0.863954     -0.146235      -52.0194       52.0194       2396.44       2448.46    
  30  0.392842     -0.934347      -332.369       332.369       2272.69       2605.06    
  31  0.770596     -0.260592      -92.6986       92.6986       2143.13       2235.83    
  32  0.149868      -1.89800      -675.165       675.165       2249.11       2924.27    
  33  0.234154      -1.45178      -516.431       516.431       2322.59       2839.02    
  34  0.611512     -0.491821      -174.952       174.952       2194.93       2369.88    
  35  0.518093E-01  -2.96019      -1053.01       1053.01       2764.54       3817.55    
  36  0.567953     -0.565716      -201.239       201.239       2136.16       2337.40    
  37  0.190847      -1.65628      -589.180       589.180       2206.52       2795.70    
  38  0.104561      -2.25798      -803.218       803.218       2576.66       3379.88    
  39  0.135276      -2.00044      -711.603       711.603       2106.11       2817.71    
  40  0.262364      -1.33802      -475.967       475.967       2284.45       2760.41    
  41  0.463951     -0.767976      -273.187       273.187       2137.07       2410.26    
  42  0.419672     -0.868282      -308.868       308.868       2131.91       2440.78    
  43  0.897011     -0.108687      -38.6625       38.6625       2260.88       2299.54    
  44  0.818933     -0.199754      -71.0571       71.0571       2297.60       2368.66    
  45  0.136906      -1.98846      -707.344       707.344       2328.23       3035.57    
  46  0.561722     -0.576748      -205.163       205.163       2328.11       2533.27    
  47  0.991681     -0.835368E-02  -2.97160       2.97160       2368.05       2371.02    
  48  0.653388     -0.425585      -151.391       151.391       2264.20       2415.59    
  49  0.578557     -0.547219      -194.659       194.659       2289.32       2483.98    
  50  0.784121     -0.243191      -86.5090       86.5090       2210.66       2297.17    
  51  0.827307     -0.189579      -67.4378       67.4378       2126.88       2194.32    
loop,thermsimp(1:2)       46   864.332       413.480    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       2119.00          0.86          1.12         22.00          0.00          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141       2330.88          0.84          1.12         21.91          0.09          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    2330.9       0.9349     -2.067      3.065     -102.6      1.749    
                       1.118      2.256     -99.70      3.248      1.051    

                       3.930     -2.684      1.540      7000.      7000.    

                      -1.633      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -4.746     -17.19     -11.65      4.492    

                      -12.56     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.7206E-01 0.2543    -0.2862E-02 0.1186    

                     -0.2486    -0.1407     0.2494     0.1904     0.6300E-01



                     -0.2670    -0.5006      0.000     0.1945     0.7066E-01

                     -0.7544E-02 0.2531    -0.7116    -0.4128E-02 0.2354    

                      0.1429    -0.1660E-01-0.4974     -1.119      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.268      8.867    -0.1672E+05 -6.000    

                     -0.4831     -3.175      9.373      8.845    -0.1969E+05



                      -6.000     0.7066    -0.3117      9.012      9.204    

                     -0.1944E+05 -6.000     -1.321    -0.4840      9.223    

                       8.924    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2119.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       46
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       47
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      140     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -1128.45       1128.45       2127.03       3255.48    
   2  0.581082     -0.542864      -193.110       193.110       2126.88       2319.99    
   3  0.690143     -0.370857      -131.923       131.923       2143.13       2275.05    
   4  0.958690     -0.421877E-01  -15.0072       15.0072       2146.80       2161.80    
   5  0.947492     -0.539367E-01  -19.1866       19.1866       2177.50       2196.68    
   6  0.253816E-01  -3.67373      -1306.83       1306.83       2210.66       3517.49    
   7  0.811950     -0.208316      -74.1029       74.1029       2260.88       2334.98    
   8  0.448512     -0.801821      -285.227       285.227       2136.16       2421.38    
   9  0.625244     -0.469613      -167.053       167.053       2297.60       2464.65    
  10  0.557627     -0.584065      -207.766       207.766       2194.93       2402.70    
  11  0.762657     -0.270947      -96.3824       96.3824       2368.05       2464.43    
  12  0.579328     -0.545887      -194.185       194.185       2362.57       2556.76    
  13  0.168395      -1.78144      -633.702       633.702       2137.07       2770.77    
  14  0.993282     -0.674111E-02  -2.39797       2.39797       2264.20       2266.59    
  15  0.573458     -0.556070      -197.807       197.807       2245.90       2443.70    
  16  0.900456     -0.104854      -37.2989       37.2989       2260.02       2297.32    
  17  0.961937     -0.388068E-01  -13.8045       13.8045       2293.75       2307.56    
  18  0.685702     -0.377312      -134.219       134.219       2131.91       2266.13    
  19  0.335644      -1.09171      -388.346       388.346       2396.44       2784.79    
  20  0.726392     -0.319666      -113.713       113.713       2353.23       2466.95    
  21  0.523515     -0.647189      -230.220       230.220       2289.32       2519.54    
  22  0.877914     -0.130206      -46.3175       46.3175       2154.56       2200.88    
  23  0.893563     -0.112539      -40.0328       40.0328       2145.14       2185.17    
  24  0.829449     -0.186994      -66.5183       66.5183       2328.11       2394.63    
  25  0.454457     -0.788653      -280.543       280.543       2126.23       2406.77    
  26  0.261407      -1.34168      -477.266       477.266       2245.22       2722.49    
  27  0.144225      -1.93638      -688.817       688.817       2166.27       2855.08    
  28  0.963744     -0.369299E-01  -13.1368       13.1368       2371.49       2384.63    
  29  0.267843      -1.31735      -468.614       468.614       2190.57       2659.18    
  30  0.251943E-01  -3.68114      -1309.47       1309.47       2272.69       3582.16    
  31  0.321532      -1.13466      -403.625       403.625       2297.40       2701.02    
  32  0.440903     -0.818930      -291.313       291.313       2369.32       2660.64    
  33  0.214416      -1.53984      -547.757       547.757       2284.45       2832.21    
  34  0.212185      -1.55030      -551.478       551.478       2223.68       2775.16    
  35  0.948253E-01  -2.35572      -837.985       837.985       2206.52       3044.50    
  36  0.507627     -0.678008      -241.183       241.183       2302.72       2543.90    
  37  0.415074     -0.879299      -312.788       312.788       2106.11       2418.90    
  38  0.768069     -0.263876      -93.8670       93.8670       2322.59       2416.45    
  39  0.462999E-01  -3.07261      -1093.00       1093.00       2292.94       3385.94    
  40  0.835390     -0.179856      -63.9792       63.9792       2143.46       2207.44    
  41  0.678734     -0.387526      -137.852       137.852       2249.11       2386.96    
  42  0.363569      -1.01179      -359.916       359.916       2433.63       2793.54    
  43  0.677161     -0.389846      -138.677       138.677       2131.28       2269.96    
  44  0.506668     -0.679899      -241.856       241.856       2218.66       2460.52    
  45  0.875658     -0.132779      -47.2327       47.2327       2328.23       2375.46    
  46  0.924863     -0.781102E-01  -27.7856       27.7856       2362.77       2390.55    
  47  0.794570E-01  -2.53254      -900.885       900.885       2210.51       3111.39    
  48  0.449212     -0.800261      -284.672       284.672       2244.85       2529.52    
  49  0.658987     -0.417051      -148.355       148.355       2197.36       2345.72    
  50  0.674357     -0.393995      -140.153       140.153       2576.66       2716.82    
  51  0.436334     -0.829348      -295.019       295.019       2119.00       2414.02    
loop,thermsimp(1:2)       47   1128.45       193.110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       2154.70          0.85          1.12         21.92          0.07          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    143       2339.86          0.85          1.12         21.93          0.00          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2154.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       47
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       48
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      142     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -201.951       201.951       2146.80       2348.75    
   2  0.216137      -1.53184      -544.912       544.912       2145.14       2690.05    
   3  0.476425     -0.741444      -263.749       263.749       2177.50       2441.24    
   4  0.184047      -1.69256      -602.085       602.085       2154.56       2756.65    
   5  0.722630     -0.324858      -115.560       115.560       2143.46       2259.02    
   6  0.887750     -0.119065      -42.3542       42.3542       2131.91       2174.27    
   7  0.236344      -1.44247      -513.120       513.120       2264.20       2777.32    
   8  0.798055     -0.225578      -80.2433       80.2433       2131.28       2211.53    
   9  0.425454     -0.854597      -304.001       304.001       2143.13       2447.13    
  10  0.605701     -0.501368      -178.349       178.349       2260.02       2438.37    
  11  0.742456     -0.297792      -105.932       105.932       2293.75       2399.68    
  12  0.378462E-01  -3.27423      -1164.72       1164.72       2126.88       3291.60    
  13  0.341910      -1.07321      -381.766       381.766       2260.88       2642.64    
  14  0.794971E-01  -2.53203      -900.705       900.705       2197.36       3098.07    
  15  0.586423     -0.533715      -189.855       189.855       2328.23       2518.09    
  16  0.990523     -0.952170E-02  -3.38710       3.38710       2371.49       2374.88    
  17  0.348475      -1.05419      -375.000       375.000       2249.11       2624.11    
  18  0.998034     -0.196755E-02 -0.699903      0.699903       2362.77       2363.47    
  19  0.616072     -0.484391      -172.309       172.309       2328.11       2500.42    
  20  0.427239     -0.850411      -302.511       302.511       2194.93       2497.44    
  21  0.598160     -0.513898      -182.806       182.806       2126.23       2309.04    
  22  0.642831     -0.441873      -157.185       157.185       2119.00       2276.19    
  23  0.392766     -0.934541      -332.438       332.438       2322.59       2655.02    
  24  0.738407     -0.303260      -107.877       107.877       2106.11       2213.99    
  25  0.334341      -1.09559      -389.729       389.729       2136.16       2525.89    
  26  0.997912     -0.208996E-02 -0.743447      0.743447       2245.90       2246.64    
  27  0.492305E-01  -3.01124      -1071.17       1071.17       2218.66       3289.83    
  28  0.304734      -1.18832      -422.712       422.712       2368.05       2790.76    
  29  0.159886      -1.83330      -652.147       652.147       2297.60       2949.75    
  30  0.991331     -0.870666E-02  -3.09716       3.09716       2353.23       2356.33    
  31  0.735164     -0.307662      -109.443       109.443       2289.32       2398.77    
  32  0.279948      -1.27315      -452.890       452.890       2244.85       2697.74    
  33  0.457260     -0.782502      -278.355       278.355       2302.72       2581.07    
  34  0.678170     -0.388358      -138.148       138.148       2362.57       2500.72    
  35  0.689603     -0.371639      -132.201       132.201       2190.57       2322.77    
  36  0.468470     -0.758283      -269.739       269.739       2369.32       2639.06    
  37  0.937429     -0.646141E-01  -22.9848       22.9848       2297.40       2320.38    
  38  0.115915      -2.15490      -766.549       766.549       2576.66       3343.21    
  39  0.125789      -2.07315      -737.467       737.467       2245.22       2982.69    
  40  0.137562      -1.98368      -705.643       705.643       2137.07       2842.71    
  41  0.273901      -1.29499      -460.658       460.658       2223.68       2684.34    
  42  0.934963     -0.672484E-01  -23.9219       23.9219       2396.44       2420.36    
  43  0.450296     -0.797850      -283.814       283.814       2433.63       2717.44    
  44  0.681645     -0.383246      -136.330       136.330       2284.45       2420.78    
  45  0.282914E-01  -3.56520      -1268.23       1268.23       2166.27       3434.49    
  46  0.962226     -0.385062E-01  -13.6976       13.6976       2206.52       2220.22    
  47  0.771412     -0.259533      -92.3219       92.3219       2210.51       2302.83    
  48  0.778208     -0.250761      -89.2018       89.2018       2127.03       2216.23    
  49  0.945686     -0.558450E-01  -19.8654       19.8654       2292.94       2312.81    
  50  0.648669     -0.432833      -153.969       153.969       2210.66       2364.62    
  51  0.214283      -1.54046      -547.977       547.977       2154.70       2702.68    
loop,thermsimp(1:2)       48   201.951       544.912    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144       2251.50          0.85          1.11         21.91          0.16          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2251.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       48
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       49
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      143     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -608.082       608.082       2131.91       2739.99    
   2  0.335083      -1.09338      -388.940       388.940       2131.28       2520.23    
   3  0.585160     -0.535871      -190.622       190.622       2106.11       2296.73    
   4  0.445729     -0.808044      -287.440       287.440       2127.03       2414.47    
   5  0.963605     -0.370741E-01  -13.1881       13.1881       2206.52       2219.71    
   6  0.538074     -0.619758      -220.463       220.463       2245.90       2466.36    
   7  0.971443     -0.289729E-01  -10.3064       10.3064       2143.46       2153.77    
   8  0.817136     -0.201950      -71.8384       71.8384       2119.00       2190.84    
   9  0.216943      -1.52812      -543.589       543.589       2210.51       2754.10    
  10  0.572311     -0.558074      -198.520       198.520       2126.23       2324.75    
  11  0.511761     -0.669897      -238.298       238.298       2292.94       2531.24    
  12  0.331920E-01  -3.40545      -1211.40       1211.40       2297.40       3508.79    
  13  0.662680     -0.411462      -146.367       146.367       2190.57       2336.93    
  14  0.578679     -0.547007      -194.583       194.583       2146.80       2341.38    
  15  0.473979     -0.746592      -265.581       265.581       2353.23       2618.81    
  16  0.243750      -1.41161      -502.144       502.144       2362.77       2864.91    
  17  0.784227     -0.243057      -86.4613       86.4613       2210.66       2297.12    
  18  0.215065      -1.53682      -546.682       546.682       2371.49       2918.17    
  19  0.813272     -0.206689      -73.5243       73.5243       2289.32       2362.85    
  20  0.877336     -0.130865      -46.5519       46.5519       2293.75       2340.30    
  21  0.911070     -0.931357E-01  -33.1306       33.1306       2396.44       2429.57    
  22  0.424500     -0.856844      -304.800       304.800       2284.45       2589.25    
  23  0.122508      -2.09958      -746.871       746.871       2260.02       3006.89    
  24  0.173199      -1.75331      -623.696       623.696       2177.50       2801.19    
  25  0.243010      -1.41465      -503.226       503.226       2143.13       2646.36    
  26  0.618804     -0.479966      -170.735       170.735       2194.93       2365.66    
  27  0.365303      -1.00703      -358.224       358.224       2328.11       2686.33    
  28  0.178054      -1.72567      -613.861       613.861       2362.57       2976.44    
  29  0.416122     -0.876776      -311.890       311.890       2328.23       2640.12    
  30  0.789287     -0.236625      -84.1733       84.1733       2136.16       2220.33    
  31  0.786736     -0.239863      -85.3250       85.3250       2302.72       2388.04    
  32  0.295880      -1.21780      -433.200       433.200       2249.11       2682.31    
  33  0.418649     -0.870722      -309.736       309.736       2369.32       2679.06    
  34  0.706992     -0.346736      -123.342       123.342       2260.88       2384.22    
  35  0.281863      -1.26633      -450.465       450.465       2322.59       2773.05    
  36  0.357290      -1.02921      -366.114       366.114       2223.68       2589.80    
  37  0.174180      -1.74767      -621.686       621.686       2145.14       2766.82    
  38  0.190924      -1.65588      -589.036       589.036       2244.85       2833.89    
  39  0.630369     -0.461449      -164.148       164.148       2154.70       2318.85    
  40  0.252261      -1.37729      -489.935       489.935       2433.63       2923.56    
  41  0.359213      -1.02384      -364.205       364.205       2154.56       2518.77    
  42  0.740344     -0.300640      -106.945       106.945       2264.20       2371.14    
  43  0.283211      -1.26156      -448.768       448.768       2368.05       2816.82    
  44  0.965119     -0.355039E-01  -12.6296       12.6296       2137.07       2149.70    
  45  0.389600     -0.942634      -335.317       335.317       2297.60       2632.92    
  46  0.598383     -0.513525      -182.673       182.673       2245.22       2427.90    
  47  0.631795     -0.459190      -163.345       163.345       2197.36       2360.71    
  48  0.997460     -0.254363E-02 -0.904830      0.904830       2218.66       2219.56    
  49  0.192532      -1.64749      -586.053       586.053       2126.88       2712.94    
  50  0.769348     -0.262212      -93.2749       93.2749       2576.66       2669.94    
  51  0.740745     -0.300099      -106.752       106.752       2251.50       2358.26    
loop,thermsimp(1:2)       49   608.082       388.940    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       2118.68          0.85          1.12         21.96          0.04          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146       2325.74          0.85          1.11         21.94          0.05          0.04         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2118.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       49
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       50
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      145     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -1227.50       1227.50       2137.07       3364.57    
   2  0.601445     -0.508421      -180.857       180.857       2143.46       2324.32    
   3  0.651191     -0.428952      -152.588       152.588       2119.00       2271.59    
   4  0.187303      -1.67503      -595.847       595.847       2218.66       2814.51    
   5  0.664603     -0.408566      -145.336       145.336       2206.52       2351.86    
   6  0.945236     -0.563208E-01  -20.0346       20.0346       2136.16       2156.19    
   7  0.865870     -0.144020      -51.2313       51.2313       2106.11       2157.34    
   8  0.674117     -0.394351      -140.280       140.280       2210.66       2350.94    
   9  0.959689E-01  -2.34373      -833.721       833.721       2154.70       2988.42    
  10  0.663337     -0.410472      -146.015       146.015       2126.23       2272.24    
  11  0.384854     -0.954891      -339.677       339.677       2190.57       2530.25    
  12  0.892338     -0.113910      -40.5206       40.5206       2293.75       2334.27    
  13  0.470837     -0.753243      -267.946       267.946       2146.80       2414.74    
  14  0.262618      -1.33706      -475.622       475.622       2251.50       2727.13    
  15  0.877143     -0.131085      -46.6299       46.6299       2197.36       2243.99    
  16  0.262102      -1.33902      -476.322       476.322       2289.32       2765.65    
  17  0.306130      -1.18375      -421.087       421.087       2194.93       2616.02    
  18  0.251844      -1.37895      -490.524       490.524       2264.20       2754.72    
  19  0.371147     -0.991157      -352.578       352.578       2260.88       2613.46    
  20  0.244393E-01  -3.71156      -1320.29       1320.29       2302.72       3623.01    
  21  0.550903     -0.596197      -212.081       212.081       2127.03       2339.11    
  22  0.509078     -0.675154      -240.168       240.168       2245.22       2485.39    
  23  0.741178     -0.299515      -106.545       106.545       2396.44       2502.99    
  24  0.585965     -0.534496      -190.133       190.133       2245.90       2436.03    
  25  0.602491     -0.506683      -180.239       180.239       2154.56       2334.80    
  26  0.532366     -0.630423      -224.257       224.257       2131.28       2355.54    
  27  0.264247      -1.33087      -473.422       473.422       2292.94       2766.36    
  28  0.468512     -0.758194      -269.708       269.708       2284.45       2554.16    
  29  0.338122      -1.08435      -385.729       385.729       2223.68       2609.41    
  30  0.815455     -0.204008      -72.5707       72.5707       2353.23       2425.80    
  31  0.126007      -2.07142      -736.853       736.853       2297.60       3034.45    
  32  0.391435     -0.937937      -333.646       333.646       2328.23       2661.88    
  33  0.477179     -0.739864      -263.187       263.187       2143.13       2406.32    
  34  0.926058     -0.768180E-01  -27.3260       27.3260       2576.66       2603.99    
  35  0.305992E-01  -3.48678      -1240.33       1240.33       2369.32       3609.65    
  36  0.142122      -1.95107      -694.042       694.042       2249.11       2943.15    
  37  0.934627E-01  -2.37019      -843.134       843.134       2328.11       3171.24    
  38  0.933240     -0.690924E-01  -24.5778       24.5778       2126.88       2151.46    
  39  0.551354     -0.595378      -211.790       211.790       2131.91       2343.70    
  40  0.167646      -1.78590      -635.287       635.287       2210.51       2845.79    
  41  0.657770     -0.418900      -149.013       149.013       2145.14       2294.15    
  42  0.937012     -0.650587E-01  -23.1429       23.1429       2322.59       2345.73    
  43  0.435130     -0.832109      -296.001       296.001       2177.50       2473.50    
  44  0.346278E-01  -3.36310      -1196.33       1196.33       2368.05       3564.38    
  45  0.529273     -0.636251      -226.330       226.330       2244.85       2471.18    
  46  0.543808     -0.609159      -216.692       216.692       2362.77       2579.46    
  47  0.476993     -0.740254      -263.326       263.326       2371.49       2634.82    
  48  0.602365     -0.506891      -180.313       180.313       2433.63       2613.94    
  49  0.429141     -0.845970      -300.932       300.932       2362.57       2663.51    
  50  0.161300E-01  -4.12707      -1468.10       1468.10       2260.02       3728.12    
  51  0.806405     -0.215169      -76.5409       76.5409       2118.68       2195.22    
loop,thermsimp(1:2)       50   1227.50       180.857    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       2099.93          0.82          1.11         22.09          0.11          0.06         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148       2222.97          0.85          1.12         22.09          0.00          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2099.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       50
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       51
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      147     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -26.0848       26.0848       2126.88       2152.97    
   2  0.669511     -0.401208      -142.719       142.719       2136.16       2278.88    
   3  0.863337E-01  -2.44954      -871.358       871.358       2106.11       2977.47    
   4  0.279945      -1.27316      -452.894       452.894       2118.68       2571.58    
   5  0.832640     -0.183154      -65.1523       65.1523       2197.36       2262.51    
   6  0.848933     -0.163775      -58.2588       58.2588       2119.00       2177.26    
   7  0.141794      -1.95338      -694.865       694.865       2126.23       2821.09    
   8  0.208764      -1.56655      -557.260       557.260       2145.14       2702.40    
   9  0.755787     -0.279996      -99.6012       99.6012       2143.46       2243.06    
  10  0.177416      -1.72926      -615.138       615.138       2293.75       2908.89    
  11  0.405148     -0.903503      -321.397       321.397       2154.56       2475.96    
  12  0.640380     -0.445693      -158.544       158.544       2127.03       2285.58    
  13  0.548060     -0.601370      -213.922       213.922       2131.91       2345.83    
  14  0.773287     -0.257105      -91.4583       91.4583       2322.59       2414.04    
  15  0.180768      -1.71054      -608.480       608.480       2210.66       2819.14    
  16  0.135846      -1.99624      -710.108       710.108       2206.52       2916.63    
  17  0.601016     -0.509133      -181.111       181.111       2131.28       2312.40    
  18  0.302263      -1.19646      -425.608       425.608       2143.13       2568.74    
  19  0.189428      -1.66374      -591.834       591.834       2146.80       2738.63    
  20  0.737158     -0.304953      -108.479       108.479       2353.23       2461.71    
  21  0.790680     -0.234862      -83.5459       83.5459       2245.90       2329.44    
  22  0.177192E-01  -4.03310      -1434.67       1434.67       2244.85       3679.52    
  23  0.236042      -1.44375      -513.574       513.574       2177.50       2691.07    
  24  0.459229     -0.778206      -276.826       276.826       2245.22       2522.05    
  25  0.586479E-01  -2.83620      -1008.90       1008.90       2396.44       3405.35    
  26  0.263766      -1.33269      -474.070       474.070       2190.57       2664.64    
  27  0.942550     -0.591663E-01  -21.0469       21.0469       2284.45       2305.50    
  28  0.106855      -2.23628      -795.498       795.498       2362.77       3158.26    
  29  0.710700     -0.341505      -121.481       121.481       2576.66       2698.14    
  30  0.207109E-01  -3.87709      -1379.17       1379.17       2223.68       3602.86    
  31  0.901203     -0.104025      -37.0042       37.0042       2260.88       2297.88    
  32  0.949751     -0.515555E-01  -18.3395       18.3395       2433.63       2451.97    
  33  0.343487      -1.06861      -380.129       380.129       2194.93       2575.06    
  34  0.875043     -0.133483      -47.4830       47.4830       2371.49       2418.97    
  35  0.122447E-01  -4.40266      -1566.13       1566.13       2328.23       3894.36    
  36  0.820650     -0.197659      -70.3119       70.3119       2362.57       2432.89    
  37  0.748866     -0.289195      -102.874       102.874       2251.50       2354.38    
  38  0.594525     -0.519992      -184.973       184.973       2264.20       2449.17    
  39  0.927863E-01  -2.37746      -845.718       845.718       2289.32       3135.04    
  40  0.631335     -0.459918      -163.604       163.604       2292.94       2456.55    
  41  0.282620      -1.26365      -449.511       449.511       2218.66       2668.17    
  42  0.707811     -0.345578      -122.930       122.930       2210.51       2333.44    
  43  0.930463     -0.720730E-01  -25.6381       25.6381       2249.11       2274.75    
  44  0.988563     -0.115032E-01  -4.09198       4.09198       2154.70       2158.80    
  45  0.869439     -0.139907      -49.7683       49.7683       2297.60       2347.37    
  46  0.693921     -0.365397      -129.980       129.980       2328.11       2458.09    
  47  0.731753     -0.312312      -111.097       111.097       2137.07       2248.17    
  48  0.848712     -0.164035      -58.3512       58.3512       2368.05       2426.40    
  49  0.174447      -1.74613      -621.142       621.142       2369.32       2990.46    
  50  0.313212      -1.16087      -412.951       412.951       2302.72       2715.67    
  51  0.880789     -0.126937      -45.1545       45.1545       2099.93       2145.08    
loop,thermsimp(1:2)       51   26.0848       142.719    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149       2127.07          0.83          1.11         21.86          0.16          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150       2530.23          0.84          1.11         21.97          0.05          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2127.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       51
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       52
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      149     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -148.871       148.871       2099.93       2248.80    
   2  0.385391     -0.953496      -339.181       339.181       2126.88       2466.06    
   3  0.323679      -1.12800      -401.257       401.257       2154.70       2555.96    
   4  0.402516E-01  -3.21260      -1142.80       1142.80       2119.00       3261.80    
   5  0.866022     -0.143846      -51.1693       51.1693       2143.46       2194.63    
   6  0.560147     -0.579555      -206.162       206.162       2137.07       2343.23    
   7  0.389098     -0.943925      -335.776       335.776       2197.36       2533.14    
   8  0.470755     -0.753417      -268.008       268.008       2249.11       2517.12    
   9  0.794299     -0.230295      -81.9214       81.9214       2136.16       2218.08    
  10  0.897132     -0.108553      -38.6148       38.6148       2127.03       2165.65    
  11  0.359474      -1.02311      -363.946       363.946       2260.88       2624.82    
  12  0.604694     -0.503032      -178.941       178.941       2284.45       2463.39    
  13  0.101554      -2.28717      -813.599       813.599       2131.28       2944.88    
  14  0.274480      -1.29288      -459.907       459.907       2245.90       2705.80    
  15  0.916086     -0.876445E-01  -31.1772       31.1772       2210.51       2241.68    
  16  0.820070E-01  -2.50095      -889.647       889.647       2131.91       3021.56    
  17  0.975902     -0.243929E-01  -8.67714       8.67714       2297.60       2306.28    
  18  0.131665      -2.02750      -721.229       721.229       2251.50       2972.73    
  19  0.751313     -0.285933      -101.713       101.713       2322.59       2424.30    
  20  0.775324     -0.254475      -90.5226       90.5226       2371.49       2462.01    
  21  0.237000      -1.43969      -512.133       512.133       2368.05       2880.18    
  22  0.113641      -2.17471      -773.595       773.595       2362.57       3136.17    
  23  0.762281     -0.271440      -96.5576       96.5576       2264.20       2360.75    
  24  0.783730     -0.243690      -86.6864       86.6864       2433.63       2520.31    
  25  0.492891     -0.707468      -251.663       251.663       2292.94       2544.60    
  26  0.471904     -0.750980      -267.142       267.142       2328.11       2595.25    
  27  0.855781     -0.155740      -55.4005       55.4005       2353.23       2408.63    
  28  0.636473     -0.451814      -160.721       160.721       2154.56       2315.28    
  29  0.433340     -0.836232      -297.467       297.467       2245.22       2542.69    
  30  0.482236     -0.729321      -259.437       259.437       2143.13       2402.57    
  31  0.855143E-01  -2.45907      -874.750       874.750       2118.68       2993.43    
  32  0.916579     -0.871071E-01  -30.9860       30.9860       2194.93       2225.92    
  33  0.232519      -1.45878      -518.924       518.924       2190.57       2709.49    
  34  0.283977      -1.25886      -447.807       447.807       2218.66       2666.47    
  35  0.401228E-01  -3.21581      -1143.94       1143.94       2177.50       3321.44    
  36  0.235231      -1.44719      -514.799       514.799       2576.66       3091.46    
  37  0.233426      -1.45489      -517.538       517.538       2145.14       2662.67    
  38  0.903594     -0.101376      -36.0617       36.0617       2302.72       2338.78    
  39  0.857571     -0.153651      -54.6573       54.6573       2146.80       2201.45    
  40  0.444085     -0.811739      -288.755       288.755       2210.66       2499.41    
  41  0.151055      -1.89011      -672.358       672.358       2126.23       2798.59    
  42  0.745694     -0.293440      -104.383       104.383       2293.75       2398.13    
  43  0.470647E-01  -3.05623      -1087.17       1087.17       2206.52       3293.69    
  44  0.344459      -1.06578      -379.124       379.124       2106.11       2485.23    
  45  0.592738     -0.523004      -186.045       186.045       2369.32       2555.37    
  46  0.754292     -0.281975      -100.305       100.305       2289.32       2389.63    
  47  0.162950      -1.81431      -645.394       645.394       2362.77       3008.16    
  48  0.939100     -0.628333E-01  -22.3513       22.3513       2396.44       2418.79    
  49  0.966845     -0.337175E-01  -11.9941       11.9941       2223.68       2235.68    
  50  0.287323      -1.24715      -443.640       443.640       2244.85       2688.49    
  51  0.835081     -0.180227      -64.1109       64.1109       2127.07       2191.18    
loop,thermsimp(1:2)       52   148.871       339.181    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151       2397.75          0.86          1.10         21.89          0.17          0.05         24.07
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2397.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       52
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       53
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      150     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -192.702       192.702       2127.03       2319.73    
   2  0.307993      -1.17768      -418.928       418.928       2127.07       2546.00    
   3  0.551684     -0.594779      -211.577       211.577       2143.46       2355.04    
   4  0.969976     -0.304835E-01  -10.8437       10.8437       2146.80       2157.64    
   5  0.401714     -0.912015      -324.425       324.425       2136.16       2460.58    
   6  0.336211      -1.09002      -387.744       387.744       2194.93       2582.67    
   7  0.649191     -0.432028      -153.682       153.682       2223.68       2377.37    
   8  0.426986     -0.851005      -302.723       302.723       2210.51       2513.23    
   9  0.479997     -0.733976      -261.093       261.093       2099.93       2361.02    
  10  0.441527     -0.817516      -290.810       290.810       2297.60       2588.41    
  11  0.218988      -1.51874      -540.252       540.252       2154.56       2694.81    
  12  0.935549     -0.666221E-01  -23.6991       23.6991       2302.72       2326.42    
  13  0.159996      -1.83261      -651.903       651.903       2137.07       2788.97    
  14  0.486870     -0.719759      -256.035       256.035       2264.20       2520.23    
  15  0.835520     -0.179701      -63.9238       63.9238       2289.32       2353.25    
  16  0.643759     -0.440431      -156.672       156.672       2293.75       2450.42    
  17  0.177188      -1.73054      -615.595       615.595       2143.13       2758.73    
  18  0.408356     -0.895617      -318.592       318.592       2353.23       2671.83    
  19  0.463768     -0.768371      -273.328       273.328       2396.44       2669.77    
  20  0.616820     -0.483178      -171.878       171.878       2322.59       2494.46    
  21  0.377083     -0.975289      -346.933       346.933       2371.49       2718.43    
  22  0.278016      -1.28008      -455.354       455.354       2284.45       2739.80    
  23  0.746435     -0.292446      -104.030       104.030       2126.88       2230.91    
  24  0.872234     -0.136697      -48.6264       48.6264       2106.11       2154.74    
  25  0.887073E-01  -2.42241      -861.710       861.710       2210.66       3072.37    
  26  0.124913      -2.08014      -739.955       739.955       2249.11       2989.06    
  27  0.918160     -0.853835E-01  -30.3729       30.3729       2433.63       2464.00    
  28  0.924603     -0.783912E-01  -27.8856       27.8856       2197.36       2225.25    
  29  0.863214     -0.147092      -52.3243       52.3243       2245.22       2297.55    
  30  0.823499E-02  -4.79936      -1707.25       1707.25       2292.94       4000.19    
  31  0.548113     -0.601275      -213.888       213.888       2369.32       2583.21    
  32  0.800553     -0.222452      -79.1314       79.1314       2154.70       2233.84    
  33  0.180829      -1.71020      -608.360       608.360       2328.11       2936.47    
  34  0.968975E-01  -2.33410      -830.295       830.295       2260.88       3091.17    
  35  0.749847     -0.287886      -102.408       102.408       2145.14       2247.54    
  36  0.902028     -0.103110      -36.6787       36.6787       2218.66       2255.34    
  37  0.312083      -1.16449      -414.235       414.235       2244.85       2659.09    
  38  0.472691     -0.749313      -266.548       266.548       2245.90       2512.44    
  39  0.970346     -0.301026E-01  -10.7082       10.7082       2190.57       2201.28    
  40  0.485853     -0.721850      -256.779       256.779       2126.23       2383.01    
  41  0.604658     -0.503092      -178.962       178.962       2368.05       2547.01    
  42  0.172238      -1.75888      -625.676       625.676       2131.28       2756.96    
  43  0.359079E-01  -3.32680      -1183.42       1183.42       2251.50       3434.92    
  44  0.464923     -0.765884      -272.443       272.443       2118.68       2391.13    
  45  0.293512      -1.22584      -436.059       436.059       2362.77       2798.83    
  46  0.572788     -0.557239      -198.223       198.223       2131.91       2330.13    
  47  0.931713     -0.707300E-01  -25.1603       25.1603       2576.66       2601.82    
  48  0.983012     -0.171340E-01  -6.09498       6.09498       2362.57       2368.67    
  49  0.572194     -0.558278      -198.593       198.593       2119.00       2317.60    
  50  0.272189      -1.30126      -462.889       462.889       2206.52       2669.41    
  51  0.521081     -0.651849      -231.878       231.878       2397.75       2629.63    
loop,thermsimp(1:2)       53   192.702       418.928    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       2125.29          0.86          1.11         21.94          0.06          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153       2291.12          0.85          1.11         21.89          0.13          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2125.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    355.724               151
loop is:       53
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    355.724               151
loop is:       54
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    177.862               201

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      152     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -101.242       101.242       2106.11       2207.35    
   2  0.698829     -0.358349      -63.7366       63.7366       2146.80       2210.53    
   3  0.550231     -0.597418      -106.258       106.258       2190.57       2296.83    
   4  0.844966     -0.168459      -29.9624       29.9624       2197.36       2227.32    
   5  0.139804      -1.96751      -349.945       349.945       2126.88       2476.83    
   6  0.119451      -2.12485      -377.930       377.930       2154.70       2532.63    
   7  0.474112     -0.746312      -132.741       132.741       2145.14       2277.88    
   8  0.293024      -1.22750      -218.325       218.325       2218.66       2436.98    
   9  0.760137     -0.274256      -48.7797       48.7797       2245.22       2294.00    
  10  0.216376      -1.53074      -272.260       272.260       2119.00       2391.26    
  11  0.837069     -0.177849      -31.6325       31.6325       2127.03       2158.66    
  12  0.969258     -0.312245E-01  -5.55366       5.55366       2302.72       2308.27    
  13  0.335918      -1.09089      -194.027       194.027       2131.91       2325.94    
  14  0.966643     -0.339265E-01  -6.03423       6.03423       2289.32       2295.36    
  15  0.723887     -0.323119      -57.4706       57.4706       2143.46       2200.93    
  16  0.459929E-01  -3.07927      -547.684       547.684       2099.93       2647.61    
  17  0.536724     -0.622271      -110.678       110.678       2362.57       2473.25    
  18  0.432574     -0.838001      -149.048       149.048       2223.68       2372.73    
  19  0.160308      -1.83066      -325.604       325.604       2126.23       2451.83    
  20  0.885158     -0.121989      -21.6972       21.6972       2118.68       2140.38    
  21  0.753783     -0.282650      -50.2727       50.2727       2293.75       2344.02    
  22  0.135562      -1.99832      -355.426       355.426       2136.16       2491.58    
  23  0.817964     -0.200937      -35.7390       35.7390       2433.63       2469.37    
  24  0.286617      -1.24961      -222.258       222.258       2322.59       2544.84    
  25  0.319126      -1.14217      -203.149       203.149       2245.90       2449.04    
  26  0.104479E-01  -4.56135      -811.291       811.291       2210.51       3021.80    
  27  0.671407     -0.398379      -70.8565       70.8565       2264.20       2335.05    
  28  0.782955     -0.244680      -43.5193       43.5193       2127.07       2170.59    
  29  0.186689      -1.67831      -298.508       298.508       2368.05       2666.56    
  30  0.462519     -0.771067      -137.143       137.143       2194.93       2332.07    
  31  0.203171      -1.59371      -283.460       283.460       2369.32       2652.78    
  32  0.851762E-01  -2.46303      -438.080       438.080       2297.60       2735.68    
  33  0.702824     -0.352649      -62.7227       62.7227       2576.66       2639.38    
  34  0.747923     -0.290456      -51.6610       51.6610       2397.75       2449.41    
  35  0.224450      -1.49410      -265.744       265.744       2244.85       2510.59    
  36  0.243563E-02  -6.01755      -1070.29       1070.29       2206.52       3276.81    
  37  0.160790      -1.82766      -325.071       325.071       2396.44       2721.51    
  38  0.880431     -0.127343      -22.6495       22.6495       2353.23       2375.88    
  39  0.507306     -0.678640      -120.704       120.704       2154.56       2275.27    
  40  0.266019      -1.32419      -235.523       235.523       2371.49       2607.01    
  41  0.310751      -1.16876      -207.878       207.878       2284.45       2492.33    
  42  0.945006     -0.565640E-01  -10.0606       10.0606       2131.28       2141.35    
  43  0.265699E-01  -3.62797      -645.278       645.278       2143.13       2788.41    
  44  0.652842     -0.426420      -75.8438       75.8438       2137.07       2212.91    
  45  0.799409     -0.223882      -39.8201       39.8201       2362.77       2402.59    
  46  0.543529     -0.609672      -108.437       108.437       2328.11       2436.55    
  47  0.361947      -1.01626      -180.753       180.753       2249.11       2429.86    
  48  0.398721     -0.919492      -163.543       163.543       2210.66       2374.20    
  49  0.349489      -1.05128      -186.983       186.983       2260.88       2447.86    
  50  0.948739     -0.526212E-01  -9.35931       9.35931       2251.50       2260.86    
  51  0.346176      -1.06081      -188.677       188.677       2125.29       2313.96    
loop,thermsimp(1:2)       54   101.242       63.7366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       2206.68          0.85          1.12         21.92          0.11          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2206.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       54
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       55
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      153     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -291.346       291.346       2118.68       2410.03    
   2  0.875287     -0.133204      -23.6918       23.6918       2131.28       2154.98    
   3  0.103612      -2.26710      -403.230       403.230       2127.03       2530.26    
   4  0.159072      -1.83840      -326.981       326.981       2127.07       2454.05    
   5  0.118738      -2.13084      -378.995       378.995       2143.46       2522.45    
   6  0.294105      -1.22382      -217.671       217.671       2106.11       2323.78    
   7  0.967643     -0.328919E-01  -5.85022       5.85022       2146.80       2152.65    
   8  0.675183     -0.392772      -69.8592       69.8592       2137.07       2206.93    
   9  0.170112      -1.77130      -315.046       315.046       2197.36       2512.41    
  10  0.990992     -0.904902E-02  -1.60948       1.60948       2251.50       2253.11    
  11  0.198513      -1.61690      -287.585       287.585       2154.56       2442.15    
  12  0.404817E-01  -3.20690      -570.386       570.386       2145.14       2715.52    
  13  0.834933E-01  -2.48299      -441.629       441.629       2245.22       2686.85    
  14  0.458935     -0.778848      -138.527       138.527       2289.32       2427.85    
  15  0.929311     -0.733118E-01  -13.0394       13.0394       2190.57       2203.61    
  16  0.593071     -0.522440      -92.9222       92.9222       2302.72       2395.64    
  17  0.963359E-01  -2.33991      -416.182       416.182       2125.29       2541.47    
  18  0.383119E-01  -3.26200      -580.185       580.185       2131.91       2712.10    
  19  0.841843     -0.172161      -30.6209       30.6209       2194.93       2225.55    
  20  0.874261     -0.134376      -23.9004       23.9004       2264.20       2288.10    
  21  0.706443     -0.347513      -61.8093       61.8093       2293.75       2355.56    
  22  0.423649E-01  -3.16143      -562.299       562.299       2223.68       2785.98    
  23  0.904835     -0.100003      -17.7867       17.7867       2210.66       2228.44    
  24  0.728800     -0.316356      -56.2677       56.2677       2353.23       2409.50    
  25  0.764304     -0.268790      -47.8075       47.8075       2119.00       2166.81    
  26  0.578519     -0.547284      -97.3409       97.3409       2362.77       2460.11    
  27  0.321737      -1.13402      -201.699       201.699       2249.11       2450.81    
  28  0.592944     -0.522656      -92.9605       92.9605       2328.11       2421.07    
  29  0.159596      -1.83511      -326.396       326.396       2218.66       2545.06    
  30  0.797332     -0.226484      -40.2828       40.2828       2260.88       2301.16    
  31  0.263979      -1.33189      -236.892       236.892       2245.90       2482.79    
  32  0.449355     -0.799942      -142.279       142.279       2397.75       2540.03    
  33  0.859901     -0.150938      -26.8461       26.8461       2126.23       2153.08    
  34  0.730093     -0.314584      -55.9524       55.9524       2433.63       2489.58    
  35  0.484666     -0.724295      -128.824       128.824       2362.57       2491.40    
  36  0.180217      -1.71359      -304.783       304.783       2126.88       2431.67    
  37  0.857397     -0.153854      -27.3648       27.3648       2136.16       2163.52    
  38  0.502370     -0.688418      -122.443       122.443       2284.45       2406.89    
  39  0.245408      -1.40484      -249.867       249.867       2244.85       2494.72    
  40  0.134540      -2.00590      -356.772       356.772       2154.70       2511.48    
  41  0.468137     -0.758995      -134.996       134.996       2322.59       2457.58    
  42  0.864548E-01  -2.44813      -435.430       435.430       2371.49       2806.92    
  43  0.178791      -1.72154      -306.196       306.196       2576.66       2882.86    
  44  0.690351     -0.370555      -65.9076       65.9076       2099.93       2165.83    
  45  0.731648     -0.312455      -55.5739       55.5739       2369.32       2424.90    
  46  0.857623     -0.153591      -27.3179       27.3179       2368.05       2395.37    
  47  0.754956     -0.281095      -49.9961       49.9961       2396.44       2446.44    
  48  0.355557      -1.03407      -183.922       183.922       2297.60       2481.52    
  49  0.200964      -1.60463      -285.403       285.403       2143.13       2428.53    
  50  0.243499      -1.41264      -251.255       251.255       2210.51       2461.76    
  51  0.796288     -0.227794      -40.5159       40.5159       2206.68       2247.19    
loop,thermsimp(1:2)       55   291.346       23.6918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155       2216.54          0.86          1.11         21.96          0.10          0.05         24.09
Just calling func    0   0         24.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156       3561.48          0.85          1.11         21.88          0.34          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2216.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       55
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       56
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      155     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -348.054       348.054       2146.80       2494.85    
   2  0.197548      -1.62177      -288.452       288.452       2126.23       2414.68    
   3  0.774000     -0.256183      -45.5652       45.5652       2131.28       2176.85    
   4  0.170284      -1.77029      -314.867       314.867       2136.16       2451.02    
   5  0.250636      -1.38376      -246.117       246.117       2099.93       2346.04    
   6  0.907951     -0.965652E-01  -17.1753       17.1753       2119.00       2136.18    
   7  0.611678     -0.491549      -87.4278       87.4278       2190.57       2278.00    
   8  0.735945E-02  -4.91177      -873.617       873.617       2137.07       3010.69    
   9  0.309131      -1.17399      -208.808       208.808       2194.93       2403.74    
  10  0.577854     -0.548434      -97.5454       97.5454       2210.66       2308.20    
  11  0.931529     -0.709274E-01  -12.6153       12.6153       2206.68       2219.29    
  12  0.665703     -0.406912      -72.3742       72.3742       2251.50       2323.88    
  13  0.585695     -0.534955      -95.1481       95.1481       2264.20       2359.34    
  14  0.295001      -1.22078      -217.130       217.130       2260.88       2478.01    
  15  0.317712E-01  -3.44920      -613.481       613.481       2106.11       2719.59    
  16  0.222963      -1.50075      -266.926       266.926       2293.75       2560.68    
  17  0.325931      -1.12107      -199.396       199.396       2368.05       2567.44    
  18  0.785098     -0.241947      -43.0331       43.0331       2302.72       2345.75    
  19  0.550467     -0.596988      -106.181       106.181       2284.45       2390.63    
  20  0.780222     -0.248176      -44.1411       44.1411       2353.23       2397.38    
  21  0.130712      -2.03476      -361.906       361.906       2118.68       2480.59    
  22  0.873397     -0.135365      -24.0762       24.0762       2328.11       2352.19    
  23  0.366975      -1.00246      -178.300       178.300       2369.32       2547.62    
  24  0.813244     -0.206724      -36.7683       36.7683       2289.32       2326.09    
  25  0.782660E-01  -2.54764      -453.128       453.128       2143.13       2596.26    
  26  0.700327     -0.356208      -63.3558       63.3558       2126.88       2190.24    
  27  0.437766     -0.826071      -146.926       146.926       2154.56       2301.49    
  28  0.508966E-01  -2.97796      -529.665       529.665       2396.44       2926.11    
  29  0.276850      -1.28428      -228.424       228.424       2249.11       2477.53    
  30  0.792031     -0.233154      -41.4693       41.4693       2127.07       2168.54    
  31  0.174747      -1.74441      -310.265       310.265       2322.59       2632.85    
  32  0.469718     -0.755623      -134.397       134.397       2362.77       2497.16    
  33  0.252316      -1.37707      -244.928       244.928       2210.51       2455.44    
  34  0.980061     -0.201409E-01  -3.58229       3.58229       2297.60       2301.18    
  35  0.838300     -0.176379      -31.3712       31.3712       2245.90       2277.27    
  36  0.369385     -0.995915      -177.135       177.135       2433.63       2610.76    
  37  0.923139     -0.799751E-01  -14.2245       14.2245       2362.57       2376.80    
  38  0.592446     -0.523496      -93.1100       93.1100       2244.85       2337.96    
  39  0.348787      -1.05329      -187.341       187.341       2154.70       2342.04    
  40  0.569584     -0.562850      -100.110       100.110       2197.36       2297.47    
  41  0.543034E-01  -2.91317      -518.142       518.142       2143.46       2661.60    
  42  0.582662     -0.540148      -96.0717       96.0717       2127.03       2223.10    
  43  0.702825     -0.352648      -62.7226       62.7226       2397.75       2460.48    
  44  0.941375     -0.604140E-01  -10.7453       10.7453       2125.29       2136.03    
  45  0.258857      -1.35148      -240.377       240.377       2218.66       2459.04    
  46  0.116535      -2.14956      -382.325       382.325       2245.22       2627.55    
  47  0.102671      -2.27622      -404.853       404.853       2131.91       2536.76    
  48  0.172023      -1.76013      -313.059       313.059       2145.14       2458.19    
  49  0.434982E-01  -3.13504      -557.603       557.603       2223.68       2781.29    
  50  0.852122     -0.160026      -28.4625       28.4625       2371.49       2399.95    
  51  0.583521     -0.538675      -95.8097       95.8097       2216.54       2312.35    
loop,thermsimp(1:2)       56   348.054       288.452    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       2277.66          0.85          1.12         21.98          0.02          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2277.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       56
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       57
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      156     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -73.2938       73.2938       2125.29       2198.58    
   2  0.724212     -0.322671      -57.3909       57.3909       2119.00       2176.39    
   3  0.633711     -0.456163      -81.1339       81.1339       2127.07       2208.20    
   4  0.448566     -0.801700      -142.592       142.592       2131.28       2273.88    
   5  0.964228     -0.364273E-01  -6.47903       6.47903       2126.88       2133.36    
   6  0.714306     -0.336444      -59.8406       59.8406       2206.68       2266.52    
   7  0.528330     -0.638035      -113.482       113.482       2127.03       2240.51    
   8  0.654127     -0.424453      -75.4940       75.4940       2245.90       2321.39    
   9  0.368899     -0.997232      -177.370       177.370       2190.57       2367.94    
  10  0.227697      -1.47974      -263.189       263.189       2197.36       2460.55    
  11  0.612266     -0.490588      -87.2569       87.2569       2297.60       2384.86    
  12  0.313777      -1.15907      -206.155       206.155       2154.56       2360.72    
  13  0.258526      -1.35276      -240.605       240.605       2210.66       2451.26    
  14  0.119298      -2.12613      -378.158       378.158       2216.54       2594.70    
  15  0.213331      -1.54491      -274.780       274.780       2251.50       2526.28    
  16  0.294218      -1.22343      -217.602       217.602       2289.32       2506.93    
  17  0.352988      -1.04132      -185.211       185.211       2244.85       2430.06    
  18  0.348706      -1.05353      -187.382       187.382       2154.70       2342.09    
  19  0.449249     -0.800179      -142.321       142.321       2302.72       2445.04    
  20  0.879121     -0.128833      -22.9145       22.9145       2099.93       2122.84    
  21  0.464081     -0.767695      -136.544       136.544       2328.11       2464.65    
  22  0.497582     -0.697995      -124.147       124.147       2264.20       2388.34    
  23  0.920207     -0.831566E-01  -14.7904       14.7904       2362.57       2377.36    
  24  0.811773     -0.208535      -37.0904       37.0904       2284.45       2321.54    
  25  0.190651      -1.65731      -294.772       294.772       2353.23       2648.01    
  26  0.645174     -0.438235      -77.9454       77.9454       2371.49       2449.44    
  27  0.668343     -0.402954      -71.6702       71.6702       2194.93       2266.60    
  28  0.765111     -0.267735      -47.6198       47.6198       2126.23       2173.85    
  29  0.991779     -0.825499E-02  -1.46825       1.46825       2136.16       2137.63    
  30  0.136888      -1.98859      -353.695       353.695       2210.51       2564.20    
  31  0.645145E-01  -2.74086      -487.495       487.495       2145.14       2632.63    
  32  0.408515E-01  -3.19781      -568.769       568.769       2218.66       2787.43    
  33  0.264109      -1.33140      -236.804       236.804       2397.75       2634.56    
  34  0.382737     -0.960407      -170.820       170.820       2249.11       2419.93    
  35  0.402738E-02  -5.51464      -980.844       980.844       2260.88       3241.72    
  36  0.318074      -1.14547      -203.735       203.735       2118.68       2322.42    
  37  0.245237      -1.40553      -249.991       249.991       2146.80       2396.79    
  38  0.519766     -0.654377      -116.389       116.389       2362.77       2479.16    
  39  0.255147      -1.36592      -242.944       242.944       2131.91       2374.86    
  40  0.833841     -0.181712      -32.3196       32.3196       2369.32       2401.64    
  41  0.696242E-01  -2.66464      -473.938       473.938       2293.75       2767.69    
  42  0.487295     -0.718886      -127.862       127.862       2368.05       2495.91    
  43  0.276229E-01  -3.58911      -638.366       638.366       2143.13       2781.50    
  44  0.638327     -0.448905      -79.8431       79.8431       2433.63       2513.47    
  45  0.206684      -1.57657      -280.411       280.411       2245.22       2525.63    
  46  0.736003     -0.306521      -54.5184       54.5184       2322.59       2377.10    
  47  0.217444E-01  -3.82840      -680.926       680.926       2143.46       2824.39    
  48  0.956929     -0.440260E-01  -7.83055       7.83055       2106.11       2113.94    
  49  0.883561     -0.123795      -22.0183       22.0183       2223.68       2245.70    
  50  0.700901     -0.355388      -63.2100       63.2100       2396.44       2459.65    
  51  0.201997      -1.59950      -284.490       284.490       2277.66       2562.15    
loop,thermsimp(1:2)       57   73.2938       57.3909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       2168.50          0.86          1.12         21.91          0.08          0.06         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159       6667.13          0.86          1.13         21.92          0.06          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2168.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       57
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       58
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      158     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -504.943       504.943       2106.11       2611.05    
   2  0.104884      -2.25490      -401.062       401.062       2099.93       2500.99    
   3  0.784254     -0.243023      -43.2244       43.2244       2126.88       2170.11    
   4  0.813133     -0.206861      -36.7927       36.7927       2136.16       2172.95    
   5  0.490778     -0.711764      -126.596       126.596       2126.23       2252.83    
   6  0.168573      -1.78039      -316.663       316.663       2119.00       2435.67    
   7  0.450161     -0.798149      -141.960       141.960       2125.29       2267.25    
   8  0.828233     -0.188461      -33.5200       33.5200       2127.07       2160.59    
   9  0.994731     -0.528342E-02 -0.939719      0.939719       2127.03       2127.97    
  10  0.813340     -0.206606      -36.7474       36.7474       2223.68       2260.43    
  11  0.776133     -0.253432      -45.0759       45.0759       2206.68       2251.75    
  12  0.729556     -0.315319      -56.0832       56.0832       2194.93       2251.01    
  13  0.530451     -0.634028      -112.769       112.769       2131.28       2244.05    
  14  0.752564E-01  -2.58685      -460.103       460.103       2245.90       2706.00    
  15  0.918457     -0.850597E-01  -15.1289       15.1289       2284.45       2299.58    
  16  0.162642      -1.81621      -323.034       323.034       2118.68       2441.72    
  17  0.725851     -0.320411      -56.9888       56.9888       2154.70       2211.69    
  18  0.322292      -1.13230      -201.393       201.393       2154.56       2355.95    
  19  0.838064     -0.176661      -31.4213       31.4213       2190.57       2221.99    
  20  0.346062E-01  -3.36372      -598.278       598.278       2131.91       2730.19    
  21  0.442915     -0.814377      -144.847       144.847       2322.59       2467.43    
  22  0.143708      -1.93997      -345.047       345.047       2362.57       2707.62    
  23  0.940845     -0.609769E-01  -10.8455       10.8455       2297.60       2308.45    
  24  0.972503     -0.278816E-01  -4.95908       4.95908       2264.20       2269.15    
  25  0.291831      -1.23158      -219.051       219.051       2146.80       2365.85    
  26  0.211976      -1.55128      -275.914       275.914       2369.32       2645.24    
  27  0.695427     -0.363229      -64.6047       64.6047       2249.11       2313.71    
  28  0.982540E-01  -2.32020      -412.675       412.675       2244.85       2657.53    
  29  0.730742     -0.313695      -55.7943       55.7943       2302.72       2358.51    
  30  0.417794     -0.872766      -155.232       155.232       2371.49       2526.72    
  31  0.868385     -0.141121      -25.1000       25.1000       2210.66       2235.76    
  32  0.300897      -1.20099      -213.610       213.610       2396.44       2610.05    
  33  0.917219     -0.864093E-01  -15.3689       15.3689       2197.36       2212.73    
  34  0.304394      -1.18943      -211.555       211.555       2328.11       2539.66    
  35  0.856500     -0.154901      -27.5511       27.5511       2362.77       2390.32    
  36  0.310652      -1.16908      -207.935       207.935       2368.05       2575.98    
  37  0.846275     -0.166911      -29.6872       29.6872       2289.32       2319.01    
  38  0.206825      -1.57588      -280.290       280.290       2433.63       2713.92    
  39  0.606376     -0.500256      -88.9764       88.9764       2245.22       2334.20    
  40  0.840015     -0.174336      -31.0076       31.0076       2251.50       2282.51    
  41  0.348835      -1.05315      -187.316       187.316       2277.66       2464.98    
  42  0.857325     -0.153939      -27.3798       27.3798       2210.51       2237.89    
  43  0.308035E-01  -3.48013      -618.982       618.982       2216.54       2835.52    
  44  0.400632     -0.914711      -162.692       162.692       2145.14       2307.83    
  45  0.242237      -1.41784      -252.179       252.179       2397.75       2649.93    
  46  0.407771     -0.897050      -159.551       159.551       2353.23       2512.78    
  47  0.430691     -0.842364      -149.824       149.824       2293.75       2443.58    
  48  0.415503     -0.878266      -156.210       156.210       2143.13       2299.34    
  49  0.593575     -0.521591      -92.7712       92.7712       2218.66       2311.43    
  50  0.973620     -0.267342E-01  -4.75499       4.75499       2143.46       2148.21    
  51  0.510257     -0.672840      -119.673       119.673       2168.50       2288.17    
loop,thermsimp(1:2)       58   504.943       401.062    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160       2575.10          0.84          1.11         21.94          0.08          0.05         24.02
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2575.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       58
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       59
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      159     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -197.172       197.172       2127.03       2324.20    
   2  0.939148     -0.627826E-01  -11.1666       11.1666       2143.46       2154.63    
   3  0.130906      -2.03328      -361.643       361.643       2127.07       2488.71    
   4  0.664370     -0.408916      -72.7305       72.7305       2126.88       2199.61    
   5  0.490908     -0.711498      -126.548       126.548       2136.16       2262.71    
   6  0.711731     -0.340055      -60.4828       60.4828       2154.70       2215.19    
   7  0.676080     -0.391444      -69.6229       69.6229       2197.36       2266.98    
   8  0.611139     -0.492432      -87.5848       87.5848       2190.57       2278.15    
   9  0.614246     -0.487359      -86.6826       86.6826       2210.66       2297.34    
  10  0.988045     -0.120275E-01  -2.13924       2.13924       2210.51       2212.65    
  11  0.232883      -1.45722      -259.183       259.183       2131.28       2390.47    
  12  0.450825     -0.796675      -141.698       141.698       2194.93       2336.63    
  13  0.493319     -0.706599      -125.677       125.677       2206.68       2332.35    
  14  0.191184      -1.65452      -294.276       294.276       2126.23       2420.51    
  15  0.894136     -0.111897      -19.9023       19.9023       2223.68       2243.59    
  16  0.391751     -0.937128      -166.679       166.679       2125.29       2291.97    
  17  0.236278      -1.44275      -256.610       256.610       2264.20       2520.81    
  18  0.496874E-01  -3.00200      -533.942       533.942       2251.50       2785.45    
  19  0.784524     -0.242678      -43.1632       43.1632       2168.50       2211.66    
  20  0.292328      -1.22988      -218.749       218.749       2143.13       2361.88    
  21  0.832247E-01  -2.48621      -442.202       442.202       2284.45       2726.65    
  22  0.423133     -0.860069      -152.974       152.974       2145.14       2298.11    
  23  0.234472      -1.45042      -257.974       257.974       2297.60       2555.58    
  24  0.868463     -0.141031      -25.0840       25.0840       2218.66       2243.74    
  25  0.122969      -2.09582      -372.767       372.767       2249.11       2621.88    
  26  0.811771     -0.208537      -37.0908       37.0908       2289.32       2326.41    
  27  0.786834     -0.239738      -42.6403       42.6403       2245.22       2287.86    
  28  0.163144      -1.81312      -322.485       322.485       2154.56       2477.05    
  29  0.571103     -0.560186      -99.6357       99.6357       2302.72       2402.35    
  30  0.769982     -0.261388      -46.4909       46.4909       2146.80       2193.29    
  31  0.471769     -0.751265      -133.621       133.621       2362.77       2496.39    
  32  0.584935     -0.536254      -95.3791       95.3791       2119.00       2214.38    
  33  0.416140     -0.876734      -155.938       155.938       2118.68       2274.62    
  34  0.106525E-01  -4.54196      -807.842       807.842       2293.75       3101.59    
  35  0.595424     -0.518482      -92.2181       92.2181       2277.66       2369.88    
  36  0.302400      -1.19600      -212.723       212.723       2322.59       2535.31    
  37  0.629701     -0.462510      -82.2628       82.2628       2099.93       2182.19    
  38  0.939026E-01  -2.36550      -420.732       420.732       2353.23       2773.97    
  39  0.911727     -0.924151E-01  -16.4371       16.4371       2371.49       2387.93    
  40  0.289502      -1.23959      -220.476       220.476       2328.11       2548.59    
  41  0.326571      -1.11911      -199.046       199.046       2368.05       2567.09    
  42  0.972366     -0.280231E-01  -4.98423       4.98423       2396.44       2401.43    
  43  0.823413     -0.194297      -34.5580       34.5580       2106.11       2140.67    
  44  0.790717     -0.234815      -41.7646       41.7646       2369.32       2411.09    
  45  0.167922      -1.78426      -317.351       317.351       2397.75       2715.10    
  46  0.804665     -0.217329      -38.6546       38.6546       2244.85       2283.51    
  47  0.154714      -1.86617      -331.921       331.921       2245.90       2577.82    
  48  0.240456      -1.42522      -253.492       253.492       2362.57       2616.07    
  49  0.351787      -1.04473      -185.818       185.818       2433.63       2619.45    
  50  0.666429E-01  -2.70841      -481.722       481.722       2131.91       2613.63    
  51  0.484113     -0.725437      -129.028       129.028       2575.10       2704.12    
loop,thermsimp(1:2)       59   197.172       11.1666    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161       2166.48          0.85          1.11         21.92          0.13          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162       2648.34          0.85          1.11         21.95          0.09          0.05         24.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    2166.5        1.135     -2.058      3.068     -102.6      1.489    
                       1.024      1.992     -99.70      3.415     0.8758    

                       3.305     -2.405      1.540      7000.      7000.    

                      -1.773      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.588     -3.092     -9.327      4.980    

                      -13.26     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.4117E-01 0.2576    -0.1909E-01 0.1352    

                     -0.2486    -0.1458     0.2074     0.1485     0.7089E-01



                     -0.3369    -0.5067      0.000     0.1202    -0.1242E-02

                     -0.3187E-02 0.2111    -0.7116    -0.3581     0.2717    

                      0.1009    -0.1446E-01-0.5394     -1.161      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.250      8.811    -0.1672E+05 -6.000    

                     -0.5293     -2.896      9.361      8.824    -0.1969E+05



                      -6.000     0.7384    -0.2319      8.956      9.148    

                     -0.1944E+05 -6.000     -1.073    -0.5665      9.120    

                       8.826    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2166.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       59
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       60
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      161     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -211.706       211.706       2106.11       2317.82    
   2  0.843344     -0.170380      -30.3041       30.3041       2143.46       2173.76    
   3  0.457815     -0.781289      -138.962       138.962       2099.93       2238.89    
   4  0.933709     -0.685899E-01  -12.1995       12.1995       2146.80       2159.00    
   5  0.887159     -0.119731      -21.2955       21.2955       2126.88       2148.18    
   6  0.786211     -0.240530      -42.7812       42.7812       2168.50       2211.28    
   7  0.794803     -0.229661      -40.8479       40.8479       2210.51       2251.36    
   8  0.573435E-01  -2.85870      -508.453       508.453       2119.00       2627.46    
   9  0.647106     -0.435245      -77.4134       77.4134       2154.70       2232.12    
  10  0.110118      -2.20620      -392.400       392.400       2223.68       2616.08    
  11  0.339548      -1.08014      -192.116       192.116       2218.66       2410.77    
  12  0.635246     -0.453742      -80.7035       80.7035       2136.16       2216.86    
  13  0.488392     -0.716638      -127.463       127.463       2197.36       2324.82    
  14  0.602571     -0.506549      -90.0958       90.0958       2118.68       2208.78    
  15  0.710041     -0.342433      -60.9058       60.9058       2190.57       2251.47    
  16  0.585763     -0.534840      -95.1277       95.1277       2244.85       2339.98    
  17  0.288010      -1.24476      -221.395       221.395       2245.22       2466.62    
  18  0.455238     -0.786934      -139.966       139.966       2125.29       2265.25    
  19  0.723984     -0.322986      -57.4469       57.4469       2210.66       2268.10    
  20  0.554067     -0.590470      -105.022       105.022       2145.14       2250.16    
  21  0.646516     -0.436157      -77.5757       77.5757       2127.03       2204.61    
  22  0.271985      -1.30201      -231.578       231.578       2289.32       2520.90    
  23  0.901636E-02  -4.70871      -837.501       837.501       2206.68       3044.18    
  24  0.383616     -0.958114      -170.412       170.412       2194.93       2365.34    
  25  0.443516     -0.813022      -144.606       144.606       2143.13       2287.74    
  26  0.223023      -1.50048      -266.879       266.879       2277.66       2544.54    
  27  0.123255      -2.09350      -372.353       372.353       2371.49       2743.84    
  28  0.817485     -0.201523      -35.8432       35.8432       2131.28       2167.13    
  29  0.333893      -1.09693      -195.103       195.103       2396.44       2591.54    
  30  0.867877     -0.141706      -25.2041       25.2041       2302.72       2327.92    
  31  0.365747      -1.00581      -178.896       178.896       2369.32       2548.22    
  32  0.429445     -0.845262      -150.340       150.340       2126.23       2276.57    
  33  0.856620     -0.154761      -27.5261       27.5261       2154.56       2182.09    
  34  0.729532     -0.315352      -56.0892       56.0892       2127.07       2183.16    
  35  0.315845      -1.15251      -204.987       204.987       2362.77       2567.75    
  36  0.547596     -0.602217      -107.111       107.111       2264.20       2371.31    
  37  0.752130     -0.284846      -50.6633       50.6633       2322.59       2373.25    
  38  0.806451     -0.215112      -38.2603       38.2603       2328.11       2366.37    
  39  0.618613     -0.480275      -85.4226       85.4226       2297.60       2383.02    
  40  0.630350     -0.461480      -82.0796       82.0796       2368.05       2450.13    
  41  0.251741      -1.37935      -245.335       245.335       2245.90       2491.23    
  42  0.846504     -0.166640      -29.6389       29.6389       2131.91       2161.55    
  43  0.830791     -0.185377      -32.9714       32.9714       2362.57       2395.55    
  44  0.566838     -0.567681      -100.969       100.969       2433.63       2534.60    
  45  0.499450E-01  -2.99683      -533.022       533.022       2249.11       2782.13    
  46  0.976301     -0.239838E-01  -4.26581       4.26581       2575.10       2579.36    
  47  0.401049     -0.913672      -162.507       162.507       2397.75       2560.26    
  48  0.709931E-01  -2.64517      -470.475       470.475       2284.45       2754.92    
  49  0.920370E-02  -4.68815      -833.843       833.843       2353.23       3187.08    
  50  0.379723     -0.968314      -172.226       172.226       2251.50       2423.73    
  51  0.207569      -1.57229      -279.651       279.651       2166.48       2446.13    
loop,thermsimp(1:2)       60   211.706       30.3041    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       2144.67          0.83          1.11         22.08          0.03          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164       2626.49          0.85          1.11         22.17          0.01          0.06         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2144.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       60
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       61
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      163     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -33.2091       33.2091       2126.88       2160.09    
   2  0.735850     -0.306729      -54.5554       54.5554       2146.80       2201.35    
   3  0.828786     -0.187793      -33.4013       33.4013       2131.91       2165.31    
   4  0.592078     -0.524118      -93.2205       93.2205       2131.28       2224.51    
   5  0.691797E-01  -2.67105      -475.078       475.078       2143.46       2618.54    
   6  0.772335     -0.258337      -45.9483       45.9483       2154.56       2200.51    
   7  0.504563     -0.684063      -121.669       121.669       2127.07       2248.74    
   8  0.700615     -0.355797      -63.2827       63.2827       2127.03       2190.31    
   9  0.764596     -0.268408      -47.7395       47.7395       2118.68       2166.42    
  10  0.459614     -0.777368      -138.264       138.264       2168.50       2306.76    
  11  0.931193     -0.712882E-01  -12.6795       12.6795       2136.16       2148.84    
  12  0.502482E-01  -2.99078      -531.946       531.946       2154.70       2686.65    
  13  0.498197     -0.696760      -123.927       123.927       2099.93       2223.85    
  14  0.551534E-01  -2.89764      -515.379       515.379       2145.14       2660.51    
  15  0.172209      -1.75905      -312.868       312.868       2210.51       2523.37    
  16  0.238868E-01  -3.73443      -664.213       664.213       2190.57       2854.78    
  17  0.699366     -0.357581      -63.6000       63.6000       2125.29       2188.89    
  18  0.764093     -0.269066      -47.8566       47.8566       2210.66       2258.51    
  19  0.465633     -0.764357      -135.950       135.950       2126.23       2262.18    
  20  0.209906      -1.56110      -277.660       277.660       2143.13       2420.79    
  21  0.216891      -1.52836      -271.837       271.837       2106.11       2377.95    
  22  0.795854E-01  -2.53092      -450.155       450.155       2197.36       2647.52    
  23  0.701683     -0.354273      -63.0117       63.0117       2302.72       2365.73    
  24  0.574425     -0.554385      -98.6040       98.6040       2244.85       2343.45    
  25  0.674968     -0.393090      -69.9157       69.9157       2194.93       2264.85    
  26  0.684189     -0.379521      -67.5024       67.5024       2328.11       2395.61    
  27  0.541862     -0.612745      -108.984       108.984       2264.20       2373.18    
  28  0.668027     -0.403426      -71.7541       71.7541       2322.59       2394.34    
  29  0.353251      -1.04058      -185.079       185.079       2297.60       2482.68    
  30  0.778708     -0.250119      -44.4867       44.4867       2362.57       2407.06    
  31  0.829283     -0.187194      -33.2947       33.2947       2218.66       2251.95    
  32  0.679297     -0.386697      -68.7786       68.7786       2251.50       2320.28    
  33  0.536301     -0.623060      -110.819       110.819       2166.48       2277.30    
  34  0.247738      -1.39538      -248.185       248.185       2368.05       2616.23    
  35  0.271399      -1.30416      -231.961       231.961       2245.22       2477.18    
  36  0.284124      -1.25835      -223.812       223.812       2245.90       2469.71    
  37  0.664442     -0.408808      -72.7114       72.7114       2289.32       2362.04    
  38  0.874508     -0.134094      -23.8501       23.8501       2433.63       2457.48    
  39  0.916444     -0.872538E-01  -15.5191       15.5191       2277.66       2293.18    
  40  0.295165      -1.22022      -217.031       217.031       2369.32       2586.35    
  41  0.242592      -1.41637      -251.919       251.919       2397.75       2649.67    
  42  0.396124     -0.926028      -164.705       164.705       2362.77       2527.47    
  43  0.509193E-01  -2.97751      -529.586       529.586       2575.10       3104.68    
  44  0.778911     -0.249858      -44.4402       44.4402       2396.44       2440.88    
  45  0.351009      -1.04694      -186.211       186.211       2223.68       2409.89    
  46  0.480934     -0.732025      -130.199       130.199       2119.00       2249.20    
  47  0.908579     -0.958731E-01  -17.0522       17.0522       2371.49       2388.54    
  48  0.898885     -0.106600      -18.9600       18.9600       2284.45       2303.41    
  49  0.561121     -0.577819      -102.772       102.772       2249.11       2351.88    
  50  0.851109     -0.161215      -28.6741       28.6741       2206.68       2235.35    
  51  0.975854     -0.244425E-01  -4.34739       4.34739       2144.67       2149.02    
loop,thermsimp(1:2)       61   33.2091       54.5554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       2230.32          0.86          1.12         21.96          0.05          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166       3701.52          0.85          1.10         21.91          0.13          0.05         24.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2230.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       61
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       62
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      165     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -15.3347       15.3347       2136.16       2151.49    
   2  0.899579E-01  -2.40841      -428.365       428.365       2144.67       2573.04    
   3  0.997625     -0.237830E-02 -0.423009      0.423009       2126.88       2127.31    
   4  0.224083      -1.49574      -266.035       266.035       2131.91       2397.95    
   5  0.120769      -2.11388      -375.979       375.979       2118.68       2494.66    
   6  0.302676E-01  -3.49768      -622.103       622.103       2125.29       2747.39    
   7  0.315161      -1.15467      -205.372       205.372       2127.03       2332.40    
   8  0.155895      -1.85857      -330.570       330.570       2154.56       2485.13    
   9  0.467639     -0.760060      -135.186       135.186       2146.80       2281.98    
  10  0.277823      -1.28077      -227.800       227.800       2099.93       2327.73    
  11  0.712282     -0.339281      -60.3451       60.3451       2131.28       2191.63    
  12  0.929560     -0.730437E-01  -12.9917       12.9917       2206.68       2219.67    
  13  0.499024     -0.695101      -123.632       123.632       2127.07       2250.70    
  14  0.940347     -0.615066E-01  -10.9397       10.9397       2119.00       2129.94    
  15  0.714006     -0.336864      -59.9152       59.9152       2218.66       2278.57    
  16  0.162603      -1.81644      -323.076       323.076       2210.66       2533.73    
  17  0.663729     -0.409881      -72.9022       72.9022       2126.23       2199.13    
  18  0.314148      -1.15789      -205.945       205.945       2194.93       2400.87    
  19  0.497386     -0.698388      -124.217       124.217       2166.48       2290.70    
  20  0.368387     -0.998622      -177.617       177.617       2277.66       2455.28    
  21  0.326342      -1.11981      -199.171       199.171       2284.45       2483.62    
  22  0.442952     -0.814294      -144.832       144.832       2168.50       2313.33    
  23  0.929694     -0.729000E-01  -12.9661       12.9661       2251.50       2264.47    
  24  0.945450E-01  -2.35868      -419.519       419.519       2244.85       2664.37    
  25  0.407158     -0.898555      -159.819       159.819       2249.11       2408.93    
  26  0.706679     -0.347179      -61.7499       61.7499       2289.32       2351.07    
  27  0.657848     -0.418781      -74.4853       74.4853       2302.72       2377.20    
  28  0.968040     -0.324817E-01  -5.77726       5.77726       2264.20       2269.97    
  29  0.330387      -1.10749      -196.980       196.980       2106.11       2303.09    
  30  0.756161     -0.279501      -49.7126       49.7126       2371.49       2421.20    
  31  0.307772      -1.17840      -209.592       209.592       2322.59       2532.18    
  32  0.759008E-01  -2.57833      -458.586       458.586       2328.11       2786.70    
  33  0.615618E-01  -2.78771      -495.828       495.828       2362.57       2858.40    
  34  0.545984     -0.605166      -107.636       107.636       2223.68       2331.32    
  35  0.339865      -1.07921      -191.950       191.950       2143.13       2335.08    
  36  0.816477     -0.202757      -36.0627       36.0627       2396.44       2432.50    
  37  0.932889     -0.694691E-01  -12.3559       12.3559       2433.63       2445.98    
  38  0.667042     -0.404902      -72.0166       72.0166       2245.90       2317.91    
  39  0.583049     -0.539484      -95.9537       95.9537       2245.22       2341.18    
  40  0.210192      -1.55973      -277.417       277.417       2297.60       2575.02    
  41  0.158846      -1.83982      -327.234       327.234       2210.51       2537.74    
  42  0.360401      -1.02054      -181.515       181.515       2362.77       2544.28    
  43  0.508154     -0.676971      -120.407       120.407       2369.32       2489.73    
  44  0.873303     -0.135473      -24.0955       24.0955       2368.05       2392.14    
  45  0.650524     -0.429977      -76.4766       76.4766       2143.46       2219.94    
  46  0.805601     -0.216166      -38.4477       38.4477       2197.36       2235.81    
  47  0.312590E-03  -8.07062      -1435.46       1435.46       2397.75       3833.21    
  48  0.892261     -0.113997      -20.2757       20.2757       2145.14       2165.41    
  49  0.504672     -0.683846      -121.630       121.630       2154.70       2276.33    
  50  0.269834      -1.30995      -232.990       232.990       2190.57       2423.56    
  51  0.752889     -0.283838      -50.4839       50.4839       2230.32       2280.80    
loop,thermsimp(1:2)       62   15.3347       428.365    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       2144.24          0.85          1.13         21.93          0.09          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168       2288.66          0.86          1.13         21.97          0.03          0.04         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2144.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       62
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       63
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      167     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -85.8307       85.8307       2126.88       2212.71    
   2  0.828850     -0.187716      -33.3874       33.3874       2119.00       2152.39    
   3  0.138898      -1.97402      -351.103       351.103       2136.16       2487.26    
   4  0.174947      -1.74327      -310.062       310.062       2145.14       2455.20    
   5  0.452367E-01  -3.09585      -550.633       550.633       2131.28       2681.92    
   6  0.982229     -0.179305E-01  -3.18915       3.18915       2126.23       2129.42    
   7  0.855728     -0.155803      -27.7114       27.7114       2206.68       2234.39    
   8  0.350750      -1.04768      -186.343       186.343       2143.46       2329.80    
   9  0.880054     -0.127772      -22.7258       22.7258       2197.36       2220.09    
  10  0.106511      -2.23950      -398.323       398.323       2127.07       2525.39    
  11  0.336060      -1.09047      -193.952       193.952       2251.50       2445.46    
  12  0.904819     -0.100020      -17.7898       17.7898       2264.20       2281.99    
  13  0.765597     -0.267099      -47.5067       47.5067       2154.70       2202.21    
  14  0.551789     -0.594589      -105.755       105.755       2218.66       2324.41    
  15  0.832435     -0.183400      -32.6198       32.6198       2230.32       2262.94    
  16  0.353494      -1.03989      -184.957       184.957       2146.80       2331.75    
  17  0.510104     -0.673140      -119.726       119.726       2166.48       2286.21    
  18  0.523162     -0.647863      -115.230       115.230       2106.11       2221.34    
  19  0.953043     -0.480957E-01  -8.55439       8.55439       2168.50       2177.05    
  20  0.267001E-01  -3.62309      -644.409       644.409       2245.90       2890.30    
  21  0.280924      -1.26967      -225.826       225.826       2099.93       2325.75    
  22  0.956868     -0.440901E-01  -7.84195       7.84195       2223.68       2231.52    
  23  0.779725     -0.248814      -44.2545       44.2545       2127.03       2171.29    
  24  0.901061     -0.104183      -18.5302       18.5302       2143.13       2161.66    
  25  0.533391     -0.628501      -111.786       111.786       2245.22       2357.01    
  26  0.642536     -0.442333      -78.6742       78.6742       2289.32       2368.00    
  27  0.520565E-01  -2.95543      -525.658       525.658       2302.72       2828.38    
  28  0.330080      -1.10842      -197.146       197.146       2368.05       2565.19    
  29  0.280801      -1.27011      -225.904       225.904       2131.91       2357.82    
  30  0.144013      -1.93785      -344.670       344.670       2194.93       2539.60    
  31  0.201537      -1.60178      -284.896       284.896       2249.11       2534.01    
  32  0.920188     -0.831777E-01  -14.7941       14.7941       2371.49       2386.29    
  33  0.747222     -0.291393      -51.8277       51.8277       2190.57       2242.40    
  34  0.697959     -0.359595      -63.9583       63.9583       2396.44       2460.40    
  35  0.492949     -0.707349      -125.810       125.810       2433.63       2559.44    
  36  0.378001     -0.972857      -173.034       173.034       2277.66       2450.70    
  37  0.936484     -0.656225E-01  -11.6717       11.6717       2284.45       2296.12    
  38  0.458232     -0.780381      -138.800       138.800       2154.56       2293.36    
  39  0.286796      -1.24898      -222.147       222.147       2369.32       2591.47    
  40  0.524458     -0.645389      -114.790       114.790       2118.68       2233.47    
  41  0.126679      -2.06610      -367.480       367.480       2322.59       2690.07    
  42  0.645270     -0.438086      -77.9188       77.9188       2210.66       2288.57    
  43  0.996049     -0.395919E-02 -0.704190      0.704190       2210.51       2211.21    
  44  0.470695     -0.753545      -134.027       134.027       2362.77       2496.79    
  45  0.783048     -0.244561      -43.4980       43.4980       2144.67       2188.17    
  46  0.682425     -0.382103      -67.9615       67.9615       2297.60       2365.56    
  47  0.623779     -0.471960      -83.9436       83.9436       2244.85       2328.79    
  48  0.138146      -1.97945      -352.068       352.068       2125.29       2477.36    
  49  0.317697      -1.14666      -203.946       203.946       2328.11       2532.06    
  50  0.215616      -1.53426      -272.886       272.886       2362.57       2635.46    
  51  0.392653     -0.934829      -166.270       166.270       2144.24       2310.51    
loop,thermsimp(1:2)       63   85.8307       33.3874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       2124.70          0.85          1.11         21.92          0.02          0.05         23.96
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170       2346.13          0.85          1.11         21.96          0.01          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2124.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       63
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       64
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      169     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -36.0472       36.0472       2126.23       2162.28    
   2  0.209930      -1.56098      -277.639       277.639       2119.00       2396.64    
   3  0.710991     -0.341096      -60.6679       60.6679       2143.13       2203.80    
   4  0.967365     -0.331789E-01  -5.90126       5.90126       2127.03       2132.93    
   5  0.650635E-01  -2.73239      -485.988       485.988       2168.50       2654.48    
   6  0.578340     -0.547593      -97.3959       97.3959       2144.67       2242.07    
   7  0.928890E-01  -2.37635      -422.662       422.662       2154.70       2577.37    
   8  0.486974     -0.719546      -127.980       127.980       2210.51       2338.49    
   9  0.560625     -0.578703      -102.929       102.929       2126.88       2229.81    
  10  0.552834     -0.592698      -105.418       105.418       2197.36       2302.78    
  11  0.744529E-01  -2.59759      -462.012       462.012       2106.11       2568.12    
  12  0.937600     -0.644318E-01  -11.4600       11.4600       2223.68       2235.14    
  13  0.154459      -1.86783      -332.215       332.215       2118.68       2450.90    
  14  0.186893E-02  -6.28239      -1117.40       1117.40       2206.68       3324.07    
  15  0.250797      -1.38311      -246.003       246.003       2190.57       2436.57    
  16  0.924847E-01  -2.38071      -423.438       423.438       2230.32       2653.76    
  17  0.476680     -0.740911      -131.780       131.780       2264.20       2395.98    
  18  0.266527      -1.32228      -235.183       235.183       2166.48       2401.66    
  19  0.369755     -0.994916      -176.958       176.958       2210.66       2387.61    
  20  0.595561     -0.518252      -92.1773       92.1773       2154.56       2246.74    
  21  0.636070     -0.452447      -80.4731       80.4731       2284.45       2364.92    
  22  0.447294     -0.804540      -143.097       143.097       2144.24       2287.34    
  23  0.964945     -0.356839E-01  -6.34680       6.34680       2218.66       2225.01    
  24  0.752421     -0.284460      -50.5945       50.5945       2099.93       2150.52    
  25  0.705556     -0.348769      -62.0327       62.0327       2244.85       2306.88    
  26  0.943467     -0.581939E-01  -10.3505       10.3505       2143.46       2153.81    
  27  0.272564      -1.29988      -231.199       231.199       2146.80       2378.00    
  28  0.215815      -1.53333      -272.721       272.721       2245.22       2517.94    
  29  0.756955     -0.278452      -49.5260       49.5260       2131.91       2181.44    
  30  0.538381     -0.619189      -110.130       110.130       2297.60       2407.73    
  31  0.182967      -1.69845      -302.089       302.089       2289.32       2591.41    
  32  0.644758     -0.438881      -78.0602       78.0602       2371.49       2449.55    
  33  0.939477     -0.624320E-01  -11.1043       11.1043       2251.50       2262.61    
  34  0.663186     -0.410699      -73.0477       73.0477       2277.66       2350.71    
  35  0.795014     -0.229396      -40.8008       40.8008       2145.14       2185.94    
  36  0.630792     -0.460779      -81.9551       81.9551       2396.44       2478.40    
  37  0.151039      -1.89022      -336.198       336.198       2125.29       2461.48    
  38  0.668306     -0.403009      -71.6799       71.6799       2136.16       2207.84    
  39  0.683820     -0.380061      -67.5984       67.5984       2362.77       2430.37    
  40  0.122229      -2.10186      -373.840       373.840       2127.07       2500.91    
  41  0.664453     -0.408791      -72.7083       72.7083       2328.11       2400.82    
  42  0.548687     -0.600228      -106.758       106.758       2249.11       2355.87    
  43  0.931535     -0.709210E-01  -12.6141       12.6141       2194.93       2207.54    
  44  0.139742      -1.96796      -350.025       350.025       2433.63       2783.65    
  45  0.429142     -0.845967      -150.465       150.465       2368.05       2518.51    
  46  0.531147     -0.632717      -112.536       112.536       2369.32       2481.86    
  47  0.575558     -0.552416      -98.2537       98.2537       2362.57       2460.83    
  48  0.336537      -1.08905      -193.700       193.700       2131.28       2324.98    
  49  0.324486      -1.12551      -200.186       200.186       2322.59       2522.77    
  50  0.652768     -0.426534      -75.8641       75.8641       2302.72       2378.58    
  51  0.537860     -0.620158      -110.302       110.302       2124.70       2235.00    
loop,thermsimp(1:2)       64   36.0472       277.639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       2169.67          0.82          1.12         21.91          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172       2528.47          0.85          1.11         21.98          0.13          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2169.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       64
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       65
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      171     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -178.035       178.035       2127.03       2305.07    
   2  0.298218      -1.20993      -215.200       215.200       2099.93       2315.13    
   3  0.374092     -0.983254      -174.883       174.883       2143.46       2318.34    
   4  0.417366     -0.873791      -155.414       155.414       2126.23       2281.64    
   5  0.299382      -1.20604      -214.508       214.508       2131.91       2346.42    
   6  0.373029     -0.986099      -175.389       175.389       2145.14       2320.52    
   7  0.628224     -0.464858      -82.6806       82.6806       2143.13       2225.81    
   8  0.111397      -2.19465      -390.345       390.345       2194.93       2585.27    
   9  0.983555     -0.165818E-01  -2.94927       2.94927       2136.16       2139.11    
  10  0.394578     -0.929938      -165.401       165.401       2218.66       2384.06    
  11  0.410639     -0.890042      -158.305       158.305       2126.88       2285.19    
  12  0.700680     -0.355705      -63.2663       63.2663       2124.70       2187.97    
  13  0.223946      -1.49635      -266.144       266.144       2223.68       2489.83    
  14  0.651113E-01  -2.73166      -485.858       485.858       2144.67       2630.53    
  15  0.704010     -0.350963      -62.4229       62.4229       2154.56       2216.98    
  16  0.172411      -1.75787      -312.659       312.659       2251.50       2564.16    
  17  0.567412     -0.566670      -100.789       100.789       2144.24       2245.03    
  18  0.186334      -1.68021      -298.846       298.846       2197.36       2496.21    
  19  0.677524     -0.389310      -69.2435       69.2435       2244.85       2314.09    
  20  0.362270      -1.01537      -180.595       180.595       2131.28       2311.88    
  21  0.603880     -0.504381      -89.7101       89.7101       2210.51       2300.22    
  22  0.782208     -0.245635      -43.6891       43.6891       2277.66       2321.35    
  23  0.129808      -2.04170      -363.141       363.141       2249.11       2612.25    
  24  0.284816      -1.25591      -223.379       223.379       2284.45       2507.83    
  25  0.246930      -1.39865      -248.767       248.767       2146.80       2395.56    
  26  0.256917      -1.35900      -241.715       241.715       2302.72       2544.43    
  27  0.240545      -1.42485      -253.426       253.426       2210.66       2464.08    
  28  0.218018      -1.52318      -270.915       270.915       2264.20       2535.11    
  29  0.235583E-01  -3.74828      -666.676       666.676       2119.00       2785.68    
  30  0.114660      -2.16578      -385.210       385.210       2328.11       2713.32    
  31  0.119129      -2.12755      -378.410       378.410       2166.48       2544.89    
  32  0.471707     -0.751398      -133.645       133.645       2297.60       2431.25    
  33  0.607413     -0.498546      -88.6722       88.6722       2362.77       2451.44    
  34  0.568731     -0.564347      -100.376       100.376       2190.57       2290.94    
  35  0.587492     -0.531893      -94.6036       94.6036       2371.49       2466.10    
  36  0.411259     -0.888533      -158.036       158.036       2118.68       2276.72    
  37  0.836192     -0.178897      -31.8189       31.8189       2362.57       2394.39    
  38  0.152977      -1.87747      -333.930       333.930       2125.29       2459.22    
  39  0.941831     -0.599291E-01  -10.6591       10.6591       2396.44       2407.10    
  40  0.936595     -0.655045E-01  -11.6508       11.6508       2369.32       2380.97    
  41  0.856621     -0.154759      -27.5258       27.5258       2127.07       2154.60    
  42  0.484786     -0.724047      -128.780       128.780       2245.22       2374.00    
  43  0.188261      -1.66993      -297.016       297.016       2368.05       2665.06    
  44  0.957606     -0.433189E-01  -7.70479       7.70479       2322.59       2330.29    
  45  0.234891      -1.44863      -257.657       257.657       2106.11       2363.77    
  46  0.758920     -0.275858      -49.0647       49.0647       2154.70       2203.77    
  47  0.135340      -1.99997      -355.718       355.718       2289.32       2645.04    
  48  0.779121E-01  -2.55217      -453.934       453.934       2230.32       2684.25    
  49  0.573767     -0.555531      -98.8078       98.8078       2168.50       2267.30    
  50  0.982512     -0.176424E-01  -3.13791       3.13791       2433.63       2436.77    
  51  0.109579      -2.21111      -393.272       393.272       2169.67       2562.94    
loop,thermsimp(1:2)       65   178.035       215.200    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       2745.11          0.86          1.11         21.91          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2745.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       65
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       66
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      172     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -242.725       242.725       2136.16       2378.88    
   2  0.513427E-01  -2.96923      -528.113       528.113       2127.07       2655.18    
   3  0.288453      -1.24322      -221.122       221.122       2124.70       2345.82    
   4  0.107044      -2.23452      -397.435       397.435       2154.70       2552.14    
   5  0.756779     -0.278684      -49.5672       49.5672       2154.56       2204.13    
   6  0.333762      -1.09733      -195.173       195.173       2143.13       2338.30    
   7  0.270335      -1.30809      -232.660       232.660       2144.24       2376.90    
   8  0.666278E-01  -2.70863      -481.762       481.762       2168.50       2650.26    
   9  0.517510     -0.658727      -117.162       117.162       2118.68       2235.84    
  10  0.719680     -0.328949      -58.5074       58.5074       2126.23       2184.74    
  11  0.401542     -0.912442      -162.289       162.289       2126.88       2289.17    
  12  0.408125     -0.896181      -159.396       159.396       2190.57       2349.96    
  13  0.481086     -0.731710      -130.143       130.143       2210.51       2340.65    
  14  0.166952E-01  -4.09263      -727.923       727.923       2127.03       2854.95    
  15  0.913266     -0.907286E-01  -16.1372       16.1372       2131.28       2147.42    
  16  0.972084     -0.283134E-01  -5.03588       5.03588       2244.85       2249.89    
  17  0.889421     -0.117184      -20.8426       20.8426       2099.93       2120.77    
  18  0.171754      -1.76169      -313.338       313.338       2143.46       2456.80    
  19  0.925876     -0.770155E-01  -13.6981       13.6981       2145.14       2158.83    
  20  0.992897     -0.712866E-02  -1.26792       1.26792       2277.66       2278.93    
  21  0.118575E-01  -4.43479      -788.781       788.781       2322.59       3111.37    
  22  0.492413     -0.708438      -126.004       126.004       2131.91       2257.92    
  23  0.952433     -0.487360E-01  -8.66828       8.66828       2106.11       2114.78    
  24  0.591826     -0.524543      -93.2962       93.2962       2245.22       2338.52    
  25  0.762199     -0.271548      -48.2980       48.2980       2369.32       2417.62    
  26  0.613492     -0.488588      -86.9012       86.9012       2218.66       2305.56    
  27  0.134863      -2.00350      -356.346       356.346       2362.57       2718.92    
  28  0.633670     -0.456227      -81.1453       81.1453       2146.80       2227.94    
  29  0.829625     -0.186782      -33.2213       33.2213       2396.44       2429.66    
  30  0.148219      -1.90906      -339.550       339.550       2297.60       2637.15    
  31  0.198093      -1.61902      -287.962       287.962       2433.63       2721.59    
  32  0.321318      -1.13532      -201.931       201.931       2362.77       2564.70    
  33  0.475408     -0.743582      -132.255       132.255       2125.29       2257.54    
  34  0.196520      -1.62699      -289.380       289.380       2210.66       2500.04    
  35  0.637413     -0.450337      -80.0979       80.0979       2371.49       2451.59    
  36  0.596751     -0.516255      -91.8221       91.8221       2223.68       2315.51    
  37  0.351361      -1.04594      -186.033       186.033       2197.36       2383.39    
  38  0.111764      -2.19136      -389.760       389.760       2284.45       2674.21    
  39  0.213579      -1.54375      -274.574       274.574       2264.20       2538.77    
  40  0.799647     -0.223585      -39.7673       39.7673       2302.72       2342.49    
  41  0.670682     -0.399460      -71.0488       71.0488       2166.48       2237.53    
  42  0.104235      -2.26111      -402.165       402.165       2169.67       2571.83    
  43  0.607160E-01  -2.80155      -498.289       498.289       2251.50       2749.79    
  44  0.462312     -0.771516      -137.223       137.223       2194.93       2332.15    
  45  0.269658      -1.31060      -233.106       233.106       2249.11       2482.22    
  46  0.678606     -0.387714      -68.9595       68.9595       2144.67       2213.63    
  47  0.669051     -0.401895      -71.4818       71.4818       2289.32       2360.81    
  48  0.551912     -0.594367      -105.715       105.715       2368.05       2473.76    
  49  0.116070E-01  -4.45614      -792.578       792.578       2230.32       3022.90    
  50  0.911337     -0.928428E-01  -16.5132       16.5132       2328.11       2344.62    
  51  0.302404      -1.19599      -212.721       212.721       2745.11       2957.83    
loop,thermsimp(1:2)       66   242.725       528.113    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174       2095.32          0.85          1.12         21.89          0.02          0.06         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175       2224.54          0.86          1.13         21.95          0.04          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2095.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       66
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       67
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      174     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -215.383       215.383       2106.11       2321.49    
   2  0.840396     -0.173882      -30.9269       30.9269       2099.93       2130.85    
   3  0.165782      -1.79708      -319.632       319.632       2131.28       2450.92    
   4  0.516202E-01  -2.96384      -527.154       527.154       2145.14       2672.29    
   5  0.163201      -1.81278      -322.424       322.424       2126.23       2448.65    
   6  0.201529      -1.60182      -284.903       284.903       2154.56       2439.46    
   7  0.791805     -0.233441      -41.5202       41.5202       2144.67       2186.19    
   8  0.306466      -1.18265      -210.348       210.348       2146.80       2357.14    
   9  0.625963     -0.468465      -83.3220       83.3220       2118.68       2202.00    
  10  0.255827      -1.36325      -242.471       242.471       2166.48       2408.95    
  11  0.275269      -1.29001      -229.443       229.443       2244.85       2474.29    
  12  0.546374     -0.604451      -107.509       107.509       2125.29       2232.80    
  13  0.738275E-01  -2.60602      -463.512       463.512       2131.91       2595.42    
  14  0.459460     -0.777704      -138.324       138.324       2277.66       2415.99    
  15  0.245891      -1.40287      -249.516       249.516       2126.88       2376.40    
  16  0.818144E-01  -2.50330      -445.242       445.242       2218.66       2663.90    
  17  0.791963     -0.233241      -41.4847       41.4847       2223.68       2265.17    
  18  0.652560     -0.426852      -75.9207       75.9207       2194.93       2270.85    
  19  0.743237     -0.296740      -52.7787       52.7787       2143.13       2195.91    
  20  0.146095      -1.92350      -342.117       342.117       2245.22       2587.34    
  21  0.747148     -0.291492      -51.8454       51.8454       2210.51       2262.35    
  22  0.935024E-01  -2.36977      -421.491       421.491       2302.72       2724.21    
  23  0.924202     -0.788243E-01  -14.0198       14.0198       2328.11       2342.13    
  24  0.193934      -1.64024      -291.736       291.736       2124.70       2416.44    
  25  0.112499      -2.18481      -388.594       388.594       2190.57       2579.16    
  26  0.609079     -0.495807      -88.1852       88.1852       2289.32       2377.51    
  27  0.387822     -0.947210      -168.472       168.472       2144.24       2312.71    
  28  0.151976      -1.88403      -335.098       335.098       2136.16       2471.26    
  29  0.820125     -0.198299      -35.2698       35.2698       2197.36       2232.63    
  30  0.100865      -2.29397      -408.010       408.010       2369.32       2777.33    
  31  0.246930      -1.39865      -248.767       248.767       2396.44       2645.21    
  32  0.101973      -2.28305      -406.067       406.067       2371.49       2777.56    
  33  0.389401     -0.943145      -167.750       167.750       2143.46       2311.21    
  34  0.573635     -0.555762      -98.8489       98.8489       2368.05       2466.90    
  35  0.730896E-01  -2.61607      -465.299       465.299       2249.11       2714.41    
  36  0.260104      -1.34667      -239.522       239.522       2210.66       2450.18    
  37  0.562102     -0.576073      -102.461       102.461       2264.20       2366.66    
  38  0.159056      -1.83850      -326.999       326.999       2154.70       2481.70    
  39  0.779134E-02  -4.85474      -863.474       863.474       2362.77       3226.24    
  40  0.693208     -0.366425      -65.1731       65.1731       2169.67       2234.84    
  41  0.600279     -0.510361      -90.7738       90.7738       2297.60       2388.38    
  42  0.419387     -0.868962      -154.555       154.555       2168.50       2323.05    
  43  0.952036     -0.491524E-01  -8.74234       8.74234       2127.07       2135.81    
  44  0.613955     -0.487834      -86.7670       86.7670       2284.45       2371.22    
  45  0.842752     -0.171082      -30.4290       30.4290       2362.57       2393.00    
  46  0.733219     -0.310311      -55.1925       55.1925       2433.63       2488.82    
  47  0.776088     -0.253489      -45.0861       45.0861       2251.50       2296.59    
  48  0.965215     -0.354047E-01  -6.29714       6.29714       2127.03       2133.33    
  49  0.487812     -0.717826      -127.674       127.674       2745.11       2872.78    
  50  0.864492     -0.145613      -25.8989       25.8989       2230.32       2256.22    
  51  0.334607      -1.09480      -194.723       194.723       2095.32       2290.05    
loop,thermsimp(1:2)       67   215.383       30.9269    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       2130.73          0.86          1.12         21.90          0.02          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177       2592.43          0.85          1.12         22.06          0.03          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2130.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       67
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       68
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      176     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -829.279       829.279       2099.93       2929.20    
   2  0.714357     -0.336373      -59.8279       59.8279       2127.03       2186.86    
   3  0.997096     -0.290808E-02 -0.517237      0.517237       2127.07       2127.59    
   4  0.905437     -0.993373E-01  -17.6683       17.6683       2144.67       2162.34    
   5  0.307060      -1.18071      -210.004       210.004       2143.13       2353.13    
   6  0.179061      -1.72003      -305.927       305.927       2118.68       2424.61    
   7  0.384312     -0.956301      -170.089       170.089       2197.36       2367.45    
   8  0.901101     -0.104138      -18.5223       18.5223       2125.29       2143.81    
   9  0.606170     -0.500594      -89.0366       89.0366       2169.67       2258.70    
  10  0.515234     -0.663133      -117.946       117.946       2230.32       2348.26    
  11  0.639447     -0.447152      -79.5312       79.5312       2210.51       2290.04    
  12  0.820429     -0.197928      -35.2038       35.2038       2223.68       2258.89    
  13  0.521739     -0.650587      -115.715       115.715       2194.93       2310.64    
  14  0.767979     -0.263993      -46.9543       46.9543       2095.32       2142.28    
  15  0.530366     -0.634187      -112.798       112.798       2251.50       2364.30    
  16  0.732471     -0.311332      -55.3741       55.3741       2143.46       2198.83    
  17  0.440461     -0.819933      -145.835       145.835       2144.24       2290.07    
  18  0.595715     -0.517993      -92.1312       92.1312       2106.11       2198.24    
  19  0.407958     -0.896592      -159.470       159.470       2168.50       2327.96    
  20  0.544683     -0.607550      -108.060       108.060       2328.11       2436.17    
  21  0.611386E-01  -2.79461      -497.055       497.055       2146.80       2643.85    
  22  0.135041      -2.00218      -356.111       356.111       2264.20       2620.31    
  23  0.547242     -0.602864      -107.227       107.227       2284.45       2391.67    
  24  0.214436      -1.53975      -273.862       273.862       2126.88       2400.75    
  25  0.340220      -1.07816      -191.764       191.764       2289.32       2481.09    
  26  0.270394      -1.30787      -232.621       232.621       2297.60       2530.22    
  27  0.605229     -0.502149      -89.3131       89.3131       2362.57       2451.89    
  28  0.630206     -0.461709      -82.1204       82.1204       2166.48       2248.60    
  29  0.942476     -0.592449E-01  -10.5374       10.5374       2277.66       2288.20    
  30  0.293125      -1.22716      -218.265       218.265       2124.70       2342.97    
  31  0.526210     -0.642056      -114.197       114.197       2154.56       2268.76    
  32  0.972201     -0.281927E-01  -5.01440       5.01440       2126.23       2131.24    
  33  0.570000     -0.562119      -99.9795       99.9795       2210.66       2310.64    
  34  0.752945     -0.283763      -50.4707       50.4707       2131.28       2181.76    
  35  0.333005      -1.09960      -195.577       195.577       2368.05       2563.62    
  36  0.430444     -0.842939      -149.927       149.927       2136.16       2286.08    
  37  0.106505      -2.23957      -398.333       398.333       2244.85       2643.18    
  38  0.327953      -1.11488      -198.295       198.295       2154.70       2353.00    
  39  0.586631     -0.533359      -94.8643       94.8643       2433.63       2528.49    
  40  0.563274     -0.573989      -102.091       102.091       2190.57       2292.66    
  41  0.802100     -0.220522      -39.2224       39.2224       2245.22       2284.45    
  42  0.594871     -0.519411      -92.3833       92.3833       2131.91       2224.29    
  43  0.816066     -0.203261      -36.1523       36.1523       2396.44       2432.59    
  44  0.170795E-01  -4.06987      -723.876       723.876       2218.66       2942.53    
  45  0.554958     -0.588864      -104.736       104.736       2145.14       2249.87    
  46  0.674023     -0.394492      -70.1650       70.1650       2249.11       2319.27    
  47  0.371758     -0.989512      -175.996       175.996       2302.72       2478.72    
  48  0.309440      -1.17299      -208.630       208.630       2369.32       2577.95    
  49  0.182337      -1.70190      -302.703       302.703       2371.49       2674.19    
  50  0.443504     -0.813049      -144.610       144.610       2745.11       2889.72    
  51  0.407824     -0.896918      -159.528       159.528       2130.73       2290.26    
loop,thermsimp(1:2)       68   829.279       59.8279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178       2595.25          0.86          1.09         22.24          0.09          0.04         24.32
Just calling func    0   0         24.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2595.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       68
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       69
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      177     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -115.951       115.951       2127.07       2243.02    
   2  0.554375     -0.589913      -104.923       104.923       2126.23       2231.15    
   3  0.404373     -0.905418      -161.039       161.039       2095.32       2256.36    
   4  0.632877     -0.457478      -81.3680       81.3680       2125.29       2206.66    
   5  0.395261     -0.928209      -165.093       165.093       2144.67       2309.76    
   6  0.715068     -0.335378      -59.6510       59.6510       2131.28       2190.94    
   7  0.918313     -0.852174E-01  -15.1569       15.1569       2127.03       2142.19    
   8  0.529514E-01  -2.93838      -522.626       522.626       2106.11       2628.74    
   9  0.284219      -1.25801      -223.752       223.752       2143.46       2367.21    
  10  0.809402     -0.211460      -37.6107       37.6107       2131.91       2169.52    
  11  0.604758     -0.502928      -89.4517       89.4517       2166.48       2255.93    
  12  0.624772     -0.470369      -83.6607       83.6607       2145.14       2228.80    
  13  0.622683     -0.473718      -84.2564       84.2564       2169.67       2253.92    
  14  0.491656     -0.709976      -126.278       126.278       2223.68       2349.96    
  15  0.823484     -0.194211      -34.5427       34.5427       2154.56       2189.10    
  16  0.185629E-01  -3.98659      -709.062       709.062       2245.22       2954.29    
  17  0.911253     -0.929346E-01  -16.5295       16.5295       2136.16       2152.69    
  18  0.825116     -0.192231      -34.1906       34.1906       2277.66       2311.86    
  19  0.902913     -0.102129      -18.1649       18.1649       2210.51       2228.67    
  20  0.869925     -0.139348      -24.7848       24.7848       2144.24       2169.02    
  21  0.135445      -1.99919      -355.580       355.580       2130.73       2486.31    
  22  0.516840     -0.660022      -117.393       117.393       2190.57       2307.96    
  23  0.127583      -2.05899      -366.216       366.216       2210.66       2576.87    
  24  0.237062E-01  -3.74202      -665.562       665.562       2194.93       2860.49    
  25  0.456233     -0.784753      -139.578       139.578       2249.11       2388.69    
  26  0.547397     -0.602581      -107.176       107.176       2168.50       2275.67    
  27  0.231746E-02  -6.06728      -1079.14       1079.14       2124.70       3203.84    
  28  0.467213     -0.760969      -135.347       135.347       2230.32       2365.67    
  29  0.397333     -0.922981      -164.163       164.163       2154.70       2318.87    
  30  0.291343      -1.23325      -219.349       219.349       2143.13       2362.48    
  31  0.964262     -0.363922E-01  -6.47278       6.47278       2251.50       2257.98    
  32  0.260485      -1.34521      -239.261       239.261       2197.36       2436.62    
  33  0.868574     -0.140902      -25.0612       25.0612       2284.45       2309.51    
  34  0.832573     -0.183235      -32.5905       32.5905       2126.88       2159.47    
  35  0.240383      -1.42552      -253.546       253.546       2118.68       2372.23    
  36  0.878342     -0.129719      -23.0720       23.0720       2396.44       2419.51    
  37  0.168707      -1.77959      -316.522       316.522       2328.11       2644.63    
  38  0.348015      -1.05551      -187.735       187.735       2362.57       2550.31    
  39  0.846224     -0.166971      -29.6979       29.6979       2302.72       2332.42    
  40  0.842580     -0.171286      -30.4653       30.4653       2289.32       2319.79    
  41  0.230401      -1.46794      -261.090       261.090       2433.63       2694.72    
  42  0.441962     -0.816531      -145.230       145.230       2297.60       2442.83    
  43  0.772036     -0.258724      -46.0172       46.0172       2368.05       2414.07    
  44  0.970063     -0.303946E-01  -5.40604       5.40604       2369.32       2374.73    
  45  0.610535     -0.493419      -87.7605       87.7605       2264.20       2351.96    
  46  0.548201     -0.601114      -106.915       106.915       2244.85       2351.77    
  47  0.322533      -1.13155      -201.260       201.260       2146.80       2348.06    
  48  0.194318E-01  -3.94084      -700.926       700.926       2371.49       3072.42    
  49  0.219930      -1.51445      -269.362       269.362       2745.11       3014.47    
  50  0.538995E-01  -2.92063      -519.470       519.470       2099.93       2619.40    
  51  0.189941      -1.66104      -295.436       295.436       2595.25       2890.69    
loop,thermsimp(1:2)       69   115.951       104.923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       2207.10          0.86          1.12         21.88          0.07          0.05         23.98
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180       2485.24          0.85          1.11         21.96          0.12          0.05         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2207.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       69
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       70
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      179     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -252.223       252.223       2127.03       2379.25    
   2  0.384023     -0.957054      -170.223       170.223       2136.16       2306.38    
   3  0.672379     -0.396933      -70.5992       70.5992       2126.88       2197.48    
   4  0.204591      -1.58674      -282.221       282.221       2144.24       2426.46    
   5  0.145151      -1.92998      -343.270       343.270       2131.91       2475.18    
   6  0.235757      -1.44495      -257.002       257.002       2154.56       2411.56    
   7  0.882595     -0.124889      -22.2130       22.2130       2131.28       2153.50    
   8  0.215562      -1.53451      -272.930       272.930       2125.29       2398.22    
   9  0.248905      -1.39068      -247.349       247.349       2210.51       2457.86    
  10  0.695481     -0.363152      -64.5908       64.5908       2145.14       2209.73    
  11  0.515786     -0.662063      -117.756       117.756       2126.23       2243.99    
  12  0.956817     -0.441428E-01  -7.85132       7.85132       2127.07       2134.92    
  13  0.256477      -1.36072      -242.019       242.019       2169.67       2411.68    
  14  0.870409     -0.138792      -24.6858       24.6858       2166.48       2191.17    
  15  0.296335      -1.21627      -216.327       216.327       2095.32       2311.65    
  16  0.563087     -0.574322      -102.150       102.150       2251.50       2353.65    
  17  0.860973     -0.149692      -26.6245       26.6245       2168.50       2195.12    
  18  0.336353      -1.08959      -193.797       193.797       2190.57       2384.37    
  19  0.432238     -0.838780      -149.187       149.187       2284.45       2433.64    
  20  0.411587     -0.887734      -157.894       157.894       2144.67       2302.56    
  21  0.685679     -0.377346      -67.1154       67.1154       2277.66       2344.78    
  22  0.178038E-01  -4.02835      -716.489       716.489       2154.70       2871.19    
  23  0.330516      -1.10710      -196.911       196.911       2289.32       2486.23    
  24  0.987115     -0.129685E-01  -2.30660       2.30660       2302.72       2305.03    
  25  0.702947     -0.352474      -62.6917       62.6917       2146.80       2209.49    
  26  0.159040      -1.83860      -327.016       327.016       2223.68       2550.70    
  27  0.329714      -1.10953      -197.343       197.343       2244.85       2442.19    
  28  0.542452     -0.611656      -108.790       108.790       2264.20       2372.99    
  29  0.484074     -0.725518      -129.042       129.042       2143.13       2272.17    
  30  0.574330     -0.554551      -98.6335       98.6335       2230.32       2328.95    
  31  0.987944     -0.121288E-01  -2.15726       2.15726       2143.46       2145.62    
  32  0.565195E-01  -2.87317      -511.027       511.027       2118.68       2629.71    
  33  0.662626     -0.411545      -73.1981       73.1981       2369.32       2442.52    
  34  0.462195     -0.771769      -137.268       137.268       2249.11       2386.38    
  35  0.413957     -0.881994      -156.873       156.873       2368.05       2524.92    
  36  0.627825     -0.465493      -82.7935       82.7935       2396.44       2479.24    
  37  0.373783E-01  -3.28667      -584.573       584.573       2197.36       2781.93    
  38  0.318481      -1.14419      -203.508       203.508       2297.60       2501.11    
  39  0.193037      -1.64487      -292.560       292.560       2130.73       2423.29    
  40  0.246573      -1.40010      -249.024       249.024       2362.57       2611.60    
  41  0.913643     -0.903152E-01  -16.0636       16.0636       2210.66       2226.72    
  42  0.593287     -0.522077      -92.8575       92.8575       2099.93       2192.78    
  43  0.323913      -1.12728      -200.500       200.500       2106.11       2306.61    
  44  0.270579E-01  -3.60978      -642.041       642.041       2328.11       2970.15    
  45  0.684823     -0.378595      -67.3376       67.3376       2433.63       2500.97    
  46  0.279340      -1.27532      -226.832       226.832       2194.93       2421.76    
  47  0.285511      -1.25348      -222.946       222.946       2595.25       2818.20    
  48  0.361874      -1.01646      -180.789       180.789       2245.22       2426.01    
  49  0.779291     -0.249370      -44.3535       44.3535       2745.11       2789.46    
  50  0.590933     -0.526053      -93.5648       93.5648       2371.49       2465.06    
  51  0.493821E-01  -3.00817      -535.038       535.038       2207.10       2742.13    
loop,thermsimp(1:2)       70   252.223       170.223    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181       2159.84          0.85          1.12         21.89          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182       2677.65          0.85          1.11         21.98          0.02          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    2159.8        1.105     -2.048      3.113     -102.6      1.571    
                       1.059      2.112     -99.70      3.391     0.9327    

                       3.532     -2.490      1.540      7000.      7000.    

                      -1.730      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.589     -2.542     -9.285      4.689    

                      -13.04     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.4631E-01 0.2579    -0.1890E-01 0.1345    

                     -0.2486    -0.1463    -0.9168E-01 0.1614     0.6643E-01



                     -0.3154    -0.5084      0.000     0.1245     0.3675E-02

                     -0.1859E-01 0.1913    -0.7116    -0.6717E-01 0.2757    

                      0.1138    -0.1830E-01-0.5530     -1.148      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.259      8.821    -0.1672E+05 -6.000    

                     -0.2898     -2.998      9.400      8.824    -0.1969E+05



                      -6.000     0.6737    -0.1984      8.973      9.165    

                     -0.1944E+05 -6.000     -1.155    -0.5551      9.125    

                       8.832    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2159.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       70
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       71
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      181     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -37.4122       37.4122       2127.07       2164.48    
   2  0.601567     -0.508218      -90.3926       90.3926       2143.46       2233.85    
   3  0.190401      -1.65862      -295.006       295.006       2131.28       2426.29    
   4  0.827263     -0.189632      -33.7283       33.7283       2166.48       2200.21    
   5  0.581677     -0.541840      -96.3727       96.3727       2099.93       2196.30    
   6  0.680336     -0.385169      -68.5069       68.5069       2168.50       2237.00    
   7  0.641383     -0.444128      -78.9935       78.9935       2126.88       2205.88    
   8  0.593931     -0.520992      -92.6646       92.6646       2146.80       2239.46    
   9  0.326400      -1.11963      -199.140       199.140       2145.14       2344.28    
  10  0.964323     -0.363286E-01  -6.46147       6.46147       2210.66       2217.12    
  11  0.481751     -0.730328      -129.897       129.897       2126.23       2256.13    
  12  0.230624E-01  -3.76955      -670.460       670.460       2143.13       2813.59    
  13  0.214859      -1.53777      -273.512       273.512       2144.67       2418.18    
  14  0.325804      -1.12146      -199.465       199.465       2302.72       2502.18    
  15  0.668745     -0.402353      -71.5632       71.5632       2136.16       2207.72    
  16  0.803263     -0.219073      -38.9647       38.9647       2106.11       2145.08    
  17  0.465531     -0.764577      -135.989       135.989       2095.32       2231.31    
  18  0.589796     -0.527978      -93.9072       93.9072       2230.32       2324.22    
  19  0.783335     -0.244195      -43.4330       43.4330       2277.66       2321.10    
  20  0.937099     -0.649659E-01  -11.5550       11.5550       2251.50       2263.06    
  21  0.504081     -0.685019      -121.839       121.839       2264.20       2386.03    
  22  0.368431E-01  -3.30109      -587.137       587.137       2127.03       2714.17    
  23  0.462712     -0.770651      -137.069       137.069       2190.57       2327.64    
  24  0.172447      -1.75767      -312.622       312.622       2249.11       2561.73    
  25  0.361979      -1.01617      -180.738       180.738       2125.29       2306.03    
  26  0.616189     -0.484202      -86.1211       86.1211       2154.56       2240.68    
  27  0.495582     -0.702023      -124.863       124.863       2169.67       2294.53    
  28  0.492859     -0.707532      -125.843       125.843       2194.93       2320.77    
  29  0.189027      -1.66586      -296.294       296.294       2130.73       2427.02    
  30  0.336237      -1.08994      -193.859       193.859       2245.22       2439.08    
  31  0.997382     -0.262184E-02 -0.466324      0.466324       2144.24       2144.71    
  32  0.629287     -0.463168      -82.3799       82.3799       2284.45       2366.83    
  33  0.226178      -1.48644      -264.380       264.380       2244.85       2509.23    
  34  0.522315     -0.649483      -115.518       115.518       2369.32       2484.84    
  35  0.238835E-02  -6.03715      -1073.78       1073.78       2210.51       3284.29    
  36  0.123092E-01  -4.39741      -782.132       782.132       2371.49       3153.62    
  37  0.488141     -0.717152      -127.554       127.554       2131.91       2259.47    
  38  0.925188     -0.777584E-01  -13.8302       13.8302       2396.44       2410.27    
  39  0.676413     -0.390952      -69.5354       69.5354       2289.32       2358.86    
  40  0.638827     -0.448121      -79.7037       79.7037       2433.63       2513.33    
  41  0.789998     -0.235725      -41.9265       41.9265       2297.60       2339.53    
  42  0.453703E-01  -3.09290      -550.109       550.109       2368.05       2918.16    
  43  0.866893     -0.142840      -25.4058       25.4058       2223.68       2249.09    
  44  0.122493E-01  -4.40228      -782.998       782.998       2362.57       3145.57    
  45  0.172311      -1.75846      -312.762       312.762       2118.68       2431.44    
  46  0.899580     -0.105827      -18.8225       18.8225       2207.10       2225.92    
  47  0.857845     -0.153332      -27.2719       27.2719       2197.36       2224.63    
  48  0.176813      -1.73266      -308.174       308.174       2745.11       3053.28    
  49  0.795271E-01  -2.53166      -450.285       450.285       2595.25       3045.54    
  50  0.461368     -0.773559      -137.587       137.587       2154.70       2292.29    
  51  0.727625     -0.317970      -56.5547       56.5547       2159.84       2216.39    
loop,thermsimp(1:2)       71   37.4122       90.3926    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183       2218.66          0.86          1.11         21.94          0.04          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184       2596.60          0.85          1.11         21.97          0.02          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2218.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       71
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       72
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      183     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -24.7020       24.7020       2144.24       2168.94    
   2  0.470451     -0.754063      -134.119       134.119       2106.11       2240.23    
   3  0.615627     -0.485114      -86.2834       86.2834       2127.07       2213.35    
   4  0.291899      -1.23135      -219.010       219.010       2099.93       2318.94    
   5  0.584822     -0.536448      -95.4137       95.4137       2166.48       2261.89    
   6  0.681731     -0.383120      -68.1425       68.1425       2126.88       2195.03    
   7  0.680149     -0.385444      -68.5557       68.5557       2136.16       2204.71    
   8  0.560478     -0.578966      -102.976       102.976       2159.84       2262.82    
   9  0.392299     -0.935730      -166.431       166.431       2210.66       2377.09    
  10  0.586793     -0.533083      -94.8151       94.8151       2197.36       2292.18    
  11  0.461418     -0.773452      -137.568       137.568       2207.10       2344.66    
  12  0.142886      -1.94571      -346.068       346.068       2095.32       2441.39    
  13  0.960325     -0.404831E-01  -7.20040       7.20040       2143.46       2150.66    
  14  0.547176     -0.602984      -107.248       107.248       2168.50       2275.74    
  15  0.817596     -0.201386      -35.8190       35.8190       2146.80       2182.62    
  16  0.184065      -1.69247      -301.025       301.025       2154.56       2455.59    
  17  0.763954     -0.269247      -47.8888       47.8888       2223.68       2271.57    
  18  0.740640     -0.300240      -53.4013       53.4013       2126.23       2179.63    
  19  0.257299      -1.35751      -241.450       241.450       2131.91       2373.36    
  20  0.274950      -1.29117      -229.649       229.649       2251.50       2481.15    
  21  0.850599     -0.161814      -28.7806       28.7806       2154.70       2183.48    
  22  0.265651      -1.32557      -235.769       235.769       2169.67       2405.43    
  23  0.388810     -0.944665      -168.020       168.020       2125.29       2293.31    
  24  0.921262     -0.820106E-01  -14.5866       14.5866       2194.93       2209.52    
  25  0.622168     -0.474545      -84.4035       84.4035       2277.66       2362.07    
  26  0.831499     -0.184526      -32.8201       32.8201       2230.32       2263.14    
  27  0.777776     -0.251317      -44.6997       44.6997       2190.57       2235.27    
  28  0.519638     -0.654624      -116.433       116.433       2297.60       2414.03    
  29  0.343480      -1.06863      -190.068       190.068       2145.14       2335.20    
  30  0.379182     -0.969738      -172.479       172.479       2289.32       2461.80    
  31  0.509964     -0.673415      -119.775       119.775       2284.45       2404.22    
  32  0.457294E-01  -3.08501      -548.706       548.706       2264.20       2812.90    
  33  0.952238     -0.489400E-01  -8.70456       8.70456       2396.44       2405.15    
  34  0.198116      -1.61890      -287.941       287.941       2144.67       2432.61    
  35  0.863922     -0.146273      -26.0164       26.0164       2131.28       2157.30    
  36  0.765944     -0.266646      -47.4262       47.4262       2130.73       2178.16    
  37  0.849389     -0.163238      -29.0339       29.0339       2118.68       2147.72    
  38  0.488339     -0.716745      -127.482       127.482       2245.22       2372.70    
  39  0.969632     -0.308388E-01  -5.48505       5.48505       2369.32       2374.81    
  40  0.971690     -0.287184E-01  -5.10790       5.10790       2302.72       2307.83    
  41  0.690522     -0.370307      -65.8635       65.8635       2244.85       2310.71    
  42  0.266028      -1.32415      -235.517       235.517       2433.63       2669.15    
  43  0.581296     -0.542495      -96.4892       96.4892       2249.11       2345.60    
  44  0.636654     -0.451529      -80.3098       80.3098       2127.03       2207.34    
  45  0.947680     -0.537383E-01  -9.55800       9.55800       2143.13       2152.69    
  46  0.792806     -0.232176      -41.2953       41.2953       2368.05       2409.34    
  47  0.420588     -0.866101      -154.046       154.046       2595.25       2749.30    
  48  0.780043     -0.248407      -44.1821       44.1821       2745.11       2789.29    
  49  0.834700E-01  -2.48327      -441.679       441.679       2362.57       2804.25    
  50  0.707823     -0.345562      -61.4623       61.4623       2371.49       2432.95    
  51  0.836500     -0.178529      -31.7535       31.7535       2218.66       2250.41    
loop,thermsimp(1:2)       72   24.7020       134.119    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       2082.78          0.86          1.12         21.95          0.04          0.06         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186       3250.86          0.84          1.12         21.92          0.04          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2082.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       72
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       73
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      185     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -53.0968       53.0968       2118.68       2171.78    
   2  0.823468     -0.194230      -34.5462       34.5462       2143.46       2178.01    
   3  0.352913      -1.04153      -185.249       185.249       2143.13       2328.38    
   4  0.268511      -1.31486      -233.864       233.864       2131.28       2365.15    
   5  0.137541      -1.98383      -352.848       352.848       2144.24       2497.09    
   6  0.953738     -0.473661E-01  -8.42463       8.42463       2130.73       2139.15    
   7  0.366602      -1.00348      -178.480       178.480       2126.23       2304.71    
   8  0.861530     -0.149046      -26.5096       26.5096       2146.80       2173.31    
   9  0.190086      -1.66028      -295.300       295.300       2154.70       2450.00    
  10  0.931621     -0.708293E-01  -12.5978       12.5978       2126.88       2139.48    
  11  0.135562      -1.99833      -355.426       355.426       2136.16       2491.58    
  12  0.577052     -0.549824      -97.7927       97.7927       2127.03       2224.82    
  13  0.937511     -0.645266E-01  -11.4768       11.4768       2194.93       2206.41    
  14  0.836727     -0.178258      -31.7052       31.7052       2127.07       2158.78    
  15  0.124731      -2.08159      -370.236       370.236       2190.57       2560.80    
  16  0.830758     -0.185417      -32.9786       32.9786       2106.11       2139.09    
  17  0.925849     -0.770442E-01  -13.7032       13.7032       2218.66       2232.36    
  18  0.945668     -0.558633E-01  -9.93596       9.93596       2166.48       2176.42    
  19  0.700762     -0.355587      -63.2454       63.2454       2159.84       2223.09    
  20  0.585168E-01  -2.83844      -504.850       504.850       2230.32       2735.17    
  21  0.241985      -1.41888      -252.365       252.365       2223.68       2476.05    
  22  0.426115     -0.853047      -151.724       151.724       2168.50       2320.22    
  23  0.730656     -0.313813      -55.8154       55.8154       2197.36       2253.18    
  24  0.227460      -1.48078      -263.375       263.375       2125.29       2388.66    
  25  0.824070     -0.193500      -34.4162       34.4162       2302.72       2337.14    
  26  0.912829     -0.912064E-01  -16.2221       16.2221       2244.85       2261.07    
  27  0.130860      -2.03363      -361.705       361.705       2099.93       2461.63    
  28  0.126999      -2.06358      -367.031       367.031       2145.14       2512.17    
  29  0.394828E-01  -3.23189      -574.830       574.830       2207.10       2781.92    
  30  0.927793     -0.749466E-01  -13.3301       13.3301       2249.11       2262.44    
  31  0.161762      -1.82163      -323.999       323.999       2277.66       2601.66    
  32  0.510374     -0.672611      -119.632       119.632       2245.22       2364.86    
  33  0.930607     -0.719186E-01  -12.7916       12.7916       2131.91       2144.70    
  34  0.825283E-01  -2.49461      -443.697       443.697       2369.32       2813.02    
  35  0.569143     -0.563624      -100.247       100.247       2210.66       2310.90    
  36  0.732951     -0.310676      -55.2575       55.2575       2284.45       2339.71    
  37  0.554950     -0.588877      -104.739       104.739       2396.44       2501.18    
  38  0.614368     -0.487160      -86.6473       86.6473       2169.67       2256.31    
  39  0.127889      -2.05659      -365.790       365.790       2368.05       2733.84    
  40  0.510007     -0.673330      -119.760       119.760       2297.60       2417.36    
  41  0.206107      -1.57936      -280.908       280.908       2144.67       2425.58    
  42  0.812962E-01  -2.50966      -446.372       446.372       2371.49       2817.86    
  43  0.711913     -0.339799      -60.4374       60.4374       2095.32       2155.76    
  44  0.649899     -0.430939      -76.6476       76.6476       2154.56       2231.21    
  45  0.102708      -2.27587      -404.790       404.790       2289.32       2694.11    
  46  0.152702      -1.87927      -334.250       334.250       2251.50       2585.75    
  47  0.827734     -0.189064      -33.6273       33.6273       2433.63       2467.26    
  48  0.558329     -0.582808      -103.659       103.659       2595.25       2698.91    
  49  0.174746      -1.74442      -310.266       310.266       2745.11       3055.37    
  50  0.107247      -2.23262      -397.099       397.099       2362.57       2759.67    
  51  0.988891     -0.111711E-01  -1.98691       1.98691       2082.78       2084.76    
loop,thermsimp(1:2)       73   53.0968       34.5462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       2087.11          0.85          1.12         21.98          0.02          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188       2235.86          0.85          1.12         21.90          0.07          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2087.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       73
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       74
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      187     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -31.8684       31.8684       2082.78       2114.64    
   2  0.439366     -0.822423      -146.278       146.278       2106.11       2252.39    
   3  0.603094     -0.505682      -89.9415       89.9415       2130.73       2220.67    
   4  0.695854E-01  -2.66520      -474.038       474.038       2126.88       2600.92    
   5  0.273021      -1.29821      -230.902       230.902       2131.91       2362.81    
   6  0.418319     -0.871511      -155.009       155.009       2095.32       2250.33    
   7  0.688437     -0.373331      -66.4014       66.4014       2127.07       2193.47    
   8  0.400930     -0.913969      -162.560       162.560       2118.68       2281.24    
   9  0.569492     -0.563010      -100.138       100.138       2146.80       2246.93    
  10  0.812441     -0.207712      -36.9440       36.9440       2166.48       2203.42    
  11  0.222094      -1.50465      -267.620       267.620       2143.46       2411.08    
  12  0.695761     -0.362749      -64.5193       64.5193       2194.93       2259.45    
  13  0.909536E-01  -2.39741      -426.407       426.407       2159.84       2586.25    
  14  0.297191      -1.21338      -215.814       215.814       2127.03       2342.85    
  15  0.806729     -0.214767      -38.1989       38.1989       2154.56       2192.76    
  16  0.407021     -0.898891      -159.878       159.878       2218.66       2378.54    
  17  0.520426     -0.653107      -116.163       116.163       2197.36       2313.52    
  18  0.826852     -0.190129      -33.8167       33.8167       2169.67       2203.48    
  19  0.729268     -0.315714      -56.1535       56.1535       2244.85       2301.00    
  20  0.344086      -1.06687      -189.755       189.755       2249.11       2438.86    
  21  0.280849      -1.26994      -225.874       225.874       2126.23       2352.10    
  22  0.301244E-01  -3.50242      -622.947       622.947       2210.66       2833.60    
  23  0.503253     -0.686663      -122.131       122.131       2168.50       2290.63    
  24  0.549007     -0.599644      -106.654       106.654       2143.13       2249.78    
  25  0.814230     -0.205513      -36.5529       36.5529       2302.72       2339.27    
  26  0.641489     -0.443963      -78.9641       78.9641       2284.45       2363.41    
  27  0.248696      -1.39152      -247.499       247.499       2245.22       2492.72    
  28  0.684472     -0.379107      -67.4287       67.4287       2131.28       2198.71    
  29  0.815126     -0.204413      -36.3572       36.3572       2125.29       2161.64    
  30  0.388210     -0.946208      -168.294       168.294       2297.60       2465.90    
  31  0.670538     -0.399675      -71.0869       71.0869       2144.67       2215.76    
  32  0.851104     -0.161221      -28.6750       28.6750       2154.70       2183.38    
  33  0.381078     -0.964752      -171.593       171.593       2099.93       2271.52    
  34  0.776256     -0.253273      -45.0476       45.0476       2433.63       2478.68    
  35  0.168040      -1.78355      -317.226       317.226       2223.68       2540.91    
  36  0.229069      -1.47373      -262.120       262.120       2136.16       2398.28    
  37  0.917563     -0.860337E-01  -15.3021       15.3021       2144.24       2159.54    
  38  0.161815      -1.82130      -323.940       323.940       2396.44       2720.38    
  39  0.355170      -1.03516      -184.115       184.115       2145.14       2329.25    
  40  0.221709      -1.50639      -267.929       267.929       2190.57       2458.50    
  41  0.424436     -0.856993      -152.426       152.426       2251.50       2403.93    
  42  0.337698      -1.08560      -193.087       193.087       2277.66       2470.75    
  43  0.574481     -0.554289      -98.5869       98.5869       2289.32       2387.91    
  44  0.614536     -0.486888      -86.5987       86.5987       2595.25       2681.85    
  45  0.345602      -1.06247      -188.973       188.973       2368.05       2557.02    
  46  0.330006      -1.10864      -197.186       197.186       2230.32       2427.50    
  47  0.934389     -0.678626E-01  -12.0702       12.0702       2362.57       2374.64    
  48  0.884466     -0.122771      -21.8363       21.8363       2207.10       2228.93    
  49  0.928979     -0.736686E-01  -13.1028       13.1028       2369.32       2382.43    
  50  0.788461     -0.237672      -42.2728       42.2728       2371.49       2413.76    
  51  0.963462     -0.372219E-01  -6.62036       6.62036       2087.11       2093.73    
loop,thermsimp(1:2)       74   31.8684       146.278    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189       2077.64          0.86          1.12         22.05          0.04          0.06         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190       3526.85          0.85          1.12         22.20          0.02          0.05         24.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2077.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       74
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       75
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      189     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -174.558       174.558       2087.11       2261.67    
   2  0.269095      -1.31269      -233.478       233.478       2082.78       2316.25    
   3  0.301960      -1.19746      -212.982       212.982       2144.24       2357.22    
   4  0.927593     -0.751619E-01  -13.3684       13.3684       2125.29       2138.66    
   5  0.783450     -0.244048      -43.4068       43.4068       2154.70       2198.11    
   6  0.716705     -0.333091      -59.2442       59.2442       2154.56       2213.81    
   7  0.728578     -0.316661      -56.3219       56.3219       2127.07       2183.39    
   8  0.752541     -0.284300      -50.5661       50.5661       2131.28       2181.85    
   9  0.111710      -2.19185      -389.846       389.846       2166.48       2556.33    
  10  0.202752E-01  -3.89836      -693.369       693.369       2169.67       2863.03    
  11  0.967738     -0.327937E-01  -5.83275       5.83275       2144.67       2150.50    
  12  0.530869     -0.633240      -112.629       112.629       2130.73       2243.36    
  13  0.752699E-01  -2.58668      -460.071       460.071       2207.10       2667.17    
  14  0.658334     -0.418043      -74.3539       74.3539       2146.80       2221.15    
  15  0.383542     -0.958305      -170.446       170.446       2143.13       2313.58    
  16  0.280803      -1.27010      -225.903       225.903       2095.32       2321.23    
  17  0.976909     -0.233616E-01  -4.15513       4.15513       2106.11       2110.27    
  18  0.611898     -0.491189      -87.3638       87.3638       2194.93       2282.29    
  19  0.860469     -0.150278      -26.7288       26.7288       2099.93       2126.65    
  20  0.375446     -0.979641      -174.241       174.241       2118.68       2292.92    
  21  0.964573     -0.360702E-01  -6.41551       6.41551       2168.50       2174.91    
  22  0.865663     -0.144259      -25.6582       25.6582       2244.85       2270.51    
  23  0.498009     -0.697137      -123.994       123.994       2197.36       2321.35    
  24  0.732547     -0.311228      -55.3556       55.3556       2145.14       2200.49    
  25  0.293766      -1.22497      -217.876       217.876       2302.72       2520.59    
  26  0.805097     -0.216793      -38.5592       38.5592       2127.03       2165.59    
  27  0.236791      -1.44058      -256.224       256.224       2126.23       2382.45    
  28  0.759809     -0.274688      -48.8566       48.8566       2131.91       2180.77    
  29  0.279804      -1.27367      -226.536       226.536       2284.45       2510.98    
  30  0.862550     -0.147862      -26.2991       26.2991       2362.57       2388.87    
  31  0.784800     -0.242327      -43.1006       43.1006       2218.66       2261.76    
  32  0.231425      -1.46350      -260.301       260.301       2369.32       2629.62    
  33  0.839725     -0.174681      -31.0691       31.0691       2289.32       2320.39    
  34  0.204862      -1.58542      -281.986       281.986       2136.16       2418.14    
  35  0.741170     -0.299525      -53.2741       53.2741       2251.50       2304.78    
  36  0.838703     -0.175898      -31.2856       31.2856       2143.46       2174.74    
  37  0.287711      -1.24580      -221.580       221.580       2371.49       2593.07    
  38  0.937479     -0.645611E-01  -11.4830       11.4830       2230.32       2241.80    
  39  0.188655      -1.66783      -296.644       296.644       2249.11       2545.75    
  40  0.818317     -0.200505      -35.6622       35.6622       2190.57       2226.23    
  41  0.903487     -0.101493      -18.0518       18.0518       2297.60       2315.65    
  42  0.148828      -1.90496      -338.821       338.821       2277.66       2616.49    
  43  0.573616E-01  -2.85838      -508.397       508.397       2433.63       2942.03    
  44  0.792726E-01  -2.53486      -450.855       450.855       2245.22       2696.08    
  45  0.150401      -1.89445      -336.951       336.951       2223.68       2560.63    
  46  0.511444     -0.670518      -119.260       119.260       2368.05       2487.31    
  47  0.179810      -1.71585      -305.185       305.185       2159.84       2465.02    
  48  0.167282      -1.78808      -318.031       318.031       2126.88       2444.91    
  49  0.589016     -0.529302      -94.1426       94.1426       2595.25       2689.39    
  50  0.974997     -0.253206E-01  -4.50358       4.50358       2396.44       2400.95    
  51  0.750240     -0.287363      -51.1108       51.1108       2077.64       2128.75    
loop,thermsimp(1:2)       75   174.558       233.478    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       2251.83          0.85          1.11         22.00          0.06          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2251.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       75
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       76
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      190     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -533.794       533.794       2106.11       2639.91    
   2  0.604222     -0.503814      -89.6093       89.6093       2099.93       2189.53    
   3  0.106168      -2.24273      -398.896       398.896       2077.64       2476.54    
   4  0.342113      -1.07261      -190.777       190.777       2125.29       2316.06    
   5  0.473442     -0.747725      -132.992       132.992       2144.67       2277.66    
   6  0.100866E-01  -4.59655      -817.551       817.551       2127.03       2944.58    
   7  0.911848     -0.922817E-01  -16.4134       16.4134       2143.46       2159.87    
   8  0.633547     -0.456421      -81.1798       81.1798       2168.50       2249.67    
   9  0.729024     -0.316048      -56.2129       56.2129       2131.91       2188.12    
  10  0.620163     -0.477772      -84.9775       84.9775       2131.28       2216.26    
  11  0.867018     -0.142695      -25.3800       25.3800       2127.07       2152.45    
  12  0.969344E-01  -2.33372      -415.080       415.080       2154.70       2569.78    
  13  0.358466      -1.02592      -182.472       182.472       2145.14       2327.61    
  14  0.953168     -0.479638E-01  -8.53092       8.53092       2154.56       2163.09    
  15  0.684510     -0.379052      -67.4189       67.4189       2146.80       2214.22    
  16  0.482047     -0.729713      -129.788       129.788       2190.57       2320.36    
  17  0.974791     -0.255318E-01  -4.54114       4.54114       2230.32       2234.86    
  18  0.978669     -0.215619E-01  -3.83505       3.83505       2130.73       2134.57    
  19  0.929785     -0.728022E-01  -12.9487       12.9487       2087.11       2100.06    
  20  0.715020     -0.335444      -59.6627       59.6627       2218.66       2278.32    
  21  0.598247     -0.513752      -91.3769       91.3769       2244.85       2336.23    
  22  0.107080      -2.23418      -397.376       397.376       2194.93       2592.30    
  23  0.559093     -0.581439      -103.416       103.416       2118.68       2222.10    
  24  0.933094     -0.692491E-01  -12.3168       12.3168       2251.50       2263.82    
  25  0.470169E-01  -3.05725      -543.768       543.768       2143.13       2686.90    
  26  0.166768      -1.79115      -318.578       318.578       2297.60       2616.18    
  27  0.331277      -1.10480      -196.502       196.502       2082.78       2279.28    
  28  0.961755     -0.389952E-01  -6.93577       6.93577       2289.32       2296.26    
  29  0.464366E-01  -3.06967      -545.977       545.977       2095.32       2641.30    
  30  0.966136E-03  -6.94221      -1234.75       1234.75       2197.36       3432.11    
  31  0.941012     -0.607999E-01  -10.8140       10.8140       2144.24       2155.05    
  32  0.201947E-01  -3.90233      -694.076       694.076       2126.23       2820.31    
  33  0.679249     -0.386768      -68.7913       68.7913       2362.57       2431.37    
  34  0.318772      -1.14328      -203.346       203.346       2396.44       2599.79    
  35  0.388100     -0.946493      -168.345       168.345       2136.16       2304.50    
  36  0.658606     -0.417629      -74.2803       74.2803       2126.88       2201.16    
  37  0.774362     -0.255715      -45.4820       45.4820       2159.84       2205.32    
  38  0.704871     -0.349740      -62.2054       62.2054       2368.05       2430.25    
  39  0.274189      -1.29394      -230.142       230.142       2284.45       2514.59    
  40  0.881806     -0.125783      -22.3720       22.3720       2302.72       2325.09    
  41  0.198448      -1.61723      -287.643       287.643       2249.11       2536.75    
  42  0.342590      -1.07122      -190.529       190.529       2166.48       2357.01    
  43  0.603787     -0.504534      -89.7374       89.7374       2223.68       2313.42    
  44  0.667409     -0.404353      -71.9190       71.9190       2371.49       2443.41    
  45  0.317014      -1.14881      -204.329       204.329       2277.66       2481.99    
  46  0.368458     -0.998429      -177.582       177.582       2369.32       2546.90    
  47  0.139912      -1.96674      -349.809       349.809       2207.10       2556.90    
  48  0.537645     -0.620557      -110.374       110.374       2595.25       2705.62    
  49  0.159021      -1.83872      -327.038       327.038       2245.22       2572.26    
  50  0.729011     -0.316067      -56.2163       56.2163       2169.67       2225.88    
  51  0.802486     -0.220041      -39.1370       39.1370       2251.83       2290.97    
loop,thermsimp(1:2)       76   533.794       89.6093    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192       2129.29          0.86          1.12         21.99          0.00          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193       2463.55          0.84          1.12         21.93          0.04          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2129.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       76
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       77
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      192     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -91.8191       91.8191       2087.11       2178.93    
   2  0.476930     -0.740385      -131.686       131.686       2130.73       2262.42    
   3  0.845382     -0.167966      -29.8748       29.8748       2127.07       2156.95    
   4  0.397814     -0.921770      -163.948       163.948       2144.24       2308.19    
   5  0.249923      -1.38660      -246.624       246.624       2143.46       2390.08    
   6  0.591552     -0.525005      -93.3784       93.3784       2154.56       2247.94    
   7  0.143111      -1.94414      -345.788       345.788       2131.91       2477.70    
   8  0.306099      -1.18385      -210.561       210.561       2099.93       2310.49    
   9  0.441827     -0.816836      -145.284       145.284       2126.88       2272.17    
  10  0.504521     -0.684146      -121.684       121.684       2159.84       2281.52    
  11  0.127660      -2.05839      -366.109       366.109       2146.80       2512.91    
  12  0.333524      -1.09804      -195.300       195.300       2131.28       2326.58    
  13  0.130890      -2.03340      -361.664       361.664       2118.68       2480.35    
  14  0.307732      -1.17853      -209.615       209.615       2169.67       2379.28    
  15  0.154434E-01  -4.17057      -741.786       741.786       2230.32       2972.10    
  16  0.357863      -1.02761      -182.772       182.772       2168.50       2351.27    
  17  0.271898      -1.30233      -231.634       231.634       2251.50       2483.14    
  18  0.906228E-01  -2.40105      -427.055       427.055       2144.67       2571.73    
  19  0.344142      -1.06670      -189.725       189.725       2218.66       2408.38    
  20  0.392886     -0.934237      -166.165       166.165       2082.78       2248.94    
  21  0.454318     -0.788958      -140.326       140.326       2251.83       2392.16    
  22  0.384129     -0.956778      -170.174       170.174       2289.32       2459.50    
  23  0.354037      -1.03835      -184.683       184.683       2136.16       2320.84    
  24  0.154212      -1.86943      -332.500       332.500       2223.68       2556.18    
  25  0.816320     -0.202949      -36.0969       36.0969       2125.29       2161.38    
  26  0.994970     -0.504291E-02 -0.896941      0.896941       2190.57       2191.46    
  27  0.374719E-01  -3.28416      -584.128       584.128       2302.72       2886.85    
  28  0.227113      -1.48231      -263.646       263.646       2145.14       2408.78    
  29  0.410587     -0.890167      -158.327       158.327       2244.85       2403.18    
  30  0.104540E-01  -4.56077      -811.187       811.187       2166.48       2977.67    
  31  0.994826     -0.518730E-02 -0.922622      0.922622       2368.05       2368.97    
  32  0.738930     -0.302553      -53.8126       53.8126       2362.57       2416.39    
  33  0.715904     -0.334209      -59.4430       59.4430       2371.49       2430.93    
  34  0.128324      -2.05320      -365.186       365.186       2077.64       2442.83    
  35  0.856095     -0.155374      -27.6350       27.6350       2277.66       2305.30    
  36  0.423967     -0.858099      -152.623       152.623       2284.45       2437.07    
  37  0.504650     -0.683890      -121.638       121.638       2249.11       2370.75    
  38  0.347036      -1.05833      -188.236       188.236       2369.32       2557.56    
  39  0.906779     -0.978566E-01  -17.4049       17.4049       2207.10       2224.50    
  40  0.616911     -0.483030      -85.9127       85.9127       2154.70       2240.62    
  41  0.540209     -0.615800      -109.527       109.527       2245.22       2354.75    
  42  0.772932     -0.257564      -45.8108       45.8108       2194.93       2240.74    
  43  0.544989     -0.606989      -107.960       107.960       2396.44       2504.40    
  44  0.951523     -0.496917E-01  -8.83827       8.83827       2297.60       2306.44    
  45  0.172505      -1.75733      -312.562       312.562       2106.11       2418.67    
  46  0.871391     -0.137665      -24.4853       24.4853       2095.32       2119.81    
  47  0.127604      -2.05882      -366.186       366.186       2143.13       2509.32    
  48  0.785934     -0.240882      -42.8438       42.8438       2595.25       2638.09    
  49  0.815977     -0.203369      -36.1716       36.1716       2126.23       2162.40    
  50  0.350587      -1.04815      -186.425       186.425       2127.03       2313.46    
  51  0.739645     -0.301584      -53.6404       53.6404       2129.29       2182.93    
loop,thermsimp(1:2)       77   91.8191       131.686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       2159.77          0.85          1.12         21.92          0.05          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2159.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       77
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       78
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      193     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -10.6492       10.6492       2095.32       2105.97    
   2  0.368209     -0.999105      -177.703       177.703       2127.07       2304.77    
   3  0.508630     -0.676034      -120.241       120.241       2125.29       2245.53    
   4  0.744324     -0.295279      -52.5189       52.5189       2126.23       2178.75    
   5  0.401586     -0.912333      -162.269       162.269       2087.11       2249.38    
   6  0.712794     -0.338563      -60.2175       60.2175       2129.29       2189.51    
   7  0.186976      -1.67678      -298.234       298.234       2190.57       2488.80    
   8  0.688451     -0.373311      -66.3979       66.3979       2207.10       2273.49    
   9  0.668652     -0.402492      -71.5880       71.5880       2154.70       2226.29    
  10  0.656767     -0.420426      -74.7778       74.7778       2194.93       2269.71    
  11  0.853336     -0.158602      -28.2093       28.2093       2154.56       2182.77    
  12  0.556440     -0.586195      -104.262       104.262       2082.78       2187.04    
  13  0.258558E-01  -3.65522      -650.124       650.124       2130.73       2780.85    
  14  0.121003E-01  -4.41452      -785.175       785.175       2126.88       2912.06    
  15  0.150890      -1.89120      -336.373       336.373       2159.84       2496.21    
  16  0.820074     -0.198360      -35.2808       35.2808       2277.66       2312.95    
  17  0.151452      -1.88748      -335.711       335.711       2297.60       2633.31    
  18  0.305465      -1.18592      -210.930       210.930       2144.24       2355.17    
  19  0.533202     -0.628854      -111.849       111.849       2099.93       2211.77    
  20  0.143416      -1.94201      -345.409       345.409       2127.03       2472.44    
  21  0.687081     -0.375303      -66.7520       66.7520       2136.16       2202.91    
  22  0.546247     -0.604685      -107.550       107.550       2131.28       2238.84    
  23  0.356987      -1.03006      -183.208       183.208       2168.50       2351.70    
  24  0.545718     -0.605653      -107.723       107.723       2245.22       2352.95    
  25  0.789688     -0.236117      -41.9962       41.9962       2368.05       2410.04    
  26  0.752086     -0.284904      -50.6736       50.6736       2249.11       2299.78    
  27  0.388816     -0.944650      -168.017       168.017       2169.67       2337.68    
  28  0.988428     -0.116395E-01  -2.07023       2.07023       2143.46       2145.53    
  29  0.124991      -2.07952      -369.867       369.867       2251.83       2621.70    
  30  0.568214     -0.565257      -100.538       100.538       2244.85       2345.39    
  31  0.551032     -0.595962      -105.999       105.999       2218.66       2324.66    
  32  0.423622     -0.858913      -152.768       152.768       2145.14       2297.90    
  33  0.647554     -0.434553      -77.2905       77.2905       2362.57       2439.86    
  34  0.686255     -0.376506      -66.9661       66.9661       2106.11       2173.08    
  35  0.548072     -0.601349      -106.957       106.957       2371.49       2478.45    
  36  0.880777     -0.126951      -22.5797       22.5797       2284.45       2307.03    
  37  0.894918     -0.111023      -19.7467       19.7467       2077.64       2097.39    
  38  0.241077      -1.42264      -253.033       253.033       2289.32       2542.36    
  39  0.546141     -0.604877      -107.585       107.585       2131.91       2239.50    
  40  0.266590      -1.32204      -235.141       235.141       2118.68       2353.82    
  41  0.575085     -0.553238      -98.4000       98.4000       2251.50       2349.90    
  42  0.907139     -0.974596E-01  -17.3344       17.3344       2396.44       2413.78    
  43  0.469109     -0.756920      -134.627       134.627       2143.13       2277.76    
  44  0.738008     -0.303801      -54.0346       54.0346       2146.80       2200.83    
  45  0.557598     -0.584116      -103.892       103.892       2223.68       2327.58    
  46  0.305677      -1.18523      -210.806       210.806       2369.32       2580.13    
  47  0.392927     -0.934131      -166.146       166.146       2144.67       2310.82    
  48  0.121997      -2.10376      -374.178       374.178       2595.25       2969.43    
  49  0.712082     -0.339563      -60.3953       60.3953       2302.72       2363.11    
  50  0.342132      -1.07256      -190.767       190.767       2230.32       2421.08    
  51  0.288307      -1.24373      -221.212       221.212       2159.77       2380.98    
loop,thermsimp(1:2)       78   10.6492       177.703    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195       2299.85          0.86          1.12         21.92          0.04          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2299.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       78
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       79
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      194     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -470.753       470.753       2077.64       2548.39    
   2  0.952063     -0.491245E-01  -8.73737       8.73737       2095.32       2104.06    
   3  0.207928      -1.57057      -279.344       279.344       2143.46       2422.80    
   4  0.564009     -0.572686      -101.859       101.859       2106.11       2207.97    
   5  0.461636     -0.772979      -137.483       137.483       2126.23       2263.71    
   6  0.683812     -0.380072      -67.6002       67.6002       2154.56       2222.16    
   7  0.153569      -1.87360      -333.242       333.242       2082.78       2416.02    
   8  0.605650     -0.501453      -89.1894       89.1894       2129.29       2218.48    
   9  0.257296      -1.35753      -241.453       241.453       2146.80       2388.25    
  10  0.517987     -0.657805      -116.998       116.998       2136.16       2253.16    
  11  0.571129     -0.560140      -99.6276       99.6276       2099.93       2199.55    
  12  0.735134     -0.307703      -54.7286       54.7286       2154.70       2209.43    
  13  0.766340E-02  -4.87130      -866.419       866.419       2131.28       2997.70    
  14  0.435932     -0.830269      -147.673       147.673       2131.91       2279.58    
  15  0.513945     -0.665639      -118.392       118.392       2125.29       2243.68    
  16  0.447046     -0.805095      -143.196       143.196       2087.11       2230.30    
  17  0.244813      -1.40726      -250.298       250.298       2194.93       2445.23    
  18  0.183933      -1.69318      -301.153       301.153       2207.10       2508.25    
  19  0.413164     -0.883910      -157.214       157.214       2143.13       2300.34    
  20  0.869613     -0.139707      -24.8486       24.8486       2145.14       2169.98    
  21  0.853260     -0.158691      -28.2250       28.2250       2249.11       2277.33    
  22  0.138067      -1.98001      -352.169       352.169       2127.07       2479.24    
  23  0.940528     -0.613134E-01  -10.9053       10.9053       2284.45       2295.35    
  24  0.694939     -0.363931      -64.7295       64.7295       2144.67       2209.40    
  25  0.962776     -0.379346E-01  -6.74712       6.74712       2277.66       2284.41    
  26  0.378266     -0.972158      -172.910       172.910       2218.66       2391.57    
  27  0.855922     -0.155576      -27.6710       27.6710       2223.68       2251.35    
  28  0.393452     -0.932797      -165.909       165.909       2169.67       2335.57    
  29  0.253590      -1.37204      -244.033       244.033       2244.85       2488.88    
  30  0.777948     -0.251096      -44.6604       44.6604       2251.50       2296.16    
  31  0.654890     -0.423288      -75.2869       75.2869       2168.50       2243.78    
  32  0.690016E-01  -2.67363      -475.536       475.536       2245.22       2720.76    
  33  0.101034      -2.29229      -407.712       407.712       2118.68       2526.39    
  34  0.684533     -0.379019      -67.4130       67.4130       2144.24       2211.65    
  35  0.592603     -0.523230      -93.0627       93.0627       2302.72       2395.78    
  36  0.904830     -0.100009      -17.7877       17.7877       2159.77       2177.56    
  37  0.400244     -0.915681      -162.865       162.865       2368.05       2530.91    
  38  0.698191     -0.359263      -63.8992       63.8992       2396.44       2460.34    
  39  0.551449E-01  -2.89779      -515.407       515.407       2230.32       2745.72    
  40  0.500493     -0.692161      -123.109       123.109       2362.57       2485.68    
  41  0.289592      -1.23928      -220.421       220.421       2127.03       2347.45    
  42  0.447163     -0.804833      -143.149       143.149       2371.49       2514.64    
  43  0.690940     -0.369702      -65.7558       65.7558       2190.57       2256.32    
  44  0.631068     -0.460341      -81.8771       81.8771       2159.84       2241.72    
  45  0.926041     -0.768363E-01  -13.6662       13.6662       2289.32       2302.99    
  46  0.436187     -0.829684      -147.569       147.569       2369.32       2516.89    
  47  0.314139      -1.15792      -205.950       205.950       2251.83       2457.78    
  48  0.363110      -1.01305      -180.183       180.183       2297.60       2477.78    
  49  0.446982     -0.805238      -143.221       143.221       2130.73       2273.95    
  50  0.541529     -0.613360      -109.093       109.093       2126.88       2235.98    
  51  0.415529     -0.878202      -156.199       156.199       2299.85       2456.05    
loop,thermsimp(1:2)       79   470.753       8.73737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       2336.36          0.86          1.10         21.86          0.19          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2336.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       79
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       80
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      195     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -71.6484       71.6484       2095.32       2166.97    
   2  0.238500      -1.43339      -254.945       254.945       2145.14       2400.08    
   3  0.689211     -0.372208      -66.2017       66.2017       2159.77       2225.97    
   4  0.540774     -0.614753      -109.341       109.341       2099.93       2209.27    
   5  0.178857      -1.72117      -306.131       306.131       2106.11       2412.24    
   6  0.884253     -0.123012      -21.8792       21.8792       2144.67       2166.55    
   7  0.755546     -0.280314      -49.8572       49.8572       2154.70       2204.56    
   8  0.654086E-01  -2.72710      -485.047       485.047       2144.24       2629.29    
   9  0.802958     -0.219452      -39.0322       39.0322       2129.29       2168.32    
  10  0.840665     -0.173562      -30.8700       30.8700       2154.56       2185.43    
  11  0.864930     -0.145107      -25.8089       25.8089       2087.11       2112.92    
  12  0.728243     -0.317120      -56.4036       56.4036       2126.88       2183.29    
  13  0.453086     -0.791672      -140.808       140.808       2159.84       2300.65    
  14  0.702549E-01  -2.65563      -472.335       472.335       2125.29       2597.62    
  15  0.610595     -0.493321      -87.7431       87.7431       2168.50       2256.24    
  16  0.728410E-02  -4.92206      -875.447       875.447       2223.68       3099.13    
  17  0.913763     -0.901841E-01  -16.0403       16.0403       2136.16       2152.20    
  18  0.165001      -1.80180      -320.472       320.472       2190.57       2511.04    
  19  0.917747E-01  -2.38842      -424.809       424.809       2126.23       2551.04    
  20  0.338507      -1.08321      -192.662       192.662       2130.73       2323.39    
  21  0.357666      -1.02815      -182.869       182.869       2249.11       2431.98    
  22  0.389441     -0.943044      -167.732       167.732       2131.91       2299.64    
  23  0.879897     -0.127950      -22.7574       22.7574       2277.66       2300.42    
  24  0.418897     -0.870129      -154.763       154.763       2284.45       2439.21    
  25  0.838426     -0.176230      -31.3445       31.3445       2251.50       2282.85    
  26  0.185169      -1.68649      -299.961       299.961       2143.13       2443.09    
  27  0.200952      -1.60469      -285.413       285.413       2289.32       2574.74    
  28  0.877256     -0.130957      -23.2922       23.2922       2169.67       2192.96    
  29  0.386592     -0.950385      -169.037       169.037       2127.03       2296.07    
  30  0.888706     -0.117988      -20.9856       20.9856       2146.80       2167.78    
  31  0.105408      -2.24991      -400.174       400.174       2218.66       2618.83    
  32  0.994268     -0.574873E-02  -1.02248       1.02248       2302.72       2303.74    
  33  0.764077     -0.269087      -47.8603       47.8603       2082.78       2130.64    
  34  0.812108     -0.208121      -37.0169       37.0169       2143.46       2180.48    
  35  0.121669      -2.10645      -374.658       374.658       2194.93       2569.59    
  36  0.637909     -0.449559      -79.9594       79.9594       2299.85       2379.81    
  37  0.316007E-02  -5.75716      -1023.98       1023.98       2251.83       3275.81    
  38  0.229677      -1.47108      -261.649       261.649       2396.44       2658.09    
  39  0.521374     -0.651288      -115.839       115.839       2297.60       2413.44    
  40  0.391402     -0.938019      -166.838       166.838       2127.07       2293.91    
  41  0.327357      -1.11670      -198.619       198.619       2362.57       2561.19    
  42  0.963139     -0.375576E-01  -6.68007       6.68007       2244.85       2251.53    
  43  0.174261      -1.74720      -310.760       310.760       2207.10       2517.86    
  44  0.331602      -1.10382      -196.327       196.327       2371.49       2567.82    
  45  0.526338     -0.641812      -114.154       114.154       2369.32       2483.48    
  46  0.413265     -0.883667      -157.171       157.171       2118.68       2275.85    
  47  0.541510E-02  -5.21856      -928.184       928.184       2368.05       3296.23    
  48  0.781613     -0.246396      -43.8244       43.8244       2077.64       2121.47    
  49  0.656825     -0.420337      -74.7620       74.7620       2245.22       2319.99    
  50  0.584791     -0.536501      -95.4231       95.4231       2230.32       2325.74    
  51  0.811204     -0.209236      -37.2151       37.2151       2336.36       2373.57    
loop,thermsimp(1:2)       80   71.6484       254.945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197       2090.77          0.86          1.12         21.96          0.00          0.05         23.98
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198       2116.58          0.86          1.12         21.99          0.03          0.05         24.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2090.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       80
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       81
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      197     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -232.865       232.865       2087.11       2319.97    
   2  0.879265     -0.128669      -22.8852       22.8852       2077.64       2100.53    
   3  0.684902     -0.378479      -67.3170       67.3170       2082.78       2150.09    
   4  0.893896     -0.112166      -19.9500       19.9500       2136.16       2156.11    
   5  0.476761     -0.740739      -131.749       131.749       2144.67       2276.42    
   6  0.755167     -0.280817      -49.9466       49.9466       2095.32       2145.27    
   7  0.452407     -0.793173      -141.075       141.075       2146.80       2287.87    
   8  0.723906     -0.323093      -57.4660       57.4660       2129.29       2186.76    
   9  0.451260     -0.795711      -141.527       141.527       2143.46       2284.99    
  10  0.668265     -0.403071      -71.6910       71.6910       2126.88       2198.57    
  11  0.777249     -0.251995      -44.8203       44.8203       2154.56       2199.38    
  12  0.342240      -1.07224      -190.711       190.711       2169.67       2360.38    
  13  0.639156     -0.447606      -79.6121       79.6121       2154.70       2234.32    
  14  0.166924      -1.79022      -318.412       318.412       2099.93       2418.34    
  15  0.375260     -0.980137      -174.329       174.329       2159.77       2334.10    
  16  0.299730      -1.20487      -214.301       214.301       2244.85       2459.15    
  17  0.407119     -0.898650      -159.836       159.836       2168.50       2328.33    
  18  0.762992E-01  -2.57309      -457.655       457.655       2118.68       2576.34    
  19  0.281066      -1.26917      -225.736       225.736       2251.50       2477.24    
  20  0.220512      -1.51180      -268.892       268.892       2127.07       2395.96    
  21  0.389846     -0.942004      -167.547       167.547       2127.03       2294.58    
  22  0.660048     -0.415443      -73.8915       73.8915       2131.91       2205.80    
  23  0.150026      -1.89695      -337.395       337.395       2277.66       2615.06    
  24  0.113767      -2.17360      -386.600       386.600       2159.84       2546.44    
  25  0.810589     -0.209994      -37.3499       37.3499       2302.72       2340.07    
  26  0.247911      -1.39468      -248.061       248.061       2245.22       2493.28    
  27  0.408875     -0.894345      -159.070       159.070       2130.73       2289.80    
  28  0.310528      -1.16948      -208.006       208.006       2230.32       2438.32    
  29  0.663027     -0.410939      -73.0905       73.0905       2336.36       2409.45    
  30  0.798362     -0.225193      -40.0532       40.0532       2299.85       2339.90    
  31  0.564885     -0.571133      -101.583       101.583       2145.14       2246.72    
  32  0.473510E-02  -5.35275      -952.051       952.051       2106.11       3058.16    
  33  0.933475E-01  -2.37143      -421.786       421.786       2297.60       2719.39    
  34  0.931702     -0.707423E-01  -12.5824       12.5824       2249.11       2261.69    
  35  0.341741      -1.07370      -190.971       190.971       2284.45       2475.42    
  36  0.171330      -1.76417      -313.778       313.778       2143.13       2456.91    
  37  0.355860      -1.03322      -183.770       183.770       2369.32       2553.09    
  38  0.469639     -0.755790      -134.426       134.426       2190.57       2324.99    
  39  0.805376     -0.216446      -38.4974       38.4974       2207.10       2245.59    
  40  0.651615     -0.428301      -76.1785       76.1785       2126.23       2202.41    
  41  0.126831      -2.06490      -367.266       367.266       2362.57       2729.84    
  42  0.715737     -0.334442      -59.4845       59.4845       2371.49       2430.98    
  43  0.444007     -0.811915      -144.409       144.409       2194.93       2339.34    
  44  0.887105     -0.119791      -21.3063       21.3063       2289.32       2310.63    
  45  0.492139     -0.708993      -126.103       126.103       2125.29       2251.39    
  46  0.590315     -0.527098      -93.7507       93.7507       2218.66       2312.41    
  47  0.313130      -1.16114      -206.522       206.522       2144.24       2350.76    
  48  0.824070     -0.193500      -34.4163       34.4163       2396.44       2430.86    
  49  0.785026     -0.242039      -43.0495       43.0495       2223.68       2266.73    
  50  0.105781      -2.24638      -399.545       399.545       2251.83       2651.38    
  51  0.644933     -0.438608      -78.0117       78.0117       2090.77       2168.78    
loop,thermsimp(1:2)       81   232.865       22.8852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199       2278.68          0.86          1.12         22.23          0.00          0.05         24.25
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200       2516.50          0.86          1.12         22.03          0.06          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2278.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       81
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       82
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      199     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -772.401       772.401       2077.64       2850.04    
   2  0.906957E-01  -2.40025      -426.912       426.912       2095.32       2522.24    
   3  0.973677     -0.266758E-01  -4.74462       4.74462       2082.78       2087.52    
   4  0.764409     -0.268653      -47.7830       47.7830       2136.16       2183.94    
   5  0.647718     -0.434300      -77.2454       77.2454       2090.77       2168.02    
   6  0.450945     -0.796410      -141.651       141.651       2129.29       2270.94    
   7  0.342138      -1.07254      -190.764       190.764       2126.88       2317.65    
   8  0.491560     -0.710170      -126.312       126.312       2154.56       2280.87    
   9  0.728901     -0.316218      -56.2431       56.2431       2126.23       2182.47    
  10  0.361124      -1.01853      -181.158       181.158       2131.91       2313.07    
  11  0.187026      -1.67651      -298.187       298.187       2154.70       2452.89    
  12  0.560514     -0.578901      -102.964       102.964       2207.10       2310.06    
  13  0.218776      -1.51971      -270.298       270.298       2145.14       2415.43    
  14  0.109271      -2.21392      -393.772       393.772       2125.29       2519.06    
  15  0.263420E-01  -3.63659      -646.811       646.811       2249.11       2895.92    
  16  0.654642     -0.423667      -75.3542       75.3542       2223.68       2299.04    
  17  0.975959     -0.243343E-01  -4.32814       4.32814       2144.67       2149.00    
  18  0.107212      -2.23295      -397.156       397.156       2143.46       2540.62    
  19  0.972340     -0.280494E-01  -4.98892       4.98892       2146.80       2151.79    
  20  0.259158      -1.35032      -240.170       240.170       2130.73       2370.90    
  21  0.889970     -0.116568      -20.7329       20.7329       2127.03       2147.76    
  22  0.956672     -0.442943E-01  -7.87826       7.87826       2289.32       2297.20    
  23  0.299261      -1.20644      -214.579       214.579       2218.66       2433.24    
  24  0.114836      -2.16425      -384.937       384.937       2087.11       2472.05    
  25  0.728848     -0.316291      -56.2561       56.2561       2190.57       2246.82    
  26  0.650336     -0.430267      -76.5280       76.5280       2168.50       2245.02    
  27  0.816983     -0.202137      -35.9525       35.9525       2159.77       2195.72    
  28  0.507860     -0.677550      -120.510       120.510       2194.93       2315.44    
  29  0.920661     -0.826634E-01  -14.7027       14.7027       2299.85       2314.55    
  30  0.253772      -1.37132      -243.906       243.906       2302.72       2546.62    
  31  0.667512     -0.404198      -71.8913       71.8913       2144.24       2216.13    
  32  0.772715     -0.257844      -45.8607       45.8607       2169.67       2215.53    
  33  0.757620     -0.277573      -49.3697       49.3697       2127.07       2176.44    
  34  0.776421     -0.253060      -45.0098       45.0098       2336.36       2381.36    
  35  0.886642     -0.120314      -21.3993       21.3993       2099.93       2121.32    
  36  0.238693E-01  -3.73516      -664.343       664.343       2396.44       3060.78    
  37  0.303957      -1.19087      -211.810       211.810       2371.49       2583.30    
  38  0.875267     -0.133226      -23.6959       23.6959       2230.32       2254.01    
  39  0.144246      -1.93624      -344.383       344.383       2143.13       2487.51    
  40  0.993963     -0.605564E-02  -1.07707       1.07707       2244.85       2245.93    
  41  0.172168      -1.75928      -312.909       312.909       2284.45       2597.36    
  42  0.979713     -0.204952E-01  -3.64532       3.64532       2251.50       2255.15    
  43  0.938694     -0.632658E-01  -11.2526       11.2526       2245.22       2256.48    
  44  0.716061     -0.333990      -59.4041       59.4041       2159.84       2219.24    
  45  0.764601     -0.268402      -47.7384       47.7384       2369.32       2417.06    
  46  0.546951     -0.603396      -107.321       107.321       2118.68       2226.00    
  47  0.104442      -2.25912      -401.811       401.811       2277.66       2679.48    
  48  0.669980     -0.400508      -71.2350       71.2350       2251.83       2323.07    
  49  0.255048      -1.36630      -243.013       243.013       2297.60       2540.62    
  50  0.761153     -0.272921      -48.5422       48.5422       2362.57       2411.12    
  51  0.273269      -1.29730      -230.740       230.740       2278.68       2509.42    
loop,thermsimp(1:2)       82   772.401       426.912    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       2237.81          0.85          1.11         21.92          0.04          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       3408.11          0.84          1.11         21.95          0.05          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    2237.8       0.9590     -2.190      3.198     -102.6      1.660    
                      0.9232      2.320     -99.70      3.420      1.130    

                       3.780    -0.5148      1.540      7000.      7000.    

                      -1.799      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.606     -2.888     -9.417      4.383    

                      -12.78     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.4418E-01 0.2678     0.6930E-02 0.1135    

                     -0.2486    -0.1170     0.1983     0.1770     0.5571E-01



                     -0.2893    -0.5167      0.000     0.1263     0.6566E-02

                     -0.2576E-01 0.1935    -0.7116    -0.3576E-01 0.2761    

                      0.1295    -0.2794E-01-0.5510     -1.132      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.276      8.844    -0.1672E+05 -6.000    

                     -0.4894     -3.109      9.410      8.816    -0.1969E+05



                      -6.000     0.6474    -0.1720      8.994      9.186    

                     -0.1944E+05 -6.000     -1.005    -0.5702      9.126    

                       8.835    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2237.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       82
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       83
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      201     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -88.1691       88.1691       2082.78       2170.95    
   2  0.266275      -1.32323      -235.351       235.351       2099.93       2335.28    
   3  0.545538     -0.605984      -107.781       107.781       2127.03       2234.81    
   4  0.196234      -1.62845      -289.638       289.638       2144.67       2434.31    
   5  0.786411     -0.240275      -42.7358       42.7358       2146.80       2189.53    
   6  0.453912     -0.789853      -140.485       140.485       2090.77       2231.25    
   7  0.900549     -0.104751      -18.6312       18.6312       2127.07       2145.70    
   8  0.339919      -1.07905      -191.921       191.921       2126.23       2318.15    
   9  0.511643     -0.670128      -119.190       119.190       2136.16       2255.35    
  10  0.628202     -0.464894      -82.6868       82.6868       2159.77       2242.45    
  11  0.672886E-01  -2.69876      -480.007       480.007       2169.67       2649.67    
  12  0.518493     -0.656829      -116.825       116.825       2144.24       2261.06    
  13  0.994926     -0.508642E-02 -0.904679      0.904679       2159.84       2160.74    
  14  0.733191     -0.310349      -55.1992       55.1992       2118.68       2173.88    
  15  0.952818     -0.483318E-01  -8.59639       8.59639       2168.50       2177.09    
  16  0.735955     -0.306586      -54.5300       54.5300       2244.85       2299.38    
  17  0.743149     -0.296859      -52.7999       52.7999       2190.57       2243.37    
  18  0.549375     -0.598975      -106.535       106.535       2230.32       2336.85    
  19  0.355140      -1.03524      -184.130       184.130       2251.50       2435.63    
  20  0.482165     -0.729469      -129.745       129.745       2245.22       2374.97    
  21  0.577197     -0.549571      -97.7478       97.7478       2129.29       2227.04    
  22  0.107316E-01  -4.53456      -806.526       806.526       2154.56       2961.09    
  23  0.923969     -0.790764E-01  -14.0647       14.0647       2289.32       2303.39    
  24  0.810451     -0.210164      -37.3802       37.3802       2223.68       2261.06    
  25  0.143346      -1.94249      -345.495       345.495       2207.10       2552.59    
  26  0.994184     -0.583318E-02  -1.03750       1.03750       2131.91       2132.95    
  27  0.870737     -0.138415      -24.6188       24.6188       2299.85       2324.47    
  28  0.970691     -0.297469E-01  -5.29085       5.29085       2194.93       2200.22    
  29  0.351269      -1.04620      -186.080       186.080       2126.88       2312.96    
  30  0.464982     -0.765756      -136.199       136.199       2251.83       2388.03    
  31  0.921785     -0.814432E-01  -14.4856       14.4856       2130.73       2145.22    
  32  0.110512      -2.20263      -391.764       391.764       2336.36       2728.12    
  33  0.261408      -1.34167      -238.632       238.632       2362.57       2601.21    
  34  0.908908     -0.955118E-01  -16.9879       16.9879       2145.14       2162.12    
  35  0.819412     -0.199168      -35.4244       35.4244       2369.32       2404.75    
  36  0.466482     -0.762536      -135.626       135.626       2218.66       2354.29    
  37  0.717237     -0.332349      -59.1122       59.1122       2154.70       2213.82    
  38  0.802331     -0.220234      -39.1712       39.1712       2087.11       2126.28    
  39  0.949390     -0.519355E-01  -9.23734       9.23734       2143.13       2152.37    
  40  0.258511      -1.35282      -240.615       240.615       2278.68       2519.29    
  41  0.270423      -1.30777      -232.602       232.602       2125.29       2357.89    
  42  0.366439      -1.00392      -178.560       178.560       2095.32       2273.88    
  43  0.934403     -0.678476E-01  -12.0675       12.0675       2297.60       2309.67    
  44  0.956654     -0.443133E-01  -7.88164       7.88164       2143.46       2151.34    
  45  0.377790     -0.973417      -173.134       173.134       2302.72       2475.85    
  46  0.203667      -1.59127      -283.026       283.026       2371.49       2654.52    
  47  0.673892     -0.394685      -70.1994       70.1994       2284.45       2354.65    
  48  0.347380      -1.05734      -188.060       188.060       2277.66       2465.72    
  49  0.144339      -1.93559      -344.268       344.268       2077.64       2421.91    
  50  0.728571     -0.316670      -56.3235       56.3235       2249.11       2305.43    
  51  0.243065      -1.41443      -251.572       251.572       2237.81       2489.38    
loop,thermsimp(1:2)       83   88.1691       235.351    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       2171.15          0.85          1.11         21.89          0.03          0.04         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2171.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    177.862               201
loop is:       83
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    177.862               201
loop is:       84
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    88.9309               251

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      202     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -49.5808       49.5808       2087.11       2136.69    
   2  0.468879     -0.757411      -67.3573       67.3573       2131.91       2199.27    
   3  0.886741E-01  -2.42279      -215.461       215.461       2130.73       2346.19    
   4  0.211783      -1.55219      -138.038       138.038       2127.07       2265.11    
   5  0.573306     -0.556336      -49.4754       49.4754       2143.46       2192.93    
   6  0.401711     -0.912021      -81.1069       81.1069       2143.13       2224.24    
   7  0.505706     -0.681800      -60.6331       60.6331       2159.84       2220.47    
   8  0.603045     -0.505763      -44.9780       44.9780       2145.14       2190.11    
   9  0.696575     -0.361580      -32.1557       32.1557       2082.78       2114.93    
  10  0.294614      -1.22209      -108.682       108.682       2118.68       2227.36    
  11  0.527550     -0.639511      -56.8723       56.8723       2168.50       2225.37    
  12  0.657157     -0.419832      -37.3361       37.3361       2146.80       2184.13    
  13  0.627866     -0.465428      -41.3909       41.3909       2194.93       2236.32    
  14  0.993353E-02  -4.61184      -410.135       410.135       2154.70       2564.84    
  15  0.885166E-01  -2.42456      -215.619       215.619       2129.29       2344.91    
  16  0.265764      -1.32515      -117.847       117.847       2090.77       2208.62    
  17  0.446403     -0.806534      -71.7258       71.7258       2127.03       2198.76    
  18  0.287864      -1.24527      -110.743       110.743       2159.77       2270.51    
  19  0.926928E-01  -2.37846      -211.519       211.519       2190.57       2402.09    
  20  0.394849     -0.929252      -82.6393       82.6393       2136.16       2218.80    
  21  0.540746     -0.614805      -54.6752       54.6752       2223.68       2278.36    
  22  0.846435     -0.166721      -14.8267       14.8267       2144.24       2159.07    
  23  0.417037     -0.874580      -77.7772       77.7772       2095.32       2173.10    
  24  0.210713      -1.55726      -138.488       138.488       2244.85       2383.34    
  25  0.764669     -0.268312      -23.8612       23.8612       2289.32       2313.19    
  26  0.219471E-01  -3.81912      -339.638       339.638       2249.11       2588.75    
  27  0.200728      -1.60581      -142.806       142.806       2297.60       2440.41    
  28  0.572660     -0.557463      -49.5757       49.5757       2126.88       2176.46    
  29  0.599083E-01  -2.81494      -250.335       250.335       2126.23       2376.57    
  30  0.214614      -1.53891      -136.857       136.857       2299.85       2436.70    
  31  0.489389     -0.714598      -63.5498       63.5498       2099.93       2163.48    
  32  0.162616      -1.81636      -161.531       161.531       2230.32       2391.85    
  33  0.710022     -0.342459      -30.4552       30.4552       2218.66       2249.11    
  34  0.753583     -0.282916      -25.1600       25.1600       2284.45       2309.61    
  35  0.743317     -0.296633      -26.3798       26.3798       2125.29       2151.67    
  36  0.155416      -1.86165      -165.558       165.558       2245.22       2410.78    
  37  0.643355     -0.441059      -39.2238       39.2238       2251.83       2291.05    
  38  0.656098     -0.421444      -37.4794       37.4794       2369.32       2406.80    
  39  0.327550      -1.11611      -99.2570       99.2570       2077.64       2176.90    
  40  0.192244      -1.64899      -146.646       146.646       2144.67       2291.32    
  41  0.433590     -0.835657      -74.3157       74.3157       2251.50       2325.82    
  42  0.788561     -0.237545      -21.1251       21.1251       2277.66       2298.79    
  43  0.978028     -0.222173E-01  -1.97581       1.97581       2302.72       2304.69    
  44  0.110322      -2.20435      -196.035       196.035       2237.81       2433.84    
  45  0.795332     -0.228995      -20.3648       20.3648       2278.68       2299.04    
  46  0.497518E-01  -3.00071      -266.856       266.856       2207.10       2473.95    
  47  0.852459     -0.159631      -14.1961       14.1961       2362.57       2376.77    
  48  0.133240      -2.01560      -179.249       179.249       2169.67       2348.91    
  49  0.671163     -0.398743      -35.4606       35.4606       2371.49       2406.95    
  50  0.245122      -1.40600      -125.037       125.037       2336.36       2461.39    
  51  0.820498     -0.197843      -17.5944       17.5944       2171.15       2188.74    
loop,thermsimp(1:2)       84   49.5808       67.3573    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204       2111.02          0.86          1.12         21.91          0.03          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205       4192.64          0.85          1.12         21.98          0.02          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2111.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       84
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       85
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      204     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -144.248       144.248       2082.78       2227.02    
   2  0.793097     -0.231809      -20.6150       20.6150       2087.11       2107.72    
   3  0.261081      -1.34293      -119.428       119.428       2125.29       2244.71    
   4  0.912198     -0.918984E-01  -8.17261       8.17261       2144.24       2152.41    
   5  0.493539     -0.706153      -62.7988       62.7988       2099.93       2162.72    
   6  0.721001     -0.327115      -29.0906       29.0906       2095.32       2124.41    
   7  0.578790     -0.546816      -48.6289       48.6289       2126.88       2175.51    
   8  0.684127     -0.379612      -33.7592       33.7592       2077.64       2111.40    
   9  0.627712     -0.465674      -41.4128       41.4128       2146.80       2188.21    
  10  0.858540     -0.152522      -13.5639       13.5639       2171.15       2184.71    
  11  0.712254E-01  -2.64191      -234.947       234.947       2145.14       2380.08    
  12  0.927250     -0.755316E-01  -6.71710       6.71710       2143.46       2150.18    
  13  0.458073     -0.780727      -69.4308       69.4308       2127.03       2196.46    
  14  0.940004     -0.618714E-01  -5.50228       5.50228       2131.91       2137.41    
  15  0.322549      -1.13150      -100.625       100.625       2090.77       2191.40    
  16  0.939473     -0.624358E-01  -5.55248       5.55248       2136.16       2141.71    
  17  0.726080     -0.320095      -28.4664       28.4664       2159.84       2188.31    
  18  0.602088E-02  -5.11252      -454.661       454.661       2143.13       2597.79    
  19  0.735289     -0.307492      -27.3456       27.3456       2168.50       2195.84    
  20  0.847617     -0.165326      -14.7026       14.7026       2118.68       2133.38    
  21  0.747190E-01  -2.59402      -230.689       230.689       2194.93       2425.62    
  22  0.248374      -1.39282      -123.865       123.865       2218.66       2342.52    
  23  0.350184      -1.04930      -93.3148       93.3148       2127.07       2220.39    
  24  0.327739E-03  -8.02329      -713.519       713.519       2159.77       2873.29    
  25  0.130012      -2.04013      -181.431       181.431       2223.68       2405.11    
  26  0.609791     -0.494639      -43.9887       43.9887       2251.83       2295.82    
  27  0.793414     -0.231410      -20.5795       20.5795       2144.67       2165.25    
  28  0.962567     -0.381519E-01  -3.39288       3.39288       2277.66       2281.06    
  29  0.499469     -0.694211      -61.7368       61.7368       2278.68       2340.41    
  30  0.887491     -0.119357      -10.6146       10.6146       2302.72       2313.33    
  31  0.136374      -1.99236      -177.182       177.182       2284.45       2461.63    
  32  0.292356      -1.22978      -109.366       109.366       2289.32       2398.69    
  33  0.301564      -1.19877      -106.608       106.608       2251.50       2358.11    
  34  0.352543      -1.04258      -92.7178       92.7178       2129.29       2222.01    
  35  0.483726     -0.726236      -64.5849       64.5849       2130.73       2195.31    
  36  0.410499     -0.890381      -79.1824       79.1824       2169.67       2248.85    
  37  0.458111     -0.780644      -69.4234       69.4234       2126.23       2195.65    
  38  0.670071     -0.400372      -35.6055       35.6055       2362.57       2398.18    
  39  0.175486      -1.74020      -154.757       154.757       2244.85       2399.61    
  40  0.798907     -0.224511      -19.9660       19.9660       2230.32       2250.28    
  41  0.270487      -1.30753      -116.280       116.280       2190.57       2306.85    
  42  0.480368     -0.733202      -65.2043       65.2043       2369.32       2434.53    
  43  0.658406     -0.417933      -37.1672       37.1672       2371.49       2408.66    
  44  0.937976     -0.640304E-01  -5.69428       5.69428       2245.22       2250.92    
  45  0.710083     -0.342373      -30.4475       30.4475       2237.81       2268.25    
  46  0.567340     -0.566797      -50.4058       50.4058       2299.85       2350.25    
  47  0.201426      -1.60233      -142.497       142.497       2297.60       2440.10    
  48  0.660313     -0.415042      -36.9101       36.9101       2336.36       2373.27    
  49  0.524008     -0.646249      -57.4715       57.4715       2207.10       2264.57    
  50  0.513616     -0.666280      -59.2529       59.2529       2154.70       2213.96    
  51  0.951218     -0.500122E-01  -4.44764       4.44764       2111.02       2115.46    
loop,thermsimp(1:2)       85   144.248       20.6150    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       2168.87          0.86          1.12         22.09          0.03          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207       2685.35          0.86          1.11         22.20          0.05          0.05         24.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2168.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       85
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       86
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      206     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -68.1188       68.1188       2087.11       2155.23    
   2  0.948887     -0.524654E-01  -4.66580       4.66580       2077.64       2082.31    
   3  0.532332     -0.630488      -56.0699       56.0699       2111.02       2167.09    
   4  0.374267     -0.982785      -87.4000       87.4000       2095.32       2182.72    
   5  0.694531     -0.364519      -32.4170       32.4170       2118.68       2151.10    
   6  0.414371     -0.880994      -78.3476       78.3476       2131.91       2210.26    
   7  0.208827E-01  -3.86883      -344.059       344.059       2136.16       2480.22    
   8  0.627187     -0.466511      -41.4872       41.4872       2143.46       2184.95    
   9  0.148799E-01  -4.20774      -374.198       374.198       2144.24       2518.44    
  10  0.809008     -0.211946      -18.8486       18.8486       2099.93       2118.77    
  11  0.647680     -0.434359      -38.6280       38.6280       2144.67       2183.30    
  12  0.289351      -1.24012      -110.285       110.285       2126.88       2237.17    
  13  0.222457      -1.50302      -133.665       133.665       2171.15       2304.81    
  14  0.374268     -0.982782      -87.3998       87.3998       2146.80       2234.20    
  15  0.785765     -0.241097      -21.4410       21.4410       2159.84       2181.28    
  16  0.298051      -1.21049      -107.650       107.650       2090.77       2198.42    
  17  0.725075     -0.321480      -28.5895       28.5895       2130.73       2159.32    
  18  0.386364     -0.950976      -84.5712       84.5712       2126.23       2210.80    
  19  0.631686     -0.459363      -40.8515       40.8515       2168.50       2209.35    
  20  0.688282     -0.373557      -33.2208       33.2208       2127.03       2160.25    
  21  0.373817     -0.983990      -87.5071       87.5071       2154.70       2242.21    
  22  0.219845      -1.51483      -134.716       134.716       2127.07       2261.79    
  23  0.926271     -0.765889E-01  -6.81112       6.81112       2129.29       2136.10    
  24  0.618127     -0.481061      -42.7812       42.7812       2082.78       2125.56    
  25  0.176216      -1.73604      -154.388       154.388       2125.29       2279.68    
  26  0.742943     -0.297136      -26.4246       26.4246       2169.67       2196.09    
  27  0.357690      -1.02809      -91.4288       91.4288       2230.32       2321.75    
  28  0.478359     -0.737394      -65.5771       65.5771       2245.22       2310.80    
  29  0.395976     -0.926401      -82.3857       82.3857       2207.10       2289.48    
  30  0.803186     -0.219169      -19.4909       19.4909       2237.81       2257.30    
  31  0.231845      -1.46168      -129.989       129.989       2277.66       2407.65    
  32  0.808968     -0.211996      -18.8530       18.8530       2251.83       2270.68    
  33  0.579217     -0.546078      -48.5632       48.5632       2190.57       2239.13    
  34  0.384357     -0.956183      -85.0343       85.0343       2302.72       2387.75    
  35  0.856367     -0.155057      -13.7893       13.7893       2278.68       2292.46    
  36  0.265661      -1.32553      -117.881       117.881       2218.66       2336.54    
  37  0.288915      -1.24162      -110.419       110.419       2299.85       2410.27    
  38  0.224915      -1.49203      -132.688       132.688       2251.50       2384.19    
  39  0.685944     -0.376959      -33.5233       33.5233       2336.36       2369.88    
  40  0.265936      -1.32450      -117.789       117.789       2145.14       2262.92    
  41  0.412966     -0.884389      -78.6495       78.6495       2362.57       2441.22    
  42  0.440796     -0.819173      -72.8498       72.8498       2289.32       2362.17    
  43  0.572522     -0.557705      -49.5972       49.5972       2244.85       2294.45    
  44  0.798412     -0.225131      -20.0211       20.0211       2223.68       2243.70    
  45  0.127097      -2.06281      -183.447       183.447       2371.49       2554.94    
  46  0.243397      -1.41306      -125.665       125.665       2194.93       2320.59    
  47  0.322195      -1.13260      -100.723       100.723       2369.32       2470.05    
  48  0.512728     -0.668011      -59.4068       59.4068       2297.60       2357.01    
  49  0.786191     -0.240556      -21.3929       21.3929       2284.45       2305.84    
  50  0.733079     -0.310501      -27.6132       27.6132       2143.13       2170.74    
  51  0.601364     -0.508554      -45.2262       45.2262       2168.87       2214.10    
loop,thermsimp(1:2)       86   68.1188       4.66580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       2188.26          0.86          1.12         21.91          0.06          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2188.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       86
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       87
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      207     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -151.043       151.043       2077.64       2228.69    
   2  0.721345     -0.326637      -29.0482       29.0482       2099.93       2128.97    
   3  0.842493     -0.171390      -15.2418       15.2418       2082.78       2098.02    
   4  0.260540      -1.34500      -119.612       119.612       2129.29       2248.90    
   5  0.782605     -0.245127      -21.7994       21.7994       2118.68       2140.48    
   6  0.208492      -1.56785      -139.431       139.431       2087.11       2226.54    
   7  0.290568E-01  -3.53850      -314.682       314.682       2130.73       2445.41    
   8  0.673682     -0.394997      -35.1274       35.1274       2127.03       2162.16    
   9  0.399393     -0.917808      -81.6215       81.6215       2111.02       2192.64    
  10  0.966971     -0.335863E-01  -2.98686       2.98686       2143.13       2146.12    
  11  0.390645     -0.939956      -83.5912       83.5912       2159.84       2243.43    
  12  0.259548      -1.34881      -119.951       119.951       2095.32       2215.27    
  13  0.260765      -1.34413      -119.535       119.535       2144.67       2264.21    
  14  0.110601E-01  -4.50441      -400.582       400.582       2143.46       2544.04    
  15  0.727710     -0.317852      -28.2669       28.2669       2169.67       2197.93    
  16  0.717076     -0.332574      -29.5761       29.5761       2090.77       2120.35    
  17  0.612129     -0.490811      -43.6483       43.6483       2168.50       2212.14    
  18  0.589376     -0.528691      -47.0170       47.0170       2131.91       2178.93    
  19  0.541615     -0.613199      -54.5324       54.5324       2126.23       2180.76    
  20  0.330403      -1.10744      -98.4858       98.4858       2168.87       2267.36    
  21  0.229530      -1.47172      -130.882       130.882       2146.80       2277.68    
  22  0.564010     -0.572684      -50.9293       50.9293       2126.88       2177.81    
  23  0.454226     -0.789161      -70.1808       70.1808       2190.57       2260.75    
  24  0.579528     -0.545541      -48.5155       48.5155       2154.70       2203.22    
  25  0.245500      -1.40446      -124.900       124.900       2223.68       2348.58    
  26  0.708019     -0.345284      -30.7064       30.7064       2237.81       2268.51    
  27  0.300215      -1.20326      -107.007       107.007       2127.07       2234.08    
  28  0.721461     -0.326478      -29.0340       29.0340       2145.14       2174.17    
  29  0.326772      -1.11849      -99.4687       99.4687       2251.83       2351.30    
  30  0.580879     -0.543212      -48.3084       48.3084       2125.29       2173.60    
  31  0.963075     -0.376241E-01  -3.34595       3.34595       2207.10       2210.44    
  32  0.656935     -0.420170      -37.3661       37.3661       2278.68       2316.04    
  33  0.908335     -0.961416E-01  -8.54996       8.54996       2244.85       2253.40    
  34  0.765938     -0.266654      -23.7138       23.7138       2171.15       2194.86    
  35  0.497301     -0.698561      -62.1236       62.1236       2284.45       2346.57    
  36  0.833603     -0.181997      -16.1852       16.1852       2245.22       2261.41    
  37  0.433057     -0.836886      -74.4250       74.4250       2194.93       2269.35    
  38  0.349547      -1.05112      -93.4768       93.4768       2230.32       2323.79    
  39  0.142838      -1.94604      -173.064       173.064       2218.66       2391.72    
  40  0.326780      -1.11847      -99.4664       99.4664       2297.60       2397.07    
  41  0.707709     -0.345723      -30.7455       30.7455       2289.32       2320.07    
  42  0.914339     -0.895538E-01  -7.96410       7.96410       2336.36       2344.32    
  43  0.392800     -0.934454      -83.1019       83.1019       2251.50       2334.61    
  44  0.434772     -0.832933      -74.0735       74.0735       2302.72       2376.79    
  45  0.229545      -1.47165      -130.876       130.876       2277.66       2408.54    
  46  0.661281     -0.413577      -36.7798       36.7798       2299.85       2336.63    
  47  0.459966     -0.776602      -69.0640       69.0640       2362.57       2431.64    
  48  0.352439      -1.04288      -92.7440       92.7440       2369.32       2462.07    
  49  0.490345     -0.712647      -63.3763       63.3763       2136.16       2199.53    
  50  0.837788     -0.176990      -15.7399       15.7399       2144.24       2159.98    
  51  0.247493      -1.39637      -124.181       124.181       2188.26       2312.44    
loop,thermsimp(1:2)       87   151.043       29.0482    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209       2114.82          0.86          1.11         21.81          0.16          0.04         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210       2111.53          0.85          1.10         21.91          0.21          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2111.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       87
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       88
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      209     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -134.580       134.580       2082.78       2217.36    
   2  0.246752E-01  -3.70196      -329.219       329.219       2090.77       2419.99    
   3  0.679039     -0.387076      -34.4231       34.4231       2099.93       2134.35    
   4  0.709027     -0.343862      -30.5799       30.5799       2118.68       2149.26    
   5  0.577754     -0.548608      -48.7882       48.7882       2143.13       2191.92    
   6  0.738694     -0.302871      -26.9346       26.9346       2144.24       2171.17    
   7  0.181723      -1.70527      -151.651       151.651       2127.03       2278.68    
   8  0.103748      -2.26579      -201.499       201.499       2125.29       2326.79    
   9  0.456811E-02  -5.38866      -479.218       479.218       2145.14       2624.35    
  10  0.303247      -1.19321      -106.113       106.113       2126.88       2233.00    
  11  0.284736      -1.25619      -111.714       111.714       2131.91       2243.63    
  12  0.900494     -0.104812      -9.32103       9.32103       2126.23       2135.55    
  13  0.691792     -0.368470      -32.7684       32.7684       2111.02       2143.78    
  14  0.502714     -0.687735      -61.1609       61.1609       2171.15       2232.31    
  15  0.305219      -1.18673      -105.537       105.537       2169.67       2275.20    
  16  0.412005     -0.886720      -78.8569       78.8569       2136.16       2215.01    
  17  0.412225     -0.886186      -78.8093       78.8093       2154.70       2233.51    
  18  0.121697      -2.10622      -187.308       187.308       2207.10       2394.40    
  19  0.465374     -0.764915      -68.0246       68.0246       2168.50       2236.52    
  20  0.273016      -1.29823      -115.452       115.452       2095.32       2210.78    
  21  0.502763     -0.687636      -61.1521       61.1521       2087.11       2148.26    
  22  0.516442     -0.660793      -58.7650       58.7650       2077.64       2136.41    
  23  0.554333     -0.589990      -52.4684       52.4684       2127.07       2179.54    
  24  0.192397E-01  -3.95078      -351.346       351.346       2159.84       2511.19    
  25  0.451279E-01  -3.09825      -275.531       275.531       2129.29       2404.82    
  26  0.457340     -0.782327      -69.5731       69.5731       2244.85       2314.42    
  27  0.325184      -1.12336      -99.9017       99.9017       2190.57       2290.47    
  28  0.700952     -0.355315      -31.5985       31.5985       2245.22       2276.82    
  29  0.961087     -0.396906E-01  -3.52972       3.52972       2144.67       2148.20    
  30  0.195966E-02  -6.23498      -554.483       554.483       2168.87       2723.36    
  31  0.766376     -0.266082      -23.6630       23.6630       2237.81       2261.47    
  32  0.398846     -0.919180      -81.7435       81.7435       2194.93       2276.67    
  33  0.675249     -0.392674      -34.9209       34.9209       2146.80       2181.72    
  34  0.189468      -1.66354      -147.940       147.940       2188.26       2336.20    
  35  0.444608     -0.810562      -72.0841       72.0841       2278.68       2350.76    
  36  0.514006     -0.665520      -59.1853       59.1853       2289.32       2348.51    
  37  0.575199     -0.553039      -49.1823       49.1823       2230.32       2279.50    
  38  0.121449      -2.10826      -187.490       187.490       2251.50       2438.99    
  39  0.209130      -1.56480      -139.159       139.159       2299.85       2439.01    
  40  0.466284E-01  -3.06555      -272.622       272.622       2336.36       2608.98    
  41  0.386630E-01  -3.25287      -289.281       289.281       2284.45       2573.73    
  42  0.335751E-01  -3.39397      -301.829       301.829       2223.68       2525.51    
  43  0.878126     -0.129965      -11.5579       11.5579       2251.83       2263.39    
  44  0.652938     -0.426273      -37.9088       37.9088       2302.72       2340.63    
  45  0.932456E-01  -2.37252      -210.990       210.990       2218.66       2429.65    
  46  0.662683     -0.411458      -36.5914       36.5914       2297.60       2334.19    
  47  0.204704      -1.58619      -141.062       141.062       2277.66       2418.73    
  48  0.985446     -0.146609E-01  -1.30381       1.30381       2362.57       2363.88    
  49  0.105847      -2.24576      -199.717       199.717       2130.73       2330.45    
  50  0.843201     -0.170550      -15.1672       15.1672       2369.32       2384.49    
  51  0.364087      -1.01036      -89.8525       89.8525       2111.53       2201.38    
loop,thermsimp(1:2)       88   134.580       329.219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       2147.06          0.86          1.12         21.90          0.07          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212       2363.88          0.86          1.11         22.01          0.05          0.05         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2147.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       88
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       89
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      211     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -11.6963       11.6963       2099.93       2111.62    
   2  0.765270     -0.267527      -23.7914       23.7914       2126.23       2150.02    
   3  0.215687      -1.53393      -136.414       136.414       2077.64       2214.06    
   4  0.999601E-01  -2.30298      -204.807       204.807       2111.02       2315.82    
   5  0.706519     -0.347405      -30.8950       30.8950       2144.67       2175.57    
   6  0.201358      -1.60267      -142.527       142.527       2087.11       2229.64    
   7  0.450677     -0.797005      -70.8784       70.8784       2118.68       2189.56    
   8  0.897557     -0.108078      -9.61151       9.61151       2144.24       2153.85    
   9  0.161166      -1.82532      -162.327       162.327       2127.07       2289.40    
  10  0.972556E-01  -2.33041      -207.246       207.246       2146.80       2354.04    
  11  0.742112     -0.298255      -26.5241       26.5241       2143.13       2169.65    
  12  0.172377      -1.75807      -156.347       156.347       2111.53       2267.87    
  13  0.658751     -0.417410      -37.1206       37.1206       2095.32       2132.44    
  14  0.725340     -0.321114      -28.5570       28.5570       2136.16       2164.71    
  15  0.501488     -0.690175      -61.3779       61.3779       2082.78       2144.15    
  16  0.845372     -0.167978      -14.9385       14.9385       2171.15       2186.08    
  17  0.132369      -2.02216      -179.833       179.833       2126.88       2306.72    
  18  0.734515E-01  -2.61113      -232.210       232.210       2154.70       2386.91    
  19  0.391205     -0.938523      -83.4638       83.4638       2168.50       2251.96    
  20  0.376983     -0.975555      -86.7570       86.7570       2131.91       2218.67    
  21  0.315463      -1.15371      -102.601       102.601       2237.81       2340.41    
  22  0.267113      -1.32008      -117.396       117.396       2251.83       2369.23    
  23  0.965292     -0.353243E-01  -3.14143       3.14143       2169.67       2172.81    
  24  0.954592     -0.464714E-01  -4.13275       4.13275       2194.93       2199.06    
  25  0.992414     -0.761515E-02 -0.677222      0.677222       2245.22       2245.90    
  26  0.867953E-02  -4.74679      -422.136       422.136       2127.03       2549.17    
  27  0.829585     -0.186829      -16.6149       16.6149       2230.32       2246.93    
  28  0.349695      -1.05069      -93.4393       93.4393       2190.57       2284.01    
  29  0.673511     -0.395251      -35.1500       35.1500       2244.85       2280.00    
  30  0.340696      -1.07676      -95.7577       95.7577       2125.29       2221.05    
  31  0.558731     -0.582087      -51.7655       51.7655       2130.73       2182.50    
  32  0.747295     -0.291295      -25.9051       25.9051       2297.60       2323.51    
  33  0.123287      -2.09324      -186.154       186.154       2188.26       2374.42    
  34  0.355051      -1.03549      -92.0873       92.0873       2302.72       2394.81    
  35  0.511895     -0.669636      -59.5513       59.5513       2289.32       2348.88    
  36  0.571856E-01  -2.86145      -254.472       254.472       2278.68       2533.15    
  37  0.507517     -0.678226      -60.3153       60.3153       2362.57       2422.89    
  38  0.326770      -1.11850      -99.4690       99.4690       2369.32       2468.79    
  39  0.736001     -0.306523      -27.2594       27.2594       2207.10       2234.35    
  40  0.970046     -0.304120E-01  -2.70457       2.70457       2129.29       2132.00    
  41  0.673510     -0.395253      -35.1502       35.1502       2277.66       2312.81    
  42  0.335032      -1.09353      -97.2486       97.2486       2090.77       2188.02    
  43  0.872321E-01  -2.43918      -216.919       216.919       2218.66       2435.58    
  44  0.749956     -0.287741      -25.5890       25.5890       2251.50       2277.09    
  45  0.159001      -1.83884      -163.530       163.530       2299.85       2463.38    
  46  0.529687     -0.635468      -56.5128       56.5128       2159.84       2216.35    
  47  0.142415      -1.94901      -173.327       173.327       2223.68       2397.01    
  48  0.803387     -0.218919      -19.4686       19.4686       2284.45       2303.92    
  49  0.709133     -0.343713      -30.5667       30.5667       2336.36       2366.92    
  50  0.261172      -1.34258      -119.397       119.397       2145.14       2264.53    
  51  0.106599      -2.23868      -199.088       199.088       2147.06       2346.15    
loop,thermsimp(1:2)       89   11.6963       23.7914    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213       2102.74          0.85          1.11         22.05          0.02          0.05         24.09
Just calling func    0   0         24.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    214       2142.58          0.85          1.09         22.08          0.30          0.05         24.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2102.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       89
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       90
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      213     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -164.446       164.446       2099.93       2264.37    
   2  0.894146     -0.111886      -9.95011       9.95011       2129.29       2139.24    
   3  0.721270     -0.326741      -29.0574       29.0574       2095.32       2124.38    
   4  0.536866     -0.622006      -55.3156       55.3156       2082.78       2138.09    
   5  0.418107     -0.872017      -77.5493       77.5493       2126.23       2203.78    
   6  0.391189     -0.938564      -83.4674       83.4674       2144.24       2227.71    
   7  0.799669     -0.223558      -19.8812       19.8812       2136.16       2156.04    
   8  0.595070     -0.519076      -46.1620       46.1620       2143.13       2189.29    
   9  0.384356E-03  -7.86394      -699.348       699.348       2169.67       2869.01    
  10  0.654302     -0.424187      -37.7233       37.7233       2144.67       2182.39    
  11  0.873355     -0.135413      -12.0424       12.0424       2130.73       2142.77    
  12  0.303212      -1.19332      -106.123       106.123       2171.15       2277.27    
  13  0.434159     -0.834344      -74.1990       74.1990       2090.77       2164.97    
  14  0.970825     -0.296089E-01  -2.63315       2.63315       2118.68       2121.32    
  15  0.405896     -0.901659      -80.1853       80.1853       2194.93       2275.11    
  16  0.250423      -1.38461      -123.134       123.134       2077.64       2200.78    
  17  0.517030     -0.659654      -58.6636       58.6636       2159.84       2218.50    
  18  0.165468      -1.79897      -159.984       159.984       2131.91       2291.90    
  19  0.679403     -0.386541      -34.3754       34.3754       2125.29       2159.66    
  20  0.554013     -0.590567      -52.5197       52.5197       2087.11       2139.63    
  21  0.211764E-01  -3.85487      -342.817       342.817       2207.10       2549.91    
  22  0.453828     -0.790038      -70.2588       70.2588       2245.22       2315.48    
  23  0.377409     -0.974426      -86.6566       86.6566       2230.32       2316.97    
  24  0.496879     -0.699408      -62.1990       62.1990       2168.50       2230.69    
  25  0.214619      -1.53889      -136.855       136.855       2145.14       2281.99    
  26  0.724154     -0.322751      -28.7026       28.7026       2111.53       2140.23    
  27  0.385609     -0.952932      -84.7451       84.7451       2251.50       2336.25    
  28  0.777864     -0.251204      -22.3398       22.3398       2244.85       2267.19    
  29  0.709283     -0.343500      -30.5478       30.5478       2190.57       2221.12    
  30  0.191760      -1.65151      -146.870       146.870       2127.07       2273.94    
  31  0.347616      -1.05666      -93.9694       93.9694       2284.45       2378.42    
  32  0.191581      -1.65244      -146.953       146.953       2126.88       2273.84    
  33  0.770989     -0.260081      -23.1293       23.1293       2277.66       2300.79    
  34  0.788566E-01  -2.54012      -225.896       225.896       2111.02       2336.91    
  35  0.229474      -1.47197      -130.903       130.903       2297.60       2428.51    
  36  0.339326      -1.08079      -96.1160       96.1160       2237.81       2333.92    
  37  0.220886      -1.51011      -134.295       134.295       2147.06       2281.36    
  38  0.223644      -1.49770      -133.192       133.192       2289.32       2422.52    
  39  0.138287      -1.97842      -175.943       175.943       2146.80       2322.74    
  40  0.796402     -0.227651      -20.2452       20.2452       2336.36       2356.60    
  41  0.104384      -2.25968      -200.955       200.955       2251.83       2452.79    
  42  0.919642     -0.837713E-01  -7.44986       7.44986       2188.26       2195.71    
  43  0.360767      -1.01952      -90.6672       90.6672       2154.70       2245.37    
  44  0.924300     -0.787181E-01  -7.00047       7.00047       2302.72       2309.72    
  45  0.561139     -0.577786      -51.3831       51.3831       2223.68       2275.07    
  46  0.509073E-01  -2.97775      -264.814       264.814       2362.57       2627.39    
  47  0.715469     -0.334817      -29.7756       29.7756       2218.66       2248.44    
  48  0.294040E-01  -3.52662      -313.626       313.626       2299.85       2613.47    
  49  0.264026E-02  -5.93688      -527.972       527.972       2369.32       2897.29    
  50  0.634029     -0.455661      -40.5223       40.5223       2278.68       2319.20    
  51  0.319148      -1.14210      -101.568       101.568       2102.74       2204.31    
loop,thermsimp(1:2)       90   164.446       9.95011    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       2191.68          0.86          1.11         21.98          0.01          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216       3297.23          0.85          1.10         22.02          0.13          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2191.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       90
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       91
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      215     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -202.242       202.242       2118.68       2320.92    
   2  0.846291     -0.166892      -14.8419       14.8419       2095.32       2110.17    
   3  0.167054      -1.78944      -159.136       159.136       2082.78       2241.91    
   4  0.786038     -0.240750      -21.4101       21.4101       2129.29       2150.70    
   5  0.680218     -0.385341      -34.2688       34.2688       2087.11       2121.38    
   6  0.843894     -0.169729      -15.0942       15.0942       2111.53       2126.62    
   7  0.295559      -1.21889      -108.397       108.397       2130.73       2239.13    
   8  0.383493     -0.958433      -85.2343       85.2343       2136.16       2221.39    
   9  0.867247     -0.142431      -12.6665       12.6665       2125.29       2137.95    
  10  0.241960      -1.41898      -126.191       126.191       2090.77       2216.96    
  11  0.486925     -0.719645      -63.9987       63.9987       2144.67       2208.67    
  12  0.750166     -0.287460      -25.5641       25.5641       2143.13       2168.69    
  13  0.507045     -0.679156      -60.3980       60.3980       2188.26       2248.66    
  14  0.237743      -1.43656      -127.755       127.755       2077.64       2205.40    
  15  0.256837E-01  -3.66190      -325.656       325.656       2126.23       2451.89    
  16  0.776460     -0.253010      -22.5004       22.5004       2102.74       2125.24    
  17  0.316300      -1.15106      -102.365       102.365       2159.84       2262.20    
  18  0.493161     -0.706919      -62.8670       62.8670       2190.57       2253.43    
  19  0.807271     -0.214096      -19.0398       19.0398       2144.24       2163.28    
  20  0.338915      -1.08201      -96.2238       96.2238       2168.50       2264.72    
  21  0.132986      -2.01751      -179.419       179.419       2154.70       2334.12    
  22  0.409975     -0.891659      -79.2961       79.2961       2218.66       2297.96    
  23  0.525021     -0.644317      -57.2997       57.2997       2099.93       2157.23    
  24  0.393064     -0.933783      -83.0422       83.0422       2244.85       2327.89    
  25  0.176068      -1.73689      -154.463       154.463       2126.88       2281.35    
  26  0.965490     -0.351191E-01  -3.12318       3.12318       2127.07       2130.19    
  27  0.387767     -0.947350      -84.2487       84.2487       2223.68       2307.93    
  28  0.936248     -0.658753E-01  -5.85835       5.85835       2194.93       2200.79    
  29  0.914720     -0.891370E-01  -7.92704       7.92704       2171.15       2179.07    
  30  0.332171      -1.10211      -98.0113       98.0113       2147.06       2245.07    
  31  0.845314E-01  -2.47063      -219.716       219.716       2145.14       2364.85    
  32  0.687741     -0.374343      -33.2907       33.2907       2131.91       2165.20    
  33  0.899776     -0.105610      -9.39196       9.39196       2277.66       2287.06    
  34  0.558791     -0.581980      -51.7560       51.7560       2302.72       2354.48    
  35  0.882799     -0.124658      -11.0860       11.0860       2245.22       2256.31    
  36  0.235569      -1.44575      -128.572       128.572       2230.32       2358.89    
  37  0.533400     -0.628484      -55.8916       55.8916       2278.68       2334.57    
  38  0.147169      -1.91617      -170.407       170.407       2146.80       2317.20    
  39  0.966208E-01  -2.33696      -207.828       207.828       2237.81       2445.64    
  40  0.952887     -0.482588E-01  -4.29170       4.29170       2251.50       2255.80    
  41  0.155551      -1.86078      -165.481       165.481       2111.02       2276.50    
  42  0.645067     -0.438401      -38.9874       38.9874       2336.36       2375.34    
  43  0.394254     -0.930759      -82.7733       82.7733       2284.45       2367.22    
  44  0.546893     -0.603501      -53.6699       53.6699       2289.32       2342.99    
  45  0.390314     -0.940803      -83.6665       83.6665       2297.60       2381.27    
  46  0.311561      -1.16616      -103.708       103.708       2251.83       2355.54    
  47  0.752427E-01  -2.58704      -230.068       230.068       2207.10       2437.16    
  48  0.144673      -1.93328      -171.929       171.929       2299.85       2471.78    
  49  0.297567      -1.21212      -107.795       107.795       2362.57       2470.37    
  50  0.544131     -0.608565      -54.1203       54.1203       2169.67       2223.79    
  51  0.750603E-01  -2.58946      -230.283       230.283       2191.68       2421.96    
loop,thermsimp(1:2)       91   202.242       14.8419    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217       2589.06          0.85          1.09         21.83          0.26          0.06         24.09
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218       2219.15          0.85          1.11         21.94          0.10          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2219.15
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       91
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       92
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      217     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -135.211       135.211       2095.32       2230.53    
   2  0.389473     -0.942961      -83.8584       83.8584       2087.11       2170.97    
   3  0.919121     -0.843378E-01  -7.50024       7.50024       2102.74       2110.24    
   4  0.970518     -0.299250E-01  -2.66126       2.66126       2111.53       2114.19    
   5  0.713317     -0.337830      -30.0435       30.0435       2127.07       2157.11    
   6  0.639607     -0.446902      -39.7434       39.7434       2125.29       2165.03    
   7  0.712661     -0.338749      -30.1252       30.1252       2129.29       2159.42    
   8  0.212311      -1.54970      -137.817       137.817       2099.93       2237.74    
   9  0.831769     -0.184200      -16.3811       16.3811       2144.24       2160.62    
  10  0.794875     -0.229571      -20.4159       20.4159       2131.91       2152.33    
  11  0.909815     -0.945137E-01  -8.40520       8.40520       2143.13       2151.54    
  12  0.753651E-01  -2.58541      -229.923       229.923       2171.15       2401.07    
  13  0.676081     -0.391442      -34.8113       34.8113       2194.93       2229.74    
  14  0.597437     -0.515107      -45.8089       45.8089       2077.64       2123.45    
  15  0.146947      -1.91768      -170.541       170.541       2144.67       2315.21    
  16  0.854910     -0.156760      -13.9408       13.9408       2090.77       2104.71    
  17  0.984999     -0.151146E-01  -1.34415       1.34415       2136.16       2137.50    
  18  0.533419     -0.628448      -55.8884       55.8884       2169.67       2225.55    
  19  0.383774     -0.957703      -85.1694       85.1694       2130.73       2215.90    
  20  0.691729     -0.368561      -32.7765       32.7765       2082.78       2115.55    
  21  0.313732E-01  -3.46180      -307.861       307.861       2147.06       2454.92    
  22  0.415635     -0.877947      -78.0766       78.0766       2188.26       2266.34    
  23  0.288746      -1.24221      -110.471       110.471       2190.57       2301.04    
  24  0.176464      -1.73464      -154.263       154.263       2251.50       2405.77    
  25  0.881312     -0.126344      -11.2359       11.2359       2245.22       2256.46    
  26  0.962783     -0.379267E-01  -3.37286       3.37286       2159.84       2163.21    
  27  0.415450     -0.878393      -78.1163       78.1163       2168.50       2246.61    
  28  0.271836      -1.30256      -115.838       115.838       2111.02       2226.85    
  29  0.926655     -0.761736E-01  -6.77419       6.77419       2126.88       2133.66    
  30  0.277790      -1.28089      -113.911       113.911       2277.66       2391.58    
  31  0.189974      -1.66087      -147.703       147.703       2218.66       2366.36    
  32  0.410540     -0.890281      -79.1735       79.1735       2223.68       2302.86    
  33  0.952387     -0.487839E-01  -4.33840       4.33840       2146.80       2151.13    
  34  0.896015     -0.109798      -9.76443       9.76443       2118.68       2128.45    
  35  0.121549E-01  -4.41002      -392.187       392.187       2244.85       2637.04    
  36  0.723911     -0.323087      -28.7325       28.7325       2154.70       2183.44    
  37  0.759053     -0.275683      -24.5168       24.5168       2278.68       2303.19    
  38  0.969929     -0.305320E-01  -2.71524       2.71524       2289.32       2292.04    
  39  0.852636     -0.159422      -14.1776       14.1776       2302.72       2316.90    
  40  0.730471     -0.314065      -27.9301       27.9301       2251.83       2279.76    
  41  0.528358     -0.637981      -56.7362       56.7362       2230.32       2287.05    
  42  0.404403     -0.905344      -80.5131       80.5131       2145.14       2225.65    
  43  0.232822      -1.45748      -129.615       129.615       2284.45       2414.06    
  44  0.847643     -0.165296      -14.6999       14.6999       2336.36       2351.05    
  45  0.429393E-01  -3.14797      -279.952       279.952       2297.60       2577.55    
  46  0.673157     -0.395777      -35.1968       35.1968       2191.68       2226.87    
  47  0.806068E-01  -2.51817      -223.943       223.943       2207.10       2431.04    
  48  0.926018     -0.768619E-01  -6.83540       6.83540       2237.81       2244.64    
  49  0.167973      -1.78395      -158.648       158.648       2126.23       2284.88    
  50  0.780773     -0.247471      -22.0078       22.0078       2362.57       2384.58    
  51  0.565702E-01  -2.87227      -255.434       255.434       2219.15       2474.59    
loop,thermsimp(1:2)       92   135.211       83.8584    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       2143.42          0.86          1.11         21.94          0.01          0.04         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220       3159.45          0.86          1.12         21.97          0.07          0.05         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2143.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       92
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       93
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      219     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -169.550       169.550       2090.77       2260.32    
   2  0.695074     -0.363738      -32.3475       32.3475       2102.74       2135.09    
   3  0.541180     -0.614003      -54.6039       54.6039       2111.53       2166.13    
   4  0.189791      -1.66183      -147.788       147.788       2082.78       2230.56    
   5  0.245553      -1.40424      -124.880       124.880       2077.64       2202.52    
   6  0.641474     -0.443986      -39.4841       39.4841       2118.68       2158.17    
   7  0.308462      -1.17616      -104.597       104.597       2126.88       2231.48    
   8  0.478005     -0.738133      -65.6429       65.6429       2136.16       2201.80    
   9  0.395759     -0.926951      -82.4346       82.4346       2146.80       2229.23    
  10  0.438776E-01  -3.12635      -278.029       278.029       2143.13       2421.16    
  11  0.294628E-01  -3.52463      -313.448       313.448       2131.91       2445.36    
  12  0.331052E-01  -3.40806      -303.082       303.082       2127.07       2430.15    
  13  0.916325E-01  -2.38997      -212.542       212.542       2129.29       2341.83    
  14  0.985908     -0.141919E-01  -1.26210       1.26210       2144.24       2145.50    
  15  0.511724     -0.669970      -59.5810       59.5810       2159.84       2219.42    
  16  0.185695      -1.68365      -149.729       149.729       2125.29       2275.02    
  17  0.830711     -0.185474      -16.4943       16.4943       2087.11       2103.60    
  18  0.765179E-04  -9.47799      -842.886       842.886       2154.70       2997.59    
  19  0.129365      -2.04512      -181.874       181.874       2130.73       2312.60    
  20  0.796363     -0.227700      -20.2495       20.2495       2169.67       2189.92    
  21  0.589256     -0.528895      -47.0352       47.0352       2145.14       2192.17    
  22  0.770995     -0.260073      -23.1285       23.1285       2111.02       2134.14    
  23  0.685430     -0.377709      -33.5900       33.5900       2191.68       2225.27    
  24  0.487688     -0.718080      -63.8596       63.8596       2194.93       2258.79    
  25  0.114898      -2.16371      -192.421       192.421       2095.32       2287.74    
  26  0.165093      -1.80124      -160.186       160.186       2099.93       2260.11    
  27  0.302275      -1.19642      -106.399       106.399       2237.81       2344.21    
  28  0.123669      -2.09014      -185.878       185.878       2168.50       2354.37    
  29  0.960526     -0.402739E-01  -3.58159       3.58159       2245.22       2248.80    
  30  0.744557     -0.294966      -26.2316       26.2316       2188.26       2214.49    
  31  0.418436     -0.871232      -77.4795       77.4795       2251.83       2329.31    
  32  0.624411     -0.470947      -41.8817       41.8817       2126.23       2168.11    
  33  0.920055     -0.833222E-01  -7.40992       7.40992       2230.32       2237.73    
  34  0.330507      -1.10713      -98.4579       98.4579       2289.32       2387.78    
  35  0.889566     -0.117022      -10.4068       10.4068       2190.57       2200.97    
  36  0.269410      -1.31152      -116.635       116.635       2223.68       2340.32    
  37  0.458780     -0.779184      -69.2936       69.2936       2278.68       2347.97    
  38  0.952588     -0.485730E-01  -4.31964       4.31964       2144.67       2148.99    
  39  0.213836      -1.54254      -137.180       137.180       2302.72       2439.90    
  40  0.460697     -0.775015      -68.9228       68.9228       2336.36       2405.28    
  41  0.571693     -0.559153      -49.7260       49.7260       2218.66       2268.39    
  42  0.201363      -1.60265      -142.525       142.525       2362.57       2505.10    
  43  0.707817     -0.345570      -30.7319       30.7319       2277.66       2308.40    
  44  0.927118     -0.756745E-01  -6.72980       6.72980       2171.15       2177.88    
  45  0.288916      -1.24162      -110.418       110.418       2251.50       2361.92    
  46  0.702737     -0.352773      -31.3724       31.3724       2284.45       2315.82    
  47  0.253190      -1.37362      -122.157       122.157       2207.10       2329.25    
  48  0.709086     -0.343779      -30.5726       30.5726       2147.06       2177.63    
  49  0.399421     -0.917738      -81.6153       81.6153       2219.15       2300.77    
  50  0.837301     -0.177572      -15.7917       15.7917       2297.60       2313.39    
  51  0.906694     -0.979507E-01  -8.71085       8.71085       2143.42       2152.13    
loop,thermsimp(1:2)       93   169.550       32.3475    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221       2112.12          0.86          1.12         21.88          0.09          0.05         23.99
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222       2395.34          0.85          1.12         21.93          0.07          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    2112.1        1.165     -2.181      3.282     -102.6      1.412    
                      0.8188      2.208     -99.70      3.670      1.129    

                       3.164     -2.097      1.540      7000.      7000.    

                      -1.982      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.380     -3.518     -7.711      6.211    

                      -13.98     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1328E-02 0.2806    -0.6703E-02 0.1290    

                     -0.2486    -0.1221     0.1428     0.1371     0.8418E-01



                     -0.3997    -0.5044      0.000     0.6089E-01-0.5693E-01

                     -0.5205E-01 0.1325    -0.7116    -0.8891E-01 0.2972    

                      0.8948E-01-0.3721E-01-0.6090     -1.172      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.260      8.787    -0.1672E+05 -6.000    

                     -0.3149     -2.581      9.406      8.781    -0.1969E+05



                      -6.000     0.5623    -0.1594      8.940      9.132    

                     -0.1944E+05 -6.000    -0.7086    -0.4907      9.468    

                       8.750    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2112.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       93
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       94
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      221     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -15.2639       15.2639       2087.11       2102.37    
   2  0.478368     -0.737375      -65.5755       65.5755       2111.02       2176.59    
   3  0.283498      -1.26055      -112.102       112.102       2102.74       2214.84    
   4  0.520516     -0.652935      -58.0661       58.0661       2144.24       2202.30    
   5  0.703282E-01  -2.65458      -236.074       236.074       2144.67       2380.74    
   6  0.914137     -0.897748E-01  -7.98376       7.98376       2143.42       2151.40    
   7  0.479535     -0.734938      -65.3587       65.3587       2118.68       2184.04    
   8  0.921875     -0.813456E-01  -7.23414       7.23414       2111.53       2118.76    
   9  0.739547     -0.301718      -26.8321       26.8321       2126.23       2153.06    
  10  0.790753     -0.234770      -20.8783       20.8783       2147.06       2167.94    
  11  0.212247E-01  -3.85259      -342.614       342.614       2171.15       2513.76    
  12  0.286971      -1.24837      -111.019       111.019       2169.67       2280.68    
  13  0.695666     -0.362886      -32.2718       32.2718       2145.14       2177.41    
  14  0.534590     -0.626255      -55.6934       55.6934       2190.57       2246.26    
  15  0.945577     -0.559603E-01  -4.97660       4.97660       2136.16       2141.13    
  16  0.619446     -0.478930      -42.5917       42.5917       2077.64       2120.23    
  17  0.291083E-01  -3.53673      -314.525       314.525       2188.26       2502.79    
  18  0.372584E-01  -3.28988      -292.572       292.572       2159.84       2452.41    
  19  0.713241     -0.337936      -30.0529       30.0529       2191.68       2221.73    
  20  0.280281      -1.27196      -113.117       113.117       2146.80       2259.91    
  21  0.254796      -1.36729      -121.595       121.595       2082.78       2204.37    
  22  0.498598     -0.695955      -61.8919       61.8919       2126.88       2188.78    
  23  0.515261E-01  -2.96567      -263.739       263.739       2230.32       2494.06    
  24  0.347627      -1.05662      -93.9666       93.9666       2245.22       2339.19    
  25  0.696212     -0.362102      -32.2020       32.2020       2194.93       2227.13    
  26  0.707749E-01  -2.64825      -235.511       235.511       2099.93       2335.44    
  27  0.364523E-01  -3.31175      -294.517       294.517       2090.77       2385.29    
  28  0.895087E-02  -4.71600      -419.399       419.399       2218.66       2638.06    
  29  0.333194      -1.09903      -97.7379       97.7379       2125.29       2223.03    
  30  0.451375     -0.795457      -70.7407       70.7407       2095.32       2166.06    
  31  0.849961E-01  -2.46515      -219.228       219.228       2219.15       2438.38    
  32  0.524791     -0.644756      -57.3387       57.3387       2277.66       2335.00    
  33  0.641068     -0.444619      -39.5404       39.5404       2130.73       2170.27    
  34  0.757376     -0.277895      -24.7135       24.7135       2297.60       2322.32    
  35  0.760597     -0.273651      -24.3361       24.3361       2284.45       2308.78    
  36  0.709070     -0.343801      -30.5745       30.5745       2207.10       2237.67    
  37  0.794718     -0.229768      -20.4335       20.4335       2251.83       2272.26    
  38  0.869679     -0.139632      -12.4176       12.4176       2223.68       2236.10    
  39  0.229100E-01  -3.77618      -335.819       335.819       2129.29       2465.11    
  40  0.935590     -0.665776E-01  -5.92081       5.92081       2237.81       2243.73    
  41  0.889453     -0.117149      -10.4181       10.4181       2278.68       2289.09    
  42  0.529054     -0.636665      -56.6192       56.6192       2168.50       2225.11    
  43  0.907902     -0.966186E-01  -8.59238       8.59238       2251.50       2260.10    
  44  0.693802     -0.365568      -32.5103       32.5103       2289.32       2321.83    
  45  0.883803     -0.123521      -10.9849       10.9849       2336.36       2347.34    
  46  0.275134E-01  -3.59308      -319.536       319.536       2143.13       2462.67    
  47  0.324767      -1.12465      -100.016       100.016       2127.07       2227.09    
  48  0.853326     -0.158614      -14.1057       14.1057       2302.72       2316.82    
  49  0.325639      -1.12197      -99.7776       99.7776       2131.91       2231.69    
  50  0.773280     -0.257115      -22.8654       22.8654       2362.57       2385.44    
  51  0.108890      -2.21741      -197.197       197.197       2112.12       2309.32    
loop,thermsimp(1:2)       94   15.2639       65.5755    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223       2138.52          0.86          1.12         21.88          0.08          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2138.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       94
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       95
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      222     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -26.2205       26.2205       2087.11       2113.33    
   2  0.739179     -0.302215      -26.8763       26.8763       2111.53       2138.40    
   3  0.131167      -2.03128      -180.644       180.644       2077.64       2258.29    
   4  0.523356     -0.647493      -57.5822       57.5822       2136.16       2193.74    
   5  0.660412     -0.414891      -36.8967       36.8967       2143.42       2180.32    
   6  0.433074E-01  -3.13943      -279.193       279.193       2126.23       2405.42    
   7  0.480352     -0.733236      -65.2074       65.2074       2095.32       2160.53    
   8  0.808114     -0.213053      -18.9470       18.9470       2147.06       2166.01    
   9  0.723804     -0.323235      -28.7456       28.7456       2130.73       2159.48    
  10  0.322682      -1.13109      -100.589       100.589       2111.02       2211.60    
  11  0.898907     -0.106576      -9.47792       9.47792       2145.14       2154.61    
  12  0.359972      -1.02173      -90.8632       90.8632       2118.68       2209.55    
  13  0.879118     -0.128836      -11.4575       11.4575       2126.88       2138.34    
  14  0.963559     -0.371220E-01  -3.30129       3.30129       2144.24       2147.54    
  15  0.662848     -0.411210      -36.5693       36.5693       2082.78       2119.35    
  16  0.648402     -0.433244      -38.5288       38.5288       2102.74       2141.27    
  17  0.375343     -0.979916      -87.1448       87.1448       2191.68       2278.82    
  18  0.812441     -0.207712      -18.4721       18.4721       2125.29       2143.76    
  19  0.248177E-01  -3.69620      -328.706       328.706       2168.50       2497.20    
  20  0.653530     -0.425366      -37.8282       37.8282       2127.07       2164.90    
  21  0.712244     -0.339334      -30.1773       30.1773       2194.93       2225.11    
  22  0.358229      -1.02658      -91.2949       91.2949       2131.91       2223.21    
  23  0.325518      -1.12234      -99.8104       99.8104       2223.68       2323.49    
  24  0.770349     -0.260912      -23.2031       23.2031       2207.10       2230.30    
  25  0.633518E-01  -2.75905      -245.365       245.365       2237.81       2483.17    
  26  0.168796      -1.77907      -158.214       158.214       2190.57       2348.78    
  27  0.562007     -0.576241      -51.2456       51.2456       2146.80       2198.04    
  28  0.156316      -1.85588      -165.045       165.045       2251.50       2416.55    
  29  0.967732     -0.328002E-01  -2.91695       2.91695       2251.83       2254.75    
  30  0.538071     -0.619766      -55.1163       55.1163       2169.67       2224.78    
  31  0.967495     -0.330453E-01  -2.93875       2.93875       2278.68       2281.61    
  32  0.771619     -0.259265      -23.0566       23.0566       2284.45       2307.50    
  33  0.246044      -1.40225      -124.703       124.703       2112.12       2236.82    
  34  0.700731     -0.355631      -31.6266       31.6266       2302.72       2334.35    
  35  0.382714     -0.960468      -85.4153       85.4153       2289.32       2374.74    
  36  0.580395     -0.544047      -48.3826       48.3826       2297.60       2345.98    
  37  0.305131      -1.18701      -105.562       105.562       2277.66       2383.23    
  38  0.624250     -0.471204      -41.9046       41.9046       2099.93       2141.83    
  39  0.575432     -0.552634      -49.1462       49.1462       2245.22       2294.37    
  40  0.701335     -0.354770      -31.5500       31.5500       2336.36       2367.91    
  41  0.290211      -1.23715      -110.021       110.021       2144.67       2254.69    
  42  0.140976      -1.95916      -174.230       174.230       2090.77       2265.00    
  43  0.275714      -1.28839      -114.578       114.578       2362.57       2477.15    
  44  0.856479     -0.154925      -13.7777       13.7777       2219.15       2232.93    
  45  0.994286     -0.573084E-02 -0.509649      0.509649       2159.84       2160.35    
  46  0.913008     -0.910102E-01  -8.09362       8.09362       2143.13       2151.22    
  47  0.204063      -1.58933      -141.340       141.340       2129.29       2270.63    
  48  0.388833     -0.944605      -84.0046       84.0046       2230.32       2314.32    
  49  0.781619     -0.246387      -21.9115       21.9115       2188.26       2210.17    
  50  0.373421     -0.985049      -87.6014       87.6014       2171.15       2258.75    
  51  0.834918     -0.180422      -16.0451       16.0451       2138.52       2154.56    
loop,thermsimp(1:2)       95   26.2205       26.8763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       2135.56          0.85          1.12         21.87          0.08          0.05         23.96
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    225       2363.35          0.86          1.12         22.01          0.04          0.05         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2135.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       95
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   71.4870    

hmean,hstd :    2175.96       71.4870    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    2175.96       71.4870    
h(1),h(best1),h(np1) :    2087.11       2077.64       2135.56    
htherm(1),htherm(best1),htherm(np1) :    2113.33       2258.29       2497.20    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        1
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      224     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -345.909       345.909       2087.11       2433.02    
   2  0.977100     -0.231667E-01  -2.06023       2.06023       2082.78       2084.84    
   3  0.491467     -0.710361      -63.1730       63.1730       2126.88       2190.06    
   4  0.802113E-01  -2.52309      -224.381       224.381       2111.53       2335.91    
   5  0.891044     -0.115361      -10.2592       10.2592       2102.74       2113.00    
   6  0.397551     -0.922433      -82.0328       82.0328       2099.93       2181.96    
   7  0.121203      -2.11029      -187.670       187.670       2125.29       2312.96    
   8  0.789985E-01  -2.53833      -225.736       225.736       2144.24       2369.97    
   9  0.921855     -0.813679E-01  -7.23612       7.23612       2143.13       2150.37    
  10  0.252671      -1.37567      -122.339       122.339       2138.52       2260.85    
  11  0.787271     -0.239182      -21.2707       21.2707       2145.14       2166.41    
  12  0.634653     -0.454676      -40.4348       40.4348       2130.73       2171.16    
  13  0.706648     -0.347222      -30.8788       30.8788       2159.84       2190.72    
  14  0.349740E-01  -3.35315      -298.199       298.199       2095.32       2393.52    
  15  0.686787     -0.375731      -33.4141       33.4141       2127.07       2160.48    
  16  0.309348      -1.17329      -104.342       104.342       2147.06       2251.40    
  17  0.703748     -0.351336      -31.2446       31.2446       2143.42       2174.67    
  18  0.985092     -0.150207E-01  -1.33581       1.33581       2136.16       2137.49    
  19  0.440741     -0.819298      -72.8610       72.8610       2146.80       2219.66    
  20  0.796112     -0.228015      -20.2776       20.2776       2118.68       2138.96    
  21  0.451938     -0.794210      -70.6299       70.6299       2188.26       2258.89    
  22  0.230902      -1.46576      -130.352       130.352       2111.02       2241.37    
  23  0.760212     -0.274159      -24.3812       24.3812       2131.91       2156.29    
  24  0.250434E-02  -5.98973      -532.672       532.672       2169.67       2702.34    
  25  0.627913E-01  -2.76794      -246.155       246.155       2194.93       2441.08    
  26  0.263128      -1.33511      -118.733       118.733       2207.10       2325.83    
  27  0.177986      -1.72605      -153.499       153.499       2219.15       2372.65    
  28  0.919776     -0.836247E-01  -7.43682       7.43682       2112.12       2119.56    
  29  0.854272     -0.157506      -14.0072       14.0072       2144.67       2158.68    
  30  0.648187     -0.433576      -38.5583       38.5583       2251.83       2290.39    
  31  0.853797     -0.158061      -14.0566       14.0566       2077.64       2091.70    
  32  0.484551     -0.724533      -64.4334       64.4334       2171.15       2235.58    
  33  0.423817     -0.858454      -76.3431       76.3431       2090.77       2167.11    
  34  0.932015     -0.704065E-01  -6.26131       6.26131       2129.29       2135.55    
  35  0.161906      -1.82074      -161.920       161.920       2191.68       2353.60    
  36  0.812519     -0.207617      -18.4635       18.4635       2278.68       2297.14    
  37  0.346838      -1.05890      -94.1688       94.1688       2245.22       2339.39    
  38  0.477141     -0.739943      -65.8038       65.8038       2284.45       2350.25    
  39  0.931946     -0.704808E-01  -6.26793       6.26793       2230.32       2236.59    
  40  0.189794      -1.66182      -147.787       147.787       2223.68       2371.47    
  41  0.361902      -1.01638      -90.3879       90.3879       2302.72       2393.11    
  42  0.775630E-02  -4.85925      -432.138       432.138       2297.60       2729.74    
  43  0.292497      -1.22930      -109.323       109.323       2190.57       2299.89    
  44  0.264300      -1.33067      -118.338       118.338       2336.36       2454.69    
  45  0.529597     -0.635638      -56.5279       56.5279       2289.32       2345.85    
  46  0.163272      -1.81234      -161.173       161.173       2277.66       2438.84    
  47  0.212593      -1.54838      -137.699       137.699       2126.23       2263.93    
  48  0.359173      -1.02395      -91.0610       91.0610       2251.50       2342.56    
  49  0.993707     -0.631295E-02 -0.561417      0.561417       2362.57       2363.14    
  50  0.261479      -1.34140      -119.292       119.292       2237.81       2357.10    
  51  0.441392     -0.817822      -72.7296       72.7296       2135.56       2208.29    
loop,thermsimp(1:2)        1   345.909       2.06023    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       2332.34          0.86          1.11         21.89          0.03          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2332.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        1
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        2
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      225     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -132.389       132.389       2082.78       2215.17    
   2  0.726663     -0.319292      -28.3949       28.3949       2077.64       2106.04    
   3  0.929061     -0.735808E-01  -6.54361       6.54361       2102.74       2109.28    
   4  0.764703     -0.268268      -23.8573       23.8573       2112.12       2135.98    
   5  0.119617      -2.12346      -188.842       188.842       2129.29       2318.13    
   6  0.369672     -0.995138      -88.4985       88.4985       2136.16       2224.66    
   7  0.875806     -0.132611      -11.7932       11.7932       2118.68       2130.48    
   8  0.657886     -0.418723      -37.2374       37.2374       2143.13       2180.37    
   9  0.387095E-01  -3.25167      -289.174       289.174       2131.91       2421.09    
  10  0.454078     -0.789485      -70.2097       70.2097       2144.67       2214.88    
  11  0.890470     -0.116006      -10.3165       10.3165       2127.07       2137.39    
  12  0.118445      -2.13331      -189.717       189.717       2145.14       2334.85    
  13  0.190238      -1.65948      -147.579       147.579       2090.77       2238.35    
  14  0.435624     -0.830976      -73.8995       73.8995       2130.73       2204.63    
  15  0.768655     -0.263114      -23.3989       23.3989       2143.42       2166.82    
  16  0.870896E-01  -2.44082      -217.064       217.064       2099.93       2316.99    
  17  0.936453     -0.656556E-01  -5.83881       5.83881       2126.88       2132.72    
  18  0.159312      -1.83689      -163.356       163.356       2159.84       2323.20    
  19  0.988165     -0.119051E-01  -1.05873       1.05873       2135.56       2136.62    
  20  0.713347     -0.337787      -30.0397       30.0397       2146.80       2176.84    
  21  0.417075     -0.874489      -77.7692       77.7692       2171.15       2248.91    
  22  0.719048     -0.329827      -29.3318       29.3318       2230.32       2259.65    
  23  0.785519     -0.241411      -21.4689       21.4689       2111.02       2132.48    
  24  0.356994      -1.03004      -91.6020       91.6020       2147.06       2238.66    
  25  0.357951      -1.02736      -91.3641       91.3641       2188.26       2279.63    
  26  0.154816      -1.86552      -165.902       165.902       2138.52       2304.42    
  27  0.246912      -1.39872      -124.390       124.390       2126.23       2250.62    
  28  0.553458     -0.591570      -52.6088       52.6088       2251.83       2304.44    
  29  0.729602     -0.315256      -28.0360       28.0360       2278.68       2306.71    
  30  0.605470     -0.501750      -44.6211       44.6211       2190.57       2235.19    
  31  0.278987E-01  -3.57918      -318.300       318.300       2125.29       2443.59    
  32  0.187991      -1.67136      -148.636       148.636       2207.10       2355.73    
  33  0.543158     -0.610355      -54.2795       54.2795       2111.53       2165.80    
  34  0.996749     -0.325625E-02 -0.289581      0.289581       2245.22       2245.51    
  35  0.540727     -0.614841      -54.6784       54.6784       2251.50       2306.18    
  36  0.833271E-01  -2.48498      -220.992       220.992       2289.32       2510.32    
  37  0.404538     -0.905011      -80.4834       80.4834       2284.45       2364.93    
  38  0.147302      -1.91527      -170.327       170.327       2191.68       2362.00    
  39  0.364226E-01  -3.31257      -294.590       294.590       2237.81       2532.40    
  40  0.381304     -0.964158      -85.7435       85.7435       2362.57       2448.32    
  41  0.737758     -0.304140      -27.0474       27.0474       2144.24       2171.29    
  42  0.179374      -1.71828      -152.808       152.808       2223.68       2376.49    
  43  0.281757      -1.26671      -112.650       112.650       2219.15       2331.80    
  44  0.192633      -1.64697      -146.466       146.466       2302.72       2449.19    
  45  0.954983     -0.460617E-01  -4.09631       4.09631       2095.32       2099.42    
  46  0.710258     -0.342127      -30.4257       30.4257       2087.11       2117.53    
  47  0.831769     -0.184201      -16.3812       16.3812       2277.66       2294.05    
  48  0.912541     -0.915218E-01  -8.13912       8.13912       2194.93       2203.07    
  49  0.221543      -1.50714      -134.031       134.031       2336.36       2470.39    
  50  0.690803E-02  -4.97507      -442.438       442.438       2169.67       2612.10    
  51  0.162616      -1.81637      -161.531       161.531       2332.34       2493.87    
loop,thermsimp(1:2)        2   132.389       28.3949    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       2117.27          0.86          1.11         22.00          0.01          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228       3248.16          0.84          1.12         22.08          0.09          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2117.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        2
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        3
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      227     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -78.0986       78.0986       2095.32       2173.42    
   2  0.117190E-02  -6.74913      -600.206       600.206       2077.64       2677.85    
   3  0.432199     -0.838870      -74.6015       74.6015       2102.74       2177.34    
   4  0.466381     -0.762753      -67.8324       67.8324       2087.11       2154.94    
   5  0.696685     -0.361422      -32.1416       32.1416       2118.68       2150.82    
   6  0.193714      -1.64137      -145.969       145.969       2111.02       2256.98    
   7  0.535145     -0.625217      -55.6011       55.6011       2126.88       2182.48    
   8  0.812984     -0.207044      -18.4126       18.4126       2112.12       2130.53    
   9  0.956789     -0.441723E-01  -3.92828       3.92828       2135.56       2139.49    
  10  0.496711E-01  -3.00233      -267.000       267.000       2127.07       2394.07    
  11  0.206308E-01  -3.88097      -345.138       345.138       2111.53       2456.66    
  12  0.423434     -0.859358      -76.4236       76.4236       2143.42       2219.84    
  13  0.216826      -1.52866      -135.945       135.945       2144.24       2280.18    
  14  0.792422     -0.232661      -20.6908       20.6908       2146.80       2167.49    
  15  0.265940      -1.32449      -117.788       117.788       2143.13       2260.92    
  16  0.993400     -0.662201E-02 -0.588902      0.588902       2194.93       2195.52    
  17  0.645200E-01  -2.74078      -243.740       243.740       2130.73       2374.47    
  18  0.651527     -0.428436      -38.1012       38.1012       2144.67       2182.77    
  19  0.858875     -0.152131      -13.5292       13.5292       2082.78       2096.31    
  20  0.126056      -2.07103      -184.178       184.178       2136.16       2320.34    
  21  0.772661E-01  -2.56050      -227.708       227.708       2190.57       2418.28    
  22  0.441429     -0.817737      -72.7221       72.7221       2090.77       2163.49    
  23  0.166586      -1.79224      -159.386       159.386       2147.06       2306.45    
  24  0.217490      -1.52560      -135.673       135.673       2245.22       2380.90    
  25  0.632871     -0.457488      -40.6849       40.6849       2171.15       2211.83    
  26  0.201694      -1.60100      -142.379       142.379       2126.23       2268.61    
  27  0.282690      -1.26341      -112.356       112.356       2230.32       2342.67    
  28  0.255086E-01  -3.66874      -326.265       326.265       2188.26       2514.53    
  29  0.562308     -0.575706      -51.1980       51.1980       2277.66       2328.86    
  30  0.283366E-01  -3.56360      -316.914       316.914       2138.52       2455.43    
  31  0.404254E-01  -3.20830      -285.317       285.317       2251.83       2537.15    
  32  0.170475      -1.76917      -157.334       157.334       2251.50       2408.84    
  33  0.141712      -1.95396      -173.767       173.767       2278.68       2452.44    
  34  0.773173     -0.257253      -22.8777       22.8777       2099.93       2122.80    
  35  0.255978      -1.36266      -121.183       121.183       2129.29       2250.48    
  36  0.823739     -0.193902      -17.2439       17.2439       2159.84       2177.08    
  37  0.166307      -1.79392      -159.535       159.535       2219.15       2378.69    
  38  0.676319     -0.391090      -34.7800       34.7800       2145.14       2179.92    
  39  0.144546      -1.93416      -172.006       172.006       2207.10       2379.10    
  40  0.593436     -0.521826      -46.4065       46.4065       2191.68       2238.08    
  41  0.762921     -0.270600      -24.0647       24.0647       2284.45       2308.51    
  42  0.855796     -0.155724      -13.8486       13.8486       2223.68       2237.53    
  43  0.433555     -0.835737      -74.3228       74.3228       2131.91       2206.23    
  44  0.252891      -1.37480      -122.262       122.262       2125.29       2247.55    
  45  0.942909     -0.587850E-01  -5.22781       5.22781       2362.57       2367.80    
  46  0.432313     -0.838605      -74.5779       74.5779       2302.72       2377.30    
  47  0.975713     -0.245869E-01  -2.18654       2.18654       2336.36       2338.54    
  48  0.541226     -0.613919      -54.5964       54.5964       2332.34       2386.94    
  49  0.255057      -1.36627      -121.504       121.504       2289.32       2410.83    
  50  0.202141      -1.59879      -142.182       142.182       2237.81       2379.99    
  51  0.949562     -0.517549E-01  -4.60261       4.60261       2117.27       2121.87    
loop,thermsimp(1:2)        3   78.0986       600.206    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229       2151.05          0.86          1.11         22.16          0.07          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230       2468.40          0.86          1.11         21.83          0.20          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2151.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        3
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        4
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      229     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -37.4079       37.4079       2082.78       2120.18    
   2  0.880966     -0.126736      -11.2707       11.2707       2117.27       2128.54    
   3  0.854972     -0.156687      -13.9343       13.9343       2099.93       2113.86    
   4  0.797101     -0.226774      -20.1672       20.1672       2112.12       2132.29    
   5  0.158477      -1.84214      -163.824       163.824       2135.56       2299.38    
   6  0.593839     -0.521148      -46.3461       46.3461       2118.68       2165.03    
   7  0.817101     -0.201993      -17.9634       17.9634       2087.11       2105.07    
   8  0.997190     -0.281377E-02 -0.250231      0.250231       2090.77       2091.02    
   9  0.402857     -0.909174      -80.8537       80.8537       2146.80       2227.65    
  10  0.690455     -0.370405      -32.9405       32.9405       2095.32       2128.26    
  11  0.609635     -0.494895      -44.0115       44.0115       2159.84       2203.85    
  12  0.491117     -0.711073      -63.2364       63.2364       2102.74       2165.98    
  13  0.990676     -0.936814E-02 -0.833117      0.833117       2145.14       2145.97    
  14  0.976919     -0.233519E-01  -2.07671       2.07671       2126.88       2128.96    
  15  0.692556     -0.367366      -32.6702       32.6702       2144.67       2177.34    
  16  0.549694     -0.598394      -53.2158       53.2158       2194.93       2248.15    
  17  0.538267E-01  -2.92199      -259.855       259.855       2131.91       2391.77    
  18  0.602193     -0.507178      -45.1038       45.1038       2171.15       2216.25    
  19  0.537276     -0.621243      -55.2477       55.2477       2143.42       2198.67    
  20  0.338220      -1.08406      -96.4063       96.4063       2223.68       2320.09    
  21  0.306772      -1.18165      -105.085       105.085       2191.68       2296.76    
  22  0.895389     -0.110497      -9.82664       9.82664       2125.29       2135.11    
  23  0.120096      -2.11946      -188.486       188.486       2129.29       2317.78    
  24  0.680166     -0.385418      -34.2756       34.2756       2111.02       2145.29    
  25  0.369434     -0.995782      -88.5558       88.5558       2143.13       2231.69    
  26  0.235484      -1.44611      -128.604       128.604       2126.23       2254.83    
  27  0.260836      -1.34386      -119.511       119.511       2144.24       2263.75    
  28  0.720259     -0.328144      -29.1822       29.1822       2147.06       2176.24    
  29  0.695069     -0.363744      -32.3481       32.3481       2284.45       2316.80    
  30  0.105076      -2.25307      -200.368       200.368       2136.16       2336.53    
  31  0.968349     -0.321628E-01  -2.86027       2.86027       2277.66       2280.52    
  32  0.974131     -0.262091E-01  -2.33080       2.33080       2336.36       2338.69    
  33  0.647785E-01  -2.73678      -243.384       243.384       2230.32       2473.70    
  34  0.910402     -0.938690E-01  -8.34785       8.34785       2362.57       2370.92    
  35  0.488733     -0.715939      -63.6691       63.6691       2130.73       2194.40    
  36  0.377436E-01  -3.27694      -291.421       291.421       2302.72       2594.14    
  37  0.154608      -1.86686      -166.022       166.022       2219.15       2385.17    
  38  0.277804      -1.28084      -113.906       113.906       2207.10       2321.00    
  39  0.969547     -0.309263E-01  -2.75030       2.75030       2237.81       2240.56    
  40  0.380083     -0.967367      -86.0288       86.0288       2245.22       2331.25    
  41  0.751822     -0.285256      -25.3681       25.3681       2332.34       2357.71    
  42  0.137692      -1.98274      -176.327       176.327       2127.07       2303.40    
  43  0.293470      -1.22598      -109.028       109.028       2251.50       2360.53    
  44  0.433705     -0.835390      -74.2920       74.2920       2289.32       2363.62    
  45  0.418034     -0.872194      -77.5650       77.5650       2190.57       2268.13    
  46  0.166728      -1.79139      -159.310       159.310       2278.68       2437.99    
  47  0.921960     -0.812537E-01  -7.22597       7.22597       2138.52       2145.74    
  48  0.412601     -0.885275      -78.7283       78.7283       2111.53       2190.25    
  49  0.925181     -0.777655E-01  -6.91576       6.91576       2188.26       2195.18    
  50  0.687711     -0.374386      -33.2945       33.2945       2251.83       2285.13    
  51  0.729890     -0.314862      -28.0010       28.0010       2151.05       2179.05    
loop,thermsimp(1:2)        4   37.4079       11.2707    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231       2244.96          0.86          1.11         21.93          0.01          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2244.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        4
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        5
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      230     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -41.0569       41.0569       2090.77       2131.83    
   2  0.876370     -0.131967      -11.7359       11.7359       2087.11       2098.85    
   3  0.840080     -0.174259      -15.4970       15.4970       2099.93       2115.42    
   4  0.608986E-01  -2.79854      -248.877       248.877       2082.78       2331.65    
   5  0.311901      -1.16507      -103.611       103.611       2095.32       2198.93    
   6  0.937552E-01  -2.36707      -210.506       210.506       2117.27       2327.78    
   7  0.608418     -0.496893      -44.1892       44.1892       2126.88       2171.07    
   8  0.297707      -1.21164      -107.753       107.753       2112.12       2219.87    
   9  0.365777      -1.00573      -89.4406       89.4406       2125.29       2214.73    
  10  0.194673      -1.63643      -145.529       145.529       2111.02       2256.54    
  11  0.941388     -0.604003E-01  -5.37146       5.37146       2138.52       2143.89    
  12  0.984881     -0.152343E-01  -1.35480       1.35480       2145.14       2146.49    
  13  0.750245     -0.287355      -25.5547       25.5547       2118.68       2144.24    
  14  0.437446     -0.826803      -73.5283       73.5283       2102.74       2176.27    
  15  0.174754      -1.74437      -155.129       155.129       2147.06       2302.19    
  16  0.300465E-01  -3.50501      -311.704       311.704       2144.67       2456.37    
  17  0.372924     -0.986380      -87.7197       87.7197       2151.05       2238.77    
  18  0.803506     -0.218771      -19.4555       19.4555       2111.53       2130.98    
  19  0.232583      -1.45851      -129.707       129.707       2130.73       2260.44    
  20  0.383368     -0.958759      -85.2633       85.2633       2188.26       2273.52    
  21  0.622786     -0.473552      -42.1134       42.1134       2143.42       2185.53    
  22  0.356422      -1.03164      -91.7447       91.7447       2159.84       2251.58    
  23  0.919964     -0.834212E-01  -7.41873       7.41873       2171.15       2178.56    
  24  0.550740     -0.596492      -53.0466       53.0466       2146.80       2199.84    
  25  0.402627     -0.909745      -80.9044       80.9044       2143.13       2224.03    
  26  0.256265      -1.36154      -121.083       121.083       2237.81       2358.89    
  27  0.763510     -0.269828      -23.9961       23.9961       2194.93       2218.93    
  28  0.388963     -0.944271      -83.9749       83.9749       2126.23       2210.20    
  29  0.981923     -0.182423E-01  -1.62230       1.62230       2144.24       2145.86    
  30  0.656629     -0.420635      -37.4075       37.4075       2190.57       2227.98    
  31  0.932472     -0.699161E-01  -6.21771       6.21771       2277.66       2283.88    
  32  0.336775      -1.08834      -96.7872       96.7872       2251.83       2348.62    
  33  0.810758     -0.209786      -18.6565       18.6565       2191.68       2210.33    
  34  0.557014     -0.585166      -52.0393       52.0393       2135.56       2187.60    
  35  0.652747     -0.426565      -37.9348       37.9348       2127.07       2165.01    
  36  0.890774     -0.115665      -10.2862       10.2862       2284.45       2294.73    
  37  0.703035     -0.352349      -31.3347       31.3347       2129.29       2160.63    
  38  0.534296     -0.626805      -55.7423       55.7423       2223.68       2279.43    
  39  0.604162     -0.503914      -44.8135       44.8135       2207.10       2251.91    
  40  0.545557     -0.605948      -53.8875       53.8875       2245.22       2299.11    
  41  0.371346     -0.990620      -88.0968       88.0968       2136.16       2224.25    
  42  0.491801     -0.709680      -63.1125       63.1125       2336.36       2399.47    
  43  0.879731     -0.128139      -11.3955       11.3955       2332.34       2343.74    
  44  0.995113     -0.489866E-02 -0.435642      0.435642       2251.50       2251.94    
  45  0.467927     -0.759444      -67.5380       67.5380       2289.32       2356.86    
  46  0.355083      -1.03540      -92.0793       92.0793       2362.57       2454.65    
  47  0.216960      -1.52804      -135.890       135.890       2219.15       2355.04    
  48  0.276988      -1.28378      -114.168       114.168       2131.91       2246.08    
  49  0.905458     -0.993144E-01  -8.83212       8.83212       2278.68       2287.51    
  50  0.704241     -0.350635      -31.1823       31.1823       2230.32       2261.50    
  51  0.784564     -0.242627      -21.5771       21.5771       2244.96       2266.54    
loop,thermsimp(1:2)        5   41.0569       11.7359    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       2183.15          0.86          1.12         21.95          0.08          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2183.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        5
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        6
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      231     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -136.294       136.294       2087.11       2223.40    
   2  0.942431     -0.592928E-01  -5.27297       5.27297       2099.93       2105.20    
   3  0.193824      -1.64081      -145.918       145.918       2111.53       2257.44    
   4  0.162512      -1.81700      -161.588       161.588       2090.77       2252.36    
   5  0.625243     -0.469616      -41.7634       41.7634       2138.52       2180.28    
   6  0.499178     -0.694793      -61.7886       61.7886       2118.68       2180.47    
   7  0.706095     -0.348006      -30.9485       30.9485       2144.24       2175.19    
   8  0.527414     -0.639770      -56.8953       56.8953       2145.14       2202.03    
   9  0.575748     -0.552085      -49.0974       49.0974       2129.29       2178.39    
  10  0.490522     -0.712286      -63.3443       63.3443       2127.07       2190.41    
  11  0.306517      -1.18248      -105.159       105.159       2126.88       2232.04    
  12  0.798470     -0.225057      -20.0146       20.0146       2102.74       2122.75    
  13  0.333550      -1.09796      -97.6429       97.6429       2171.15       2268.79    
  14  0.166731      -1.79138      -159.309       159.309       2143.42       2302.73    
  15  0.443580     -0.812878      -72.2900       72.2900       2135.56       2207.85    
  16  0.669985     -0.400500      -35.6169       35.6169       2095.32       2130.94    
  17  0.339921      -1.07904      -95.9602       95.9602       2146.80       2242.76    
  18  0.201260      -1.60316      -142.570       142.570       2126.23       2268.80    
  19  0.772250     -0.258447      -22.9839       22.9839       2191.68       2214.66    
  20  0.401372E-01  -3.21545      -285.953       285.953       2125.29       2411.24    
  21  0.940962     -0.608526E-01  -5.41168       5.41168       2194.93       2200.34    
  22  0.115324      -2.16001      -192.092       192.092       2112.12       2304.21    
  23  0.939991E-01  -2.36447      -210.275       210.275       2143.13       2353.40    
  24  0.412221     -0.886196      -78.8102       78.8102       2136.16       2214.97    
  25  0.136462      -1.99171      -177.125       177.125       2190.57       2367.69    
  26  0.310095      -1.17088      -104.127       104.127       2151.05       2255.18    
  27  0.985727     -0.143755E-01  -1.27843       1.27843       2131.91       2133.19    
  28  0.900161     -0.105182      -9.35390       9.35390       2159.84       2169.19    
  29  0.250220      -1.38542      -123.206       123.206       2207.10       2330.30    
  30  0.780405     -0.247942      -22.0497       22.0497       2251.50       2273.55    
  31  0.228719      -1.47526      -131.196       131.196       2111.02       2242.21    
  32  0.407088     -0.898727      -79.9246       79.9246       2130.73       2210.65    
  33  0.975627     -0.246749E-01  -2.19436       2.19436       2230.32       2232.51    
  34  0.885140     -0.122009      -10.8504       10.8504       2244.96       2255.81    
  35  0.896135     -0.109664      -9.75254       9.75254       2188.26       2198.01    
  36  0.856661     -0.154713      -13.7588       13.7588       2223.68       2237.44    
  37  0.258643      -1.35231      -120.262       120.262       2277.66       2397.93    
  38  0.336283      -1.08980      -96.9170       96.9170       2278.68       2375.59    
  39  0.868205     -0.141327      -12.5683       12.5683       2284.45       2297.02    
  40  0.937935     -0.640747E-01  -5.69822       5.69822       2245.22       2250.92    
  41  0.418906     -0.870109      -77.3796       77.3796       2147.06       2224.44    
  42  0.351040      -1.04685      -93.0977       93.0977       2117.27       2210.37    
  43  0.611628E-01  -2.79422      -248.492       248.492       2082.78       2331.27    
  44  0.153518      -1.87394      -166.651       166.651       2332.34       2498.99    
  45  0.938341     -0.636423E-01  -5.65977       5.65977       2251.83       2257.49    
  46  0.598133     -0.513942      -45.7053       45.7053       2219.15       2264.86    
  47  0.795771     -0.228444      -20.3158       20.3158       2289.32       2309.64    
  48  0.295375      -1.21951      -108.452       108.452       2237.81       2346.26    
  49  0.804738     -0.217239      -19.3193       19.3193       2336.36       2355.67    
  50  0.260094      -1.34671      -119.765       119.765       2362.57       2482.34    
  51  0.640517     -0.445479      -39.6169       39.6169       2183.15       2222.77    
loop,thermsimp(1:2)        6   136.294       5.27297    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       2292.31          0.86          1.12         21.89          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2292.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        6
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        7
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      232     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -118.366       118.366       2099.93       2218.29    
   2  0.401807     -0.911784      -81.0858       81.0858       2102.74       2183.83    
   3  0.418885     -0.870159      -77.3840       77.3840       2095.32       2172.71    
   4  0.753378     -0.283189      -25.1842       25.1842       2131.91       2157.10    
   5  0.792066     -0.233111      -20.7308       20.7308       2159.84       2180.57    
   6  0.868474     -0.141017      -12.5408       12.5408       2144.24       2156.78    
   7  0.318670      -1.14360      -101.701       101.701       2129.29       2230.99    
   8  0.863267     -0.147031      -13.0756       13.0756       2138.52       2151.59    
   9  0.589255     -0.528896      -47.0352       47.0352       2118.68       2165.72    
  10  0.632079E-01  -2.76133      -245.567       245.567       2127.07       2372.64    
  11  0.992270     -0.775975E-02 -0.690082      0.690082       2188.26       2188.95    
  12  0.466140     -0.763269      -67.8782       67.8782       2194.93       2262.81    
  13  0.177509      -1.72873      -153.738       153.738       2145.14       2298.87    
  14  0.933326     -0.690005E-01  -6.13628       6.13628       2135.56       2141.69    
  15  0.876357     -0.131982      -11.7372       11.7372       2117.27       2129.01    
  16  0.673496     -0.395274      -35.1521       35.1521       2130.73       2165.88    
  17  0.648708     -0.432773      -38.4869       38.4869       2191.68       2230.16    
  18  0.400813     -0.914259      -81.3059       81.3059       2136.16       2217.46    
  19  0.763164     -0.270282      -24.0364       24.0364       2183.15       2207.19    
  20  0.196240      -1.62842      -144.817       144.817       2087.11       2231.93    
  21  0.923666     -0.794046E-01  -7.06152       7.06152       2147.06       2154.12    
  22  0.999600     -0.400298E-03 -0.355988E-01  0.355988E-01   2126.88       2126.92    
  23  0.379715     -0.968335      -86.1150       86.1150       2230.32       2316.43    
  24  0.197375      -1.62265      -144.304       144.304       2223.68       2367.99    
  25  0.760736     -0.273468      -24.3198       24.3198       2111.02       2135.34    
  26  0.392182     -0.936030      -83.2420       83.2420       2146.80       2230.04    
  27  0.256208      -1.36177      -121.103       121.103       2245.22       2366.33    
  28  0.251796      -1.37914      -122.648       122.648       2090.77       2213.42    
  29  0.332089E-01  -3.40494      -302.804       302.804       2151.05       2453.86    
  30  0.970457     -0.299883E-01  -2.66689       2.66689       2244.96       2247.63    
  31  0.467370E-01  -3.06322      -272.415       272.415       2111.53       2383.94    
  32  0.716125     -0.333901      -29.6941       29.6941       2251.83       2281.53    
  33  0.757897     -0.277208      -24.6523       24.6523       2219.15       2243.80    
  34  0.765628     -0.267059      -23.7498       23.7498       2171.15       2194.90    
  35  0.323816      -1.12758      -100.277       100.277       2126.23       2226.51    
  36  0.909845     -0.944807E-01  -8.40226       8.40226       2251.50       2259.91    
  37  0.515782     -0.662071      -58.8786       58.8786       2284.45       2343.33    
  38  0.464370     -0.767074      -68.2166       68.2166       2143.42       2211.64    
  39  0.445707     -0.808094      -71.8646       71.8646       2112.12       2183.99    
  40  0.786320     -0.240391      -21.3782       21.3782       2289.32       2310.70    
  41  0.631860     -0.459087      -40.8270       40.8270       2207.10       2247.92    
  42  0.672488     -0.396772      -35.2853       35.2853       2082.78       2118.06    
  43  0.251717E-02  -5.98462      -532.218       532.218       2237.81       2770.03    
  44  0.245023      -1.40640      -125.073       125.073       2143.13       2268.20    
  45  0.252688      -1.37560      -122.333       122.333       2336.36       2458.69    
  46  0.268946      -1.31324      -116.788       116.788       2190.57       2307.36    
  47  0.550357     -0.597189      -53.1086       53.1086       2278.68       2331.78    
  48  0.826205     -0.190912      -16.9780       16.9780       2277.66       2294.64    
  49  0.964276     -0.363780E-01  -3.23513       3.23513       2125.29       2128.52    
  50  0.415479     -0.878324      -78.1101       78.1101       2362.57       2440.68    
  51  0.599143E-01  -2.81484      -250.326       250.326       2292.31       2542.63    
loop,thermsimp(1:2)        7   118.366       81.0858    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234       2295.95          0.86          1.11         21.88          0.08          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2295.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        7
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        8
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      233     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -199.746       199.746       2082.78       2282.52    
   2  0.476819     -0.740619      -65.8640       65.8640       2126.88       2192.75    
   3  0.564430     -0.571938      -50.8630       50.8630       2125.29       2176.15    
   4  0.211741      -1.55239      -138.056       138.056       2117.27       2255.33    
   5  0.154226E-01  -4.17192      -371.013       371.013       2111.02       2482.03    
   6  0.489577     -0.714213      -63.5156       63.5156       2135.56       2199.07    
   7  0.583965     -0.537914      -47.8372       47.8372       2138.52       2186.35    
   8  0.430258     -0.843370      -75.0017       75.0017       2147.06       2222.06    
   9  0.280982      -1.26946      -112.895       112.895       2144.24       2257.13    
  10  0.535183     -0.625146      -55.5949       55.5949       2131.91       2187.51    
  11  0.306750      -1.18172      -105.092       105.092       2118.68       2223.77    
  12  0.924930     -0.780370E-01  -6.93990       6.93990       2130.73       2137.67    
  13  0.829670E-01  -2.48931      -221.377       221.377       2095.32       2316.70    
  14  0.330275      -1.10783      -98.5203       98.5203       2159.84       2258.36    
  15  0.229751      -1.47076      -130.796       130.796       2102.74       2233.54    
  16  0.455737     -0.785839      -69.8854       69.8854       2112.12       2182.01    
  17  0.830949     -0.185187      -16.4689       16.4689       2188.26       2204.73    
  18  0.148624      -1.90634      -169.533       169.533       2171.15       2340.68    
  19  0.883001     -0.124429      -11.0656       11.0656       2183.15       2194.22    
  20  0.668001     -0.403466      -35.8806       35.8806       2143.42       2179.30    
  21  0.610583     -0.493341      -43.8733       43.8733       2090.77       2134.64    
  22  0.689050     -0.372441      -33.1215       33.1215       2136.16       2169.28    
  23  0.124417      -2.08412      -185.343       185.343       2099.93       2285.27    
  24  0.785584E-01  -2.54391      -226.233       226.233       2126.23       2352.46    
  25  0.936565     -0.655366E-01  -5.82823       5.82823       2146.80       2152.62    
  26  0.483719     -0.726252      -64.5862       64.5862       2191.68       2256.26    
  27  0.715685     -0.334515      -29.7488       29.7488       2129.29       2159.04    
  28  0.786437     -0.240243      -21.3650       21.3650       2087.11       2108.47    
  29  0.361023      -1.01881      -90.6041       90.6041       2219.15       2309.76    
  30  0.325559      -1.12221      -99.7992       99.7992       2244.96       2344.76    
  31  0.850460     -0.161978      -14.4049       14.4049       2207.10       2221.50    
  32  0.301358      -1.19946      -106.669       106.669       2251.50       2358.17    
  33  0.304725      -1.18834      -105.681       105.681       2194.93       2300.61    
  34  0.887065     -0.119838      -10.6573       10.6573       2143.13       2153.79    
  35  0.762822     -0.270730      -24.0763       24.0763       2251.83       2275.91    
  36  0.364130      -1.01024      -89.8420       89.8420       2277.66       2367.51    
  37  0.762041     -0.271754      -24.1674       24.1674       2145.14       2169.30    
  38  0.941180     -0.606207E-01  -5.39105       5.39105       2190.57       2195.96    
  39  0.449403     -0.799835      -71.1301       71.1301       2289.32       2360.45    
  40  0.743855     -0.295910      -26.3155       26.3155       2230.32       2256.63    
  41  0.743104     -0.296920      -26.4054       26.4054       2278.68       2305.08    
  42  0.350527      -1.04832      -93.2278       93.2278       2284.45       2377.68    
  43  0.607240     -0.498831      -44.3615       44.3615       2245.22       2289.58    
  44  0.557347     -0.584567      -51.9861       51.9861       2223.68       2275.67    
  45  0.217970      -1.52340      -135.477       135.477       2127.07       2262.55    
  46  0.364570      -1.00904      -89.7345       89.7345       2111.53       2201.26    
  47  0.330900      -1.10594      -98.3522       98.3522       2362.57       2460.93    
  48  0.861127     -0.149514      -13.2964       13.2964       2151.05       2164.35    
  49  0.710764E-01  -2.64400      -235.133       235.133       2336.36       2571.49    
  50  0.264543      -1.32975      -118.256       118.256       2292.31       2410.56    
  51  0.985836     -0.142654E-01  -1.26864       1.26864       2295.95       2297.22    
loop,thermsimp(1:2)        8   199.746       65.8640    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       2100.18          0.86          1.12         21.96          0.03          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236       2214.64          0.85          1.11         21.91          0.04          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2100.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        8
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:        9
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      235     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -39.4914       39.4914       2087.11       2126.60    
   2  0.805197     -0.216668      -19.2685       19.2685       2090.77       2110.04    
   3  0.976428     -0.238543E-01  -2.12139       2.12139       2130.73       2132.85    
   4  0.599028     -0.512447      -45.5724       45.5724       2146.80       2192.37    
   5  0.591081     -0.525802      -46.7601       46.7601       2143.13       2189.89    
   6  0.151500      -1.88717      -167.827       167.827       2129.29       2297.12    
   7  0.565682     -0.569723      -50.6660       50.6660       2151.05       2201.72    
   8  0.345258      -1.06346      -94.5748       94.5748       2136.16       2230.73    
   9  0.658101     -0.418397      -37.2084       37.2084       2145.14       2182.34    
  10  0.691977E-01  -2.67079      -237.516       237.516       2125.29       2362.80    
  11  0.289062      -1.24111      -110.373       110.373       2143.42       2253.79    
  12  0.949819     -0.514835E-01  -4.57848       4.57848       2112.12       2116.70    
  13  0.791632     -0.233658      -20.7794       20.7794       2138.52       2159.29    
  14  0.400532     -0.914962      -81.3684       81.3684       2131.91       2213.28    
  15  0.241886      -1.41929      -126.219       126.219       2126.88       2253.10    
  16  0.383016     -0.959678      -85.3451       85.3451       2183.15       2268.49    
  17  0.993978     -0.604041E-02 -0.537179      0.537179       2190.57       2191.11    
  18  0.807089     -0.214322      -19.0598       19.0598       2135.56       2154.62    
  19  0.732161     -0.311755      -27.7246       27.7246       2111.53       2139.25    
  20  0.176507      -1.73440      -154.242       154.242       2188.26       2342.50    
  21  0.628098     -0.465059      -41.3581       41.3581       2207.10       2248.45    
  22  0.383392     -0.958697      -85.2578       85.2578       2147.06       2232.32    
  23  0.906421     -0.982517E-01  -8.73762       8.73762       2118.68       2127.42    
  24  0.329288      -1.11082      -98.7866       98.7866       2102.74       2201.53    
  25  0.869436     -0.139911      -12.4424       12.4424       2117.27       2129.71    
  26  0.354994      -1.03565      -92.1016       92.1016       2191.68       2283.78    
  27  0.127935      -2.05623      -182.863       182.863       2230.32       2413.18    
  28  0.840123     -0.174207      -15.4924       15.4924       2144.24       2159.73    
  29  0.625861     -0.468627      -41.6754       41.6754       2159.84       2201.52    
  30  0.488384     -0.716653      -63.7326       63.7326       2127.07       2190.80    
  31  0.888226E-01  -2.42111      -215.312       215.312       2223.68       2438.99    
  32  0.262955      -1.33577      -118.791       118.791       2251.83       2370.62    
  33  0.153205E-01  -4.17856      -371.604       371.604       2082.78       2454.38    
  34  0.432355     -0.838509      -74.5694       74.5694       2099.93       2174.50    
  35  0.225273      -1.49044      -132.546       132.546       2245.22       2377.77    
  36  0.812147     -0.208074      -18.5042       18.5042       2295.95       2314.46    
  37  0.832805E-01  -2.48554      -221.041       221.041       2194.93       2415.97    
  38  0.442280     -0.815813      -72.5510       72.5510       2278.68       2351.23    
  39  0.106639      -2.23831      -199.055       199.055       2219.15       2418.21    
  40  0.143053      -1.94454      -172.929       172.929       2095.32       2268.25    
  41  0.871774     -0.137225      -12.2036       12.2036       2171.15       2183.35    
  42  0.137692      -1.98273      -176.326       176.326       2244.96       2421.29    
  43  0.366512      -1.00372      -89.2622       89.2622       2126.23       2215.49    
  44  0.617157     -0.482633      -42.9210       42.9210       2251.50       2294.42    
  45  0.420337     -0.866700      -77.0764       77.0764       2289.32       2366.40    
  46  0.935846     -0.663044E-01  -5.89651       5.89651       2277.66       2283.56    
  47  0.979912     -0.202925E-01  -1.80463       1.80463       2284.45       2286.25    
  48  0.692793     -0.367024      -32.6398       32.6398       2292.31       2324.95    
  49  0.155424      -1.86160      -165.554       165.554       2362.57       2528.13    
  50  0.703218     -0.352088      -31.3115       31.3115       2111.02       2142.33    
  51  0.396734     -0.924489      -82.2157       82.2157       2100.18       2182.39    
loop,thermsimp(1:2)        9   39.4914       19.2685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       2116.37          0.85          1.12         22.02          0.02          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238       2822.81          0.85          1.11         21.94          0.02          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2116.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:        9
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       10
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      237     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -16.2322       16.2322       2090.77       2107.00    
   2  0.367543      -1.00091      -89.0122       89.0122       2112.12       2201.13    
   3  0.528755     -0.637231      -56.6695       56.6695       2087.11       2143.78    
   4  0.776829     -0.252535      -22.4582       22.4582       2118.68       2141.14    
   5  0.149594E-01  -4.20242      -373.725       373.725       2117.27       2491.00    
   6  0.892228     -0.114033      -10.1411       10.1411       2130.73       2140.87    
   7  0.191037      -1.65529      -147.206       147.206       2111.53       2258.73    
   8  0.516533     -0.660616      -58.7492       58.7492       2111.02       2169.76    
   9  0.273230      -1.29744      -115.383       115.383       2135.56       2250.94    
  10  0.822225     -0.195741      -17.4074       17.4074       2138.52       2155.92    
  11  0.359850      -1.02207      -90.8935       90.8935       2144.24       2235.13    
  12  0.611658     -0.491581      -43.7168       43.7168       2099.93       2143.64    
  13  0.249481      -1.38837      -123.469       123.469       2145.14       2268.60    
  14  0.441252     -0.818139      -72.7579       72.7579       2100.18       2172.94    
  15  0.910514E-01  -2.39633      -213.108       213.108       2171.15       2384.25    
  16  0.745146     -0.294175      -26.1613       26.1613       2143.13       2169.29    
  17  0.758301     -0.276675      -24.6050       24.6050       2127.07       2151.68    
  18  0.638521     -0.448601      -39.8945       39.8945       2190.57       2230.46    
  19  0.150180      -1.89592      -168.606       168.606       2146.80       2315.40    
  20  0.144147      -1.93692      -172.252       172.252       2159.84       2332.09    
  21  0.104928      -2.25448      -200.493       200.493       2102.74       2303.23    
  22  0.398120     -0.921002      -81.9056       81.9056       2151.05       2232.96    
  23  0.802258     -0.220325      -19.5937       19.5937       2131.91       2151.50    
  24  0.399299     -0.918044      -81.6425       81.6425       2126.23       2207.87    
  25  0.493060     -0.707124      -62.8852       62.8852       2136.16       2199.04    
  26  0.504407     -0.684372      -60.8618       60.8618       2147.06       2207.92    
  27  0.762058     -0.271733      -24.1655       24.1655       2207.10       2231.26    
  28  0.430267     -0.843350      -74.9999       74.9999       2126.88       2201.88    
  29  0.993832     -0.618725E-02 -0.550238      0.550238       2143.42       2143.97    
  30  0.705390     -0.349005      -31.0373       31.0373       2095.32       2126.36    
  31  0.969760     -0.307069E-01  -2.73079       2.73079       2183.15       2185.88    
  32  0.245618      -1.40398      -124.857       124.857       2277.66       2402.52    
  33  0.685790     -0.377184      -33.5434       33.5434       2191.68       2225.22    
  34  0.905089     -0.997222E-01  -8.86838       8.86838       2284.45       2293.32    
  35  0.414065     -0.881732      -78.4132       78.4132       2251.50       2329.92    
  36  0.714747E-01  -2.63841      -234.636       234.636       2129.29       2363.93    
  37  0.694510     -0.364548      -32.4196       32.4196       2295.95       2328.37    
  38  0.770213E-01  -2.56367      -227.990       227.990       2292.31       2520.30    
  39  0.846173     -0.167031      -14.8542       14.8542       2188.26       2203.12    
  40  0.485012     -0.723582      -64.3488       64.3488       2278.68       2343.02    
  41  0.345787      -1.06193      -94.4387       94.4387       2125.29       2219.73    
  42  0.851861     -0.160332      -14.2584       14.2584       2289.32       2303.58    
  43  0.774151     -0.255989      -22.7653       22.7653       2251.83       2274.60    
  44  0.512382     -0.668685      -59.4667       59.4667       2245.22       2304.69    
  45  0.839798     -0.174594      -15.5268       15.5268       2230.32       2245.84    
  46  0.430550     -0.842692      -74.9414       74.9414       2194.93       2269.87    
  47  0.988263     -0.118067E-01  -1.04998       1.04998       2219.15       2220.20    
  48  0.349495      -1.05127      -93.4900       93.4900       2244.96       2338.45    
  49  0.290701      -1.23546      -109.871       109.871       2223.68       2333.55    
  50  0.210466      -1.55843      -138.593       138.593       2082.78       2221.37    
  51  0.361038      -1.01877      -90.6003       90.6003       2116.37       2206.97    
loop,thermsimp(1:2)       10   16.2322       89.0122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       2341.10          0.86          1.11         21.91          0.01          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2341.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       10
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       11
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      238     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -7.47353       7.47353       2090.77       2098.24    
   2  0.309089      -1.17413      -104.416       104.416       2095.32       2199.74    
   3  0.237901      -1.43590      -127.696       127.696       2130.73       2258.43    
   4  0.542467     -0.611627      -54.3926       54.3926       2118.68       2173.07    
   5  0.523672     -0.646889      -57.5285       57.5285       2099.93       2157.45    
   6  0.850058     -0.162450      -14.4468       14.4468       2087.11       2101.56    
   7  0.589343     -0.528746      -47.0219       47.0219       2143.42       2190.44    
   8  0.979269     -0.209490E-01  -1.86301       1.86301       2131.91       2133.77    
   9  0.110419      -2.20347      -195.957       195.957       2127.07       2323.03    
  10  0.557914     -0.583550      -51.8956       51.8956       2138.52       2190.41    
  11  0.474464     -0.745569      -66.3041       66.3041       2143.13       2209.43    
  12  0.312482      -1.16321      -103.445       103.445       2111.02       2214.46    
  13  0.297011      -1.21399      -107.961       107.961       2100.18       2208.14    
  14  0.857571     -0.153651      -13.6644       13.6644       2183.15       2196.81    
  15  0.792567     -0.232479      -20.6745       20.6745       2136.16       2156.83    
  16  0.963006     -0.376958E-01  -3.35233       3.35233       2112.12       2115.47    
  17  0.294103      -1.22382      -108.836       108.836       2126.88       2235.72    
  18  0.403484     -0.907618      -80.7153       80.7153       2188.26       2268.98    
  19  0.449313     -0.800035      -71.1479       71.1479       2116.37       2187.52    
  20  0.721912     -0.325852      -28.9783       28.9783       2126.23       2155.21    
  21  0.512488     -0.668479      -59.4484       59.4484       2147.06       2206.51    
  22  0.885190     -0.121953      -10.8454       10.8454       2125.29       2136.13    
  23  0.694751E-01  -2.66679      -237.160       237.160       2219.15       2456.31    
  24  0.820879     -0.197380      -17.5532       17.5532       2082.78       2100.33    
  25  0.211527      -1.55340      -138.146       138.146       2191.68       2329.82    
  26  0.937420     -0.646236E-01  -5.74703       5.74703       2190.57       2196.31    
  27  0.515756E-01  -2.96471      -263.654       263.654       2207.10       2470.75    
  28  0.695222     -0.363525      -32.3286       32.3286       2151.05       2183.38    
  29  0.718776     -0.330205      -29.3655       29.3655       2144.24       2173.60    
  30  0.536080     -0.623471      -55.4459       55.4459       2230.32       2285.76    
  31  0.585855     -0.534682      -47.5498       47.5498       2135.56       2183.11    
  32  0.693572     -0.365900      -32.5399       32.5399       2111.53       2144.07    
  33  0.700823     -0.355500      -31.6149       31.6149       2145.14       2176.75    
  34  0.250985      -1.38236      -122.935       122.935       2194.93       2317.86    
  35  0.290600      -1.23581      -109.901       109.901       2251.83       2361.73    
  36  0.828609     -0.188007      -16.7197       16.7197       2284.45       2301.17    
  37  0.225820      -1.48802      -132.331       132.331       2102.74       2235.07    
  38  0.999674     -0.326354E-03 -0.290230E-01  0.290230E-01   2289.32       2289.35    
  39  0.878216     -0.129862      -11.5488       11.5488       2245.22       2256.77    
  40  0.685898E-01  -2.67961      -238.300       238.300       2146.80       2385.10    
  41  0.273860      -1.29514      -115.178       115.178       2295.95       2411.13    
  42  0.697655     -0.360030      -32.0178       32.0178       2251.50       2283.52    
  43  0.293168      -1.22701      -109.119       109.119       2159.84       2268.96    
  44  0.319476      -1.14107      -101.477       101.477       2223.68       2325.16    
  45  0.874681     -0.133896      -11.9075       11.9075       2244.96       2256.87    
  46  0.408697     -0.894781      -79.5737       79.5737       2278.68       2358.25    
  47  0.142130E-01  -4.25360      -378.276       378.276       2129.29       2507.57    
  48  0.164528      -1.80468      -160.491       160.491       2171.15       2331.64    
  49  0.652669     -0.426685      -37.9455       37.9455       2277.66       2315.61    
  50  0.492107     -0.709060      -63.0574       63.0574       2117.27       2180.33    
  51  0.542705     -0.611189      -54.3536       54.3536       2341.10       2395.46    
loop,thermsimp(1:2)       11   7.47353       104.416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       2125.48          0.86          1.12         21.95          0.07          0.05         24.04
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241       3437.66          0.86          1.12         21.76          0.21          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    3437.7       0.5615     -2.275      3.820     -102.6      1.817    
                       1.224      2.831     -99.70      3.456      1.790    

                       3.759     -1.962      1.540      7000.      7000.    

                      -1.760      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.224     -3.432     -11.39      10.84    

                      -15.17     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1657E-01 0.1969    -0.8734E-01 0.9656    

                     -0.2486    -0.1798     0.1426     0.1320     0.9430E-01



                     -0.4992    -0.5170      0.000     0.9123E-01-0.2927E-01

                      0.3360E-01 0.2015    -0.7116    -0.2638E-02 0.1397    

                      0.8440E-01-0.9003E-01-0.6058     -1.228      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.153      8.793    -0.1672E+05 -6.000    

                     -0.9482E-01 -2.331      9.328      8.746    -0.1969E+05



                      -6.000     0.6631    -0.4310      8.856      9.049    

                     -0.1944E+05 -6.000    -0.9256     0.4365E-01  9.181    

                       8.788    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2125.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       11
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       12
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      240     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -24.0710       24.0710       2090.77       2114.84    
   2  0.482922E-01  -3.03048      -269.504       269.504       2082.78       2352.28    
   3  0.612960     -0.489456      -43.5278       43.5278       2087.11       2130.64    
   4  0.910127     -0.941714E-01  -8.37475       8.37475       2112.12       2120.50    
   5  0.362433      -1.01492      -90.2575       90.2575       2131.91       2222.17    
   6  0.476779     -0.740702      -65.8714       65.8714       2125.29       2191.16    
   7  0.179006E-01  -4.02292      -357.762       357.762       2111.53       2469.29    
   8  0.589646     -0.528233      -46.9762       46.9762       2126.23       2173.21    
   9  0.926206     -0.766581E-01  -6.81728       6.81728       2136.16       2142.97    
  10  0.492629     -0.707999      -62.9630       62.9630       2099.93       2162.89    
  11  0.661123     -0.413815      -36.8009       36.8009       2118.68       2155.48    
  12  0.542248     -0.612032      -54.4286       54.4286       2144.24       2198.67    
  13  0.216527      -1.53004      -136.068       136.068       2145.14       2281.20    
  14  0.549832     -0.598143      -53.1934       53.1934       2117.27       2170.46    
  15  0.429556     -0.845003      -75.1469       75.1469       2135.56       2210.70    
  16  0.264838      -1.32864      -118.157       118.157       2151.05       2269.21    
  17  0.251706      -1.37949      -122.680       122.680       2116.37       2239.05    
  18  0.701724     -0.354215      -31.5006       31.5006       2138.52       2170.02    
  19  0.324289      -1.12612      -100.147       100.147       2143.42       2243.57    
  20  0.160749E-02  -6.43308      -572.100       572.100       2190.57       2762.67    
  21  0.533627     -0.628058      -55.8538       55.8538       2183.15       2239.00    
  22  0.883065     -0.124357      -11.0591       11.0591       2095.32       2106.38    
  23  0.484824     -0.723969      -64.3832       64.3832       2147.06       2211.44    
  24  0.724157     -0.322747      -28.7022       28.7022       2100.18       2128.88    
  25  0.847375     -0.165612      -14.7281       14.7281       2143.13       2157.86    
  26  0.167586      -1.78626      -158.854       158.854       2111.02       2269.87    
  27  0.890079     -0.116445      -10.3555       10.3555       2102.74       2113.10    
  28  0.235223      -1.44722      -128.703       128.703       2126.88       2255.59    
  29  0.206112      -1.57934      -140.452       140.452       2245.22       2385.67    
  30  0.463385     -0.769198      -68.4055       68.4055       2244.96       2313.36    
  31  0.487880E-01  -3.02027      -268.595       268.595       2130.73       2399.33    
  32  0.244157      -1.40994      -125.388       125.388       2159.84       2285.23    
  33  0.770602     -0.260583      -23.1739       23.1739       2188.26       2211.44    
  34  0.264159      -1.33120      -118.385       118.385       2251.50       2369.89    
  35  0.189030E-01  -3.96843      -352.917       352.917       2230.32       2583.23    
  36  0.635342     -0.453592      -40.3384       40.3384       2289.32       2329.66    
  37  0.139550      -1.96933      -175.134       175.134       2284.45       2459.58    
  38  0.561566     -0.577026      -51.3154       51.3154       2277.66       2328.98    
  39  0.951789     -0.494118E-01  -4.39424       4.39424       2194.93       2199.32    
  40  0.527693     -0.639242      -56.8483       56.8483       2127.07       2183.92    
  41  0.925337     -0.775972E-01  -6.90080       6.90080       2223.68       2230.58    
  42  0.795352     -0.228971      -20.3626       20.3626       2191.68       2212.04    
  43  0.530799     -0.633371      -56.3263       56.3263       2171.15       2227.47    
  44  0.642763     -0.441979      -39.3056       39.3056       2278.68       2317.98    
  45  0.485146     -0.723305      -64.3242       64.3242       2251.83       2316.16    
  46  0.795896     -0.228287      -20.3018       20.3018       2146.80       2167.10    
  47  0.519140     -0.655581      -58.3015       58.3015       2341.10       2399.41    
  48  0.694073E-01  -2.66776      -237.247       237.247       2295.95       2533.20    
  49  0.401486     -0.912583      -81.1569       81.1569       2219.15       2300.31    
  50  0.587982E-01  -2.83364      -251.999       251.999       2207.10       2459.09    
  51  0.752652     -0.284152      -25.2699       25.2699       2125.48       2150.75    
loop,thermsimp(1:2)       12   24.0710       269.504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       2133.72          0.86          1.11         22.09          0.02          0.05         24.12
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243       2359.96          0.85          1.12         21.95          0.00          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2133.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       12
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       13
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      242     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -46.5006       46.5006       2095.32       2141.82    
   2  0.691791     -0.368472      -32.7685       32.7685       2102.74       2135.51    
   3  0.688173     -0.373715      -33.2348       33.2348       2090.77       2124.01    
   4  0.439966     -0.821058      -73.0174       73.0174       2112.12       2185.14    
   5  0.945690     -0.558403E-01  -4.96593       4.96593       2100.18       2105.14    
   6  0.238956      -1.43147      -127.302       127.302       2087.11       2214.41    
   7  0.280830E-01  -3.57259      -317.714       317.714       2136.16       2453.87    
   8  0.902031E-01  -2.40569      -213.940       213.940       2125.48       2339.42    
   9  0.198361      -1.61767      -143.861       143.861       2118.68       2262.54    
  10  0.201288      -1.60302      -142.558       142.558       2143.13       2285.69    
  11  0.710033     -0.342444      -30.4539       30.4539       2099.93       2130.38    
  12  0.182913      -1.69874      -151.071       151.071       2146.80       2297.87    
  13  0.817316     -0.201730      -17.9400       17.9400       2138.52       2156.46    
  14  0.894732     -0.111231      -9.89186       9.89186       2117.27       2127.16    
  15  0.854000     -0.157824      -14.0354       14.0354       2126.23       2140.27    
  16  0.248066      -1.39406      -123.975       123.975       2127.07       2251.05    
  17  0.670877     -0.399170      -35.4985       35.4985       2125.29       2160.79    
  18  0.701473     -0.354573      -31.5325       31.5325       2144.24       2175.77    
  19  0.199467      -1.61210      -143.366       143.366       2194.93       2338.30    
  20  0.391533     -0.937685      -83.3892       83.3892       2135.56       2218.95    
  21  0.586761     -0.533138      -47.4124       47.4124       2188.26       2235.67    
  22  0.163799      -1.80912      -160.886       160.886       2147.06       2307.95    
  23  0.955964     -0.450353E-01  -4.00503       4.00503       2191.68       2195.68    
  24  0.365727      -1.00587      -89.4527       89.4527       2131.91       2221.36    
  25  0.733577     -0.309822      -27.5528       27.5528       2171.15       2198.70    
  26  0.111597      -2.19286      -195.013       195.013       2223.68       2418.70    
  27  0.714895     -0.335619      -29.8469       29.8469       2183.15       2213.00    
  28  0.816688     -0.202498      -18.0083       18.0083       2116.37       2134.38    
  29  0.480603     -0.732714      -65.1609       65.1609       2143.42       2208.58    
  30  0.573891     -0.555316      -49.3847       49.3847       2126.88       2176.27    
  31  0.204452      -1.58742      -141.171       141.171       2151.05       2292.22    
  32  0.845356E-01  -2.47058      -219.711       219.711       2111.02       2330.73    
  33  0.524789E-01  -2.94734      -262.110       262.110       2145.14       2407.25    
  34  0.631781     -0.459213      -40.8382       40.8382       2159.84       2200.68    
  35  0.620363     -0.477450      -42.4601       42.4601       2219.15       2261.61    
  36  0.553551     -0.591402      -52.5939       52.5939       2244.96       2297.55    
  37  0.546271     -0.604640      -53.7712       53.7712       2251.83       2305.60    
  38  0.402204     -0.910797      -80.9980       80.9980       2278.68       2359.67    
  39  0.735174     -0.307648      -27.3594       27.3594       2277.66       2305.02    
  40  0.359565      -1.02286      -90.9638       90.9638       2289.32       2380.29    
  41  0.564111     -0.572504      -50.9134       50.9134       2082.78       2133.69    
  42  0.412661     -0.885128      -78.7153       78.7153       2251.50       2330.22    
  43  0.795853     -0.228341      -20.3066       20.3066       2245.22       2265.53    
  44  0.909991E-01  -2.39691      -213.159       213.159       2130.73       2343.89    
  45  0.830687     -0.185502      -16.4969       16.4969       2341.10       2357.60    
  46  0.592588     -0.523256      -46.5336       46.5336       2207.10       2253.63    
  47  0.489472     -0.714427      -63.5347       63.5347       2284.45       2347.98    
  48  0.992056     -0.797586E-02 -0.709301      0.709301       2111.53       2112.23    
  49  0.808208     -0.212936      -18.9366       18.9366       2295.95       2314.89    
  50  0.212569      -1.54849      -137.709       137.709       2230.32       2368.03    
  51  0.214041      -1.54159      -137.095       137.095       2133.72       2270.82    
loop,thermsimp(1:2)       13   46.5006       32.7685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244       2163.72          0.85          1.12         22.11          0.01          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2163.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       13
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       14
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      243     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -96.2064       96.2064       2100.18       2196.39    
   2  0.649641     -0.431335      -38.3590       38.3590       2111.53       2149.88    
   3  0.930116     -0.724456E-01  -6.44265       6.44265       2090.77       2097.21    
   4  0.297326      -1.21293      -107.867       107.867       2117.27       2225.14    
   5  0.751734     -0.285373      -25.3784       25.3784       2099.93       2125.30    
   6  0.409056     -0.893902      -79.4956       79.4956       2082.78       2162.27    
   7  0.115094      -2.16201      -192.269       192.269       2116.37       2308.64    
   8  0.606681     -0.499753      -44.4435       44.4435       2102.74       2147.18    
   9  0.140571      -1.96204      -174.486       174.486       2126.23       2300.72    
  10  0.447669E-01  -3.10629      -276.245       276.245       2095.32       2371.57    
  11  0.517394     -0.658951      -58.6011       58.6011       2138.52       2197.12    
  12  0.587057     -0.532633      -47.3676       47.3676       2125.29       2172.65    
  13  0.384993E-01  -3.25712      -289.658       289.658       2144.24       2433.90    
  14  0.829105E-01  -2.48999      -221.437       221.437       2126.88       2348.32    
  15  0.382179     -0.961866      -85.5397       85.5397       2112.12       2197.66    
  16  0.269516      -1.31113      -116.600       116.600       2191.68       2308.28    
  17  0.879580     -0.128311      -11.4108       11.4108       2171.15       2182.56    
  18  0.760503E-01  -2.57636      -229.118       229.118       2159.84       2388.96    
  19  0.482544     -0.728684      -64.8025       64.8025       2143.42       2208.22    
  20  0.561499     -0.577145      -51.3261       51.3261       2183.15       2234.48    
  21  0.254621      -1.36798      -121.656       121.656       2087.11       2208.76    
  22  0.479261     -0.735511      -65.4096       65.4096       2135.56       2200.97    
  23  0.638455     -0.448704      -39.9037       39.9037       2131.91       2171.81    
  24  0.289082      -1.24105      -110.367       110.367       2188.26       2298.63    
  25  0.656024     -0.421558      -37.4896       37.4896       2127.07       2164.56    
  26  0.597431     -0.515117      -45.8098       45.8098       2207.10       2252.90    
  27  0.859562     -0.151333      -13.4582       13.4582       2219.15       2232.61    
  28  0.554826     -0.589100      -52.3892       52.3892       2118.68       2171.07    
  29  0.128413      -2.05250      -182.531       182.531       2245.22       2427.75    
  30  0.311170      -1.16742      -103.819       103.819       2133.72       2237.54    
  31  0.606679     -0.499755      -44.4437       44.4437       2143.13       2187.57    
  32  0.923238     -0.798686E-01  -7.10279       7.10279       2151.05       2158.15    
  33  0.734154     -0.309037      -27.4830       27.4830       2244.96       2272.44    
  34  0.988670     -0.113947E-01  -1.01334       1.01334       2146.80       2147.81    
  35  0.136308      -1.99284      -177.225       177.225       2277.66       2454.89    
  36  0.345839      -1.06178      -94.4254       94.4254       2251.83       2346.26    
  37  0.349440      -1.05142      -93.5041       93.5041       2147.06       2240.56    
  38  0.625658E-01  -2.77154      -246.475       246.475       2295.95       2542.43    
  39  0.394804     -0.929365      -82.6493       82.6493       2251.50       2334.15    
  40  0.899667E-02  -4.71090      -418.945       418.945       2111.02       2529.96    
  41  0.823946     -0.193651      -17.2215       17.2215       2194.93       2212.15    
  42  0.834235     -0.181240      -16.1179       16.1179       2125.48       2141.59    
  43  0.777534     -0.251627      -22.3775       22.3775       2130.73       2153.11    
  44  0.384993     -0.954531      -84.8873       84.8873       2284.45       2369.34    
  45  0.247443E-01  -3.69916      -328.970       328.970       2341.10       2670.07    
  46  0.810695     -0.209863      -18.6633       18.6633       2278.68       2297.34    
  47  0.893618     -0.112477      -10.0027       10.0027       2230.32       2240.32    
  48  0.545617     -0.605837      -53.8777       53.8777       2289.32       2343.20    
  49  0.587193     -0.532402      -47.3470       47.3470       2145.14       2192.48    
  50  0.991207     -0.883185E-02 -0.785425      0.785425       2223.68       2224.47    
  51  0.477440     -0.739316      -65.7481       65.7481       2163.72       2229.47    
loop,thermsimp(1:2)       14   96.2064       38.3590    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       2305.02          0.86          1.12         22.16          0.09          0.05         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2305.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       14
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       15
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      244     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -134.764       134.764       2090.77       2225.53    
   2  0.894567E-01  -2.41400      -214.679       214.679       2099.93       2314.60    
   3  0.863615     -0.146628      -13.0398       13.0398       2125.48       2138.52    
   4  0.807990     -0.213206      -18.9606       18.9606       2102.74       2121.70    
   5  0.318173      -1.14516      -101.840       101.840       2146.80       2248.64    
   6  0.464606     -0.766566      -68.1714       68.1714       2111.53       2179.70    
   7  0.574933     -0.553501      -49.2234       49.2234       2130.73       2179.95    
   8  0.974939     -0.253802E-01  -2.25709       2.25709       2151.05       2153.31    
   9  0.415757     -0.877653      -78.0505       78.0505       2082.78       2160.83    
  10  0.187109      -1.67606      -149.054       149.054       2127.07       2276.12    
  11  0.730515E-01  -2.61659      -232.696       232.696       2118.68       2351.38    
  12  0.209185      -1.56454      -139.136       139.136       2131.91       2271.05    
  13  0.496690     -0.699790      -62.2330       62.2330       2125.29       2187.52    
  14  0.862986     -0.147356      -13.1046       13.1046       2171.15       2184.25    
  15  0.888200     -0.118558      -10.5435       10.5435       2143.13       2153.67    
  16  0.380888     -0.965250      -85.8406       85.8406       2145.14       2230.98    
  17  0.135305      -2.00022      -177.882       177.882       2100.18       2278.06    
  18  0.927079     -0.757167E-01  -6.73356       6.73356       2138.52       2145.25    
  19  0.603067     -0.505727      -44.9748       44.9748       2112.12       2157.10    
  20  0.136202      -1.99362      -177.294       177.294       2135.56       2312.85    
  21  0.954653     -0.464076E-01  -4.12707       4.12707       2143.42       2147.55    
  22  0.151192      -1.88920      -168.009       168.009       2087.11       2255.12    
  23  0.449259     -0.800155      -71.1586       71.1586       2194.93       2266.09    
  24  0.780874     -0.247341      -21.9963       21.9963       2223.68       2245.68    
  25  0.456238     -0.784740      -69.7877       69.7877       2117.27       2187.06    
  26  0.163284      -1.81227      -161.166       161.166       2163.72       2324.89    
  27  0.821444     -0.196692      -17.4920       17.4920       2219.15       2236.64    
  28  0.861448     -0.149141      -13.2632       13.2632       2183.15       2196.41    
  29  0.924167     -0.788621E-01  -7.01328       7.01328       2133.72       2140.73    
  30  0.195059      -1.63445      -145.354       145.354       2230.32       2375.67    
  31  0.375134     -0.980472      -87.1943       87.1943       2147.06       2234.25    
  32  0.909862     -0.944628E-01  -8.40067       8.40067       2207.10       2215.50    
  33  0.831459     -0.184574      -16.4143       16.4143       2244.96       2261.37    
  34  0.627278     -0.466365      -41.4743       41.4743       2278.68       2320.15    
  35  0.918890     -0.845891E-01  -7.52259       7.52259       2188.26       2195.78    
  36  0.475784     -0.742791      -66.0571       66.0571       2126.23       2192.29    
  37  0.344524      -1.06559      -94.7641       94.7641       2191.68       2286.44    
  38  0.286778      -1.24905      -111.079       111.079       2116.37       2227.45    
  39  0.336148      -1.09020      -96.9527       96.9527       2251.50       2348.46    
  40  0.709840     -0.342716      -30.4781       30.4781       2289.32       2319.80    
  41  0.219827      -1.51491      -134.723       134.723       2251.83       2386.55    
  42  0.347594      -1.05672      -93.9751       93.9751       2126.88       2220.86    
  43  0.905734     -0.990099E-01  -8.80504       8.80504       2284.45       2293.25    
  44  0.826231     -0.190881      -16.9752       16.9752       2095.32       2112.30    
  45  0.400277     -0.915599      -81.4251       81.4251       2159.84       2241.26    
  46  0.555153     -0.588512      -52.3369       52.3369       2245.22       2297.56    
  47  0.864397     -0.145723      -12.9593       12.9593       2144.24       2157.20    
  48  0.277380E-01  -3.58495      -318.813       318.813       2277.66       2596.48    
  49  0.993968     -0.605015E-02 -0.538046      0.538046       2111.02       2111.55    
  50  0.717076     -0.332573      -29.5760       29.5760       2295.95       2325.53    
  51  0.736253     -0.306182      -27.2290       27.2290       2305.02       2332.25    
loop,thermsimp(1:2)       15   134.764       214.679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246       2104.41          0.86          1.11         21.89          0.07          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    247       2601.64          0.86          1.11         22.05          0.06          0.05         24.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2104.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       15
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       16
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      246     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -130.035       130.035       2111.02       2241.05    
   2  0.641193     -0.444425      -39.5231       39.5231       2095.32       2134.85    
   3  0.353033      -1.04119      -92.5944       92.5944       2102.74       2195.33    
   4  0.928955     -0.736953E-01  -6.55379       6.55379       2125.48       2132.03    
   5  0.350257      -1.04909      -93.2964       93.2964       2133.72       2227.02    
   6  0.682617     -0.381821      -33.9557       33.9557       2138.52       2172.47    
   7  0.162763      -1.81546      -161.450       161.450       2143.42       2304.87    
   8  0.874032     -0.134639      -11.9735       11.9735       2151.05       2163.02    
   9  0.518909     -0.656027      -58.3411       58.3411       2143.13       2201.47    
  10  0.461984     -0.772226      -68.6748       68.6748       2112.12       2180.80    
  11  0.449468     -0.799691      -71.1173       71.1173       2144.24       2215.36    
  12  0.523281     -0.647637      -57.5950       57.5950       2082.78       2140.37    
  13  0.637377     -0.450394      -40.0540       40.0540       2111.53       2151.58    
  14  0.596329     -0.516963      -45.9740       45.9740       2130.73       2176.70    
  15  0.286246      -1.25090      -111.244       111.244       2171.15       2282.39    
  16  0.590425     -0.526913      -46.8589       46.8589       2117.27       2164.13    
  17  0.853637     -0.158249      -14.0732       14.0732       2125.29       2139.36    
  18  0.245572      -1.40416      -124.874       124.874       2126.23       2251.10    
  19  0.375654     -0.979088      -87.0712       87.0712       2188.26       2275.33    
  20  0.281654      -1.26708      -112.682       112.682       2183.15       2295.83    
  21  0.443392     -0.813302      -72.3277       72.3277       2207.10       2279.42    
  22  0.442934     -0.814335      -72.4196       72.4196       2126.88       2199.30    
  23  0.171790      -1.76149      -156.651       156.651       2090.77       2247.42    
  24  0.802582     -0.219921      -19.5578       19.5578       2116.37       2135.93    
  25  0.162733      -1.81564      -161.467       161.467       2145.14       2306.60    
  26  0.838320     -0.176355      -15.6834       15.6834       2147.06       2162.74    
  27  0.210754      -1.55706      -138.471       138.471       2219.15       2357.62    
  28  0.240377      -1.42554      -126.775       126.775       2159.84       2286.61    
  29  0.173042E-01  -4.05680      -360.775       360.775       2223.68       2584.46    
  30  0.640146     -0.446059      -39.6684       39.6684       2146.80       2186.46    
  31  0.749210     -0.288736      -25.6775       25.6775       2087.11       2112.79    
  32  0.666162     -0.406222      -36.1257       36.1257       2244.96       2281.08    
  33  0.601746     -0.507920      -45.1698       45.1698       2194.93       2240.10    
  34  0.677044     -0.390020      -34.6848       34.6848       2131.91       2166.60    
  35  0.290379      -1.23657      -109.969       109.969       2127.07       2237.04    
  36  0.439723     -0.821610      -73.0666       73.0666       2100.18       2173.25    
  37  0.680091     -0.385528      -34.2854       34.2854       2191.68       2225.96    
  38  0.803784     -0.218425      -19.4247       19.4247       2284.45       2303.87    
  39  0.507823     -0.677622      -60.2616       60.2616       2245.22       2305.48    
  40  0.894573     -0.111408      -9.90765       9.90765       2135.56       2145.47    
  41  0.826908     -0.190062      -16.9024       16.9024       2099.93       2116.83    
  42  0.815562     -0.203878      -18.1311       18.1311       2289.32       2307.45    
  43  0.352457      -1.04283      -92.7397       92.7397       2278.68       2371.41    
  44  0.104059      -2.26279      -201.232       201.232       2163.72       2364.95    
  45  0.601892     -0.507677      -45.1482       45.1482       2295.95       2341.10    
  46  0.988184     -0.118862E-01  -1.05705       1.05705       2305.02       2306.08    
  47  0.733912     -0.309366      -27.5122       27.5122       2251.50       2279.02    
  48  0.107394      -2.23125      -198.427       198.427       2118.68       2317.11    
  49  0.592150     -0.523995      -46.5994       46.5994       2230.32       2276.92    
  50  0.821901     -0.196136      -17.4425       17.4425       2251.83       2269.27    
  51  0.400070E-01  -3.21870      -286.242       286.242       2104.41       2390.65    
loop,thermsimp(1:2)       16   130.035       39.5231    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248       2064.23          0.86          1.12         21.88          0.07          0.06         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249       2397.97          0.85          1.11         21.88          0.07          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2064.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       16
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       17
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      248     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -22.4486       22.4486       2087.11       2109.56    
   2  0.350417      -1.04863      -93.2558       93.2558       2099.93       2193.18    
   3  0.533846     -0.627648      -55.8173       55.8173       2125.48       2181.29    
   4  0.622955     -0.473280      -42.0893       42.0893       2095.32       2137.41    
   5  0.661091E-01  -2.71645      -241.576       241.576       2116.37       2357.95    
   6  0.759206     -0.275482      -24.4989       24.4989       2125.29       2149.79    
   7  0.430535     -0.842727      -74.9445       74.9445       2082.78       2157.72    
   8  0.257678      -1.35604      -120.594       120.594       2135.56       2256.15    
   9  0.296561      -1.21550      -108.096       108.096       2111.53       2219.62    
  10  0.805929     -0.215760      -19.1877       19.1877       2147.06       2166.25    
  11  0.421616     -0.863661      -76.8061       76.8061       2151.05       2227.86    
  12  0.767803     -0.264223      -23.4976       23.4976       2117.27       2140.77    
  13  0.605260     -0.502097      -44.6520       44.6520       2131.91       2176.56    
  14  0.566784     -0.567776      -50.4929       50.4929       2138.52       2189.01    
  15  0.292740      -1.22847      -109.249       109.249       2100.18       2209.43    
  16  0.898463     -0.107069      -9.52179       9.52179       2130.73       2140.25    
  17  0.218067      -1.52295      -135.438       135.438       2112.12       2247.56    
  18  0.856756     -0.154603      -13.7490       13.7490       2146.80       2160.55    
  19  0.338883      -1.08210      -96.2323       96.2323       2102.74       2198.97    
  20  0.796034     -0.228113      -20.2863       20.2863       2126.88       2147.17    
  21  0.778636     -0.250212      -22.2516       22.2516       2143.13       2165.38    
  22  0.575989     -0.551667      -49.0603       49.0603       2144.24       2193.30    
  23  0.355531      -1.03414      -91.9674       91.9674       2191.68       2283.64    
  24  0.164949      -1.80212      -160.264       160.264       2133.72       2293.99    
  25  0.315998      -1.15202      -102.450       102.450       2127.07       2229.52    
  26  0.330933      -1.10584      -98.3433       98.3433       2194.93       2293.27    
  27  0.429436     -0.845283      -75.1718       75.1718       2111.02       2186.19    
  28  0.464808     -0.766130      -68.1327       68.1327       2090.77       2158.90    
  29  0.192211      -1.64916      -146.661       146.661       2126.23       2272.89    
  30  0.866849     -0.142891      -12.7074       12.7074       2251.83       2264.54    
  31  0.474973     -0.744498      -66.2089       66.2089       2188.26       2254.47    
  32  0.667713     -0.403897      -35.9189       35.9189       2230.32       2266.24    
  33  0.994155     -0.586200E-02 -0.521313      0.521313       2251.50       2252.02    
  34  0.577739     -0.548634      -48.7905       48.7905       2207.10       2255.89    
  35  0.381919     -0.962546      -85.6001       85.6001       2244.96       2330.56    
  36  0.733204     -0.310331      -27.5980       27.5980       2171.15       2198.74    
  37  0.492382     -0.708500      -63.0076       63.0076       2159.84       2222.85    
  38  0.188899E-01  -3.96913      -352.978       352.978       2183.15       2536.13    
  39  0.741920E-01  -2.60110      -231.318       231.318       2284.45       2515.77    
  40  0.210592      -1.55783      -138.539       138.539       2143.42       2281.96    
  41  0.682838     -0.381498      -33.9270       33.9270       2245.22       2279.15    
  42  0.656831     -0.420328      -37.3802       37.3802       2305.02       2342.40    
  43  0.444670     -0.810424      -72.0717       72.0717       2145.14       2217.21    
  44  0.872301     -0.136621      -12.1498       12.1498       2289.32       2301.47    
  45  0.932741     -0.696282E-01  -6.19210       6.19210       2118.68       2124.87    
  46  0.601727     -0.507951      -45.1726       45.1726       2295.95       2341.13    
  47  0.940344     -0.615097E-01  -5.47011       5.47011       2219.15       2224.62    
  48  0.208477E-01  -3.87051      -344.208       344.208       2163.72       2507.93    
  49  0.257831      -1.35545      -120.541       120.541       2278.68       2399.22    
  50  0.522803     -0.648550      -57.6761       57.6761       2104.41       2162.08    
  51  0.676437     -0.390915      -34.7645       34.7645       2064.23       2098.99    
loop,thermsimp(1:2)       17   22.4486       93.2558    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250       2139.01          0.85          1.11         21.98          0.04          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251       2478.11          0.85          1.11         21.89          0.02          0.04         23.92
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2139.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       17
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       18
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      250     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -126.768       126.768       2064.23       2191.00    
   2  0.711556E-02  -4.94547      -439.805       439.805       2087.11       2526.91    
   3  0.909796     -0.945347E-01  -8.40706       8.40706       2118.68       2127.09    
   4  0.659218     -0.416702      -37.0577       37.0577       2095.32       2132.38    
   5  0.833482     -0.182144      -16.1982       16.1982       2130.73       2146.93    
   6  0.726295E-01  -2.62238      -233.211       233.211       2117.27       2350.48    
   7  0.687091     -0.375288      -33.3747       33.3747       2126.88       2160.26    
   8  0.860775     -0.149922      -13.3327       13.3327       2125.29       2138.62    
   9  0.846215     -0.166982      -14.8499       14.8499       2082.78       2097.63    
  10  0.398551     -0.919919      -81.8093       81.8093       2090.77       2172.58    
  11  0.416092     -0.876849      -77.9790       77.9790       2146.80       2224.78    
  12  0.463389     -0.769189      -68.4047       68.4047       2104.41       2172.81    
  13  0.207356      -1.57332      -139.917       139.917       2143.13       2283.05    
  14  0.133003      -2.01738      -179.408       179.408       2147.06       2326.47    
  15  0.464971     -0.765779      -68.1015       68.1015       2131.91       2200.01    
  16  0.568281     -0.565140      -50.2584       50.2584       2125.48       2175.73    
  17  0.638811     -0.448147      -39.8541       39.8541       2111.02       2150.87    
  18  0.865664     -0.144259      -12.8291       12.8291       2138.52       2151.34    
  19  0.475002     -0.744436      -66.2034       66.2034       2099.93       2166.13    
  20  0.537086     -0.621597      -55.2792       55.2792       2144.24       2199.52    
  21  0.782345     -0.245459      -21.8289       21.8289       2171.15       2192.97    
  22  0.725469     -0.320937      -28.5412       28.5412       2102.74       2131.28    
  23  0.701426E-01  -2.65723      -236.310       236.310       2100.18       2336.49    
  24  0.297043      -1.21388      -107.951       107.951       2145.14       2253.09    
  25  0.444870     -0.809973      -72.0316       72.0316       2111.53       2183.56    
  26  0.685684     -0.377338      -33.5570       33.5570       2159.84       2193.40    
  27  0.651244     -0.428871      -38.1399       38.1399       2219.15       2257.29    
  28  0.269082      -1.31274      -116.743       116.743       2151.05       2267.79    
  29  0.177107      -1.73100      -153.940       153.940       2127.07       2281.01    
  30  0.766464     -0.265968      -23.6528       23.6528       2112.12       2135.77    
  31  0.801833     -0.220855      -19.6408       19.6408       2251.50       2271.14    
  32  0.759414     -0.275209      -24.4746       24.4746       2188.26       2212.74    
  33  0.566307     -0.568618      -50.5677       50.5677       2207.10       2257.66    
  34  0.297948      -1.21084      -107.681       107.681       2135.56       2243.24    
  35  0.430097E-01  -3.14633      -279.806       279.806       2251.83       2531.64    
  36  0.529414     -0.635984      -56.5586       56.5586       2230.32       2286.88    
  37  0.717133     -0.332494      -29.5690       29.5690       2126.23       2155.80    
  38  0.209457      -1.56323      -139.020       139.020       2245.22       2384.24    
  39  0.732428     -0.311390      -27.6922       27.6922       2143.42       2171.11    
  40  0.697782     -0.359849      -32.0017       32.0017       2191.68       2223.68    
  41  0.977227     -0.230362E-01  -2.04863       2.04863       2194.93       2196.98    
  42  0.744700     -0.294773      -26.2145       26.2145       2133.72       2159.94    
  43  0.713341     -0.337796      -30.0405       30.0405       2289.32       2319.36    
  44  0.497823     -0.697510      -62.0302       62.0302       2244.96       2306.99    
  45  0.968758     -0.317404E-01  -2.82270       2.82270       2295.95       2298.78    
  46  0.287665      -1.24596      -110.804       110.804       2305.02       2415.83    
  47  0.964672     -0.359674E-01  -3.19861       3.19861       2116.37       2119.57    
  48  0.733769     -0.309561      -27.5296       27.5296       2278.68       2306.20    
  49  0.692680     -0.367187      -32.6543       32.6543       2163.72       2196.37    
  50  0.328873      -1.11208      -98.8985       98.8985       2284.45       2383.35    
  51  0.744920     -0.294478      -26.1882       26.1882       2139.01       2165.20    
loop,thermsimp(1:2)       18   126.768       439.805    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       2375.12          0.84          1.11         21.95          0.08          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2375.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       18
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       19
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      251     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -28.9428       28.9428       2082.78       2111.72    
   2  0.240049      -1.42691      -126.897       126.897       2116.37       2243.27    
   3  0.365543      -1.00637      -89.4975       89.4975       2118.68       2208.18    
   4  0.399010     -0.918769      -81.7070       81.7070       2102.74       2184.45    
   5  0.685268     -0.377945      -33.6110       33.6110       2095.32       2128.93    
   6  0.335805E-01  -3.39381      -301.815       301.815       2112.12       2413.94    
   7  0.820520     -0.197817      -17.5920       17.5920       2125.29       2142.88    
   8  0.756560     -0.278973      -24.8094       24.8094       2130.73       2155.54    
   9  0.869461     -0.139882      -12.4399       12.4399       2111.02       2123.46    
  10  0.787378     -0.239047      -21.2586       21.2586       2138.52       2159.77    
  11  0.330926      -1.10586      -98.3452       98.3452       2126.23       2224.58    
  12  0.339084E-01  -3.38409      -300.951       300.951       2133.72       2434.67    
  13  0.672805     -0.396300      -35.2433       35.2433       2126.88       2162.13    
  14  0.822413     -0.195513      -17.3871       17.3871       2139.01       2156.40    
  15  0.928870     -0.737865E-01  -6.56190       6.56190       2099.93       2106.49    
  16  0.778944     -0.249816      -22.2164       22.2164       2143.42       2165.64    
  17  0.301602E-01  -3.50123      -311.368       311.368       2090.77       2402.14    
  18  0.292626      -1.22886      -109.284       109.284       2104.41       2213.69    
  19  0.149515      -1.90036      -169.001       169.001       2125.48       2294.48    
  20  0.500330E-01  -2.99507      -266.355       266.355       2111.53       2377.88    
  21  0.759114E-01  -2.57819      -229.281       229.281       2064.23       2293.51    
  22  0.613440     -0.488673      -43.4581       43.4581       2171.15       2214.60    
  23  0.132502      -2.02116      -179.743       179.743       2159.84       2339.58    
  24  0.189750E-02  -6.26722      -557.350       557.350       2163.72       2721.07    
  25  0.507622     -0.678018      -60.2968       60.2968       2194.93       2255.23    
  26  0.378733     -0.970924      -86.3452       86.3452       2144.24       2230.58    
  27  0.139411      -1.97033      -175.223       175.223       2131.91       2307.13    
  28  0.298599      -1.20865      -107.487       107.487       2188.26       2295.75    
  29  0.767617     -0.264464      -23.5190       23.5190       2191.68       2215.20    
  30  0.656077     -0.421478      -37.4824       37.4824       2146.80       2184.28    
  31  0.701883     -0.353988      -31.4805       31.4805       2135.56       2167.04    
  32  0.940950     -0.608655E-01  -5.41282       5.41282       2145.14       2150.55    
  33  0.621043     -0.476355      -42.3627       42.3627       2219.15       2261.51    
  34  0.622910     -0.473353      -42.0957       42.0957       2207.10       2249.19    
  35  0.525019     -0.644320      -57.3000       57.3000       2151.05       2208.35    
  36  0.871126     -0.137969      -12.2697       12.2697       2251.50       2263.77    
  37  0.475532     -0.743322      -66.1043       66.1043       2127.07       2193.17    
  38  0.320094      -1.13914      -101.305       101.305       2143.13       2244.43    
  39  0.688986     -0.372534      -33.1298       33.1298       2230.32       2263.45    
  40  0.831218     -0.184863      -16.4400       16.4400       2295.95       2312.39    
  41  0.639633     -0.446861      -39.7397       39.7397       2278.68       2318.41    
  42  0.628257     -0.464807      -41.3357       41.3357       2244.96       2286.29    
  43  0.925835     -0.770596E-01  -6.85298       6.85298       2289.32       2296.18    
  44  0.611089     -0.492512      -43.7996       43.7996       2147.06       2190.86    
  45  0.423003E-01  -3.16296      -281.285       281.285       2100.18       2381.46    
  46  0.430763     -0.842198      -74.8975       74.8975       2117.27       2192.17    
  47  0.374764     -0.981459      -87.2821       87.2821       2284.45       2371.73    
  48  0.109336      -2.21333      -196.833       196.833       2245.22       2442.06    
  49  0.642636E-02  -5.04735      -448.865       448.865       2305.02       2753.89    
  50  0.232984      -1.45679      -129.553       129.553       2087.11       2216.66    
  51  0.169005E-01  -4.08041      -362.875       362.875       2375.12       2738.00    
loop,thermsimp(1:2)       19   28.9428       126.897    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       2313.74          0.86          1.12         22.07          0.02          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2313.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    88.9309               251
loop is:       19
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    88.9309               251
loop is:       20
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    44.4655               301

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      252     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -51.8117       51.8117       2099.93       2151.74    
   2  0.362384      -1.01505      -45.1347       45.1347       2082.78       2127.91    
   3  0.900627     -0.104664      -4.65394       4.65394       2111.02       2115.67    
   4  0.233893      -1.45289      -64.6034       64.6034       2095.32       2159.93    
   5  0.183338      -1.69642      -75.4323       75.4323       2125.29       2200.72    
   6  0.351708      -1.04495      -46.4643       46.4643       2145.14       2191.60    
   7  0.979617     -0.205938E-01 -0.915711      0.915711       2130.73       2131.65    
   8  0.801294     -0.221527      -9.85032       9.85032       2139.01       2148.86    
   9  0.423893     -0.858275      -38.1636       38.1636       2138.52       2176.68    
  10  0.486446     -0.720630      -32.0432       32.0432       2126.88       2158.93    
  11  0.430531     -0.842736      -37.4726       37.4726       2143.42       2180.89    
  12  0.214629      -1.53884      -68.4254       68.4254       2135.56       2203.98    
  13  0.860310     -0.150463      -6.69040       6.69040       2146.80       2153.49    
  14  0.450659     -0.797045      -35.4410       35.4410       2102.74       2138.18    
  15  0.867432     -0.142218      -6.32379       6.32379       2147.06       2153.38    
  16  0.850327     -0.162134      -7.20936       7.20936       2117.27       2124.48    
  17  0.914193     -0.897130E-01  -3.98913       3.98913       2127.07       2131.06    
  18  0.908448     -0.960172E-01  -4.26945       4.26945       2118.68       2122.95    
  19  0.349788E-01  -3.35301      -149.093       149.093       2151.05       2300.14    
  20  0.825048     -0.192314      -8.55134       8.55134       2104.41       2112.96    
  21  0.628933     -0.463730      -20.6200       20.6200       2171.15       2191.77    
  22  0.756366     -0.279229      -12.4161       12.4161       2191.68       2204.09    
  23  0.545707     -0.605674      -26.9316       26.9316       2087.11       2114.04    
  24  0.653619     -0.425231      -18.9081       18.9081       2126.23       2145.14    
  25  0.781643     -0.246357      -10.9544       10.9544       2144.24       2155.19    
  26  0.444411     -0.811005      -36.0617       36.0617       2116.37       2152.43    
  27  0.223111      -1.50008      -66.7019       66.7019       2143.13       2209.83    
  28  0.143901      -1.93863      -86.2021       86.2021       2207.10       2293.30    
  29  0.419282E-01  -3.17180      -141.035       141.035       2194.93       2335.96    
  30  0.407367     -0.898040      -39.9318       39.9318       2219.15       2259.08    
  31  0.722138     -0.325538      -14.4752       14.4752       2230.32       2244.79    
  32  0.290143      -1.23738      -55.0207       55.0207       2251.50       2306.52    
  33  0.236931E-01  -3.74257      -166.415       166.415       2244.96       2411.37    
  34  0.198981      -1.61454      -71.7915       71.7915       2064.23       2136.02    
  35  0.765966     -0.266617      -11.8552       11.8552       2125.48       2137.33    
  36  0.522733     -0.648684      -28.8440       28.8440       2188.26       2217.11    
  37  0.297579E-01  -3.51466      -156.281       156.281       2289.32       2445.60    
  38  0.175475      -1.74026      -77.3813       77.3813       2131.91       2209.29    
  39  0.311931      -1.16497      -51.8010       51.8010       2295.95       2347.75    
  40  0.310920      -1.16822      -51.9455       51.9455       2278.68       2330.62    
  41  0.122272      -2.10150      -93.4444       93.4444       2159.84       2253.28    
  42  0.949359     -0.519686E-01  -2.31081       2.31081       2284.45       2286.76    
  43  0.500750     -0.691648      -30.7545       30.7545       2111.53       2142.28    
  44  0.729401E-01  -2.61812      -116.416       116.416       2100.18       2216.59    
  45  0.952528     -0.486360E-01  -2.16262       2.16262       2090.77       2092.93    
  46  0.718842     -0.330114      -14.6787       14.6787       2112.12       2126.80    
  47  0.529396     -0.636019      -28.2809       28.2809       2133.72       2162.00    
  48  0.314661      -1.15626      -51.4136       51.4136       2245.22       2296.64    
  49  0.947465     -0.539649E-01  -2.39957       2.39957       2163.72       2166.12    
  50  0.613869     -0.487974      -21.6980       21.6980       2375.12       2396.82    
  51  0.303056      -1.19384      -53.0846       53.0846       2313.74       2366.82    
loop,thermsimp(1:2)       20   51.8117       45.1347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       2191.99          0.86          1.12         22.06          0.00          0.05         24.09
Just calling func    0   0         24.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2191.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       20
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       21
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      253     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -52.4816       52.4816       2090.77       2143.25    
   2  0.575213     -0.553015      -24.5900       24.5900       2104.41       2129.00    
   3  0.632244     -0.458480      -20.3865       20.3865       2087.11       2107.50    
   4  0.819203     -0.199424      -8.86746       8.86746       2111.02       2119.88    
   5  0.137693E-02  -6.58790      -292.934       292.934       2118.68       2411.62    
   6  0.367814      -1.00018      -44.4734       44.4734       2117.27       2161.74    
   7  0.452636     -0.792666      -35.2463       35.2463       2112.12       2147.37    
   8  0.278102      -1.27977      -56.9055       56.9055       2082.78       2139.68    
   9  0.417803     -0.872745      -38.8070       38.8070       2127.07       2165.88    
  10  0.682140     -0.382521      -17.0090       17.0090       2130.73       2147.74    
  11  0.204733      -1.58605      -70.5243       70.5243       2064.23       2134.75    
  12  0.637442     -0.450292      -20.0225       20.0225       2125.48       2145.50    
  13  0.114518      -2.16702      -96.3576       96.3576       2102.74       2199.10    
  14  0.724207     -0.322678      -14.3480       14.3480       2111.53       2125.87    
  15  0.461399     -0.773492      -34.3937       34.3937       2126.23       2160.62    
  16  0.731739     -0.312332      -13.8880       13.8880       2139.01       2152.90    
  17  0.773272     -0.257124      -11.4332       11.4332       2099.93       2111.36    
  18  0.789195     -0.236742      -10.5268       10.5268       2116.37       2126.90    
  19  0.762001     -0.271807      -12.0860       12.0860       2147.06       2159.15    
  20  0.933384     -0.689386E-01  -3.06539       3.06539       2146.80       2149.86    
  21  0.694037     -0.365230      -16.2401       16.2401       2144.24       2160.48    
  22  0.423570     -0.859038      -38.1975       38.1975       2126.88       2165.08    
  23  0.272919      -1.29858      -57.7420       57.7420       2095.32       2153.07    
  24  0.535843     -0.623914      -27.7426       27.7426       2133.72       2161.46    
  25  0.902288     -0.102822      -4.57201       4.57201       2163.72       2168.29    
  26  0.479374     -0.735275      -32.6943       32.6943       2138.52       2171.21    
  27  0.494900E-01  -3.00599      -133.663       133.663       2143.42       2277.08    
  28  0.921867     -0.813539E-01  -3.61744       3.61744       2145.14       2148.75    
  29  0.132425      -2.02174      -89.8974       89.8974       2171.15       2261.04    
  30  0.640539     -0.445446      -19.8069       19.8069       2125.29       2145.09    
  31  0.215363      -1.53543      -68.2736       68.2736       2135.56       2203.83    
  32  0.437204E-01  -3.12994      -139.174       139.174       2191.68       2330.85    
  33  0.166028      -1.79560      -79.8422       79.8422       2131.91       2211.75    
  34  0.425825     -0.853727      -37.9614       37.9614       2143.13       2181.09    
  35  0.810393     -0.210235      -9.34822       9.34822       2100.18       2109.53    
  36  0.855958     -0.155534      -6.91591       6.91591       2188.26       2195.18    
  37  0.830452     -0.185786      -8.26104       8.26104       2230.32       2238.58    
  38  0.658784     -0.417359      -18.5581       18.5581       2159.84       2178.40    
  39  0.910965     -0.932509E-01  -4.14644       4.14644       2219.15       2223.30    
  40  0.603480     -0.505043      -22.4570       22.4570       2284.45       2306.91    
  41  0.702610     -0.352953      -15.6942       15.6942       2207.10       2222.79    
  42  0.329065      -1.11150      -49.4233       49.4233       2245.22       2294.65    
  43  0.790497     -0.235094      -10.4536       10.4536       2151.05       2161.50    
  44  0.641572     -0.443834      -19.7353       19.7353       2251.50       2271.24    
  45  0.650683     -0.429733      -19.1083       19.1083       2278.68       2297.78    
  46  0.194049E-02  -6.24481      -277.679       277.679       2194.93       2472.61    
  47  0.662053     -0.412409      -18.3380       18.3380       2295.95       2314.29    
  48  0.294846      -1.22130      -54.3057       54.3057       2313.74       2368.04    
  49  0.709874     -0.342668      -15.2369       15.2369       2375.12       2390.36    
  50  0.700314     -0.356226      -15.8398       15.8398       2244.96       2260.80    
  51  0.639811E-01  -2.74917      -122.243       122.243       2191.99       2314.24    
loop,thermsimp(1:2)       21   52.4816       24.5900    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       2113.59          0.86          1.11         22.13          0.01          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256       3008.50          0.86          1.12         21.88          0.05          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2113.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       21
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       22
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      255     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -7.81106       7.81106       2087.11       2094.92    
   2  0.801853     -0.220830      -9.81931       9.81931       2100.18       2110.00    
   3  0.768645     -0.263126      -11.7000       11.7000       2099.93       2111.63    
   4  0.855557     -0.156003      -6.93674       6.93674       2111.02       2117.95    
   5  0.845591     -0.167720      -7.45774       7.45774       2111.53       2118.98    
   6  0.350050      -1.04968      -46.6745       46.6745       2116.37       2163.05    
   7  0.927608     -0.751463E-01  -3.34141       3.34141       2104.41       2107.75    
   8  0.655345E-01  -2.72518      -121.176       121.176       2064.23       2185.41    
   9  0.355481      -1.03428      -45.9899       45.9899       2082.78       2128.77    
  10  0.728523     -0.316737      -14.0838       14.0838       2090.77       2104.85    
  11  0.573220     -0.556486      -24.7444       24.7444       2125.29       2150.03    
  12  0.112478      -2.18499      -97.1568       97.1568       2125.48       2222.63    
  13  0.338739      -1.08253      -48.1350       48.1350       2112.12       2160.26    
  14  0.239648      -1.42858      -63.5226       63.5226       2130.73       2194.25    
  15  0.918959     -0.845134E-01  -3.75793       3.75793       2145.14       2148.89    
  16  0.283771      -1.25959      -56.0081       56.0081       2146.80       2202.80    
  17  0.414404     -0.880913      -39.1702       39.1702       2139.01       2178.18    
  18  0.716403     -0.333512      -14.8298       14.8298       2095.32       2110.15    
  19  0.317726      -1.14657      -50.9826       50.9826       2147.06       2198.04    
  20  0.339005      -1.08174      -48.1001       48.1001       2144.24       2192.34    
  21  0.163059      -1.81364      -80.6445       80.6445       2126.23       2206.87    
  22  0.477081     -0.740069      -32.9075       32.9075       2133.72       2166.63    
  23  0.105851      -2.24573      -99.8573       99.8573       2151.05       2250.91    
  24  0.840431     -0.173840      -7.72988       7.72988       2117.27       2125.00    
  25  0.235315      -1.44683      -64.3341       64.3341       2126.88       2191.22    
  26  0.865464     -0.144489      -6.42479       6.42479       2127.07       2133.50    
  27  0.909462     -0.949026E-01  -4.21989       4.21989       2163.72       2167.94    
  28  0.152105E-01  -4.18577      -186.122       186.122       2138.52       2324.64    
  29  0.962485     -0.382371E-01  -1.70023       1.70023       2159.84       2161.54    
  30  0.259410      -1.34934      -59.9992       59.9992       2143.13       2203.13    
  31  0.364880      -1.00819      -44.8295       44.8295       2188.26       2233.09    
  32  0.467235     -0.760923      -33.8348       33.8348       2102.74       2136.58    
  33  0.844908     -0.168527      -7.49365       7.49365       2135.56       2143.05    
  34  0.188232      -1.67008      -74.2610       74.2610       2131.91       2206.17    
  35  0.496585     -0.700000      -31.1258       31.1258       2207.10       2238.22    
  36  0.410505     -0.890367      -39.5906       39.5906       2219.15       2258.74    
  37  0.533875     -0.627594      -27.9063       27.9063       2230.32       2258.22    
  38  0.610668     -0.493202      -21.9304       21.9304       2244.96       2266.89    
  39  0.241933      -1.41910      -63.1007       63.1007       2171.15       2234.25    
  40  0.642629     -0.442188      -19.6621       19.6621       2251.50       2271.17    
  41  0.775072     -0.254799      -11.3298       11.3298       2143.42       2154.75    
  42  0.345343      -1.06322      -47.2764       47.2764       2245.22       2292.50    
  43  0.844097     -0.169488      -7.53636       7.53636       2278.68       2286.21    
  44  0.426886     -0.851239      -37.8507       37.8507       2284.45       2322.30    
  45  0.594109     -0.520693      -23.1529       23.1529       2191.99       2215.15    
  46  0.489527     -0.714316      -31.7624       31.7624       2295.95       2327.72    
  47  0.313882      -1.15874      -51.5239       51.5239       2191.68       2243.20    
  48  0.687066     -0.375325      -16.6890       16.6890       2313.74       2330.43    
  49  0.394505     -0.930124      -41.3584       41.3584       2375.12       2416.48    
  50  0.971200     -0.292233E-01  -1.29943       1.29943       2118.68       2119.98    
  51  0.916939     -0.867145E-01  -3.85580       3.85580       2113.59       2117.45    
loop,thermsimp(1:2)       22   7.81106       9.81931    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257       2322.41          0.86          1.12         22.07          0.05          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2322.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       22
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       23
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      256     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -7.31261       7.31261       2087.11       2094.42    
   2  0.848474     -0.164316      -7.30639       7.30639       2090.77       2098.08    
   3  0.146795      -1.91872      -85.3167       85.3167       2104.41       2189.72    
   4  0.398624     -0.919738      -40.8966       40.8966       2100.18       2141.08    
   5  0.888093     -0.118679      -5.27710       5.27710       2095.32       2100.60    
   6  0.475009     -0.744421      -33.1010       33.1010       2099.93       2133.03    
   7  0.120824      -2.11342      -93.9743       93.9743       2113.59       2207.57    
   8  0.270052      -1.30914      -58.2116       58.2116       2111.02       2169.23    
   9  0.201748E-01  -3.90332      -173.563       173.563       2111.53       2285.09    
  10  0.999386     -0.614559E-03 -0.273266E-01  0.273266E-01   2118.68       2118.71    
  11  0.212655      -1.54808      -68.8363       68.8363       2117.27       2186.11    
  12  0.197911      -1.61994      -72.0314       72.0314       2082.78       2154.81    
  13  0.786394     -0.240297      -10.6849       10.6849       2127.07       2137.76    
  14  0.781263     -0.246844      -10.9760       10.9760       2102.74       2113.72    
  15  0.788011     -0.238244      -10.5936       10.5936       2135.56       2146.15    
  16  0.956387     -0.445927E-01  -1.98283       1.98283       2145.14       2147.12    
  17  0.717415     -0.332100      -14.7670       14.7670       2125.29       2140.05    
  18  0.808756     -0.212258      -9.43815       9.43815       2143.42       2152.86    
  19  0.756838     -0.278606      -12.3884       12.3884       2112.12       2124.51    
  20  0.570684     -0.560919      -24.9415       24.9415       2159.84       2184.78    
  21  0.946031     -0.554796E-01  -2.46693       2.46693       2116.37       2118.84    
  22  0.678634E-01  -2.69026      -119.624       119.624       2133.72       2253.35    
  23  0.631502     -0.459654      -20.4387       20.4387       2163.72       2184.16    
  24  0.114784E-01  -4.46729      -198.640       198.640       2139.01       2337.65    
  25  0.549681     -0.598417      -26.6089       26.6089       2064.23       2090.84    
  26  0.846433     -0.166725      -7.41350       7.41350       2126.88       2134.30    
  27  0.441841     -0.816805      -36.3196       36.3196       2144.24       2180.56    
  28  0.299100      -1.20698      -53.6688       53.6688       2130.73       2184.40    
  29  0.378130     -0.972517      -43.2434       43.2434       2147.06       2190.30    
  30  0.830469     -0.185764      -8.26009       8.26009       2146.80       2155.06    
  31  0.675108     -0.392883      -17.4697       17.4697       2143.13       2160.60    
  32  0.997619     -0.238377E-02 -0.105995      0.105995       2131.91       2132.02    
  33  0.897623     -0.108005      -4.80248       4.80248       2126.23       2131.03    
  34  0.591811E-01  -2.82715      -125.711       125.711       2191.99       2317.70    
  35  0.229825      -1.47044      -65.3836       65.3836       2125.48       2190.86    
  36  0.654017     -0.424622      -18.8810       18.8810       2188.26       2207.14    
  37  0.305777      -1.18490      -52.6872       52.6872       2171.15       2223.83    
  38  0.936135     -0.659954E-01  -2.93452       2.93452       2207.10       2210.03    
  39  0.698153     -0.359317      -15.9772       15.9772       2191.68       2207.65    
  40  0.829975     -0.186360      -8.28659       8.28659       2151.05       2159.34    
  41  0.951351     -0.498721E-01  -2.21758       2.21758       2230.32       2232.54    
  42  0.883299     -0.124092      -5.51781       5.51781       2219.15       2224.67    
  43  0.910087     -0.942154E-01  -4.18933       4.18933       2244.96       2249.15    
  44  0.590840     -0.526210      -23.3982       23.3982       2251.50       2274.90    
  45  0.146785      -1.91879      -85.3198       85.3198       2278.68       2363.99    
  46  0.830381E-01  -2.48846      -110.650       110.650       2245.22       2355.87    
  47  0.289482      -1.23966      -55.1222       55.1222       2284.45       2339.57    
  48  0.594462     -0.520098      -23.1264       23.1264       2138.52       2161.64    
  49  0.241311      -1.42167      -63.2151       63.2151       2295.95       2359.17    
  50  0.612368     -0.490422      -21.8068       21.8068       2313.74       2335.54    
  51  0.952207     -0.489727E-01  -2.17759       2.17759       2322.41       2324.59    
loop,thermsimp(1:2)       23   7.31261       7.30639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258       2086.37          0.86          1.12         22.17          0.07          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259       2296.39          0.86          1.12         21.93          0.06          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2086.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       23
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       24
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      258     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -101.494       101.494       2064.23       2165.72    
   2  0.372115     -0.988552      -43.9564       43.9564       2087.11       2131.07    
   3  0.732875     -0.310780      -13.8190       13.8190       2090.77       2104.59    
   4  0.341646      -1.07398      -47.7550       47.7550       2095.32       2143.08    
   5  0.406512     -0.900141      -40.0252       40.0252       2102.74       2142.77    
   6  0.271848      -1.30251      -57.9168       57.9168       2118.68       2176.60    
   7  0.738418     -0.303245      -13.4839       13.4839       2116.37       2129.86    
   8  0.903199     -0.101813      -4.52716       4.52716       2112.12       2116.65    
   9  0.511789     -0.669842      -29.7848       29.7848       2126.23       2156.01    
  10  0.202674      -1.59616      -70.9739       70.9739       2131.91       2202.89    
  11  0.325695      -1.12179      -49.8811       49.8811       2099.93       2149.81    
  12  0.719720     -0.328893      -14.6244       14.6244       2126.88       2141.51    
  13  0.715609     -0.334622      -14.8791       14.8791       2127.07       2141.95    
  14  0.973328     -0.270339E-01  -1.20208       1.20208       2125.29       2126.49    
  15  0.373998     -0.983504      -43.7320       43.7320       2100.18       2143.91    
  16  0.977965     -0.222815E-01 -0.990757      0.990757       2135.56       2136.55    
  17  0.105495      -2.24909      -100.007       100.007       2145.14       2245.14    
  18  0.729809     -0.314973      -14.0054       14.0054       2143.42       2157.43    
  19  0.378008     -0.972839      -43.2578       43.2578       2082.78       2126.03    
  20  0.678326     -0.388127      -17.2582       17.2582       2146.80       2164.05    
  21  0.671993     -0.397507      -17.6754       17.6754       2151.05       2168.73    
  22  0.515926     -0.661792      -29.4269       29.4269       2143.13       2172.56    
  23  0.363490      -1.01200      -44.9992       44.9992       2138.52       2183.51    
  24  0.206319      -1.57833      -70.1812       70.1812       2111.02       2181.20    
  25  0.755157E-01  -2.58341      -114.873       114.873       2144.24       2259.11    
  26  0.413763     -0.882461      -39.2391       39.2391       2163.72       2202.96    
  27  0.279023      -1.27646      -56.7584       56.7584       2130.73       2187.49    
  28  0.506422     -0.680385      -30.2536       30.2536       2159.84       2190.09    
  29  0.643082E-02  -5.04665      -224.402       224.402       2117.27       2341.67    
  30  0.285888E-01  -3.55474      -158.063       158.063       2104.41       2262.47    
  31  0.660419     -0.414880      -18.4478       18.4478       2147.06       2165.51    
  32  0.739369     -0.301959      -13.4267       13.4267       2125.48       2138.90    
  33  0.270269      -1.30834      -58.1758       58.1758       2188.26       2246.44    
  34  0.663889     -0.409640      -18.2148       18.2148       2113.59       2131.81    
  35  0.898739E-01  -2.40935      -107.133       107.133       2191.68       2298.81    
  36  0.832427     -0.183410      -8.15541       8.15541       2207.10       2215.25    
  37  0.723106     -0.324200      -14.4157       14.4157       2171.15       2185.56    
  38  0.986274     -0.138207E-01 -0.614545      0.614545       2219.15       2219.77    
  39  0.812861     -0.207195      -9.21302       9.21302       2230.32       2239.53    
  40  0.553236     -0.591971      -26.3223       26.3223       2244.96       2271.28    
  41  0.693785E-01  -2.66818      -118.642       118.642       2133.72       2252.36    
  42  0.117256      -2.14340      -95.3072       95.3072       2251.50       2346.81    
  43  0.807809     -0.213430      -9.49025       9.49025       2111.53       2121.02    
  44  0.900249     -0.105084      -4.67260       4.67260       2191.99       2196.67    
  45  0.753470     -0.283066      -12.5867       12.5867       2322.41       2335.00    
  46  0.127159      -2.06232      -91.7019       91.7019       2313.74       2405.44    
  47  0.535389     -0.624762      -27.7803       27.7803       2139.01       2166.79    
  48  0.957281     -0.436582E-01  -1.94128       1.94128       2284.45       2286.39    
  49  0.227700      -1.47973      -65.7967       65.7967       2245.22       2311.02    
  50  0.636404     -0.451921      -20.0949       20.0949       2295.95       2316.05    
  51  0.905015     -0.998042E-01  -4.43784       4.43784       2086.37       2090.81    
loop,thermsimp(1:2)       24   101.494       43.9564    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260       2269.45          0.85          1.12         21.96          0.06          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2269.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       24
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       25
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      259     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -1.68651       1.68651       2086.37       2088.05    
   2  0.355374      -1.03458      -46.0032       46.0032       2090.77       2136.77    
   3  0.294461      -1.22261      -54.3638       54.3638       2112.12       2166.49    
   4  0.644538     -0.439222      -19.5302       19.5302       2111.53       2131.06    
   5  0.741622     -0.298915      -13.2914       13.2914       2082.78       2096.07    
   6  0.805913E-01  -2.51837      -111.980       111.980       2125.29       2237.27    
   7  0.498180     -0.696794      -30.9833       30.9833       2116.37       2147.36    
   8  0.771004     -0.260061      -11.5637       11.5637       2087.11       2098.67    
   9  0.753480     -0.283053      -12.5861       12.5861       2113.59       2126.18    
  10  0.460525     -0.775387      -34.4780       34.4780       2135.56       2170.04    
  11  0.918626     -0.848759E-01  -3.77405       3.77405       2125.48       2129.25    
  12  0.355379      -1.03457      -46.0026       46.0026       2126.88       2172.89    
  13  0.664646     -0.408501      -18.1642       18.1642       2127.07       2145.23    
  14  0.328018      -1.11469      -49.5651       49.5651       2102.74       2152.31    
  15  0.529583     -0.635665      -28.2651       28.2651       2095.32       2123.59    
  16  0.259823      -1.34775      -59.9285       59.9285       2100.18       2160.11    
  17  0.463690E-01  -3.07112      -136.559       136.559       2099.93       2236.48    
  18  0.366509      -1.00373      -44.6314       44.6314       2126.23       2170.86    
  19  0.794534     -0.229999      -10.2270       10.2270       2143.42       2153.65    
  20  0.669373     -0.401413      -17.8490       17.8490       2146.80       2164.65    
  21  0.798901     -0.224518      -9.98332       9.98332       2147.06       2157.04    
  22  0.610403     -0.493636      -21.9498       21.9498       2064.23       2086.18    
  23  0.267818      -1.31745      -58.5809       58.5809       2139.01       2197.59    
  24  0.663049     -0.410906      -18.2711       18.2711       2151.05       2169.32    
  25  0.782871     -0.244788      -10.8846       10.8846       2143.13       2154.01    
  26  0.706545     -0.347368      -15.4459       15.4459       2118.68       2134.13    
  27  0.120119      -2.11927      -94.2344       94.2344       2111.02       2205.25    
  28  0.270575      -1.30721      -58.1256       58.1256       2138.52       2196.64    
  29  0.505391     -0.682422      -30.3442       30.3442       2171.15       2201.49    
  30  0.665734     -0.406865      -18.0914       18.0914       2130.73       2148.82    
  31  0.836788     -0.178185      -7.92308       7.92308       2159.84       2167.76    
  32  0.866983     -0.142736      -6.34683       6.34683       2191.99       2198.34    
  33  0.552904     -0.592571      -26.3489       26.3489       2131.91       2158.26    
  34  0.554153     -0.590314      -26.2486       26.2486       2163.72       2189.97    
  35  0.592407E-01  -2.82615      -125.666       125.666       2207.10       2332.76    
  36  0.902163     -0.102960      -4.57815       4.57815       2219.15       2223.73    
  37  0.266638E-01  -3.62445      -161.163       161.163       2230.32       2391.48    
  38  0.897053     -0.108640      -4.83073       4.83073       2145.14       2149.97    
  39  0.840496     -0.173763      -7.72645       7.72645       2188.26       2195.99    
  40  0.288358      -1.24355      -55.2952       55.2952       2133.72       2189.02    
  41  0.835972E-01  -2.48175      -110.352       110.352       2144.24       2254.59    
  42  0.412070     -0.886563      -39.4214       39.4214       2104.41       2143.83    
  43  0.725010     -0.321570      -14.2987       14.2987       2244.96       2259.26    
  44  0.316556      -1.15026      -51.1467       51.1467       2284.45       2335.59    
  45  0.486178     -0.721181      -32.0677       32.0677       2191.68       2223.74    
  46  0.143341      -1.94253      -86.3756       86.3756       2245.22       2331.60    
  47  0.956913     -0.440430E-01  -1.95839       1.95839       2295.95       2297.91    
  48  0.362697      -1.01419      -45.0963       45.0963       2322.41       2367.51    
  49  0.951746     -0.494572E-01  -2.19914       2.19914       2117.27       2119.47    
  50  0.511140     -0.671112      -29.8413       29.8413       2251.50       2281.34    
  51  0.364891E-01  -3.31074      -147.214       147.214       2269.45       2416.67    
loop,thermsimp(1:2)       25   1.68651       46.0032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       2313.74          0.86          1.12         21.89          0.01          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    2313.7       0.9117     -2.275      3.272     -102.6      1.779    
                       1.036      2.657     -99.70      3.532      1.481    

                       4.165     -2.632      1.540      7000.      7000.    

                      -1.699      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.754     -3.050     -10.11      5.526    

                      -13.16     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2751E-01 0.2614     0.1353E-01 0.1045    

                     -0.2486    -0.1074     0.1951     0.2008     0.8569E-01



                     -0.3139    -0.4850      0.000     0.1126    -0.4299E-02

                     -0.2670E-01 0.1643    -0.7116    -0.2843E-01 0.2619    

                      0.1532    -0.4426E-01-0.5577     -1.138      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.312      8.871    -0.1672E+05 -6.000    

                     -0.2759     -2.910      9.433      8.799    -0.1969E+05



                      -6.000     0.6180    -0.9009E-01  8.610      9.208    

                     -0.1944E+05 -6.000     -1.253    -0.3286      9.151    

                       8.819    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2313.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       25
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       26
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      260     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.558258      0.558258       2064.23       2064.79    
   2  0.516099     -0.661457      -29.4120       29.4120       2086.37       2115.78    
   3  0.202206      -1.59847      -71.0767       71.0767       2082.78       2153.85    
   4  0.240260      -1.42603      -63.4093       63.4093       2087.11       2150.52    
   5  0.717263E-01  -2.63490      -117.162       117.162       2117.27       2234.43    
   6  0.395382     -0.927902      -41.2596       41.2596       2095.32       2136.58    
   7  0.494348     -0.704516      -31.3266       31.3266       2113.59       2144.92    
   8  0.970815     -0.296196E-01  -1.31705       1.31705       2125.48       2126.79    
   9  0.992795     -0.723105E-02 -0.321532      0.321532       2111.53       2111.85    
  10  0.387320     -0.948503      -42.1756       42.1756       2118.68       2160.86    
  11  0.586568     -0.533466      -23.7208       23.7208       2090.77       2114.49    
  12  0.119144      -2.12742      -94.5969       94.5969       2104.41       2199.00    
  13  0.145144      -1.93003      -85.8196       85.8196       2127.07       2212.89    
  14  0.767931     -0.264056      -11.7414       11.7414       2116.37       2128.11    
  15  0.415014     -0.879442      -39.1048       39.1048       2130.73       2169.83    
  16  0.994477     -0.553801E-02 -0.246250      0.246250       2145.14       2145.38    
  17  0.757243     -0.278071      -12.3646       12.3646       2102.74       2115.10    
  18  0.669290     -0.401537      -17.8545       17.8545       2143.42       2161.28    
  19  0.112026      -2.18903      -97.3361       97.3361       2143.13       2240.47    
  20  0.434244     -0.834148      -37.0908       37.0908       2147.06       2184.15    
  21  0.491828     -0.709627      -31.5539       31.5539       2131.91       2163.47    
  22  0.517535     -0.658677      -29.2884       29.2884       2100.18       2129.47    
  23  0.411147     -0.888804      -39.5211       39.5211       2146.80       2186.32    
  24  0.250164      -1.38564      -61.6131       61.6131       2112.12       2173.73    
  25  0.109742E-01  -4.51221      -200.638       200.638       2159.84       2360.48    
  26  0.559459     -0.580786      -25.8249       25.8249       2151.05       2176.88    
  27  0.289677      -1.23899      -55.0922       55.0922       2135.56       2190.65    
  28  0.835809     -0.179356      -7.97514       7.97514       2126.23       2134.21    
  29  0.236182      -1.44315      -64.1704       64.1704       2126.88       2191.05    
  30  0.700988     -0.355264      -15.7970       15.7970       2133.72       2149.52    
  31  0.886914     -0.120007      -5.33618       5.33618       2163.72       2169.06    
  32  0.182911      -1.69875      -75.5358       75.5358       2188.26       2263.80    
  33  0.693089     -0.366597      -16.3009       16.3009       2138.52       2154.82    
  34  0.108523      -2.22079      -98.7484       98.7484       2139.01       2237.76    
  35  0.141600      -1.95475      -86.9187       86.9187       2191.99       2278.91    
  36  0.168348E-01  -4.08431      -181.611       181.611       2171.15       2352.76    
  37  0.419419E-01  -3.17147      -141.021       141.021       2111.02       2252.04    
  38  0.244896      -1.40692      -62.5595       62.5595       2219.15       2281.71    
  39  0.360662      -1.01981      -45.3465       45.3465       2191.68       2237.02    
  40  0.927013     -0.757879E-01  -3.36994       3.36994       2099.93       2103.30    
  41  0.869067     -0.140335      -6.24005       6.24005       2125.29       2131.53    
  42  0.827083     -0.189851      -8.44180       8.44180       2144.24       2152.68    
  43  0.928403     -0.742893E-01  -3.30331       3.30331       2244.96       2248.26    
  44  0.513193     -0.667103      -29.6631       29.6631       2251.50       2281.17    
  45  0.809080     -0.211858      -9.42036       9.42036       2295.95       2305.37    
  46  0.341224E-02  -5.68039      -252.581       252.581       2245.22       2497.80    
  47  0.734431     -0.308659      -13.7247       13.7247       2207.10       2220.82    
  48  0.688454     -0.373307      -16.5993       16.5993       2284.45       2301.05    
  49  0.990614     -0.943067E-02 -0.419339      0.419339       2322.41       2322.83    
  50  0.143408      -1.94206      -86.3546       86.3546       2230.32       2316.67    
  51  0.868596     -0.140878      -6.26419       6.26419       2313.74       2320.00    
loop,thermsimp(1:2)       26  0.558258       29.4120    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       2162.12          0.85          1.12         21.99          0.03          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2162.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       26
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       27
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      261     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -71.6515       71.6515       2064.23       2135.88    
   2  0.983274     -0.168677E-01 -0.750028      0.750028       2099.93       2100.68    
   3  0.569108     -0.563685      -25.0645       25.0645       2111.53       2136.59    
   4  0.411179     -0.888728      -39.5177       39.5177       2090.77       2130.29    
   5  0.889241     -0.117387      -5.21965       5.21965       2102.74       2107.96    
   6  0.109537      -2.21149      -98.3351       98.3351       2086.37       2184.70    
   7  0.658027     -0.418509      -18.6092       18.6092       2125.48       2144.09    
   8  0.427534     -0.849722      -37.7833       37.7833       2116.37       2154.16    
   9  0.277803      -1.28084      -56.9532       56.9532       2100.18       2157.13    
  10  0.568421     -0.564892      -25.1182       25.1182       2125.29       2150.41    
  11  0.368489     -0.998346      -44.3919       44.3919       2126.23       2170.62    
  12  0.100945E-01  -4.59576      -204.353       204.353       2095.32       2299.68    
  13  0.811445     -0.208939      -9.29055       9.29055       2113.59       2122.88    
  14  0.135138      -2.00146      -88.9957       88.9957       2145.14       2234.13    
  15  0.600340     -0.510258      -22.6889       22.6889       2133.72       2156.41    
  16  0.537538     -0.620755      -27.6022       27.6022       2087.11       2114.71    
  17  0.923261     -0.798434E-01  -3.55027       3.55027       2144.24       2147.79    
  18  0.296505      -1.21569      -54.0563       54.0563       2082.78       2136.83    
  19  0.975666     -0.246348E-01  -1.09540       1.09540       2138.52       2139.61    
  20  0.102971      -2.27331      -101.084       101.084       2118.68       2219.77    
  21  0.110137      -2.20603      -98.0922       98.0922       2143.42       2241.51    
  22  0.874539     -0.134058      -5.96096       5.96096       2131.91       2137.87    
  23  0.887507     -0.119339      -5.30648       5.30648       2163.72       2169.03    
  24  0.811767     -0.208543      -9.27294       9.27294       2130.73       2140.00    
  25  0.304283      -1.18980      -52.9049       52.9049       2112.12       2165.03    
  26  0.304144      -1.19025      -52.9252       52.9252       2151.05       2203.98    
  27  0.854538     -0.157194      -6.98970       6.98970       2147.06       2154.05    
  28  0.543001     -0.610645      -27.1526       27.1526       2146.80       2173.95    
  29  0.808766     -0.212246      -9.43762       9.43762       2135.56       2145.00    
  30  0.286176      -1.25115      -55.6329       55.6329       2126.88       2182.52    
  31  0.328161      -1.11425      -49.5456       49.5456       2104.41       2153.95    
  32  0.563264     -0.574006      -25.5235       25.5235       2127.07       2152.59    
  33  0.180895      -1.70984      -76.0288       76.0288       2207.10       2283.12    
  34  0.977796     -0.224538E-01 -0.998417      0.998417       2117.27       2118.27    
  35  0.650784     -0.429577      -19.1013       19.1013       2191.68       2210.78    
  36  0.350586      -1.04815      -46.6064       46.6064       2139.01       2185.62    
  37  0.852996E-01  -2.46159      -109.456       109.456       2143.13       2252.59    
  38  0.363921      -1.01082      -44.9466       44.9466       2244.96       2289.91    
  39  0.715496E-01  -2.63737      -117.272       117.272       2111.02       2228.29    
  40  0.540542     -0.615184      -27.3544       27.3544       2188.26       2215.62    
  41  0.458744E-02  -5.38443      -239.421       239.421       2191.99       2431.41    
  42  0.684509     -0.379054      -16.8548       16.8548       2251.50       2268.36    
  43  0.827193     -0.189717      -8.43587       8.43587       2219.15       2227.59    
  44  0.430712     -0.842315      -37.4539       37.4539       2284.45       2321.90    
  45  0.925073     -0.778822E-01  -3.46307       3.46307       2295.95       2299.42    
  46  0.139567      -1.96921      -87.5620       87.5620       2230.32       2317.88    
  47  0.905138     -0.996680E-01  -4.43178       4.43178       2313.74       2318.17    
  48  0.230323      -1.46827      -65.2873       65.2873       2322.41       2387.70    
  49  0.854981     -0.156676      -6.96666       6.96666       2171.15       2178.11    
  50  0.526676     -0.641170      -28.5099       28.5099       2159.84       2188.35    
  51  0.425904     -0.853542      -37.9531       37.9531       2162.12       2200.07    
loop,thermsimp(1:2)       27   71.6515      0.750028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       2213.67          0.86          1.12         21.88          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2213.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       27
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       28
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      262     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -65.0290       65.0290       2099.93       2164.95    
   2  0.922423     -0.807516E-01  -3.59066       3.59066       2102.74       2106.33    
   3  0.556007     -0.586974      -26.1001       26.1001       2087.11       2113.21    
   4  0.921345     -0.819211E-01  -3.64266       3.64266       2117.27       2120.91    
   5  0.623358     -0.472635      -21.0159       21.0159       2113.59       2134.61    
   6  0.967150     -0.334012E-01  -1.48520       1.48520       2090.77       2092.26    
   7  0.239844      -1.42777      -63.4863       63.4863       2064.23       2127.72    
   8  0.707370     -0.346201      -15.3940       15.3940       2111.53       2126.92    
   9  0.375591     -0.979256      -43.5431       43.5431       2082.78       2126.32    
  10  0.164915      -1.80233      -80.1413       80.1413       2131.91       2212.05    
  11  0.634729     -0.454558      -20.2121       20.2121       2138.52       2158.73    
  12  0.956585     -0.443852E-01  -1.97361       1.97361       2130.73       2132.70    
  13  0.281051      -1.26922      -56.4364       56.4364       2125.48       2181.91    
  14  0.332446      -1.10128      -48.9688       48.9688       2135.56       2184.53    
  15  0.417901     -0.872510      -38.7966       38.7966       2144.24       2183.04    
  16  0.454459     -0.788647      -35.0676       35.0676       2125.29       2160.35    
  17  0.163150      -1.81309      -80.6198       80.6198       2127.07       2207.69    
  18  0.412675     -0.885095      -39.3562       39.3562       2104.41       2143.76    
  19  0.510076     -0.673195      -29.9339       29.9339       2147.06       2176.99    
  20  0.159872E-02  -6.43855      -286.293       286.293       2116.37       2402.67    
  21  0.279094      -1.27620      -56.7470       56.7470       2133.72       2190.47    
  22  0.229843E-01  -3.77294      -167.766       167.766       2100.18       2267.94    
  23  0.829240E-02  -4.79242      -213.097       213.097       2112.12       2325.22    
  24  0.722732     -0.324717      -14.4387       14.4387       2163.72       2178.16    
  25  0.399402     -0.917787      -40.8098       40.8098       2126.23       2167.04    
  26  0.321457      -1.13489      -50.4635       50.4635       2146.80       2197.26    
  27  0.103147      -2.27160      -101.008       101.008       2171.15       2272.15    
  28  0.488570     -0.716273      -31.8494       31.8494       2126.88       2158.73    
  29  0.775391     -0.254388      -11.3115       11.3115       2086.37       2097.68    
  30  0.264831      -1.32866      -59.0796       59.0796       2139.01       2198.09    
  31  0.291634      -1.23225      -54.7928       54.7928       2159.84       2214.63    
  32  0.754799E-02  -4.88647      -217.279       217.279       2162.12       2379.40    
  33  0.403715     -0.907047      -40.3323       40.3323       2151.05       2191.38    
  34  0.794963     -0.229460      -10.2031       10.2031       2191.68       2201.88    
  35  0.482612E-01  -3.03113      -134.780       134.780       2188.26       2323.04    
  36  0.309506      -1.17278      -52.1481       52.1481       2118.68       2170.83    
  37  0.265676      -1.32548      -58.9379       58.9379       2219.15       2278.09    
  38  0.793358     -0.231480      -10.2929       10.2929       2111.02       2121.31    
  39  0.603192E-01  -2.80811      -124.864       124.864       2145.14       2270.00    
  40  0.516664     -0.660363      -29.3634       29.3634       2143.42       2172.78    
  41  0.524892E-01  -2.94715      -131.046       131.046       2143.13       2274.18    
  42  0.581500     -0.542144      -24.1067       24.1067       2251.50       2275.61    
  43  0.403805     -0.906823      -40.3223       40.3223       2207.10       2247.42    
  44  0.447829     -0.803344      -35.7211       35.7211       2244.96       2280.68    
  45  0.470604     -0.753737      -33.5153       33.5153       2295.95       2329.47    
  46  0.479088     -0.735871      -32.7208       32.7208       2095.32       2128.04    
  47  0.959223     -0.416322E-01  -1.85119       1.85119       2230.32       2232.17    
  48  0.527403     -0.639789      -28.4485       28.4485       2313.74       2342.19    
  49  0.731687     -0.312402      -13.8911       13.8911       2284.45       2298.34    
  50  0.682707     -0.381689      -16.9720       16.9720       2322.41       2339.38    
  51  0.386616     -0.950322      -42.2565       42.2565       2213.67       2255.92    
loop,thermsimp(1:2)       28   65.0290       3.59066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       2238.69          0.85          1.12         21.88          0.09          0.05         23.98
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2238.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       28
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       29
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      263     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -49.0217       49.0217       2090.77       2139.79    
   2  0.991191     -0.884791E-02 -0.393426      0.393426       2086.37       2086.76    
   3  0.752830     -0.283916      -12.6245       12.6245       2102.74       2115.36    
   4  0.718872     -0.330071      -14.6768       14.6768       2087.11       2101.79    
   5  0.362244      -1.01544      -45.1519       45.1519       2117.27       2162.42    
   6  0.993342E-01  -2.30927      -102.683       102.683       2111.02       2213.70    
   7  0.734379     -0.308729      -13.7278       13.7278       2082.78       2096.50    
   8  0.190509      -1.65806      -73.7262       73.7262       2111.53       2185.25    
   9  0.113713      -2.17408      -96.6713       96.6713       2064.23       2160.90    
  10  0.582158     -0.541014      -24.0564       24.0564       2095.32       2119.38    
  11  0.100405E-01  -4.60113      -204.591       204.591       2130.73       2335.32    
  12  0.614877     -0.486333      -21.6250       21.6250       2113.59       2135.22    
  13  0.996806     -0.319890E-02 -0.142241      0.142241       2104.41       2104.55    
  14  0.439871E-01  -3.12386      -138.904       138.904       2138.52       2277.42    
  15  0.610456     -0.493549      -21.9459       21.9459       2126.88       2148.83    
  16  0.676471     -0.390866      -17.3800       17.3800       2125.29       2142.67    
  17  0.263829      -1.33246      -59.2482       59.2482       2099.93       2159.17    
  18  0.761962     -0.271858      -12.0883       12.0883       2126.23       2138.32    
  19  0.405295     -0.903140      -40.1585       40.1585       2118.68       2158.84    
  20  0.184680      -1.68913      -75.1081       75.1081       2143.42       2218.53    
  21  0.695434     -0.363219      -16.1507       16.1507       2147.06       2163.21    
  22  0.597154     -0.515580      -22.9255       22.9255       2163.72       2186.65    
  23  0.254276      -1.36933      -60.8880       60.8880       2125.48       2186.36    
  24  0.777974     -0.251062      -11.1636       11.1636       2144.24       2155.40    
  25  0.597236     -0.515443      -22.9194       22.9194       2135.56       2158.48    
  26  0.658168     -0.418295      -18.5997       18.5997       2133.72       2152.32    
  27  0.917953     -0.856086E-01  -3.80663       3.80663       2151.05       2154.86    
  28  0.167567      -1.78637      -79.4320       79.4320       2146.80       2226.23    
  29  0.867739E-02  -4.74703      -211.079       211.079       2139.01       2350.09    
  30  0.157469      -1.84853      -82.1957       82.1957       2191.68       2273.87    
  31  0.947458     -0.539724E-01  -2.39991       2.39991       2127.07       2129.47    
  32  0.883772     -0.123556      -5.49397       5.49397       2131.91       2137.41    
  33  0.873100     -0.135705      -6.03418       6.03418       2159.84       2165.87    
  34  0.138043      -1.98019      -88.0499       88.0499       2230.32       2318.37    
  35  0.833185     -0.182500      -8.11493       8.11493       2207.10       2215.21    
  36  0.907894     -0.966275E-01  -4.29659       4.29659       2213.67       2217.96    
  37  0.858432     -0.152648      -6.78757       6.78757       2100.18       2106.97    
  38  0.192050      -1.65000      -73.3680       73.3680       2145.14       2218.50    
  39  0.890666     -0.115786      -5.14846       5.14846       2171.15       2176.29    
  40  0.389935     -0.941775      -41.8765       41.8765       2143.13       2185.01    
  41  0.842362     -0.171545      -7.62784       7.62784       2251.50       2259.13    
  42  0.143912      -1.93855      -86.1985       86.1985       2219.15       2305.35    
  43  0.678545     -0.387804      -17.2439       17.2439       2244.96       2262.20    
  44  0.621021     -0.476390      -21.1829       21.1829       2284.45       2305.63    
  45  0.533199     -0.628861      -27.9626       27.9626       2188.26       2216.22    
  46  0.891703     -0.114623      -5.09675       5.09675       2112.12       2117.22    
  47  0.675469     -0.392349      -17.4460       17.4460       2295.95       2313.40    
  48  0.757471     -0.277770      -12.3512       12.3512       2322.41       2334.76    
  49  0.855441     -0.156139      -6.94278       6.94278       2313.74       2320.68    
  50  0.737982     -0.303836      -13.5102       13.5102       2162.12       2175.63    
  51  0.630328     -0.461515      -20.5215       20.5215       2238.69       2259.21    
loop,thermsimp(1:2)       29   49.0217      0.393426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265       2126.26          0.86          1.12         21.96          0.09          0.05         24.08
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266       3569.19          0.85          1.12         21.87          0.06          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2126.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       29
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       30
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      265     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -82.1707       82.1707       2086.37       2168.54    
   2  0.553200     -0.592035      -26.3251       26.3251       2082.78       2109.10    
   3  0.825049     -0.192313      -8.55127       8.55127       2087.11       2095.66    
   4  0.767336     -0.264830      -11.7758       11.7758       2104.41       2116.18    
   5  0.966534     -0.340385E-01  -1.51354       1.51354       2100.18       2101.69    
   6  0.954430     -0.466410E-01  -2.07391       2.07391       2102.74       2104.81    
   7  0.780674     -0.247598      -11.0095       11.0095       2112.12       2123.13    
   8  0.312863      -1.16199      -51.6685       51.6685       2095.32       2146.99    
   9  0.990226     -0.982218E-02 -0.436748      0.436748       2127.07       2127.51    
  10  0.893872     -0.112193      -4.98869       4.98869       2113.59       2118.58    
  11  0.322320      -1.13221      -50.3442       50.3442       2131.91       2182.26    
  12  0.927465     -0.752997E-01  -3.34824       3.34824       2126.23       2129.58    
  13  0.539466     -0.617176      -27.4430       27.4430       2090.77       2118.21    
  14  0.461474     -0.773330      -34.3865       34.3865       2125.29       2159.67    
  15  0.745701     -0.293430      -13.0475       13.0475       2126.88       2139.93    
  16  0.703580     -0.351573      -15.6329       15.6329       2133.72       2149.35    
  17  0.917420E-01  -2.38878      -106.218       106.218       2151.05       2257.27    
  18  0.671661     -0.398001      -17.6973       17.6973       2144.24       2161.94    
  19  0.845179     -0.168207      -7.47941       7.47941       2135.56       2143.04    
  20  0.283605E-01  -3.56276      -158.420       158.420       2118.68       2277.10    
  21  0.108883E-01  -4.52006      -200.987       200.987       2099.93       2300.91    
  22  0.506006     -0.681208      -30.2902       30.2902       2064.23       2094.52    
  23  0.353918      -1.03869      -46.1859       46.1859       2117.27       2163.46    
  24  0.656862     -0.420282      -18.6880       18.6880       2147.06       2165.75    
  25  0.691560     -0.368806      -16.3991       16.3991       2159.84       2176.24    
  26  0.445402     -0.808779      -35.9627       35.9627       2162.12       2198.08    
  27  0.832700     -0.183081      -8.14079       8.14079       2171.15       2179.29    
  28  0.963063     -0.376360E-01  -1.67350       1.67350       2143.13       2144.80    
  29  0.422212     -0.862247      -38.3402       38.3402       2111.53       2149.87    
  30  0.917895     -0.856720E-01  -3.80944       3.80944       2125.48       2129.29    
  31  0.767210     -0.264994      -11.7831       11.7831       2163.72       2175.50    
  32  0.360836      -1.01933      -45.3250       45.3250       2111.02       2156.34    
  33  0.635930     -0.452667      -20.1280       20.1280       2207.10       2227.22    
  34  0.687292     -0.374995      -16.6743       16.6743       2188.26       2204.94    
  35  0.833832     -0.181724      -8.08043       8.08043       2213.67       2221.75    
  36  0.362075      -1.01590      -45.1727       45.1727       2145.14       2190.31    
  37  0.385764     -0.952530      -42.3547       42.3547       2143.42       2185.78    
  38  0.752556     -0.284279      -12.6406       12.6406       2146.80       2159.44    
  39  0.547433     -0.602515      -26.7911       26.7911       2251.50       2278.29    
  40  0.171004      -1.76607      -78.5291       78.5291       2238.69       2317.22    
  41  0.159022      -1.83871      -81.7591       81.7591       2244.96       2326.72    
  42  0.850806     -0.161571      -7.18431       7.18431       2191.68       2198.86    
  43  0.926075     -0.768001E-01  -3.41495       3.41495       2138.52       2141.93    
  44  0.584885     -0.536340      -23.8486       23.8486       2219.15       2243.00    
  45  0.547650     -0.602120      -26.7735       26.7735       2284.45       2311.22    
  46  0.864296     -0.145840      -6.48485       6.48485       2295.95       2302.44    
  47  0.384639     -0.955450      -42.4845       42.4845       2230.32       2272.80    
  48  0.359776      -1.02227      -45.4559       45.4559       2313.74       2359.19    
  49  0.147032      -1.91711      -85.2451       85.2451       2322.41       2407.66    
  50  0.649806     -0.431082      -19.1683       19.1683       2130.73       2149.90    
  51  0.909946     -0.943695E-01  -4.19619       4.19619       2126.26       2130.45    
loop,thermsimp(1:2)       30   82.1707       26.3251    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267       2358.98          0.86          1.11         21.92          0.08          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2358.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       30
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       31
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      266     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -56.9998       56.9998       2064.23       2121.23    
   2  0.202445      -1.59728      -71.0240       71.0240       2087.11       2158.13    
   3  0.927152     -0.756373E-01  -3.36325       3.36325       2100.18       2103.54    
   4  0.403144     -0.908460      -40.3951       40.3951       2102.74       2143.14    
   5  0.791838     -0.233398      -10.3782       10.3782       2082.78       2093.15    
   6  0.292576      -1.22903      -54.6494       54.6494       2104.41       2159.05    
   7  0.135578      -1.99821      -88.8513       88.8513       2090.77       2179.62    
   8  0.516570     -0.660545      -29.3715       29.3715       2113.59       2142.96    
   9  0.730579     -0.313918      -13.9585       13.9585       2112.12       2126.08    
  10  0.508248     -0.676786      -30.0936       30.0936       2127.07       2157.16    
  11  0.928455     -0.742338E-01  -3.30084       3.30084       2125.48       2128.78    
  12  0.696477     -0.361721      -16.0841       16.0841       2126.23       2142.31    
  13  0.465556     -0.764522      -33.9948       33.9948       2126.26       2160.25    
  14  0.194653      -1.63654      -72.7694       72.7694       2126.88       2199.65    
  15  0.650312     -0.430303      -19.1336       19.1336       2138.52       2157.65    
  16  0.555802     -0.587343      -26.1165       26.1165       2135.56       2161.67    
  17  0.985517     -0.145893E-01 -0.648720      0.648720       2143.13       2143.78    
  18  0.923066     -0.800544E-01  -3.55965       3.55965       2095.32       2098.88    
  19  0.658765     -0.417388      -18.5593       18.5593       2133.72       2152.28    
  20  0.197878      -1.62010      -72.0387       72.0387       2111.53       2183.56    
  21  0.449673     -0.799236      -35.5384       35.5384       2130.73       2166.27    
  22  0.208093      -1.56977      -69.8006       69.8006       2111.02       2180.82    
  23  0.102791      -2.27506      -101.162       101.162       2146.80       2247.96    
  24  0.650538     -0.429955      -19.1182       19.1182       2125.29       2144.41    
  25  0.223365      -1.49895      -66.6515       66.6515       2144.24       2210.89    
  26  0.520729     -0.652525      -29.0148       29.0148       2117.27       2146.29    
  27  0.919707E-01  -2.38629      -106.107       106.107       2147.06       2253.17    
  28  0.788427     -0.237716      -10.5701       10.5701       2086.37       2096.94    
  29  0.395754     -0.926961      -41.2178       41.2178       2163.72       2204.94    
  30  0.903388     -0.101603      -4.51784       4.51784       2159.84       2164.36    
  31  0.569415     -0.563145      -25.0405       25.0405       2171.15       2196.19    
  32  0.974677     -0.256496E-01  -1.14052       1.14052       2131.91       2133.05    
  33  0.376411     -0.977073      -43.4460       43.4460       2143.42       2186.87    
  34  0.309090      -1.17412      -52.2080       52.2080       2145.14       2197.34    
  35  0.248039      -1.39417      -61.9925       61.9925       2162.12       2224.11    
  36  0.941329     -0.604621E-01  -2.68848       2.68848       2191.68       2194.36    
  37  0.131879      -2.02587      -90.0814       90.0814       2188.26       2278.34    
  38  0.188022      -1.67120      -74.3106       74.3106       2213.67       2287.98    
  39  0.898649E-01  -2.40945      -107.137       107.137       2207.10       2314.23    
  40  0.853893     -0.157949      -7.02328       7.02328       2219.15       2226.17    
  41  0.643577     -0.440714      -19.5966       19.5966       2151.05       2170.65    
  42  0.664391     -0.408885      -18.1813       18.1813       2230.32       2248.50    
  43  0.825262     -0.192054      -8.53978       8.53978       2118.68       2127.22    
  44  0.611498     -0.491843      -21.8700       21.8700       2251.50       2273.37    
  45  0.284000      -1.25878      -55.9722       55.9722       2099.93       2155.90    
  46  0.108174      -2.22402      -98.8919       98.8919       2295.95       2394.85    
  47  0.293070      -1.22734      -54.5744       54.5744       2284.45       2339.02    
  48  0.412045     -0.886623      -39.4241       39.4241       2238.69       2278.11    
  49  0.464041     -0.767783      -34.1398       34.1398       2244.96       2279.10    
  50  0.711768     -0.340003      -15.1184       15.1184       2313.74       2328.86    
  51  0.919970     -0.834138E-01  -3.70904       3.70904       2358.98       2362.69    
loop,thermsimp(1:2)       31   56.9998       71.0240    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       2247.53          0.86          1.12         21.91          0.02          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2247.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       31
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       32
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      267     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -15.7745       15.7745       2082.78       2098.55    
   2  0.779682     -0.248869      -11.0661       11.0661       2086.37       2097.43    
   3  0.611645     -0.491604      -21.8594       21.8594       2095.32       2117.18    
   4  0.380626     -0.965937      -42.9508       42.9508       2100.18       2143.13    
   5  0.986599     -0.134915E-01 -0.599905      0.599905       2064.23       2064.83    
   6  0.699021     -0.358075      -15.9220       15.9220       2112.12       2128.04    
   7  0.981217E-01  -2.32155      -103.229       103.229       2118.68       2221.91    
   8  0.221199      -1.50869      -67.0847       67.0847       2125.48       2192.56    
   9  0.802460     -0.220073      -9.78566       9.78566       2131.91       2141.70    
  10  0.623430     -0.472519      -21.0108       21.0108       2126.23       2147.24    
  11  0.669862     -0.400684      -17.8166       17.8166       2113.59       2131.41    
  12  0.957999     -0.429090E-01  -1.90797       1.90797       2102.74       2104.65    
  13  0.569879E-01  -2.86492      -127.390       127.390       2143.13       2270.52    
  14  0.245244      -1.40550      -62.4963       62.4963       2125.29       2187.78    
  15  0.870123     -0.139121      -6.18608       6.18608       2117.27       2123.46    
  16  0.429679     -0.844716      -37.5607       37.5607       2133.72       2171.28    
  17  0.369880     -0.994577      -44.2243       44.2243       2099.93       2144.15    
  18  0.964882     -0.357490E-01  -1.58960       1.58960       2127.07       2128.66    
  19  0.625983     -0.468432      -20.8290       20.8290       2138.52       2159.34    
  20  0.508652     -0.675991      -30.0582       30.0582       2087.11       2117.17    
  21  0.694697     -0.364279      -16.1978       16.1978       2104.41       2120.60    
  22  0.817819     -0.201114      -8.94262       8.94262       2126.26       2135.20    
  23  0.655732     -0.422003      -18.7646       18.7646       2135.56       2154.32    
  24  0.658757     -0.417401      -18.5599       18.5599       2159.84       2178.40    
  25  0.325934      -1.12106      -49.8485       49.8485       2130.73       2180.58    
  26  0.849137     -0.163535      -7.27165       7.27165       2151.05       2158.32    
  27  0.953435     -0.476843E-01  -2.12031       2.12031       2090.77       2092.89    
  28  0.435049     -0.832297      -37.0085       37.0085       2111.02       2148.02    
  29  0.155341E-01  -4.16472      -185.186       185.186       2111.53       2296.71    
  30  0.390095     -0.941364      -41.8582       41.8582       2143.42       2185.28    
  31  0.400867E-02  -5.51929      -245.418       245.418       2191.68       2437.09    
  32  0.989750     -0.103025E-01 -0.458106      0.458106       2171.15       2171.60    
  33  0.194149      -1.63913      -72.8846       72.8846       2145.14       2218.02    
  34  0.573547     -0.555915      -24.7190       24.7190       2126.88       2151.60    
  35  0.570216     -0.561740      -24.9780       24.9780       2163.72       2188.70    
  36  0.802122     -0.220494      -9.80438       9.80438       2144.24       2154.04    
  37  0.831214E-01  -2.48745      -110.606       110.606       2162.12       2272.73    
  38  0.280368      -1.27165      -56.5446       56.5446       2219.15       2275.70    
  39  0.568263     -0.565171      -25.1306       25.1306       2146.80       2171.93    
  40  0.570544     -0.561165      -24.9525       24.9525       2230.32       2255.27    
  41  0.524202     -0.645877      -28.7192       28.7192       2147.06       2175.78    
  42  0.625335E-01  -2.77205      -123.261       123.261       2251.50       2374.76    
  43  0.717146     -0.332476      -14.7837       14.7837       2238.69       2253.47    
  44  0.234175      -1.45169      -64.5500       64.5500       2188.26       2252.81    
  45  0.366320      -1.00425      -44.6544       44.6544       2244.96       2289.61    
  46  0.458915     -0.778891      -34.6338       34.6338       2213.67       2248.30    
  47  0.379536     -0.968806      -43.0784       43.0784       2207.10       2250.17    
  48  0.854466     -0.157278      -6.99346       6.99346       2313.74       2320.73    
  49  0.452738E-01  -3.09503      -137.622       137.622       2284.45       2422.07    
  50  0.966525     -0.340477E-01  -1.51395       1.51395       2358.98       2360.50    
  51  0.400949     -0.913920      -40.6379       40.6379       2247.53       2288.16    
loop,thermsimp(1:2)       32   15.7745       11.0661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       2258.82          0.83          1.11         21.95          0.08          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2258.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       32
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       33
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      268     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -40.3040       40.3040       2064.23       2104.53    
   2  0.598662     -0.513057      -22.8133       22.8133       2090.77       2113.58    
   3  0.165178      -1.80073      -80.0703       80.0703       2086.37       2166.44    
   4  0.785331     -0.241651      -10.7451       10.7451       2082.78       2093.52    
   5  0.422061     -0.862604      -38.3561       38.3561       2102.74       2141.10    
   6  0.343624      -1.06821      -47.4983       47.4983       2087.11       2134.61    
   7  0.988862     -0.112001E-01 -0.498017      0.498017       2095.32       2095.82    
   8  0.586093E-01  -2.83686      -126.142       126.142       2104.41       2230.55    
   9  0.324880      -1.12430      -49.9925       49.9925       2117.27       2167.26    
  10  0.869373     -0.139983      -6.22441       6.22441       2112.12       2118.35    
  11  0.314362      -1.15721      -51.4558       51.4558       2127.07       2178.53    
  12  0.635265     -0.453712      -20.1745       20.1745       2113.59       2133.77    
  13  0.800738     -0.222221      -9.88116       9.88116       2126.26       2136.14    
  14  0.234515      -1.45024      -64.4854       64.4854       2131.91       2196.40    
  15  0.818766     -0.199957      -8.89118       8.89118       2100.18       2109.07    
  16  0.480807     -0.732289      -32.5616       32.5616       2099.93       2132.49    
  17  0.173083      -1.75398      -77.9917       77.9917       2126.23       2204.22    
  18  0.544835     -0.607272      -27.0026       27.0026       2111.02       2138.02    
  19  0.955728     -0.452816E-01  -2.01347       2.01347       2126.88       2128.90    
  20  0.909631     -0.947157E-01  -4.21158       4.21158       2144.24       2148.45    
  21  0.538276     -0.619384      -27.5412       27.5412       2135.56       2163.10    
  22  0.640373     -0.445705      -19.8185       19.8185       2151.05       2170.87    
  23  0.588429     -0.530300      -23.5800       23.5800       2138.52       2162.10    
  24  0.954392     -0.466804E-01  -2.07566       2.07566       2133.72       2135.80    
  25  0.976738     -0.235363E-01  -1.04655       1.04655       2171.15       2172.19    
  26  0.801897     -0.220775      -9.81687       9.81687       2146.80       2156.61    
  27  0.679499     -0.386400      -17.1815       17.1815       2147.06       2164.24    
  28  0.303686      -1.19176      -52.9922       52.9922       2159.84       2212.83    
  29  0.907562     -0.969936E-01  -4.31286       4.31286       2130.73       2135.04    
  30  0.117971E-01  -4.43990      -197.422       197.422       2143.42       2340.84    
  31  0.324683      -1.12491      -50.0195       50.0195       2125.29       2175.31    
  32  0.662106     -0.412329      -18.3344       18.3344       2163.72       2182.05    
  33  0.334080      -1.09637      -48.7508       48.7508       2125.48       2174.23    
  34  0.307577      -1.17903      -52.4261       52.4261       2145.14       2197.56    
  35  0.539029     -0.617986      -27.4791       27.4791       2118.68       2146.16    
  36  0.822737     -0.195119      -8.67606       8.67606       2213.67       2222.34    
  37  0.973480     -0.268776E-01  -1.19513       1.19513       2207.10       2208.29    
  38  0.918970     -0.845018E-01  -3.75741       3.75741       2188.26       2192.02    
  39  0.203072      -1.59419      -70.8866       70.8866       2238.69       2309.57    
  40  0.467655     -0.760024      -33.7948       33.7948       2230.32       2264.11    
  41  0.323145      -1.12965      -50.2306       50.2306       2143.13       2193.36    
  42  0.505961     -0.681295      -30.2941       30.2941       2162.12       2192.41    
  43  0.699853E-01  -2.65947      -118.255       118.255       2219.15       2337.41    
  44  0.188263      -1.66991      -74.2535       74.2535       2247.53       2321.78    
  45  0.663178     -0.410711      -18.2625       18.2625       2244.96       2263.22    
  46  0.680233     -0.385320      -17.1334       17.1334       2111.53       2128.66    
  47  0.717812     -0.331548      -14.7424       14.7424       2313.74       2328.48    
  48  0.319374      -1.14139      -50.7526       50.7526       2358.98       2409.73    
  49  0.667076     -0.404851      -18.0019       18.0019       2251.50       2269.51    
  50  0.755360     -0.280560      -12.4753       12.4753       2284.45       2296.92    
  51  0.105804      -2.24617      -99.8769       99.8769       2258.82       2358.70    
loop,thermsimp(1:2)       33   40.3040       22.8133    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270       2323.90          0.85          1.11         22.22          0.04          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2323.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       33
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       34
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      269     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -65.5584       65.5584       2082.78       2148.33    
   2  0.299376      -1.20605      -53.6278       53.6278       2095.32       2148.95    
   3  0.220114      -1.51361      -67.3033       67.3033       2064.23       2131.53    
   4  0.229209      -1.47312      -65.5031       65.5031       2100.18       2165.68    
   5  0.902477     -0.102612      -4.56271       4.56271       2090.77       2095.33    
   6  0.659052     -0.416953      -18.5400       18.5400       2112.12       2130.66    
   7  0.100321E-01  -4.60197      -204.629       204.629       2111.53       2316.15    
   8  0.588837     -0.529606      -23.5492       23.5492       2126.88       2150.43    
   9  0.270943      -1.30585      -58.0652       58.0652       2099.93       2157.99    
  10  0.505518     -0.682171      -30.3331       30.3331       2113.59       2143.93    
  11  0.264565      -1.32967      -59.1244       59.1244       2087.11       2146.23    
  12  0.806386     -0.215193      -9.56867       9.56867       2130.73       2140.30    
  13  0.340560      -1.07716      -47.8966       47.8966       2133.72       2181.62    
  14  0.906186     -0.985106E-01  -4.38032       4.38032       2126.26       2130.64    
  15  0.786070     -0.240709      -10.7032       10.7032       2111.02       2121.72    
  16  0.540508     -0.615247      -27.3572       27.3572       2102.74       2130.10    
  17  0.935065     -0.671392E-01  -2.98537       2.98537       2118.68       2121.67    
  18  0.915359     -0.884391E-01  -3.93249       3.93249       2144.24       2148.17    
  19  0.958261     -0.426353E-01  -1.89580       1.89580       2146.80       2148.69    
  20  0.935110     -0.670907E-01  -2.98322       2.98322       2138.52       2141.50    
  21  0.637755     -0.449800      -20.0006       20.0006       2135.56       2155.56    
  22  0.975714     -0.245861E-01  -1.09323       1.09323       2147.06       2148.15    
  23  0.797424     -0.226369      -10.0656       10.0656       2086.37       2096.43    
  24  0.214179      -1.54094      -68.5188       68.5188       2117.27       2185.79    
  25  0.372145     -0.988472      -43.9529       43.9529       2151.05       2195.00    
  26  0.925208     -0.777367E-01  -3.45660       3.45660       2171.15       2174.60    
  27  0.175897      -1.73786      -77.2745       77.2745       2125.48       2202.75    
  28  0.952033     -0.491554E-01  -2.18572       2.18572       2125.29       2127.47    
  29  0.158274E-01  -4.14601      -184.354       184.354       2127.07       2311.42    
  30  0.799308     -0.224008      -9.96064       9.96064       2163.72       2173.68    
  31  0.248227      -1.39341      -61.9587       61.9587       2188.26       2250.22    
  32  0.244914      -1.40685      -62.5561       62.5561       2162.12       2224.68    
  33  0.390842     -0.939452      -41.7732       41.7732       2143.13       2184.90    
  34  0.146784      -1.91879      -85.3200       85.3200       2131.91       2217.23    
  35  0.500975     -0.691199      -30.7345       30.7345       2145.14       2175.87    
  36  0.480131E-01  -3.03628      -135.010       135.010       2126.23       2261.24    
  37  0.124503      -2.08343      -92.6406       92.6406       2207.10       2299.74    
  38  0.670304     -0.400024      -17.7873       17.7873       2159.84       2177.63    
  39  0.997449     -0.255468E-02 -0.113595      0.113595       2213.67       2213.78    
  40  0.681761     -0.383076      -17.0336       17.0336       2104.41       2121.44    
  41  0.440529     -0.819778      -36.4518       36.4518       2244.96       2281.41    
  42  0.342489      -1.07152      -47.6455       47.6455       2230.32       2277.96    
  43  0.735753     -0.306861      -13.6447       13.6447       2251.50       2265.15    
  44  0.614752     -0.486537      -21.6341       21.6341       2284.45       2306.08    
  45  0.351660      -1.04509      -46.4704       46.4704       2238.69       2285.16    
  46  0.777165     -0.252103      -11.2099       11.2099       2247.53       2258.74    
  47  0.392618     -0.934919      -41.5716       41.5716       2313.74       2355.31    
  48  0.385647     -0.952832      -42.3681       42.3681       2219.15       2261.52    
  49  0.834392     -0.181052      -8.05058       8.05058       2143.42       2151.47    
  50  0.469158     -0.756815      -33.6521       33.6521       2258.82       2292.48    
  51  0.697320     -0.360511      -16.0303       16.0303       2323.90       2339.93    
loop,thermsimp(1:2)       34   65.5584       53.6278    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271       2264.54          0.86          1.12         22.08          0.00          0.05         24.11
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2264.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       34
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       35
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      270     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -47.0333       47.0333       2090.77       2137.80    
   2  0.621479     -0.475653      -21.1501       21.1501       2086.37       2107.52    
   3  0.221273      -1.50836      -67.0699       67.0699       2104.41       2171.48    
   4  0.180626E-01  -4.01391      -178.481       178.481       2118.68       2297.16    
   5  0.216093      -1.53205      -68.1233       68.1233       2111.02       2179.14    
   6  0.351343      -1.04599      -46.5105       46.5105       2125.29       2171.80    
   7  0.360847      -1.01930      -45.3237       45.3237       2102.74       2148.06    
   8  0.439525     -0.822061      -36.5533       36.5533       2126.26       2162.81    
   9  0.910616E-01  -2.39622      -106.549       106.549       2112.12       2218.67    
  10  0.549745     -0.598300      -26.6037       26.6037       2064.23       2090.83    
  11  0.619825     -0.478318      -21.2686       21.2686       2130.73       2152.00    
  12  0.548169E-01  -2.90376      -129.117       129.117       2138.52       2267.63    
  13  0.947163     -0.542842E-01  -2.41377       2.41377       2113.59       2116.01    
  14  0.725459     -0.320951      -14.2712       14.2712       2087.11       2101.38    
  15  0.481613     -0.730615      -32.4871       32.4871       2147.06       2179.55    
  16  0.866286     -0.143540      -6.38259       6.38259       2144.24       2150.62    
  17  0.221988E-01  -3.80772      -169.312       169.312       2082.78       2252.09    
  18  0.980823     -0.193630E-01 -0.860987      0.860987       2146.80       2147.66    
  19  0.332549      -1.10097      -48.9550       48.9550       2095.32       2144.28    
  20  0.989035     -0.110256E-01 -0.490259      0.490259       2126.88       2127.37    
  21  0.364016      -1.01056      -44.9349       44.9349       2143.42       2188.36    
  22  0.861799     -0.148733      -6.61349       6.61349       2135.56       2142.17    
  23  0.622306     -0.474324      -21.0910       21.0910       2099.93       2121.02    
  24  0.575476     -0.552558      -24.5697       24.5697       2100.18       2124.75    
  25  0.205536      -1.58213      -70.3503       70.3503       2163.72       2234.07    
  26  0.124037      -2.08718      -92.8074       92.8074       2171.15       2263.95    
  27  0.467008     -0.761408      -33.8564       33.8564       2145.14       2178.99    
  28  0.273870      -1.29510      -57.5873       57.5873       2159.84       2217.43    
  29  0.842780     -0.171050      -7.60580       7.60580       2133.72       2141.33    
  30  0.709315     -0.343455      -15.2719       15.2719       2143.13       2158.40    
  31  0.677144     -0.389871      -17.3358       17.3358       2117.27       2134.61    
  32  0.656062     -0.421500      -18.7422       18.7422       2151.05       2169.79    
  33  0.721592     -0.326295      -14.5089       14.5089       2125.48       2139.98    
  34  0.120172      -2.11883      -94.2150       94.2150       2213.67       2307.88    
  35  0.832403     -0.183439      -8.15669       8.15669       2131.91       2140.07    
  36  0.607577     -0.498276      -22.1561       22.1561       2162.12       2184.28    
  37  0.169814      -1.77305      -78.8395       78.8395       2188.26       2267.10    
  38  0.578085     -0.548034      -24.3686       24.3686       2247.53       2271.89    
  39  0.201144      -1.60373      -71.3108       71.3108       2126.23       2197.54    
  40  0.922823     -0.803178E-01  -3.57137       3.57137       2219.15       2222.72    
  41  0.136644      -1.99038      -88.5030       88.5030       2251.50       2340.01    
  42  0.836366     -0.178689      -7.94547       7.94547       2230.32       2238.26    
  43  0.590669     -0.526499      -23.4110       23.4110       2244.96       2268.37    
  44  0.745946     -0.293102      -13.0329       13.0329       2238.69       2251.72    
  45  0.874736     -0.133833      -5.95095       5.95095       2258.82       2264.77    
  46  0.370232     -0.993625      -44.1820       44.1820       2207.10       2251.28    
  47  0.832293     -0.183570      -8.16254       8.16254       2284.45       2292.61    
  48  0.351566      -1.04536      -46.4824       46.4824       2127.07       2173.55    
  49  0.705870     -0.348324      -15.4884       15.4884       2111.53       2127.01    
  50  0.323816      -1.12758      -50.1384       50.1384       2323.90       2374.04    
  51  0.197269      -1.62319      -72.1758       72.1758       2264.54       2336.71    
loop,thermsimp(1:2)       35   47.0333       21.1501    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272       2368.84          0.85          1.11         22.04          0.08          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2368.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       35
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       36
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      271     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -64.6380       64.6380       2064.23       2128.87    
   2  0.607568     -0.498291      -22.1567       22.1567       2087.11       2109.27    
   3  0.905785     -0.989529E-01  -4.39999       4.39999       2086.37       2090.77    
   4  0.995938E-01  -2.30666      -102.567       102.567       2113.59       2216.16    
   5  0.851360     -0.160920      -7.15540       7.15540       2099.93       2107.08    
   6  0.730583     -0.313913      -13.9583       13.9583       2100.18       2114.14    
   7  0.426216     -0.852810      -37.9206       37.9206       2111.53       2149.45    
   8  0.285108      -1.25489      -55.7992       55.7992       2126.88       2182.68    
   9  0.839246     -0.175251      -7.79264       7.79264       2117.27       2125.06    
  10  0.217639      -1.52492      -67.8061       67.8061       2090.77       2158.58    
  11  0.183996E-02  -6.29801      -280.044       280.044       2125.48       2405.52    
  12  0.682631     -0.381801      -16.9770       16.9770       2131.91       2148.89    
  13  0.203596      -1.59162      -70.7721       70.7721       2133.72       2204.49    
  14  0.881164     -0.126512      -5.62542       5.62542       2135.56       2141.18    
  15  0.711431     -0.340477      -15.1394       15.1394       2095.32       2110.46    
  16  0.874326     -0.134302      -5.97179       5.97179       2146.80       2152.77    
  17  0.814222     -0.205523      -9.13867       9.13867       2102.74       2111.88    
  18  0.995668     -0.434126E-02 -0.193036      0.193036       2144.24       2144.43    
  19  0.693805     -0.365564      -16.2550       16.2550       2130.73       2146.98    
  20  0.958584     -0.422984E-01  -1.88082       1.88082       2143.13       2145.01    
  21  0.748022     -0.290323      -12.9094       12.9094       2126.26       2139.17    
  22  0.696703     -0.361396      -16.0697       16.0697       2151.05       2167.12    
  23  0.732990     -0.310623      -13.8120       13.8120       2104.41       2118.22    
  24  0.534749     -0.625958      -27.8335       27.8335       2125.29       2153.12    
  25  0.691641     -0.368688      -16.3939       16.3939       2127.07       2143.46    
  26  0.300458      -1.20245      -53.4674       53.4674       2145.14       2198.60    
  27  0.977116     -0.231502E-01  -1.02939       1.02939       2111.02       2112.04    
  28  0.542581     -0.611418      -27.1870       27.1870       2147.06       2174.25    
  29  0.266111      -1.32384      -58.8652       58.8652       2162.12       2220.99    
  30  0.692298     -0.367738      -16.3516       16.3516       2143.42       2159.77    
  31  0.664047     -0.409403      -18.2043       18.2043       2126.23       2144.43    
  32  0.542186     -0.612146      -27.2194       27.2194       2159.84       2187.06    
  33  0.362243      -1.01544      -45.1520       45.1520       2112.12       2157.27    
  34  0.578658     -0.547044      -24.3246       24.3246       2219.15       2243.48    
  35  0.489298     -0.714783      -31.7832       31.7832       2163.72       2195.50    
  36  0.617485     -0.482100      -21.4368       21.4368       2230.32       2251.75    
  37  0.368651     -0.997905      -44.3723       44.3723       2207.10       2251.47    
  38  0.198936      -1.61477      -71.8015       71.8015       2238.69       2310.49    
  39  0.505263     -0.682676      -30.3555       30.3555       2082.78       2113.13    
  40  0.983997     -0.161325E-01 -0.717339      0.717339       2171.15       2171.86    
  41  0.630553     -0.461159      -20.5056       20.5056       2258.82       2279.33    
  42  0.423821E-01  -3.16103      -140.557       140.557       2188.26       2328.82    
  43  0.488935     -0.715526      -31.8162       31.8162       2138.52       2170.33    
  44  0.402078     -0.911110      -40.5129       40.5129       2244.96       2285.47    
  45  0.380878     -0.965277      -42.9215       42.9215       2247.53       2290.45    
  46  0.260585E-01  -3.64741      -162.184       162.184       2284.45       2446.63    
  47  0.681660     -0.383224      -17.0402       17.0402       2118.68       2135.72    
  48  0.489074     -0.715241      -31.8035       31.8035       2213.67       2245.47    
  49  0.752363     -0.284536      -12.6520       12.6520       2264.54       2277.19    
  50  0.978934     -0.212911E-01 -0.946720      0.946720       2251.50       2252.45    
  51  0.297789      -1.21137      -53.8642       53.8642       2368.84       2422.70    
loop,thermsimp(1:2)       36   64.6380       22.1567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       2169.17          0.86          1.11         21.96          0.02          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2169.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       36
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       37
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      272     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -39.5046       39.5046       2086.37       2125.87    
   2  0.697205     -0.360676      -16.0376       16.0376       2099.93       2115.96    
   3  0.314648E-01  -3.45889      -153.801       153.801       2087.11       2240.91    
   4  0.857269     -0.154003      -6.84782       6.84782       2095.32       2102.17    
   5  0.652165     -0.427457      -19.0071       19.0071       2102.74       2121.75    
   6  0.510145     -0.673060      -29.9279       29.9279       2111.02       2140.94    
   7  0.175175      -1.74197      -77.4574       77.4574       2082.78       2160.23    
   8  0.373803     -0.984025      -43.7551       43.7551       2100.18       2143.93    
   9  0.514972     -0.663642      -29.5092       29.5092       2104.41       2133.91    
  10  0.548235     -0.601051      -26.7260       26.7260       2117.27       2144.00    
  11  0.541310     -0.613763      -27.2913       27.2913       2064.23       2091.52    
  12  0.734083     -0.309133      -13.7457       13.7457       2118.68       2132.43    
  13  0.422599     -0.861332      -38.2995       38.2995       2126.26       2164.56    
  14  0.287055      -1.24808      -55.4965       55.4965       2135.56       2191.05    
  15  0.885133     -0.122017      -5.42555       5.42555       2127.07       2132.50    
  16  0.391075     -0.938857      -41.7467       41.7467       2144.24       2185.99    
  17  0.473784     -0.747003      -33.2158       33.2158       2126.23       2159.45    
  18  0.691812     -0.368440      -16.3829       16.3829       2143.13       2159.51    
  19  0.644447     -0.439363      -19.5365       19.5365       2130.73       2150.27    
  20  0.805933     -0.215754      -9.59361       9.59361       2131.91       2141.50    
  21  0.393766     -0.931998      -41.4417       41.4417       2111.53       2152.97    
  22  0.907098E-01  -2.40009      -106.721       106.721       2146.80       2253.52    
  23  0.376515     -0.976796      -43.4337       43.4337       2125.29       2168.72    
  24  0.819190     -0.199439      -8.86817       8.86817       2112.12       2120.99    
  25  0.692438     -0.367536      -16.3427       16.3427       2090.77       2107.11    
  26  0.188370      -1.66935      -74.2283       74.2283       2143.42       2217.65    
  27  0.500532     -0.692083      -30.7738       30.7738       2151.05       2181.82    
  28  0.282311      -1.26475      -56.2375       56.2375       2138.52       2194.75    
  29  0.338061      -1.08453      -48.2241       48.2241       2171.15       2219.37    
  30  0.466208     -0.763123      -33.9326       33.9326       2147.06       2180.99    
  31  0.893084     -0.113075      -5.02792       5.02792       2126.88       2131.91    
  32  0.818806     -0.199908      -8.88902       8.88902       2159.84       2168.73    
  33  0.585066     -0.536031      -23.8349       23.8349       2163.72       2187.56    
  34  0.527412     -0.639774      -28.4479       28.4479       2145.14       2173.58    
  35  0.994295     -0.572143E-02 -0.254406      0.254406       2133.72       2133.98    
  36  0.739278     -0.302082      -13.4322       13.4322       2113.59       2127.03    
  37  0.230995      -1.46536      -65.1578       65.1578       2162.12       2227.28    
  38  0.414929     -0.879648      -39.1139       39.1139       2219.15       2258.27    
  39  0.378446     -0.971682      -43.2063       43.2063       2213.67       2256.87    
  40  0.368620     -0.997990      -44.3761       44.3761       2207.10       2251.47    
  41  0.301312      -1.19961      -53.3411       53.3411       2230.32       2283.66    
  42  0.105882E-01  -4.54801      -202.230       202.230       2251.50       2453.73    
  43  0.481885     -0.730049      -32.4620       32.4620       2264.54       2297.00    
  44  0.446716     -0.805833      -35.8317       35.8317       2258.82       2294.66    
  45  0.482098     -0.729608      -32.4424       32.4424       2244.96       2277.40    
  46  0.278892      -1.27693      -56.7794       56.7794       2247.53       2304.30    
  47  0.756484     -0.279074      -12.4092       12.4092       2238.69       2251.10    
  48  0.662766     -0.411334      -18.2902       18.2902       2188.26       2206.55    
  49  0.433861E-01  -3.13762      -139.516       139.516       2125.48       2264.99    
  50  0.825649E-02  -4.79676      -213.290       213.290       2368.84       2582.13    
  51  0.476679     -0.740911      -32.9450       32.9450       2169.17       2202.12    
loop,thermsimp(1:2)       37   39.5046       16.0376    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       2332.38          0.85          1.12         21.89          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2332.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       37
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       38
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      273     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -39.7700       39.7700       2064.23       2104.00    
   2  0.259700      -1.34823      -59.9495       59.9495       2095.32       2155.27    
   3  0.681144E-01  -2.68657      -119.459       119.459       2090.77       2210.23    
   4  0.158140      -1.84427      -82.0064       82.0064       2099.93       2181.93    
   5  0.497681     -0.697796      -31.0278       31.0278       2112.12       2143.15    
   6  0.800218     -0.222871      -9.91004       9.91004       2102.74       2112.65    
   7  0.831967     -0.183962      -8.17997       8.17997       2086.37       2094.55    
   8  0.707345     -0.346237      -15.3956       15.3956       2113.59       2128.99    
   9  0.265927      -1.32454      -58.8961       58.8961       2126.88       2185.78    
  10  0.659046     -0.416962      -18.5404       18.5404       2118.68       2137.22    
  11  0.654587E-01  -2.72634      -121.228       121.228       2127.07       2248.30    
  12  0.223329      -1.49911      -66.6587       66.6587       2104.41       2171.06    
  13  0.996019     -0.398855E-02 -0.177353      0.177353       2133.72       2133.90    
  14  0.553910     -0.590753      -26.2681       26.2681       2111.02       2137.28    
  15  0.218863      -1.51931      -67.5568       67.5568       2131.91       2199.47    
  16  0.414020     -0.881841      -39.2115       39.2115       2100.18       2139.39    
  17  0.229117      -1.47352      -65.5209       65.5209       2117.27       2182.79    
  18  0.341764      -1.07363      -47.7397       47.7397       2130.73       2178.47    
  19  0.357052      -1.02987      -45.7938       45.7938       2111.53       2157.32    
  20  0.780779     -0.247463      -11.0036       11.0036       2126.23       2137.23    
  21  0.382234     -0.961721      -42.7634       42.7634       2143.13       2185.89    
  22  0.123899      -2.08829      -92.8569       92.8569       2082.78       2175.63    
  23  0.393312     -0.933152      -41.4930       41.4930       2126.26       2167.75    
  24  0.481741     -0.730349      -32.4753       32.4753       2125.29       2157.76    
  25  0.120001      -2.12026      -94.2782       94.2782       2159.84       2254.12    
  26  0.506023     -0.681173      -30.2887       30.2887       2145.14       2175.42    
  27  0.891157     -0.115235      -5.12399       5.12399       2147.06       2152.18    
  28  0.584674     -0.536701      -23.8647       23.8647       2151.05       2174.92    
  29  0.313196      -1.16093      -51.6211       51.6211       2144.24       2195.86    
  30  0.507340     -0.678574      -30.1731       30.1731       2163.72       2193.89    
  31  0.985030     -0.150835E-01 -0.670697      0.670697       2135.56       2136.23    
  32  0.186570      -1.67895      -74.6552       74.6552       2138.52       2213.17    
  33  0.992622     -0.740493E-02 -0.329264      0.329264       2169.17       2169.50    
  34  0.344152      -1.06667      -47.4300       47.4300       2188.26       2235.69    
  35  0.327214      -1.11714      -49.6742       49.6742       2143.42       2193.10    
  36  0.722008     -0.325719      -14.4833       14.4833       2171.15       2185.63    
  37  0.471441     -0.751960      -33.4363       33.4363       2162.12       2195.56    
  38  0.483594     -0.726510      -32.3046       32.3046       2087.11       2119.41    
  39  0.799410     -0.223881      -9.95496       9.95496       2238.69       2248.64    
  40  0.864070     -0.146101      -6.49646       6.49646       2207.10       2213.59    
  41  0.326419      -1.11957      -49.7824       49.7824       2146.80       2196.58    
  42  0.970166E-01  -2.33287      -103.732       103.732       2213.67       2317.40    
  43  0.822479     -0.195432      -8.69000       8.69000       2219.15       2227.84    
  44  0.719858     -0.328701      -14.6159       14.6159       2125.48       2140.09    
  45  0.359763      -1.02231      -45.4575       45.4575       2244.96       2290.42    
  46  0.879180     -0.128765      -5.72562       5.72562       2230.32       2236.04    
  47  0.152514      -1.88050      -83.6173       83.6173       2258.82       2342.44    
  48  0.379430     -0.969085      -43.0908       43.0908       2264.54       2307.63    
  49  0.444703     -0.810349      -36.0326       36.0326       2247.53       2283.56    
  50  0.240485      -1.42510      -63.3676       63.3676       2251.50       2314.87    
  51  0.682479     -0.382024      -16.9869       16.9869       2332.38       2349.37    
loop,thermsimp(1:2)       38   39.7700       59.9495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275       2368.84          0.85          1.12         22.03          0.07          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2368.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       38
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       39
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      274     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -92.4388       92.4388       2086.37       2178.81    
   2  0.274837      -1.29158      -57.4305       57.4305       2064.23       2121.66    
   3  0.305931E-01  -3.48698      -155.050       155.050       2102.74       2257.79    
   4  0.929157     -0.734779E-01  -3.26723       3.26723       2087.11       2090.38    
   5  0.995956     -0.405208E-02 -0.180177      0.180177       2113.59       2113.77    
   6  0.904971     -0.998521E-01  -4.43997       4.43997       2133.72       2138.16    
   7  0.189758      -1.66200      -73.9018       73.9018       2135.56       2209.46    
   8  0.134931      -2.00299      -89.0641       89.0641       2118.68       2207.75    
   9  0.302412      -1.19596      -53.1791       53.1791       2126.23       2179.41    
  10  0.389155     -0.943777      -41.9655       41.9655       2111.02       2152.98    
  11  0.947428     -0.540040E-01  -2.40131       2.40131       2100.18       2102.58    
  12  0.338357      -1.08365      -48.1851       48.1851       2125.48       2173.66    
  13  0.937476     -0.645645E-01  -2.87089       2.87089       2112.12       2114.99    
  14  0.399493     -0.917560      -40.7997       40.7997       2147.06       2187.86    
  15  0.527586     -0.639444      -28.4332       28.4332       2095.32       2123.76    
  16  0.297740      -1.21153      -53.8714       53.8714       2111.53       2165.40    
  17  0.557978     -0.583436      -25.9427       25.9427       2125.29       2151.23    
  18  0.267521      -1.31856      -58.6302       58.6302       2126.26       2184.89    
  19  0.637637     -0.449986      -20.0088       20.0088       2169.17       2189.18    
  20  0.838569     -0.176059      -7.82853       7.82853       2104.41       2112.23    
  21  0.132199E-01  -4.32603      -192.359       192.359       2151.05       2343.41    
  22  0.745606     -0.293557      -13.0532       13.0532       2145.14       2158.19    
  23  0.334504      -1.09511      -48.6944       48.6944       2082.78       2131.47    
  24  0.118852      -2.12987      -94.7059       94.7059       2130.73       2225.44    
  25  0.319911      -1.13971      -50.6779       50.6779       2099.93       2150.60    
  26  0.638302E-01  -2.75153      -122.348       122.348       2117.27       2239.62    
  27  0.173204      -1.75329      -77.9607       77.9607       2171.15       2249.11    
  28  0.885640     -0.121444      -5.40008       5.40008       2126.88       2132.28    
  29  0.710758     -0.341423      -15.1815       15.1815       2143.13       2158.31    
  30  0.938919     -0.630265E-01  -2.80250       2.80250       2143.42       2146.22    
  31  0.217740      -1.52445      -67.7854       67.7854       2163.72       2231.51    
  32  0.130036      -2.03994      -90.7069       90.7069       2162.12       2252.83    
  33  0.331090      -1.10537      -49.1506       49.1506       2144.24       2193.39    
  34  0.453525E-01  -3.09329      -137.545       137.545       2146.80       2284.34    
  35  0.494600     -0.704006      -31.3039       31.3039       2131.91       2163.22    
  36  0.488771E-01  -3.01845      -134.217       134.217       2090.77       2224.99    
  37  0.262916E-01  -3.63850      -161.788       161.788       2138.52       2300.30    
  38  0.975293     -0.250177E-01  -1.11243       1.11243       2207.10       2208.21    
  39  0.521026     -0.651955      -28.9895       28.9895       2219.15       2248.14    
  40  0.210960      -1.55609      -69.1921       69.1921       2188.26       2257.45    
  41  0.475166E-02  -5.34926      -237.857       237.857       2230.32       2468.18    
  42  0.675859     -0.391771      -17.4203       17.4203       2127.07       2144.49    
  43  0.691418     -0.369011      -16.4082       16.4082       2238.69       2255.10    
  44  0.425152     -0.855309      -38.0317       38.0317       2159.84       2197.87    
  45  0.141313      -1.95678      -87.0089       87.0089       2247.53       2334.53    
  46  0.902170     -0.102952      -4.57781       4.57781       2244.96       2249.54    
  47  0.794321     -0.230268      -10.2390       10.2390       2264.54       2274.78    
  48  0.685387     -0.377772      -16.7978       16.7978       2251.50       2268.30    
  49  0.273223      -1.29747      -57.6924       57.6924       2213.67       2271.36    
  50  0.784111     -0.243205      -10.8142       10.8142       2258.82       2269.64    
  51  0.824524     -0.192949      -8.57959       8.57959       2368.84       2377.42    
loop,thermsimp(1:2)       39   92.4388       57.4305    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276       2255.63          0.85          1.12         21.88          0.11          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2255.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       39
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       40
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      275     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -33.9887       33.9887       2087.11       2121.10    
   2  0.310178      -1.17061      -52.0516       52.0516       2100.18       2152.23    
   3  0.883713     -0.123623      -5.49696       5.49696       2104.41       2109.90    
   4  0.641465     -0.444001      -19.7427       19.7427       2113.59       2133.34    
   5  0.458576E-01  -3.08222      -137.052       137.052       2112.12       2249.17    
   6  0.611421     -0.491970      -21.8757       21.8757       2064.23       2086.11    
   7  0.292603      -1.22894      -54.6453       54.6453       2095.32       2149.97    
   8  0.180818      -1.71026      -76.0477       76.0477       2082.78       2158.82    
   9  0.490648     -0.712028      -31.6607       31.6607       2126.88       2158.54    
  10  0.538601     -0.618781      -27.5144       27.5144       2133.72       2161.24    
  11  0.451209     -0.795824      -35.3867       35.3867       2127.07       2162.46    
  12  0.610260     -0.493870      -21.9602       21.9602       2143.42       2165.38    
  13  0.425113     -0.855401      -38.0358       38.0358       2099.93       2137.96    
  14  0.647858     -0.434084      -19.3017       19.3017       2125.29       2144.59    
  15  0.394937     -0.929029      -41.3097       41.3097       2111.02       2152.33    
  16  0.452279E-01  -3.09604      -137.667       137.667       2145.14       2282.80    
  17  0.954905     -0.461437E-01  -2.05180       2.05180       2143.13       2145.18    
  18  0.362548      -1.01460      -45.1146       45.1146       2131.91       2177.03    
  19  0.808078     -0.213097      -9.47546       9.47546       2111.53       2121.00    
  20  0.219348      -1.51709      -67.4583       67.4583       2125.48       2192.93    
  21  0.206981      -1.57513      -70.0387       70.0387       2086.37       2156.41    
  22  0.719933     -0.328597      -14.6112       14.6112       2126.23       2140.84    
  23  0.950238     -0.510432E-01  -2.26966       2.26966       2126.26       2128.53    
  24  0.845993     -0.167244      -7.43658       7.43658       2147.06       2154.50    
  25  0.157926      -1.84563      -82.0668       82.0668       2169.17       2251.24    
  26  0.430020     -0.843924      -37.5255       37.5255       2144.24       2181.76    
  27  0.624159     -0.471350      -20.9588       20.9588       2159.84       2180.80    
  28  0.355386      -1.03455      -46.0018       46.0018       2118.68       2164.68    
  29  0.297353      -1.21284      -53.9293       53.9293       2207.10       2261.02    
  30  0.185476      -1.68483      -74.9167       74.9167       2135.56       2210.47    
  31  0.406569     -0.900002      -40.0190       40.0190       2090.77       2130.79    
  32  0.147052      -1.91697      -85.2390       85.2390       2130.73       2215.97    
  33  0.205955      -1.58010      -70.2597       70.2597       2163.72       2233.98    
  34  0.383503     -0.958409      -42.6161       42.6161       2117.27       2159.89    
  35  0.514677E-01  -2.96680      -131.920       131.920       2219.15       2351.07    
  36  0.499194     -0.694760      -30.8928       30.8928       2171.15       2202.04    
  37  0.103172E-01  -4.57394      -203.382       203.382       2244.96       2448.34    
  38  0.470163     -0.754676      -33.5570       33.5570       2162.12       2195.68    
  39  0.983694     -0.164404E-01 -0.731028      0.731028       2238.69       2239.42    
  40  0.880425     -0.127351      -5.66271       5.66271       2188.26       2193.92    
  41  0.969759     -0.307072E-01  -1.36541       1.36541       2102.74       2104.11    
  42  0.761826E-01  -2.57462      -114.482       114.482       2251.50       2365.99    
  43  0.124427      -2.08404      -92.6676       92.6676       2258.82       2351.49    
  44  0.997702     -0.230032E-02 -0.102285      0.102285       2213.67       2213.77    
  45  0.213939      -1.54206      -68.5686       68.5686       2264.54       2333.11    
  46  0.471369     -0.752113      -33.4431       33.4431       2146.80       2180.24    
  47  0.421561E-01  -3.16638      -140.794       140.794       2138.52       2279.31    
  48  0.693092     -0.366592      -16.3007       16.3007       2247.53       2263.83    
  49  0.375157     -0.980409      -43.5944       43.5944       2151.05       2194.65    
  50  0.285659      -1.25296      -55.7133       55.7133       2368.84       2424.55    
  51  0.338951      -1.08190      -48.1072       48.1072       2255.63       2303.73    
loop,thermsimp(1:2)       40   33.9887       52.0516    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       2179.33          0.85          1.12         21.99          0.02          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2179.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       40
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       41
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      276     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -65.1424       65.1424       2064.23       2129.37    
   2  0.984723     -0.153953E-01 -0.684561      0.684561       2102.74       2103.42    
   3  0.689569     -0.371688      -16.5273       16.5273       2104.41       2120.93    
   4  0.539532     -0.617054      -27.4376       27.4376       2111.53       2138.96    
   5  0.103859      -2.26472      -100.702       100.702       2087.11       2187.81    
   6  0.403261     -0.908171      -40.3823       40.3823       2126.26       2166.64    
   7  0.545138     -0.606716      -26.9779       26.9779       2090.77       2117.75    
   8  0.211198      -1.55496      -69.1421       69.1421       2113.59       2182.74    
   9  0.533123     -0.629004      -27.9689       27.9689       2099.93       2127.89    
  10  0.891214     -0.115171      -5.12112       5.12112       2126.23       2131.35    
  11  0.604806     -0.502847      -22.3593       22.3593       2125.29       2147.65    
  12  0.176166      -1.73633      -77.2068       77.2068       2143.13       2220.34    
  13  0.733693     -0.309664      -13.7694       13.7694       2095.32       2109.09    
  14  0.248504      -1.39230      -61.9092       61.9092       2100.18       2162.09    
  15  0.183808      -1.69387      -75.3185       75.3185       2111.02       2186.33    
  16  0.308674E-02  -5.78064      -257.039       257.039       2147.06       2404.10    
  17  0.651025     -0.429207      -19.0849       19.0849       2086.37       2105.45    
  18  0.864353     -0.145775      -6.48193       6.48193       2126.88       2133.37    
  19  0.547352     -0.602664      -26.7977       26.7977       2082.78       2109.57    
  20  0.631248     -0.460057      -20.4567       20.4567       2117.27       2137.73    
  21  0.344368E-01  -3.36863      -149.788       149.788       2133.72       2283.51    
  22  0.876828     -0.131444      -5.84473       5.84473       2127.07       2132.92    
  23  0.884538     -0.122690      -5.45548       5.45548       2118.68       2124.14    
  24  0.926808     -0.760084E-01  -3.37975       3.37975       2143.42       2146.80    
  25  0.823462     -0.194237      -8.63686       8.63686       2131.91       2140.55    
  26  0.852580     -0.159489      -7.09174       7.09174       2146.80       2153.89    
  27  0.577707     -0.548689      -24.3977       24.3977       2159.84       2184.24    
  28  0.510093     -0.673163      -29.9325       29.9325       2144.24       2174.17    
  29  0.890288     -0.116210      -5.16733       5.16733       2125.48       2130.64    
  30  0.304875      -1.18785      -52.8184       52.8184       2188.26       2241.08    
  31  0.152164      -1.88279      -83.7193       83.7193       2151.05       2234.77    
  32  0.718687     -0.330329      -14.6883       14.6883       2162.12       2176.81    
  33  0.488128     -0.717177      -31.8896       31.8896       2171.15       2203.04    
  34  0.373052     -0.986038      -43.8446       43.8446       2135.56       2179.40    
  35  0.247351      -1.39695      -62.1159       62.1159       2213.67       2275.78    
  36  0.532108     -0.630909      -28.0537       28.0537       2130.73       2158.78    
  37  0.828879E-02  -4.79285      -213.116       213.116       2163.72       2376.84    
  38  0.168277      -1.78214      -79.2438       79.2438       2238.69       2317.93    
  39  0.253216      -1.37351      -61.0739       61.0739       2112.12       2173.20    
  40  0.458588     -0.779602      -34.6654       34.6654       2169.17       2203.84    
  41  0.725692     -0.320630      -14.2570       14.2570       2207.10       2221.35    
  42  0.283543      -1.26039      -56.0439       56.0439       2247.53       2303.57    
  43  0.798055     -0.225578      -10.0304       10.0304       2138.52       2148.55    
  44  0.805371     -0.216453      -9.62467       9.62467       2145.14       2154.76    
  45  0.580747     -0.543441      -24.1644       24.1644       2255.63       2279.79    
  46  0.581119     -0.542799      -24.1358       24.1358       2264.54       2288.67    
  47  0.305196      -1.18680      -52.7717       52.7717       2219.15       2271.92    
  48  0.905702     -0.990454E-01  -4.40410       4.40410       2258.82       2263.23    
  49  0.265633E-01  -3.62822      -161.331       161.331       2251.50       2412.83    
  50  0.114529E-01  -4.46951      -198.739       198.739       2368.84       2567.57    
  51  0.990634     -0.941033E-02 -0.418435      0.418435       2179.33       2179.75    
loop,thermsimp(1:2)       41   65.1424      0.684561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       2300.97          0.86          1.12         21.91          0.04          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2300.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       41
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       42
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      277     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -138.593       138.593       2102.74       2241.33    
   2  0.196215      -1.62854      -72.4139       72.4139       2086.37       2158.78    
   3  0.501152     -0.690846      -30.7188       30.7188       2095.32       2126.04    
   4  0.288339      -1.24362      -55.2981       55.2981       2082.78       2138.07    
   5  0.773132     -0.257306      -11.4412       11.4412       2090.77       2102.21    
   6  0.417683     -0.873033      -38.8198       38.8198       2104.41       2143.23    
   7  0.229479      -1.47195      -65.4507       65.4507       2118.68       2184.13    
   8  0.964123     -0.365367E-01  -1.62462       1.62462       2099.93       2101.55    
   9  0.263782      -1.33263      -59.2561       59.2561       2064.23       2123.49    
  10  0.102960      -2.27342      -101.088       101.088       2125.48       2226.56    
  11  0.828790     -0.187788      -8.35009       8.35009       2126.23       2134.58    
  12  0.738697     -0.302868      -13.4672       13.4672       2127.07       2140.54    
  13  0.458595     -0.779589      -34.6648       34.6648       2126.88       2161.55    
  14  0.905176     -0.996260E-01  -4.42991       4.42991       2117.27       2121.70    
  15  0.147067      -1.91687      -85.2343       85.2343       2111.53       2196.76    
  16  0.142365      -1.94936      -86.6792       86.6792       2131.91       2218.59    
  17  0.483147     -0.727435      -32.3457       32.3457       2143.42       2175.77    
  18  0.640417     -0.445636      -19.8154       19.8154       2125.29       2145.10    
  19  0.719349     -0.329408      -14.6473       14.6473       2138.52       2153.16    
  20  0.714234     -0.336545      -14.9646       14.9646       2146.80       2161.76    
  21  0.825507     -0.191757      -8.52656       8.52656       2145.14       2153.66    
  22  0.155188      -1.86312      -82.8443       82.8443       2130.73       2213.57    
  23  0.248874      -1.39081      -61.8430       61.8430       2100.18       2162.02    
  24  0.107953      -2.22606      -98.9829       98.9829       2126.26       2225.24    
  25  0.349169      -1.05220      -46.7865       46.7865       2112.12       2158.91    
  26  0.967311     -0.332356E-01  -1.47784       1.47784       2144.24       2145.72    
  27  0.519506     -0.654877      -29.1194       29.1194       2162.12       2191.24    
  28  0.462662     -0.770758      -34.2721       34.2721       2135.56       2169.83    
  29  0.811438     -0.208948      -9.29096       9.29096       2179.33       2188.62    
  30  0.394710E-01  -3.23219      -143.721       143.721       2113.59       2257.31    
  31  0.482930     -0.727884      -32.3657       32.3657       2159.84       2192.21    
  32  0.520883     -0.652231      -29.0017       29.0017       2111.02       2140.02    
  33  0.980978E-01  -2.32179      -103.240       103.240       2087.11       2190.35    
  34  0.626549     -0.467529      -20.7889       20.7889       2171.15       2191.93    
  35  0.618402     -0.480616      -21.3708       21.3708       2169.17       2190.55    
  36  0.681438     -0.383550      -17.0547       17.0547       2143.13       2160.18    
  37  0.816820     -0.202336      -8.99696       8.99696       2207.10       2216.09    
  38  0.578487     -0.547340      -24.3377       24.3377       2151.05       2175.39    
  39  0.349734      -1.05058      -46.7146       46.7146       2188.26       2234.98    
  40  0.945672     -0.558596E-01  -2.48382       2.48382       2258.82       2261.31    
  41  0.767680     -0.264382      -11.7559       11.7559       2219.15       2230.91    
  42  0.122064      -2.10321      -93.5201       93.5201       2213.67       2307.19    
  43  0.211623      -1.55295      -69.0525       69.0525       2255.63       2324.68    
  44  0.969992E-01  -2.33305      -103.740       103.740       2133.72       2237.46    
  45  0.877482     -0.130699      -5.81160       5.81160       2264.54       2270.35    
  46  0.448991     -0.800752      -35.6058       35.6058       2247.53       2283.13    
  47  0.833113     -0.182586      -8.11879       8.11879       2238.69       2246.81    
  48  0.691765     -0.368508      -16.3859       16.3859       2163.72       2180.11    
  49  0.310664      -1.16904      -51.9821       51.9821       2147.06       2199.04    
  50  0.422283     -0.862080      -38.3328       38.3328       2251.50       2289.84    
  51  0.382184E-01  -3.26444      -145.155       145.155       2300.97       2446.13    
loop,thermsimp(1:2)       42   138.593       72.4139    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       2368.84          0.85          1.11         22.01          0.07          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280       2180.36          0.85          1.12         21.95          0.05          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2180.36
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       42
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       43
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      279     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -53.7441       53.7441       2099.93       2153.67    
   2  0.383173     -0.959268      -42.6543       42.6543       2090.77       2133.42    
   3  0.386205     -0.951387      -42.3039       42.3039       2117.27       2159.57    
   4  0.362178      -1.01562      -45.1600       45.1600       2064.23       2109.39    
   5  0.394462     -0.930233      -41.3633       41.3633       2095.32       2136.69    
   6  0.883072     -0.124349      -5.52922       5.52922       2126.23       2131.76    
   7  0.571477     -0.559531      -24.8798       24.8798       2082.78       2107.66    
   8  0.944036     -0.575912E-01  -2.56082       2.56082       2111.02       2113.58    
   9  0.326573      -1.11910      -49.7614       49.7614       2127.07       2176.83    
  10  0.467297     -0.760791      -33.8289       33.8289       2104.41       2138.23    
  11  0.828365     -0.188301      -8.37289       8.37289       2125.29       2133.66    
  12  0.826991     -0.189962      -8.44674       8.44674       2144.24       2152.69    
  13  0.675447E-01  -2.69497      -119.833       119.833       2138.52       2258.35    
  14  0.924113     -0.789214E-01  -3.50928       3.50928       2145.14       2148.64    
  15  0.810131     -0.210560      -9.36265       9.36265       2086.37       2095.73    
  16  0.410286     -0.890900      -39.6143       39.6143       2112.12       2151.74    
  17  0.334977      -1.09369      -48.6316       48.6316       2143.13       2191.76    
  18  0.119017      -2.12849      -94.6442       94.6442       2126.88       2221.53    
  19  0.447328     -0.804463      -35.7708       35.7708       2146.80       2182.57    
  20  0.324388E-02  -5.73098      -254.831       254.831       2100.18       2355.01    
  21  0.158272      -1.84344      -81.9695       81.9695       2135.56       2217.53    
  22  0.241219      -1.42205      -63.2322       63.2322       2151.05       2214.28    
  23  0.259790      -1.34788      -59.9342       59.9342       2143.42       2203.36    
  24  0.521973     -0.650139      -28.9087       28.9087       2163.72       2192.63    
  25  0.336335      -1.08965      -48.4517       48.4517       2118.68       2167.13    
  26  0.642248     -0.442780      -19.6884       19.6884       2179.33       2199.02    
  27  0.984615     -0.155047E-01 -0.689424      0.689424       2087.11       2087.80    
  28  0.373782     -0.984082      -43.7577       43.7577       2169.17       2212.93    
  29  0.932479     -0.699087E-01  -3.10852       3.10852       2162.12       2165.23    
  30  0.711360     -0.340577      -15.1439       15.1439       2171.15       2186.29    
  31  0.315363      -1.15403      -51.3146       51.3146       2159.84       2211.15    
  32  0.528583     -0.637556      -28.3492       28.3492       2111.53       2139.87    
  33  0.622355E-01  -2.77683      -123.473       123.473       2147.06       2270.53    
  34  0.144849      -1.93206      -85.9100       85.9100       2130.73       2216.64    
  35  0.868928     -0.140495      -6.24716       6.24716       2207.10       2213.34    
  36  0.243398      -1.41306      -62.8322       62.8322       2131.91       2194.74    
  37  0.936928     -0.651491E-01  -2.89689       2.89689       2126.26       2129.15    
  38  0.979804E-01  -2.32299      -103.293       103.293       2125.48       2228.77    
  39  0.805773     -0.215953      -9.60243       9.60243       2219.15       2228.75    
  40  0.210751      -1.55708      -69.2363       69.2363       2188.26       2257.50    
  41  0.497104     -0.698956      -31.0794       31.0794       2133.72       2164.80    
  42  0.532106     -0.630913      -28.0539       28.0539       2102.74       2130.79    
  43  0.898420     -0.107117      -4.76302       4.76302       2238.69       2243.45    
  44  0.579370     -0.545814      -24.2699       24.2699       2113.59       2137.86    
  45  0.191213      -1.65437      -73.5621       73.5621       2258.82       2332.39    
  46  0.491633     -0.710023      -31.5715       31.5715       2264.54       2296.11    
  47  0.989123     -0.109370E-01 -0.486319      0.486319       2247.53       2248.01    
  48  0.576855     -0.550164      -24.4633       24.4633       2251.50       2275.97    
  49  0.133368      -2.01464      -89.5820       89.5820       2213.67       2303.25    
  50  0.708426     -0.344710      -15.3277       15.3277       2255.63       2270.96    
  51  0.183469      -1.69571      -75.4006       75.4006       2180.36       2255.76    
loop,thermsimp(1:2)       43   53.7441       42.6543    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       2306.62          0.86          1.10         21.82          0.22          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    2306.6        1.495     -1.903      3.140     -102.6      1.312    
                       1.231      2.806     -99.70      3.724      1.645    

                       3.497     -2.218      1.540      7000.      7000.    

                      -1.867      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.256     -3.539     -11.88      5.891    

                      -13.51     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.7525E-03 0.2684    -0.3699E-01 0.1770    

                     -0.2486    -0.1410     0.1566     0.1564     0.3656E-01



                     -0.3076    -0.5589      0.000     0.8356E-01-0.3421E-01

                     -0.5573E-01 0.1636    -0.7116    -0.5538E-01 0.2365    

                      0.8614E-01-0.3748E-01-0.5951     -1.160      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.253      8.820    -0.1672E+05 -6.000    

                     -0.5297     -2.767      9.386      8.802    -0.1969E+05



                      -6.000     0.4850    -0.2388      8.952      9.172    

                     -0.1944E+05 -6.000      1.757    -0.5582      9.096    

                       8.780    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2306.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       43
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       44
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      280     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -55.4982       55.4982       2087.11       2142.61    
   2  0.260243      -1.34614      -59.8567       59.8567       2086.37       2146.22    
   3  0.646915     -0.435540      -19.3665       19.3665       2082.78       2102.14    
   4  0.572447     -0.557835      -24.8044       24.8044       2064.23       2089.03    
   5  0.105907      -2.24520      -99.8337       99.8337       2111.02       2210.85    
   6  0.693038     -0.366671      -16.3042       16.3042       2126.26       2142.56    
   7  0.329408      -1.11046      -49.3771       49.3771       2102.74       2152.12    
   8  0.187221      -1.67546      -74.5003       74.5003       2126.23       2200.73    
   9  0.545731     -0.605630      -26.9296       26.9296       2090.77       2117.70    
  10  0.752820     -0.283930      -12.6251       12.6251       2125.29       2137.91    
  11  0.153542      -1.87378      -83.3184       83.3184       2095.32       2178.64    
  12  0.400659     -0.914645      -40.6701       40.6701       2113.59       2154.26    
  13  0.306182      -1.18357      -52.6282       52.6282       2104.41       2157.03    
  14  0.270957E-01  -3.60838      -160.448       160.448       2111.53       2271.97    
  15  0.776765     -0.252618      -11.2328       11.2328       2145.14       2156.37    
  16  0.711945     -0.339755      -15.1074       15.1074       2112.12       2127.23    
  17  0.217190      -1.52698      -67.8980       67.8980       2144.24       2212.14    
  18  0.285226      -1.25447      -55.7808       55.7808       2099.93       2155.71    
  19  0.348904      -1.05296      -46.8203       46.8203       2117.27       2164.09    
  20  0.686414     -0.376275      -16.7312       16.7312       2133.72       2150.45    
  21  0.212825      -1.54729      -68.8008       68.8008       2162.12       2230.92    
  22  0.501697     -0.689760      -30.6705       30.6705       2118.68       2149.35    
  23  0.363771      -1.01123      -44.9648       44.9648       2127.07       2172.04    
  24  0.789273     -0.236642      -10.5224       10.5224       2146.80       2157.32    
  25  0.232884      -1.45721      -64.7957       64.7957       2171.15       2235.94    
  26  0.754896     -0.281175      -12.5026       12.5026       2143.13       2155.63    
  27  0.639358     -0.447290      -19.8890       19.8890       2163.72       2183.61    
  28  0.532505     -0.630163      -28.0205       28.0205       2131.91       2159.93    
  29  0.759813     -0.274683      -12.2139       12.2139       2179.33       2191.55    
  30  0.768360     -0.263497      -11.7165       11.7165       2143.42       2155.14    
  31  0.245116      -1.40602      -62.5194       62.5194       2159.84       2222.36    
  32  0.672517     -0.396727      -17.6407       17.6407       2169.17       2186.81    
  33  0.910675     -0.935691E-01  -4.16059       4.16059       2207.10       2211.26    
  34  0.441618     -0.817310      -36.3421       36.3421       2151.05       2187.39    
  35  0.212980      -1.54656      -68.7684       68.7684       2130.73       2199.50    
  36  0.471690     -0.751434      -33.4128       33.4128       2135.56       2168.97    
  37  0.968545     -0.319606E-01  -1.42114       1.42114       2126.88       2128.30    
  38  0.711169     -0.340845      -15.1558       15.1558       2219.15       2234.31    
  39  0.222170      -1.50431      -66.8900       66.8900       2125.48       2192.37    
  40  0.896100     -0.109703      -4.87801       4.87801       2238.69       2243.56    
  41  0.898054     -0.107525      -4.78115       4.78115       2247.53       2252.31    
  42  0.981364     -0.188122E-01 -0.836493      0.836493       2180.36       2181.20    
  43  0.238126      -1.43496      -63.8060       63.8060       2188.26       2252.07    
  44  0.884882     -0.122301      -5.43819       5.43819       2138.52       2143.95    
  45  0.206421      -1.57784      -70.1594       70.1594       2147.06       2217.22    
  46  0.421939     -0.862894      -38.3690       38.3690       2255.63       2294.00    
  47  0.334170E-01  -3.39869      -151.124       151.124       2251.50       2402.63    
  48  0.940374     -0.614772E-01  -2.73361       2.73361       2264.54       2267.27    
  49  0.119361      -2.12561      -94.5161       94.5161       2213.67       2308.18    
  50  0.493355     -0.706527      -31.4161       31.4161       2258.82       2290.24    
  51  0.239498      -1.42921      -63.5506       63.5506       2306.62       2370.17    
loop,thermsimp(1:2)       44   55.4982       59.8567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282       2129.39          0.86          1.12         22.16          0.05          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2129.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       44
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       45
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      281     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -70.6182       70.6182       2064.23       2134.85    
   2  0.455846E-01  -3.08818      -137.318       137.318       2082.78       2220.09    
   3  0.655807     -0.421889      -18.7595       18.7595       2090.77       2109.53    
   4  0.902989     -0.102045      -4.53749       4.53749       2112.12       2116.66    
   5  0.826012     -0.191146      -8.49938       8.49938       2126.88       2135.38    
   6  0.160871      -1.82715      -81.2452       81.2452       2125.29       2206.53    
   7  0.516410     -0.660854      -29.3852       29.3852       2126.26       2155.64    
   8  0.506939     -0.679364      -30.2082       30.2082       2087.11       2117.32    
   9  0.728359     -0.316962      -14.0938       14.0938       2138.52       2152.61    
  10  0.453162     -0.791506      -35.1947       35.1947       2086.37       2121.56    
  11  0.837994     -0.176745      -7.85903       7.85903       2118.68       2126.54    
  12  0.118024      -2.13686      -95.0166       95.0166       2133.72       2228.74    
  13  0.274030      -1.29452      -57.5614       57.5614       2102.74       2160.30    
  14  0.402227     -0.910738      -40.4964       40.4964       2113.59       2154.09    
  15  0.444245     -0.811380      -36.0784       36.0784       2143.42       2179.50    
  16  0.594880     -0.519396      -23.0952       23.0952       2143.13       2166.23    
  17  0.548806     -0.600010      -26.6797       26.6797       2099.93       2126.61    
  18  0.222827      -1.50136      -66.7586       66.7586       2145.14       2211.89    
  19  0.152541      -1.88032      -83.6093       83.6093       2104.41       2188.01    
  20  0.816533     -0.202688      -9.01260       9.01260       2146.80       2155.81    
  21  0.525417     -0.643564      -28.6164       28.6164       2131.91       2160.53    
  22  0.661450     -0.413320      -18.3785       18.3785       2117.27       2135.65    
  23  0.437535     -0.826598      -36.7551       36.7551       2135.56       2172.31    
  24  0.464442     -0.766918      -34.1014       34.1014       2127.07       2161.17    
  25  0.683975     -0.379834      -16.8895       16.8895       2095.32       2112.21    
  26  0.407919     -0.896688      -39.8716       39.8716       2180.36       2220.23    
  27  0.934669     -0.675632E-01  -3.00423       3.00423       2163.72       2166.72    
  28  0.866891     -0.142842      -6.35152       6.35152       2169.17       2175.53    
  29  0.145435E-01  -4.23061      -188.116       188.116       2151.05       2339.17    
  30  0.514599     -0.664368      -29.5414       29.5414       2179.33       2208.87    
  31  0.370591     -0.992656      -44.1389       44.1389       2125.48       2169.62    
  32  0.251726      -1.37941      -61.3362       61.3362       2130.73       2192.07    
  33  0.959470     -0.413742E-01  -1.83972       1.83972       2126.23       2128.07    
  34  0.344885E-01  -3.36713      -149.721       149.721       2111.02       2260.74    
  35  0.348690      -1.05357      -46.8476       46.8476       2207.10       2253.94    
  36  0.610898     -0.492826      -21.9137       21.9137       2144.24       2166.15    
  37  0.440567     -0.819693      -36.4480       36.4480       2147.06       2183.51    
  38  0.340409      -1.07761      -47.9163       47.9163       2159.84       2207.76    
  39  0.345015E-01  -3.36675      -149.704       149.704       2162.12       2311.82    
  40  0.667224     -0.404630      -17.9921       17.9921       2219.15       2237.14    
  41  0.138336      -1.97807      -87.9559       87.9559       2171.15       2259.10    
  42  0.412023     -0.886676      -39.4265       39.4265       2238.69       2278.11    
  43  0.578410     -0.547473      -24.3436       24.3436       2188.26       2212.61    
  44  0.972817     -0.275594E-01  -1.22544       1.22544       2247.53       2248.75    
  45  0.152341      -1.88163      -83.6677       83.6677       2264.54       2348.21    
  46  0.764264     -0.268842      -11.9542       11.9542       2111.53       2123.48    
  47  0.898082E-01  -2.41008      -107.165       107.165       2258.82       2365.99    
  48  0.205097      -1.58427      -70.4454       70.4454       2255.63       2326.07    
  49  0.249611E-01  -3.69044      -164.097       164.097       2213.67       2377.76    
  50  0.999211     -0.789000E-03 -0.350832E-01  0.350832E-01   2306.62       2306.65    
  51  0.622898E-01  -2.77596      -123.434       123.434       2129.39       2252.82    
loop,thermsimp(1:2)       45   70.6182       137.318    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       2140.51          0.86          1.12         22.05          0.08          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284       2806.10          0.85          1.11         21.94          0.06          0.04         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2140.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       45
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       46
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      283     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -10.2278       10.2278       2090.77       2101.00    
   2  0.338444      -1.08340      -48.1737       48.1737       2095.32       2143.50    
   3  0.563800     -0.573055      -25.4812       25.4812       2112.12       2137.60    
   4  0.295284      -1.21982      -54.2397       54.2397       2087.11       2141.35    
   5  0.506481     -0.680269      -30.2485       30.2485       2086.37       2116.62    
   6  0.345803      -1.06189      -47.2173       47.2173       2111.53       2158.74    
   7  0.741641     -0.298890      -13.2903       13.2903       2118.68       2131.97    
   8  0.182310      -1.70204      -75.6822       75.6822       2099.93       2175.61    
   9  0.315187      -1.15459      -51.3393       51.3393       2126.23       2177.57    
  10  0.598844     -0.512755      -22.7999       22.7999       2064.23       2087.03    
  11  0.659119     -0.416852      -18.5355       18.5355       2126.88       2145.42    
  12  0.247481      -1.39642      -62.0926       62.0926       2117.27       2179.36    
  13  0.255298      -1.36532      -60.7097       60.7097       2138.52       2199.23    
  14  0.876488     -0.131833      -5.86200       5.86200       2113.59       2119.46    
  15  0.358010      -1.02719      -45.6747       45.6747       2126.26       2171.93    
  16  0.317480      -1.14734      -51.0171       51.0171       2146.80       2197.81    
  17  0.153422      -1.87456      -83.3533       83.3533       2102.74       2186.09    
  18  0.296162      -1.21685      -54.1078       54.1078       2131.91       2186.02    
  19  0.629760     -0.462417      -20.5616       20.5616       2127.07       2147.63    
  20  0.458345E-01  -3.08272      -137.075       137.075       2144.24       2281.31    
  21  0.209534      -1.56287      -69.4936       69.4936       2143.13       2212.62    
  22  0.490210E-01  -3.01551      -134.086       134.086       2163.72       2297.81    
  23  0.144817      -1.93229      -85.9200       85.9200       2125.48       2211.40    
  24  0.764061     -0.269107      -11.9660       11.9660       2135.56       2147.52    
  25  0.158664      -1.84097      -81.8596       81.8596       2169.17       2251.03    
  26  0.242818      -1.41544      -62.9383       62.9383       2143.42       2206.36    
  27  0.779950     -0.248525      -11.0508       11.0508       2147.06       2158.11    
  28  0.763580     -0.269737      -11.9940       11.9940       2104.41       2116.40    
  29  0.817639     -0.201335      -8.95243       8.95243       2130.73       2139.68    
  30  0.656802     -0.420373      -18.6921       18.6921       2125.29       2143.98    
  31  0.202192      -1.59854      -71.0798       71.0798       2159.84       2230.92    
  32  0.469647     -0.755773      -33.6058       33.6058       2179.33       2212.94    
  33  0.107456      -2.23067      -99.1878       99.1878       2145.14       2244.32    
  34  0.709118     -0.343734      -15.2843       15.2843       2188.26       2203.55    
  35  0.988480     -0.115868E-01 -0.515214      0.515214       2082.78       2083.29    
  36  0.645173     -0.438236      -19.4864       19.4864       2180.36       2199.85    
  37  0.583143     -0.539322      -23.9812       23.9812       2133.72       2157.70    
  38  0.276552E-01  -3.58794      -159.539       159.539       2219.15       2378.69    
  39  0.560517     -0.578896      -25.7409       25.7409       2247.53       2273.27    
  40  0.292779      -1.22834      -54.6185       54.6185       2129.39       2184.00    
  41  0.486207     -0.721121      -32.0650       32.0650       2207.10       2239.16    
  42  0.379142E-01  -3.27243      -145.510       145.510       2171.15       2316.66    
  43  0.459895     -0.776757      -34.5389       34.5389       2111.02       2145.55    
  44  0.810771     -0.209769      -9.32748       9.32748       2238.69       2248.01    
  45  0.189138      -1.66528      -74.0473       74.0473       2306.62       2380.67    
  46  0.509870     -0.673599      -29.9519       29.9519       2162.12       2192.07    
  47  0.468020E-01  -3.06183      -136.146       136.146       2255.63       2391.77    
  48  0.568404     -0.564922      -25.1195       25.1195       2151.05       2176.17    
  49  0.891250     -0.115130      -5.11933       5.11933       2264.54       2269.66    
  50  0.415261     -0.878849      -39.0784       39.0784       2258.82       2297.90    
  51  0.714019     -0.336846      -14.9780       14.9780       2140.51       2155.49    
loop,thermsimp(1:2)       46   10.2278       48.1737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       2253.57          0.86          1.11         21.98          0.03          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2253.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       46
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       47
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      284     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -18.9835       18.9835       2082.78       2101.76    
   2  0.474910     -0.744630      -33.1103       33.1103       2064.23       2097.34    
   3  0.125725      -2.07366      -92.2062       92.2062       2090.77       2182.98    
   4  0.950967     -0.502756E-01  -2.23553       2.23553       2104.41       2106.64    
   5  0.562475     -0.575409      -25.5858       25.5858       2086.37       2111.95    
   6  0.728528     -0.316729      -14.0835       14.0835       2113.59       2127.68    
   7  0.326058      -1.12068      -49.8316       49.8316       2118.68       2168.51    
   8  0.460979     -0.774402      -34.4342       34.4342       2112.12       2146.56    
   9  0.186861      -1.67739      -74.5860       74.5860       2130.73       2205.32    
  10  0.737773     -0.304119      -13.5228       13.5228       2087.11       2100.63    
  11  0.254524      -1.36836      -60.8448       60.8448       2095.32       2156.17    
  12  0.475390     -0.743621      -33.0654       33.0654       2125.29       2158.35    
  13  0.783107     -0.244486      -10.8712       10.8712       2126.88       2137.75    
  14  0.615536     -0.485261      -21.5774       21.5774       2111.02       2132.59    
  15  0.600710E-01  -2.81223      -125.047       125.047       2135.56       2260.60    
  16  0.834417     -0.181022      -8.04925       8.04925       2127.07       2135.12    
  17  0.270355      -1.30802      -58.1617       58.1617       2140.51       2198.67    
  18  0.408387     -0.895540      -39.8206       39.8206       2133.72       2173.54    
  19  0.248286      -1.39318      -61.9482       61.9482       2147.06       2209.01    
  20  0.586808E-01  -2.83564      -126.088       126.088       2111.53       2237.61    
  21  0.747050     -0.291623      -12.9672       12.9672       2126.26       2139.22    
  22  0.261869E-01  -3.64250      -161.965       161.965       2099.93       2261.89    
  23  0.495813     -0.701557      -31.1951       31.1951       2151.05       2182.25    
  24  0.600032     -0.510772      -22.7117       22.7117       2126.23       2148.94    
  25  0.936456     -0.656531E-01  -2.91930       2.91930       2117.27       2120.19    
  26  0.583260     -0.539121      -23.9723       23.9723       2129.39       2153.36    
  27  0.994266     -0.575021E-02 -0.255686      0.255686       2131.91       2132.17    
  28  0.149755      -1.89876      -84.4290       84.4290       2102.74       2187.17    
  29  0.751239     -0.286032      -12.7185       12.7185       2162.12       2174.84    
  30  0.703931     -0.351075      -15.6107       15.6107       2146.80       2162.41    
  31  0.998476     -0.152564E-02 -0.678383E-01  0.678383E-01   2138.52       2138.58    
  32  0.501495     -0.690161      -30.6883       30.6883       2180.36       2211.05    
  33  0.446468     -0.806387      -35.8564       35.8564       2188.26       2224.12    
  34  0.321376      -1.13514      -50.4747       50.4747       2143.42       2193.90    
  35  0.850901     -0.161459      -7.17937       7.17937       2125.48       2132.66    
  36  0.975881     -0.244142E-01  -1.08559       1.08559       2143.13       2144.22    
  37  0.386316     -0.951100      -42.2911       42.2911       2179.33       2221.62    
  38  0.782734     -0.244962      -10.8924       10.8924       2159.84       2170.73    
  39  0.142678      -1.94716      -86.5816       86.5816       2207.10       2293.68    
  40  0.509914     -0.673514      -29.9481       29.9481       2145.14       2175.08    
  41  0.211111      -1.55537      -69.1603       69.1603       2238.69       2307.85    
  42  0.212538      -1.54864      -68.8608       68.8608       2169.17       2238.04    
  43  0.889982     -0.116555      -5.18265       5.18265       2264.54       2269.72    
  44  0.769070     -0.262573      -11.6754       11.6754       2247.53       2259.20    
  45  0.792434     -0.232646      -10.3447       10.3447       2144.24       2154.58    
  46  0.250220E-01  -3.68800      -163.989       163.989       2163.72       2327.71    
  47  0.190304      -1.65913      -73.7741       73.7741       2258.82       2332.60    
  48  0.579595     -0.545425      -24.2526       24.2526       2171.15       2195.40    
  49  0.373376     -0.985170      -43.8060       43.8060       2219.15       2262.96    
  50  0.933620E-01  -2.37127      -105.440       105.440       2306.62       2412.06    
  51  0.628243     -0.464828      -20.6688       20.6688       2253.57       2274.24    
loop,thermsimp(1:2)       47   18.9835       33.1103    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       2072.67          0.86          1.12         21.88          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287       2262.84          0.84          1.11         22.04          0.00          0.05         24.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2072.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       47
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       48
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      286     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -51.2230       51.2230       2064.23       2115.45    
   2  0.452730     -0.792459      -35.2370       35.2370       2087.11       2122.35    
   3  0.463916     -0.768051      -34.1518       34.1518       2082.78       2116.93    
   4  0.531172E-01  -2.93526      -130.517       130.517       2104.41       2234.92    
   5  0.933113     -0.692290E-01  -3.07830       3.07830       2086.37       2089.45    
   6  0.107612      -2.22922      -99.1234       99.1234       2117.27       2216.39    
   7  0.228017      -1.47833      -65.7348       65.7348       2113.59       2179.33    
   8  0.766526     -0.265887      -11.8228       11.8228       2131.91       2143.73    
   9  0.676418     -0.390944      -17.3835       17.3835       2111.02       2128.40    
  10  0.220696      -1.51097      -67.1859       67.1859       2125.48       2192.66    
  11  0.959946E-01  -2.34346      -104.203       104.203       2127.07       2231.27    
  12  0.570655     -0.560971      -24.9439       24.9439       2126.88       2151.83    
  13  0.736426     -0.305947      -13.6041       13.6041       2138.52       2152.12    
  14  0.966377     -0.342013E-01  -1.52078       1.52078       2126.26       2127.78    
  15  0.797662     -0.226070      -10.0523       10.0523       2143.13       2153.18    
  16  0.413688     -0.882643      -39.2471       39.2471       2112.12       2151.37    
  17  0.200670      -1.60609      -71.4157       71.4157       2126.23       2197.65    
  18  0.843958E-01  -2.47224      -109.929       109.929       2129.39       2239.32    
  19  0.375580     -0.979284      -43.5443       43.5443       2144.24       2187.78    
  20  0.968669     -0.318322E-01  -1.41543       1.41543       2095.32       2096.74    
  21  0.379263     -0.969525      -43.1104       43.1104       2125.29       2168.40    
  22  0.421746     -0.863352      -38.3893       38.3893       2146.80       2185.19    
  23  0.639909     -0.446429      -19.8507       19.8507       2118.68       2138.53    
  24  0.549878     -0.598059      -26.5930       26.5930       2159.84       2186.43    
  25  0.226469      -1.48515      -66.0378       66.0378       2133.72       2199.76    
  26  0.547044E-02  -5.20840      -231.594       231.594       2162.12       2393.71    
  27  0.372808     -0.986692      -43.8737       43.8737       2145.14       2189.01    
  28  0.406819E-01  -3.20197      -142.377       142.377       2151.05       2293.43    
  29  0.664564     -0.408624      -18.1696       18.1696       2090.77       2108.94    
  30  0.708700     -0.344323      -15.3105       15.3105       2102.74       2118.05    
  31  0.863329     -0.146959      -6.53460       6.53460       2143.42       2149.96    
  32  0.406109     -0.901134      -40.0693       40.0693       2171.15       2211.22    
  33  0.101947      -2.28330      -101.528       101.528       2140.51       2242.04    
  34  0.660574     -0.414646      -18.4374       18.4374       2130.73       2149.17    
  35  0.839002     -0.175542      -7.80557       7.80557       2147.06       2154.87    
  36  0.735312E-01  -2.61005      -116.057       116.057       2180.36       2296.42    
  37  0.559917     -0.579967      -25.7885       25.7885       2179.33       2205.12    
  38  0.922004     -0.812055E-01  -3.61084       3.61084       2188.26       2191.87    
  39  0.891471     -0.114882      -5.10830       5.10830       2111.53       2116.63    
  40  0.489346     -0.714686      -31.7789       31.7789       2169.17       2200.95    
  41  0.583196     -0.539231      -23.9772       23.9772       2247.53       2271.50    
  42  0.989235     -0.108230E-01 -0.481252      0.481252       2135.56       2136.04    
  43  0.844741     -0.168725      -7.50246       7.50246       2099.93       2107.43    
  44  0.734982     -0.307909      -13.6913       13.6913       2219.15       2232.84    
  45  0.913246     -0.907495E-01  -4.03522       4.03522       2264.54       2268.57    
  46  0.605096     -0.502369      -22.3381       22.3381       2253.57       2275.91    
  47  0.623739     -0.472024      -20.9888       20.9888       2207.10       2228.08    
  48  0.780990     -0.247193      -10.9916       10.9916       2238.69       2249.68    
  49  0.615662E-01  -2.78764      -123.954       123.954       2163.72       2287.67    
  50  0.646443E-02  -5.04144      -224.170       224.170       2258.82       2482.99    
  51  0.848055     -0.164809      -7.32832       7.32832       2072.67       2080.00    
loop,thermsimp(1:2)       48   51.2230       35.2370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288       2221.28          0.85          1.11         21.91          0.02          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2221.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       48
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       49
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      287     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.378007      0.378007       2072.67       2073.05    
   2  0.120199      -2.11861      -94.2048       94.2048       2086.37       2180.57    
   3  0.825835     -0.191360      -8.50891       8.50891       2095.32       2103.83    
   4  0.769690     -0.261767      -11.6396       11.6396       2099.93       2111.57    
   5  0.206534      -1.57729      -70.1350       70.1350       2090.77       2160.91    
   6  0.435455     -0.831363      -36.9669       36.9669       2064.23       2101.20    
   7  0.408718     -0.894731      -39.7846       39.7846       2111.53       2151.31    
   8  0.504170E-01  -2.98743      -132.837       132.837       2082.78       2215.61    
   9  0.943874     -0.577631E-01  -2.56846       2.56846       2102.74       2105.31    
  10  0.161493      -1.82330      -81.0737       81.0737       2087.11       2168.18    
  11  0.248560      -1.39207      -61.8991       61.8991       2126.26       2188.16    
  12  0.952734     -0.484195E-01  -2.15300       2.15300       2111.02       2113.17    
  13  0.349224      -1.05204      -46.7796       46.7796       2135.56       2182.34    
  14  0.245013      -1.40644      -62.5381       62.5381       2118.68       2181.22    
  15  0.713805     -0.337146      -14.9913       14.9913       2131.91       2146.90    
  16  0.206995      -1.57506      -70.0358       70.0358       2130.73       2200.77    
  17  0.573984     -0.555154      -24.6852       24.6852       2143.42       2168.11    
  18  0.791297     -0.234082      -10.4086       10.4086       2112.12       2122.53    
  19  0.599323     -0.511955      -22.7643       22.7643       2126.88       2149.65    
  20  0.632893     -0.457454      -20.3409       20.3409       2138.52       2158.86    
  21  0.920472     -0.828688E-01  -3.68480       3.68480       2143.13       2146.81    
  22  0.650695     -0.429713      -19.1074       19.1074       2147.06       2166.17    
  23  0.759327     -0.275322      -12.2423       12.2423       2125.29       2137.53    
  24  0.547563     -0.602278      -26.7806       26.7806       2113.59       2140.37    
  25  0.375945     -0.978312      -43.5011       43.5011       2146.80       2190.30    
  26  0.436593     -0.828753      -36.8509       36.8509       2159.84       2196.69    
  27  0.226348      -1.48568      -66.0615       66.0615       2144.24       2210.30    
  28  0.889061     -0.117589      -5.22866       5.22866       2145.14       2150.36    
  29  0.294563      -1.22226      -54.3484       54.3484       2188.26       2242.61    
  30  0.760606     -0.273640      -12.1675       12.1675       2125.48       2137.64    
  31  0.131934      -2.02545      -90.0626       90.0626       2126.23       2216.29    
  32  0.150887      -1.89123      -84.0943       84.0943       2133.72       2217.82    
  33  0.108814      -2.21811      -98.6294       98.6294       2169.17       2267.80    
  34  0.392982     -0.933991      -41.5303       41.5303       2179.33       2220.86    
  35  0.524209     -0.645865      -28.7187       28.7187       2171.15       2199.86    
  36  0.779329     -0.249322      -11.0862       11.0862       2117.27       2128.36    
  37  0.684136     -0.379599      -16.8790       16.8790       2207.10       2223.97    
  38  0.898629     -0.106885      -4.75270       4.75270       2127.07       2131.82    
  39  0.885947E-01  -2.42368      -107.770       107.770       2219.15       2326.92    
  40  0.865042     -0.144977      -6.44648       6.44648       2104.41       2110.85    
  41  0.953799     -0.473027E-01  -2.10334       2.10334       2129.39       2131.49    
  42  0.264945      -1.32823      -59.0605       59.0605       2140.51       2199.57    
  43  0.931660     -0.707875E-01  -3.14760       3.14760       2238.69       2241.83    
  44  0.273150      -1.29773      -57.7043       57.7043       2264.54       2322.24    
  45  0.773196     -0.257223      -11.4375       11.4375       2247.53       2258.96    
  46  0.936342     -0.657743E-01  -2.92468       2.92468       2253.57       2256.49    
  47  0.367272      -1.00165      -44.5390       44.5390       2163.72       2208.26    
  48  0.970907     -0.295243E-01  -1.31281       1.31281       2151.05       2152.36    
  49  0.722669     -0.324804      -14.4426       14.4426       2180.36       2194.80    
  50  0.247966      -1.39446      -62.0055       62.0055       2162.12       2224.13    
  51  0.730821     -0.313587      -13.9438       13.9438       2221.28       2235.22    
loop,thermsimp(1:2)       49  0.378007       94.2048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289       2207.60          0.86          1.12         21.88          0.04          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2207.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       49
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       50
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      288     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -208.521       208.521       2072.67       2281.19    
   2  0.902150     -0.102974      -4.57880       4.57880       2064.23       2068.81    
   3  0.375868     -0.978517      -43.5102       43.5102       2095.32       2138.83    
   4  0.136549E-01  -4.29366      -190.920       190.920       2102.74       2293.66    
   5  0.948329     -0.530533E-01  -2.35904       2.35904       2104.41       2106.76    
   6  0.489379E-01  -3.01720      -134.161       134.161       2099.93       2234.09    
   7  0.319400      -1.14131      -50.7489       50.7489       2111.02       2161.76    
   8  0.748008     -0.290342      -12.9102       12.9102       2112.12       2125.03    
   9  0.468015     -0.759255      -33.7606       33.7606       2117.27       2151.03    
  10  0.467420     -0.760527      -33.8172       33.8172       2129.39       2163.20    
  11  0.345085      -1.06396      -47.3096       47.3096       2127.07       2174.38    
  12  0.598981     -0.512526      -22.7897       22.7897       2125.29       2148.08    
  13  0.231496      -1.46319      -65.0615       65.0615       2125.48       2190.54    
  14  0.685496     -0.377613      -16.7907       16.7907       2113.59       2130.38    
  15  0.225803      -1.48809      -66.1686       66.1686       2143.13       2209.30    
  16  0.744991E-01  -2.59697      -115.475       115.475       2131.91       2247.39    
  17  0.436777     -0.828332      -36.8322       36.8322       2126.88       2163.72    
  18  0.241074      -1.42265      -63.2589       63.2589       2145.14       2208.39    
  19  0.728071     -0.317357      -14.1114       14.1114       2111.53       2125.64    
  20  0.228500      -1.47622      -65.6408       65.6408       2151.05       2216.69    
  21  0.423678     -0.858781      -38.1861       38.1861       2138.52       2176.70    
  22  0.812855     -0.207202      -9.21333       9.21333       2090.77       2099.98    
  23  0.810546     -0.210047      -9.33984       9.33984       2147.06       2156.40    
  24  0.113500      -2.17595      -96.7546       96.7546       2143.42       2240.18    
  25  0.197385      -1.62260      -72.1497       72.1497       2087.11       2159.26    
  26  0.101018      -2.29246      -101.935       101.935       2086.37       2188.30    
  27  0.857009E-01  -2.45689      -109.247       109.247       2118.68       2227.93    
  28  0.693668     -0.365762      -16.2638       16.2638       2135.56       2151.82    
  29  0.705918     -0.348256      -15.4854       15.4854       2126.26       2141.74    
  30  0.309793      -1.17185      -52.1069       52.1069       2146.80       2198.90    
  31  0.144843      -1.93210      -85.9118       85.9118       2180.36       2266.27    
  32  0.412916     -0.884511      -39.3302       39.3302       2159.84       2199.17    
  33  0.916661     -0.870180E-01  -3.86930       3.86930       2140.51       2144.38    
  34  0.933384E-01  -2.37152      -105.451       105.451       2171.15       2276.60    
  35  0.937330     -0.647200E-01  -2.87780       2.87780       2130.73       2133.61    
  36  0.958012     -0.428952E-01  -1.90735       1.90735       2163.72       2165.63    
  37  0.692877E-01  -2.66949      -118.700       118.700       2144.24       2262.94    
  38  0.228520E-01  -3.77872      -168.022       168.022       2082.78       2250.80    
  39  0.188135      -1.67060      -74.2839       74.2839       2126.23       2200.51    
  40  0.122595E-01  -4.40146      -195.713       195.713       2133.72       2329.43    
  41  0.776693     -0.252710      -11.2369       11.2369       2179.33       2190.57    
  42  0.571957     -0.558691      -24.8425       24.8425       2207.10       2231.94    
  43  0.313016      -1.16150      -51.6467       51.6467       2162.12       2213.77    
  44  0.512360     -0.668728      -29.7353       29.7353       2221.28       2251.01    
  45  0.874954     -0.133584      -5.93988       5.93988       2238.69       2244.63    
  46  0.617920     -0.481397      -21.4055       21.4055       2188.26       2209.67    
  47  0.529196     -0.636396      -28.2977       28.2977       2253.57       2281.87    
  48  0.389261E-02  -5.54867      -246.724       246.724       2247.53       2494.25    
  49  0.323386E-01  -3.43149      -152.583       152.583       2169.17       2321.76    
  50  0.900641     -0.104648      -4.65324       4.65324       2264.54       2269.19    
  51  0.872638     -0.136235      -6.05775       6.05775       2207.60       2213.65    
loop,thermsimp(1:2)       50   208.521       4.57880    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       2245.76          0.85          1.12         21.94          0.10          0.06         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2245.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       50
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       51
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      289     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -4.51665       4.51665       2064.23       2068.75    
   2  0.808902     -0.212077      -9.43012       9.43012       2090.77       2100.20    
   3  0.762147     -0.271616      -12.0775       12.0775       2104.41       2116.48    
   4  0.287851      -1.24531      -55.3734       55.3734       2112.12       2167.50    
   5  0.212418      -1.54920      -68.8859       68.8859       2111.53       2180.41    
   6  0.380717     -0.965699      -42.9402       42.9402       2113.59       2156.53    
   7  0.877795     -0.130342      -5.79572       5.79572       2130.73       2136.53    
   8  0.836834     -0.178130      -7.92062       7.92062       2095.32       2103.24    
   9  0.435183     -0.831988      -36.9947       36.9947       2126.26       2163.25    
  10  0.900166     -0.105177      -4.67673       4.67673       2140.51       2145.19    
  11  0.175095      -1.74242      -77.4777       77.4777       2125.29       2202.77    
  12  0.322232      -1.13248      -50.3564       50.3564       2117.27       2167.63    
  13  0.706662     -0.347203      -15.4386       15.4386       2135.56       2151.00    
  14  0.494297     -0.704618      -31.3312       31.3312       2147.06       2178.39    
  15  0.324383      -1.12583      -50.0606       50.0606       2087.11       2137.17    
  16  0.777122     -0.252157      -11.2123       11.2123       2111.02       2122.23    
  17  0.499054E-01  -2.99763      -133.291       133.291       2129.39       2262.68    
  18  0.489193E-01  -3.01758      -134.178       134.178       2126.88       2261.06    
  19  0.480140     -0.733678      -32.6233       32.6233       2163.72       2196.34    
  20  0.914126     -0.897865E-01  -3.99240       3.99240       2127.07       2131.06    
  21  0.613008     -0.489378      -21.7604       21.7604       2138.52       2160.28    
  22  0.470573     -0.753804      -33.5182       33.5182       2086.37       2119.89    
  23  0.614279     -0.487307      -21.6683       21.6683       2125.48       2147.14    
  24  0.410529     -0.890308      -39.5879       39.5879       2179.33       2218.92    
  25  0.582759     -0.539981      -24.0105       24.0105       2146.80       2170.81    
  26  0.422753E-01  -3.16355      -140.669       140.669       2159.84       2300.51    
  27  0.717044     -0.332618      -14.7900       14.7900       2126.23       2141.02    
  28  0.420765     -0.865682      -38.4929       38.4929       2145.14       2183.63    
  29  0.801392     -0.221405      -9.84487       9.84487       2143.13       2152.97    
  30  0.426188     -0.852875      -37.9235       37.9235       2188.26       2226.18    
  31  0.338881      -1.08211      -48.1164       48.1164       2207.60       2255.71    
  32  0.398160     -0.920902      -40.9483       40.9483       2162.12       2203.07    
  33  0.938837     -0.631132E-01  -2.80636       2.80636       2151.05       2153.86    
  34  0.411860E-01  -3.18966      -141.830       141.830       2118.68       2260.51    
  35  0.180703      -1.71090      -76.0760       76.0760       2207.10       2283.17    
  36  0.617012     -0.482867      -21.4709       21.4709       2099.93       2121.40    
  37  0.788612     -0.237480      -10.5597       10.5597       2143.42       2153.98    
  38  0.381719     -0.963071      -42.8234       42.8234       2238.69       2281.51    
  39  0.376038     -0.978064      -43.4901       43.4901       2131.91       2175.40    
  40  0.105996      -2.24435      -99.7963       99.7963       2082.78       2182.57    
  41  0.769932E-01  -2.56404      -114.011       114.011       2221.28       2335.29    
  42  0.365987      -1.00516      -44.6948       44.6948       2144.24       2188.93    
  43  0.731763     -0.312298      -13.8865       13.8865       2180.36       2194.25    
  44  0.447137     -0.804891      -35.7899       35.7899       2264.54       2300.33    
  45  0.273519      -1.29638      -57.6443       57.6443       2171.15       2228.79    
  46  0.870614     -0.138556      -6.16097       6.16097       2072.67       2078.84    
  47  0.822463     -0.195452      -8.69085       8.69085       2253.57       2262.26    
  48  0.456061     -0.785129      -34.9111       34.9111       2102.74       2137.65    
  49  0.603947     -0.504269      -22.4226       22.4226       2169.17       2191.60    
  50  0.342037      -1.07284      -47.7041       47.7041       2133.72       2181.43    
  51  0.693527     -0.365965      -16.2728       16.2728       2245.76       2262.03    
loop,thermsimp(1:2)       51   4.51665       9.43012    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291       2268.96          0.86          1.12         21.88          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2268.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       51
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       52
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      290     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -38.4585       38.4585       2064.23       2102.69    
   2  0.315135      -1.15476      -51.3467       51.3467       2072.67       2124.02    
   3  0.696708     -0.361389      -16.0693       16.0693       2090.77       2106.84    
   4  0.922116     -0.810842E-01  -3.60545       3.60545       2095.32       2098.93    
   5  0.908133     -0.963648E-01  -4.28491       4.28491       2104.41       2108.69    
   6  0.174132      -1.74794      -77.7230       77.7230       2086.37       2164.09    
   7  0.490629     -0.712068      -31.6624       31.6624       2099.93       2131.59    
   8  0.382604     -0.960755      -42.7204       42.7204       2111.02       2153.74    
   9  0.985159     -0.149527E-01 -0.664879      0.664879       2127.07       2127.74    
  10  0.182634      -1.70027      -75.6034       75.6034       2130.73       2206.33    
  11  0.554568     -0.589565      -26.2153       26.2153       2087.11       2113.32    
  12  0.999791     -0.209153E-03 -0.930008E-02  0.930008E-02   2102.74       2102.75    
  13  0.284621      -1.25660      -55.8752       55.8752       2126.23       2182.11    
  14  0.920706E-01  -2.38520      -106.059       106.059       2140.51       2246.57    
  15  0.243911      -1.41095      -62.7387       62.7387       2125.48       2188.21    
  16  0.866829     -0.142914      -6.35472       6.35472       2135.56       2141.91    
  17  0.640039     -0.446225      -19.8416       19.8416       2143.13       2162.97    
  18  0.737488E-01  -2.60709      -115.926       115.926       2151.05       2266.98    
  19  0.511916     -0.669594      -29.7738       29.7738       2143.42       2173.19    
  20  0.870220     -0.139009      -6.18112       6.18112       2113.59       2119.77    
  21  0.594690     -0.519714      -23.1093       23.1093       2138.52       2161.62    
  22  0.659508     -0.416262      -18.5093       18.5093       2126.26       2144.77    
  23  0.702023     -0.353789      -15.7314       15.7314       2112.12       2127.85    
  24  0.178121      -1.72529      -76.7159       76.7159       2117.27       2193.99    
  25  0.622271     -0.474379      -21.0935       21.0935       2146.80       2167.89    
  26  0.877027     -0.131217      -5.83463       5.83463       2131.91       2137.75    
  27  0.206753      -1.57623      -70.0879       70.0879       2147.06       2217.15    
  28  0.927381     -0.753912E-01  -3.35231       3.35231       2111.53       2114.88    
  29  0.610274     -0.493848      -21.9592       21.9592       2133.72       2155.68    
  30  0.453676     -0.790373      -35.1443       35.1443       2082.78       2117.92    
  31  0.203335      -1.59290      -70.8290       70.8290       2145.14       2215.96    
  32  0.558786     -0.581989      -25.8784       25.8784       2144.24       2170.12    
  33  0.685013     -0.378317      -16.8220       16.8220       2169.17       2186.00    
  34  0.753574     -0.282929      -12.5806       12.5806       2180.36       2192.94    
  35  0.736990E-01  -2.60777      -115.956       115.956       2163.72       2279.68    
  36  0.719848     -0.328716      -14.6165       14.6165       2125.29       2139.90    
  37  0.177345E-01  -4.03224      -179.296       179.296       2162.12       2341.42    
  38  0.277334E-01  -3.58512      -159.414       159.414       2179.33       2338.75    
  39  0.228604      -1.47576      -65.6205       65.6205       2188.26       2253.88    
  40  0.874609     -0.133979      -5.95742       5.95742       2171.15       2177.10    
  41  0.875699     -0.132733      -5.90204       5.90204       2207.60       2213.50    
  42  0.540874     -0.614569      -27.3271       27.3271       2118.68       2146.01    
  43  0.343108E-01  -3.37230      -149.951       149.951       2126.88       2276.83    
  44  0.982551     -0.176027E-01 -0.782714      0.782714       2245.76       2246.54    
  45  0.201823      -1.60037      -71.1610       71.1610       2253.57       2324.73    
  46  0.116838      -2.14697      -95.4660       95.4660       2129.39       2224.85    
  47  0.520586     -0.652800      -29.0271       29.0271       2238.69       2267.71    
  48  0.515528     -0.662563      -29.4612       29.4612       2207.10       2236.56    
  49  0.814407     -0.205295      -9.12854       9.12854       2264.54       2273.67    
  50  0.436930     -0.827981      -36.8166       36.8166       2159.84       2196.66    
  51  0.802441     -0.220097      -9.78670       9.78670       2268.96       2278.74    
loop,thermsimp(1:2)       52   38.4585       51.3467    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       2234.06          0.86          1.12         22.02          0.08          0.05         24.12
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2234.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       52
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       53
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      291     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -150.242       150.242       2095.32       2245.57    
   2  0.714674     -0.335928      -14.9372       14.9372       2064.23       2079.17    
   3  0.977792     -0.224587E-01 -0.998636      0.998636       2102.74       2103.74    
   4  0.771231     -0.259767      -11.5507       11.5507       2090.77       2102.32    
   5  0.265148      -1.32747      -59.0265       59.0265       2104.41       2163.43    
   6  0.559491     -0.580728      -25.8223       25.8223       2087.11       2112.93    
   7  0.934824E-01  -2.36998      -105.382       105.382       2111.53       2216.91    
   8  0.928182     -0.745278E-01  -3.31391       3.31391       2082.78       2086.09    
   9  0.464905     -0.765922      -34.0571       34.0571       2113.59       2147.65    
  10  0.871919     -0.137059      -6.09437       6.09437       2072.67       2078.77    
  11  0.982233     -0.179265E-01 -0.797109      0.797109       2127.07       2127.87    
  12  0.426376     -0.852433      -37.9038       37.9038       2112.12       2150.03    
  13  0.471128E-01  -3.05521      -135.851       135.851       2099.93       2235.78    
  14  0.686439     -0.376238      -16.7296       16.7296       2131.91       2148.64    
  15  0.117826      -2.13855      -95.0914       95.0914       2125.29       2220.38    
  16  0.756878E-01  -2.58114      -114.772       114.772       2135.56       2250.33    
  17  0.196211      -1.62856      -72.4149       72.4149       2126.26       2198.67    
  18  0.431930     -0.839491      -37.3283       37.3283       2118.68       2156.01    
  19  0.707794     -0.345602      -15.3674       15.3674       2111.02       2126.38    
  20  0.174358E-01  -4.04923      -180.051       180.051       2133.72       2313.77    
  21  0.267976      -1.31686      -58.5547       58.5547       2138.52       2197.07    
  22  0.793866     -0.230841      -10.2644       10.2644       2143.13       2153.39    
  23  0.135848      -1.99622      -88.7629       88.7629       2086.37       2175.13    
  24  0.663958     -0.409536      -18.2102       18.2102       2146.80       2165.01    
  25  0.281101      -1.26904      -56.4285       56.4285       2144.24       2200.67    
  26  0.606466     -0.500106      -22.2374       22.2374       2143.42       2165.66    
  27  0.940056     -0.618158E-01  -2.74867       2.74867       2171.15       2173.89    
  28  0.124106      -2.08662      -92.7825       92.7825       2126.23       2219.01    
  29  0.205090      -1.58431      -70.4470       70.4470       2169.17       2239.62    
  30  0.852960     -0.159043      -7.07192       7.07192       2125.48       2132.55    
  31  0.241701      -1.42005      -63.1433       63.1433       2180.36       2243.50    
  32  0.744368     -0.295220      -13.1271       13.1271       2117.27       2130.40    
  33  0.279909      -1.27329      -56.6175       56.6175       2159.84       2216.46    
  34  0.142971      -1.94511      -86.4904       86.4904       2130.73       2217.22    
  35  0.367233      -1.00176      -44.5436       44.5436       2207.60       2252.14    
  36  0.839044     -0.175493      -7.80336       7.80336       2145.14       2152.94    
  37  0.762369     -0.271325      -12.0646       12.0646       2147.06       2159.12    
  38  0.414704     -0.880189      -39.1380       39.1380       2129.39       2168.52    
  39  0.294445      -1.22266      -54.3663       54.3663       2207.10       2261.46    
  40  0.296874      -1.21445      -54.0009       54.0009       2245.76       2299.76    
  41  0.834777     -0.180590      -8.03004       8.03004       2140.51       2148.54    
  42  0.399354     -0.917907      -40.8151       40.8151       2188.26       2229.08    
  43  0.948666     -0.526981E-01  -2.34324       2.34324       2151.05       2153.39    
  44  0.306553E-01  -3.48495      -154.960       154.960       2238.69       2393.65    
  45  0.768324E-01  -2.56613      -114.104       114.104       2264.54       2378.64    
  46  0.723813     -0.323222      -14.3722       14.3722       2126.88       2141.26    
  47  0.912222     -0.918720E-01  -4.08513       4.08513       2268.96       2273.04    
  48  0.846322     -0.166855      -7.41928       7.41928       2163.72       2171.14    
  49  0.704090     -0.350850      -15.6007       15.6007       2253.57       2269.17    
  50  0.443839     -0.812294      -36.1190       36.1190       2179.33       2215.45    
  51  0.790462     -0.235137      -10.4555       10.4555       2234.06       2244.52    
loop,thermsimp(1:2)       53   150.242       14.9372    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293       2110.65          0.86          1.11         22.18          0.08          0.05         24.27
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2110.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       53
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       54
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      292     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -21.6161       21.6161       2072.67       2094.29    
   2  0.438442     -0.824528      -36.6630       36.6630       2064.23       2100.89    
   3  0.666371     -0.405908      -18.0489       18.0489       2082.78       2100.83    
   4  0.419797     -0.867984      -38.5953       38.5953       2090.77       2129.37    
   5  0.662493     -0.411746      -18.3085       18.3085       2102.74       2121.05    
   6  0.261021      -1.34315      -59.7240       59.7240       2087.11       2146.83    
   7  0.451731     -0.794667      -35.3353       35.3353       2111.02       2146.35    
   8  0.858047     -0.153096      -6.80749       6.80749       2127.07       2133.88    
   9  0.678039     -0.388550      -17.2771       17.2771       2117.27       2134.55    
  10  0.257304      -1.35750      -60.3617       60.3617       2125.48       2185.84    
  11  0.379774     -0.968178      -43.0505       43.0505       2126.88       2169.93    
  12  0.200314      -1.60787      -71.4947       71.4947       2113.59       2185.09    
  13  0.702955E-01  -2.65505      -118.058       118.058       2140.51       2258.57    
  14  0.846007     -0.167228      -7.43587       7.43587       2131.91       2139.35    
  15  0.692217     -0.367856      -16.3569       16.3569       2112.12       2128.48    
  16  0.830541     -0.185678      -8.25626       8.25626       2145.14       2153.39    
  17  0.162133E-02  -6.42451      -285.669       285.669       2151.05       2436.72    
  18  0.829216     -0.187275      -8.32725       8.32725       2143.13       2151.46    
  19  0.464918     -0.765894      -34.0559       34.0559       2118.68       2152.74    
  20  0.204157      -1.58887      -70.6497       70.6497       2147.06       2217.71    
  21  0.203429      -1.59244      -70.8085       70.8085       2104.41       2175.21    
  22  0.403935     -0.906500      -40.3080       40.3080       2146.80       2187.10    
  23  0.508037     -0.677201      -30.1121       30.1121       2143.42       2173.53    
  24  0.337702      -1.08559      -48.2713       48.2713       2129.39       2177.66    
  25  0.375672     -0.979039      -43.5334       43.5334       2163.72       2207.25    
  26  0.218755      -1.51980      -67.5787       67.5787       2171.15       2238.72    
  27  0.803422     -0.218876      -9.73241       9.73241       2086.37       2096.10    
  28  0.324101      -1.12670      -50.0993       50.0993       2138.52       2188.61    
  29  0.804001     -0.218155      -9.70034       9.70034       2126.26       2135.96    
  30  0.727676     -0.317899      -14.1355       14.1355       2144.24       2158.37    
  31  0.769479     -0.262042      -11.6518       11.6518       2179.33       2190.99    
  32  0.632293     -0.458402      -20.3831       20.3831       2159.84       2180.22    
  33  0.300459      -1.20244      -53.4672       53.4672       2111.53       2164.99    
  34  0.567362     -0.566759      -25.2012       25.2012       2130.73       2155.93    
  35  0.803345     -0.218971      -9.73665       9.73665       2126.23       2135.97    
  36  0.764706     -0.268264      -11.9285       11.9285       2125.29       2137.22    
  37  0.159444      -1.83606      -81.6413       81.6413       2188.26       2269.90    
  38  0.951670     -0.495367E-01  -2.20267       2.20267       2099.93       2102.13    
  39  0.769198     -0.262407      -11.6680       11.6680       2169.17       2180.84    
  40  0.916532     -0.871588E-01  -3.87556       3.87556       2180.36       2184.24    
  41  0.146117E-01  -4.22593      -187.908       187.908       2234.06       2421.97    
  42  0.196164      -1.62880      -72.4255       72.4255       2095.32       2167.75    
  43  0.399482     -0.917586      -40.8009       40.8009       2135.56       2176.36    
  44  0.646732     -0.435823      -19.3791       19.3791       2207.60       2226.97    
  45  0.207790      -1.57122      -69.8653       69.8653       2207.10       2276.96    
  46  0.276388      -1.28595      -57.1803       57.1803       2253.57       2310.75    
  47  0.410494     -0.890394      -39.5918       39.5918       2268.96       2308.55    
  48  0.437747     -0.826115      -36.7336       36.7336       2245.76       2282.49    
  49  0.414886     -0.879752      -39.1186       39.1186       2133.72       2172.84    
  50  0.453890     -0.789901      -35.1233       35.1233       2264.54       2299.66    
  51  0.141383      -1.95628      -86.9870       86.9870       2110.65       2197.63    
loop,thermsimp(1:2)       54   21.6161       36.6630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       2113.64          0.86          1.12         21.92          0.04          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2113.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       54
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       55
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      293     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -20.8205       20.8205       2072.67       2093.49    
   2  0.909442     -0.949244E-01  -4.22086       4.22086       2086.37       2090.59    
   3  0.449837     -0.798870      -35.5221       35.5221       2082.78       2118.30    
   4  0.761598     -0.272336      -12.1096       12.1096       2064.23       2076.34    
   5  0.706800     -0.347007      -15.4299       15.4299       2099.93       2115.36    
   6  0.214343      -1.54018      -68.4847       68.4847       2102.74       2171.23    
   7  0.855661     -0.155881      -6.93131       6.93131       2112.12       2119.05    
   8  0.432924E-01  -3.13978      -139.612       139.612       2090.77       2230.38    
   9  0.902784     -0.102271      -4.54755       4.54755       2127.07       2131.62    
  10  0.706965     -0.346774      -15.4195       15.4195       2117.27       2132.69    
  11  0.826667     -0.190354      -8.46416       8.46416       2126.26       2134.72    
  12  0.824436     -0.193055      -8.58430       8.58430       2126.23       2134.81    
  13  0.442772     -0.814700      -36.2260       36.2260       2125.29       2161.51    
  14  0.416355     -0.876217      -38.9614       38.9614       2131.91       2170.87    
  15  0.268464      -1.31504      -58.4738       58.4738       2111.02       2169.49    
  16  0.779742     -0.248792      -11.0626       11.0626       2087.11       2098.17    
  17  0.406799E-01  -3.20202      -142.379       142.379       2143.13       2285.51    
  18  0.975397     -0.249106E-01  -1.10766       1.10766       2118.68       2119.79    
  19  0.425150E-01  -3.15790      -140.417       140.417       2145.14       2285.55    
  20  0.302481      -1.19574      -53.1689       53.1689       2130.73       2183.90    
  21  0.732033     -0.311930      -13.8701       13.8701       2144.24       2158.11    
  22  0.774561     -0.255459      -11.3591       11.3591       2111.53       2122.88    
  23  0.899897     -0.105475      -4.68999       4.68999       2095.32       2100.01    
  24  0.549624     -0.598520      -26.6135       26.6135       2126.88       2153.50    
  25  0.143543      -1.94112      -86.3128       86.3128       2133.72       2220.03    
  26  0.229055      -1.47379      -65.5329       65.5329       2143.42       2208.95    
  27  0.334206      -1.09600      -48.7340       48.7340       2104.41       2153.14    
  28  0.301620      -1.19859      -53.2958       53.2958       2135.56       2188.85    
  29  0.856030     -0.155449      -6.91213       6.91213       2129.39       2136.30    
  30  0.978878     -0.213482E-01 -0.949257      0.949257       2159.84       2160.79    
  31  0.890790E-01  -2.41823      -107.528       107.528       2169.17       2276.70    
  32  0.275076      -1.29071      -57.3919       57.3919       2180.36       2237.75    
  33  0.506865     -0.679511      -30.2148       30.2148       2113.59       2143.81    
  34  0.628553     -0.464334      -20.6468       20.6468       2125.48       2146.12    
  35  0.787972     -0.238293      -10.5958       10.5958       2146.80       2157.39    
  36  0.746168     -0.292804      -13.0197       13.0197       2138.52       2151.54    
  37  0.116954      -2.14598      -95.4219       95.4219       2179.33       2274.76    
  38  0.245368      -1.40500      -62.4738       62.4738       2110.65       2173.12    
  39  0.873952     -0.134729      -5.99080       5.99080       2163.72       2169.71    
  40  0.850596     -0.161818      -7.19531       7.19531       2147.06       2154.26    
  41  0.455763     -0.785783      -34.9402       34.9402       2207.60       2242.54    
  42  0.984333     -0.157910E-01 -0.702154      0.702154       2171.15       2171.85    
  43  0.956700     -0.442655E-01  -1.96829       1.96829       2140.51       2142.48    
  44  0.186161      -1.68114      -74.7528       74.7528       2188.26       2263.01    
  45  0.791379     -0.233979      -10.4040       10.4040       2207.10       2217.50    
  46  0.262937      -1.33584      -59.3988       59.3988       2245.76       2305.16    
  47  0.115228E-01  -4.46342      -198.468       198.468       2264.54       2463.01    
  48  0.324912      -1.12420      -49.9881       49.9881       2268.96       2318.94    
  49  0.164288      -1.80613      -80.3105       80.3105       2253.57       2333.88    
  50  0.334193E-02  -5.70121      -253.507       253.507       2234.06       2487.57    
  51  0.189130      -1.66532      -74.0492       74.0492       2113.64       2187.69    
loop,thermsimp(1:2)       55   20.8205       4.22086    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       2182.99          0.85          1.12         21.98          0.05          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2182.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       55
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       56
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      294     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -62.3880       62.3880       2064.23       2126.62    
   2  0.963480     -0.372033E-01  -1.65426       1.65426       2086.37       2088.02    
   3  0.633143     -0.457059      -20.3233       20.3233       2072.67       2093.00    
   4  0.939850E-02  -4.66721      -207.529       207.529       2087.11       2294.64    
   5  0.796978     -0.226928      -10.0905       10.0905       2095.32       2105.41    
   6  0.229125      -1.47349      -65.5194       65.5194       2099.93       2165.45    
   7  0.926958     -0.758467E-01  -3.37256       3.37256       2082.78       2086.15    
   8  0.687512     -0.374676      -16.6601       16.6601       2112.12       2128.78    
   9  0.695030     -0.363800      -16.1765       16.1765       2118.68       2134.86    
  10  0.900736     -0.104543      -4.64854       4.64854       2111.53       2116.17    
  11  0.867179     -0.142510      -6.33677       6.33677       2127.07       2133.41    
  12  0.879271     -0.128662      -5.72101       5.72101       2117.27       2122.99    
  13  0.197557      -1.62173      -72.1109       72.1109       2126.26       2198.37    
  14  0.790701     -0.234835      -10.4420       10.4420       2126.23       2136.67    
  15  0.807456     -0.213867      -9.50969       9.50969       2129.39       2138.90    
  16  0.688117     -0.373796      -16.6210       16.6210       2140.51       2157.13    
  17  0.227000      -1.48280      -65.9336       65.9336       2113.59       2179.53    
  18  0.374715     -0.981589      -43.6468       43.6468       2125.48       2169.12    
  19  0.176077      -1.73683      -77.2291       77.2291       2138.52       2215.74    
  20  0.446126E-01  -3.10974      -138.276       138.276       2104.41       2242.68    
  21  0.997763E-01  -2.30482      -102.485       102.485       2126.88       2229.37    
  22  0.142978E-01  -4.24765      -188.874       188.874       2147.06       2335.93    
  23  0.652216     -0.427379      -19.0036       19.0036       2146.80       2165.80    
  24  0.909797     -0.945339E-01  -4.20349       4.20349       2144.24       2148.44    
  25  0.145015      -1.93092      -85.8592       85.8592       2159.84       2245.70    
  26  0.189723      -1.66219      -73.9102       73.9102       2125.29       2199.20    
  27  0.260997      -1.34324      -59.7280       59.7280       2111.02       2170.74    
  28  0.167755      -1.78525      -79.3819       79.3819       2163.72       2243.10    
  29  0.148939      -1.90422      -84.6720       84.6720       2131.91       2216.58    
  30  0.209474      -1.56315      -69.5064       69.5064       2102.74       2172.25    
  31  0.594522     -0.519998      -23.1219       23.1219       2171.15       2194.27    
  32  0.401703     -0.912043      -40.5544       40.5544       2110.65       2151.20    
  33  0.306469      -1.18264      -52.5867       52.5867       2130.73       2183.32    
  34  0.879335     -0.128589      -5.71777       5.71777       2113.64       2119.36    
  35  0.920707     -0.826134E-01  -3.67344       3.67344       2135.56       2139.23    
  36  0.215616      -1.53425      -68.2214       68.2214       2143.42       2211.64    
  37  0.821708     -0.196370      -8.73171       8.73171       2207.10       2215.83    
  38  0.935240     -0.669517E-01  -2.97704       2.97704       2133.72       2136.70    
  39  0.691932     -0.368268      -16.3752       16.3752       2090.77       2107.15    
  40  0.493152     -0.706938      -31.4343       31.4343       2180.36       2211.80    
  41  0.362160      -1.01567      -45.1622       45.1622       2207.60       2252.76    
  42  0.636318     -0.452056      -20.1009       20.1009       2188.26       2208.36    
  43  0.178369      -1.72390      -76.6541       76.6541       2179.33       2255.99    
  44  0.987372     -0.127089E-01 -0.565106      0.565106       2169.17       2169.74    
  45  0.557690     -0.583953      -25.9657       25.9657       2143.13       2169.10    
  46  0.434391     -0.833811      -37.0758       37.0758       2145.14       2182.21    
  47  0.759572     -0.275001      -12.2280       12.2280       2245.76       2257.98    
  48  0.578559     -0.547214      -24.3321       24.3321       2268.96       2293.29    
  49  0.262392      -1.33792      -59.4911       59.4911       2253.57       2313.06    
  50  0.615619     -0.485127      -21.5714       21.5714       2264.54       2286.11    
  51  0.580502     -0.543861      -24.1831       24.1831       2182.99       2207.17    
loop,thermsimp(1:2)       56   62.3880       1.65426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       2180.44          0.86          1.11         21.90          0.02          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2180.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       56
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       57
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      295     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -52.9607       52.9607       2082.78       2135.74    
   2  0.729962     -0.314762      -13.9960       13.9960       2086.37       2100.36    
   3  0.788140     -0.238080      -10.5863       10.5863       2072.67       2083.26    
   4  0.718031     -0.331242      -14.7289       14.7289       2095.32       2110.05    
   5  0.603575     -0.504885      -22.4500       22.4500       2090.77       2113.22    
   6  0.287757      -1.24564      -55.3880       55.3880       2111.53       2166.91    
   7  0.690986     -0.369635      -16.4360       16.4360       2113.64       2130.07    
   8  0.976315     -0.239695E-01  -1.06582       1.06582       2117.27       2118.34    
   9  0.983892     -0.162393E-01 -0.722088      0.722088       2064.23       2064.95    
  10  0.858769     -0.152255      -6.77008       6.77008       2112.12       2118.89    
  11  0.968889     -0.316048E-01  -1.40532       1.40532       2127.07       2128.48    
  12  0.364921      -1.00807      -44.8245       44.8245       2118.68       2163.51    
  13  0.540930     -0.614466      -27.3225       27.3225       2126.23       2153.55    
  14  0.812278E-01  -2.51050      -111.630       111.630       2133.72       2245.35    
  15  0.919841     -0.835539E-01  -3.71527       3.71527       2129.39       2133.10    
  16  0.275462      -1.28930      -57.3295       57.3295       2135.56       2192.89    
  17  0.704362     -0.350463      -15.5835       15.5835       2144.24       2159.82    
  18  0.896809     -0.108913      -4.84286       4.84286       2110.65       2115.49    
  19  0.166873      -1.79052      -79.6165       79.6165       2140.51       2220.13    
  20  0.927791E-02  -4.68012      -208.104       208.104       2099.93       2308.03    
  21  0.906733     -0.979074E-01  -4.35350       4.35350       2146.80       2151.15    
  22  0.575421     -0.552654      -24.5740       24.5740       2143.13       2167.70    
  23  0.975069     -0.252469E-01  -1.12262       1.12262       2125.48       2126.60    
  24  0.610094     -0.494143      -21.9723       21.9723       2169.17       2191.15    
  25  0.823028     -0.194765      -8.66030       8.66030       2111.02       2119.68    
  26  0.709022     -0.343869      -15.2903       15.2903       2102.74       2118.03    
  27  0.956893     -0.440633E-01  -1.95930       1.95930       2113.59       2115.55    
  28  0.897850E-01  -2.41034      -107.177       107.177       2145.14       2252.31    
  29  0.836996     -0.177936      -7.91203       7.91203       2130.73       2138.64    
  30  0.688664     -0.373001      -16.5857       16.5857       2171.15       2187.73    
  31  0.587454     -0.531957      -23.6537       23.6537       2126.26       2149.91    
  32  0.880970     -0.126731      -5.63516       5.63516       2125.29       2130.92    
  33  0.506724     -0.679789      -30.2271       30.2271       2182.99       2213.21    
  34  0.802262     -0.220320      -9.79662       9.79662       2188.26       2198.06    
  35  0.764787E-01  -2.57074      -114.309       114.309       2143.42       2257.73    
  36  0.907101     -0.975014E-01  -4.33545       4.33545       2180.36       2184.70    
  37  0.797350     -0.226461      -10.0697       10.0697       2138.52       2148.59    
  38  0.257375      -1.35722      -60.3494       60.3494       2207.10       2267.44    
  39  0.643190     -0.441315      -19.6233       19.6233       2131.91       2151.53    
  40  0.513768     -0.665984      -29.6133       29.6133       2126.88       2156.50    
  41  0.850264     -0.162208      -7.21267       7.21267       2104.41       2111.62    
  42  0.200819      -1.60535      -71.3827       71.3827       2163.72       2235.10    
  43  0.331940      -1.10280      -49.0366       49.0366       2159.84       2208.88    
  44  0.900490     -0.104816      -4.66069       4.66069       2207.60       2212.26    
  45  0.618957     -0.479719      -21.3310       21.3310       2179.33       2200.66    
  46  0.395756     -0.926956      -41.2175       41.2175       2245.76       2286.97    
  47  0.528166     -0.638345      -28.3843       28.3843       2264.54       2292.92    
  48  0.586635     -0.533352      -23.7157       23.7157       2268.96       2292.67    
  49  0.705559     -0.348765      -15.5080       15.5080       2087.11       2102.62    
  50  0.191018      -1.65539      -73.6076       73.6076       2253.57       2327.18    
  51  0.581133     -0.542775      -24.1347       24.1347       2180.44       2204.58    
loop,thermsimp(1:2)       57   52.9607       13.9960    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297       2218.84          0.86          1.12         22.11          0.10          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2218.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       57
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       58
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      296     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -28.2127       28.2127       2064.23       2092.44    
   2  0.175946E-01  -4.04016      -179.648       179.648       2072.67       2252.32    
   3  0.419998     -0.867504      -38.5740       38.5740       2086.37       2124.94    
   4  0.448197E-01  -3.10511      -138.070       138.070       2087.11       2225.18    
   5  0.501784     -0.689586      -30.6628       30.6628       2095.32       2125.99    
   6  0.858173     -0.152949      -6.80097       6.80097       2104.41       2111.21    
   7  0.101932      -2.28345      -101.535       101.535       2090.77       2192.31    
   8  0.453268     -0.791273      -35.1843       35.1843       2110.65       2145.83    
   9  0.128092      -2.05501      -91.3768       91.3768       2113.59       2204.97    
  10  0.779644     -0.248918      -11.0682       11.0682       2102.74       2113.81    
  11  0.769943E-01  -2.56402      -114.011       114.011       2117.27       2231.28    
  12  0.140214      -1.96458      -87.3561       87.3561       2112.12       2199.48    
  13  0.571588     -0.559337      -24.8712       24.8712       2111.02       2135.89    
  14  0.455096     -0.787247      -35.0053       35.0053       2125.48       2160.48    
  15  0.594240     -0.520471      -23.1430       23.1430       2127.07       2150.21    
  16  0.833288     -0.182376      -8.10942       8.10942       2113.64       2121.75    
  17  0.807090E-01  -2.51691      -111.915       111.915       2125.29       2237.20    
  18  0.430313     -0.843242      -37.4951       37.4951       2129.39       2166.88    
  19  0.990463     -0.958277E-02 -0.426102      0.426102       2082.78       2083.20    
  20  0.907906     -0.966144E-01  -4.29600       4.29600       2130.73       2135.03    
  21  0.607469     -0.498455      -22.1640       22.1640       2138.52       2160.68    
  22  0.927102     -0.756916E-01  -3.36566       3.36566       2126.26       2129.62    
  23  0.379122     -0.969896      -43.1269       43.1269       2146.80       2189.92    
  24  0.183121E-01  -4.00019      -177.870       177.870       2131.91       2309.78    
  25  0.561966     -0.576313      -25.6260       25.6260       2126.23       2151.86    
  26  0.638772     -0.448208      -19.9298       19.9298       2126.88       2146.81    
  27  0.234202      -1.45157      -64.5447       64.5447       2144.24       2208.78    
  28  0.257221      -1.35782      -60.3760       60.3760       2118.68       2179.06    
  29  0.688379     -0.373416      -16.6041       16.6041       2111.53       2128.13    
  30  0.360237E-01  -3.32358      -147.784       147.784       2143.13       2290.91    
  31  0.849177     -0.163487      -7.26954       7.26954       2180.36       2187.63    
  32  0.324868E-01  -3.42692      -152.380       152.380       2171.15       2323.53    
  33  0.216483E-01  -3.83283      -170.428       170.428       2169.17       2339.60    
  34  0.794095     -0.230552      -10.2516       10.2516       2135.56       2145.81    
  35  0.453180     -0.791465      -35.1929       35.1929       2188.26       2223.45    
  36  0.286278      -1.25079      -55.6171       55.6171       2179.33       2234.95    
  37  0.931500     -0.709590E-01  -3.15523       3.15523       2180.44       2183.60    
  38  0.483424     -0.726861      -32.3202       32.3202       2159.84       2192.16    
  39  0.782276     -0.245547      -10.9184       10.9184       2207.60       2218.51    
  40  0.976661     -0.236156E-01  -1.05008       1.05008       2182.99       2184.04    
  41  0.707981     -0.345338      -15.3556       15.3556       2140.51       2155.87    
  42  0.101993      -2.28285      -101.508       101.508       2163.72       2265.23    
  43  0.690974E-01  -2.67224      -118.822       118.822       2133.72       2252.54    
  44  0.767576E-01  -2.56710      -114.147       114.147       2145.14       2259.28    
  45  0.584825     -0.536443      -23.8532       23.8532       2143.42       2167.27    
  46  0.588828     -0.529621      -23.5499       23.5499       2207.10       2230.64    
  47  0.894562     -0.111421      -4.95438       4.95438       2245.76       2250.71    
  48  0.260723      -1.34430      -59.7748       59.7748       2268.96       2328.73    
  49  0.773456E-01  -2.55947      -113.808       113.808       2264.54       2378.35    
  50  0.848651E-01  -2.46669      -109.683       109.683       2099.93       2209.61    
  51  0.992803     -0.722305E-02 -0.321176      0.321176       2218.84       2219.17    
loop,thermsimp(1:2)       58   28.2127       179.648    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       2298.95          0.86          1.12         21.91          0.02          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2298.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       58
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       59
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      297     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -2.42520       2.42520       2082.78       2085.20    
   2  0.224221      -1.49512      -66.4813       66.4813       2064.23       2130.71    
   3  0.699642     -0.357186      -15.8824       15.8824       2104.41       2120.29    
   4  0.490916     -0.711482      -31.6364       31.6364       2102.74       2134.38    
   5  0.204251      -1.58840      -70.6291       70.6291       2113.64       2184.27    
   6  0.356522      -1.03136      -45.8599       45.8599       2086.37       2132.23    
   7  0.745938     -0.293113      -13.0334       13.0334       2095.32       2108.36    
   8  0.451533     -0.795107      -35.3548       35.3548       2111.53       2146.88    
   9  0.101038      -2.29226      -101.926       101.926       2126.26       2228.18    
  10  0.826978     -0.189977      -8.44742       8.44742       2130.73       2139.18    
  11  0.212337      -1.54958      -68.9028       68.9028       2111.02       2179.92    
  12  0.490540     -0.712248      -31.6705       31.6705       2135.56       2167.23    
  13  0.672078     -0.397381      -17.6697       17.6697       2110.65       2128.32    
  14  0.690580     -0.370223      -16.4621       16.4621       2126.88       2143.35    
  15  0.513190     -0.667108      -29.6633       29.6633       2127.07       2156.73    
  16  0.268393      -1.31530      -58.4856       58.4856       2126.23       2184.72    
  17  0.896898     -0.108813      -4.83842       4.83842       2140.51       2145.35    
  18  0.911953     -0.921674E-01  -4.09827       4.09827       2125.48       2129.57    
  19  0.355703      -1.03366      -45.9621       45.9621       2138.52       2184.48    
  20  0.293818      -1.22479      -54.4610       54.4610       2129.39       2183.85    
  21  0.713392     -0.337724      -15.0171       15.0171       2143.42       2158.44    
  22  0.660627     -0.414565      -18.4338       18.4338       2118.68       2137.12    
  23  0.795097     -0.229291      -10.1955       10.1955       2180.44       2190.64    
  24  0.919484     -0.839428E-01  -3.73256       3.73256       2182.99       2186.72    
  25  0.976382     -0.239014E-01  -1.06279       1.06279       2180.36       2181.42    
  26  0.922195     -0.809991E-01  -3.60166       3.60166       2146.80       2150.40    
  27  0.436062     -0.829970      -36.9050       36.9050       2159.84       2196.74    
  28  0.271848      -1.30251      -57.9168       57.9168       2090.77       2148.69    
  29  0.389360     -0.943252      -41.9421       41.9421       2112.12       2154.06    
  30  0.314178E-01  -3.46038      -153.867       153.867       2113.59       2267.46    
  31  0.545460     -0.606126      -26.9517       26.9517       2144.24       2171.19    
  32  0.925479E-01  -2.38003      -105.829       105.829       2099.93       2205.75    
  33  0.971973     -0.284273E-01  -1.26403       1.26403       2207.60       2208.86    
  34  0.403500     -0.907578      -40.3559       40.3559       2218.84       2259.20    
  35  0.392926     -0.934133      -41.5367       41.5367       2188.26       2229.80    
  36  0.718758     -0.330230      -14.6838       14.6838       2087.11       2101.79    
  37  0.746082     -0.292920      -13.0248       13.0248       2207.10       2220.12    
  38  0.353478      -1.03993      -46.2412       46.2412       2117.27       2163.51    
  39  0.843229     -0.170517      -7.58211       7.58211       2179.33       2186.92    
  40  0.388011     -0.946720      -42.0964       42.0964       2125.29       2167.38    
  41  0.969569     -0.309034E-01  -1.37413       1.37413       2245.76       2247.13    
  42  0.441380E-01  -3.12043      -138.752       138.752       2072.67       2211.43    
  43  0.533000     -0.629233      -27.9791       27.9791       2133.72       2161.70    
  44  0.288396      -1.24342      -55.2893       55.2893       2145.14       2200.42    
  45  0.683115     -0.381092      -16.9454       16.9454       2163.72       2180.67    
  46  0.339511      -1.08025      -48.0338       48.0338       2143.13       2191.16    
  47  0.150420E-01  -4.19691      -186.617       186.617       2131.91       2318.53    
  48  0.141026      -1.95881      -87.0994       87.0994       2171.15       2258.25    
  49  0.421666     -0.863541      -38.3978       38.3978       2268.96       2307.35    
  50  0.953496     -0.476201E-01  -2.11745       2.11745       2169.17       2171.29    
  51  0.966647     -0.339215E-01  -1.50833       1.50833       2298.95       2300.46    
loop,thermsimp(1:2)       59   2.42520       66.4813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299       2408.87          0.86          1.12         21.86          0.08          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300       2188.52          0.85          1.12         21.95          0.05          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2188.52
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       59
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       60
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      299     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -47.0480       47.0480       2082.78       2129.82    
   2  0.605757     -0.501276      -22.2895       22.2895       2087.11       2109.40    
   3  0.690633     -0.370146      -16.4587       16.4587       2095.32       2111.78    
   4  0.400665     -0.914628      -40.6694       40.6694       2104.41       2145.07    
   5  0.862165     -0.148309      -6.59462       6.59462       2110.65       2117.24    
   6  0.874011     -0.134662      -5.98782       5.98782       2125.48       2131.46    
   7  0.389525     -0.942826      -41.9232       41.9232       2064.23       2106.15    
   8  0.102225E-01  -4.58317      -203.793       203.793       2086.37       2290.16    
   9  0.102697      -2.27597      -101.202       101.202       2102.74       2203.94    
  10  0.818271     -0.200561      -8.91805       8.91805       2118.68       2127.60    
  11  0.888768     -0.117920      -5.24335       5.24335       2130.73       2135.97    
  12  0.539210     -0.617651      -27.4641       27.4641       2126.88       2154.35    
  13  0.317914      -1.14597      -50.9563       50.9563       2140.51       2191.47    
  14  0.437422     -0.826857      -36.7666       36.7666       2111.53       2148.29    
  15  0.925263     -0.776773E-01  -3.45396       3.45396       2090.77       2094.22    
  16  0.422436     -0.861717      -38.3167       38.3167       2146.80       2185.11    
  17  0.965248     -0.353697E-01  -1.57273       1.57273       2112.12       2113.69    
  18  0.771278     -0.259706      -11.5479       11.5479       2127.07       2138.62    
  19  0.902488     -0.102600      -4.56216       4.56216       2143.42       2147.98    
  20  0.512816     -0.667839      -29.6958       29.6958       2133.72       2163.42    
  21  0.915966     -0.877758E-01  -3.90299       3.90299       2117.27       2121.17    
  22  0.612605     -0.490035      -21.7896       21.7896       2135.56       2157.35    
  23  0.323528      -1.12847      -50.1779       50.1779       2125.29       2175.47    
  24  0.206646      -1.57675      -70.1109       70.1109       2144.24       2214.35    
  25  0.481057     -0.731769      -32.5384       32.5384       2169.17       2201.71    
  26  0.287887E-01  -3.54777      -157.753       157.753       2111.02       2268.77    
  27  0.996968     -0.303648E-02 -0.135019      0.135019       2163.72       2163.86    
  28  0.132770      -2.01914      -89.7819       89.7819       2180.36       2270.14    
  29  0.716038     -0.334023      -14.8525       14.8525       2129.39       2144.24    
  30  0.229552      -1.47162      -65.4365       65.4365       2113.64       2179.07    
  31  0.236358      -1.44241      -64.1373       64.1373       2138.52       2202.65    
  32  0.542780     -0.611051      -27.1707       27.1707       2126.23       2153.40    
  33  0.875156     -0.133353      -5.92959       5.92959       2182.99       2188.92    
  34  0.988730     -0.113343E-01 -0.503986      0.503986       2179.33       2179.84    
  35  0.244332      -1.40923      -62.6620       62.6620       2180.44       2243.11    
  36  0.659246     -0.416659      -18.5269       18.5269       2143.13       2161.66    
  37  0.457872     -0.781166      -34.7349       34.7349       2159.84       2194.57    
  38  0.380652E-01  -3.26846      -145.333       145.333       2145.14       2290.47    
  39  0.358843      -1.02487      -45.5713       45.5713       2099.93       2145.50    
  40  0.846233     -0.166960      -7.42395       7.42395       2207.60       2215.02    
  41  0.359308      -1.02358      -45.5138       45.5138       2072.67       2118.19    
  42  0.533329     -0.628617      -27.9518       27.9518       2207.10       2235.05    
  43  0.645289     -0.438058      -19.4784       19.4784       2126.26       2145.73    
  44  0.311850      -1.16523      -51.8126       51.8126       2188.26       2240.07    
  45  0.270084      -1.30902      -58.2062       58.2062       2245.76       2303.96    
  46  0.530313     -0.634287      -28.2039       28.2039       2171.15       2199.35    
  47  0.975874     -0.244213E-01  -1.08590       1.08590       2218.84       2219.93    
  48  0.313811      -1.15896      -51.5339       51.5339       2113.59       2165.13    
  49  0.932688     -0.696844E-01  -3.09855       3.09855       2298.95       2302.05    
  50  0.357359      -1.02901      -45.7556       45.7556       2268.96       2314.71    
  51  0.545837     -0.605435      -26.9209       26.9209       2188.52       2215.44    
loop,thermsimp(1:2)       60   47.0480       22.2895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301       2221.33          0.86          1.11         21.92          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    2221.3       0.9617     -2.213      3.254     -102.6      1.788    
                      0.9719      2.860     -99.70      3.546      1.309    

                       4.363     -2.541      1.540      7000.      7000.    

                      -1.754      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.883     -3.003     -9.545      5.419    

                      -12.98     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2857E-01 0.2776     0.3395E-01 0.1170    

                     -0.2486    -0.1097     0.1966     0.1769     0.7412E-01



                     -0.7616    -0.5339      0.000     0.1136    -0.2703E-02

                     -0.2495E-01 0.2066    -0.7116    -0.4578E-01 0.2748    

                      0.1262    -0.4998E-01-0.5552     -1.133      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.309      8.885    -0.1672E+05 -6.000    

                     -0.5014     -2.997      9.428      8.805    -0.1969E+05



                      -6.000     0.6039    -0.2058      9.039      9.252    

                     -0.1944E+05 -6.000     -1.163    -0.3507      9.128    

                       8.821    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2221.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       60
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       61
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      300     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -18.2129       18.2129       2090.77       2108.98    
   2  0.718953     -0.329960      -14.6718       14.6718       2064.23       2078.90    
   3  0.454275     -0.789053      -35.0856       35.0856       2087.11       2122.19    
   4  0.253407E-01  -3.67534      -163.426       163.426       2095.32       2258.75    
   5  0.611947     -0.491110      -21.8374       21.8374       2112.12       2133.96    
   6  0.234016      -1.45237      -64.5801       64.5801       2110.65       2175.23    
   7  0.359481E-01  -3.32568      -147.878       147.878       2072.67       2220.55    
   8  0.222118E-01  -3.80713      -169.286       169.286       2117.27       2286.56    
   9  0.905838E-01  -2.40148      -106.783       106.783       2118.68       2225.46    
  10  0.791683     -0.233594      -10.3869       10.3869       2082.78       2093.16    
  11  0.557734     -0.583873      -25.9622       25.9622       2125.48       2151.44    
  12  0.936048E-01  -2.36867      -105.324       105.324       2130.73       2236.05    
  13  0.431059     -0.841510      -37.4181       37.4181       2127.07       2164.49    
  14  0.225758      -1.48829      -66.1776       66.1776       2129.39       2195.56    
  15  0.275181E-01  -3.59291      -159.761       159.761       2104.41       2264.17    
  16  0.802517     -0.220002      -9.78250       9.78250       2099.93       2109.71    
  17  0.423872     -0.858323      -38.1657       38.1657       2126.26       2164.42    
  18  0.300971      -1.20074      -53.3915       53.3915       2143.42       2196.81    
  19  0.479556     -0.734895      -32.6775       32.6775       2111.53       2144.20    
  20  0.621838     -0.475076      -21.1245       21.1245       2126.23       2147.35    
  21  0.397654     -0.922172      -41.0048       41.0048       2126.88       2167.89    
  22  0.664976     -0.408004      -18.1421       18.1421       2135.56       2153.70    
  23  0.288358      -1.24355      -55.2951       55.2951       2143.13       2198.43    
  24  0.442017     -0.816406      -36.3019       36.3019       2133.72       2170.02    
  25  0.150763E-01  -4.19463      -186.516       186.516       2163.72       2350.24    
  26  0.600886     -0.509350      -22.6485       22.6485       2113.59       2136.24    
  27  0.162927      -1.81446      -80.6806       80.6806       2125.29       2205.97    
  28  0.932743     -0.696251E-01  -3.09591       3.09591       2113.64       2116.73    
  29  0.997186     -0.281799E-02 -0.125303      0.125303       2179.33       2179.46    
  30  0.418339     -0.871463      -38.7500       38.7500       2146.80       2185.55    
  31  0.694800     -0.364132      -16.1913       16.1913       2182.99       2199.18    
  32  0.852711     -0.159334      -7.08488       7.08488       2140.51       2147.60    
  33  0.624847     -0.470249      -20.9098       20.9098       2159.84       2180.75    
  34  0.427649     -0.849453      -37.7713       37.7713       2171.15       2208.92    
  35  0.149871      -1.89798      -84.3947       84.3947       2169.17       2253.57    
  36  0.563430     -0.573713      -25.5104       25.5104       2138.52       2164.03    
  37  0.860100     -0.150706      -6.70122       6.70122       2102.74       2109.44    
  38  0.867090E-01  -2.44520      -108.727       108.727       2144.24       2252.97    
  39  0.847848     -0.165054      -7.33919       7.33919       2207.60       2214.93    
  40  0.782599E-01  -2.54772      -113.286       113.286       2188.52       2301.81    
  41  0.697889E-01  -2.66228      -118.380       118.380       2218.84       2337.22    
  42  0.422765     -0.860939      -38.2820       38.2820       2207.10       2245.38    
  43  0.158365      -1.84286      -81.9435       81.9435       2188.26       2270.20    
  44  0.518935     -0.655976      -29.1683       29.1683       2180.44       2209.61    
  45  0.430406     -0.843027      -37.4856       37.4856       2111.02       2148.50    
  46  0.639805     -0.446592      -19.8579       19.8579       2180.36       2200.22    
  47  0.830453E-01  -2.48837      -110.646       110.646       2086.37       2197.01    
  48  0.639384     -0.447250      -19.8872       19.8872       2145.14       2165.02    
  49  0.833791     -0.181773      -8.08262       8.08262       2298.95       2307.03    
  50  0.453972     -0.789720      -35.1153       35.1153       2245.76       2280.87    
  51  0.542088     -0.612327      -27.2274       27.2274       2221.33       2248.56    
loop,thermsimp(1:2)       61   18.2129       14.6718    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302       2115.10          0.86          1.11         21.95          0.06          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2115.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       61
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       62
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      301     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.629963      0.629963       2064.23       2064.86    
   2  0.420912     -0.865330      -38.4773       38.4773       2082.78       2121.25    
   3  0.617210     -0.482545      -21.4566       21.4566       2090.77       2112.23    
   4  0.787846     -0.238453      -10.6029       10.6029       2102.74       2113.34    
   5  0.608770     -0.496315      -22.0689       22.0689       2099.93       2121.99    
   6  0.925975     -0.769083E-01  -3.41976       3.41976       2113.64       2117.06    
   7  0.545822     -0.605462      -26.9221       26.9221       2087.11       2114.03    
   8  0.240142      -1.42653      -63.4311       63.4311       2112.12       2175.55    
   9  0.800257     -0.222822      -9.90788       9.90788       2113.59       2123.50    
  10  0.250149      -1.38570      -61.6158       61.6158       2111.53       2173.14    
  11  0.814044     -0.205741      -9.14838       9.14838       2126.23       2135.38    
  12  0.897552     -0.108084      -4.80600       4.80600       2140.51       2145.32    
  13  0.807530     -0.213775      -9.50562       9.50562       2111.02       2120.52    
  14  0.369031     -0.996874      -44.3265       44.3265       2125.48       2169.80    
  15  0.892620     -0.113594      -5.05102       5.05102       2135.56       2140.61    
  16  0.992736     -0.729054E-02 -0.324177      0.324177       2138.52       2138.84    
  17  0.264259      -1.33083      -59.1758       59.1758       2126.26       2185.43    
  18  0.164586      -1.80432      -80.2301       80.2301       2127.07       2207.30    
  19  0.594739     -0.519633      -23.1057       23.1057       2145.14       2168.24    
  20  0.766319     -0.266156      -11.8348       11.8348       2126.88       2138.72    
  21  0.392663     -0.934804      -41.5665       41.5665       2133.72       2175.29    
  22  0.900399     -0.104917      -4.66520       4.66520       2110.65       2115.31    
  23  0.853164E-01  -2.46139      -109.447       109.447       2179.33       2288.78    
  24  0.753181     -0.283450      -12.6037       12.6037       2159.84       2172.44    
  25  0.801958     -0.220699      -9.81347       9.81347       2146.80       2156.61    
  26  0.840206     -0.174108      -7.74181       7.74181       2129.39       2137.13    
  27  0.899787     -0.105597      -4.69544       4.69544       2143.42       2148.12    
  28  0.555629     -0.587654      -26.1303       26.1303       2086.37       2112.50    
  29  0.117481E-01  -4.44406      -197.607       197.607       2143.13       2340.74    
  30  0.228476      -1.47632      -65.6454       65.6454       2182.99       2248.63    
  31  0.121877      -2.10474      -93.5884       93.5884       2180.36       2273.95    
  32  0.475375     -0.743652      -33.0668       33.0668       2125.29       2158.35    
  33  0.208734      -1.56669      -69.6638       69.6638       2171.15       2240.81    
  34  0.680231     -0.385322      -17.1335       17.1335       2180.44       2197.58    
  35  0.211647      -1.55284      -69.0476       69.0476       2207.60       2276.64    
  36  0.982763     -0.173870E-01 -0.773123      0.773123       2072.67       2073.45    
  37  0.819904     -0.198568      -8.82943       8.82943       2118.68       2127.51    
  38  0.282339      -1.26465      -56.2332       56.2332       2130.73       2186.96    
  39  0.391986     -0.936529      -41.6432       41.6432       2207.10       2248.74    
  40  0.218050      -1.52303      -67.7223       67.7223       2221.33       2289.05    
  41  0.236244      -1.44289      -64.1588       64.1588       2144.24       2208.40    
  42  0.544673     -0.607570      -27.0159       27.0159       2169.17       2196.19    
  43  0.721937     -0.325818      -14.4876       14.4876       2095.32       2109.81    
  44  0.649728     -0.431202      -19.1736       19.1736       2104.41       2123.58    
  45  0.641823     -0.443443      -19.7179       19.7179       2188.26       2207.98    
  46  0.597293     -0.515347      -22.9151       22.9151       2245.76       2268.67    
  47  0.467405     -0.760558      -33.8186       33.8186       2117.27       2151.09    
  48  0.676900     -0.390232      -17.3519       17.3519       2188.52       2205.88    
  49  0.925913     -0.769750E-01  -3.42273       3.42273       2298.95       2302.37    
  50  0.692551     -0.367374      -16.3354       16.3354       2218.84       2235.18    
  51  0.161390      -1.82393      -81.1020       81.1020       2115.10       2196.20    
loop,thermsimp(1:2)       62  0.629963       38.4773    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303       2212.82          0.86          1.11         21.87          0.06          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2212.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.4655               301
loop is:       62
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    44.4655               301
loop is:       63
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    22.2327               351

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      302     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.336415      0.336415       2064.23       2064.57    
   2  0.760415     -0.273890      -6.08933       6.08933       2072.67       2078.76    
   3  0.328612      -1.11288      -24.7423       24.7423       2095.32       2120.07    
   4  0.164880      -1.80254      -40.0754       40.0754       2090.77       2130.85    
   5  0.706606     -0.347282      -7.72102       7.72102       2086.37       2094.09    
   6  0.832070     -0.183839      -4.08725       4.08725       2102.74       2106.83    
   7  0.231505      -1.46315      -32.5299       32.5299       2087.11       2119.64    
   8  0.802671E-01  -2.52240      -56.0797       56.0797       2110.65       2166.73    
   9  0.116349      -2.15116      -47.8262       47.8262       2113.64       2161.46    
  10  0.874222     -0.134421      -2.98855       2.98855       2111.02       2114.00    
  11  0.729333     -0.315625      -7.01721       7.01721       2082.78       2089.79    
  12  0.301675      -1.19841      -26.6438       26.6438       2099.93       2126.57    
  13  0.496896     -0.699375      -15.5490       15.5490       2113.59       2129.14    
  14  0.692174     -0.367918      -8.17983       8.17983       2104.41       2112.59    
  15  0.717718     -0.331678      -7.37411       7.37411       2118.68       2126.06    
  16  0.867334E-01  -2.44492      -54.3572       54.3572       2126.23       2180.59    
  17  0.762934     -0.270584      -6.01581       6.01581       2129.39       2135.40    
  18  0.966741     -0.338246E-01 -0.752014      0.752014       2126.88       2127.64    
  19  0.375386     -0.979801      -21.7837       21.7837       2138.52       2160.30    
  20  0.878716     -0.129293      -2.87454       2.87454       2135.56       2138.43    
  21  0.238969      -1.43142      -31.8244       31.8244       2140.51       2172.34    
  22  0.939578     -0.623249E-01  -1.38565       1.38565       2143.42       2144.81    
  23  0.694828     -0.364091      -8.09473       8.09473       2117.27       2125.37    
  24  0.869149     -0.140241      -3.11793       3.11793       2146.80       2149.91    
  25  0.310010      -1.17115      -26.0379       26.0379       2125.29       2151.33    
  26  0.831753     -0.184219      -4.09570       4.09570       2145.14       2149.23    
  27  0.621050     -0.476344      -10.5904       10.5904       2125.48       2136.07    
  28  0.902274     -0.102837      -2.28635       2.28635       2159.84       2162.13    
  29  0.341345      -1.07486      -23.8971       23.8971       2111.53       2135.42    
  30  0.718647     -0.330385      -7.34536       7.34536       2133.72       2141.07    
  31  0.489532     -0.714305      -15.8809       15.8809       2112.12       2128.00    
  32  0.387793     -0.947282      -21.0607       21.0607       2126.26       2147.32    
  33  0.576785     -0.550285      -12.2343       12.2343       2130.73       2142.96    
  34  0.454048     -0.789552      -17.5539       17.5539       2169.17       2186.73    
  35  0.532728     -0.629744      -14.0009       14.0009       2115.10       2129.10    
  36  0.459832     -0.776895      -17.2725       17.2725       2180.44       2197.72    
  37  0.784910     -0.242187      -5.38447       5.38447       2188.52       2193.91    
  38  0.842297     -0.171622      -3.81563       3.81563       2127.07       2130.89    
  39  0.967556     -0.329823E-01 -0.733287      0.733287       2188.26       2188.99    
  40  0.126414      -2.06819      -45.9816       45.9816       2144.24       2190.22    
  41  0.407002     -0.898938      -19.9858       19.9858       2218.84       2238.83    
  42  0.903435     -0.101551      -2.25777       2.25777       2171.15       2173.40    
  43  0.430116     -0.843701      -18.7578       18.7578       2182.99       2201.74    
  44  0.675859     -0.391771      -8.71014       8.71014       2207.10       2215.81    
  45  0.444470     -0.810872      -18.0279       18.0279       2245.76       2263.78    
  46  0.728661     -0.316547      -7.03770       7.03770       2180.36       2187.40    
  47  0.143617      -1.94060      -43.1449       43.1449       2207.60       2250.74    
  48  0.729467E-01  -2.61803      -58.2059       58.2059       2179.33       2237.54    
  49  0.720547     -0.327745      -7.28666       7.28666       2221.33       2228.62    
  50  0.742905     -0.297187      -6.60727       6.60727       2298.95       2305.55    
  51  0.807330     -0.214023      -4.75832       4.75832       2212.82       2217.58    
loop,thermsimp(1:2)       63  0.336415       6.08933    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       2233.34          0.86          1.12         21.95          0.08          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2233.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       63
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       64
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      303     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.807973      0.807973       2064.23       2065.04    
   2  0.186231      -1.68077      -37.3680       37.3680       2072.67       2110.04    
   3  0.127308      -2.06115      -45.8249       45.8249       2082.78       2128.60    
   4  0.305661      -1.18528      -26.3520       26.3520       2086.37       2112.72    
   5  0.685804     -0.377164      -8.38538       8.38538       2102.74       2111.13    
   6  0.713250     -0.337923      -7.51296       7.51296       2104.41       2111.92    
   7  0.562604     -0.575180      -12.7878       12.7878       2111.02       2123.80    
   8  0.410540     -0.890283      -19.7934       19.7934       2087.11       2106.90    
   9  0.667633     -0.404017      -8.98240       8.98240       2095.32       2104.31    
  10  0.111237      -2.19609      -48.8250       48.8250       2117.27       2166.10    
  11  0.987129     -0.129550E-01 -0.288025      0.288025       2118.68       2118.97    
  12  0.525481     -0.643442      -14.3055       14.3055       2099.93       2114.23    
  13  0.740553     -0.300358      -6.67778       6.67778       2126.88       2133.56    
  14  0.456748E-01  -3.08621      -68.6149       68.6149       2112.12       2180.74    
  15  0.831796     -0.184168      -4.09457       4.09457       2115.10       2119.19    
  16  0.798422     -0.225118      -5.00500       5.00500       2113.59       2118.60    
  17  0.985535     -0.145708E-01 -0.323948      0.323948       2090.77       2091.09    
  18  0.323340      -1.12905      -25.1019       25.1019       2127.07       2152.17    
  19  0.745026     -0.294336      -6.54389       6.54389       2129.39       2135.93    
  20  0.711871     -0.339858      -7.55598       7.55598       2111.53       2119.08    
  21  0.232875      -1.45725      -32.3987       32.3987       2125.48       2157.87    
  22  0.118192      -2.13545      -47.4769       47.4769       2135.56       2183.03    
  23  0.310641      -1.16912      -25.9926       25.9926       2133.72       2159.71    
  24  0.220899      -1.51005      -33.5726       33.5726       2130.73       2164.30    
  25  0.487797     -0.717856      -15.9599       15.9599       2143.42       2159.38    
  26  0.278848      -1.27709      -28.3931       28.3931       2126.26       2154.65    
  27  0.159355      -1.83662      -40.8331       40.8331       2145.14       2185.97    
  28  0.473156     -0.748329      -16.6374       16.6374       2146.80       2163.43    
  29  0.358980      -1.02449      -22.7772       22.7772       2125.29       2148.06    
  30  0.873266     -0.135515      -3.01286       3.01286       2138.52       2141.53    
  31  0.168201      -1.78260      -39.6320       39.6320       2113.64       2153.27    
  32  0.492581     -0.708096      -15.7429       15.7429       2159.84       2175.58    
  33  0.878329     -0.129734      -2.88435       2.88435       2110.65       2113.53    
  34  0.266147      -1.32371      -29.4297       29.4297       2140.51       2169.94    
  35  0.510485     -0.672394      -14.9492       14.9492       2171.15       2186.09    
  36  0.810074     -0.210630      -4.68288       4.68288       2126.23       2130.91    
  37  0.950614     -0.506467E-01  -1.12601       1.12601       2169.17       2170.30    
  38  0.329006      -1.11168      -24.7157       24.7157       2180.36       2205.08    
  39  0.934893E-01  -2.36991      -52.6895       52.6895       2188.26       2240.95    
  40  0.686671     -0.375900      -8.35729       8.35729       2144.24       2152.60    
  41  0.888060     -0.118716      -2.63939       2.63939       2188.52       2191.16    
  42  0.749618     -0.288192      -6.40729       6.40729       2180.44       2186.85    
  43  0.433754     -0.835279      -18.5705       18.5705       2182.99       2201.56    
  44  0.630341     -0.461494      -10.2603       10.2603       2207.10       2217.36    
  45  0.569388     -0.563194      -12.5213       12.5213       2212.82       2225.34    
  46  0.965872     -0.347242E-01 -0.772013      0.772013       2221.33       2222.10    
  47  0.797995     -0.225653      -5.01689       5.01689       2179.33       2184.35    
  48  0.716091     -0.333948      -7.42457       7.42457       2218.84       2226.27    
  49  0.339849      -1.07925      -23.9948       23.9948       2207.60       2231.59    
  50  0.202757      -1.59575      -35.4778       35.4778       2245.76       2281.23    
  51  0.266068      -1.32400      -29.4362       29.4362       2233.34       2262.78    
loop,thermsimp(1:2)       64  0.807973       37.3680    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305       2236.38          0.86          1.12         22.21          0.05          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2236.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       64
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       65
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      304     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -19.0474       19.0474       2064.23       2083.28    
   2  0.350039      -1.04971      -23.3379       23.3379       2090.77       2114.11    
   3  0.872911     -0.135921      -3.02190       3.02190       2095.32       2098.35    
   4  0.829005     -0.187529      -4.16927       4.16927       2087.11       2091.28    
   5  0.201827      -1.60035      -35.5801       35.5801       2072.67       2108.25    
   6  0.735791     -0.306809      -6.82121       6.82121       2102.74       2109.56    
   7  0.985788     -0.143135E-01 -0.318228      0.318228       2104.41       2104.72    
   8  0.962727     -0.379858E-01 -0.844529      0.844529       2086.37       2087.21    
   9  0.796954     -0.226958      -5.04591       5.04591       2110.65       2115.69    
  10  0.563149     -0.574211      -12.7663       12.7663       2099.93       2112.69    
  11  0.776846     -0.252513      -5.61406       5.61406       2113.59       2119.21    
  12  0.921010     -0.822839E-01  -1.82940       1.82940       2118.68       2120.51    
  13  0.884938     -0.122238      -2.71769       2.71769       2111.53       2114.24    
  14  0.850974     -0.161373      -3.58777       3.58777       2115.10       2118.68    
  15  0.391065     -0.938882      -20.8739       20.8739       2111.02       2131.89    
  16  0.150921      -1.89100      -42.0421       42.0421       2082.78       2124.82    
  17  0.295162      -1.22023      -27.1291       27.1291       2126.23       2153.36    
  18  0.662567     -0.411634      -9.15175       9.15175       2126.88       2136.03    
  19  0.893994     -0.112056      -2.49131       2.49131       2129.39       2131.88    
  20  0.103282      -2.27029      -50.4748       50.4748       2138.52       2188.99    
  21  0.416341     -0.876251      -19.4815       19.4815       2125.29       2144.77    
  22  0.986101E-01  -2.31658      -51.5039       51.5039       2127.07       2178.57    
  23  0.617817E-01  -2.78415      -61.8992       61.8992       2144.24       2206.14    
  24  0.371945     -0.989010      -21.9884       21.9884       2113.64       2135.63    
  25  0.884755     -0.122444      -2.72227       2.72227       2126.26       2128.98    
  26  0.584237     -0.537449      -11.9490       11.9490       2125.48       2137.43    
  27  0.239981      -1.42719      -31.7304       31.7304       2143.42       2175.15    
  28  0.106477      -2.23982      -49.7974       49.7974       2133.72       2183.52    
  29  0.142954      -1.94523      -43.2478       43.2478       2146.80       2190.04    
  30  0.802284     -0.220292      -4.89770       4.89770       2130.73       2135.63    
  31  0.373571     -0.984648      -21.8914       21.8914       2117.27       2139.16    
  32  0.617091     -0.482739      -10.7326       10.7326       2140.51       2151.25    
  33  0.813617     -0.206266      -4.58585       4.58585       2169.17       2173.76    
  34  0.219787E-01  -3.81768      -84.8775       84.8775       2159.84       2244.72    
  35  0.398995     -0.918807      -20.4276       20.4276       2112.12       2132.55    
  36  0.906985     -0.976296E-01  -2.17057       2.17057       2135.56       2137.73    
  37  0.259146E-01  -3.65295      -81.2150       81.2150       2179.33       2260.55    
  38  0.347543      -1.05687      -23.4971       23.4971       2145.14       2168.63    
  39  0.879549     -0.128346      -2.85348       2.85348       2171.15       2174.00    
  40  0.618015     -0.481242      -10.6993       10.6993       2180.44       2191.14    
  41  0.173348      -1.75246      -38.9619       38.9619       2188.52       2227.49    
  42  0.324418      -1.12572      -25.0279       25.0279       2182.99       2208.01    
  43  0.426503     -0.852135      -18.9453       18.9453       2180.36       2199.31    
  44  0.672650     -0.396530      -8.81595       8.81595       2207.10       2215.91    
  45  0.500711     -0.691727      -15.3790       15.3790       2221.33       2236.71    
  46  0.457446     -0.782097      -17.3881       17.3881       2212.82       2230.20    
  47  0.408507     -0.895245      -19.9038       19.9038       2218.84       2238.75    
  48  0.649058     -0.432234      -9.60974       9.60974       2207.60       2217.20    
  49  0.275220      -1.29018      -28.6843       28.6843       2188.26       2216.95    
  50  0.706820     -0.346979      -7.71429       7.71429       2233.34       2241.05    
  51  0.596044     -0.517441      -11.5041       11.5041       2236.38       2247.88    
loop,thermsimp(1:2)       65   19.0474       23.3379    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306       2229.88          0.86          1.12         21.94          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2229.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       65
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       66
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      305     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -16.5905       16.5905       2064.23       2080.82    
   2  0.162949E-01  -4.11691      -91.5301       91.5301       2086.37       2177.90    
   3  0.560104     -0.579632      -12.8868       12.8868       2087.11       2100.00    
   4  0.583629     -0.538490      -11.9721       11.9721       2095.32       2107.30    
   5  0.794243     -0.230366      -5.12166       5.12166       2104.41       2109.53    
   6  0.183626E-01  -3.99744      -88.8740       88.8740       2072.67       2161.55    
   7  0.642495     -0.442397      -9.83570       9.83570       2102.74       2112.58    
   8  0.611061E-02  -5.09773      -113.336       113.336       2099.93       2213.26    
   9  0.974115E-01  -2.32881      -51.7758       51.7758       2090.77       2142.55    
  10  0.817249E-01  -2.50440      -55.6796       55.6796       2111.53       2167.20    
  11  0.644422     -0.439401      -9.76908       9.76908       2110.65       2120.42    
  12  0.378181     -0.972383      -21.6187       21.6187       2115.10       2136.71    
  13  0.105422      -2.24978      -50.0188       50.0188       2113.59       2163.61    
  14  0.713647     -0.337367      -7.50059       7.50059       2118.68       2126.18    
  15  0.602100     -0.507333      -11.2794       11.2794       2082.78       2094.06    
  16  0.746624     -0.292194      -6.49627       6.49627       2126.26       2132.75    
  17  0.687673     -0.374442      -8.32488       8.32488       2129.39       2137.71    
  18  0.356323      -1.03192      -22.9424       22.9424       2111.02       2133.96    
  19  0.631203     -0.460128      -10.2299       10.2299       2112.12       2122.35    
  20  0.348432      -1.05431      -23.4403       23.4403       2113.64       2137.08    
  21  0.200848      -1.60521      -35.6881       35.6881       2130.73       2166.42    
  22  0.863860     -0.146345      -3.25364       3.25364       2126.88       2130.14    
  23  0.278415      -1.27864      -28.4277       28.4277       2125.48       2153.90    
  24  0.871038     -0.138069      -3.06966       3.06966       2135.56       2138.63    
  25  0.581010     -0.542987      -12.0721       12.0721       2117.27       2129.34    
  26  0.960519     -0.402815E-01 -0.895567      0.895567       2125.29       2126.18    
  27  0.104828      -2.25543      -50.1444       50.1444       2140.51       2190.66    
  28  0.907238     -0.973501E-01  -2.16436       2.16436       2126.23       2128.39    
  29  0.685005     -0.378330      -8.41130       8.41130       2145.14       2153.55    
  30  0.239566E-01  -3.73151      -82.9617       82.9617       2169.17       2252.14    
  31  0.643900     -0.440211      -9.78710       9.78710       2171.15       2180.93    
  32  0.526819     -0.640898      -14.2489       14.2489       2143.42       2157.67    
  33  0.463387     -0.769192      -17.1012       17.1012       2127.07       2144.17    
  34  0.847158E-01  -2.46845      -54.8805       54.8805       2133.72       2188.60    
  35  0.134368E-01  -4.30976      -95.8177       95.8177       2138.52       2234.33    
  36  0.141068      -1.95851      -43.5430       43.5430       2146.80       2190.34    
  37  0.239867      -1.42767      -31.7410       31.7410       2180.44       2212.19    
  38  0.317049      -1.14870      -25.5387       25.5387       2180.36       2205.90    
  39  0.925847     -0.770459E-01  -1.71294       1.71294       2144.24       2145.95    
  40  0.939258     -0.626649E-01  -1.39321       1.39321       2182.99       2184.38    
  41  0.111598      -2.19286      -48.7532       48.7532       2207.10       2255.85    
  42  0.357545      -1.02849      -22.8662       22.8662       2188.26       2211.13    
  43  0.902640     -0.102432      -2.27734       2.27734       2207.60       2209.87    
  44  0.914421     -0.894640E-01  -1.98903       1.98903       2188.52       2190.51    
  45  0.320420      -1.13812      -25.3035       25.3035       2212.82       2238.12    
  46  0.341333      -1.07490      -23.8979       23.8979       2221.33       2245.23    
  47  0.509727     -0.673879      -14.9822       14.9822       2218.84       2233.83    
  48  0.130581E-02  -6.64093      -147.646       147.646       2233.34       2380.99    
  49  0.105413      -2.24987      -50.0207       50.0207       2159.84       2209.86    
  50  0.743306     -0.296647      -6.59527       6.59527       2236.38       2242.98    
  51  0.114013      -2.17144      -48.2771       48.2771       2229.88       2278.16    
loop,thermsimp(1:2)       66   16.5905       91.5301    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307       2271.80          0.85          1.11         22.01          0.01          0.05         24.04
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2271.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       66
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       67
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      306     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -7.57647       7.57647       2064.23       2071.81    
   2  0.492413     -0.708438      -15.7505       15.7505       2082.78       2098.53    
   3  0.156563      -1.85430      -41.2261       41.2261       2087.11       2128.34    
   4  0.185270      -1.68594      -37.4831       37.4831       2095.32       2132.81    
   5  0.685983     -0.376903      -8.37958       8.37958       2104.41       2112.79    
   6  0.518581     -0.656659      -14.5993       14.5993       2102.74       2117.34    
   7  0.430667     -0.842421      -18.7293       18.7293       2110.65       2129.38    
   8  0.748228     -0.290047      -6.44855       6.44855       2112.12       2118.57    
   9  0.348167      -1.05507      -23.4572       23.4572       2118.68       2142.14    
  10  0.281980E-01  -3.56850      -79.3376       79.3376       2125.29       2204.62    
  11  0.670749     -0.399360      -8.87887       8.87887       2126.23       2135.11    
  12  0.225031      -1.49152      -33.1605       33.1605       2117.27       2150.43    
  13  0.258016      -1.35474      -30.1195       30.1195       2126.88       2157.00    
  14  0.122388      -2.10056      -46.7011       46.7011       2126.26       2172.96    
  15  0.556210     -0.586609      -13.0419       13.0419       2111.02       2124.06    
  16  0.938933     -0.630108E-01  -1.40090       1.40090       2115.10       2116.50    
  17  0.440352     -0.820180      -18.2348       18.2348       2113.64       2131.87    
  18  0.779048     -0.249683      -5.55114       5.55114       2129.39       2134.94    
  19  0.929725     -0.728667E-01  -1.62002       1.62002       2135.56       2137.18    
  20  0.330740      -1.10642      -24.5988       24.5988       2090.77       2115.37    
  21  0.214890      -1.53763      -34.1857       34.1857       2127.07       2161.26    
  22  0.363221      -1.01274      -22.5161       22.5161       2144.24       2166.75    
  23  0.681309     -0.383740      -8.53159       8.53159       2145.14       2153.67    
  24  0.107313      -2.23200      -49.6235       49.6235       2125.48       2175.10    
  25  0.622524     -0.473973      -10.5377       10.5377       2143.42       2153.96    
  26  0.532378     -0.630402      -14.0156       14.0156       2072.67       2086.69    
  27  0.298562      -1.20878      -26.8745       26.8745       2113.59       2140.47    
  28  0.432099     -0.839100      -18.6555       18.6555       2130.73       2149.39    
  29  0.243978      -1.41068      -31.3632       31.3632       2111.53       2142.89    
  30  0.581243     -0.542587      -12.0632       12.0632       2086.37       2098.43    
  31  0.897127E-01  -2.41114      -53.6063       53.6063       2171.15       2224.75    
  32  0.738124     -0.303644      -6.75083       6.75083       2182.99       2189.74    
  33  0.462727     -0.770619      -17.1330       17.1330       2133.72       2150.85    
  34  0.984641E-01  -2.31806      -51.5369       51.5369       2146.80       2198.33    
  35  0.641923     -0.443287      -9.85549       9.85549       2188.52       2198.38    
  36  0.334628      -1.09474      -24.3390       24.3390       2140.51       2164.85    
  37  0.482851     -0.728048      -16.1865       16.1865       2180.36       2196.55    
  38  0.826279     -0.190822      -4.24250       4.24250       2159.84       2164.08    
  39  0.966417     -0.341596E-01 -0.759462      0.759462       2207.60       2208.35    
  40  0.236833      -1.44040      -32.0240       32.0240       2188.26       2220.29    
  41  0.274744      -1.29192      -28.7228       28.7228       2180.44       2209.17    
  42  0.310307      -1.17019      -26.0166       26.0166       2099.93       2125.94    
  43  0.697298     -0.360543      -8.01585       8.01585       2218.84       2226.86    
  44  0.239072      -1.43099      -31.8148       31.8148       2138.52       2170.33    
  45  0.809729     -0.211055      -4.69234       4.69234       2212.82       2217.51    
  46  0.651880     -0.427895      -9.51327       9.51327       2236.38       2245.89    
  47  0.515020     -0.663550      -14.7525       14.7525       2221.33       2236.08    
  48  0.359059      -1.02427      -22.7723       22.7723       2169.17       2191.95    
  49  0.516010E-02  -5.26680      -117.095       117.095       2207.10       2324.19    
  50  0.321807      -1.13380      -25.2075       25.2075       2229.88       2255.09    
  51  0.787972     -0.238293      -5.29791       5.29791       2271.80       2277.10    
loop,thermsimp(1:2)       67   7.57647       15.7505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308       2132.61          0.85          1.11         21.91          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2132.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       67
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       68
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      307     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -11.5408       11.5408       2064.23       2075.77    
   2  0.204294      -1.58819      -35.3099       35.3099       2072.67       2107.98    
   3  0.902141     -0.102985      -2.28963       2.28963       2086.37       2088.66    
   4  0.317306      -1.14789      -25.5207       25.5207       2082.78       2108.30    
   5  0.914914E-01  -2.39151      -53.1698       53.1698       2104.41       2157.58    
   6  0.362439      -1.01490      -22.5640       22.5640       2090.77       2113.33    
   7  0.284546      -1.25686      -27.9434       27.9434       2115.10       2143.04    
   8  0.752727     -0.284053      -6.31527       6.31527       2102.74       2109.06    
   9  0.972148     -0.282475E-01 -0.628018      0.628018       2112.12       2112.75    
  10  0.312417      -1.16342      -25.8659       25.8659       2111.02       2136.88    
  11  0.772549E-01  -2.56064      -56.9301       56.9301       2099.93       2156.86    
  12  0.190763      -1.65672      -36.8335       36.8335       2087.11       2123.94    
  13  0.829036     -0.187492      -4.16846       4.16846       2110.65       2114.81    
  14  0.309766      -1.17194      -26.0554       26.0554       2113.64       2139.69    
  15  0.691616     -0.368724      -8.19775       8.19775       2095.32       2103.52    
  16  0.177510      -1.72873      -38.4344       38.4344       2129.39       2167.82    
  17  0.848561     -0.164214      -3.65092       3.65092       2126.23       2129.88    
  18  0.464945     -0.765836      -17.0266       17.0266       2135.56       2152.58    
  19  0.626682     -0.467316      -10.3897       10.3897       2113.59       2123.98    
  20  0.451266     -0.795699      -17.6906       17.6906       2118.68       2136.37    
  21  0.161179E-01  -4.12783      -91.7728       91.7728       2111.53       2203.30    
  22  0.848853     -0.163869      -3.64327       3.64327       2130.73       2134.37    
  23  0.565946     -0.569256      -12.6561       12.6561       2117.27       2129.93    
  24  0.798567     -0.224937      -5.00096       5.00096       2133.72       2138.72    
  25  0.282371      -1.26453      -28.1140       28.1140       2145.14       2173.25    
  26  0.887219     -0.119663      -2.66044       2.66044       2143.42       2146.08    
  27  0.311981      -1.16481      -25.8970       25.8970       2126.88       2152.78    
  28  0.454937     -0.787596      -17.5104       17.5104       2127.07       2144.58    
  29  0.200774E-01  -3.90816      -86.8891       86.8891       2159.84       2246.73    
  30  0.549692     -0.598397      -13.3040       13.3040       2140.51       2153.82    
  31  0.928164     -0.745470E-01  -1.65738       1.65738       2144.24       2145.90    
  32  0.876026     -0.132360      -2.94272       2.94272       2138.52       2141.46    
  33  0.360538      -1.02016      -22.6809       22.6809       2126.26       2148.94    
  34  0.810484     -0.210124      -4.67163       4.67163       2125.48       2130.15    
  35  0.350387      -1.04872      -23.3158       23.3158       2182.99       2206.30    
  36  0.609257     -0.495514      -11.0166       11.0166       2169.17       2180.19    
  37  0.847473     -0.165497      -3.67944       3.67944       2180.36       2184.04    
  38  0.459433     -0.777763      -17.2918       17.2918       2146.80       2164.09    
  39  0.213778      -1.54282      -34.3011       34.3011       2188.52       2222.82    
  40  0.983077     -0.170677E-01 -0.379461      0.379461       2125.29       2125.67    
  41  0.719533     -0.329153      -7.31797       7.31797       2207.60       2214.91    
  42  0.317292      -1.14793      -25.5217       25.5217       2180.44       2205.97    
  43  0.300670      -1.20174      -26.7180       26.7180       2212.82       2239.53    
  44  0.486388     -0.720748      -16.0242       16.0242       2188.26       2204.29    
  45  0.309580      -1.17254      -26.0687       26.0687       2171.15       2197.21    
  46  0.111802      -2.19103      -48.7126       48.7126       2218.84       2267.56    
  47  0.913484     -0.904897E-01  -2.01183       2.01183       2221.33       2223.34    
  48  0.438377     -0.824676      -18.3348       18.3348       2236.38       2254.71    
  49  0.773114     -0.257329      -5.72114       5.72114       2229.88       2235.61    
  50  0.248259      -1.39328      -30.9765       30.9765       2271.80       2302.78    
  51  0.502855     -0.687454      -15.2840       15.2840       2132.61       2147.89    
loop,thermsimp(1:2)       68   11.5408       35.3099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309       2239.36          0.85          1.12         21.89          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2239.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       68
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       69
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      308     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -18.2211       18.2211       2064.23       2082.45    
   2  0.752309     -0.284608      -6.32760       6.32760       2086.37       2092.70    
   3  0.209108      -1.56490      -34.7921       34.7921       2095.32       2130.12    
   4  0.842922     -0.170881      -3.79916       3.79916       2072.67       2076.47    
   5  0.161148      -1.82543      -40.5843       40.5843       2082.78       2123.36    
   6  0.601748     -0.507917      -11.2924       11.2924       2102.74       2114.03    
   7  0.890912     -0.115510      -2.56810       2.56810       2112.12       2114.69    
   8  0.631939     -0.458963      -10.2040       10.2040       2090.77       2100.97    
   9  0.144759E-01  -4.23527      -94.1616       94.1616       2110.65       2204.81    
  10  0.653698     -0.425110      -9.45136       9.45136       2087.11       2096.56    
  11  0.401463     -0.912639      -20.2905       20.2905       2113.59       2133.88    
  12  0.906126     -0.985765E-01  -2.19163       2.19163       2125.29       2127.48    
  13  0.480601E-01  -3.03530      -67.4831       67.4831       2126.23       2193.71    
  14  0.264260      -1.33082      -29.5878       29.5878       2117.27       2146.86    
  15  0.586033     -0.534379      -11.8807       11.8807       2125.48       2137.36    
  16  0.323072      -1.12988      -25.1203       25.1203       2130.73       2155.85    
  17  0.785147     -0.241884      -5.37774       5.37774       2118.68       2124.06    
  18  0.139165      -1.97210      -43.8451       43.8451       2111.02       2154.86    
  19  0.105818E-01  -4.54862      -101.128       101.128       2133.72       2234.85    
  20  0.896943     -0.108763      -2.41811       2.41811       2113.64       2116.06    
  21  0.854239     -0.157544      -3.50263       3.50263       2138.52       2142.02    
  22  0.566003     -0.569157      -12.6539       12.6539       2115.10       2127.75    
  23  0.566387     -0.568477      -12.6388       12.6388       2127.07       2139.71    
  24  0.414905     -0.879707      -19.5583       19.5583       2144.24       2163.80    
  25  0.173772      -1.75001      -38.9076       38.9076       2143.42       2182.33    
  26  0.884308E-01  -2.42554      -53.9263       53.9263       2132.61       2186.54    
  27  0.417457     -0.873573      -19.4219       19.4219       2126.26       2145.68    
  28  0.334615      -1.09477      -24.3398       24.3398       2135.56       2159.90    
  29  0.706024E-01  -2.65069      -58.9321       58.9321       2126.88       2185.82    
  30  0.996422     -0.358418E-02 -0.796860E-01  0.796860E-01   2140.51       2140.59    
  31  0.894500     -0.111491      -2.47874       2.47874       2099.93       2102.40    
  32  0.827855     -0.188917      -4.20014       4.20014       2104.41       2108.61    
  33  0.434964     -0.832492      -18.5086       18.5086       2146.80       2165.31    
  34  0.121450      -2.10825      -46.8722       46.8722       2129.39       2176.26    
  35  0.498977     -0.695195      -15.4561       15.4561       2145.14       2160.59    
  36  0.117961      -2.13740      -47.5203       47.5203       2169.17       2216.69    
  37  0.309211      -1.17373      -26.0952       26.0952       2180.36       2206.46    
  38  0.786265     -0.240461      -5.34612       5.34612       2171.15       2176.49    
  39  0.614330     -0.487222      -10.8323       10.8323       2111.53       2122.36    
  40  0.820857     -0.197407      -4.38889       4.38889       2188.26       2192.65    
  41  0.670448     -0.399809      -8.88884       8.88884       2180.44       2189.33    
  42  0.742403     -0.297863      -6.62231       6.62231       2182.99       2189.61    
  43  0.760912E-01  -2.57582      -57.2676       57.2676       2207.60       2264.86    
  44  0.709677     -0.342945      -7.62460       7.62460       2188.52       2196.15    
  45  0.943449     -0.582133E-01  -1.29424       1.29424       2221.33       2222.63    
  46  0.176370      -1.73517      -38.5777       38.5777       2229.88       2268.46    
  47  0.866890     -0.142843      -3.17580       3.17580       2212.82       2215.99    
  48  0.711056     -0.341004      -7.58146       7.58146       2159.84       2167.42    
  49  0.929667E-01  -2.37551      -52.8142       52.8142       2236.38       2289.19    
  50  0.960091     -0.407270E-01 -0.905472      0.905472       2218.84       2219.75    
  51  0.948380     -0.530000E-01  -1.17833       1.17833       2239.36       2240.54    
loop,thermsimp(1:2)       69   18.2211       6.32760    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       2221.14          0.86          1.12         21.91          0.07          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2221.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       69
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       70
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      309     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.259637      0.259637       2072.67       2072.93    
   2  0.482301     -0.729186      -16.2118       16.2118       2064.23       2080.44    
   3  0.546964     -0.603372      -13.4146       13.4146       2086.37       2099.78    
   4  0.543918     -0.608957      -13.5388       13.5388       2087.11       2100.65    
   5  0.427641     -0.849472      -18.8861       18.8861       2090.77       2109.66    
   6  0.498345     -0.696462      -15.4843       15.4843       2099.93       2115.41    
   7  0.989308     -0.107494E-01 -0.238988      0.238988       2104.41       2104.64    
   8  0.658822     -0.417302      -9.27776       9.27776       2102.74       2112.02    
   9  0.917808     -0.857673E-01  -1.90684       1.90684       2112.12       2114.03    
  10  0.914490E-04  -9.29973      -206.758       206.758       2113.64       2320.40    
  11  0.989901     -0.101499E-01 -0.225660      0.225660       2111.53       2111.75    
  12  0.558183     -0.583069      -12.9632       12.9632       2082.78       2095.74    
  13  0.706994     -0.346733      -7.70883       7.70883       2118.68       2126.39    
  14  0.599152     -0.512240      -11.3885       11.3885       2125.29       2136.68    
  15  0.845909     -0.167343      -3.72049       3.72049       2115.10       2118.82    
  16  0.655384     -0.422534      -9.39408       9.39408       2095.32       2104.72    
  17  0.412232E-01  -3.18875      -70.8947       70.8947       2113.59       2184.49    
  18  0.495401     -0.702387      -15.6160       15.6160       2125.48       2141.09    
  19  0.378829     -0.970671      -21.5807       21.5807       2127.07       2148.65    
  20  0.653665E-02  -5.03033      -111.838       111.838       2140.51       2252.35    
  21  0.782670     -0.245045      -5.44801       5.44801       2138.52       2143.96    
  22  0.945547     -0.559921E-01  -1.24486       1.24486       2126.26       2127.50    
  23  0.969857     -0.306063E-01 -0.680463      0.680463       2117.27       2117.95    
  24  0.822249     -0.195712      -4.35121       4.35121       2111.02       2115.37    
  25  0.265012E-01  -3.63056      -80.7174       80.7174       2130.73       2211.45    
  26  0.360432E-01  -3.32304      -73.8802       73.8802       2135.56       2209.44    
  27  0.796418     -0.227631      -5.06085       5.06085       2145.14       2150.20    
  28  0.292313E-01  -3.53252      -78.5375       78.5375       2144.24       2222.78    
  29  0.227321      -1.48139      -32.9354       32.9354       2146.80       2179.73    
  30  0.812637     -0.207471      -4.61264       4.61264       2159.84       2164.45    
  31  0.930544     -0.719857E-01  -1.60044       1.60044       2129.39       2130.99    
  32  0.674873     -0.393231      -8.74260       8.74260       2171.15       2179.89    
  33  0.264030      -1.33169      -29.6071       29.6071       2143.42       2173.03    
  34  0.807464     -0.213856      -4.75461       4.75461       2126.88       2131.64    
  35  0.653731     -0.425060      -9.45025       9.45025       2132.61       2142.06    
  36  0.858536     -0.152527      -3.39109       3.39109       2180.44       2183.84    
  37  0.538887     -0.618250      -13.7454       13.7454       2182.99       2196.73    
  38  0.468049     -0.759182      -16.8787       16.8787       2188.26       2205.14    
  39  0.401324     -0.912987      -20.2982       20.2982       2126.23       2146.53    
  40  0.363356      -1.01237      -22.5078       22.5078       2188.52       2211.03    
  41  0.924933     -0.780342E-01  -1.73491       1.73491       2110.65       2112.38    
  42  0.797289     -0.226538      -5.03656       5.03656       2180.36       2185.40    
  43  0.200097      -1.60895      -35.7714       35.7714       2212.82       2248.59    
  44  0.686219     -0.376559      -8.37193       8.37193       2169.17       2177.55    
  45  0.895629     -0.110230      -2.45070       2.45070       2218.84       2221.30    
  46  0.331830      -1.10313      -24.5256       24.5256       2221.33       2245.86    
  47  0.967018     -0.335379E-01 -0.745638      0.745638       2133.72       2134.47    
  48  0.268282      -1.31572      -29.2520       29.2520       2239.36       2268.62    
  49  0.472399     -0.749931      -16.6730       16.6730       2207.60       2224.27    
  50  0.399276E-01  -3.22069      -71.6047       71.6047       2229.88       2301.49    
  51  0.956493     -0.444820E-01 -0.988957      0.988957       2221.14       2222.13    
loop,thermsimp(1:2)       70  0.259637       16.2118    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       2143.61          0.85          1.12         21.89          0.08          0.04         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2143.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       70
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       71
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      310     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -3.34770       3.34770       2072.67       2076.02    
   2  0.573661     -0.555717      -12.3551       12.3551       2064.23       2076.58    
   3  0.499290     -0.694569      -15.4422       15.4422       2082.78       2098.22    
   4  0.677563     -0.389253      -8.65416       8.65416       2086.37       2095.02    
   5  0.476566     -0.741149      -16.4778       16.4778       2087.11       2103.59    
   6  0.153036      -1.87708      -41.7326       41.7326       2104.41       2146.14    
   7  0.626270     -0.467973      -10.4043       10.4043       2095.32       2105.73    
   8  0.794744     -0.229735      -5.10764       5.10764       2090.77       2095.88    
   9  0.111868E-01  -4.49302      -99.8921       99.8921       2111.53       2211.42    
  10  0.643880     -0.440243      -9.78781       9.78781       2102.74       2112.53    
  11  0.634705     -0.454595      -10.1069       10.1069       2110.65       2120.75    
  12  0.653568     -0.425308      -9.45577       9.45577       2112.12       2121.58    
  13  0.888231     -0.118524      -2.63511       2.63511       2111.02       2113.65    
  14  0.681775E-01  -2.68564      -59.7091       59.7091       2099.93       2159.63    
  15  0.241248      -1.42193      -31.6134       31.6134       2117.27       2148.88    
  16  0.208857      -1.56610      -34.8188       34.8188       2115.10       2149.91    
  17  0.652439     -0.427038      -9.49421       9.49421       2118.68       2128.18    
  18  0.489833     -0.713691      -15.8673       15.8673       2126.26       2142.12    
  19  0.719225     -0.329581      -7.32748       7.32748       2129.39       2136.71    
  20  0.924762     -0.782189E-01  -1.73902       1.73902       2126.88       2128.62    
  21  0.845502     -0.167825      -3.73121       3.73121       2133.72       2137.45    
  22  0.665989     -0.406482      -9.03721       9.03721       2125.29       2134.32    
  23  0.378562     -0.971376      -21.5963       21.5963       2125.48       2147.07    
  24  0.396889     -0.924098      -20.5452       20.5452       2132.61       2153.15    
  25  0.158089      -1.84460      -41.0105       41.0105       2138.52       2179.53    
  26  0.590577     -0.526655      -11.7090       11.7090       2126.23       2137.94    
  27  0.949513     -0.518061E-01  -1.15179       1.15179       2127.07       2128.22    
  28  0.518198     -0.657398      -14.6157       14.6157       2145.14       2159.75    
  29  0.551080     -0.595875      -13.2479       13.2479       2159.84       2173.09    
  30  0.986285     -0.138097E-01 -0.307028      0.307028       2143.42       2143.73    
  31  0.920142     -0.832276E-01  -1.85038       1.85038       2169.17       2171.02    
  32  0.133201      -2.01590      -44.8190       44.8190       2146.80       2191.62    
  33  0.584507     -0.536987      -11.9387       11.9387       2171.15       2183.08    
  34  0.790583     -0.234984      -5.22434       5.22434       2180.44       2185.67    
  35  0.702664     -0.352876      -7.84540       7.84540       2113.59       2121.44    
  36  0.148885      -1.90458      -42.3440       42.3440       2180.36       2222.71    
  37  0.290436      -1.23637      -27.4879       27.4879       2182.99       2210.47    
  38  0.638249     -0.449027      -9.98310       9.98310       2188.26       2198.24    
  39  0.381605     -0.963369      -21.4183       21.4183       2135.56       2156.98    
  40  0.823069     -0.194716      -4.32907       4.32907       2188.52       2192.85    
  41  0.492318     -0.708630      -15.7548       15.7548       2130.73       2146.48    
  42  0.773199     -0.257218      -5.71867       5.71867       2218.84       2224.56    
  43  0.289475E-01  -3.54227      -78.7544       78.7544       2221.14       2299.90    
  44  0.355683      -1.03371      -22.9823       22.9823       2144.24       2167.22    
  45  0.160396      -1.83011      -40.6883       40.6883       2207.60       2248.28    
  46  0.972861     -0.275140E-01 -0.611712      0.611712       2221.33       2221.94    
  47  0.781938E-02  -4.85115      -107.854       107.854       2212.82       2320.67    
  48  0.225299      -1.49033      -33.1341       33.1341       2140.51       2173.65    
  49  0.631686     -0.459363      -10.2129       10.2129       2239.36       2249.58    
  50  0.212316      -1.54968      -34.4536       34.4536       2229.88       2264.34    
  51  0.673664     -0.395024      -8.78247       8.78247       2143.61       2152.39    
loop,thermsimp(1:2)       71   3.34770       12.3551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       2157.38          0.85          1.12         22.00          0.05          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2157.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       71
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       72
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      311     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -18.2138       18.2138       2072.67       2090.89    
   2  0.202294      -1.59803      -35.5286       35.5286       2064.23       2099.76    
   3  0.873786     -0.134920      -2.99965       2.99965       2086.37       2089.37    
   4  0.262141      -1.33887      -29.7668       29.7668       2090.77       2120.54    
   5  0.342005      -1.07293      -23.8541       23.8541       2082.78       2106.63    
   6  0.421217     -0.864607      -19.2226       19.2226       2087.11       2106.33    
   7  0.618489     -0.480477      -10.6823       10.6823       2095.32       2106.01    
   8  0.412552     -0.885393      -19.6847       19.6847       2102.74       2122.43    
   9  0.951192     -0.500396E-01  -1.11252       1.11252       2111.02       2112.13    
  10  0.298546      -1.20883      -26.8757       26.8757       2110.65       2137.52    
  11  0.805120     -0.216763      -4.81924       4.81924       2113.59       2118.41    
  12  0.208146      -1.56951      -34.8946       34.8946       2112.12       2147.02    
  13  0.924021     -0.790209E-01  -1.75685       1.75685       2118.68       2120.44    
  14  0.447624     -0.803802      -17.8707       17.8707       2127.07       2144.94    
  15  0.667709     -0.403903      -8.97987       8.97987       2126.88       2135.86    
  16  0.767295E-01  -2.56747      -57.0819       57.0819       2125.29       2182.37    
  17  0.301582      -1.19871      -26.6507       26.6507       2129.39       2156.04    
  18  0.788580     -0.237522      -5.28076       5.28076       2133.72       2139.00    
  19  0.887020     -0.119888      -2.66543       2.66543       2126.23       2128.90    
  20  0.233035E-01  -3.75915      -83.5762       83.5762       2126.26       2209.83    
  21  0.899320     -0.106116      -2.35926       2.35926       2143.42       2145.78    
  22  0.144480      -1.93461      -43.0117       43.0117       2104.41       2147.42    
  23  0.274629      -1.29233      -28.7321       28.7321       2130.73       2159.46    
  24  0.831597     -0.184407      -4.09987       4.09987       2125.48       2129.58    
  25  0.388827     -0.944620      -21.0015       21.0015       2117.27       2138.27    
  26  0.257578      -1.35643      -30.1572       30.1572       2115.10       2145.25    
  27  0.427791     -0.849120      -18.8783       18.8783       2143.61       2162.49    
  28  0.837664E-01  -2.47972      -55.1310       55.1310       2132.61       2187.74    
  29  0.782727     -0.244972      -5.44639       5.44639       2135.56       2141.00    
  30  0.259676E-01  -3.65091      -81.1696       81.1696       2099.93       2181.10    
  31  0.166181      -1.79468      -39.9006       39.9006       2145.14       2185.04    
  32  0.360749      -1.01957      -22.6679       22.6679       2144.24       2166.91    
  33  0.369697     -0.995071      -22.1231       22.1231       2169.17       2191.30    
  34  0.959392     -0.414553E-01 -0.921664      0.921664       2159.84       2160.76    
  35  0.449170     -0.800353      -17.7940       17.7940       2140.51       2158.31    
  36  0.655790E-02  -5.02708      -111.766       111.766       2138.52       2250.28    
  37  0.133569      -2.01313      -44.7575       44.7575       2171.15       2215.90    
  38  0.282061      -1.26563      -28.1385       28.1385       2180.44       2208.58    
  39  0.431813     -0.839762      -18.6702       18.6702       2146.80       2165.47    
  40  0.713174     -0.338031      -7.51534       7.51534       2188.52       2196.04    
  41  0.511305     -0.670790      -14.9135       14.9135       2188.26       2203.17    
  42  0.264485      -1.32997      -29.5689       29.5689       2182.99       2212.55    
  43  0.779298     -0.249362      -5.54400       5.54400       2111.53       2117.07    
  44  0.709352E-02  -4.94857      -110.020       110.020       2221.33       2331.35    
  45  0.770402     -0.260843      -5.79924       5.79924       2180.36       2186.16    
  46  0.694393     -0.364718      -8.10867       8.10867       2218.84       2226.95    
  47  0.589268E-01  -2.83146      -62.9511       62.9511       2207.60       2270.55    
  48  0.817644     -0.201328      -4.47607       4.47607       2239.36       2243.84    
  49  0.990168     -0.988073E-02 -0.219676      0.219676       2229.88       2230.10    
  50  0.733536E-01  -2.61246      -58.0822       58.0822       2221.14       2279.23    
  51  0.781472     -0.246575      -5.48205       5.48205       2157.38       2162.86    
loop,thermsimp(1:2)       72   18.2138       35.5286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313       2254.66          0.85          1.12         21.88          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2254.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       72
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       73
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      312     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -4.74283       4.74283       2086.37       2091.11    
   2  0.554495     -0.589697      -13.1106       13.1106       2072.67       2085.78    
   3  0.997056     -0.294851E-02 -0.655534E-01  0.655534E-01   2064.23       2064.29    
   4  0.901183E-01  -2.40663      -53.5060       53.5060       2095.32       2148.83    
   5  0.296736      -1.21491      -27.0109       27.0109       2087.11       2114.12    
   6  0.907820     -0.967094E-01  -2.15011       2.15011       2082.78       2084.93    
   7  0.325542      -1.12226      -24.9510       24.9510       2111.02       2135.97    
   8  0.947537     -0.538896E-01  -1.19811       1.19811       2111.53       2112.72    
   9  0.378276     -0.972130      -21.6131       21.6131       2113.59       2135.21    
  10  0.985613     -0.144920E-01 -0.322196      0.322196       2118.68       2119.00    
  11  0.167434      -1.78717      -39.7336       39.7336       2090.77       2130.50    
  12  0.693849E-01  -2.66809      -59.3188       59.3188       2102.74       2162.06    
  13  0.434983     -0.832447      -18.5076       18.5076       2126.23       2144.74    
  14  0.998656     -0.134491E-02 -0.299010E-01  0.299010E-01   2125.48       2125.51    
  15  0.650302     -0.430318      -9.56714       9.56714       2126.88       2136.45    
  16  0.152610      -1.87987      -41.7947       41.7947       2110.65       2152.44    
  17  0.273947      -1.29482      -28.7874       28.7874       2117.27       2146.06    
  18  0.990471     -0.957469E-02 -0.212871      0.212871       2133.72       2133.93    
  19  0.684493     -0.379077      -8.42791       8.42791       2135.56       2143.99    
  20  0.864467E-01  -2.44823      -54.4308       54.4308       2127.07       2181.50    
  21  0.546085     -0.604980      -13.4504       13.4504       2115.10       2128.55    
  22  0.246642      -1.39982      -31.1217       31.1217       2143.42       2174.54    
  23  0.484505     -0.724627      -16.1104       16.1104       2112.12       2128.23    
  24  0.567359     -0.566763      -12.6007       12.6007       2104.41       2117.01    
  25  0.564371     -0.572043      -12.7181       12.7181       2129.39       2142.10    
  26  0.825604     -0.191640      -4.26069       4.26069       2140.51       2144.77    
  27  0.302493      -1.19570      -26.5837       26.5837       2130.73       2157.31    
  28  0.630396     -0.461407      -10.2583       10.2583       2159.84       2170.10    
  29  0.886734     -0.120210      -2.67261       2.67261       2143.61       2146.28    
  30  0.389345     -0.943288      -20.9719       20.9719       2157.38       2178.35    
  31  0.181391      -1.70710      -37.9535       37.9535       2146.80       2184.75    
  32  0.933221     -0.691132E-01  -1.53658       1.53658       2144.24       2145.78    
  33  0.169237E-01  -4.07904      -90.6883       90.6883       2099.93       2190.61    
  34  0.757788     -0.277351      -6.16628       6.16628       2125.29       2131.45    
  35  0.300993E-01  -3.50325      -77.8869       77.8869       2145.14       2223.02    
  36  0.395621     -0.927300      -20.6164       20.6164       2180.36       2200.98    
  37  0.459505     -0.777605      -17.2883       17.2883       2132.61       2149.90    
  38  0.733176     -0.310370      -6.90037       6.90037       2169.17       2176.07    
  39  0.575459     -0.552587      -12.2855       12.2855       2188.52       2200.81    
  40  0.560889     -0.578233      -12.8557       12.8557       2188.26       2201.12    
  41  0.428351     -0.847812      -18.8492       18.8492       2180.44       2199.29    
  42  0.553832     -0.590895      -13.1372       13.1372       2126.26       2139.39    
  43  0.581118     -0.542801      -12.0679       12.0679       2182.99       2195.05    
  44  0.319195E-01  -3.44454      -76.5815       76.5815       2171.15       2247.73    
  45  0.224512E-01  -3.79641      -84.4046       84.4046       2218.84       2303.25    
  46  0.113637E-01  -4.47733      -99.5434       99.5434       2229.88       2329.43    
  47  0.889134     -0.117508      -2.61252       2.61252       2239.36       2241.98    
  48  0.422937     -0.860531      -19.1320       19.1320       2138.52       2157.65    
  49  0.479928     -0.734119      -16.3215       16.3215       2207.60       2223.92    
  50  0.813133     -0.206861      -4.59908       4.59908       2221.14       2225.74    
  51  0.544683     -0.607551      -13.5075       13.5075       2254.66       2268.17    
loop,thermsimp(1:2)       73   4.74283       13.1106    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314       2166.29          0.85          1.12         21.89          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2166.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       73
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       74
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      313     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -2.59877       2.59877       2064.23       2066.83    
   2  0.480213     -0.733525      -16.3083       16.3083       2082.78       2099.08    
   3  0.226156      -1.48653      -33.0497       33.0497       2072.67       2105.72    
   4  0.633402     -0.456651      -10.1526       10.1526       2086.37       2096.52    
   5  0.925311     -0.776258E-01  -1.72583       1.72583       2111.53       2113.25    
   6  0.498405     -0.696343      -15.4816       15.4816       2087.11       2102.59    
   7  0.133283      -2.01528      -44.8052       44.8052       2104.41       2149.21    
   8  0.657074E-01  -2.72254      -60.5296       60.5296       2118.68       2179.21    
   9  0.726758     -0.319162      -7.09584       7.09584       2125.48       2132.57    
  10  0.398365     -0.920388      -20.4627       20.4627       2112.12       2132.58    
  11  0.321047E-01  -3.43875      -76.4528       76.4528       2115.10       2191.55    
  12  0.276307      -1.28624      -28.5967       28.5967       2090.77       2119.37    
  13  0.483740     -0.726208      -16.1456       16.1456       2125.29       2141.43    
  14  0.224589      -1.49348      -33.2042       33.2042       2133.72       2166.93    
  15  0.832041     -0.183874      -4.08801       4.08801       2113.59       2117.68    
  16  0.939301     -0.626192E-01  -1.39220       1.39220       2111.02       2112.41    
  17  0.624052     -0.471522      -10.4832       10.4832       2126.88       2137.37    
  18  0.172753      -1.75589      -39.0383       39.0383       2126.26       2165.29    
  19  0.468323     -0.758597      -16.8657       16.8657       2129.39       2146.25    
  20  0.963461     -0.372229E-01 -0.827567      0.827567       2135.56       2136.39    
  21  0.812092     -0.208142      -4.62757       4.62757       2126.23       2130.86    
  22  0.376764     -0.976137      -21.7022       21.7022       2140.51       2162.22    
  23  0.791872E-01  -2.53594      -56.3809       56.3809       2144.24       2200.62    
  24  0.237003      -1.43968      -32.0081       32.0081       2117.27       2149.28    
  25  0.320094      -1.13914      -25.3262       25.3262       2143.61       2168.94    
  26  0.821410E-01  -2.49932      -55.5667       55.5667       2095.32       2150.89    
  27  0.789147     -0.236802      -5.26476       5.26476       2132.61       2137.87    
  28  0.734353E-01  -2.61135      -58.0575       58.0575       2110.65       2168.70    
  29  0.226401      -1.48545      -33.0256       33.0256       2130.73       2163.76    
  30  0.380831     -0.965399      -21.4635       21.4635       2138.52       2159.98    
  31  0.264857      -1.32857      -29.5376       29.5376       2102.74       2132.28    
  32  0.246167      -1.40174      -31.1646       31.1646       2159.84       2191.00    
  33  0.142133      -1.95099      -43.3759       43.3759       2143.42       2186.80    
  34  0.123438E-01  -4.39460      -97.7040       97.7040       2169.17       2266.88    
  35  0.853289     -0.158657      -3.52737       3.52737       2157.38       2160.90    
  36  0.418603     -0.870831      -19.3610       19.3610       2127.07       2146.43    
  37  0.235242      -1.44714      -32.1739       32.1739       2146.80       2178.97    
  38  0.841712     -0.172317      -3.83108       3.83108       2099.93       2103.76    
  39  0.113373      -2.17707      -48.4022       48.4022       2182.99       2231.39    
  40  0.617966     -0.481322      -10.7011       10.7011       2180.44       2191.15    
  41  0.149268      -1.90202      -42.2870       42.2870       2188.52       2230.81    
  42  0.811010     -0.209475      -4.65721       4.65721       2180.36       2185.02    
  43  0.571477     -0.559531      -12.4399       12.4399       2188.26       2200.70    
  44  0.105494      -2.24911      -50.0038       50.0038       2145.14       2195.14    
  45  0.709548     -0.343127      -7.62864       7.62864       2207.60       2215.22    
  46  0.535895     -0.623816      -13.8691       13.8691       2221.14       2235.01    
  47  0.137736      -1.98242      -44.0746       44.0746       2239.36       2283.44    
  48  0.666779     -0.405297      -9.01086       9.01086       2171.15       2180.16    
  49  0.326487      -1.11936      -24.8865       24.8865       2254.66       2279.55    
  50  0.461090     -0.774162      -17.2117       17.2117       2218.84       2236.06    
  51  0.246088      -1.40207      -31.1718       31.1718       2166.29       2197.47    
loop,thermsimp(1:2)       74   2.59877       16.3083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315       2282.60          0.86          1.11         21.92          0.06          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2282.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       74
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       75
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      314     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -9.72157       9.72157       2064.23       2073.95    
   2  0.108032      -2.22533      -49.4751       49.4751       2086.37       2135.84    
   3  0.908790     -0.956413E-01  -2.12637       2.12637       2082.78       2084.90    
   4  0.987883     -0.121914E-01 -0.271047      0.271047       2087.11       2087.38    
   5  0.318380      -1.14451      -25.4456       25.4456       2099.93       2125.37    
   6  0.924426     -0.785824E-01  -1.74710       1.74710       2072.67       2074.42    
   7  0.965220     -0.353996E-01 -0.787029      0.787029       2111.02       2111.80    
   8  0.852248     -0.159878      -3.55453       3.55453       2111.53       2115.08    
   9  0.329186      -1.11113      -24.7035       24.7035       2113.59       2138.30    
  10  0.282479      -1.26415      -28.1056       28.1056       2090.77       2118.88    
  11  0.818943     -0.199740      -4.44078       4.44078       2126.23       2130.67    
  12  0.842569     -0.171300      -3.80846       3.80846       2102.74       2106.55    
  13  0.370966     -0.991644      -22.0470       22.0470       2125.48       2147.52    
  14  0.362233      -1.01547      -22.5766       22.5766       2112.12       2134.70    
  15  0.356944E-01  -3.33276      -74.0964       74.0964       2135.56       2209.65    
  16  0.149119      -1.90301      -42.3091       42.3091       2126.88       2169.19    
  17  0.127170      -2.06223      -45.8491       45.8491       2132.61       2178.46    
  18  0.589256     -0.528895      -11.7588       11.7588       2125.29       2137.05    
  19  0.702139     -0.353624      -7.86203       7.86203       2129.39       2137.25    
  20  0.713819     -0.337127      -7.49524       7.49524       2127.07       2134.57    
  21  0.121783      -2.10552      -46.8114       46.8114       2104.41       2151.22    
  22  0.992321     -0.770837E-02 -0.171378      0.171378       2117.27       2117.44    
  23  0.622746     -0.473616      -10.5298       10.5298       2095.32       2105.85    
  24  0.388486     -0.945499      -21.0210       21.0210       2138.52       2159.54    
  25  0.365204      -1.00730      -22.3950       22.3950       2157.38       2179.77    
  26  0.416566     -0.875710      -19.4694       19.4694       2140.51       2159.98    
  27  0.250735      -1.38336      -30.7558       30.7558       2130.73       2161.49    
  28  0.243824      -1.41131      -31.3773       31.3773       2126.26       2157.63    
  29  0.177195      -1.73050      -38.4738       38.4738       2133.72       2172.20    
  30  0.723685     -0.323399      -7.19004       7.19004       2110.65       2117.84    
  31  0.157256      -1.84988      -41.1279       41.1279       2143.61       2184.74    
  32  0.941988     -0.597623E-01  -1.32868       1.32868       2146.80       2148.13    
  33  0.110785      -2.20016      -48.9157       48.9157       2118.68       2167.60    
  34  0.200758      -1.60566      -35.6981       35.6981       2171.15       2206.84    
  35  0.873323     -0.135450      -3.01142       3.01142       2180.36       2183.37    
  36  0.842283     -0.171639      -3.81600       3.81600       2143.42       2147.24    
  37  0.326633      -1.11892      -24.8766       24.8766       2159.84       2184.72    
  38  0.648559     -0.433003      -9.62684       9.62684       2180.44       2190.07    
  39  0.460689E-01  -3.07762      -68.4238       68.4238       2115.10       2183.52    
  40  0.676614     -0.390654      -8.68530       8.68530       2145.14       2153.82    
  41  0.863029     -0.147307      -3.27504       3.27504       2166.29       2169.57    
  42  0.646727     -0.435831      -9.68971       9.68971       2144.24       2153.93    
  43  0.310616      -1.16920      -25.9945       25.9945       2188.26       2214.26    
  44  0.521840     -0.650394      -14.4600       14.4600       2207.60       2222.06    
  45  0.381245     -0.964312      -21.4393       21.4393       2188.52       2209.96    
  46  0.815908     -0.203453      -4.52333       4.52333       2182.99       2187.51    
  47  0.209395E-01  -3.86612      -85.9544       85.9544       2221.14       2307.10    
  48  0.800991E-01  -2.52449      -56.1263       56.1263       2218.84       2274.97    
  49  0.824204     -0.193337      -4.29841       4.29841       2169.17       2173.47    
  50  0.828636     -0.187975      -4.17919       4.17919       2254.66       2258.84    
  51  0.609810     -0.494608      -10.9965       10.9965       2282.60       2293.60    
loop,thermsimp(1:2)       75   9.72157       49.4751    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316       2193.23          0.86          1.11         22.00          0.02          0.05         24.04
Just calling func    0   0         24.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2193.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       75
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       76
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      315     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -35.5130       35.5130       2064.23       2099.74    
   2  0.337724      -1.08553      -24.1342       24.1342       2072.67       2096.81    
   3  0.870295     -0.138923      -3.08865       3.08865       2082.78       2085.87    
   4  0.837087     -0.177827      -3.95358       3.95358       2087.11       2091.06    
   5  0.512110     -0.669215      -14.8785       14.8785       2095.32       2110.20    
   6  0.998742     -0.125879E-02 -0.279864E-01  0.279864E-01   2102.74       2102.77    
   7  0.203490      -1.59214      -35.3976       35.3976       2111.02       2146.41    
   8  0.525951E-01  -2.94513      -65.4783       65.4783       2111.53       2177.00    
   9  0.474810     -0.744841      -16.5599       16.5599       2117.27       2133.83    
  10  0.440755     -0.819266      -18.2145       18.2145       2110.65       2128.86    
  11  0.225689      -1.48860      -33.0956       33.0956       2090.77       2123.87    
  12  0.902704     -0.102360      -2.27575       2.27575       2099.93       2102.20    
  13  0.663331     -0.410481      -9.12611       9.12611       2126.23       2135.36    
  14  0.511480     -0.670447      -14.9059       14.9059       2127.07       2141.98    
  15  0.625297     -0.469528      -10.4389       10.4389       2112.12       2122.56    
  16  0.812907     -0.207139      -4.60527       4.60527       2086.37       2090.97    
  17  0.979453     -0.207607E-01 -0.461566      0.461566       2125.29       2125.75    
  18  0.255329      -1.36520      -30.3522       30.3522       2129.39       2159.74    
  19  0.856654     -0.154722      -3.43988       3.43988       2113.59       2117.03    
  20  0.610394     -0.493650      -10.9752       10.9752       2143.42       2154.40    
  21  0.703614     -0.351525      -7.81536       7.81536       2125.48       2133.29    
  22  0.623403     -0.472562      -10.5063       10.5063       2146.80       2157.30    
  23  0.375727     -0.978893      -21.7635       21.7635       2104.41       2126.17    
  24  0.870528     -0.138656      -3.08269       3.08269       2145.14       2148.22    
  25  0.175838E-01  -4.04078      -89.8375       89.8375       2144.24       2234.08    
  26  0.237914      -1.43585      -31.9228       31.9228       2126.26       2158.18    
  27  0.464352     -0.767112      -17.0550       17.0550       2138.52       2155.57    
  28  0.776873     -0.252478      -5.61329       5.61329       2140.51       2146.13    
  29  0.380679     -0.965800      -21.4724       21.4724       2130.73       2152.20    
  30  0.391295     -0.938295      -20.8609       20.8609       2118.68       2139.54    
  31  0.369488     -0.995636      -22.1357       22.1357       2126.88       2149.02    
  32  0.302398      -1.19601      -26.5906       26.5906       2166.29       2192.89    
  33  0.809138     -0.211786      -4.70858       4.70858       2133.72       2138.43    
  34  0.675473     -0.392342      -8.72284       8.72284       2169.17       2177.90    
  35  0.486217     -0.721100      -16.0320       16.0320       2132.61       2148.64    
  36  0.937468     -0.645730E-01  -1.43563       1.43563       2157.38       2158.81    
  37  0.741025     -0.299721      -6.66361       6.66361       2180.36       2187.02    
  38  0.155236      -1.86281      -41.4153       41.4153       2115.10       2156.51    
  39  0.407249     -0.898331      -19.9724       19.9724       2159.84       2179.81    
  40  0.348550E-01  -3.35656      -74.6255       74.6255       2143.61       2218.24    
  41  0.178548      -1.72290      -38.3047       38.3047       2182.99       2221.29    
  42  0.127429      -2.06020      -45.8038       45.8038       2180.44       2226.25    
  43  0.919888     -0.835037E-01  -1.85652       1.85652       2171.15       2173.00    
  44  0.520080     -0.653772      -14.5351       14.5351       2135.56       2150.09    
  45  0.574092     -0.554965      -12.3384       12.3384       2188.52       2200.86    
  46  0.893427     -0.112690      -2.50542       2.50542       2188.26       2190.77    
  47  0.658991     -0.417045      -9.27206       9.27206       2207.60       2216.87    
  48  0.803744     -0.218475      -4.85729       4.85729       2254.66       2259.52    
  49  0.499877     -0.693392      -15.4160       15.4160       2218.84       2234.26    
  50  0.723109     -0.324195      -7.20774       7.20774       2282.60       2289.81    
  51  0.477842     -0.738475      -16.4183       16.4183       2193.23       2209.64    
loop,thermsimp(1:2)       76   35.5130       24.1342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       2239.15          0.86          1.12         22.20          0.07          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2239.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       76
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       77
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      316     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -11.0315       11.0315       2082.78       2093.81    
   2  0.437836     -0.825911      -18.3623       18.3623       2086.37       2104.73    
   3  0.123560      -2.09103      -46.4894       46.4894       2087.11       2133.60    
   4  0.943438     -0.582242E-01  -1.29448       1.29448       2072.67       2073.97    
   5  0.215054      -1.53686      -34.1687       34.1687       2064.23       2098.40    
   6  0.984763     -0.153546E-01 -0.341374      0.341374       2099.93       2100.27    
   7  0.154160E-01  -4.17235      -92.7627       92.7627       2102.74       2195.50    
   8  0.231957      -1.46120      -32.4865       32.4865       2095.32       2127.81    
   9  0.476349     -0.741605      -16.4879       16.4879       2113.59       2130.08    
  10  0.620436     -0.477333      -10.6124       10.6124       2112.12       2122.73    
  11  0.456145     -0.784945      -17.4515       17.4515       2090.77       2108.22    
  12  0.507296     -0.678660      -15.0885       15.0885       2125.29       2140.38    
  13  0.910123     -0.941755E-01  -2.09378       2.09378       2104.41       2106.50    
  14  0.323556      -1.12838      -25.0870       25.0870       2110.65       2135.73    
  15  0.666279     -0.406046      -9.02752       9.02752       2125.48       2134.50    
  16  0.781920     -0.246002      -5.46930       5.46930       2117.27       2122.74    
  17  0.921689     -0.815478E-01  -1.81303       1.81303       2126.23       2128.04    
  18  0.152544      -1.88030      -41.8043       41.8043       2133.72       2175.53    
  19  0.265926      -1.32454      -29.4481       29.4481       2118.68       2148.13    
  20  0.812409     -0.207751      -4.61887       4.61887       2127.07       2131.69    
  21  0.517560E-01  -2.96121      -65.8359       65.8359       2140.51       2206.35    
  22  0.559187     -0.581271      -12.9232       12.9232       2111.02       2123.94    
  23  0.708792     -0.344194      -7.65236       7.65236       2145.14       2152.79    
  24  0.287762      -1.24562      -27.6936       27.6936       2132.61       2160.30    
  25  0.896953     -0.108752      -2.41786       2.41786       2126.88       2129.30    
  26  0.305048      -1.18729      -26.3967       26.3967       2135.56       2161.95    
  27  0.752428     -0.284450      -6.32409       6.32409       2130.73       2137.05    
  28  0.248159      -1.39369      -30.9854       30.9854       2143.42       2174.41    
  29  0.997822     -0.217989E-02 -0.484650E-01  0.484650E-01   2138.52       2138.56    
  30  0.706427     -0.347535      -7.72665       7.72665       2115.10       2122.82    
  31  0.885217     -0.121923      -2.71068       2.71068       2146.80       2149.51    
  32  0.448301     -0.802290      -17.8371       17.8371       2126.26       2144.09    
  33  0.316275      -1.15114      -25.5931       25.5931       2157.38       2182.97    
  34  0.682241     -0.382372      -8.50117       8.50117       2129.39       2137.89    
  35  0.655896     -0.421752      -9.37671       9.37671       2171.15       2180.52    
  36  0.129575      -2.04350      -45.4326       45.4326       2111.53       2156.96    
  37  0.236133      -1.44336      -32.0899       32.0899       2169.17       2201.26    
  38  0.481338     -0.731186      -16.2563       16.2563       2159.84       2176.10    
  39  0.825902     -0.191279      -4.25265       4.25265       2180.36       2184.61    
  40  0.818029     -0.200857      -4.46560       4.46560       2188.26       2192.73    
  41  0.135951E-01  -4.29805      -95.5573       95.5573       2166.29       2261.85    
  42  0.535484     -0.624585      -13.8862       13.8862       2188.52       2202.41    
  43  0.451882     -0.794334      -17.6602       17.6602       2193.23       2210.89    
  44  0.591282     -0.525463      -11.6825       11.6825       2207.60       2219.28    
  45  0.220584      -1.51148      -33.6043       33.6043       2143.61       2177.22    
  46  0.217569      -1.52524      -33.9102       33.9102       2182.99       2216.90    
  47  0.541669     -0.613101      -13.6309       13.6309       2180.44       2194.08    
  48  0.927891     -0.748411E-01  -1.66392       1.66392       2144.24       2145.90    
  49  0.888902     -0.117768      -2.61830       2.61830       2218.84       2221.46    
  50  0.391529     -0.937694      -20.8475       20.8475       2254.66       2275.51    
  51  0.611187     -0.492353      -10.9463       10.9463       2239.15       2250.09    
loop,thermsimp(1:2)       77   11.0315       18.3623    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318       2240.26          0.86          1.12         21.93          0.02          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2240.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       77
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       78
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      317     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -51.6373       51.6373       2072.67       2124.31    
   2  0.700279     -0.356277      -7.92101       7.92101       2082.78       2090.70    
   3  0.681564     -0.383366      -8.52327       8.52327       2064.23       2072.75    
   4  0.838213E-01  -2.47907      -55.1165       55.1165       2099.93       2155.04    
   5  0.708687     -0.344341      -7.65565       7.65565       2086.37       2094.02    
   6  0.253966      -1.37055      -30.4711       30.4711       2104.41       2134.88    
   7  0.210796      -1.55686      -34.6133       34.6133       2090.77       2125.38    
   8  0.967741     -0.327906E-01 -0.729024      0.729024       2112.12       2112.85    
   9  0.901331     -0.103882      -2.30959       2.30959       2117.27       2119.58    
  10  0.985067     -0.150452E-01 -0.334495      0.334495       2115.10       2115.43    
  11  0.153899      -1.87146      -41.6077       41.6077       2111.02       2152.62    
  12  0.297572      -1.21210      -26.9482       26.9482       2095.32       2122.27    
  13  0.111036      -2.19790      -48.8653       48.8653       2126.23       2175.10    
  14  0.489011     -0.715370      -15.9046       15.9046       2126.88       2142.79    
  15  0.970731     -0.297058E-01 -0.660442      0.660442       2113.59       2114.25    
  16  0.246322      -1.40112      -31.1506       31.1506       2127.07       2158.22    
  17  0.293332      -1.22645      -27.2673       27.2673       2087.11       2114.38    
  18  0.545752     -0.605591      -13.4639       13.4639       2125.48       2138.94    
  19  0.455999     -0.785265      -17.4586       17.4586       2110.65       2128.10    
  20  0.427211     -0.850477      -18.9084       18.9084       2130.73       2149.64    
  21  0.185046E-01  -3.98974      -88.7027       88.7027       2129.39       2218.09    
  22  0.768936     -0.262748      -5.84160       5.84160       2138.52       2144.36    
  23  0.870591     -0.138583      -3.08109       3.08109       2125.29       2128.37    
  24  0.563023     -0.574436      -12.7713       12.7713       2126.26       2139.03    
  25  0.132150E-01  -4.32640      -96.1878       96.1878       2144.24       2240.43    
  26  0.890415     -0.116068      -2.58050       2.58050       2118.68       2121.26    
  27  0.163417      -1.81145      -40.2736       40.2736       2146.80       2187.07    
  28  0.360288      -1.02085      -22.6963       22.6963       2145.14       2167.83    
  29  0.622131     -0.474604      -10.5517       10.5517       2111.53       2122.08    
  30  0.942630     -0.590811E-01  -1.31354       1.31354       2132.61       2133.92    
  31  0.135626      -1.99785      -44.4178       44.4178       2135.56       2179.98    
  32  0.369646     -0.995208      -22.1262       22.1262       2143.42       2165.55    
  33  0.501457     -0.690237      -15.3459       15.3459       2133.72       2149.07    
  34  0.459762     -0.777047      -17.2759       17.2759       2159.84       2177.12    
  35  0.489970     -0.713411      -15.8611       15.8611       2143.61       2159.47    
  36  0.504194     -0.684794      -15.2248       15.2248       2171.15       2186.37    
  37  0.543102E-01  -2.91304      -64.7649       64.7649       2157.38       2222.14    
  38  0.873609     -0.135122      -3.00413       3.00413       2180.36       2183.37    
  39  0.425787     -0.853816      -18.9827       18.9827       2188.26       2207.24    
  40  0.792406     -0.232682      -5.17315       5.17315       2180.44       2185.62    
  41  0.691102     -0.369469      -8.21430       8.21430       2102.74       2110.95    
  42  0.752290     -0.284633      -6.32818       6.32818       2169.17       2175.50    
  43  0.279962      -1.27310      -28.3045       28.3045       2188.52       2216.83    
  44  0.315915E-01  -3.45487      -76.8111       76.8111       2140.51       2217.32    
  45  0.266419      -1.32269      -29.4069       29.4069       2193.23       2222.63    
  46  0.949868     -0.514319E-01  -1.14347       1.14347       2182.99       2184.13    
  47  0.520560     -0.652850      -14.5146       14.5146       2207.60       2222.11    
  48  0.805351     -0.216477      -4.81288       4.81288       2218.84       2223.66    
  49  0.281582      -1.26733      -28.1762       28.1762       2239.15       2267.32    
  50  0.365228      -1.00723      -22.3935       22.3935       2166.29       2188.69    
  51  0.961426     -0.393382E-01 -0.874595      0.874595       2240.26       2241.14    
loop,thermsimp(1:2)       78   51.6373       7.92101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319       2288.48          0.86          1.12         21.89          0.06          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    320       2135.05          0.84          1.12         21.91          0.05          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2135.05
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       78
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       79
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      319     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -36.8974       36.8974       2064.23       2101.13    
   2  0.812983     -0.207045      -4.60318       4.60318       2082.78       2087.38    
   3  0.820046E-01  -2.50098      -55.6036       55.6036       2086.37       2141.97    
   4  0.863006     -0.147333      -3.27562       3.27562       2102.74       2106.02    
   5  0.647901     -0.434017      -9.64939       9.64939       2112.12       2121.77    
   6  0.650063E-01  -2.73327      -60.7681       60.7681       2113.59       2174.36    
   7  0.407685E-02  -5.50243      -122.334       122.334       2087.11       2209.44    
   8  0.935930     -0.662149E-01  -1.47214       1.47214       2115.10       2116.57    
   9  0.158531      -1.84180      -40.9484       40.9484       2117.27       2158.22    
  10  0.846482     -0.166666      -3.70545       3.70545       2118.68       2122.39    
  11  0.252208      -1.37750      -30.6256       30.6256       2111.53       2142.15    
  12  0.781651E-02  -4.85152      -107.862       107.862       2095.32       2203.19    
  13  0.990286     -0.976134E-02 -0.217021      0.217021       2072.67       2072.89    
  14  0.550116     -0.597625      -13.2868       13.2868       2090.77       2104.06    
  15  0.483066     -0.727601      -16.1766       16.1766       2110.65       2126.82    
  16  0.196160      -1.62883      -36.2133       36.2133       2125.29       2161.50    
  17  0.469455     -0.756184      -16.8120       16.8120       2132.61       2149.42    
  18  0.624392     -0.470977      -10.4711       10.4711       2104.41       2114.88    
  19  0.743593     -0.296262      -6.58671       6.58671       2125.48       2132.06    
  20  0.348439      -1.05429      -23.4398       23.4398       2126.26       2149.70    
  21  0.779083     -0.249637      -5.55012       5.55012       2126.88       2132.43    
  22  0.989010     -0.110506E-01 -0.245685      0.245685       2138.52       2138.76    
  23  0.655432E-01  -2.72505      -60.5852       60.5852       2133.72       2194.31    
  24  0.470908     -0.753092      -16.7433       16.7433       2130.73       2147.47    
  25  0.685537     -0.377553      -8.39403       8.39403       2111.02       2119.41    
  26  0.863060E-02  -4.75244      -105.660       105.660       2099.93       2205.59    
  27  0.526195     -0.642084      -14.2753       14.2753       2127.07       2141.35    
  28  0.767692     -0.264367      -5.87759       5.87759       2143.61       2149.49    
  29  0.380048     -0.967459      -21.5093       21.5093       2143.42       2164.93    
  30  0.337508E-01  -3.38875      -75.3412       75.3412       2145.14       2220.48    
  31  0.683667     -0.380285      -8.45477       8.45477       2126.23       2134.68    
  32  0.245511      -1.40441      -31.2240       31.2240       2169.17       2200.40    
  33  0.294388      -1.22286      -27.1874       27.1874       2159.84       2187.03    
  34  0.159040      -1.83860      -40.8770       40.8770       2135.56       2176.43    
  35  0.613798     -0.488089      -10.8515       10.8515       2180.36       2191.21    
  36  0.863839E-01  -2.44895      -54.4469       54.4469       2182.99       2237.43    
  37  0.118930      -2.12922      -47.3384       47.3384       2180.44       2227.78    
  38  0.961460     -0.393026E-01 -0.873804      0.873804       2171.15       2172.02    
  39  0.457884     -0.781140      -17.3669       17.3669       2146.80       2164.16    
  40  0.312963      -1.16167      -25.8271       25.8271       2166.29       2192.12    
  41  0.892553     -0.113669      -2.52717       2.52717       2188.26       2190.79    
  42  0.448774     -0.801235      -17.8136       17.8136       2188.52       2206.34    
  43  0.942987E-01  -2.36129      -52.4979       52.4979       2140.51       2193.01    
  44  0.848599     -0.164169      -3.64992       3.64992       2129.39       2133.04    
  45  0.665342     -0.407455      -9.05883       9.05883       2207.60       2216.65    
  46  0.894010     -0.112039      -2.49092       2.49092       2157.38       2159.87    
  47  0.403928     -0.906518      -20.1544       20.1544       2193.23       2213.38    
  48  0.612812     -0.489696      -10.8873       10.8873       2218.84       2229.73    
  49  0.726279     -0.319821      -7.11049       7.11049       2144.24       2151.35    
  50  0.694767     -0.364179      -8.09669       8.09669       2240.26       2248.36    
  51  0.849471     -0.163141      -3.62707       3.62707       2135.05       2138.67    
loop,thermsimp(1:2)       79   36.8974       4.60318    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321       2249.44          0.85          1.12         22.02          0.08          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    2249.4        1.347     -2.286      3.160     -102.6      1.087    
                      0.9106      1.959     -99.70      3.683     0.9510    

                       2.847     -2.150      1.540      7000.      7000.    

                      -1.837      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.185     -3.767     -9.849      7.183    

                      -14.49     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.5035E-02 0.2460    -0.7592E-01 0.1562    

                     -0.2486    -0.1242     0.1333     0.1113     0.1119    



                      0.4811E-01-0.4413      0.000     0.7163E-01-0.4827E-01

                     -0.1235E-01 0.1678    -0.7116    -0.8609E-01 0.2354    

                      0.6880E-01 0.9891E-02-0.6155     -1.202      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.247      8.735    -0.1672E+05 -6.000    

                     -0.2795     -2.324      9.390      8.825    -0.1969E+05



                      -6.000     0.5374    -0.2808      8.868      9.020    

                     -0.1944E+05 -6.000    -0.8882    -0.4087      9.133    

                       8.762    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2249.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       79
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       80
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      320     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -24.1744       24.1744       2072.67       2096.85    
   2  0.744737     -0.294724      -6.55252       6.55252       2082.78       2089.33    
   3  0.361564E-01  -3.31990      -73.8105       73.8105       2064.23       2138.04    
   4  0.312099      -1.16444      -25.8886       25.8886       2090.77       2116.66    
   5  0.119132      -2.12752      -47.3007       47.3007       2102.74       2150.04    
   6  0.617735     -0.481696      -10.7094       10.7094       2104.41       2115.11    
   7  0.117626      -2.14025      -47.5835       47.5835       2115.10       2162.68    
   8  0.258570      -1.35259      -30.0718       30.0718       2111.02       2141.09    
   9  0.851854E-01  -2.46293      -54.7576       54.7576       2112.12       2166.88    
  10  0.220620      -1.51131      -33.6006       33.6006       2118.68       2152.28    
  11  0.648876     -0.432513      -9.61595       9.61595       2110.65       2120.26    
  12  0.958689     -0.421884E-01 -0.937964      0.937964       2125.48       2126.41    
  13  0.240652      -1.42440      -31.6684       31.6684       2126.88       2158.55    
  14  0.975871     -0.244252E-01 -0.543039      0.543039       2129.39       2129.93    
  15  0.467835     -0.759639      -16.8888       16.8888       2126.23       2143.12    
  16  0.398205     -0.920788      -20.4716       20.4716       2135.05       2155.52    
  17  0.757338E-01  -2.58053      -57.3722       57.3722       2138.52       2195.89    
  18  0.654643     -0.423666      -9.41925       9.41925       2127.07       2136.49    
  19  0.305298      -1.18647      -26.3784       26.3784       2086.37       2112.75    
  20  0.435768     -0.830645      -18.4675       18.4675       2111.53       2129.99    
  21  0.689410     -0.371920      -8.26879       8.26879       2130.73       2139.00    
  22  0.267500      -1.31864      -29.3169       29.3169       2132.61       2161.93    
  23  0.590747     -0.526367      -11.7026       11.7026       2143.61       2155.31    
  24  0.108947E-01  -4.51948      -100.480       100.480       2126.26       2226.74    
  25  0.236025      -1.44382      -32.1000       32.1000       2144.24       2176.34    
  26  0.590760     -0.526345      -11.7021       11.7021       2117.27       2128.97    
  27  0.782443     -0.245334      -5.45444       5.45444       2157.38       2162.83    
  28  0.702257     -0.353456      -7.85829       7.85829       2125.29       2133.15    
  29  0.764991     -0.267891      -5.95596       5.95596       2146.80       2152.75    
  30  0.753362     -0.283210      -6.29653       6.29653       2143.42       2149.72    
  31  0.961949E-01  -2.34138      -52.0553       52.0553       2171.15       2223.20    
  32  0.541564     -0.613294      -13.6352       13.6352       2113.59       2127.23    
  33  0.474786     -0.744891      -16.5610       16.5610       2135.56       2152.12    
  34  0.242842      -1.41534      -31.4670       31.4670       2159.84       2191.31    
  35  0.495414     -0.702361      -15.6154       15.6154       2188.26       2203.88    
  36  0.636645     -0.451543      -10.0390       10.0390       2180.36       2190.40    
  37  0.758087     -0.276957      -6.15751       6.15751       2166.29       2172.45    
  38  0.209321      -1.56389      -34.7695       34.7695       2140.51       2175.28    
  39  0.484343     -0.724961      -16.1179       16.1179       2133.72       2149.84    
  40  0.499790     -0.693567      -15.4199       15.4199       2169.17       2184.59    
  41  0.316628      -1.15003      -25.5683       25.5683       2095.32       2120.89    
  42  0.705469     -0.348892      -7.75682       7.75682       2099.93       2107.68    
  43  0.514591     -0.664383      -14.7711       14.7711       2188.52       2203.29    
  44  0.869006     -0.140406      -3.12160       3.12160       2087.11       2090.23    
  45  0.112600      -2.18392      -48.5544       48.5544       2193.23       2241.78    
  46  0.511991     -0.669449      -14.8837       14.8837       2207.60       2222.48    
  47  0.477456     -0.739283      -16.4363       16.4363       2145.14       2161.57    
  48  0.494460     -0.704290      -15.6583       15.6583       2180.44       2196.10    
  49  0.698938     -0.358193      -7.96362       7.96362       2218.84       2226.81    
  50  0.430212     -0.843478      -18.7528       18.7528       2182.99       2201.74    
  51  0.474243E-01  -3.04862      -67.7792       67.7792       2249.44       2317.22    
loop,thermsimp(1:2)       80   24.1744       6.55252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       2240.26          0.86          1.11         21.98          0.02          0.04         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2240.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.2327               351
loop is:       80
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    711.447      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    22.2327               351
loop is:       81
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      321     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -23.7296       23.7296       2082.78       2106.51    
   2  0.822787     -0.195058      -4.33667       4.33667       2087.11       2091.45    
   3  0.320831E-01  -3.43942      -76.4678       76.4678       2072.67       2149.14    
   4  0.224034      -1.49596      -33.2592       33.2592       2099.93       2133.18    
   5  0.200770      -1.60559      -35.6967       35.6967       2086.37       2122.06    
