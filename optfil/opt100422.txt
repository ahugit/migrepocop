nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    531.171      0.500000    
Tfreq:   73
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    531.171      0.500000    
Tfreq:   73
 Estimating   73 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       1770.57        132.73          0.66         30.71          0.98          0.05        165.13
iter,obj,time:      3       1710.27        129.85          0.71         30.51          0.45          0.05        161.56
iter,obj,time:      4       2191.36        129.91          0.69         30.45          0.56          0.05        161.65
iter,obj,time:      5       1747.69        129.85          0.68         30.44          0.47          0.05        161.49
iter,obj,time:      6       1736.08        129.84          0.69         30.56          0.36          0.05        161.50
iter,obj,time:      7       2413.66        129.97          0.69         30.38          0.58          0.05        161.67
iter,obj,time:      8       1519.51        129.87          0.69         30.51          0.60          0.05        161.72
iter,obj,time:      9       1799.61        129.90          0.69         30.47          0.65          0.05        161.75
iter,obj,time:     10       1828.34        129.98          0.73         30.53          0.38          0.05        161.66
iter,obj,time:     11       1809.33        130.16          0.72         30.45          0.34          0.05        161.72
iter,obj,time:     12       1909.06        129.81          0.71         30.21          0.94          0.04        161.71
iter,obj,time:     13       1761.73        129.78          0.71         30.50          0.56          0.05        161.59
iter,obj,time:     14       1750.26        129.86          0.67         30.39          0.62          0.05        161.59
iter,obj,time:     15       1778.19        129.74          0.67         30.30          0.82          0.05        161.58
iter,obj,time:     16       1848.91        129.82          0.68         30.61          0.33          0.05        161.49
iter,obj,time:     17       3719.46        130.17          0.70         30.42          0.21          0.04        161.53
iter,obj,time:     18       3013.46        129.63          0.69         30.34          0.36          0.03        161.06
iter,obj,time:     19       1781.61        129.60          0.67         30.39          0.81          0.04        161.51
iter,obj,time:     20       1580.47        129.81          0.65         30.32          0.97          0.05        161.80
iter,obj,time:     21       1751.68        129.87          0.71         30.58          0.41          0.05        161.62
iter,obj,time:     22       1684.50        129.90          0.71         30.59          0.54          0.05        161.79
iter,obj,time:     23       1770.80        129.92          0.70         30.52          0.81          0.05        162.01
iter,obj,time:     24       1938.03        129.96          0.68         30.44          0.76          0.05        161.89
iter,obj,time:     25       1666.68        130.57          0.73         30.10          0.49          0.05        161.93
iter,obj,time:     26       1669.92        129.48          0.65         30.52          1.06          0.04        161.76
iter,obj,time:     27       1717.71        129.49          0.71         30.53          1.05          0.04        161.82
iter,obj,time:     28       1961.16        129.39          0.73         30.68          0.59          0.04        161.43
iter,obj,time:     29       1705.34        129.22          0.68         30.60          0.97          0.04        161.52
iter,obj,time:     30       1747.07        129.18          0.68         30.52          1.08          0.05        161.52
iter,obj,time:     31       1984.36        129.16          0.69         30.55          1.06          0.04        161.51
iter,obj,time:     32       1710.39        129.10          0.66         30.71          1.09          0.05        161.61
iter,obj,time:     33       4068.09        130.26          0.75         30.06          0.20          0.05        161.31
iter,obj,time:     34       4645.13        129.60          0.68         30.63          0.31          0.05        161.27
iter,obj,time:     35       3596.39        129.36          0.70         30.71          0.19          0.05        161.02
iter,obj,time:     36       5295.09        128.91          0.72         30.79          0.26          0.05        160.73
iter,obj,time:     37       3851.41        129.10          0.69         30.75          0.16          0.05        160.75
iter,obj,time:     38       3880.88        128.99          0.69         30.71          0.15          0.05        160.60
iter,obj,time:     39       4407.99        128.72          0.68         30.86          0.18          0.05        160.49
iter,obj,time:     40       4542.49        128.67          0.68         30.39          0.50          0.05        160.28
iter,obj,time:     41       1763.87        129.71          0.73         30.58          0.38          0.05        161.44
iter,obj,time:     42       1698.61        129.72          0.72         30.54          0.41          0.05        161.43
iter,obj,time:     43       3311.49        129.94          0.72         30.38          0.27          0.04        161.36
iter,obj,time:     44       2609.55        129.60          0.70         30.63          0.45          0.04        161.42
iter,obj,time:     45       2299.69        129.59          0.71         30.69          0.55          0.05        161.58
iter,obj,time:     46       2456.75        129.35          0.71         31.01          0.48          0.04        161.60
iter,obj,time:     47       2410.81        129.57          0.70         30.71          0.41          0.04        161.42
iter,obj,time:     48       2118.43        129.61          0.71         30.68          0.41          0.04        161.46
iter,obj,time:     49       2259.08        129.40          0.67         30.64          0.63          0.05        161.38
iter,obj,time:     50       2761.32        129.62          0.70         30.88          0.38          0.05        161.62
iter,obj,time:     51       1740.61        129.89          0.71         30.57          0.41          0.05        161.64
iter,obj,time:     52       1694.94        129.82          0.71         30.54          0.48          0.05        161.60
iter,obj,time:     53       1889.18        130.01          0.72         30.37          0.28          0.04        161.42
iter,obj,time:     54       2616.91        129.66          0.71         30.55          0.34          0.04        161.30
iter,obj,time:     55       1919.37        129.88          0.71         30.18          0.66          0.05        161.47
iter,obj,time:     56       1839.48        130.02          0.68         30.05          0.76          0.04        161.55
iter,obj,time:     57       1807.20        129.95          0.68         30.06          0.80          0.04        161.54
iter,obj,time:     58       1747.59        129.89          0.69         30.00          0.87          0.03        161.48
iter,obj,time:     59       1795.55        129.90          0.70         30.17          0.67          0.04        161.48
iter,obj,time:     60       1791.04        129.82          0.71         30.19          0.78          0.05        161.54
iter,obj,time:     61       1788.35        130.05          0.69         30.43          0.42          0.05        161.63
iter,obj,time:     62       1491.54        130.02          0.69         30.49          0.42          0.05        161.67
iter,obj,time:     63       1781.42        130.05          0.70         30.59          0.15          0.05        161.54
iter,obj,time:     64       1735.45        130.07          0.69         30.47          0.20          0.05        161.48
iter,obj,time:     65       1780.87        129.95          0.69         30.52          0.35          0.05        161.56
iter,obj,time:     66       1790.45        129.96          0.70         30.50          0.39          0.05        161.60
iter,obj,time:     67       1816.05        130.06          0.70         30.40          0.39          0.05        161.60
iter,obj,time:     68       1608.08        130.00          0.69         30.18          0.84          0.05        161.75
iter,obj,time:     69       1754.66        129.86          0.71         30.12          0.80          0.04        161.54
iter,obj,time:     70       1721.97        129.75          0.70         30.16          0.70          0.04        161.35
iter,obj,time:     71       1736.53        129.80          0.71         30.14          0.61          0.04        161.31
iter,obj,time:     72       1797.48        129.83          0.71         29.71          0.81          0.04        161.09
iter,obj,time:     73       1839.42        129.79          0.71         30.15          1.07          0.05        161.75
iter,obj,time:     74       1770.14        129.84          0.70         30.15          1.09          0.04        161.82
iter,obj,time:     75       1775.35        129.76          0.70         29.87          1.80          0.05        162.17

    1    1770.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    2    1710.3        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    3    2191.4        1.842      1.052      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    4    1747.7        1.842    -0.9479      5.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    5    1736.1        1.842    -0.9479      3.341     -100.0      2.462    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    6    2413.7        1.842    -0.9479      3.341     -100.0     0.2624    
                       1.212     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    7    1519.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    8    1799.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      4.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

    9    1828.3        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      3.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   10    1809.3        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                       1.257     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   11    1909.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430      2.100      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   12    1761.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000      1.160    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   13    1750.3        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                     -0.2191     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   14    1778.2        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000    -0.2210    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   15    1848.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.000      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   16    3719.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500     0.1663E+05 0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   17    3013.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.2628E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   18    1781.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -1210.     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   19    1580.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -2.715     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   20    1751.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -10.46     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   21    1684.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -8.097     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   22    1770.8        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -8.595     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   23    1938.0        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.175     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   24    1666.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675      1359.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   25    1669.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000      3355.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   26    1717.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                       4764.      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   27    1961.2        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      8323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   28    1705.3        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      5073.      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   29    1747.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      5329.      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   30    1984.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      7500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   31    1710.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   32    4068.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6     0.7951    -0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   33    4645.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02 0.7069      0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   34    3596.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000     0.6485    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   35    5295.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                      0.6166    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   36    3851.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834     0.6552    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   37    3880.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448     0.6367    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   38    4408.0        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633     0.6090    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   39    4542.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910     0.7575    

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   40    1763.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.5539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   41    1698.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.600      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   42    3311.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.9780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   43    2609.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.8362    
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   44    2299.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01 0.7702    -0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   45    2456.8        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01 0.7276    -0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   46    2410.8        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01 0.7763    -0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   47    2118.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01 0.7348    
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   48    2259.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                      0.7280     0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   49    2761.3        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.8785    -0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   50    1740.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.6282E-01 -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   51    1694.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.000      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   52    1889.2        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                     -0.6252     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   53    2616.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625    -0.3816     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   54    1919.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.691      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   55    1839.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.691      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   56    1807.2        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.1250E-02
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   57    1747.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.8300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   58    1795.6        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.8300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   59    1791.0        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      8.891      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   60    1788.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.691     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   61    1491.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891    -0.1750E+05

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   62    1781.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.1250E-02 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   63    1735.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.8300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   64    1780.9        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.8300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   65    1790.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.591      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   66    1816.0        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      8.891    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   67    1608.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                     -0.1750E+05 0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   68    1754.7        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.1250E-02-0.5700     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   69    1722.0        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03 0.1300     0.1300      9.391    
                       9.191     -5000.     0.1000E-01

   70    1736.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.8300      9.391    
                       9.191     -5000.     0.1000E-01

   71    1797.5        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.191    
                       9.191     -5000.     0.1000E-01

   72    1839.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       8.991     -5000.     0.1000E-01

   73    1770.1        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -6000.     0.1000E-01

   74    1775.4        1.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884     0.4740     -100.0      2.257      1.500    
                     -0.7430     0.1000      2.009      0.000     0.6600    
                      -1.219     -20.00      0.000      0.000     -1.221    

                      -2.500      6654.     0.1051E+05 -483.9     -1451.    
                      -4.215     -5.228     -4.048     -15.33     -5.168    
                      -13.60     -2.675     -3641.      0.000     -1645.    

                      -236.2      3323.      72.93      329.0      2500.    
                      -701.6    -0.4892E-02-0.9315E-01  0.000    -0.1515    
                     -0.1834    -0.1448    -0.1633    -0.1910    -0.4246E-01

                     -0.7539     -1.800      1.382     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -2.200      1.382    

                      -1.625     -1.382     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.891      8.891      0.000     0.5000E-03
                      0.1300     0.1300      9.091      8.891     -5000.    

                      0.5000E-03 0.1300     0.1300      9.791      9.091    
                      -5000.     0.5000E-03-0.5700     0.1300      9.391    
                       9.191     -5000.     0.2500E-01
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          74          74

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        1
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       74     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -783.962       783.962       1770.57       2554.53    
   2  0.709707     -0.342904      -182.140       182.140       1710.27       1892.41    
   3  0.151889      -1.88460      -1001.05       1001.05       2191.36       3192.41    
   4  0.456170E-01  -3.08747      -1639.98       1639.98       1747.69       3387.66    
   5  0.882557     -0.124932      -66.3601       66.3601       1736.08       1802.44    
   6  0.711292     -0.340672      -180.955       180.955       2413.66       2594.61    
   7  0.241669      -1.42019      -754.362       754.362       1519.51       2273.87    
   8  0.682871     -0.381450      -202.615       202.615       1799.61       2002.22    
   9  0.500657     -0.691834      -367.482       367.482       1828.34       2195.82    
  10  0.494633     -0.703939      -373.911       373.911       1809.33       2183.24    
  11  0.437126     -0.827535      -439.562       439.562       1909.06       2348.63    
  12  0.462981     -0.770069      -409.038       409.038       1761.73       2170.76    
  13  0.988878     -0.111840E-01  -5.94061       5.94061       1750.26       1756.20    
  14  0.878158     -0.129929      -69.0145       69.0145       1778.19       1847.20    
  15  0.825605     -0.191638      -101.793       101.793       1848.91       1950.70    
  16  0.966665     -0.339033E-01  -18.0085       18.0085       3719.46       3737.47    
  17  0.340930      -1.07608      -571.580       571.580       3013.46       3585.04    
  18  0.288920      -1.24161      -659.505       659.505       1781.61       2441.12    
  19  0.442843     -0.814539      -432.659       432.659       1580.47       2013.13    
  20  0.878635     -0.129386      -68.7259       68.7259       1751.68       1820.40    
  21  0.198777E-01  -3.91816      -2081.21       2081.21       1684.50       3765.71    
  22  0.315829      -1.15255      -612.202       612.202       1770.80       2383.00    
  23  0.208690      -1.56690      -832.294       832.294       1938.03       2770.32    
  24  0.849393     -0.163234      -86.7049       86.7049       1666.68       1753.39    
  25  0.945818     -0.557056E-01  -29.5892       29.5892       1669.92       1699.51    
  26  0.567839     -0.565917      -300.598       300.598       1717.71       2018.31    
  27  0.718388     -0.330745      -175.682       175.682       1961.16       2136.84    
  28  0.115406      -2.15930      -1146.95       1146.95       1705.34       2852.30    
  29  0.659869E-01  -2.71830      -1443.88       1443.88       1747.07       3190.95    
  30  0.171393      -1.76380      -936.877       936.877       1984.36       2921.23    
  31  0.161953      -1.82045      -966.970       966.970       1710.39       2677.36    
  32  0.455406     -0.786566      -417.800       417.800       4068.09       4485.89    
  33  0.788693     -0.237378      -126.088       126.088       4645.13       4771.22    
  34  0.157754      -1.84672      -980.923       980.923       3596.39       4577.31    
  35  0.126279      -2.06926      -1099.13       1099.13       5295.09       6394.22    
  36  0.646962     -0.435467      -231.307       231.307       3851.41       4082.72    
  37  0.730769     -0.313658      -166.606       166.606       3880.88       4047.49    
  38  0.443446E-01  -3.11577      -1655.00       1655.00       4407.99       6063.00    
  39  0.219048      -1.51847      -806.564       806.564       4542.49       5349.06    
  40  0.311223E-01  -3.46983      -1843.07       1843.07       1763.87       3606.94    
  41  0.864417     -0.145700      -77.3917       77.3917       1698.61       1776.00    
  42  0.372606     -0.987233      -524.389       524.389       3311.49       3835.88    
  43  0.599250E-01  -2.81466      -1495.07       1495.07       2609.55       4104.61    
  44  0.250528      -1.38418      -735.237       735.237       2299.69       3034.93    
  45  0.404968E-01  -3.20653      -1703.22       1703.22       2456.75       4159.97    
  46  0.792822     -0.232156      -123.315       123.315       2410.81       2534.13    
  47  0.826691     -0.190324      -101.095       101.095       2118.43       2219.52    
  48  0.258424      -1.35316      -718.756       718.756       2259.08       2977.84    
  49  0.713620     -0.337405      -179.220       179.220       2761.32       2940.54    
  50  0.936186     -0.659413E-01  -35.0261       35.0261       1740.61       1775.64    
  51  0.655367E-01  -2.72514      -1447.52       1447.52       1694.94       3142.46    
  52  0.178790      -1.72154      -914.433       914.433       1889.18       2803.61    
  53  0.110644E-01  -4.50403      -2392.41       2392.41       2616.91       5009.31    
  54  0.459577     -0.777448      -412.958       412.958       1919.37       2332.33    
  55  0.210706      -1.55729      -827.188       827.188       1839.48       2666.67    
  56  0.667378     -0.404399      -214.805       214.805       1807.20       2022.01    
  57  0.787749     -0.238575      -126.724       126.724       1747.59       1874.32    
  58  0.774339E-01  -2.55833      -1358.91       1358.91       1795.55       3154.46    
  59  0.154999      -1.86434      -990.282       990.282       1791.04       2781.33    
  60  0.510712     -0.671950      -356.920       356.920       1788.35       2145.27    
  61  0.628107     -0.465044      -247.018       247.018       1491.54       1738.56    
  62  0.850273     -0.162197      -86.1544       86.1544       1781.42       1867.57    
  63  0.355976      -1.03289      -548.641       548.641       1735.45       2284.09    
  64  0.531318     -0.632394      -335.909       335.909       1780.87       2116.78    
  65  0.404575     -0.904917      -480.666       480.666       1790.45       2271.12    
  66  0.240103      -1.42669      -757.814       757.814       1816.05       2573.86    
  67  0.288602      -1.24271      -660.090       660.090       1608.08       2268.17    
  68  0.870493     -0.138695      -73.6708       73.6708       1754.66       1828.33    
  69  0.453038     -0.791780      -420.570       420.570       1721.97       2142.54    
  70  0.259221      -1.35008      -717.120       717.120       1736.53       2453.65    
  71  0.201751      -1.60072      -850.255       850.255       1797.48       2647.73    
  72  0.390245     -0.940979      -499.820       499.820       1839.42       2339.24    
  73  0.311089      -1.16768      -620.235       620.235       1770.14       2390.37    
  74  0.618900     -0.479811      -254.862       254.862       1775.35       2030.21    
loop,thermsimp(1:2)        1   783.962       182.140    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76       1886.67        130.00          0.70         30.07          1.05          0.04        161.85
Just calling func    0   0        161.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1886.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        1
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        2
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       75     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -553.503       553.503       1669.92       2223.42    
   2  0.440787     -0.819193      -435.131       435.131       1491.54       1926.67    
   3  0.685789     -0.377185      -200.350       200.350       1666.68       1867.03    
   4  0.673104     -0.395856      -210.267       210.267       1750.26       1960.52    
   5  0.655536     -0.422301      -224.314       224.314       1740.61       1964.92    
   6  0.422838     -0.860766      -457.213       457.213       1698.61       2155.82    
   7  0.300870      -1.20108      -637.977       637.977       1736.08       2374.06    
   8  0.776987     -0.252331      -134.031       134.031       1751.68       1885.71    
   9  0.170551      -1.76872      -939.492       939.492       1754.66       2694.15    
  10  0.587497     -0.531884      -282.521       282.521       1778.19       2060.71    
  11  0.250425      -1.38459      -735.456       735.456       1781.42       2516.87    
  12  0.776362E-01  -2.55572      -1357.52       1357.52       1747.59       3105.12    
  13  0.766647     -0.265729      -141.147       141.147       1710.27       1851.42    
  14  0.480193     -0.733568      -389.650       389.650       1848.91       2238.56    
  15  0.434643     -0.833231      -442.588       442.588       1799.61       2242.19    
  16  0.815924E-01  -2.50602      -1331.12       1331.12       1580.47       2911.59    
  17  0.724257E-01  -2.62519      -1394.43       1394.43       1717.71       3112.13    
  18  0.573795     -0.555483      -295.056       295.056       1807.20       2102.26    
  19  0.196096      -1.62915      -865.356       865.356       1775.35       2640.71    
  20  0.240673      -1.42432      -756.554       756.554       1780.87       2537.42    
  21  0.194228      -1.63872      -870.442       870.442       1961.16       2831.60    
  22  0.236387      -1.44229      -766.100       766.100       1721.97       2488.07    
  23  0.261662      -1.34070      -712.141       712.141       1788.35       2500.49    
  24  0.146321      -1.92195      -1020.89       1020.89       1761.73       2782.61    
  25  0.169637      -1.77410      -942.348       942.348       1809.33       2751.68    
  26  0.886717     -0.120229      -63.8622       63.8622       1828.34       1892.20    
  27  0.253412      -1.37274      -729.159       729.159       2118.43       2847.59    
  28  0.470820     -0.753279      -400.120       400.120       1608.08       2008.20    
  29  0.329871      -1.10905      -589.097       589.097       1790.45       2379.55    
  30  0.726784     -0.319126      -169.510       169.510       1519.51       1689.02    
  31  0.612351     -0.490450      -260.513       260.513       1735.45       1995.96    
  32  0.146573      -1.92023      -1019.97       1019.97       1919.37       2939.34    
  33  0.812633     -0.207476      -110.205       110.205       1839.42       1949.62    
  34  0.486789     -0.719925      -382.403       382.403       1909.06       2291.47    
  35  0.653508     -0.425400      -225.960       225.960       1770.80       1996.76    
  36  0.180127      -1.71409      -910.476       910.476       1770.14       2680.61    
  37  0.155218      -1.86292      -989.531       989.531       1781.61       2771.14    
  38  0.830615     -0.185589      -98.5793       98.5793       1736.53       1835.11    
  39  0.728345     -0.316980      -168.370       168.370       2410.81       2579.18    
  40  0.262318      -1.33820      -710.812       710.812       1770.57       2481.38    
  41  0.234222      -1.45148      -770.986       770.986       1816.05       2587.03    
  42  0.250201      -1.38549      -735.933       735.933       2413.66       3149.59    
  43  0.898433     -0.107103      -56.8902       56.8902       1797.48       1854.37    
  44  0.580277     -0.544250      -289.090       289.090       1839.48       2128.57    
  45  0.823617     -0.194050      -103.073       103.073       1710.39       1813.46    
  46  0.820676     -0.197627      -104.974       104.974       1938.03       2043.00    
  47  0.502494     -0.688171      -365.536       365.536       1791.04       2156.58    
  48  0.751016     -0.286329      -152.089       152.089       1889.18       2041.27    
  49  0.360461      -1.02037      -541.991       541.991       1705.34       2247.33    
  50  0.948712     -0.526497E-01  -27.9660       27.9660       1984.36       2012.32    
  51  0.452918     -0.792045      -420.711       420.711       2761.32       3182.03    
  52  0.182886      -1.69889      -902.403       902.403       2259.08       3161.48    
  53  0.986780     -0.133085E-01  -7.06910       7.06910       2299.69       2306.76    
  54  0.720276     -0.328121      -174.288       174.288       1694.94       1869.23    
  55  0.999574     -0.426396E-03 -0.226489      0.226489       1795.55       1795.78    
  56  0.573447     -0.556089      -295.378       295.378       1747.07       2042.45    
  57  0.441160E-01  -3.12093      -1657.75       1657.75       2191.36       3849.11    
  58  0.596470     -0.516726      -274.470       274.470       1747.69       2022.16    
  59  0.561679E-01  -2.87941      -1529.46       1529.46       3013.46       4542.92    
  60  0.664610     -0.408554      -217.012       217.012       1763.87       1980.88    
  61  0.875363     -0.133117      -70.7077       70.7077       3719.46       3790.17    
  62  0.969943     -0.305184E-01  -16.2104       16.2104       1684.50       1700.72    
  63  0.692714     -0.367138      -195.013       195.013       3311.49       3506.50    
  64  0.107969      -2.22591      -1182.34       1182.34       3880.88       5063.22    
  65  0.530030     -0.634822      -337.199       337.199       3851.41       4188.61    
  66  0.246082      -1.40209      -744.748       744.748       2609.55       3354.29    
  67  0.561065     -0.577919      -306.974       306.974       2456.75       2763.73    
  68  0.888085     -0.118688      -63.0436       63.0436       4068.09       4131.14    
  69  0.180192      -1.71373      -910.284       910.284       3596.39       4506.67    
  70  0.259121      -1.35046      -717.324       717.324       4645.13       5362.45    
  71  0.728967     -0.316127      -167.917       167.917       2616.91       2784.83    
  72  0.546722     -0.603814      -320.728       320.728       4542.49       4863.22    
  73  0.334936      -1.09382      -581.003       581.003       4407.99       4989.00    
  74  0.681788     -0.383037      -203.458       203.458       1886.67       2090.13    
loop,thermsimp(1:2)        2   553.503       435.131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77       1713.20        129.92          0.71         30.17          0.91          0.05        161.75
Just calling func    0   0        161.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78       2258.90        129.95          0.71         30.11          0.92          0.05        161.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1713.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        2
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        3
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       77     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -947.821       947.821       1519.51       2467.33    
   2  0.274399      -1.29317      -686.895       686.895       1684.50       2371.40    
   3  0.597410E-01  -2.81774      -1496.70       1496.70       1795.55       3292.25    
   4  0.283115E-01  -3.56449      -1893.35       1893.35       1710.39       3603.74    
   5  0.901069     -0.104174      -55.3341       55.3341       1736.53       1791.86    
   6  0.717939     -0.331371      -176.015       176.015       1710.27       1886.29    
   7  0.294866      -1.22123      -648.684       648.684       1797.48       2446.16    
   8  0.935651     -0.665127E-01  -35.3296       35.3296       1666.68       1702.01    
   9  0.314362      -1.15721      -614.676       614.676       1694.94       2309.62    
  10  0.807729     -0.213529      -113.420       113.420       1751.68       1865.10    
  11  0.757191     -0.278140      -147.740       147.740       1828.34       1976.08    
  12  0.508654     -0.675987      -359.064       359.064       1491.54       1850.61    
  13  0.722060     -0.325647      -172.974       172.974       1839.42       2012.39    
  14  0.424032     -0.857947      -455.716       455.716       1750.26       2205.97    
  15  0.786154     -0.240602      -127.801       127.801       1740.61       1868.41    
  16  0.399894     -0.916557      -486.848       486.848       1763.87       2250.72    
  17  0.757416     -0.277843      -147.582       147.582       1735.45       1883.03    
  18  0.637270     -0.450563      -239.326       239.326       1770.80       2010.12    
  19  0.586055     -0.534342      -283.827       283.827       1608.08       1891.91    
  20  0.821724     -0.196351      -104.296       104.296       1984.36       2088.65    
  21  0.921558     -0.816897E-01  -43.3912       43.3912       1747.69       1791.08    
  22  0.985596     -0.145083E-01  -7.70640       7.70640       1889.18       1896.88    
  23  0.257194      -1.35793      -721.290       721.290       1747.07       2468.36    
  24  0.921438E-01  -2.38440      -1266.53       1266.53       1938.03       3204.55    
  25  0.114653      -2.16584      -1150.43       1150.43       1778.19       2928.62    
  26  0.379827     -0.968040      -514.195       514.195       1886.67       2400.87    
  27  0.541451     -0.613503      -325.875       325.875       1807.20       2133.08    
  28  0.544274     -0.608302      -323.112       323.112       1839.48       2162.59    
  29  0.934365     -0.678883E-01  -36.0603       36.0603       1698.61       1734.67    
  30  0.266419E-01  -3.62527      -1925.64       1925.64       1791.04       3716.68    
  31  0.919572     -0.838466E-01  -44.5368       44.5368       1669.92       1714.45    
  32  0.864639     -0.145444      -77.2554       77.2554       1848.91       1926.16    
  33  0.341156      -1.07542      -571.230       571.230       1799.61       2370.84    
  34  0.803175     -0.219182      -116.423       116.423       1705.34       1821.76    
  35  0.699424     -0.357498      -189.892       189.892       1909.06       2098.96    
  36  0.223868E-01  -3.79928      -2018.07       2018.07       2299.69       4317.76    
  37  0.605689     -0.501389      -266.323       266.323       1736.08       2002.40    
  38  0.312349      -1.16363      -618.088       618.088       1790.45       2408.54    
  39  0.437501     -0.826675      -439.106       439.106       1770.57       2209.67    
  40  0.303330      -1.19293      -633.651       633.651       1721.97       2355.62    
  41  0.129735      -2.04226      -1084.79       1084.79       1788.35       2873.14    
  42  0.954352     -0.467224E-01  -24.8176       24.8176       1781.42       1806.23    
  43  0.519807     -0.654297      -347.543       347.543       1780.87       2128.41    
  44  0.950560     -0.507036E-01  -26.9322       26.9322       2410.81       2437.74    
  45  0.443941     -0.812064      -431.344       431.344       1816.05       2247.39    
  46  0.911446     -0.927229E-01  -49.2517       49.2517       1775.35       1824.60    
  47  0.782475     -0.245293      -130.292       130.292       1770.14       1900.43    
  48  0.412534     -0.885438      -470.318       470.318       1754.66       2224.98    
  49  0.843850     -0.169780      -90.1823       90.1823       1809.33       1899.51    
  50  0.149432      -1.90091      -1009.71       1009.71       2456.75       3466.46    
  51  0.292747      -1.22845      -652.515       652.515       1781.61       2434.13    
  52  0.579908E-02  -5.15006      -2735.56       2735.56       1761.73       4497.28    
  53  0.164431      -1.80526      -958.902       958.902       2616.91       3575.81    
  54  0.963795     -0.368765E-01  -19.5877       19.5877       1961.16       1980.75    
  55  0.536638     -0.622432      -330.617       330.617       2118.43       2449.04    
  56  0.231620      -1.46266      -776.921       776.921       1580.47       2357.39    
  57  0.452632E-01  -3.09526      -1644.11       1644.11       1919.37       3563.48    
  58  0.241294      -1.42174      -755.187       755.187       1747.59       2502.78    
  59  0.757653     -0.277529      -147.415       147.415       1717.71       1865.12    
  60  0.504715     -0.683762      -363.194       363.194       2413.66       2776.85    
  61  0.878562     -0.129469      -68.7703       68.7703       2259.08       2327.85    
  62  0.874452     -0.134158      -71.2609       71.2609       2761.32       2832.58    
  63  0.370953     -0.991680      -526.751       526.751       2609.55       3136.30    
  64  0.757717     -0.277446      -147.371       147.371       3311.49       3458.86    
  65  0.642844     -0.441853      -234.699       234.699       3719.46       3954.16    
  66  0.616137     -0.484286      -257.239       257.239       2191.36       2448.60    
  67  0.551578     -0.594972      -316.031       316.031       4068.09       4384.12    
  68  0.483778E-01  -3.02871      -1608.76       1608.76       3851.41       5460.17    
  69  0.839664     -0.174753      -92.8238       92.8238       3596.39       3689.21    
  70  0.334065      -1.09642      -582.387       582.387       3013.46       3595.85    
  71  0.995512     -0.449855E-02  -2.38950       2.38950       4542.49       4544.88    
  72  0.214896      -1.53760      -816.730       816.730       4407.99       5224.72    
  73  0.541100     -0.614151      -326.219       326.219       3880.88       4207.10    
  74  0.380397     -0.966540      -513.398       513.398       1713.20       2226.60    
loop,thermsimp(1:2)        3   947.821       686.895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79       1742.84        129.92          0.70         30.31          0.87          0.04        161.84
Just calling func    0   0        161.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80       2218.89        129.95          0.71         30.09          0.91          0.04        161.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1742.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        3
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        4
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       79     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -65.9512       65.9512       1666.68       1732.63    
   2  0.114178      -2.16999      -1152.64       1152.64       1669.92       2822.55    
   3  0.217017      -1.52778      -811.511       811.511       1698.61       2510.12    
   4  0.138317      -1.97821      -1050.76       1050.76       1747.69       2798.45    
   5  0.832728     -0.183048      -97.2297       97.2297       1736.53       1833.76    
   6  0.390825     -0.939496      -499.033       499.033       1781.42       2280.45    
   7  0.283633      -1.26007      -669.315       669.315       1705.34       2374.66    
   8  0.725809     -0.320468      -170.223       170.223       1775.35       1945.57    
   9  0.506121     -0.680979      -361.716       361.716       1491.54       1853.26    
  10  0.216234      -1.53139      -813.431       813.431       1751.68       2565.11    
  11  0.637942     -0.449509      -238.766       238.766       1717.71       1956.47    
  12  0.536707     -0.622302      -330.549       330.549       1740.61       2071.16    
  13  0.231844      -1.46169      -776.408       776.408       1735.45       2511.86    
  14  0.491379     -0.710540      -377.418       377.418       1710.27       2087.69    
  15  0.825774     -0.191434      -101.684       101.684       1608.08       1709.77    
  16  0.671593     -0.398102      -211.460       211.460       1889.18       2100.64    
  17  0.549103     -0.599470      -318.421       318.421       1809.33       2127.75    
  18  0.659287     -0.416597      -221.284       221.284       1770.14       1991.42    
  19  0.205012      -1.58469      -841.739       841.739       1848.91       2690.65    
  20  0.400541E-02  -5.52011      -2932.12       2932.12       1828.34       4760.46    
  21  0.750831     -0.286575      -152.220       152.220       1961.16       2113.38    
  22  0.619921     -0.478162      -253.986       253.986       1736.08       1990.07    
  23  0.435226     -0.831889      -441.875       441.875       1770.80       2212.67    
  24  0.460974     -0.774414      -411.346       411.346       1839.42       2250.76    
  25  0.891582E-01  -2.41734      -1284.02       1284.02       1984.36       3268.38    
  26  0.589618E-01  -2.83087      -1503.67       1503.67       1909.06       3412.74    
  27  0.541391     -0.613613      -325.933       325.933       1780.87       2106.80    
  28  0.545108E-01  -2.90936      -1545.36       1545.36       1807.20       3352.57    
  29  0.744722     -0.294744      -156.559       156.559       1839.48       1996.04    
  30  0.712477     -0.339008      -180.071       180.071       1750.26       1930.33    
  31  0.563836     -0.572992      -304.356       304.356       1770.57       2074.92    
  32  0.161455      -1.82353      -968.604       968.604       1754.66       2723.26    
  33  0.640738     -0.445135      -236.443       236.443       1713.20       1949.64    
  34  0.157494      -1.84837      -981.797       981.797       1816.05       2797.84    
  35  0.695323     -0.363378      -193.016       193.016       1763.87       1956.88    
  36  0.792798     -0.232186      -123.331       123.331       1694.94       1818.27    
  37  0.940634     -0.612017E-01  -32.5085       32.5085       2259.08       2291.59    
  38  0.750008     -0.287672      -152.803       152.803       1721.97       1874.77    
  39  0.298939E-01  -3.51010      -1864.46       1864.46       1580.47       3444.93    
  40  0.633510     -0.456480      -242.469       242.469       1799.61       2042.07    
  41  0.465723     -0.764164      -405.902       405.902       1684.50       2090.41    
  42  0.916259     -0.874560E-01  -46.4541       46.4541       1886.67       1933.13    
  43  0.451376     -0.795456      -422.523       422.523       1790.45       2212.97    
  44  0.414090     -0.881672      -468.318       468.318       1781.61       2249.93    
  45  0.273092      -1.29795      -689.431       689.431       2410.81       3100.24    
  46  0.361379      -1.01783      -540.640       540.640       1797.48       2338.12    
  47  0.548848     -0.599934      -318.667       318.667       2191.36       2510.03    
  48  0.832309     -0.183552      -97.4975       97.4975       2118.43       2215.92    
  49  0.673017     -0.395985      -210.335       210.335       1519.51       1729.84    
  50  0.692516     -0.367425      -195.165       195.165       1747.07       1942.23    
  51  0.354468E-01  -3.33972      -1773.96       1773.96       1747.59       3521.56    
  52  0.987850     -0.122240E-01  -6.49301       6.49301       2413.66       2420.15    
  53  0.659676     -0.416007      -220.971       220.971       2761.32       2982.29    
  54  0.276145      -1.28683      -683.527       683.527       1788.35       2471.88    
  55  0.426927     -0.851141      -452.101       452.101       1778.19       2230.29    
  56  0.221817      -1.50590      -799.890       799.890       2609.55       3409.44    
  57  0.911956     -0.921634E-01  -48.9545       48.9545       1938.03       1986.98    
  58  0.791973     -0.233228      -123.884       123.884       1795.55       1919.44    
  59  0.805447     -0.216358      -114.923       114.923       3311.49       3426.41    
  60  0.887840     -0.118963      -63.1898       63.1898       2456.75       2519.94    
  61  0.978176     -0.220657E-01  -11.7206       11.7206       1919.37       1931.09    
  62  0.539899     -0.616372      -327.399       327.399       2616.91       2944.31    
  63  0.313742      -1.15918      -615.724       615.724       3013.46       3629.19    
  64  0.355768      -1.03348      -548.952       548.952       1710.39       2259.34    
  65  0.413366     -0.883423      -469.248       469.248       3596.39       4065.63    
  66  0.352288      -1.04331      -554.173       554.173       1791.04       2345.22    
  67  0.269512      -1.31114      -696.440       696.440       3719.46       4415.90    
  68  0.841976E-01  -2.47459      -1314.43       1314.43       3880.88       5195.31    
  69  0.964450     -0.361976E-01  -19.2271       19.2271       2299.69       2318.92    
  70  0.554883     -0.588998      -312.858       312.858       4068.09       4380.95    
  71  0.192411      -1.64812      -875.433       875.433       1761.73       2637.16    
  72  0.834093     -0.181411      -96.3600       96.3600       4542.49       4638.85    
  73  0.606638     -0.499823      -265.491       265.491       4407.99       4673.48    
  74  0.181851E-01  -4.00716      -2128.48       2128.48       1742.84       3871.33    
loop,thermsimp(1:2)        4   65.9512       1152.64    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       1758.12        130.15          0.70         30.39          0.44          0.05        161.73
Just calling func    0   0        161.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82       2169.92        129.83          0.71         30.30          0.63          0.05        161.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    1758.1        1.901    -0.8885      3.401     -100.0     0.3278    
                     -0.7289     0.5335     -100.0      2.316      1.559    
                     -0.6836     0.1594      2.009      0.000     0.6749    
                      -1.189     -20.00      0.000      0.000     -1.191    

                      -2.485      6951.     0.1098E+05 -505.5     -1451.    
                      -4.171     -5.383     -4.169     -15.33     -5.168    
                      -13.45     -2.660     -3493.      0.000     -1497.    

                      -87.68      3472.      221.5      477.5      2649.    
                      -553.1     0.1888E-01-0.1150      0.000    -0.1277    
                     -0.2065    -0.1655    -0.9615    -0.1673    -0.1870E-01

                     -0.7480     -1.794      1.382     0.2018     0.5996E-01
                      0.8541E-01-0.6078E-02-0.4860E-01 0.1081E-03-0.4145E-01
                     -0.4821E-01 0.1023    -0.2569     -2.194      1.382    

                      -1.595     -1.352     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.885      8.885      0.000     0.5223E-03
                      0.1508     0.1508      9.085      8.885     -5371.    

                      0.5223E-03 0.1508     0.1508      9.785      9.085    
                      -5371.     0.5223E-03-0.5492     0.1508      9.385    
                       9.185     -5030.     0.1045E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1758.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        4
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        5
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       81     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -17.1716       17.1716       1608.08       1625.26    
   2  0.384676     -0.955353      -507.455       507.455       1519.51       2026.96    
   3  0.472770     -0.749146      -397.925       397.925       1666.68       2064.61    
   4  0.131186      -2.03114      -1078.88       1078.88       1694.94       2773.82    
   5  0.387497     -0.948046      -503.574       503.574       1736.53       2240.10    
   6  0.474858     -0.744739      -395.583       395.583       1491.54       1887.13    
   7  0.654056     -0.424563      -225.515       225.515       1721.97       1947.48    
   8  0.375266     -0.980119      -520.610       520.610       1795.55       2316.16    
   9  0.605577     -0.501574      -266.421       266.421       1750.26       2016.68    
  10  0.485605     -0.722360      -383.697       383.697       1919.37       2303.07    
  11  0.503843     -0.685490      -364.112       364.112       1886.67       2250.79    
  12  0.374521     -0.982108      -521.667       521.667       1747.07       2268.74    
  13  0.955542E-01  -2.34806      -1247.22       1247.22       1775.35       3022.57    
  14  0.902567     -0.102512      -54.4514       54.4514       1713.20       1767.65    
  15  0.347215      -1.05781      -561.878       561.878       1717.71       2279.58    
  16  0.893138     -0.113014      -60.0298       60.0298       1763.87       1823.90    
  17  0.561145     -0.577776      -306.897       306.897       1938.03       2244.93    
  18  0.667287     -0.404536      -214.877       214.877       1736.08       1950.96    
  19  0.601102     -0.508991      -270.361       270.361       1770.14       2040.50    
  20  0.569928     -0.562245      -298.648       298.648       1839.48       2138.12    
  21  0.655926     -0.421708      -223.999       223.999       1799.61       2023.61    
  22  0.355892      -1.03313      -548.767       548.767       1740.61       2289.38    
  23  0.208013      -1.57015      -834.019       834.019       1770.57       2604.59    
  24  0.879772     -0.128093      -68.0391       68.0391       1710.27       1778.31    
  25  0.114206E-01  -4.47233      -2375.57       2375.57       1684.50       4060.08    
  26  0.950245     -0.510357E-01  -27.1086       27.1086       1889.18       1916.29    
  27  0.321268      -1.13548      -603.133       603.133       1780.87       2384.00    
  28  0.379005     -0.970207      -515.345       515.345       1961.16       2476.51    
  29  0.117960      -2.13741      -1135.33       1135.33       1809.33       2944.66    
  30  0.822558     -0.195337      -103.757       103.757       1770.80       1874.55    
  31  0.671085     -0.398860      -211.863       211.863       1790.45       2002.31    
  32  0.220279      -1.51286      -803.587       803.587       2118.43       2922.01    
  33  0.836335     -0.178727      -94.9343       94.9343       1778.19       1873.12    
  34  0.982442E-01  -2.32030      -1232.47       1232.47       1781.61       3014.09    
  35  0.912526     -0.915389E-01  -48.6227       48.6227       1839.42       1888.04    
  36  0.758802     -0.276015      -146.611       146.611       1710.39       1857.00    
  37  0.562651     -0.575096      -305.474       305.474       1781.42       2086.89    
  38  0.248142      -1.39375      -740.321       740.321       2259.08       2999.40    
  39  0.864881     -0.145163      -77.1064       77.1064       2299.69       2376.80    
  40  0.495151     -0.702893      -373.356       373.356       1797.48       2170.84    
  41  0.112352E-01  -4.48870      -2384.27       2384.27       1791.04       4175.31    
  42  0.745500     -0.293700      -156.005       156.005       1705.34       1861.35    
  43  0.405071     -0.903693      -480.015       480.015       2413.66       2893.67    
  44  0.617259     -0.482466      -256.272       256.272       1788.35       2044.62    
  45  0.992755     -0.727089E-02  -3.86208       3.86208       2191.36       2195.22    
  46  0.888739     -0.117952      -62.6527       62.6527       1698.61       1761.26    
  47  0.976701     -0.235748E-01  -12.5222       12.5222       1735.45       1747.97    
  48  0.461976     -0.772242      -410.192       410.192       2456.75       2866.95    
  49  0.150581      -1.89325      -1005.64       1005.64       1751.68       2757.32    
  50  0.726286E-01  -2.62240      -1392.94       1392.94       1761.73       3154.67    
  51  0.280837      -1.26998      -674.576       674.576       1848.91       2523.49    
  52  0.727959     -0.317510      -168.652       168.652       1754.66       1923.31    
  53  0.565225     -0.570532      -303.050       303.050       1816.05       2119.10    
  54  0.884775     -0.122422      -65.0272       65.0272       1747.69       1812.72    
  55  0.289837      -1.23844      -657.822       657.822       1669.92       2327.74    
  56  0.282389      -1.26447      -671.649       671.649       2616.91       3288.56    
  57  0.737455     -0.304550      -161.768       161.768       2761.32       2923.09    
  58  0.436668E-02  -5.43375      -2886.25       2886.25       2410.81       5297.06    
  59  0.809492     -0.211348      -112.262       112.262       1984.36       2096.62    
  60  0.957786E-01  -2.34572      -1245.98       1245.98       1807.20       3053.18    
  61  0.335750      -1.09139      -579.713       579.713       2609.55       3189.26    
  62  0.687327     -0.374945      -199.160       199.160       1909.06       2108.22    
  63  0.340103      -1.07851      -572.870       572.870       3311.49       3884.36    
  64  0.902520     -0.102564      -54.4790       54.4790       1580.47       1634.95    
  65  0.872595     -0.136284      -72.3898       72.3898       1747.59       1819.98    
  66  0.773535     -0.256784      -136.396       136.396       3013.46       3149.86    
  67  0.627340     -0.466267      -247.668       247.668       1742.84       1990.51    
  68  0.918418     -0.851028E-01  -45.2041       45.2041       3596.39       3641.59    
  69  0.347451      -1.05713      -561.518       561.518       4068.09       4629.61    
  70  0.962049     -0.386898E-01  -20.5509       20.5509       3719.46       3740.01    
  71  0.716962     -0.332732      -176.738       176.738       4542.49       4719.23    
  72  0.423789     -0.858520      -456.021       456.021       4407.99       4864.01    
  73  0.899832E-01  -2.40813      -1279.13       1279.13       1828.34       3107.47    
  74  0.770387     -0.260863      -138.563       138.563       1758.12       1896.68    
loop,thermsimp(1:2)        5   17.1716       507.455    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83       2027.68        130.01          0.71         30.22          0.78          0.05        161.77
Just calling func    0   0        161.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2027.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        5
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        6
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       82     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -114.404       114.404       1608.08       1722.49    
   2  0.337878      -1.08507      -576.358       576.358       1580.47       2156.82    
   3  0.930612     -0.719127E-01  -38.1979       38.1979       1735.45       1773.65    
   4  0.843645     -0.170024      -90.3116       90.3116       1698.61       1788.92    
   5  0.757799     -0.277337      -147.313       147.313       1713.20       1860.51    
   6  0.627925     -0.465335      -247.172       247.172       1710.27       1957.45    
   7  0.412314     -0.885971      -470.601       470.601       1747.69       2218.29    
   8  0.282274      -1.26488      -671.865       671.865       1747.59       2419.46    
   9  0.426609E-01  -3.15447      -1675.56       1675.56       1763.87       3439.43    
  10  0.484876     -0.723862      -384.494       384.494       1710.39       2094.88    
  11  0.372210     -0.988296      -524.954       524.954       1705.34       2230.29    
  12  0.740507     -0.300421      -159.575       159.575       1778.19       1937.76    
  13  0.361519      -1.01744      -540.435       540.435       1770.80       2311.23    
  14  0.421034     -0.865042      -459.485       459.485       1491.54       1951.03    
  15  0.780595     -0.247699      -131.571       131.571       1839.42       1970.99    
  16  0.758410     -0.276531      -146.885       146.885       1758.12       1905.01    
  17  0.522921E-01  -2.95091      -1567.44       1567.44       1889.18       3456.61    
  18  0.609673     -0.494833      -262.841       262.841       1754.66       2017.50    
  19  0.204029      -1.58949      -844.291       844.291       1721.97       2566.26    
  20  0.516385     -0.660902      -351.052       351.052       1736.08       2087.13    
  21  0.323918      -1.12726      -598.769       598.769       1742.84       2341.61    
  22  0.671820     -0.397765      -211.281       211.281       1790.45       2001.73    
  23  0.850344     -0.162114      -86.1101       86.1101       1750.26       1836.37    
  24  0.515631     -0.662364      -351.828       351.828       1799.61       2151.43    
  25  0.919408     -0.840249E-01  -44.6316       44.6316       1519.51       1564.14    
  26  0.516519     -0.660643      -350.914       350.914       1770.14       2121.05    
  27  0.986900     -0.131869E-01  -7.00448       7.00448       1788.35       1795.35    
  28  0.127351      -2.06081      -1094.64       1094.64       1666.68       2761.32    
  29  0.775028E-01  -2.55744      -1358.44       1358.44       1781.42       3139.85    
  30  0.778307     -0.250634      -133.129       133.129       1984.36       2117.48    
  31  0.548570     -0.600441      -318.936       318.936       1909.06       2228.00    
  32  0.191672      -1.65197      -877.478       877.478       1816.05       2693.52    
  33  0.593733     -0.521326      -276.913       276.913       1839.48       2116.39    
  34  0.612853     -0.489631      -260.078       260.078       1797.48       2057.56    
  35  0.872749     -0.136107      -72.2960       72.2960       2191.36       2263.66    
  36  0.291105E-01  -3.53666      -1878.57       1878.57       1736.53       3615.09    
  37  0.310804      -1.16859      -620.722       620.722       1938.03       2558.75    
  38  0.238051      -1.43527      -762.374       762.374       1886.67       2649.05    
  39  0.600295     -0.510334      -271.074       271.074       1747.07       2018.14    
  40  0.856575     -0.154813      -82.2322       82.2322       1717.71       1799.94    
  41  0.127990      -2.05580      -1091.98       1091.98       1740.61       2832.59    
  42  0.390396E-01  -3.24318      -1722.68       1722.68       1919.37       3642.05    
  43  0.469298E-01  -3.05910      -1624.91       1624.91       1795.55       3420.46    
  44  0.170208      -1.77073      -940.562       940.562       1669.92       2610.48    
  45  0.457801     -0.781320      -415.014       415.014       2299.69       2714.71    
  46  0.451589     -0.794982      -422.271       422.271       1780.87       2203.14    
  47  0.601844     -0.507757      -269.706       269.706       1961.16       2230.87    
  48  0.923684     -0.793857E-01  -42.1674       42.1674       1848.91       1891.08    
  49  0.113154      -2.17901      -1157.42       1157.42       1770.57       2927.99    
  50  0.652894     -0.426340      -226.459       226.459       1751.68       1978.14    
  51  0.600010     -0.510809      -271.326       271.326       1694.94       1966.27    
  52  0.768679     -0.263082      -139.741       139.741       2456.75       2596.49    
  53  0.999310     -0.690144E-03 -0.366584      0.366584       2413.66       2414.03    
  54  0.798907     -0.224511      -119.253       119.253       2118.43       2237.68    
  55  0.246243      -1.40144      -744.402       744.402       2761.32       3505.72    
  56  0.798424     -0.225115      -119.575       119.575       1809.33       1928.91    
  57  0.120926      -2.11257      -1122.14       1122.14       2259.08       3381.22    
  58  0.771675     -0.259192      -137.675       137.675       1781.61       1919.29    
  59  0.670629     -0.399540      -212.224       212.224       1775.35       1987.58    
  60  0.127505      -2.05960      -1094.00       1094.00       1807.20       2901.20    
  61  0.375387     -0.979799      -520.440       520.440       1828.34       2348.78    
  62  0.572534E-01  -2.86027      -1519.29       1519.29       3013.46       4532.75    
  63  0.358654      -1.02540      -544.660       544.660       1761.73       2306.39    
  64  0.903087     -0.101937      -54.1459       54.1459       2609.55       2663.69    
  65  0.112925      -2.18103      -1158.50       1158.50       2616.91       3775.41    
  66  0.727950     -0.317523      -168.659       168.659       3596.39       3765.04    
  67  0.703618E-01  -2.65411      -1409.78       1409.78       3719.46       5129.24    
  68  0.461106     -0.774128      -411.194       411.194       3311.49       3722.68    
  69  0.546854     -0.603573      -320.600       320.600       1684.50       2005.11    
  70  0.264522      -1.32983      -706.368       706.368       1791.04       2497.41    
  71  0.562280     -0.575755      -305.824       305.824       4068.09       4373.92    
  72  0.745931     -0.293123      -155.698       155.698       4542.49       4698.19    
  73  0.753398E-01  -2.58575      -1373.47       1373.47       4407.99       5781.47    
  74  0.150464E-01  -4.19662      -2229.12       2229.12       2027.68       4256.80    
loop,thermsimp(1:2)        6   114.404       576.358    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84       1838.76        130.03          0.71         30.24          0.77          0.05        161.81
Just calling func    0   0        161.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85       2254.33        130.04          0.72         30.12          0.75          0.05        161.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1838.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        6
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        7
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       84     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1136.44       1136.44       1519.51       2655.94    
   2  0.421875     -0.863045      -458.424       458.424       1608.08       2066.51    
   3  0.700103     -0.356528      -189.377       189.377       1735.45       1924.83    
   4  0.209367      -1.56367      -830.574       830.574       1698.61       2529.18    
   5  0.117251      -2.14344      -1138.53       1138.53       1788.35       2926.88    
   6  0.898330     -0.107218      -56.9509       56.9509       1717.71       1774.66    
   7  0.209806      -1.56157      -829.461       829.461       1750.26       2579.72    
   8  0.917155     -0.864790E-01  -45.9351       45.9351       1713.20       1759.14    
   9  0.120514E-01  -4.41857      -2347.02       2347.02       1848.91       4195.93    
  10  0.189983      -1.66082      -882.180       882.180       1758.12       2640.30    
  11  0.257131      -1.35817      -721.419       721.419       1781.61       2503.03    
  12  0.913158E-01  -2.39343      -1271.32       1271.32       1809.33       3080.65    
  13  0.336531      -1.08906      -578.479       578.479       1778.19       2356.67    
  14  0.318351      -1.14460      -607.978       607.978       1491.54       2099.52    
  15  0.919606     -0.838101E-01  -44.5174       44.5174       1710.27       1754.79    
  16  0.719771E-01  -2.63141      -1397.73       1397.73       1694.94       3092.67    
  17  0.788730E-01  -2.53992      -1349.13       1349.13       1839.42       3188.55    
  18  0.905929     -0.987941E-01  -52.4765       52.4765       1751.68       1804.15    
  19  0.665501     -0.407215      -216.301       216.301       1775.35       1991.65    
  20  0.812159     -0.208059      -110.515       110.515       1790.45       1900.97    
  21  0.412726E-01  -3.18756      -1693.14       1693.14       1684.50       3377.64    
  22  0.256064      -1.36233      -723.628       723.628       1754.66       2478.29    
  23  0.277519      -1.28187      -680.889       680.889       1747.07       2427.96    
  24  0.279550      -1.27457      -677.016       677.016       1797.48       2474.50    
  25  0.857884     -0.153286      -81.4211       81.4211       1736.08       1817.50    
  26  0.205158      -1.58398      -841.361       841.361       1710.39       2551.75    
  27  0.482085     -0.729635      -387.561       387.561       1839.48       2227.04    
  28  0.494966E-01  -3.00585      -1596.62       1596.62       1984.36       3580.98    
  29  0.338791      -1.08237      -574.924       574.924       1770.14       2345.06    
  30  0.249491E-01  -3.69092      -1960.51       1960.51       1799.61       3760.11    
  31  0.480710     -0.732491      -389.078       389.078       1580.47       1969.54    
  32  0.908951E-01  -2.39805      -1273.77       1273.77       1780.87       3054.64    
  33  0.283223      -1.26152      -670.083       670.083       1747.69       2417.77    
  34  0.277734      -1.28109      -680.478       680.478       1909.06       2589.54    
  35  0.504407     -0.684372      -363.519       363.519       1705.34       2068.86    
  36  0.251881      -1.37880      -732.377       732.377       1961.16       2693.54    
  37  0.568193     -0.565294      -300.267       300.267       2118.43       2418.69    
  38  0.186135      -1.68128      -893.047       893.047       2191.36       3084.41    
  39  0.964582     -0.360604E-01  -19.1542       19.1542       1761.73       1780.88    
  40  0.493045     -0.707155      -375.620       375.620       1770.80       2146.42    
  41  0.477950     -0.738248      -392.136       392.136       1742.84       2134.98    
  42  0.114879      -2.16388      -1149.39       1149.39       1828.34       2977.73    
  43  0.324003      -1.12700      -598.630       598.630       2413.66       3012.29    
  44  0.720573     -0.327708      -174.069       174.069       1747.59       1921.66    
  45  0.934913     -0.673019E-01  -35.7488       35.7488       1791.04       1826.79    
  46  0.516467     -0.660745      -350.968       350.968       1938.03       2289.00    
  47  0.351513      -1.04551      -555.343       555.343       1721.97       2277.31    
  48  0.310221      -1.17047      -621.720       621.720       2456.75       3078.47    
  49  0.467571     -0.760204      -403.798       403.798       1669.92       2073.71    
  50  0.700644     -0.355756      -188.967       188.967       1886.67       2075.64    
  51  0.608579E-01  -2.79921      -1486.86       1486.86       2609.55       4096.40    
  52  0.360106      -1.02136      -542.515       542.515       1816.05       2358.56    
  53  0.355744      -1.03354      -548.989       548.989       2299.69       2848.68    
  54  0.356778      -1.03064      -547.446       547.446       1666.68       2214.13    
  55  0.209214      -1.56440      -830.963       830.963       1740.61       2571.57    
  56  0.513034     -0.667413      -354.510       354.510       1807.20       2161.71    
  57  0.131750      -2.02685      -1076.60       1076.60       1770.57       2847.17    
  58  0.860948     -0.149721      -79.5273       79.5273       1781.42       1860.94    
  59  0.245301      -1.40527      -746.437       746.437       2259.08       3005.52    
  60  0.411604     -0.887695      -471.517       471.517       1795.55       2267.07    
  61  0.444838     -0.810046      -430.273       430.273       1763.87       2194.14    
  62  0.173997      -1.74872      -928.867       928.867       1889.18       2818.05    
  63  0.616177     -0.484222      -257.204       257.204       2761.32       3018.52    
  64  0.794601     -0.229915      -122.124       122.124       1736.53       1858.65    
  65  0.926158     -0.767101E-01  -40.7461       40.7461       1919.37       1960.12    
  66  0.614053     -0.487673      -259.038       259.038       3311.49       3570.53    
  67  0.228742      -1.47516      -783.561       783.561       3596.39       4379.95    
  68  0.162916      -1.81452      -963.821       963.821       2616.91       3580.73    
  69  0.437909     -0.825744      -438.611       438.611       2027.68       2466.29    
  70  0.966188     -0.343970E-01  -18.2707       18.2707       4068.09       4086.36    
  71  0.756703     -0.278785      -148.082       148.082       3013.46       3161.54    
  72  0.537306     -0.621187      -329.956       329.956       4542.49       4872.45    
  73  0.544827     -0.607287      -322.573       322.573       3719.46       4042.03    
  74  0.452750     -0.792414      -420.907       420.907       1838.76       2259.67    
loop,thermsimp(1:2)        7   1136.44       458.424    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86       1935.34        130.15          0.73         30.34          0.47          0.05        161.74
Just calling func    0   0        161.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87       3180.53        130.32          0.70         30.04          0.60          0.05        161.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1935.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        7
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        8
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       86     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -381.735       381.735       1710.27       2092.01    
   2  0.568497     -0.564760      -299.984       299.984       1713.20       2013.18    
   3  0.632037E-01  -2.76139      -1466.77       1466.77       1717.71       3184.48    
   4  0.184325      -1.69105      -898.237       898.237       1761.73       2659.96    
   5  0.949772     -0.515332E-01  -27.3729       27.3729       1751.68       1779.05    
   6  0.512179     -0.669081      -355.396       355.396       1736.08       2091.48    
   7  0.573767     -0.555532      -295.082       295.082       1791.04       2086.13    
   8  0.590189     -0.527312      -280.093       280.093       1736.53       2016.62    
   9  0.323917      -1.12727      -598.772       598.772       1781.42       2380.19    
  10  0.246420E-01  -3.70330      -1967.09       1967.09       1790.45       3757.54    
  11  0.923153E-01  -2.38255      -1265.54       1265.54       1747.59       3013.13    
  12  0.236043      -1.44374      -766.873       766.873       1735.45       2502.32    
  13  0.885388     -0.121730      -64.6591       64.6591       1919.37       1984.03    
  14  0.617726     -0.481710      -255.870       255.870       1580.47       1836.34    
  15  0.349992      -1.04985      -557.647       557.647       1775.35       2333.00    
  16  0.892028     -0.114257      -60.6901       60.6901       1608.08       1668.77    
  17  0.382423     -0.961227      -510.576       510.576       1705.34       2215.92    
  18  0.850527     -0.161899      -85.9962       85.9962       1669.92       1755.91    
  19  0.653461     -0.425472      -225.998       225.998       1886.67       2112.67    
  20  0.413959     -0.881988      -468.486       468.486       1491.54       1960.03    
  21  0.807813     -0.213424      -113.365       113.365       1742.84       1856.21    
  22  0.348045      -1.05542      -560.610       560.610       1770.80       2331.41    
  23  0.435267     -0.831795      -441.825       441.825       1807.20       2249.03    
  24  0.434284     -0.834056      -443.026       443.026       1763.87       2206.89    
  25  0.983564     -0.165728E-01  -8.80301       8.80301       1666.68       1675.48    
  26  0.545923     -0.605277      -321.505       321.505       1839.48       2160.98    
  27  0.227140      -1.48219      -787.294       787.294       1838.76       2626.06    
  28  0.965085     -0.355395E-01  -18.8776       18.8776       1795.55       1814.43    
  29  0.183882      -1.69346      -899.515       899.515       1721.97       2621.48    
  30  0.187300E-02  -6.28022      -3335.87       3335.87       1938.03       5273.89    
  31  0.428736     -0.846914      -449.856       449.856       1770.14       2219.99    
  32  0.459764     -0.777041      -412.742       412.742       1778.19       2190.93    
  33  0.914786     -0.890649E-01  -47.3086       47.3086       1816.05       1863.36    
  34  0.872236     -0.136696      -72.6087       72.6087       1747.69       1820.30    
  35  0.789367     -0.236524      -125.635       125.635       2118.43       2244.06    
  36  0.619233E-01  -2.78186      -1477.64       1477.64       1747.07       3224.71    
  37  0.138004E-01  -4.28306      -2275.03       2275.03       2027.68       4302.71    
  38  0.287035      -1.24815      -662.981       662.981       1797.48       2460.46    
  39  0.138758E-01  -4.27761      -2272.14       2272.14       1754.66       4026.80    
  40  0.593330     -0.522005      -277.274       277.274       1781.61       2058.88    
  41  0.399445     -0.917679      -487.444       487.444       1698.61       2186.05    
  42  0.982947     -0.172001E-01  -9.13621       9.13621       1710.39       1719.52    
  43  0.259534      -1.34887      -716.478       716.478       1740.61       2457.09    
  44  0.816592E-01  -2.50520      -1330.69       1330.69       1750.26       3080.95    
  45  0.166083      -1.79527      -953.593       953.593       1909.06       2862.66    
  46  0.967370     -0.331741E-01  -17.6211       17.6211       1758.12       1775.74    
  47  0.371024     -0.991488      -526.649       526.649       1519.51       2046.16    
  48  0.941964     -0.597885E-01  -31.7579       31.7579       1961.16       1992.92    
  49  0.130219      -2.03854      -1082.81       1082.81       1889.18       2971.99    
  50  0.599455     -0.511734      -271.818       271.818       1770.57       2042.39    
  51  0.519323     -0.655230      -348.039       348.039       2299.69       2647.73    
  52  0.829175     -0.187324      -99.5012       99.5012       1788.35       1887.85    
  53  0.341525      -1.07433      -570.654       570.654       1828.34       2399.00    
  54  0.686480     -0.376178      -199.815       199.815       2259.08       2458.89    
  55  0.273157      -1.29771      -689.305       689.305       2413.66       3102.96    
  56  0.472999     -0.748662      -397.667       397.667       2761.32       3158.99    
  57  0.591611     -0.524905      -278.814       278.814       1780.87       2059.68    
  58  0.253673      -1.37171      -728.612       728.612       2456.75       3185.36    
  59  0.522398     -0.649326      -344.903       344.903       1809.33       2154.23    
  60  0.927744     -0.749995E-01  -39.8375       39.8375       2191.36       2231.20    
  61  0.470581     -0.753787      -400.389       400.389       1694.94       2095.33    
  62  0.365015      -1.00782      -535.322       535.322       3013.46       3548.78    
  63  0.732288     -0.311582      -165.503       165.503       1839.42       2004.92    
  64  0.536772E-01  -2.92477      -1553.55       1553.55       1684.50       3238.06    
  65  0.725826     -0.320444      -170.211       170.211       3311.49       3481.70    
  66  0.806822     -0.214652      -114.017       114.017       2616.91       2730.92    
  67  0.104580E-01  -4.56039      -2422.35       2422.35       1984.36       4406.70    
  68  0.818881     -0.199816      -106.136       106.136       1799.61       1905.74    
  69  0.330445      -1.10732      -588.173       588.173       3719.46       4307.63    
  70  0.316989      -1.14889      -610.256       610.256       4068.09       4678.35    
  71  0.776875     -0.252476      -134.108       134.108       2609.55       2743.65    
  72  0.782540     -0.245210      -130.248       130.248       1848.91       1979.16    
  73  0.972988     -0.273831E-01  -14.5451       14.5451       3596.39       3610.93    
  74  0.567786E-01  -2.86860      -1523.71       1523.71       1935.34       3459.06    
loop,thermsimp(1:2)        8   381.735       299.984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88       1694.28        130.17          0.69         30.12          0.70          0.05        161.73
Just calling func    0   0        161.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89       1673.73        130.15          0.69         30.17          0.62          0.05        161.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1673.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        8
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:        9
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       88     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1292.00       1292.00       1608.08       2900.08    
   2  0.192227      -1.64908      -875.942       875.942       1666.68       2542.62    
   3  0.872733     -0.136126      -72.3062       72.3062       1710.39       1782.69    
   4  0.444113     -0.811675      -431.138       431.138       1669.92       2101.05    
   5  0.194382      -1.63793      -870.021       870.021       1758.12       2628.14    
   6  0.358074      -1.02702      -545.521       545.521       1751.68       2297.20    
   7  0.461693     -0.772855      -410.518       410.518       1795.55       2206.07    
   8  0.180202      -1.71368      -910.256       910.256       1747.69       2657.95    
   9  0.944954     -0.566187E-01  -30.0742       30.0742       1580.47       1610.54    
  10  0.738770     -0.302769      -160.822       160.822       1742.84       1903.66    
  11  0.822491E-01  -2.49800      -1326.87       1326.87       1816.05       3142.91    
  12  0.313602      -1.15963      -615.961       615.961       1788.35       2404.31    
  13  0.978185     -0.220567E-01  -11.7159       11.7159       1799.61       1811.32    
  14  0.540591E-01  -2.91768      -1549.78       1549.78       1491.54       3041.33    
  15  0.872885     -0.135951      -72.2132       72.2132       1848.91       1921.12    
  16  0.209079      -1.56504      -831.304       831.304       1919.37       2750.68    
  17  0.789205E-01  -2.53931      -1348.81       1348.81       1961.16       3309.97    
  18  0.746404     -0.292489      -155.361       155.361       1839.42       1994.78    
  19  0.110219      -2.20529      -1171.39       1171.39       1713.20       2884.59    
  20  0.656016     -0.421570      -223.925       223.925       1736.53       1960.45    
  21  0.665675     -0.406953      -216.161       216.161       1770.57       1986.73    
  22  0.563292     -0.573957      -304.869       304.869       1519.51       1824.38    
  23  0.615044     -0.486062      -258.182       258.182       1781.61       2039.79    
  24  0.128081      -2.05509      -1091.60       1091.60       1780.87       2872.47    
  25  0.459916     -0.776711      -412.566       412.566       1791.04       2203.61    
  26  0.433297     -0.836332      -444.235       444.235       1736.08       2180.32    
  27  0.225675      -1.48866      -790.732       790.732       1710.27       2501.01    
  28  0.808805     -0.212197      -112.713       112.713       1694.94       1807.65    
  29  0.578238     -0.547770      -290.959       290.959       1886.67       2177.63    
  30  0.569572     -0.562871      -298.980       298.980       1809.33       2108.31    
  31  0.291272      -1.23350      -655.197       655.197       1839.48       2494.67    
  32  0.144426      -1.93499      -1027.81       1027.81       1698.61       2726.41    
  33  0.908321     -0.961572E-01  -51.0759       51.0759       1778.19       1829.26    
  34  0.593166     -0.522281      -277.421       277.421       1763.87       2041.29    
  35  0.327630      -1.11587      -592.718       592.718       1705.34       2298.06    
  36  0.823214E-01  -2.49712      -1326.40       1326.40       1770.14       3096.54    
  37  0.742531     -0.297691      -158.125       158.125       2191.36       2349.49    
  38  0.476201E-01  -3.04450      -1617.15       1617.15       2118.43       3735.58    
  39  0.183829      -1.69375      -899.670       899.670       1807.20       2706.87    
  40  0.417257     -0.874053      -464.271       464.271       1770.80       2235.07    
  41  0.647723E-01  -2.73688      -1453.75       1453.75       1775.35       3229.10    
  42  0.123950E-01  -4.39046      -2332.08       2332.08       1781.42       4113.50    
  43  0.281372E-01  -3.57066      -1896.63       1896.63       1828.34       3724.97    
  44  0.883044     -0.124380      -66.0670       66.0670       1740.61       1806.68    
  45  0.445413     -0.808754      -429.586       429.586       2259.08       2688.67    
  46  0.418101     -0.872031      -463.197       463.197       1797.48       2260.68    
  47  0.301534      -1.19887      -636.806       636.806       1735.45       2372.26    
  48  0.674500     -0.393783      -209.166       209.166       1721.97       1931.13    
  49  0.732783     -0.310905      -165.144       165.144       1838.76       2003.91    
  50  0.970355     -0.300929E-01  -15.9845       15.9845       2299.69       2315.68    
  51  0.981589     -0.185824E-01  -9.87043       9.87043       1761.73       1771.60    
  52  0.677253     -0.389711      -207.003       207.003       2616.91       2823.91    
  53  0.800731     -0.222230      -118.042       118.042       2609.55       2727.59    
  54  0.529544     -0.635738      -337.685       337.685       1909.06       2246.75    
  55  0.814619     -0.205035      -108.908       108.908       1889.18       1998.09    
  56  0.909218     -0.951702E-01  -50.5516       50.5516       1747.59       1798.15    
  57  0.269472      -1.31129      -696.519       696.519       1750.26       2446.78    
  58  0.166504      -1.79274      -952.249       952.249       2413.66       3365.91    
  59  0.328775      -1.11238      -590.864       590.864       2761.32       3352.18    
  60  0.333602      -1.09781      -583.123       583.123       1717.71       2300.83    
  61  0.213893      -1.54228      -819.213       819.213       2456.75       3275.97    
  62  0.401720     -0.911999      -484.427       484.427       1747.07       2231.50    
  63  0.453769     -0.790168      -419.714       419.714       1684.50       2104.22    
  64  0.649690E-01  -2.73384      -1452.14       1452.14       1935.34       3387.48    
  65  0.510128     -0.673093      -357.527       357.527       3311.49       3669.02    
  66  0.430053     -0.843847      -448.227       448.227       3013.46       3461.69    
  67  0.528469E-01  -2.94036      -1561.83       1561.83       3596.39       5158.22    
  68  0.887506     -0.119339      -63.3896       63.3896       1790.45       1853.84    
  69  0.499442     -0.694264      -368.773       368.773       1754.66       2123.43    
  70  0.432451     -0.838287      -445.274       445.274       2027.68       2472.95    
  71  0.637121     -0.450796      -239.449       239.449       3719.46       3958.91    
  72  0.523182     -0.647826      -344.106       344.106       1984.36       2328.46    
  73  0.221333      -1.50809      -801.052       801.052       4068.09       4869.15    
  74  0.597769     -0.514551      -273.314       273.314       1673.73       1947.05    
loop,thermsimp(1:2)        9   1292.00       875.942    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       1764.99        130.18          0.69         30.14          0.84          0.05        161.90
Just calling func    0   0        161.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       2445.09        130.15          0.69         30.04          1.06          0.05        161.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1764.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:        9
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       10
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       90     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -260.985       260.985       1580.47       1841.45    
   2  0.877337     -0.130865      -69.5115       69.5115       1761.73       1831.24    
   3  0.821280     -0.196891      -104.583       104.583       1710.39       1814.97    
   4  0.989636     -0.104181E-01  -5.53379       5.53379       1747.59       1753.13    
   5  0.492813     -0.707625      -375.869       375.869       1740.61       2116.48    
   6  0.904083     -0.100835      -53.5604       53.5604       1694.94       1748.50    
   7  0.490620     -0.712086      -378.239       378.239       1799.61       2177.85    
   8  0.572439     -0.557850      -296.313       296.313       1519.51       1815.82    
   9  0.588753     -0.529749      -281.387       281.387       1778.19       2059.57    
  10  0.341799      -1.07353      -570.228       570.228       1790.45       2360.68    
  11  0.449605     -0.799385      -424.610       424.610       1742.84       2167.45    
  12  0.740720     -0.300132      -159.421       159.421       1848.91       2008.33    
  13  0.173164E-01  -4.05610      -2154.48       2154.48       1721.97       3876.45    
  14  0.828389     -0.188272      -100.005       100.005       1673.73       1773.74    
  15  0.110451      -2.20318      -1170.27       1170.27       1736.53       2906.79    
  16  0.646816     -0.435693      -231.428       231.428       1770.57       2002.00    
  17  0.857676     -0.153529      -81.5499       81.5499       1839.42       1920.97    
  18  0.691202E-02  -4.97449      -2642.30       2642.30       1889.18       4531.48    
  19  0.530885     -0.633210      -336.342       336.342       1838.76       2175.11    
  20  0.742957     -0.297117      -157.820       157.820       1781.61       1939.43    
  21  0.883526E-01  -2.42642      -1288.84       1288.84       1763.87       3052.71    
  22  0.599138     -0.512263      -272.099       272.099       1669.92       1942.02    
  23  0.476407     -0.741482      -393.853       393.853       1684.50       2078.36    
  24  0.509994E-01  -2.97594      -1580.73       1580.73       1809.33       3390.06    
  25  0.669768     -0.400824      -212.906       212.906       1754.66       1967.56    
  26  0.874430     -0.134183      -71.2739       71.2739       1886.67       1957.95    
  27  0.830739     -0.185440      -98.5000       98.5000       1736.08       1834.58    
  28  0.166673      -1.79172      -951.711       951.711       1791.04       2742.75    
  29  0.578742     -0.546898      -290.496       290.496       1795.55       2086.05    
  30  0.433531     -0.835791      -443.948       443.948       1747.07       2191.02    
  31  0.979127     -0.210935E-01  -11.2042       11.2042       1770.80       1782.00    
  32  0.310252      -1.17037      -621.667       621.667       1909.06       2530.73    
  33  0.686879     -0.375597      -199.506       199.506       1797.48       1996.99    
  34  0.243104      -1.41427      -751.217       751.217       1751.68       2502.89    
  35  0.459407     -0.777818      -413.154       413.154       1705.34       2118.50    
  36  0.332163      -1.10213      -585.419       585.419       1717.71       2303.13    
  37  0.512243     -0.668956      -355.330       355.330       2299.69       2655.02    
  38  0.323240      -1.12936      -599.883       599.883       1984.36       2584.24    
  39  0.667455     -0.404284      -214.744       214.744       2191.36       2406.11    
  40  0.460037     -0.776449      -412.427       412.427       1735.45       2147.88    
  41  0.227415      -1.48098      -786.651       786.651       1788.35       2575.00    
  42  0.636494     -0.451780      -239.972       239.972       1750.26       1990.23    
  43  0.432078     -0.839149      -445.731       445.731       2027.68       2473.41    
  44  0.609015     -0.495913      -263.414       263.414       1839.48       2102.89    
  45  0.427755     -0.849205      -451.072       451.072       1710.27       2161.35    
  46  0.496712     -0.699745      -371.684       371.684       1666.68       2038.36    
  47  0.295308      -1.21974      -647.888       647.888       1758.12       2406.01    
  48  0.928979     -0.736692E-01  -39.1309       39.1309       1747.69       1786.82    
  49  0.245696E-01  -3.70625      -1968.65       1968.65       2259.08       4227.73    
  50  0.833617E-01  -2.48457      -1319.73       1319.73       1807.20       3126.93    
  51  0.499690     -0.693767      -368.509       368.509       1698.61       2067.11    
  52  0.320552      -1.13771      -604.319       604.319       2609.55       3213.86    
  53  0.151030E-01  -4.19286      -2227.12       2227.12       1919.37       4146.50    
  54  0.551054     -0.595922      -316.536       316.536       2616.91       2933.44    
  55  0.786630     -0.239997      -127.479       127.479       1780.87       1908.35    
  56  0.793760E-01  -2.53356      -1345.75       1345.75       1713.20       3058.95    
  57  0.456771     -0.783574      -416.212       416.212       1608.08       2024.30    
  58  0.613263     -0.488962      -259.722       259.722       1491.54       1751.26    
  59  0.407581     -0.897515      -476.734       476.734       1770.14       2246.87    
  60  0.214329      -1.54024      -818.131       818.131       1816.05       2634.18    
  61  0.543052     -0.610551      -324.307       324.307       1775.35       2099.66    
  62  0.861407     -0.149188      -79.2443       79.2443       2456.75       2536.00    
  63  0.727563     -0.318055      -168.941       168.941       1961.16       2130.10    
  64  0.954867     -0.461830E-01  -24.5310       24.5310       2761.32       2785.85    
  65  0.209413      -1.56345      -830.456       830.456       2413.66       3244.11    
  66  0.218233E-02  -6.12736      -3254.67       3254.67       1935.34       5190.02    
  67  0.990675     -0.936839E-02  -4.97621       4.97621       3013.46       3018.44    
  68  0.874543     -0.134054      -71.2054       71.2054       3311.49       3382.69    
  69  0.276161      -1.28677      -683.496       683.496       1828.34       2511.84    
  70  0.319398      -1.14132      -606.233       606.233       2118.43       2724.66    
  71  0.160691      -1.82827      -971.124       971.124       3719.46       4690.59    
  72  0.612149     -0.490779      -260.687       260.687       1781.42       2042.10    
  73  0.832427     -0.183410      -97.4218       97.4218       4068.09       4165.51    
  74  0.985697     -0.144064E-01  -7.65226       7.65226       1764.99       1772.64    
loop,thermsimp(1:2)       10   260.985       69.5115    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92       4492.11        128.96          0.68         30.56          1.24          0.05        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4492.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       10
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       11
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       91     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -547.444       547.444       1694.94       2242.39    
   2  0.318207      -1.14505      -608.219       608.219       1491.54       2099.76    
   3  0.410972E-01  -3.19181      -1695.40       1695.40       1747.59       3442.99    
   4  0.217948      -1.52350      -809.237       809.237       1764.99       2574.23    
   5  0.460755     -0.774888      -411.598       411.598       1673.73       2085.33    
   6  0.694214     -0.364975      -193.864       193.864       1770.80       1964.66    
   7  0.237764      -1.43648      -763.014       763.014       1747.69       2510.70    
   8  0.635477     -0.453379      -240.822       240.822       1710.39       1951.21    
   9  0.882831E-01  -2.42721      -1289.26       1289.26       1519.51       2808.77    
  10  0.889613     -0.116969      -62.1304       62.1304       1761.73       1823.86    
  11  0.236395      -1.44225      -766.081       766.081       1736.08       2502.16    
  12  0.785560     -0.241359      -128.203       128.203       1580.47       1708.67    
  13  0.253594      -1.37202      -728.778       728.778       1780.87       2509.64    
  14  0.767743     -0.264300      -140.389       140.389       1839.42       1979.81    
  15  0.425111     -0.855405      -454.366       454.366       1781.61       2235.98    
  16  0.334680E-01  -3.39717      -1804.47       1804.47       1669.92       3474.39    
  17  0.737903     -0.303943      -161.445       161.445       1886.67       2048.12    
  18  0.530906     -0.633170      -336.321       336.321       1754.66       2090.98    
  19  0.811772     -0.208536      -110.768       110.768       1750.26       1861.03    
  20  0.781494     -0.246548      -130.959       130.959       1797.48       1928.44    
  21  0.668871     -0.402164      -213.618       213.618       1770.57       1984.19    
  22  0.609633     -0.494898      -262.875       262.875       1848.91       2111.78    
  23  0.732795E-01  -2.61347      -1388.20       1388.20       1608.08       2996.28    
  24  0.999755     -0.244962E-03 -0.130117      0.130117       1666.68       1666.81    
  25  0.556911     -0.585350      -310.921       310.921       1781.42       2092.34    
  26  0.381942     -0.962485      -511.244       511.244       1778.19       2289.43    
  27  0.230973      -1.46546      -778.407       778.407       1698.61       2477.01    
  28  0.791084     -0.234351      -124.481       124.481       1684.50       1808.99    
  29  0.122039      -2.10341      -1117.27       1117.27       1795.55       2912.82    
  30  0.411383     -0.888231      -471.802       471.802       1775.35       2247.15    
  31  0.753656     -0.282819      -150.225       150.225       1839.48       1989.70    
  32  0.846821     -0.166266      -88.3157       88.3157       1740.61       1828.93    
  33  0.577745     -0.548622      -291.412       291.412       1705.34       1996.75    
  34  0.859903     -0.150936      -80.1727       80.1727       1961.16       2041.34    
  35  0.915816     -0.879395E-01  -46.7109       46.7109       1735.45       1782.16    
  36  0.220499      -1.51186      -803.056       803.056       1710.27       2513.33    
  37  0.539962     -0.616256      -327.337       327.337       1742.84       2070.18    
  38  0.810725     -0.209827      -111.454       111.454       1838.76       1950.22    
  39  0.901567     -0.103621      -55.0403       55.0403       1799.61       1854.65    
  40  0.196148      -1.62888      -865.215       865.215       1747.07       2612.28    
  41  0.413437     -0.883250      -469.156       469.156       1770.14       2239.29    
  42  0.192892      -1.64562      -874.107       874.107       1717.71       2591.81    
  43  0.194290      -1.63840      -870.271       870.271       1790.45       2660.72    
  44  0.988313     -0.117563E-01  -6.24460       6.24460       1758.12       1764.37    
  45  0.917980     -0.855792E-01  -45.4571       45.4571       2191.36       2236.82    
  46  0.136083      -1.99449      -1059.41       1059.41       2027.68       3087.09    
  47  0.847126     -0.165905      -88.1241       88.1241       1751.68       1839.80    
  48  0.513003     -0.667474      -354.542       354.542       1828.34       2182.88    
  49  0.562161     -0.575967      -305.936       305.936       1909.06       2215.00    
  50  0.926079     -0.767957E-01  -40.7916       40.7916       2456.75       2497.54    
  51  0.890313     -0.116182      -61.7124       61.7124       1788.35       1850.06    
  52  0.857665     -0.153542      -81.5567       81.5567       1984.36       2065.91    
  53  0.599877     -0.511031      -271.445       271.445       1816.05       2087.49    
  54  0.835330     -0.179929      -95.5727       95.5727       2299.69       2395.27    
  55  0.323336      -1.12906      -599.726       599.726       2118.43       2718.15    
  56  0.305042      -1.18731      -630.662       630.662       1791.04       2421.71    
  57  0.980883     -0.193016E-01  -10.2524       10.2524       2761.32       2771.57    
  58  0.129682      -2.04267      -1085.01       1085.01       1736.53       2821.53    
  59  0.738352     -0.303335      -161.122       161.122       2616.91       2778.03    
  60  0.383117     -0.959416      -509.613       509.613       3013.46       3523.07    
  61  0.524900     -0.644547      -342.364       342.364       1763.87       2106.23    
  62  0.594829     -0.519481      -275.933       275.933       1713.20       1989.13    
  63  0.596925     -0.515963      -274.064       274.064       1807.20       2081.27    
  64  0.462523     -0.771060      -409.564       409.564       2609.55       3019.11    
  65  0.837977     -0.176764      -93.8920       93.8920       2413.66       2507.55    
  66  0.380204     -0.967046      -513.667       513.667       3311.49       3825.16    
  67  0.135974E-01  -4.29788      -2282.91       2282.91       1809.33       4092.24    
  68  0.816466     -0.202771      -107.706       107.706       1721.97       1829.67    
  69  0.877970     -0.130143      -69.1279       69.1279       1919.37       1988.50    
  70  0.468378     -0.758480      -402.882       402.882       4068.09       4470.98    
  71  0.238817E-01  -3.73464      -1983.73       1983.73       2259.08       4242.81    
  72  0.517025     -0.659665      -350.394       350.394       1889.18       2239.57    
  73  0.583879     -0.538062      -285.803       285.803       3719.46       4005.26    
  74  0.987129E-03  -6.92071      -3676.08       3676.08       4492.11       8168.19    
loop,thermsimp(1:2)       11   547.444       608.219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93       1935.34        130.25          0.68         30.12          0.66          0.05        161.77
Just calling func    0   0        161.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1935.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       11
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       12
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       92     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1368.98       1368.98       1666.68       3035.67    
   2  0.804470     -0.217571      -115.567       115.567       1580.47       1696.03    
   3  0.984017     -0.161120E-01  -8.55822       8.55822       1758.12       1766.68    
   4  0.587639     -0.531643      -282.393       282.393       1735.45       2017.84    
   5  0.523810     -0.646626      -343.469       343.469       1684.50       2027.97    
   6  0.930607     -0.719181E-01  -38.2008       38.2008       1761.73       1799.93    
   7  0.360114E-01  -3.32392      -1765.57       1765.57       1740.61       3506.18    
   8  0.963815     -0.368556E-01  -19.5766       19.5766       1721.97       1741.54    
   9  0.201264E-01  -3.90572      -2074.60       2074.60       1751.68       3826.28    
  10  0.954897     -0.461522E-01  -24.5147       24.5147       1788.35       1812.86    
  11  0.374160     -0.983071      -522.179       522.179       1799.61       2321.78    
  12  0.174967      -1.74316      -925.913       925.913       1750.26       2676.17    
  13  0.381618     -0.963335      -511.695       511.695       1797.48       2309.17    
  14  0.191097      -1.65498      -879.075       879.075       1838.76       2717.84    
  15  0.425287     -0.854991      -454.146       454.146       1710.39       2164.53    
  16  0.426180     -0.852893      -453.032       453.032       1770.80       2223.83    
  17  0.615671     -0.485042      -257.640       257.640       1839.42       2097.06    
  18  0.787264     -0.239192      -127.052       127.052       1770.57       1897.62    
  19  0.812636     -0.207472      -110.203       110.203       1919.37       2029.57    
  20  0.917241E-01  -2.38897      -1268.95       1268.95       1713.20       2982.15    
  21  0.671310     -0.398525      -211.685       211.685       1839.48       2051.16    
  22  0.548174     -0.601162      -319.319       319.319       1705.34       2024.66    
  23  0.134851      -2.00359      -1064.25       1064.25       1961.16       3025.41    
  24  0.373236     -0.985545      -523.493       523.493       1886.67       2410.17    
  25  0.578774     -0.546843      -290.467       290.467       1984.36       2274.82    
  26  0.910021     -0.942872E-01  -50.0826       50.0826       1742.84       1792.93    
  27  0.192323      -1.64858      -875.676       875.676       1807.20       2682.88    
  28  0.366342      -1.00419      -533.395       533.395       1673.73       2207.13    
  29  0.686994     -0.375430      -199.417       199.417       1816.05       2015.46    
  30  0.486551     -0.720414      -382.663       382.663       1754.66       2137.32    
  31  0.256801      -1.35945      -722.102       722.102       1781.42       2503.52    
  32  0.284977      -1.25535      -666.804       666.804       1491.54       2158.35    
  33  0.903072     -0.101953      -54.1542       54.1542       1763.87       1818.02    
  34  0.226450      -1.48523      -788.911       788.911       1848.91       2637.82    
  35  0.446078     -0.807261      -428.793       428.793       1828.34       2257.13    
  36  0.152634      -1.87971      -998.448       998.448       1909.06       2907.51    
  37  0.511955     -0.669518      -355.628       355.628       1781.61       2137.24    
  38  0.513138     -0.667210      -354.402       354.402       2191.36       2545.76    
  39  0.637309     -0.450501      -239.293       239.293       1770.14       2009.43    
  40  0.861477     -0.149107      -79.2012       79.2012       1889.18       1968.38    
  41  0.817364     -0.201671      -107.122       107.122       1694.94       1802.06    
  42  0.793820     -0.230898      -122.646       122.646       1775.35       1898.00    
  43  0.253309      -1.37315      -729.374       729.374       1778.19       2507.56    
  44  0.702532     -0.353065      -187.538       187.538       2299.69       2487.23    
  45  0.822324     -0.195620      -103.908       103.908       1791.04       1894.95    
  46  0.720485     -0.327831      -174.134       174.134       1698.61       1872.74    
  47  0.881589     -0.126029      -66.9431       66.9431       2456.75       2523.70    
  48  0.584479     -0.537035      -285.257       285.257       1736.08       2021.34    
  49  0.697197     -0.360688      -191.587       191.587       2413.66       2605.25    
  50  0.320931      -1.13653      -603.691       603.691       1780.87       2384.56    
  51  0.780071     -0.248371      -131.927       131.927       1747.69       1879.62    
  52  0.318322E-01  -3.44728      -1831.09       1831.09       1710.27       3541.37    
  53  0.693387     -0.366167      -194.497       194.497       1764.99       1959.49    
  54  0.332128      -1.10223      -585.474       585.474       1717.71       2303.18    
  55  0.891883E-01  -2.41701      -1283.84       1283.84       1747.07       3030.91    
  56  0.960735     -0.400567E-01  -21.2770       21.2770       1790.45       1811.73    
  57  0.726634     -0.319332      -169.620       169.620       2118.43       2288.05    
  58  0.867850     -0.141737      -75.2864       75.2864       2761.32       2836.61    
  59  0.960075     -0.407444E-01  -21.6422       21.6422       2616.91       2638.55    
  60  0.303374E-01  -3.49537      -1856.64       1856.64       1519.51       3376.15    
  61  0.159557      -1.83535      -974.885       974.885       1736.53       2711.41    
  62  0.487506     -0.718453      -381.621       381.621       1795.55       2177.17    
  63  0.978612E-01  -2.32420      -1234.55       1234.55       1608.08       2842.63    
  64  0.405010     -0.903843      -480.095       480.095       2609.55       3089.64    
  65  0.199088      -1.61401      -857.313       857.313       2027.68       2884.99    
  66  0.621424     -0.475741      -252.700       252.700       1747.59       2000.29    
  67  0.630612     -0.461065      -244.904       244.904       1669.92       1914.82    
  68  0.842429     -0.171466      -91.0777       91.0777       3013.46       3104.54    
  69  0.887493     -0.119355      -63.3979       63.3979       3311.49       3374.89    
  70  0.813538     -0.206363      -109.614       109.614       3719.46       3829.07    
  71  0.901945     -0.103202      -54.8179       54.8179       1809.33       1864.15    
  72  0.789044E-01  -2.53952      -1348.92       1348.92       2259.08       3608.00    
  73  0.325005      -1.12391      -596.991       596.991       4068.09       4665.08    
  74  0.701704     -0.354243      -188.163       188.163       1935.34       2123.51    
loop,thermsimp(1:2)       12   1368.98       115.567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94       1889.46        129.55          0.64         30.15          1.30          0.05        161.71
Just calling func    0   0        161.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1889.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       12
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       13
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       93     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -72.4871       72.4871       1580.47       1652.95    
   2  0.311340      -1.16687      -619.807       619.807       1721.97       2341.77    
   3  0.293828      -1.22476      -650.557       650.557       1758.12       2408.68    
   4  0.586668     -0.533296      -283.271       283.271       1742.84       2026.11    
   5  0.360311      -1.02079      -542.213       542.213       1761.73       2303.94    
   6  0.315643      -1.15314      -612.515       612.515       1694.94       2307.46    
   7  0.481464     -0.730923      -388.245       388.245       1790.45       2178.70    
   8  0.720279     -0.328116      -174.286       174.286       1788.35       1962.64    
   9  0.551471     -0.595166      -316.135       316.135       1763.87       2080.00    
  10  0.524434     -0.645435      -342.836       342.836       1809.33       2152.17    
  11  0.781600     -0.246412      -130.887       130.887       1698.61       1829.49    
  12  0.353648      -1.03945      -552.127       552.127       1747.69       2299.82    
  13  0.451044     -0.796190      -422.913       422.913       1791.04       2213.96    
  14  0.325353      -1.12284      -596.422       596.422       1770.57       2366.99    
  15  0.312157      -1.16425      -618.414       618.414       1775.35       2393.77    
  16  0.432418     -0.838362      -445.313       445.313       1669.92       2115.23    
  17  0.296543      -1.21556      -645.671       645.671       1764.99       2410.66    
  18  0.705416     -0.348967      -185.361       185.361       1889.18       2074.54    
  19  0.146505      -1.92069      -1020.22       1020.22       1747.59       2767.81    
  20  0.471608     -0.751607      -399.231       399.231       1770.14       2169.37    
  21  0.633095     -0.457134      -242.816       242.816       1816.05       2058.86    
  22  0.754855     -0.281230      -149.381       149.381       1735.45       1884.83    
  23  0.444501E-01  -3.11339      -1653.74       1653.74       1736.08       3389.82    
  24  0.160973      -1.82652      -970.192       970.192       1705.34       2675.53    
  25  0.943694     -0.579536E-01  -30.7832       30.7832       1684.50       1715.29    
  26  0.187304      -1.67502      -889.724       889.724       1919.37       2809.10    
  27  0.840922     -0.173257      -92.0288       92.0288       1839.48       1931.51    
  28  0.888648     -0.118054      -62.7067       62.7067       1839.42       1902.12    
  29  0.920614E-01  -2.38530      -1267.00       1267.00       1935.34       3202.34    
  30  0.906493     -0.981722E-01  -52.1462       52.1462       1781.61       1833.76    
  31  0.221761      -1.50616      -800.026       800.026       1754.66       2554.68    
  32  0.248725      -1.39141      -739.075       739.075       1491.54       2230.62    
  33  0.315928      -1.15224      -612.037       612.037       1710.39       2322.42    
  34  0.949967     -0.513283E-01  -27.2641       27.2641       1795.55       1822.82    
  35  0.802748     -0.219715      -116.706       116.706       1673.73       1790.44    
  36  0.558987     -0.581628      -308.944       308.944       1770.80       2079.74    
  37  0.638133     -0.449209      -238.606       238.606       1828.34       2066.95    
  38  0.637852     -0.449648      -238.840       238.840       1984.36       2223.20    
  39  0.382908     -0.959961      -509.903       509.903       2118.43       2628.33    
  40  0.982834     -0.173149E-01  -9.19719       9.19719       1717.71       1726.90    
  41  0.497022     -0.699120      -371.352       371.352       1797.48       2168.83    
  42  0.263620      -1.33325      -708.181       708.181       1799.61       2507.79    
  43  0.296939      -1.21423      -644.963       644.963       1780.87       2425.83    
  44  0.784161     -0.243141      -129.149       129.149       1886.67       2015.82    
  45  0.545321     -0.606380      -322.091       322.091       2299.69       2621.78    
  46  0.770080     -0.261260      -138.774       138.774       1781.42       1920.19    
  47  0.358755      -1.02511      -544.511       544.511       1778.19       2322.70    
  48  0.325126      -1.12354      -596.793       596.793       2456.75       3053.55    
  49  0.599396     -0.511832      -271.870       271.870       2191.36       2463.23    
  50  0.323708      -1.12791      -599.115       599.115       2413.66       3012.77    
  51  0.329142      -1.11127      -590.271       590.271       1848.91       2439.18    
  52  0.685661     -0.377371      -200.449       200.449       2616.91       2817.36    
  53  0.360361      -1.02065      -542.138       542.138       1750.26       2292.40    
  54  0.665281     -0.407545      -216.476       216.476       1807.20       2023.68    
  55  0.983321     -0.168196E-01  -8.93409       8.93409       1736.53       1745.46    
  56  0.644247     -0.439672      -233.541       233.541       1838.76       2072.31    
  57  0.735645     -0.307008      -163.074       163.074       2761.32       2924.39    
  58  0.680276     -0.385257      -204.637       204.637       1608.08       1812.72    
  59  0.864073     -0.146098      -77.6029       77.6029       2027.68       2105.28    
  60  0.788785     -0.237262      -126.026       126.026       1909.06       2035.09    
  61  0.429383     -0.845405      -449.054       449.054       1713.20       2162.26    
  62  0.798857     -0.224573      -119.287       119.287       1961.16       2080.45    
  63  0.946983     -0.544737E-01  -28.9348       28.9348       1747.07       1776.00    
  64  0.229664      -1.47114      -781.425       781.425       1666.68       2448.11    
  65  0.655912     -0.421729      -224.010       224.010       2609.55       2833.56    
  66  0.236982      -1.43977      -764.763       764.763       3013.46       3778.22    
  67  0.588628     -0.529960      -281.499       281.499       3311.49       3592.99    
  68  0.430113     -0.843707      -448.152       448.152       1519.51       1967.66    
  69  0.384455     -0.955929      -507.761       507.761       1740.61       2248.37    
  70  0.162044E-01  -4.12247      -2189.73       2189.73       1710.27       3900.01    
  71  0.769503     -0.262010      -139.172       139.172       2259.08       2398.25    
  72  0.220892      -1.51008      -802.110       802.110       1751.68       2553.79    
  73  0.978294E-01  -2.32453      -1234.72       1234.72       3719.46       4954.18    
  74  0.310072      -1.17095      -621.975       621.975       1889.46       2511.44    
loop,thermsimp(1:2)       13   72.4871       619.807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95       2485.96        129.66          0.72         30.60          0.50          0.05        161.53
Just calling func    0   0        161.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2485.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       13
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       14
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       94     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -565.898       565.898       1580.47       2146.36    
   2  0.267720      -1.31781      -699.984       699.984       1684.50       2384.49    
   3  0.279825      -1.27359      -676.495       676.495       1717.71       2394.20    
   4  0.281095      -1.26906      -674.089       674.089       1736.53       2410.62    
   5  0.245867      -1.40297      -745.214       745.214       1747.07       2492.28    
   6  0.914239     -0.896636E-01  -47.6267       47.6267       1673.73       1721.36    
   7  0.180116      -1.71415      -910.508       910.508       1608.08       2518.59    
   8  0.567917     -0.565780      -300.526       300.526       1795.55       2096.08    
   9  0.431941     -0.839465      -445.899       445.899       1698.61       2144.51    
  10  0.877920     -0.130199      -69.1581       69.1581       1781.61       1850.77    
  11  0.280355      -1.27170      -675.488       675.488       1735.45       2410.94    
  12  0.486947     -0.719601      -382.231       382.231       1839.42       2221.65    
  13  0.216546      -1.52995      -812.665       812.665       1781.42       2594.08    
  14  0.483718E-02  -5.33142      -2831.90       2831.90       1839.48       4671.37    
  15  0.785152E-03  -7.14963      -3797.67       3797.67       1788.35       5586.02    
  16  0.300781      -1.20137      -638.133       638.133       1519.51       2157.64    
  17  0.869691     -0.139618      -74.1608       74.1608       1886.67       1960.84    
  18  0.694261E-01  -2.66749      -1416.89       1416.89       1807.20       3224.09    
  19  0.635475     -0.453382      -240.823       240.823       1742.84       1983.67    
  20  0.894977     -0.110958      -58.9374       58.9374       1909.06       1968.00    
  21  0.442267     -0.815841      -433.351       433.351       1816.05       2249.40    
  22  0.283362      -1.26103      -669.821       669.821       1828.34       2498.16    
  23  0.518611     -0.656601      -348.767       348.767       1838.76       2187.53    
  24  0.858122E-01  -2.45559      -1304.34       1304.34       1889.18       3193.52    
  25  0.461153     -0.774026      -411.140       411.140       1770.80       2181.94    
  26  0.180026      -1.71465      -910.774       910.774       1763.87       2674.64    
  27  0.446938E-01  -3.10792      -1650.84       1650.84       1961.16       3612.00    
  28  0.152352      -1.88156      -999.430       999.430       2027.68       3027.11    
  29  0.163937E-01  -4.11086      -2183.57       2183.57       1669.92       3853.48    
  30  0.721347     -0.326635      -173.499       173.499       1809.33       1982.83    
  31  0.813323     -0.206626      -109.754       109.754       1713.20       1822.95    
  32  0.569343     -0.563273      -299.194       299.194       1797.48       2096.67    
  33  0.275899      -1.28772      -683.999       683.999       1770.14       2454.13    
  34  0.933187     -0.691492E-01  -36.7300       36.7300       1790.45       1827.18    
  35  0.716570     -0.333279      -177.028       177.028       1791.04       1968.07    
  36  0.405413     -0.902848      -479.566       479.566       1984.36       2463.92    
  37  0.907528     -0.970314E-01  -51.5402       51.5402       1491.54       1543.08    
  38  0.554651     -0.589416      -313.080       313.080       1740.61       2053.69    
  39  0.419962     -0.867592      -460.839       460.839       1750.26       2211.10    
  40  0.824173     -0.193375      -102.715       102.715       1747.69       1850.40    
  41  0.865647     -0.144278      -76.6365       76.6365       1761.73       1838.36    
  42  0.300944      -1.20083      -637.847       637.847       1694.94       2332.79    
  43  0.339688      -1.07973      -573.520       573.520       1710.39       2283.91    
  44  0.217032      -1.52771      -811.476       811.476       1778.19       2589.66    
  45  0.792618E-01  -2.53500      -1346.52       1346.52       1721.97       3068.48    
  46  0.997677     -0.232582E-02  -1.23541       1.23541       1770.57       1771.80    
  47  0.174239      -1.74733      -928.128       928.128       1775.35       2703.48    
  48  0.834084     -0.181422      -96.3658       96.3658       2259.08       2355.45    
  49  0.324404      -1.12577      -597.974       597.974       1758.12       2356.09    
  50  0.927598     -0.751564E-01  -39.9209       39.9209       1764.99       1804.91    
  51  0.981384     -0.187911E-01  -9.98129       9.98129       1780.87       1790.85    
  52  0.849105     -0.163572      -86.8847       86.8847       1848.91       1935.79    
  53  0.148698      -1.90584      -1012.33       1012.33       1666.68       2679.01    
  54  0.389930     -0.941789      -500.251       500.251       2191.36       2691.61    
  55  0.183568      -1.69517      -900.424       900.424       1799.61       2700.03    
  56  0.661220     -0.413669      -219.729       219.729       1889.46       2109.19    
  57  0.242183      -1.41806      -753.232       753.232       1751.68       2504.91    
  58  0.182262      -1.70231      -904.218       904.218       1754.66       2658.88    
  59  0.299801      -1.20464      -639.867       639.867       2299.69       2939.56    
  60  0.950117     -0.511698E-01  -27.1799       27.1799       2118.43       2145.61    
  61  0.184593      -1.68960      -897.467       897.467       1705.34       2602.81    
  62  0.730970     -0.313382      -166.459       166.459       1747.59       1914.05    
  63  0.753232E-01  -2.58597      -1373.59       1373.59       1919.37       3292.96    
  64  0.501460     -0.690231      -366.630       366.630       2616.91       2983.54    
  65  0.513248E-01  -2.96958      -1577.35       1577.35       2609.55       4186.90    
  66  0.931416     -0.710492E-01  -37.7393       37.7393       2761.32       2799.06    
  67  0.637420E-01  -2.75291      -1462.27       1462.27       2413.66       3875.92    
  68  0.322234E-01  -3.43506      -1824.60       1824.60       2456.75       4281.36    
  69  0.791156     -0.234260      -124.432       124.432       1935.34       2059.77    
  70  0.606746     -0.499645      -265.397       265.397       1736.08       2001.48    
  71  0.115774      -2.15611      -1145.26       1145.26       3311.49       4456.75    
  72  0.574132     -0.554896      -294.745       294.745       3013.46       3308.21    
  73  0.877193     -0.131028      -69.5984       69.5984       1710.27       1779.87    
  74  0.113746      -2.17379      -1154.65       1154.65       2485.96       3640.61    
loop,thermsimp(1:2)       14   565.898       699.984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       1736.21        130.06          0.67         30.14          0.81          0.05        161.73
Just calling func    0   0        161.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97       1712.25        129.95          0.67         30.15          1.22          0.05        162.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1712.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       14
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       15
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       96     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -780.767       780.767       1491.54       2272.31    
   2  0.322822      -1.13066      -600.571       600.571       1673.73       2274.30    
   3  0.327586      -1.11601      -592.789       592.789       1770.57       2363.36    
   4  0.799078     -0.224296      -119.140       119.140       1710.27       1829.41    
   5  0.698072     -0.359433      -190.920       190.920       1780.87       1971.79    
   6  0.733871     -0.309421      -164.356       164.356       1764.99       1929.34    
   7  0.823872     -0.193740      -102.909       102.909       1713.20       1816.11    
   8  0.800045     -0.223087      -118.497       118.497       1790.45       1908.95    
   9  0.162010      -1.82010      -966.781       966.781       1761.73       2728.51    
  10  0.113138      -2.17915      -1157.50       1157.50       1747.69       2905.19    
  11  0.973966     -0.263784E-01  -14.0114       14.0114       1781.61       1795.62    
  12  0.998107     -0.189521E-02  -1.00668       1.00668       1747.59       1748.60    
  13  0.631351     -0.459893      -244.282       244.282       1848.91       2093.19    
  14  0.698229     -0.359208      -190.801       190.801       1886.67       2077.48    
  15  0.359252      -1.02373      -543.776       543.776       1909.06       2452.84    
  16  0.936266     -0.658562E-01  -34.9809       34.9809       1791.04       1826.02    
  17  0.843107     -0.170662      -90.6505       90.6505       1809.33       1899.98    
  18  0.181284      -1.70769      -907.076       907.076       1742.84       2649.92    
  19  0.354246      -1.03777      -551.230       551.230       1736.08       2287.31    
  20  0.981540     -0.186324E-01  -9.89699       9.89699       1740.61       1750.51    
  21  0.582284E-01  -2.84338      -1510.32       1510.32       1935.34       3445.66    
  22  0.935088     -0.671143E-01  -35.6492       35.6492       1795.55       1831.20    
  23  0.682144     -0.382515      -203.181       203.181       1797.48       2000.66    
  24  0.441439     -0.817715      -434.346       434.346       1889.46       2323.81    
  25  0.325829      -1.12138      -595.645       595.645       1698.61       2294.25    
  26  0.956968E-01  -2.34657      -1246.43       1246.43       2118.43       3364.86    
  27  0.465124E-01  -3.06804      -1629.65       1629.65       1580.47       3210.12    
  28  0.645503     -0.437726      -232.507       232.507       1519.51       1752.01    
  29  0.184751      -1.68875      -897.012       897.012       1770.80       2667.81    
  30  0.676303     -0.391115      -207.749       207.749       1838.76       2046.51    
  31  0.408248     -0.895880      -475.865       475.865       1750.26       2226.12    
  32  0.215511      -1.53474      -815.211       815.211       1839.42       2654.63    
  33  0.762109     -0.271666      -144.301       144.301       1816.05       1960.35    
  34  0.445022     -0.809632      -430.053       430.053       1710.39       2140.44    
  35  0.667113     -0.404797      -215.016       215.016       1694.94       1909.96    
  36  0.995785     -0.422376E-02  -2.24354       2.24354       2259.08       2261.32    
  37  0.278840      -1.27712      -678.368       678.368       1758.12       2436.49    
  38  0.624255     -0.471196      -250.285       250.285       1684.50       1934.79    
  39  0.368212     -0.999097      -530.691       530.691       1717.71       2248.40    
  40  0.330266      -1.10786      -588.461       588.461       1736.53       2324.99    
  41  0.969155     -0.313304E-01  -16.6418       16.6418       1735.45       1752.09    
  42  0.686816     -0.375688      -199.554       199.554       1770.14       1969.69    
  43  0.201053      -1.60419      -852.096       852.096       1984.36       2836.45    
  44  0.481166     -0.731544      -388.574       388.574       1747.07       2135.64    
  45  0.992829     -0.719725E-02  -3.82297       3.82297       1828.34       1832.16    
  46  0.665697     -0.406921      -216.144       216.144       1751.68       1967.82    
  47  0.991934E-02  -4.61327      -2450.43       2450.43       1608.08       4058.52    
  48  0.211644      -1.55285      -824.828       824.828       1778.19       2603.02    
  49  0.908243E-01  -2.39883      -1274.19       1274.19       1781.42       3055.60    
  50  0.643762     -0.440426      -233.942       233.942       1705.34       1939.28    
  51  0.568794E-01  -2.86682      -1522.77       1522.77       1754.66       3277.43    
  52  0.159466      -1.83592      -975.188       975.188       1763.87       2739.06    
  53  0.918851     -0.846310E-01  -44.9535       44.9535       1666.68       1711.63    
  54  0.865178     -0.144820      -76.9241       76.9241       2191.36       2268.29    
  55  0.826009     -0.191150      -101.533       101.533       1799.61       1901.14    
  56  0.665816E-02  -5.01191      -2662.18       2662.18       1775.35       4437.53    
  57  0.998155     -0.184716E-02 -0.981155      0.981155       2761.32       2762.30    
  58  0.875957E-01  -2.43502      -1293.41       1293.41       2299.69       3593.11    
  59  0.546955     -0.603388      -320.502       320.502       2616.91       2937.41    
  60  0.953933     -0.471617E-01  -25.0509       25.0509       2027.68       2052.73    
  61  0.131488      -2.02884      -1077.66       1077.66       1721.97       2799.63    
  62  0.415197     -0.879003      -466.901       466.901       1889.18       2356.08    
  63  0.543800E-02  -5.21434      -2769.71       2769.71       1807.20       4576.91    
  64  0.821907     -0.196128      -104.177       104.177       1919.37       2023.55    
  65  0.590302     -0.527122      -279.991       279.991       3013.46       3293.45    
  66  0.380117     -0.967276      -513.789       513.789       1961.16       2474.95    
  67  0.640684     -0.445218      -236.487       236.487       2485.96       2722.44    
  68  0.268290      -1.31569      -698.853       698.853       1669.92       2368.77    
  69  0.625870     -0.468612      -248.913       248.913       2413.66       2662.57    
  70  0.937362     -0.646862E-01  -34.3594       34.3594       2609.55       2643.90    
  71  0.246375      -1.40090      -744.117       744.117       2456.75       3200.87    
  72  0.163534      -1.81073      -961.808       961.808       3311.49       4273.30    
  73  0.231078      -1.46500      -778.164       778.164       1839.48       2617.64    
  74  0.812335     -0.207842      -110.400       110.400       1712.25       1822.65    
loop,thermsimp(1:2)       15   780.767       600.571    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98       1651.11        128.60          0.63         29.08          3.67          0.05        162.03
Just calling func    0   0        162.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99       1632.39        128.07          0.62         28.39          4.42          0.05        161.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1632.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       15
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       16
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       98     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -310.069       310.069       1666.68       1976.75    
   2  0.850944     -0.161409      -85.7357       85.7357       1747.59       1833.33    
   3  0.343999      -1.06712      -566.820       566.820       1740.61       2307.43    
   4  0.481777E-02  -5.33544      -2834.03       2834.03       1519.51       4353.54    
   5  0.146991      -1.91738      -1018.46       1018.46       1735.45       2753.91    
   6  0.545677     -0.605728      -321.745       321.745       1781.61       2103.36    
   7  0.761940     -0.271888      -144.419       144.419       1713.20       1857.62    
   8  0.944477     -0.571238E-01  -30.3425       30.3425       1712.25       1742.59    
   9  0.965249     -0.353688E-01  -18.7869       18.7869       1791.04       1809.83    
  10  0.634176     -0.455429      -241.911       241.911       1710.27       1952.18    
  11  0.793205     -0.231673      -123.058       123.058       1795.55       1918.61    
  12  0.743605     -0.296246      -157.357       157.357       1828.34       1985.70    
  13  0.983069E-01  -2.31966      -1232.14       1232.14       1809.33       3041.47    
  14  0.618437     -0.480560      -255.259       255.259       1799.61       2054.87    
  15  0.429182     -0.845875      -449.304       449.304       1790.45       2239.75    
  16  0.771528     -0.259382      -137.776       137.776       1694.94       1832.72    
  17  0.218286      -1.52195      -808.414       808.414       1764.99       2573.40    
  18  0.556408     -0.586254      -311.401       311.401       1684.50       1995.91    
  19  0.526292     -0.641899      -340.958       340.958       1705.34       2046.30    
  20  0.665532     -0.407169      -216.276       216.276       1816.05       2032.32    
  21  0.261756      -1.34034      -711.951       711.951       1751.68       2463.63    
  22  0.975508     -0.247971E-01  -13.1715       13.1715       1770.14       1783.31    
  23  0.257613      -1.35630      -720.425       720.425       1780.87       2501.29    
  24  0.981555E-01  -2.32120      -1232.95       1232.95       1797.48       3030.43    
  25  0.955054     -0.459870E-01  -24.4269       24.4269       1919.37       1943.80    
  26  0.887906     -0.118890      -63.1508       63.1508       1838.76       1901.91    
  27  0.407043     -0.898837      -477.436       477.436       2027.68       2505.11    
  28  0.876870     -0.131396      -69.7938       69.7938       1886.67       1956.47    
  29  0.957152     -0.437935E-01  -23.2618       23.2618       1848.91       1872.17    
  30  0.827730     -0.189068      -100.427       100.427       1747.07       1847.50    
  31  0.289027      -1.24124      -659.308       659.308       1710.39       2369.69    
  32  0.125230      -2.07760      -1103.56       1103.56       1750.26       2853.82    
  33  0.242443      -1.41699      -752.663       752.663       1717.71       2470.37    
  34  0.654103     -0.424490      -225.477       225.477       2259.08       2484.56    
  35  0.811871     -0.208414      -110.703       110.703       2191.36       2302.07    
  36  0.145201E-01  -4.23222      -2248.03       2248.03       1491.54       3739.57    
  37  0.344449      -1.06581      -566.126       566.126       1673.73       2239.86    
  38  0.265532      -1.32602      -704.342       704.342       1736.08       2440.42    
  39  0.811851     -0.208438      -110.716       110.716       1698.61       1809.32    
  40  0.983290E-01  -2.31944      -1232.02       1232.02       1889.46       3121.48    
  41  0.347314      -1.05753      -561.727       561.727       1736.53       2298.25    
  42  0.923773     -0.792888E-01  -42.1159       42.1159       1889.18       1931.29    
  43  0.690375     -0.370520      -196.809       196.809       1770.57       1967.38    
  44  0.227523      -1.48051      -786.401       786.401       1669.92       2456.32    
  45  0.652275     -0.427289      -226.963       226.963       1758.12       1985.08    
  46  0.669640     -0.401014      -213.007       213.007       1909.06       2122.07    
  47  0.288804      -1.24201      -659.718       659.718       1961.16       2620.88    
  48  0.404648     -0.904738      -480.570       480.570       1778.19       2258.76    
  49  0.371042     -0.991440      -526.624       526.624       1839.48       2366.10    
  50  0.308424      -1.17628      -624.806       624.806       2609.55       3234.35    
  51  0.911221     -0.929703E-01  -49.3831       49.3831       1742.84       1792.23    
  52  0.615436     -0.485425      -257.843       257.843       1839.42       2097.26    
  53  0.780328     -0.248041      -131.752       131.752       2413.66       2545.41    
  54  0.127539      -2.05933      -1093.86       1093.86       1770.80       2864.65    
  55  0.709081     -0.343786      -182.609       182.609       2485.96       2668.56    
  56  0.974925     -0.253942E-01  -13.4887       13.4887       1761.73       1775.21    
  57  0.834943     -0.180392      -95.8187       95.8187       1763.87       1859.69    
  58  0.696274     -0.362013      -192.290       192.290       2761.32       2953.61    
  59  0.623965     -0.471660      -250.532       250.532       1721.97       1972.50    
  60  0.620467     -0.477282      -253.518       253.518       1984.36       2237.87    
  61  0.983840E-01  -2.31888      -1231.72       1231.72       1747.69       2979.41    
  62  0.452904     -0.792074      -420.726       420.726       2616.91       3037.63    
  63  0.731276     -0.312965      -166.238       166.238       1781.42       1947.65    
  64  0.136630      -1.99048      -1057.28       1057.28       2456.75       3514.04    
  65  0.819737     -0.198772      -105.582       105.582       1580.47       1686.05    
  66  0.415452     -0.878387      -466.573       466.573       1754.66       2221.23    
  67  0.931580     -0.708731E-01  -37.6457       37.6457       3013.46       3051.11    
  68  0.763119     -0.270341      -143.597       143.597       2118.43       2262.02    
  69  0.214680      -1.53861      -817.263       817.263       1935.34       2752.61    
  70  0.548736     -0.600138      -318.776       318.776       2299.69       2618.47    
  71  0.981486     -0.186872E-01  -9.92609       9.92609       1608.08       1618.01    
  72  0.475333     -0.743740      -395.053       395.053       3311.49       3706.54    
  73  0.484810     -0.723998      -384.567       384.567       1775.35       2159.92    
  74  0.433802     -0.835166      -443.616       443.616       1632.39       2076.01    
loop,thermsimp(1:2)       16   310.069       85.7357    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       2257.89        130.07          0.68         30.15          0.60          0.05        161.54
Just calling func    0   0        161.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2257.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       16
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       17
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:       99     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -160.088       160.088       1608.08       1768.17    
   2  0.527958     -0.638738      -339.279       339.279       1580.47       1919.75    
   3  0.326119      -1.12049      -595.172       595.172       1712.25       2307.42    
   4  0.647061     -0.435314      -231.226       231.226       1761.73       1992.95    
   5  0.419805     -0.867966      -461.038       461.038       1770.14       2231.17    
   6  0.218417      -1.52135      -808.095       808.095       1742.84       2550.94    
   7  0.168864      -1.77866      -944.773       944.773       1698.61       2643.38    
   8  0.761417     -0.272575      -144.784       144.784       1791.04       1935.83    
   9  0.383989     -0.957143      -508.406       508.406       1694.94       2203.35    
  10  0.104774      -2.25595      -1198.29       1198.29       1747.59       2945.89    
  11  0.167912      -1.78432      -947.777       947.777       1747.07       2694.85    
  12  0.997930     -0.207190E-02  -1.10053       1.10053       1713.20       1714.30    
  13  0.493294     -0.706650      -375.352       375.352       1763.87       2139.22    
  14  0.483048     -0.727639      -386.501       386.501       1848.91       2235.41    
  15  0.715967     -0.334121      -177.475       177.475       1838.76       2016.24    
  16  0.595423E-01  -2.82107      -1498.47       1498.47       1795.55       3294.02    
  17  0.636569     -0.451662      -239.909       239.909       1889.18       2129.09    
  18  0.482980     -0.727779      -386.575       386.575       1919.37       2305.95    
  19  0.500121     -0.692905      -368.051       368.051       1781.42       2149.47    
  20  0.426980     -0.851018      -452.036       452.036       1710.27       2162.31    
  21  0.546576     -0.604082      -320.871       320.871       1886.67       2207.55    
  22  0.142720      -1.94687      -1034.12       1034.12       1770.57       2804.69    
  23  0.473622     -0.747346      -396.968       396.968       1721.97       2118.94    
  24  0.892718E-01  -2.41607      -1283.34       1283.34       1666.68       2950.03    
  25  0.660659     -0.414518      -220.180       220.180       1758.12       1978.30    
  26  0.328755      -1.11244      -590.897       590.897       1828.34       2419.24    
  27  0.544150     -0.608530      -323.233       323.233       1684.50       2007.74    
  28  0.199068      -1.61411      -857.368       857.368       1816.05       2673.41    
  29  0.685070     -0.378234      -200.907       200.907       1705.34       1906.25    
  30  0.500258     -0.692632      -367.906       367.906       1799.61       2167.51    
  31  0.130607      -2.03556      -1081.23       1081.23       1632.39       2713.62    
  32  0.982013E-01  -2.32074      -1232.71       1232.71       1839.42       3072.12    
  33  0.581494E-01  -2.84474      -1511.04       1511.04       1781.61       3292.65    
  34  0.841391     -0.172699      -91.7328       91.7328       1909.06       2000.80    
  35  0.838937E-01  -2.47820      -1316.35       1316.35       1775.35       3091.70    
  36  0.729848     -0.314919      -167.276       167.276       1754.66       1921.93    
  37  0.748292     -0.289962      -154.019       154.019       1984.36       2138.37    
  38  0.229216      -1.47309      -782.462       782.462       1790.45       2572.91    
  39  0.710713     -0.341487      -181.388       181.388       1673.73       1855.12    
  40  0.511506     -0.670395      -356.094       356.094       1778.19       2134.28    
  41  0.106756      -2.23721      -1188.34       1188.34       2118.43       3306.76    
  42  0.583466     -0.538770      -286.179       286.179       1736.53       2022.70    
  43  0.993140E-01  -2.30947      -1226.72       1226.72       2191.36       3418.08    
  44  0.461224     -0.773871      -411.057       411.057       1740.61       2151.67    
  45  0.574465     -0.554316      -294.436       294.436       1839.48       2133.91    
  46  0.715977     -0.334107      -177.468       177.468       1710.39       1887.85    
  47  0.877584     -0.130583      -69.3618       69.3618       1736.08       1805.44    
  48  0.492354     -0.708558      -376.365       376.365       1669.92       2046.28    
  49  0.874926     -0.133616      -70.9731       70.9731       1751.68       1822.65    
  50  0.800367     -0.222685      -118.284       118.284       1717.71       1835.99    
  51  0.507308     -0.678636      -360.472       360.472       2259.08       2619.55    
  52  0.727831     -0.317686      -168.745       168.745       1780.87       1949.61    
  53  0.899777E-01  -2.40819      -1279.16       1279.16       2027.68       3306.84    
  54  0.392780     -0.934505      -496.382       496.382       2413.66       2910.04    
  55  0.585301     -0.535629      -284.510       284.510       1764.99       2049.50    
  56  0.522884     -0.648395      -344.408       344.408       2299.69       2644.10    
  57  0.559213     -0.581225      -308.729       308.729       1961.16       2269.89    
  58  0.116989      -2.14568      -1139.72       1139.72       2485.96       3625.68    
  59  0.411020     -0.889113      -472.271       472.271       1935.34       2407.61    
  60  0.484202     -0.725253      -385.233       385.233       1735.45       2120.68    
  61  0.771761     -0.259080      -137.616       137.616       1750.26       1887.87    
  62  0.908486     -0.959755E-01  -50.9793       50.9793       1770.80       1821.78    
  63  0.340814      -1.07642      -571.762       571.762       2761.32       3333.08    
  64  0.519873     -0.654172      -347.477       347.477       1747.69       2095.17    
  65  0.516320     -0.661029      -351.119       351.119       1797.48       2148.60    
  66  0.495555     -0.702076      -372.922       372.922       2616.91       2989.83    
  67  0.291626      -1.23228      -654.552       654.552       1809.33       2463.88    
  68  0.492590     -0.708077      -376.110       376.110       3013.46       3389.57    
  69  0.545663E-01  -2.90834      -1544.82       1544.82       1889.46       3434.29    
  70  0.200869      -1.60510      -852.582       852.582       2609.55       3462.13    
  71  0.434763     -0.832954      -442.441       442.441       2456.75       2899.19    
  72  0.241886E-01  -3.72187      -1976.95       1976.95       3311.49       5288.44    
  73  0.846355     -0.166816      -88.6080       88.6080       1491.54       1580.15    
  74  0.598037     -0.514102      -273.076       273.076       2257.89       2530.96    
loop,thermsimp(1:2)       17   160.088       339.279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101       1958.28        130.00          0.66         30.11          0.73          0.05        161.56
Just calling func    0   0        161.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102       3989.42        130.04          0.67         29.49          1.65          0.04        161.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    1958.3        1.928    -0.8614      3.428     -100.0     0.3576    
                     -0.7018     0.4495     -100.0      2.343      1.587    
                     -0.6564     0.1866      2.009      0.000     0.6816    
                      -1.176     -20.00      0.000      0.000     -1.178    

                      -2.478      6452.     0.1120E+05 -515.3     -1451.    
                      -4.150     -5.454     -4.224     -15.33     -5.168    
                      -13.38     -2.722     -3425.      0.000     -1429.    

                      -19.81      3540.      289.4      545.4      2717.    
                      -485.2    -0.2245E-01-0.1250      0.000    -0.1705    
                     -0.2171    -0.1749    -0.1917    -0.2161    -0.6594E-01

                     -0.7453     -1.791      1.382    -0.6093     0.7082E-01
                      0.8541E-01 0.4780E-02-0.3774E-01-0.5036E-01-0.3059E-01
                     -0.3735E-01 0.1131    -0.2542     -2.191      1.382    

                      -1.582     -1.338     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.883      8.883      0.000     0.4469E-03
                      0.1603     0.1603      9.083      8.907     -5541.    

                      0.5325E-03 0.1603     0.1603      9.783      9.083    
                      -5541.     0.5325E-03-0.5397     0.1603      9.383    
                       9.183     -5043.     0.1065E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1958.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       17
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       18
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      101     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -509.969       509.969       1491.54       2001.51    
   2  0.293468      -1.22599      -651.209       651.209       1713.20       2364.41    
   3  0.954036     -0.470539E-01  -24.9936       24.9936       1608.08       1633.08    
   4  0.452934     -0.792010      -420.692       420.692       1736.08       2156.77    
   5  0.251692      -1.37955      -732.776       732.776       1770.80       2503.57    
   6  0.881081     -0.126605      -67.2491       67.2491       1751.68       1818.93    
   7  0.855311     -0.156290      -83.0165       83.0165       1717.71       1800.72    
   8  0.576474     -0.550824      -292.582       292.582       1673.73       1966.32    
   9  0.433835     -0.835090      -443.575       443.575       1710.39       2153.96    
  10  0.298626      -1.20856      -641.954       641.954       1750.26       2392.21    
  11  0.269991      -1.30937      -695.497       695.497       1705.34       2400.84    
  12  0.884826     -0.122364      -64.9962       64.9962       1580.47       1645.46    
  13  0.664124     -0.409287      -217.401       217.401       1754.66       1972.06    
  14  0.580836     -0.543287      -288.578       288.578       1791.04       2079.62    
  15  0.285501      -1.25351      -665.827       665.827       1780.87       2446.69    
  16  0.690757     -0.369967      -196.516       196.516       1758.12       1954.64    
  17  0.578320     -0.547628      -290.884       290.884       1761.73       2052.61    
  18  0.563230     -0.574067      -304.928       304.928       1909.06       2213.99    
  19  0.681565     -0.383363      -203.631       203.631       1684.50       1888.14    
  20  0.453362     -0.791065      -420.190       420.190       1838.76       2258.95    
  21  0.645457     -0.437797      -232.545       232.545       1736.53       1969.07    
  22  0.982222E-01  -2.32052      -1232.59       1232.59       1669.92       2902.51    
  23  0.843064     -0.170712      -90.6774       90.6774       1764.99       1855.67    
  24  0.505683     -0.681845      -362.176       362.176       1747.69       2109.87    
  25  0.350376      -1.04875      -557.065       557.065       1721.97       2279.03    
  26  0.367167      -1.00194      -532.201       532.201       1735.45       2267.65    
  27  0.268175      -1.31611      -699.081       699.081       1889.18       2588.26    
  28  0.989085E-01  -2.31356      -1228.89       1228.89       1839.48       3068.37    
  29  0.349392      -1.05156      -558.559       558.559       1778.19       2336.75    
  30  0.945468     -0.560755E-01  -29.7856       29.7856       1984.36       2014.14    
  31  0.305400      -1.18613      -630.038       630.038       1763.87       2393.91    
  32  0.942706     -0.590006E-01  -31.3394       31.3394       1797.48       1828.82    
  33  0.778346     -0.250584      -133.103       133.103       1781.42       1914.52    
  34  0.256449      -1.36083      -722.831       722.831       1740.61       2463.44    
  35  0.338120      -1.08436      -575.977       575.977       1710.27       2286.25    
  36  0.644609     -0.439112      -233.243       233.243       1799.61       2032.85    
  37  0.420837     -0.865509      -459.733       459.733       1694.94       2154.67    
  38  0.793406     -0.231421      -122.924       122.924       1886.67       2009.60    
  39  0.685561     -0.377517      -200.526       200.526       1770.14       1970.66    
  40  0.278740      -1.27748      -678.558       678.558       1848.91       2527.47    
  41  0.414078     -0.881700      -468.333       468.333       1961.16       2429.50    
  42  0.999720     -0.280334E-03 -0.148905      0.148905       1919.37       1919.52    
  43  0.714259     -0.336509      -178.744       178.744       1712.25       1890.99    
  44  0.713371     -0.337753      -179.405       179.405       1935.34       2114.75    
  45  0.451360     -0.795490      -422.541       422.541       1828.34       2250.88    
  46  0.887280     -0.119595      -63.5254       63.5254       1809.33       1872.86    
  47  0.234319      -1.45107      -770.767       770.767       2257.89       3028.65    
  48  0.277567E-01  -3.58428      -1903.86       1903.86       1742.84       3646.71    
  49  0.582411     -0.540579      -287.139       287.139       1790.45       2077.59    
  50  0.969019     -0.314707E-01  -16.7163       16.7163       2259.08       2275.80    
  51  0.441889     -0.816696      -433.805       433.805       1698.61       2132.41    
  52  0.150247      -1.89548      -1006.82       1006.82       2299.69       3306.51    
  53  0.901555E-01  -2.40622      -1278.11       1278.11       1816.05       3094.16    
  54  0.274120      -1.29419      -687.436       687.436       1747.07       2434.50    
  55  0.166801      -1.79095      -951.302       951.302       1632.39       2583.69    
  56  0.783053     -0.244555      -129.900       129.900       1770.57       1900.47    
  57  0.541655     -0.613126      -325.674       325.674       2456.75       2782.43    
  58  0.113786      -2.17344      -1154.47       1154.47       2413.66       3568.12    
  59  0.794080     -0.230571      -122.472       122.472       1747.59       1870.07    
  60  0.266758      -1.32141      -701.895       701.895       1666.68       2368.58    
  61  0.637690     -0.449903      -238.975       238.975       2616.91       2855.88    
  62  0.912681     -0.913685E-01  -48.5322       48.5322       1839.42       1887.95    
  63  0.303728      -1.19162      -632.955       632.955       1775.35       2408.31    
  64  0.318303      -1.14475      -608.058       608.058       1781.61       2389.67    
  65  0.255833      -1.36323      -724.107       724.107       1795.55       2519.66    
  66  0.988998     -0.110626E-01  -5.87614       5.87614       2118.43       2124.30    
  67  0.335641      -1.09171      -579.885       579.885       2027.68       2607.56    
  68  0.575346     -0.552784      -293.623       293.623       2761.32       3054.94    
  69  0.439298E-01  -3.12516      -1659.99       1659.99       3013.46       4673.46    
  70  0.179935      -1.71516      -911.041       911.041       2191.36       3102.40    
  71  0.939813     -0.620740E-01  -32.9719       32.9719       1889.46       1922.43    
  72  0.787717     -0.238616      -126.746       126.746       2609.55       2736.29    
  73  0.622521     -0.473978      -251.763       251.763       2485.96       2737.72    
  74  0.544172     -0.608491      -323.212       323.212       1958.28       2281.50    
loop,thermsimp(1:2)       18   509.969       651.209    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       2859.51        129.16          0.67         30.40          1.14          0.05        161.42
Just calling func    0   0        161.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2859.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       18
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       19
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      102     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -553.113       553.113       1608.08       2161.20    
   2  0.270835E-01  -3.60883      -1916.90       1916.90       1580.47       3497.37    
   3  0.923755     -0.793087E-01  -42.1264       42.1264       1717.71       1759.83    
   4  0.535520     -0.624517      -331.725       331.725       1751.68       2083.40    
   5  0.629344     -0.463078      -245.973       245.973       1797.48       2043.45    
   6  0.572648E-01  -2.86007      -1519.18       1519.18       1764.99       3284.17    
   7  0.353113E-01  -3.34355      -1776.00       1776.00       1747.59       3523.59    
   8  0.580838     -0.543283      -288.576       288.576       1809.33       2097.91    
   9  0.370403     -0.993164      -527.539       527.539       1839.42       2366.96    
  10  0.443010     -0.814162      -432.459       432.459       1684.50       2116.96    
  11  0.188704      -1.66757      -885.766       885.766       1712.25       2598.01    
  12  0.177608      -1.72818      -917.958       917.958       1770.57       2688.53    
  13  0.694998     -0.363847      -193.265       193.265       1781.42       1974.68    
  14  0.160742      -1.82796      -970.956       970.956       1919.37       2890.33    
  15  0.290050      -1.23770      -657.431       657.431       1889.46       2546.89    
  16  0.441138E-01  -3.12098      -1657.77       1657.77       1758.12       3415.89    
  17  0.372461     -0.987622      -524.596       524.596       1673.73       2198.33    
  18  0.652779     -0.426517      -226.553       226.553       1736.53       1963.08    
  19  0.998108     -0.189387E-02  -1.00597       1.00597       1770.14       1771.14    
  20  0.741140     -0.299566      -159.121       159.121       1754.66       1913.78    
  21  0.623042     -0.473141      -251.319       251.319       1491.54       1742.86    
  22  0.504617     -0.683955      -363.297       363.297       1886.67       2249.97    
  23  0.872499     -0.136394      -72.4485       72.4485       1984.36       2056.80    
  24  0.142620      -1.94757      -1034.49       1034.49       1799.61       2834.10    
  25  0.580285     -0.544236      -289.082       289.082       1761.73       2050.81    
  26  0.860063E-01  -2.45334      -1303.14       1303.14       1790.45       3093.59    
  27  0.401846     -0.911687      -484.261       484.261       1791.04       2275.31    
  28  0.161242      -1.82485      -969.307       969.307       1747.69       2717.00    
  29  0.550753     -0.596469      -316.827       316.827       1935.34       2252.17    
  30  0.815012     -0.204553      -108.652       108.652       2118.43       2227.08    
  31  0.438663     -0.824024      -437.697       437.697       1698.61       2136.30    
  32  0.542283     -0.611968      -325.059       325.059       1710.39       2035.45    
  33  0.943132E-01  -2.36113      -1254.17       1254.17       1694.94       2949.11    
  34  0.236587      -1.44144      -765.650       765.650       1736.08       2501.73    
  35  0.283068      -1.26207      -670.373       670.373       1909.06       2579.44    
  36  0.973178     -0.271886E-01  -14.4418       14.4418       1828.34       1842.78    
  37  0.596723     -0.516302      -274.244       274.244       1838.76       2113.01    
  38  0.595114     -0.519003      -275.679       275.679       1735.45       2011.13    
  39  0.948736     -0.526250E-01  -27.9529       27.9529       2259.08       2287.03    
  40  0.216072E-01  -3.83473      -2036.89       2036.89       1721.97       3758.86    
  41  0.440213     -0.820496      -435.823       435.823       1958.28       2394.11    
  42  0.905197     -0.996023E-01  -52.9058       52.9058       1710.27       1763.18    
  43  0.158396      -1.84266      -978.767       978.767       1778.19       2756.95    
  44  0.287789      -1.24553      -661.587       661.587       1713.20       2374.79    
  45  0.238244      -1.43446      -761.944       761.944       1666.68       2428.62    
  46  0.363881      -1.01093      -536.975       536.975       1781.61       2318.59    
  47  0.828805     -0.187771      -99.7384       99.7384       1750.26       1850.00    
  48  0.587140     -0.532492      -282.844       282.844       1763.87       2046.71    
  49  0.141687      -1.95414      -1037.98       1037.98       1705.34       2743.32    
  50  0.879115     -0.128839      -68.4355       68.4355       1775.35       1843.79    
  51  0.742190     -0.298150      -158.369       158.369       1961.16       2119.53    
  52  0.218958      -1.51887      -806.781       806.781       1747.07       2553.85    
  53  0.333192      -1.09904      -583.776       583.776       1780.87       2364.64    
  54  0.356774      -1.03065      -547.453       547.453       1740.61       2288.06    
  55  0.739597     -0.301650      -160.228       160.228       1770.80       1931.02    
  56  0.224658E-01  -3.79576      -2016.20       2016.20       1795.55       3811.75    
  57  0.338214      -1.08408      -575.829       575.829       1848.91       2424.74    
  58  0.227014      -1.48275      -787.591       787.591       1632.39       2419.98    
  59  0.289792E-01  -3.54118      -1880.97       1880.97       1889.18       3770.15    
  60  0.871226     -0.137854      -73.2241       73.2241       2027.68       2100.90    
  61  0.159622      -1.83495      -974.671       974.671       2609.55       3584.22    
  62  0.581826     -0.541584      -287.673       287.673       2485.96       2773.63    
  63  0.733467E-02  -4.91514      -2610.78       2610.78       2456.75       5067.53    
  64  0.646078     -0.436835      -232.034       232.034       2616.91       2848.94    
  65  0.976710     -0.235653E-01  -12.5172       12.5172       1669.92       1682.43    
  66  0.390127     -0.941284      -499.982       499.982       2257.89       2757.87    
  67  0.394291     -0.930666      -494.342       494.342       2761.32       3255.66    
  68  0.796004     -0.228151      -121.187       121.187       1839.48       1960.66    
  69  0.393786     -0.931948      -495.023       495.023       1816.05       2311.07    
  70  0.672353     -0.396971      -210.859       210.859       2191.36       2402.22    
  71  0.856786E-01  -2.45715      -1305.17       1305.17       2299.69       3604.86    
  72  0.769351     -0.262207      -139.277       139.277       2413.66       2552.94    
  73  0.161441E-01  -4.12620      -2191.72       2191.72       1742.84       3934.56    
  74  0.126673      -2.06615      -1097.48       1097.48       2859.51       3956.99    
loop,thermsimp(1:2)       19   553.113       1916.90    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104       1947.20        130.06          0.68         30.07          0.98          0.05        161.84
Just calling func    0   0        161.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    105       2310.18        129.82          0.67         30.27          0.89          0.05        161.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1947.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       19
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       20
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      104     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -332.493       332.493       1669.92       2002.41    
   2  0.288348      -1.24359      -660.558       660.558       1491.54       2152.10    
   3  0.910112E-01  -2.39677      -1273.10       1273.10       1717.71       2990.80    
   4  0.213812      -1.54266      -819.414       819.414       1710.27       2529.69    
   5  0.575222     -0.552999      -293.737       293.737       1770.14       2063.87    
   6  0.855707     -0.155827      -82.7708       82.7708       1828.34       1911.11    
   7  0.818692     -0.200047      -106.259       106.259       1775.35       1881.61    
   8  0.309911      -1.17147      -622.251       622.251       1750.26       2372.51    
   9  0.773438     -0.256910      -136.463       136.463       1754.66       1891.12    
  10  0.440502E-01  -3.12243      -1658.54       1658.54       1770.80       3429.34    
  11  0.211655      -1.55280      -824.801       824.801       1839.48       2664.28    
  12  0.713577     -0.337465      -179.252       179.252       1736.53       1915.78    
  13  0.927405     -0.753650E-01  -40.0317       40.0317       1781.42       1821.45    
  14  0.360229      -1.02101      -542.333       542.333       1735.45       2277.78    
  15  0.911872     -0.922553E-01  -49.0033       49.0033       1710.39       1759.39    
  16  0.800691     -0.222280      -118.069       118.069       1797.48       1915.55    
  17  0.169830      -1.77296      -941.744       941.744       1763.87       2705.61    
  18  0.581014     -0.542980      -288.415       288.415       1761.73       2050.14    
  19  0.869395     -0.139958      -74.3414       74.3414       1984.36       2058.70    
  20  0.773880     -0.256338      -136.159       136.159       1751.68       1887.84    
  21  0.496085     -0.701008      -372.355       372.355       1809.33       2181.69    
  22  0.530037     -0.634809      -337.192       337.192       2027.68       2364.87    
  23  0.239414      -1.42956      -759.341       759.341       1838.76       2598.11    
  24  0.595728     -0.517972      -275.131       275.131       1684.50       1959.64    
  25  0.170793      -1.76730      -938.740       938.740       1961.16       2899.90    
  26  0.983027     -0.171183E-01  -9.09273       9.09273       1698.61       1707.70    
  27  0.608714     -0.496407      -263.677       263.677       1608.08       1871.76    
  28  0.518727     -0.656378      -348.649       348.649       1673.73       2022.38    
  29  0.887918     -0.118876      -63.1433       63.1433       2118.43       2181.57    
  30  0.140498      -1.96256      -1042.46       1042.46       1886.67       2929.13    
  31  0.256308      -1.36138      -723.123       723.123       1935.34       2658.46    
  32  0.887238     -0.119642      -63.5501       63.5501       1791.04       1854.59    
  33  0.306042      -1.18403      -628.923       628.923       2259.08       2888.00    
  34  0.993873     -0.614632E-02  -3.26474       3.26474       1740.61       1743.88    
  35  0.275412E-01  -3.59207      -1908.00       1908.00       1816.05       3724.05    
  36  0.698960     -0.358161      -190.245       190.245       1781.61       1971.86    
  37  0.268424      -1.31519      -698.588       698.588       1780.87       2479.45    
  38  0.580935E-01  -2.84570      -1511.55       1511.55       1839.42       3350.97    
  39  0.242705      -1.41591      -752.089       752.089       1713.20       2465.29    
  40  0.443517     -0.813019      -431.852       431.852       1958.28       2390.13    
  41  0.904179     -0.100728      -53.5036       53.5036       2191.36       2244.87    
  42  0.454025     -0.789603      -419.414       419.414       1632.39       2051.80    
  43  0.592994     -0.522572      -277.575       277.575       1848.91       2126.48    
  44  0.401796     -0.911812      -484.328       484.328       1666.68       2151.01    
  45  0.130776      -2.03427      -1080.54       1080.54       1736.08       2816.63    
  46  0.709753     -0.342839      -182.106       182.106       1889.46       2071.57    
  47  0.388071     -0.946568      -502.789       502.789       2413.66       2916.45    
  48  0.362521      -1.01467      -538.964       538.964       1747.07       2286.03    
  49  0.285379      -1.25394      -666.054       666.054       1909.06       2575.12    
  50  0.286508      -1.24999      -663.957       663.957       1712.25       2376.20    
  51  0.951542     -0.496714E-01  -26.3840       26.3840       1770.57       1796.95    
  52  0.122933      -2.09612      -1113.40       1113.40       1747.69       2861.09    
  53  0.210928      -1.55624      -826.627       826.627       1705.34       2531.97    
  54  0.860093     -0.150715      -80.0554       80.0554       1778.19       1858.24    
  55  0.997563     -0.243951E-02  -1.29580       1.29580       2257.89       2259.18    
  56  0.750720     -0.286722      -152.298       152.298       2485.96       2638.25    
  57  0.667101     -0.404814      -215.025       215.025       1799.61       2014.63    
  58  0.508750E-01  -2.97838      -1582.03       1582.03       2616.91       4198.94    
  59  0.552474     -0.593349      -315.170       315.170       1919.37       2234.54    
  60  0.514478     -0.664602      -353.017       353.017       1694.94       2047.96    
  61  0.539834     -0.616494      -327.463       327.463       1790.45       2117.91    
  62  0.610888     -0.492841      -261.783       261.783       2761.32       3023.10    
  63  0.328075      -1.11451      -591.997       591.997       1764.99       2356.99    
  64  0.894692     -0.111276      -59.1067       59.1067       1758.12       1817.23    
  65  0.810283     -0.210372      -111.743       111.743       1580.47       1692.21    
  66  0.691642     -0.368687      -195.836       195.836       1747.59       1943.43    
  67  0.896896     -0.108815      -57.7993       57.7993       2609.55       2667.34    
  68  0.742287     -0.298020      -158.299       158.299       2299.69       2457.99    
  69  0.974450     -0.258821E-01  -13.7478       13.7478       1721.97       1735.72    
  70  0.339669      -1.07978      -573.549       573.549       1889.18       2462.73    
  71  0.854515     -0.157221      -83.5114       83.5114       1795.55       1879.06    
  72  0.153353      -1.87501      -995.951       995.951       1742.84       2738.79    
  73  0.883349     -0.124034      -65.8834       65.8834       2859.51       2925.39    
  74  0.716255     -0.333718      -177.261       177.261       1947.20       2124.46    
loop,thermsimp(1:2)       20   332.493       660.558    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106       1868.49        129.87          0.67         29.99          1.11          0.04        161.67
Just calling func    0   0        161.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    107       1892.68        129.83          0.66         29.88          1.37          0.05        161.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1868.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       20
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       21
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      106     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -644.100       644.100       1580.47       2224.57    
   2  0.663536     -0.410173      -217.872       217.872       1698.61       1916.48    
   3  0.263982      -1.33188      -707.453       707.453       1721.97       2429.42    
   4  0.792402     -0.232686      -123.596       123.596       1740.61       1864.21    
   5  0.624731     -0.470434      -249.881       249.881       1710.39       1960.27    
   6  0.170977      -1.76622      -938.167       938.167       1770.57       2708.74    
   7  0.362487      -1.01477      -539.015       539.015       1758.12       2297.14    
   8  0.659245     -0.416659      -221.317       221.317       1781.42       2002.73    
   9  0.746481E-03  -7.20014      -3824.50       3824.50       1791.04       5615.55    
  10  0.690046     -0.370998      -197.063       197.063       1778.19       1975.25    
  11  0.905636     -0.991173E-01  -52.6482       52.6482       1608.08       1660.73    
  12  0.317643      -1.14683      -609.161       609.161       1795.55       2404.71    
  13  0.321948      -1.13336      -602.010       602.010       1775.35       2377.36    
  14  0.293974      -1.22426      -650.293       650.293       1751.68       2401.97    
  15  0.679275     -0.386729      -205.419       205.419       1754.66       1960.08    
  16  0.180340      -1.71291      -909.848       909.848       1828.34       2738.19    
  17  0.539600     -0.616927      -327.694       327.694       1797.48       2125.17    
  18  0.260315      -1.34586      -714.882       714.882       1736.53       2451.41    
  19  0.256777      -1.35955      -722.151       722.151       1747.59       2469.75    
  20  0.518851     -0.656138      -348.521       348.521       1684.50       2033.03    
  21  0.485887     -0.721780      -383.388       383.388       1781.61       2165.00    
  22  0.562814     -0.574805      -305.320       305.320       1669.92       1975.24    
  23  0.906369     -0.983082E-01  -52.2184       52.2184       1799.61       1851.82    
  24  0.332143      -1.10219      -585.451       585.451       1673.73       2259.18    
  25  0.912001E-01  -2.39470      -1271.99       1271.99       1694.94       2966.94    
  26  0.302569      -1.19545      -634.985       634.985       1761.73       2396.71    
  27  0.362040      -1.01600      -539.669       539.669       1632.39       2172.06    
  28  0.630870     -0.460656      -244.687       244.687       1984.36       2229.04    
  29  0.685312     -0.377881      -200.719       200.719       1770.14       1970.86    
  30  0.329910      -1.10894      -589.035       589.035       1889.46       2478.50    
  31  0.906630E-01  -2.40061      -1275.13       1275.13       1790.45       3065.58    
  32  0.339749      -1.07955      -573.425       573.425       1947.20       2520.62    
  33  0.783039     -0.244573      -129.910       129.910       1848.91       1978.82    
  34  0.322673      -1.13112      -600.816       600.816       1666.68       2267.50    
  35  0.255311      -1.36527      -725.192       725.192       1491.54       2216.73    
  36  0.645921     -0.437078      -232.163       232.163       2118.43       2350.59    
  37  0.240122      -1.42661      -757.772       757.772       1809.33       2567.10    
  38  0.224638      -1.49326      -793.178       793.178       1919.37       2712.55    
  39  0.682659     -0.381760      -202.780       202.780       2191.36       2394.14    
  40  0.533856     -0.627629      -333.378       333.378       2257.89       2591.27    
  41  0.439620E-02  -5.42701      -2882.67       2882.67       1735.45       4618.12    
  42  0.409891     -0.891863      -473.731       473.731       1747.07       2220.80    
  43  0.379406     -0.969149      -514.783       514.783       1764.99       2279.77    
  44  0.982111     -0.180514E-01  -9.58837       9.58837       2027.68       2037.26    
  45  0.243530      -1.41251      -750.286       750.286       1750.26       2500.54    
  46  0.709323     -0.343445      -182.428       182.428       1712.25       1894.67    
  47  0.212014      -1.55110      -823.900       823.900       1958.28       2782.18    
  48  0.530919     -0.633146      -336.309       336.309       2299.69       2636.00    
  49  0.439600     -0.821890      -436.564       436.564       1889.18       2325.74    
  50  0.304385      -1.18946      -631.807       631.807       1713.20       2345.01    
  51  0.850253     -0.162221      -86.1670       86.1670       1780.87       1867.03    
  52  0.686564     -0.376055      -199.749       199.749       1710.27       1910.02    
  53  0.894299     -0.111715      -59.3396       59.3396       1705.34       1764.68    
  54  0.724097E-02  -4.92800      -2617.61       2617.61       1909.06       4526.67    
  55  0.666382     -0.405892      -215.598       215.598       1838.76       2054.36    
  56  0.216072      -1.53214      -813.830       813.830       2485.96       3299.79    
  57  0.481454     -0.730944      -388.256       388.256       1935.34       2323.60    
  58  0.107413      -2.23107      -1185.08       1185.08       1839.48       3024.56    
  59  0.943557     -0.580990E-01  -30.8605       30.8605       2609.55       2640.41    
  60  0.259811      -1.34780      -715.912       715.912       1763.87       2479.78    
  61  0.526852     -0.640836      -340.393       340.393       1742.84       2083.24    
  62  0.306319E-01  -3.48571      -1851.51       1851.51       1736.08       3587.59    
  63  0.180513      -1.71195      -909.339       909.339       1747.69       2657.03    
  64  0.901495     -0.103701      -55.0829       55.0829       2259.08       2314.16    
  65  0.274530      -1.29269      -686.642       686.642       1961.16       2647.80    
  66  0.773836     -0.256395      -136.190       136.190       2413.66       2549.85    
  67  0.158774      -1.84027      -977.498       977.498       2859.51       3837.01    
  68  0.514226     -0.665093      -353.278       353.278       1886.67       2239.95    
  69  0.312978      -1.16162      -617.020       617.020       1717.71       2334.73    
  70  0.917534     -0.860656E-01  -45.7155       45.7155       2761.32       2807.04    
  71  0.548182     -0.601148      -319.312       319.312       1839.42       2158.73    
  72  0.131177      -2.03121      -1078.92       1078.92       1770.80       2849.71    
  73  0.407078     -0.898750      -477.389       477.389       1816.05       2293.44    
  74  0.793948     -0.230737      -122.561       122.561       1868.49       1991.05    
loop,thermsimp(1:2)       21   644.100       217.872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108       1680.42        129.80          0.70         30.14          1.18          0.06        161.87
Just calling func    0   0        161.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109       1613.97        129.76          0.69         30.04          1.13          0.05        161.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1613.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       21
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       22
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      108     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -508.845       508.845       1608.08       2116.93    
   2  0.741480     -0.299107      -158.877       158.877       1705.34       1864.22    
   3  0.138898      -1.97401      -1048.54       1048.54       1799.61       2848.14    
   4  0.751974E-01  -2.58764      -1374.48       1374.48       1740.61       3115.09    
   5  0.824485     -0.192996      -102.514       102.514       1780.87       1883.38    
   6  0.982900     -0.172482E-01  -9.16175       9.16175       1712.25       1721.41    
   7  0.693409     -0.366136      -194.481       194.481       1710.27       1904.75    
   8  0.941572     -0.602045E-01  -31.9788       31.9788       1698.61       1730.58    
   9  0.812713     -0.207378      -110.153       110.153       1754.66       1864.81    
  10  0.879507     -0.128393      -68.1987       68.1987       1710.39       1778.58    
  11  0.418958     -0.869984      -462.110       462.110       1770.14       2232.25    
  12  0.314952      -1.15533      -613.679       613.679       1669.92       2283.60    
  13  0.812426     -0.207731      -110.341       110.341       1778.19       1888.53    
  14  0.213788      -1.54277      -819.473       819.473       1848.91       2668.38    
  15  0.521629     -0.650798      -345.685       345.685       1868.49       2214.18    
  16  0.287143      -1.24777      -662.781       662.781       1781.42       2444.20    
  17  0.518340     -0.657125      -349.045       349.045       1684.50       2033.55    
  18  0.712802E-02  -4.94372      -2625.96       2625.96       2027.68       4653.64    
  19  0.579935     -0.544838      -289.402       289.402       1838.76       2128.17    
  20  0.508101E-02  -5.28224      -2805.77       2805.77       1742.84       4548.62    
  21  0.984466     -0.156557E-01  -8.31587       8.31587       1797.48       1805.80    
  22  0.394325     -0.930579      -494.296       494.296       1839.42       2333.71    
  23  0.837309     -0.177562      -94.3157       94.3157       1781.61       1875.93    
  24  0.683519     -0.380501      -202.111       202.111       1632.39       1834.50    
  25  0.892337     -0.113912      -60.5066       60.5066       1491.54       1552.05    
  26  0.297675      -1.21175      -643.648       643.648       1747.07       2390.72    
  27  0.566054     -0.569065      -302.271       302.271       1580.47       1882.74    
  28  0.325499E-01  -3.42498      -1819.25       1819.25       1984.36       3803.60    
  29  0.721169     -0.326882      -173.630       173.630       1886.67       2060.30    
  30  0.370449     -0.993040      -527.474       527.474       1673.73       2201.21    
  31  0.398952     -0.918913      -488.100       488.100       1666.68       2154.78    
  32  0.942469     -0.592518E-01  -31.4728       31.4728       1764.99       1796.46    
  33  0.379045     -0.970101      -515.289       515.289       1816.05       2331.34    
  34  0.218373      -1.52155      -808.202       808.202       1758.12       2566.32    
  35  0.413944     -0.882024      -468.505       468.505       2259.08       2727.58    
  36  0.452532     -0.792896      -421.163       421.163       1935.34       2356.51    
  37  0.938896     -0.630505E-01  -33.4906       33.4906       1889.18       1922.67    
  38  0.389299     -0.943409      -501.111       501.111       1717.71       2218.82    
  39  0.943794     -0.578471E-01  -30.7267       30.7267       1713.20       1743.93    
  40  0.706887     -0.346884      -184.255       184.255       2118.43       2302.68    
  41  0.274873      -1.29145      -685.978       685.978       1775.35       2461.33    
  42  0.343864      -1.06751      -567.029       567.029       2191.36       2758.39    
  43  0.869527E-01  -2.44239      -1297.33       1297.33       1761.73       3059.05    
  44  0.859615     -0.151271      -80.3505       80.3505       1751.68       1832.03    
  45  0.264079      -1.33151      -707.257       707.257       1795.55       2502.81    
  46  0.494871     -0.703457      -373.656       373.656       1721.97       2095.62    
  47  0.112943      -2.18087      -1158.42       1158.42       1736.53       2894.94    
  48  0.358273      -1.02646      -545.226       545.226       1747.59       2292.82    
  49  0.215257      -1.53592      -815.836       815.836       1889.46       2705.30    
  50  0.441681     -0.817166      -434.055       434.055       1763.87       2197.92    
  51  0.888276     -0.118473      -62.9294       62.9294       1750.26       1813.19    
  52  0.780286     -0.248095      -131.781       131.781       1947.20       2078.98    
  53  0.488747     -0.715911      -380.271       380.271       2413.66       2793.93    
  54  0.683795     -0.380097      -201.897       201.897       1809.33       2011.23    
  55  0.466986     -0.761456      -404.463       404.463       2257.89       2662.35    
  56  0.900497     -0.104809      -55.6713       55.6713       2299.69       2355.36    
  57  0.876058     -0.132323      -70.2859       70.2859       2609.55       2679.83    
  58  0.413808     -0.882354      -468.681       468.681       1961.16       2429.84    
  59  0.268165      -1.31615      -699.102       699.102       1747.69       2446.79    
  60  0.637465     -0.450255      -239.162       239.162       1770.57       2009.73    
  61  0.476344     -0.741616      -393.924       393.924       1919.37       2313.30    
  62  0.878474     -0.129569      -68.8233       68.8233       1828.34       1897.17    
  63  0.185973      -1.68216      -893.512       893.512       1958.28       2851.79    
  64  0.802667E-03  -7.12757      -3785.96       3785.96       2761.32       6547.28    
  65  0.480758     -0.732390      -389.024       389.024       1770.80       2159.82    
  66  0.789279     -0.236635      -125.693       125.693       1694.94       1820.64    
  67  0.174217      -1.74745      -928.196       928.196       1839.48       2767.67    
  68  0.825561     -0.191692      -101.821       101.821       1790.45       1892.27    
  69  0.532291     -0.630566      -334.938       334.938       2485.96       2820.89    
  70  0.118632E-01  -4.43431      -2355.38       2355.38       1736.08       4091.46    
  71  0.214857      -1.53778      -816.825       816.825       2859.51       3676.33    
  72  0.111318      -2.19536      -1166.11       1166.11       1909.06       3075.17    
  73  0.823034     -0.194758      -103.450       103.450       1735.45       1838.90    
  74  0.697593     -0.360119      -191.284       191.284       1613.97       1805.26    
loop,thermsimp(1:2)       22   508.845       158.877    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110       1882.40        129.84          0.69         30.10          1.04          0.04        161.71
Just calling func    0   0        161.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1882.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       22
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       23
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      109     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -592.676       592.676       1491.54       2084.22    
   2  0.736029     -0.306486      -162.796       162.796       1712.25       1875.04    
   3  0.608436     -0.496864      -263.920       263.920       1698.61       1962.53    
   4  0.584882     -0.536346      -284.891       284.891       1713.20       1998.09    
   5  0.617514     -0.482053      -256.052       256.052       1710.39       1966.44    
   6  0.376473     -0.976909      -518.905       518.905       1764.99       2283.89    
   7  0.535145     -0.625218      -332.098       332.098       1613.97       1946.07    
   8  0.341783      -1.07358      -570.254       570.254       1797.48       2367.73    
   9  0.804208E-01  -2.52048      -1338.81       1338.81       1750.26       3089.06    
  10  0.660499     -0.414760      -220.308       220.308       1694.94       1915.25    
  11  0.739860E-01  -2.60388      -1383.10       1383.10       1751.68       3134.78    
  12  0.203251      -1.59331      -846.321       846.321       1632.39       2478.71    
  13  0.637025     -0.450946      -239.529       239.529       1735.45       1974.98    
  14  0.687460     -0.374752      -199.057       199.057       1705.34       1904.40    
  15  0.663581     -0.410105      -217.836       217.836       1754.66       1972.49    
  16  0.579690     -0.545263      -289.627       289.627       1781.61       2071.24    
  17  0.775653     -0.254050      -134.944       134.944       1580.47       1715.41    
  18  0.284124      -1.25834      -668.395       668.395       1780.87       2449.26    
  19  0.317710      -1.14662      -609.048       609.048       1778.19       2387.24    
  20  0.958871     -0.419990E-01  -22.3087       22.3087       1790.45       1812.76    
  21  0.582932     -0.539685      -286.665       286.665       1828.34       2115.01    
  22  0.905476     -0.992942E-01  -52.7422       52.7422       1710.27       1763.02    
  23  0.225214      -1.49070      -791.817       791.817       1889.18       2681.00    
  24  0.618260     -0.480846      -255.411       255.411       1770.57       2025.98    
  25  0.608706     -0.496420      -263.684       263.684       1809.33       2073.02    
  26  0.651052     -0.429165      -227.960       227.960       1684.50       1912.46    
  27  0.138439E-02  -6.58249      -3496.43       3496.43       1886.67       5383.10    
  28  0.157375      -1.84913      -982.201       982.201       1947.20       2929.40    
  29  0.168063      -1.78342      -947.299       947.299       1721.97       2669.27    
  30  0.924354     -0.786598E-01  -41.7818       41.7818       1608.08       1649.87    
  31  0.985585     -0.145204E-01  -7.71281       7.71281       1838.76       1846.48    
  32  0.540844E-01  -2.91721      -1549.54       1549.54       1666.68       3216.22    
  33  0.535345     -0.624843      -331.898       331.898       1770.80       2102.69    
  34  0.736351     -0.306048      -162.564       162.564       1763.87       1926.43    
  35  0.283062E-01  -3.56467      -1893.45       1893.45       1673.73       3567.18    
  36  0.690743     -0.369987      -196.526       196.526       1868.49       2065.02    
  37  0.260994      -1.34326      -713.498       713.498       1717.71       2431.21    
  38  0.243637      -1.41208      -750.054       750.054       1770.14       2520.19    
  39  0.850226     -0.162253      -86.1841       86.1841       1669.92       1756.10    
  40  0.589307     -0.528809      -280.888       280.888       1747.59       2028.48    
  41  0.515087     -0.663420      -352.389       352.389       2118.43       2470.82    
  42  0.348855      -1.05310      -559.376       559.376       1919.37       2478.75    
  43  0.791407     -0.233943      -124.264       124.264       1816.05       1940.31    
  44  0.370775     -0.992160      -527.006       527.006       1839.42       2366.42    
  45  0.676021     -0.391531      -207.970       207.970       2299.69       2507.66    
  46  0.125601      -2.07465      -1101.99       1101.99       1935.34       3037.33    
  47  0.582904     -0.539733      -286.690       286.690       1747.07       2033.76    
  48  0.818994     -0.199679      -106.064       106.064       1961.16       2067.23    
  49  0.291406      -1.23304      -654.953       654.953       1781.42       2436.37    
  50  0.887104     -0.119794      -63.6308       63.6308       1747.69       1811.32    
  51  0.666242     -0.406102      -215.709       215.709       1775.35       1991.06    
  52  0.931047     -0.714460E-01  -37.9500       37.9500       1795.55       1833.50    
  53  0.169651      -1.77401      -942.302       942.302       1758.12       2700.42    
  54  0.228429      -1.47653      -784.289       784.289       2257.89       3042.18    
  55  0.453181     -0.791463      -420.402       420.402       1848.91       2269.31    
  56  0.376518     -0.976789      -518.842       518.842       2609.55       3128.39    
  57  0.551543     -0.595035      -316.065       316.065       1889.46       2205.53    
  58  0.837469     -0.177371      -94.2144       94.2144       2259.08       2353.29    
  59  0.436148     -0.829773      -440.751       440.751       2191.36       2632.11    
  60  0.245765      -1.40338      -745.433       745.433       1839.48       2584.91    
  61  0.727782     -0.317754      -168.781       168.781       2413.66       2582.44    
  62  0.677441     -0.389433      -206.855       206.855       2485.96       2692.81    
  63  0.835222     -0.180057      -95.6412       95.6412       1799.61       1895.25    
  64  0.964839     -0.357941E-01  -19.0128       19.0128       1958.28       1977.30    
  65  0.799790     -0.223406      -118.667       118.667       1736.53       1855.19    
  66  0.274169      -1.29401      -687.340       687.340       1761.73       2449.07    
  67  0.342685      -1.07094      -568.854       568.854       1909.06       2477.92    
  68  0.688325     -0.373494      -198.389       198.389       1740.61       1939.00    
  69  0.683936     -0.379890      -201.787       201.787       2859.51       3061.30    
  70  0.779136     -0.249570      -132.564       132.564       1984.36       2116.92    
  71  0.806749     -0.214742      -114.065       114.065       1736.08       1850.15    
  72  0.645551     -0.437652      -232.468       232.468       1742.84       1975.31    
  73  0.403078     -0.908624      -482.635       482.635       2027.68       2510.31    
  74  0.663948     -0.409551      -217.541       217.541       1882.40       2099.94    
loop,thermsimp(1:2)       23   592.676       162.796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111       5193.91        128.78          0.69         30.50          0.84          0.05        160.86
Just calling func    0   0        160.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112       1980.44        129.12          0.69         30.49          0.87          0.05        161.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1980.44
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       23
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       24
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      111     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -654.778       654.778       1608.08       2262.86    
   2  0.991852     -0.818183E-02  -4.34595       4.34595       1580.47       1584.81    
   3  0.317368      -1.14769      -609.621       609.621       1669.92       2279.54    
   4  0.737330     -0.304720      -161.858       161.858       1710.27       1872.13    
   5  0.834641     -0.180753      -96.0107       96.0107       1747.69       1843.70    
   6  0.464401     -0.767007      -407.412       407.412       1790.45       2197.86    
   7  0.592116     -0.524053      -278.362       278.362       1795.55       2073.91    
   8  0.464372     -0.767069      -407.444       407.444       1838.76       2246.21    
   9  0.636055E-01  -2.75505      -1463.40       1463.40       1736.08       3199.49    
  10  0.712927     -0.338376      -179.735       179.735       1736.53       1916.26    
  11  0.265597      -1.32578      -704.213       704.213       1712.25       2416.46    
  12  0.152318      -1.88178      -999.548       999.548       1799.61       2799.15    
  13  0.629580     -0.462703      -245.774       245.774       1705.34       1951.12    
  14  0.849464     -0.163150      -86.6602       86.6602       1684.50       1771.16    
  15  0.487816     -0.717817      -381.283       381.283       1694.94       2076.22    
  16  0.374667     -0.981718      -521.460       521.460       1763.87       2285.33    
  17  0.657383     -0.419488      -222.820       222.820       1740.61       1963.43    
  18  0.846901     -0.166172      -88.2655       88.2655       1816.05       1904.31    
  19  0.201185      -1.60353      -851.749       851.749       1613.97       2465.72    
  20  0.771980     -0.258797      -137.465       137.465       1698.61       1836.07    
  21  0.507739     -0.677788      -360.021       360.021       1710.39       2070.41    
  22  0.280262      -1.27203      -675.666       675.666       1754.66       2430.32    
  23  0.285359      -1.25401      -666.092       666.092       1735.45       2401.54    
  24  0.246191      -1.40165      -744.513       744.513       1742.84       2487.36    
  25  0.559989E-01  -2.88242      -1531.06       1531.06       1958.28       3489.34    
  26  0.330462      -1.10726      -588.146       588.146       1775.35       2363.50    
  27  0.899405     -0.106022      -56.3159       56.3159       1713.20       1769.52    
  28  0.637003     -0.450981      -239.548       239.548       1770.57       2010.12    
  29  0.699726E-01  -2.65965      -1412.73       1412.73       1747.59       3160.32    
  30  0.677191     -0.389802      -207.051       207.051       1747.07       1954.12    
  31  0.649507     -0.431542      -229.222       229.222       1868.49       2097.72    
  32  0.527986     -0.638685      -339.251       339.251       1961.16       2300.41    
  33  0.374870E-01  -3.28376      -1744.24       1744.24       1781.61       3525.85    
  34  0.448697     -0.801407      -425.684       425.684       1809.33       2235.02    
  35  0.809612     -0.211200      -112.183       112.183       1491.54       1603.73    
  36  0.836235     -0.178846      -94.9976       94.9976       1882.40       1977.40    
  37  0.198161      -1.61867      -859.792       859.792       1770.80       2630.59    
  38  0.222702      -1.50192      -797.776       797.776       1828.34       2626.12    
  39  0.888863     -0.117812      -62.5782       62.5782       1984.36       2046.93    
  40  0.868267     -0.141256      -75.0309       75.0309       1889.46       1964.49    
  41  0.164066      -1.80749      -960.084       960.084       1848.91       2808.99    
  42  0.163797      -1.80912      -960.954       960.954       1764.99       2725.94    
  43  0.883498     -0.123867      -65.7943       65.7943       2259.08       2324.87    
  44  0.749983     -0.287705      -152.820       152.820       1839.42       1992.24    
  45  0.666691     -0.405428      -215.351       215.351       1797.48       2012.83    
  46  0.978530     -0.217038E-01  -11.5284       11.5284       1778.19       1789.72    
  47  0.442024     -0.816391      -433.643       433.643       1717.71       2151.35    
  48  0.228080      -1.47806      -785.101       785.101       1781.42       2566.52    
  49  0.226174      -1.48645      -789.558       789.558       1761.73       2551.28    
  50  0.388394     -0.945736      -502.347       502.347       1780.87       2283.21    
  51  0.257425      -1.35703      -720.812       720.812       2118.43       2839.24    
  52  0.707288     -0.346317      -183.954       183.954       1909.06       2093.02    
  53  0.518387     -0.657032      -348.996       348.996       1632.39       1981.39    
  54  0.628700     -0.464102      -246.517       246.517       1919.37       2165.89    
  55  0.981249     -0.189295E-01  -10.0548       10.0548       2299.69       2309.75    
  56  0.928260     -0.744431E-01  -39.5420       39.5420       2027.68       2067.22    
  57  0.752004E-02  -4.89018      -2597.52       2597.52       1770.14       4367.66    
  58  0.930611     -0.719140E-01  -38.1986       38.1986       2413.66       2451.86    
  59  0.552686     -0.592965      -314.966       314.966       1839.48       2154.44    
  60  0.695877     -0.362583      -192.593       192.593       2191.36       2383.96    
  61  0.432533     -0.838096      -445.172       445.172       1721.97       2167.14    
  62  0.127859      -2.05683      -1092.53       1092.53       1889.18       2981.71    
  63  0.304427      -1.18932      -631.734       631.734       2485.96       3117.69    
  64  0.938376     -0.636043E-01  -33.7847       33.7847       1758.12       1791.91    
  65  0.958131     -0.427711E-01  -22.7187       22.7187       1947.20       1969.92    
  66  0.177025      -1.73147      -919.704       919.704       1935.34       2855.05    
  67  0.352264      -1.04338      -554.210       554.210       2257.89       2812.10    
  68  0.915612     -0.881621E-01  -46.8291       46.8291       2859.51       2906.34    
  69  0.891986     -0.114305      -60.7153       60.7153       1750.26       1810.97    
  70  0.754865     -0.281216      -149.374       149.374       2609.55       2758.92    
  71  0.616120     -0.484313      -257.253       257.253       1751.68       2008.93    
  72  0.873159     -0.135638      -72.0468       72.0468       1666.68       1738.73    
  73  0.437761     -0.826082      -438.790       438.790       1673.73       2112.52    
  74  0.627710     -0.465677      -247.354       247.354       1980.44       2227.79    
loop,thermsimp(1:2)       24   654.778       4.34595    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113       1677.74        129.79          0.69         30.04          1.15          0.04        161.71
Just calling func    0   0        161.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114       1569.79        129.62          0.67         30.18          1.13          0.04        161.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1569.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       24
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       25
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      113     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -1022.41       1022.41       1580.47       2602.87    
   2  0.438196     -0.825090      -438.263       438.263       1491.54       1929.81    
   3  0.637359     -0.450422      -239.251       239.251       1666.68       1905.93    
   4  0.122813      -2.09709      -1113.91       1113.91       1713.20       2827.11    
   5  0.926899     -0.759107E-01  -40.3215       40.3215       1684.50       1724.83    
   6  0.456580     -0.783992      -416.434       416.434       1778.19       2194.62    
   7  0.988763     -0.113008E-01  -6.00268       6.00268       1758.12       1764.12    
   8  0.499609     -0.693930      -368.595       368.595       1750.26       2118.85    
   9  0.432617     -0.837902      -445.069       445.069       1698.61       2143.67    
  10  0.403570     -0.907406      -481.987       481.987       1747.69       2229.68    
  11  0.435824     -0.830517      -441.146       441.146       1710.27       2151.42    
  12  0.504807     -0.683579      -363.097       363.097       1816.05       2179.14    
  13  0.778763     -0.250048      -132.818       132.818       1736.53       1869.34    
  14  0.429140     -0.845972      -449.355       449.355       1705.34       2154.70    
  15  0.597763     -0.514562      -273.320       273.320       1747.07       2020.39    
  16  0.425932     -0.853476      -453.341       453.341       1740.61       2193.95    
  17  0.825778     -0.191430      -101.682       101.682       1889.46       1991.14    
  18  0.448772     -0.801241      -425.596       425.596       1947.20       2372.80    
  19  0.701335     -0.354770      -188.443       188.443       1882.40       2070.84    
  20  0.425857     -0.853651      -453.434       453.434       1632.39       2085.83    
  21  0.800815     -0.222126      -117.987       117.987       1839.42       1957.40    
  22  0.724239     -0.322634      -171.374       171.374       1751.68       1923.05    
  23  0.312194      -1.16413      -618.352       618.352       1770.57       2388.92    
  24  0.796592     -0.227412      -120.795       120.795       1797.48       1918.27    
  25  0.164146      -1.80700      -959.826       959.826       1984.36       2944.18    
  26  0.503041     -0.687083      -364.958       364.958       2027.68       2392.63    
  27  0.640838     -0.444978      -236.359       236.359       1710.39       1946.75    
  28  0.327752      -1.11550      -592.520       592.520       1795.55       2388.07    
  29  0.720325     -0.328053      -174.252       174.252       1694.94       1869.19    
  30  0.447570     -0.803922      -427.019       427.019       1909.06       2336.08    
  31  0.377461     -0.974289      -517.514       517.514       1868.49       2386.01    
  32  0.951264     -0.499633E-01  -26.5390       26.5390       1673.73       1700.27    
  33  0.610405     -0.493632      -262.203       262.203       1717.71       1979.91    
  34  0.564697     -0.571466      -303.546       303.546       1839.48       2143.02    
  35  0.993998     -0.601974E-02  -3.19751       3.19751       1919.37       1922.57    
  36  0.908032     -0.964757E-01  -51.2450       51.2450       1721.97       1773.21    
  37  0.731210     -0.313055      -166.286       166.286       1790.45       1956.74    
  38  0.818812     -0.199901      -106.182       106.182       1980.44       2086.62    
  39  0.423172     -0.859976      -456.794       456.794       1809.33       2266.13    
  40  0.554414     -0.589843      -313.307       313.307       1838.76       2152.07    
  41  0.244903E-01  -3.70948      -1970.36       1970.36       1608.08       3578.45    
  42  0.337898      -1.08501      -576.326       576.326       1669.92       2246.24    
  43  0.634521E-01  -2.75747      -1464.69       1464.69       1780.87       3245.55    
  44  0.824978     -0.192398      -102.196       102.196       1763.87       1866.06    
  45  0.954123     -0.469622E-01  -24.9449       24.9449       1961.16       1986.11    
  46  0.807852     -0.213376      -113.339       113.339       2299.69       2413.03    
  47  0.335430      -1.09234      -580.220       580.220       2259.08       2839.30    
  48  0.266194      -1.32353      -703.021       703.021       1775.35       2478.37    
  49  0.797818     -0.225874      -119.978       119.978       2191.36       2311.34    
  50  0.710601     -0.341644      -181.471       181.471       1735.45       1916.92    
  51  0.469059     -0.757026      -402.110       402.110       1712.25       2114.36    
  52  0.256457E-01  -3.66338      -1945.88       1945.88       1754.66       3700.54    
  53  0.620630     -0.477020      -253.379       253.379       2413.66       2667.04    
  54  0.600237     -0.510431      -271.126       271.126       1613.97       1885.10    
  55  0.959467     -0.413769E-01  -21.9782       21.9782       1742.84       1764.82    
  56  0.541492     -0.613428      -325.835       325.835       1761.73       2087.56    
  57  0.577789     -0.548547      -291.372       291.372       1781.42       2072.79    
  58  0.701570     -0.354435      -188.265       188.265       1828.34       2016.61    
  59  0.274557E-01  -3.59518      -1909.65       1909.65       1770.80       3680.45    
  60  0.584746     -0.536578      -285.014       285.014       1764.99       2050.00    
  61  0.131184      -2.03115      -1078.89       1078.89       2609.55       3688.43    
  62  0.986883     -0.132037E-01  -7.01342       7.01342       1799.61       1806.62    
  63  0.257198      -1.35791      -721.280       721.280       1848.91       2570.19    
  64  0.831173     -0.184917      -98.2226       98.2226       2257.89       2356.11    
  65  0.332503      -1.10111      -584.875       584.875       2118.43       2703.30    
  66  0.123451      -2.09191      -1111.16       1111.16       1935.34       3046.50    
  67  0.545729     -0.605633      -321.695       321.695       2859.51       3181.20    
  68  0.194995      -1.63478      -868.347       868.347       1889.18       2757.53    
  69  0.811658     -0.208676      -110.843       110.843       2485.96       2596.80    
  70  0.610911     -0.492804      -261.763       261.763       1747.59       2009.36    
  71  0.482852     -0.728044      -386.716       386.716       1736.08       2122.80    
  72  0.487726     -0.718001      -381.381       381.381       1958.28       2339.66    
  73  0.650526     -0.429973      -228.389       228.389       1781.61       2010.00    
  74  0.710826     -0.341328      -181.303       181.303       1569.79       1751.09    
loop,thermsimp(1:2)       25   1022.41       438.263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115       1672.92        129.60          0.68         30.16          0.75          0.05        161.25
Just calling func    0   0        161.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116       1561.33        129.62          0.66         29.94          0.95          0.05        161.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1561.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       25
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       26
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      115     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -131.266       131.266       1673.73       1805.00    
   2  0.928800     -0.738619E-01  -39.2333       39.2333       1684.50       1723.74    
   3  0.727994     -0.317462      -168.627       168.627       1569.79       1738.41    
   4  0.109723E-01  -4.51238      -2396.85       2396.85       1758.12       4154.97    
   5  0.160096      -1.83198      -973.093       973.093       1742.84       2715.94    
   6  0.497079     -0.699006      -371.292       371.292       1721.97       2093.26    
   7  0.789473     -0.236389      -125.563       125.563       1799.61       1925.17    
   8  0.763780     -0.269476      -143.138       143.138       1763.87       1907.01    
   9  0.217288      -1.52653      -810.849       810.849       1694.94       2505.79    
  10  0.867642     -0.141976      -75.4137       75.4137       1736.53       1811.94    
  11  0.740966     -0.299800      -159.245       159.245       1613.97       1773.22    
  12  0.999757     -0.242662E-03 -0.128895      0.128895       1666.68       1666.81    
  13  0.587476     -0.531920      -282.540       282.540       1735.45       2017.99    
  14  0.703619     -0.351518      -186.716       186.716       1797.48       1984.20    
  15  0.740946     -0.299828      -159.260       159.260       1919.37       2078.63    
  16  0.335927      -1.09086      -579.433       579.433       1751.68       2331.11    
  17  0.736553     -0.305774      -162.418       162.418       1491.54       1653.96    
  18  0.597397     -0.515174      -273.645       273.645       1710.39       1984.03    
  19  0.126601      -2.06672      -1097.78       1097.78       1790.45       2888.23    
  20  0.990194     -0.985477E-02  -5.23456       5.23456       1839.42       1844.65    
  21  0.716453     -0.333443      -177.115       177.115       1717.71       1894.82    
  22  0.279233E-01  -3.57829      -1900.68       1900.68       1961.16       3861.85    
  23  0.413932     -0.882054      -468.521       468.521       1889.46       2357.98    
  24  0.109516      -2.21168      -1174.78       1174.78       1747.59       2922.37    
  25  0.440749     -0.819279      -435.177       435.177       1781.61       2216.79    
  26  0.412115     -0.886453      -470.858       470.858       1828.34       2299.20    
  27  0.146963      -1.91758      -1018.56       1018.56       1747.07       2765.63    
  28  0.345919      -1.06155      -563.864       563.864       1764.99       2328.85    
  29  0.343614      -1.06824      -567.415       567.415       1882.40       2449.81    
  30  0.600334E-01  -2.81285      -1494.11       1494.11       1781.42       3275.52    
  31  0.751538     -0.285634      -151.720       151.720       1632.39       1784.11    
  32  0.878119     -0.129973      -69.0380       69.0380       1980.44       2049.48    
  33  0.544046     -0.608721      -323.335       323.335       1761.73       2085.06    
  34  0.931023     -0.714714E-01  -37.9635       37.9635       1712.25       1750.21    
  35  0.131968      -2.02520      -1075.73       1075.73       1750.26       2825.98    
  36  0.826694E-01  -2.49291      -1324.16       1324.16       1736.08       3060.24    
  37  0.174702E-02  -6.34984      -3372.85       3372.85       1839.48       5212.33    
  38  0.233470      -1.45470      -772.696       772.696       1698.61       2471.30    
  39  0.232927      -1.45703      -773.931       773.931       1710.27       2484.21    
  40  0.958279     -0.426163E-01  -22.6365       22.6365       1838.76       1861.40    
  41  0.820100     -0.198330      -105.347       105.347       1705.34       1810.69    
  42  0.305797      -1.18483      -629.349       629.349       1816.05       2445.40    
  43  0.260853      -1.34380      -713.786       713.786       1740.61       2454.40    
  44  0.960408     -0.403967E-01  -21.4576       21.4576       1778.19       1799.64    
  45  0.318957      -1.14270      -606.968       606.968       1747.69       2354.66    
  46  0.146887      -1.91809      -1018.83       1018.83       1669.92       2688.75    
  47  0.787623     -0.238735      -126.809       126.809       1809.33       1936.14    
  48  0.452412     -0.793163      -421.305       421.305       2191.36       2612.67    
  49  0.218339      -1.52170      -808.284       808.284       1909.06       2717.35    
  50  0.177672      -1.72782      -917.766       917.766       1958.28       2876.05    
  51  0.928922     -0.737304E-01  -39.1634       39.1634       2257.89       2297.05    
  52  0.341447      -1.07456      -570.776       570.776       1947.20       2517.98    
  53  0.462674     -0.770732      -409.390       409.390       1868.49       2277.88    
  54  0.125513      -2.07534      -1102.36       1102.36       1795.55       2897.91    
  55  0.354899      -1.03592      -550.251       550.251       1770.57       2320.82    
  56  0.341830      -1.07344      -570.181       570.181       2027.68       2597.86    
  57  0.604983     -0.502555      -266.942       266.942       2299.69       2566.64    
  58  0.223932      -1.49641      -794.850       794.850       1775.35       2570.20    
  59  0.146473      -1.92091      -1020.33       1020.33       1848.91       2869.24    
  60  0.997224     -0.277992E-02  -1.47661       1.47661       2485.96       2487.43    
  61  0.430465     -0.842888      -447.717       447.717       1580.47       2028.18    
  62  0.712472     -0.339015      -180.075       180.075       2413.66       2593.73    
  63  0.303370      -1.19280      -633.581       633.581       2118.43       2752.01    
  64  0.676458E-01  -2.69347      -1430.69       1430.69       1889.18       3319.87    
  65  0.226497      -1.48502      -788.801       788.801       1713.20       2502.00    
  66  0.590955     -0.526015      -279.404       279.404       2259.08       2538.48    
  67  0.914813     -0.890359E-01  -47.2933       47.2933       1984.36       2031.65    
  68  0.157483      -1.84844      -981.835       981.835       1935.34       2917.18    
  69  0.117954E-01  -4.44005      -2358.42       2358.42       2859.51       5217.93    
  70  0.589104     -0.529153      -281.070       281.070       1780.87       2061.94    
  71  0.826668     -0.190352      -101.110       101.110       1608.08       1709.19    
  72  0.535992     -0.623635      -331.257       331.257       1770.80       2102.05    
  73  0.460564     -0.775304      -411.819       411.819       2609.55       3021.36    
  74  0.142631E-01  -4.25008      -2257.52       2257.52       1561.33       3818.84    
loop,thermsimp(1:2)       26   131.266       39.2333    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117       2825.96        130.08          0.72         30.22          0.12          0.04        161.18
Just calling func    0   0        161.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2825.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       26
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       27
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      116     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -106.378       106.378       1491.54       1597.92    
   2  0.309452      -1.17295      -623.038       623.038       1666.68       2289.72    
   3  0.303638      -1.19192      -633.113       633.113       1608.08       2241.20    
   4  0.754457     -0.281757      -149.661       149.661       1684.50       1834.17    
   5  0.623133     -0.472996      -251.242       251.242       1569.79       1821.03    
   6  0.989422E-01  -2.31322      -1228.71       1228.71       1712.25       2940.96    
   7  0.695126     -0.363662      -193.167       193.167       1613.97       1807.14    
   8  0.832210E-01  -2.48626      -1320.63       1320.63       1632.39       2953.02    
   9  0.869521     -0.139813      -74.2647       74.2647       1778.19       1852.45    
  10  0.488136     -0.717160      -380.934       380.934       1673.73       2054.67    
  11  0.579877     -0.544940      -289.456       289.456       1705.34       1994.80    
  12  0.480435     -0.733064      -389.382       389.382       1736.53       2125.91    
  13  0.792626     -0.232404      -123.446       123.446       1839.42       1962.86    
  14  0.870230     -0.138998      -73.8315       73.8315       1838.76       1912.60    
  15  0.886361     -0.120631      -64.0755       64.0755       1717.71       1781.78    
  16  0.358181      -1.02672      -545.362       545.362       1763.87       2309.23    
  17  0.560125     -0.579594      -307.864       307.864       1799.61       2107.47    
  18  0.546151     -0.604859      -321.283       321.283       1809.33       2130.62    
  19  0.732086     -0.311858      -165.650       165.650       1710.39       1876.04    
  20  0.590102     -0.527460      -280.171       280.171       1797.48       2077.65    
  21  0.867355     -0.142307      -75.5895       75.5895       1735.45       1811.04    
  22  0.749758     -0.288005      -152.980       152.980       1580.47       1733.45    
  23  0.721970     -0.325772      -173.040       173.040       1984.36       2157.40    
  24  0.596865     -0.516065      -274.119       274.119       1980.44       2254.56    
  25  0.878161     -0.129925      -69.0122       69.0122       1780.87       1849.88    
  26  0.558752E-01  -2.88463      -1532.23       1532.23       1919.37       3451.60    
  27  0.555543     -0.587810      -312.227       312.227       1761.73       2073.95    
  28  0.597562     -0.514897      -273.498       273.498       1721.97       1995.47    
  29  0.995329     -0.468202E-02  -2.48695       2.48695       1770.80       1773.28    
  30  0.206787      -1.57606      -837.159       837.159       1781.61       2618.77    
  31  0.645457     -0.437797      -232.545       232.545       1868.49       2101.04    
  32  0.871352     -0.137710      -73.1473       73.1473       2257.89       2331.03    
  33  0.701360     -0.354733      -188.424       188.424       1828.34       2016.77    
  34  0.936151     -0.659784E-01  -35.0458       35.0458       1770.57       1805.61    
  35  0.590091     -0.527478      -280.181       280.181       1764.99       2045.17    
  36  0.750433     -0.287105      -152.502       152.502       1751.68       1904.18    
  37  0.326255      -1.12007      -594.951       594.951       1747.69       2342.64    
  38  0.873133     -0.135668      -72.0628       72.0628       1889.46       1961.53    
  39  0.621627     -0.475415      -252.526       252.526       1816.05       2068.57    
  40  0.153041      -1.87705      -997.033       997.033       1882.40       2879.43    
  41  0.196696      -1.62610      -863.734       863.734       1740.61       2604.35    
  42  0.365028      -1.00778      -535.304       535.304       1698.61       2233.91    
  43  0.398429     -0.920226      -488.797       488.797       1710.27       2199.07    
  44  0.549691     -0.598399      -317.852       317.852       2485.96       2803.81    
  45  0.994179     -0.583795E-02  -3.10095       3.10095       1713.20       1716.30    
  46  0.147335E-01  -4.21763      -2240.28       2240.28       1694.94       3935.22    
  47  0.224737      -1.49282      -792.944       792.944       1947.20       2740.14    
  48  0.182172      -1.70281      -904.480       904.480       2259.08       3163.56    
  49  0.230919      -1.46569      -778.531       778.531       2299.69       3078.22    
  50  0.491818     -0.709647      -376.944       376.944       1775.35       2152.30    
  51  0.370754     -0.992217      -527.036       527.036       2413.66       2940.69    
  52  0.785622     -0.241279      -128.160       128.160       2027.68       2155.84    
  53  0.476284     -0.741742      -393.991       393.991       2191.36       2585.35    
  54  0.958799     -0.420736E-01  -22.3482       22.3482       1669.92       1692.26    
  55  0.305133      -1.18701      -630.504       630.504       1742.84       2373.35    
  56  0.270329      -1.30812      -694.833       694.833       1909.06       2603.90    
  57  0.130426      -2.03695      -1081.97       1081.97       2118.43       3200.39    
  58  0.222171      -1.50431      -799.044       799.044       1747.07       2546.11    
  59  0.233872      -1.45298      -771.781       771.781       1750.26       2522.04    
  60  0.916355E-02  -4.69252      -2492.53       2492.53       1848.91       4341.44    
  61  0.400634     -0.914708      -485.866       485.866       1958.28       2444.15    
  62  0.354647E-01  -3.33922      -1773.69       1773.69       1790.45       3564.14    
  63  0.453450     -0.790870      -420.087       420.087       1795.55       2215.64    
  64  0.411527     -0.887880      -471.616       471.616       1935.34       2406.96    
  65  0.607753     -0.497987      -264.516       264.516       1747.59       2012.11    
  66  0.157481      -1.84845      -981.842       981.842       2609.55       3591.39    
  67  0.260711E-01  -3.64693      -1937.14       1937.14       1736.08       3673.22    
  68  0.183987      -1.69289      -899.213       899.213       1781.42       2680.63    
  69  0.704951     -0.349627      -185.712       185.712       1889.18       2074.89    
  70  0.337767      -1.08540      -576.531       576.531       1561.33       2137.86    
  71  0.718219     -0.330981      -175.807       175.807       1961.16       2136.97    
  72  0.102024      -2.28254      -1212.42       1212.42       1758.12       2970.54    
  73  0.357156      -1.02958      -546.883       546.883       1839.48       2386.36    
  74  0.290676      -1.23555      -656.286       656.286       2825.96       3482.25    
loop,thermsimp(1:2)       27   106.378       623.038    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118       1671.68        129.95          0.67         29.96          1.67          0.05        162.30
Just calling func    0   0        162.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119       1580.67        129.93          0.69         30.20          1.55          0.04        162.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1580.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       27
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       28
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      118     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -112.810       112.810       1491.54       1604.35    
   2  0.162004E-01  -4.12272      -2189.87       2189.87       1669.92       3859.78    
   3  0.446841E-01  -3.10814      -1650.95       1650.95       1713.20       3364.15    
   4  0.757954     -0.277132      -147.205       147.205       1580.47       1727.67    
   5  0.525315     -0.643757      -341.945       341.945       1770.80       2112.74    
   6  0.229940      -1.46994      -780.788       780.788       1717.71       2498.49    
   7  0.273310E-01  -3.59973      -1912.07       1912.07       1770.57       3682.64    
   8  0.228047      -1.47820      -785.178       785.178       1613.97       2399.15    
   9  0.963384E-01  -2.33989      -1242.88       1242.88       1735.45       2978.33    
  10  0.495504     -0.702179      -372.977       372.977       1569.79       1942.76    
  11  0.930436     -0.721018E-01  -38.2983       38.2983       1684.50       1722.80    
  12  0.138744      -1.97513      -1049.13       1049.13       1780.87       2830.00    
  13  0.676381     -0.390999      -207.687       207.687       1778.19       1985.87    
  14  0.763696     -0.269586      -143.196       143.196       1710.39       1853.58    
  15  0.282468      -1.26419      -671.501       671.501       1751.68       2423.18    
  16  0.359172      -1.02395      -543.894       543.894       1838.76       2382.66    
  17  0.392258     -0.935834      -497.088       497.088       1889.46       2386.55    
  18  0.524686     -0.644955      -342.581       342.581       1839.42       2182.00    
  19  0.850465     -0.161972      -86.0348       86.0348       1705.34       1791.38    
  20  0.227056      -1.48256      -787.490       787.490       1721.97       2509.46    
  21  0.942039     -0.597082E-01  -31.7152       31.7152       1747.59       1779.31    
  22  0.807336     -0.214016      -113.679       113.679       1828.34       1942.02    
  23  0.345853      -1.06174      -563.966       563.966       1764.99       2328.96    
  24  0.762940     -0.270575      -143.722       143.722       1673.73       1817.46    
  25  0.589959     -0.527702      -280.300       280.300       1816.05       2096.35    
  26  0.563539     -0.573518      -304.636       304.636       1761.73       2066.36    
  27  0.812044     -0.208201      -110.590       110.590       1889.18       1999.77    
  28  0.735850     -0.306729      -162.926       162.926       1797.48       1960.40    
  29  0.396292     -0.925605      -491.654       491.654       1868.49       2360.15    
  30  0.623568     -0.472298      -250.871       250.871       1799.61       2050.48    
  31  0.925937     -0.769486E-01  -40.8728       40.8728       1736.53       1777.40    
  32  0.880074     -0.127749      -67.8567       67.8567       1809.33       1877.19    
  33  0.379958     -0.967693      -514.010       514.010       1961.16       2475.17    
  34  0.842940E-01  -2.47344      -1313.82       1313.82       1561.33       2875.15    
  35  0.199092      -1.61399      -857.303       857.303       1775.35       2632.65    
  36  0.625899     -0.468566      -248.888       248.888       2027.68       2276.56    
  37  0.888337     -0.118405      -62.8930       62.8930       1984.36       2047.25    
  38  0.959633     -0.412048E-01  -21.8868       21.8868       1710.27       1732.16    
  39  0.289813      -1.23852      -657.864       657.864       1795.55       2453.42    
  40  0.889440     -0.117163      -62.2337       62.2337       1698.61       1760.84    
  41  0.797260     -0.226575      -120.350       120.350       1608.08       1728.43    
  42  0.451097     -0.796073      -422.850       422.850       1980.44       2403.29    
  43  0.609578     -0.494989      -262.923       262.923       1666.68       1929.60    
  44  0.910850     -0.933770E-01  -49.5991       49.5991       1763.87       1813.47    
  45  0.448191     -0.802536      -426.283       426.283       2257.89       2684.17    
  46  0.831229     -0.184850      -98.1866       98.1866       1747.69       1845.88    
  47  0.246260      -1.40137      -744.366       744.366       1742.84       2487.21    
  48  0.280480      -1.27125      -675.252       675.252       1839.48       2514.73    
  49  0.161513      -1.82317      -968.414       968.414       1935.34       2903.76    
  50  0.337020      -1.08761      -577.708       577.708       1958.28       2535.99    
  51  0.160136      -1.83173      -972.961       972.961       1750.26       2723.22    
  52  0.268039      -1.31662      -699.352       699.352       1747.07       2446.42    
  53  0.907744     -0.967928E-01  -51.4135       51.4135       2191.36       2242.78    
  54  0.237998      -1.43549      -762.492       762.492       1909.06       2671.56    
  55  0.932063     -0.703547E-01  -37.3703       37.3703       1740.61       1777.98    
  56  0.304233      -1.18996      -632.073       632.073       1781.61       2413.68    
  57  0.471578     -0.751672      -399.266       399.266       1781.42       2180.68    
  58  0.985625     -0.144798E-01  -7.69124       7.69124       1947.20       1954.89    
  59  0.576194     -0.551311      -292.840       292.840       2485.96       2778.80    
  60  0.561463     -0.577209      -306.597       306.597       1882.40       2189.00    
  61  0.762775     -0.270792      -143.837       143.837       2413.66       2557.50    
  62  0.728042     -0.317397      -168.592       168.592       1712.25       1880.84    
  63  0.246589      -1.40003      -743.656       743.656       1632.39       2376.05    
  64  0.128678      -2.05044      -1089.13       1089.13       1758.12       2847.25    
  65  0.646131     -0.436753      -231.990       231.990       2299.69       2531.68    
  66  0.520849E-01  -2.95488      -1569.55       1569.55       2259.08       3828.62    
  67  0.103665      -2.26659      -1203.94       1203.94       2118.43       3322.37    
  68  0.209683      -1.56216      -829.773       829.773       1919.37       2749.14    
  69  0.401865     -0.911640      -484.236       484.236       2825.96       3310.20    
  70  0.111589      -2.19294      -1164.82       1164.82       1790.45       2955.27    
  71  0.683688     -0.380253      -201.979       201.979       2609.55       2811.52    
  72  0.912223     -0.918706E-01  -48.7990       48.7990       1736.08       1784.88    
  73  0.651148E-01  -2.73160      -1450.95       1450.95       1694.94       3145.89    
  74  0.647173E-01  -2.73773      -1454.20       1454.20       1580.67       3034.87    
loop,thermsimp(1:2)       28   112.810       2189.87    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       1345.41        130.11          0.71         30.31          1.06          0.05        162.23
Just calling func    0   0        162.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121       1376.87        129.99          0.74         30.25          1.25          0.05        162.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    1376.9        2.083    -0.7066      3.583     -100.0     0.5278    
                     -0.5471     0.3986     -100.0      2.498      1.741    
                     -0.5017     0.3413      2.009      0.000     0.7203    
                      -1.098     -20.00      0.000      0.000     -1.100    

                      -2.551      6051.     0.1185E+05 -571.5     -1451.    
                      -4.034     -5.858     -4.537     -15.33     -5.168    
                      -12.99     -2.811     -3038.      0.000    -0.1632E+05

                       367.0      3927.      676.2      932.3      3103.    
                      -98.34    -0.5715E-01-0.1862      0.000    -0.2078    
                     -0.1991    -0.2329    -0.2465    -0.2647    -0.1116    

                     -0.7298     -1.776      1.382     0.1512     0.1327    
                      0.8541E-01 0.6668E-01-0.9760E-01-0.1020     0.3131E-01
                      0.2454E-01 0.6565E-01-0.2387     -2.176      1.382    

                      -1.505     -1.409     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.867      8.867      0.000     0.3464E-03
                      0.2144     0.2144      9.123      8.936     -6508.    

                      0.5905E-03 0.2144     0.2144      9.767      9.067    
                      -6508.     0.4099E-03-0.4856     0.2144      9.367    
                       9.167     -4867.     0.1181E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1345.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       28
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       29
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      120     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -1144.75       1144.75       1491.54       2636.30    
   2  0.685048     -0.378267      -200.924       200.924       1684.50       1885.43    
   3  0.739526     -0.301746      -160.279       160.279       1580.47       1740.74    
   4  0.161448      -1.82357      -968.627       968.627       1608.08       2576.71    
   5  0.819608     -0.198929      -105.665       105.665       1710.27       1815.94    
   6  0.750679     -0.286777      -152.327       152.327       1698.61       1850.93    
   7  0.797409     -0.226388      -120.250       120.250       1736.53       1856.78    
   8  0.193123      -1.64443      -873.473       873.473       1740.61       2614.08    
   9  0.189346E-01  -3.96676      -2107.03       2107.03       1747.59       3854.62    
  10  0.715264     -0.335103      -177.997       177.997       1736.08       1914.08    
  11  0.384856     -0.954886      -507.207       507.207       1705.34       2212.55    
  12  0.268023      -1.31668      -699.384       699.384       1763.87       2463.25    
  13  0.777164     -0.252104      -133.910       133.910       1673.73       1807.64    
  14  0.707495E-01  -2.64861      -1406.86       1406.86       1747.69       3154.55    
  15  0.233610      -1.45410      -772.376       772.376       1710.39       2482.76    
  16  0.193057      -1.64477      -873.655       873.655       1809.33       2682.99    
  17  0.486879     -0.719739      -382.304       382.304       1712.25       2094.55    
  18  0.735370     -0.307381      -163.272       163.272       1666.68       1829.95    
  19  0.147509      -1.91387      -1016.59       1016.59       1828.34       2844.93    
  20  0.739111     -0.302308      -160.577       160.577       1569.79       1730.36    
  21  0.886241     -0.120766      -64.1473       64.1473       1947.20       2011.35    
  22  0.158672      -1.84092      -977.840       977.840       1797.48       2775.32    
  23  0.143658      -1.94032      -1030.64       1030.64       1778.19       2808.83    
  24  0.637431E-02  -5.05548      -2685.32       2685.32       1889.18       4574.50    
  25  0.753372     -0.283196      -150.426       150.426       1984.36       2134.78    
  26  0.555831     -0.587292      -311.952       311.952       1799.61       2111.56    
  27  0.280013      -1.27292      -676.137       676.137       1761.73       2437.86    
  28  0.811304     -0.209112      -111.074       111.074       1816.05       1927.12    
  29  0.972296E-02  -4.63327      -2461.05       2461.05       1770.80       4231.85    
  30  0.713459     -0.337631      -179.340       179.340       1781.42       1960.76    
  31  0.194621      -1.63670      -869.366       869.366       1839.42       2708.78    
  32  0.492587     -0.708083      -376.113       376.113       1882.40       2258.51    
  33  0.759094E-01  -2.57821      -1369.47       1369.47       2191.36       3560.83    
  34  0.494544     -0.704119      -374.007       374.007       2027.68       2401.68    
  35  0.297023      -1.21395      -644.813       644.813       1764.99       2409.80    
  36  0.429878E-01  -3.14684      -1671.51       1671.51       1868.49       3540.00    
  37  0.490931     -0.711452      -377.902       377.902       1632.39       2010.29    
  38  0.534417     -0.626578      -332.820       332.820       1838.76       2171.58    
  39  0.254967      -1.36662      -725.908       725.908       1889.46       2615.37    
  40  0.995945     -0.406335E-02  -2.15833       2.15833       1613.97       1616.13    
  41  0.428814E-01  -3.14932      -1672.82       1672.82       1980.44       3653.26    
  42  0.332915      -1.09987      -584.218       584.218       1781.61       2365.83    
  43  0.657266     -0.419666      -222.914       222.914       1751.68       1974.59    
  44  0.301071      -1.20041      -637.621       637.621       1747.07       2384.69    
  45  0.998178     -0.182349E-02 -0.968586      0.968586       1795.55       1796.52    
  46  0.533372     -0.628536      -333.860       333.860       1961.16       2295.02    
  47  0.244746      -1.40753      -747.641       747.641       1742.84       2490.48    
  48  0.345321      -1.06328      -564.784       564.784       1717.71       2282.49    
  49  0.339541      -1.08016      -573.750       573.750       1721.97       2295.72    
  50  0.456434     -0.784311      -416.603       416.603       1839.48       2256.08    
  51  0.510210     -0.672933      -357.442       357.442       2299.69       2657.14    
  52  0.678441     -0.387958      -206.072       206.072       1958.28       2164.35    
  53  0.802552     -0.219958      -116.835       116.835       2413.66       2530.49    
  54  0.542503     -0.611562      -324.844       324.844       1775.35       2100.20    
  55  0.887113     -0.119783      -63.6253       63.6253       1909.06       1972.69    
  56  0.631934     -0.458971      -243.792       243.792       2257.89       2501.68    
  57  0.776760     -0.252624      -134.187       134.187       1750.26       1884.44    
  58  0.764990     -0.267893      -142.297       142.297       1919.37       2061.67    
  59  0.329328      -1.11070      -589.971       589.971       2485.96       3075.93    
  60  0.304425      -1.18933      -631.737       631.737       2609.55       3241.28    
  61  0.992863     -0.716266E-02  -3.80460       3.80460       1780.87       1784.67    
  62  0.545111     -0.606767      -322.297       322.297       1758.12       2080.42    
  63  0.215175      -1.53630      -816.039       816.039       1561.33       2377.37    
  64  0.486479     -0.720562      -382.741       382.741       1935.34       2318.08    
  65  0.323711      -1.12790      -599.110       599.110       1790.45       2389.56    
  66  0.339000      -1.08176      -574.597       574.597       1735.45       2310.05    
  67  0.494013     -0.705193      -374.578       374.578       1580.67       1955.25    
  68  0.496084     -0.701011      -372.356       372.356       1694.94       2067.30    
  69  0.736144     -0.306329      -162.713       162.713       2825.96       2988.68    
  70  0.106083E-01  -4.54612      -2414.76       2414.76       2118.43       4533.19    
  71  0.106417      -2.24039      -1190.03       1190.03       1713.20       2903.23    
  72  0.378322     -0.972010      -516.303       516.303       1770.57       2286.87    
  73  0.180300      -1.71314      -909.967       909.967       2259.08       3169.05    
  74  0.761678     -0.272232      -144.602       144.602       1345.41       1490.01    
loop,thermsimp(1:2)       29   1144.75       200.924    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122       1827.18        129.95          0.73         30.38          1.07          0.04        162.17
Just calling func    0   0        162.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1827.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       29
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       30
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      121     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -1714.59       1714.59       1345.41       3060.00    
   2  0.712690     -0.338709      -179.912       179.912       1613.97       1793.89    
   3  0.284498      -1.25703      -667.697       667.697       1569.79       2237.49    
   4  0.132414      -2.02182      -1073.93       1073.93       1580.47       2654.40    
   5  0.868558     -0.140920      -74.8527       74.8527       1780.87       1855.72    
   6  0.695240     -0.363498      -193.079       193.079       1795.55       1988.63    
   7  0.777362     -0.251849      -133.775       133.775       1673.73       1807.51    
   8  0.302494      -1.19569      -635.117       635.117       1710.27       2345.39    
   9  0.710188     -0.342225      -181.780       181.780       1666.68       1848.46    
  10  0.884530     -0.122698      -65.1738       65.1738       1698.61       1763.78    
  11  0.146421E-01  -4.22386      -2243.59       2243.59       1736.53       3980.11    
  12  0.834801     -0.180562      -95.9090       95.9090       1750.26       1846.17    
  13  0.414011     -0.881863      -468.420       468.420       1684.50       2152.92    
  14  0.655777     -0.421935      -224.120       224.120       1736.08       1960.20    
  15  0.530106     -0.634679      -337.123       337.123       1816.05       2153.17    
  16  0.325231      -1.12322      -596.622       596.622       1580.67       2177.29    
  17  0.293550      -1.22571      -651.060       651.060       1781.42       2432.48    
  18  0.194161      -1.63907      -870.626       870.626       1909.06       2779.69    
  19  0.589029E-01  -2.83186      -1504.20       1504.20       1751.68       3255.88    
  20  0.385142     -0.954143      -506.813       506.813       1632.39       2139.20    
  21  0.287461      -1.24667      -662.193       662.193       1947.20       2609.39    
  22  0.528518     -0.637678      -338.716       338.716       1919.37       2258.09    
  23  0.517042     -0.659630      -350.376       350.376       1694.94       2045.32    
  24  0.453375     -0.791035      -420.174       420.174       1758.12       2178.30    
  25  0.695596     -0.362986      -192.807       192.807       1712.25       1905.05    
  26  0.645178     -0.438228      -232.774       232.774       1775.35       2008.13    
  27  0.696076     -0.362297      -192.441       192.441       1799.61       1992.05    
  28  0.483522     -0.726659      -385.980       385.980       1984.36       2370.34    
  29  0.155396E-01  -4.16436      -2211.99       2211.99       1958.28       4170.27    
  30  0.883154     -0.124256      -66.0011       66.0011       1838.76       1904.77    
  31  0.525944     -0.642561      -341.310       341.310       1705.34       2046.65    
  32  0.746799     -0.291959      -155.080       155.080       1839.48       1994.56    
  33  0.458658     -0.779449      -414.021       414.021       1882.40       2296.42    
  34  0.614284     -0.487298      -258.839       258.839       1717.71       1976.55    
  35  0.581412     -0.542295      -288.051       288.051       1770.57       2058.62    
  36  0.820935     -0.197312      -104.806       104.806       1961.16       2065.97    
  37  0.852366     -0.159739      -84.8487       84.8487       1721.97       1806.82    
  38  0.527059     -0.640443      -340.184       340.184       1735.45       2075.64    
  39  0.376404     -0.977092      -519.002       519.002       1935.34       2454.34    
  40  0.729525E-01  -2.61795      -1390.58       1390.58       1781.61       3172.19    
  41  0.342258      -1.07219      -569.516       569.516       1561.33       2130.84    
  42  0.955065     -0.459761E-01  -24.4211       24.4211       1747.07       1771.49    
  43  0.508654E-01  -2.97857      -1582.13       1582.13       1790.45       3372.58    
  44  0.471716     -0.751379      -399.110       399.110       2027.68       2426.79    
  45  0.137118      -1.98691      -1055.39       1055.39       1764.99       2820.38    
  46  0.844826     -0.168625      -89.5684       89.5684       1761.73       1851.29    
  47  0.841708     -0.172322      -91.5323       91.5323       1763.87       1855.40    
  48  0.360396E-01  -3.32314      -1765.15       1765.15       1710.39       3475.54    
  49  0.953282     -0.478444E-01  -25.4135       25.4135       1742.84       1768.26    
  50  0.503408     -0.686355      -364.571       364.571       2257.89       2622.46    
  51  0.593854     -0.521122      -276.805       276.805       2413.66       2690.46    
  52  0.524910     -0.644528      -342.354       342.354       1608.08       1950.44    
  53  0.730244     -0.314377      -166.988       166.988       1740.61       1907.60    
  54  0.828919     -0.187632      -99.6648       99.6648       1889.46       1989.13    
  55  0.151629      -1.88632      -1001.96       1001.96       1491.54       2493.50    
  56  0.431672     -0.840089      -446.230       446.230       2299.69       2745.92    
  57  0.449333     -0.799990      -424.931       424.931       1809.33       2234.26    
  58  0.116759      -2.14764      -1140.76       1140.76       1839.42       2980.18    
  59  0.578588     -0.547165      -290.638       290.638       1797.48       2088.12    
  60  0.119282      -2.12627      -1129.41       1129.41       1778.19       2907.60    
  61  0.643272E-01  -2.74377      -1457.41       1457.41       1828.34       3285.75    
  62  0.906211     -0.984834E-01  -52.3115       52.3115       1713.20       1765.51    
  63  0.811859     -0.208429      -110.711       110.711       2825.96       2936.68    
  64  0.119821      -2.12175      -1127.01       1127.01       2485.96       3612.97    
  65  0.827508     -0.189336      -100.570       100.570       1747.69       1848.26    
  66  0.597713     -0.514645      -273.364       273.364       2259.08       2532.44    
  67  0.408976     -0.894099      -474.919       474.919       2609.55       3084.46    
  68  0.889044     -0.117608      -62.4700       62.4700       1868.49       1930.96    
  69  0.623536     -0.472349      -250.898       250.898       2191.36       2442.26    
  70  0.477389     -0.739423      -392.760       392.760       1980.44       2373.20    
  71  0.313804      -1.15899      -615.620       615.620       1747.59       2363.21    
  72  0.814527     -0.205148      -108.968       108.968       1770.80       1879.76    
  73  0.133792      -2.01147      -1068.43       1068.43       2118.43       3186.86    
  74  0.533947     -0.627458      -333.287       333.287       1827.18       2160.46    
loop,thermsimp(1:2)       30   1714.59       179.912    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123       2907.03        130.11          0.71         30.42          0.58          0.05        161.87
Just calling func    0   0        161.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2907.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       30
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       31
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      122     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -739.383       739.383       1698.61       2437.99    
   2  0.247647      -1.39575      -741.382       741.382       1713.20       2454.58    
   3  0.396263     -0.925678      -491.693       491.693       1742.84       2234.54    
   4  0.386461     -0.950723      -504.996       504.996       1747.07       2252.06    
   5  0.729285     -0.315691      -167.686       167.686       1613.97       1781.66    
   6  0.665866     -0.406667      -216.010       216.010       1721.97       1937.98    
   7  0.385122     -0.954194      -506.840       506.840       1673.73       2180.57    
   8  0.625701     -0.468883      -249.057       249.057       1750.26       1999.31    
   9  0.392668     -0.934792      -496.534       496.534       1747.69       2244.22    
  10  0.698356     -0.359026      -190.704       190.704       1666.68       1857.39    
  11  0.537534E-01  -2.92335      -1552.80       1552.80       1761.73       3314.52    
  12  0.289307      -1.24027      -658.794       658.794       1763.87       2422.66    
  13  0.138460E-01  -4.27976      -2273.28       2273.28       1780.87       4054.15    
  14  0.824110     -0.193451      -102.755       102.755       1770.80       1873.55    
  15  0.560983     -0.578065      -307.051       307.051       1838.76       2145.82    
  16  0.116087E-01  -4.45600      -2366.90       2366.90       1712.25       4079.14    
  17  0.218033      -1.52311      -809.030       809.030       1740.61       2549.64    
  18  0.893705E-01  -2.41497      -1282.76       1282.76       1868.49       3151.25    
  19  0.304886      -1.18782      -630.933       630.933       1608.08       2239.02    
  20  0.179833      -1.71573      -911.345       911.345       1736.08       2647.43    
  21  0.867378     -0.142281      -75.5753       75.5753       1717.71       1793.28    
  22  0.243287      -1.41351      -750.816       750.816       1795.55       2546.37    
  23  0.772489     -0.258138      -137.115       137.115       1889.46       2026.58    
  24  0.321011      -1.13628      -603.559       603.559       1799.61       2403.17    
  25  0.499417     -0.694314      -368.799       368.799       1839.48       2208.28    
  26  0.396806     -0.924307      -490.965       490.965       1775.35       2266.32    
  27  0.580203E-01  -2.84696      -1512.22       1512.22       1694.94       3207.16    
  28  0.854206     -0.157583      -83.7034       83.7034       1705.34       1789.04    
  29  0.914649     -0.892145E-01  -47.3881       47.3881       1770.57       1817.96    
  30  0.167601      -1.78617      -948.760       948.760       1961.16       2909.92    
  31  0.350137      -1.04943      -557.427       557.427       1735.45       2292.88    
  32  0.522932     -0.648304      -344.360       344.360       1797.48       2141.84    
  33  0.538779     -0.618450      -328.502       328.502       1561.33       1889.83    
  34  0.693066     -0.366629      -194.743       194.743       1632.39       1827.13    
  35  0.361961      -1.01622      -539.785       539.785       1684.50       2224.29    
  36  0.310665      -1.16904      -620.960       620.960       1816.05       2437.01    
  37  0.818669     -0.200076      -106.274       106.274       1827.18       1933.45    
  38  0.582861     -0.539807      -286.729       286.729       1580.67       1867.40    
  39  0.401728     -0.911979      -484.416       484.416       1758.12       2242.54    
  40  0.171089      -1.76557      -937.820       937.820       1809.33       2747.15    
  41  0.980174     -0.200248E-01  -10.6366       10.6366       1569.79       1580.42    
  42  0.495496     -0.702196      -372.986       372.986       1919.37       2292.36    
  43  0.436683     -0.828549      -440.101       440.101       1882.40       2322.50    
  44  0.910411     -0.938588E-01  -49.8550       49.8550       1710.27       1760.13    
  45  0.649932     -0.430887      -228.875       228.875       1747.59       1976.47    
  46  0.755226     -0.280738      -149.120       149.120       1984.36       2133.47    
  47  0.927352     -0.754221E-01  -40.0620       40.0620       1980.44       2020.50    
  48  0.848028     -0.164842      -87.5591       87.5591       2027.68       2115.24    
  49  0.146193      -1.92283      -1021.35       1021.35       1781.42       2802.77    
  50  0.571278     -0.559879      -297.391       297.391       2191.36       2488.75    
  51  0.244418      -1.40888      -748.354       748.354       1935.34       2683.70    
  52  0.979014     -0.212091E-01  -11.2656       11.2656       1491.54       1502.81    
  53  0.235747      -1.44500      -767.540       767.540       2259.08       3026.62    
  54  0.486927     -0.719642      -382.253       382.253       1947.20       2329.45    
  55  0.694010     -0.365269      -194.020       194.020       2257.89       2451.91    
  56  0.392305     -0.935716      -497.025       497.025       1580.47       2077.49    
  57  0.334373      -1.09550      -581.897       581.897       2413.66       2995.56    
  58  0.526166     -0.642138      -341.085       341.085       2299.69       2640.78    
  59  0.701539     -0.354479      -188.289       188.289       1909.06       2097.35    
  60  0.447845     -0.803307      -426.693       426.693       1764.99       2191.68    
  61  0.927856     -0.748784E-01  -39.7732       39.7732       1778.19       1817.96    
  62  0.453274     -0.791258      -420.293       420.293       2825.96       3246.26    
  63  0.291736      -1.23190      -654.351       654.351       1839.42       2493.77    
  64  0.497643E-02  -5.30304      -2816.82       2816.82       1345.41       4162.23    
  65  0.972200E-01  -2.33078      -1238.04       1238.04       2609.55       3847.59    
  66  0.821987     -0.196031      -104.126       104.126       1781.61       1885.74    
  67  0.652134     -0.427506      -227.078       227.078       2118.43       2345.51    
  68  0.774447     -0.255606      -135.770       135.770       1751.68       1887.45    
  69  0.103131      -2.27176      -1206.69       1206.69       1828.34       3035.03    
  70  0.767617E-01  -2.56705      -1363.54       1363.54       1790.45       3153.99    
  71  0.965592     -0.350134E-01  -18.5981       18.5981       1710.39       1728.98    
  72  0.631959     -0.458930      -243.770       243.770       2485.96       2729.73    
  73  0.276224      -1.28654      -683.375       683.375       1736.53       2419.90    
  74  0.386375     -0.950946      -505.114       505.114       2907.03       3412.15    
loop,thermsimp(1:2)       31   739.383       741.382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       1672.41        129.52          0.65         30.68          1.21          0.01        162.07
Just calling func    0   0        162.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125       3471.57        129.50          0.69         30.89          0.96          0.04        162.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1672.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       31
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       32
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      124     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -2.09154       2.09154       1491.54       1493.63    
   2  0.758684E-02  -4.88134      -2592.82       2592.82       1569.79       4162.61    
   3  0.404439     -0.905254      -480.844       480.844       1710.39       2191.23    
   4  0.947917E-01  -2.35607      -1251.48       1251.48       1710.27       2961.75    
   5  0.834417     -0.181022      -96.1537       96.1537       1613.97       1710.13    
   6  0.891274     -0.115104      -61.1397       61.1397       1705.34       1766.48    
   7  0.744451     -0.295108      -156.753       156.753       1717.71       1874.46    
   8  0.559638     -0.580466      -308.326       308.326       1770.57       2078.89    
   9  0.821724     -0.196351      -104.296       104.296       1778.19       1882.48    
  10  0.847292     -0.165710      -88.0200       88.0200       1632.39       1720.41    
  11  0.661676     -0.412979      -219.362       219.362       1666.68       1886.04    
  12  0.993427     -0.659478E-02  -3.50295       3.50295       1580.67       1584.17    
  13  0.425996     -0.853326      -453.262       453.262       1770.80       2224.06    
  14  0.673132     -0.395813      -210.244       210.244       1781.61       1991.86    
  15  0.234810      -1.44898      -769.655       769.655       1751.68       2521.33    
  16  0.122926      -2.09617      -1113.42       1113.42       1561.33       2674.75    
  17  0.523553     -0.647118      -343.730       343.730       1827.18       2170.91    
  18  0.959317     -0.415333E-01  -22.0613       22.0613       1721.97       1744.03    
  19  0.321726      -1.13406      -602.377       602.377       1747.59       2349.97    
  20  0.493112     -0.707018      -375.547       375.547       1750.26       2125.80    
  21  0.416134     -0.876748      -465.703       465.703       1980.44       2446.14    
  22  0.409432     -0.892985      -474.327       474.327       1889.46       2363.79    
  23  0.657956     -0.418617      -222.357       222.357       1580.47       1802.82    
  24  0.904324     -0.100567      -53.4184       53.4184       1909.06       1962.48    
  25  0.714426     -0.336276      -178.620       178.620       2027.68       2206.30    
  26  0.150521      -1.89365      -1005.85       1005.85       1984.36       2990.21    
  27  0.758740     -0.276096      -146.654       146.654       1797.48       1944.13    
  28  0.359105      -1.02414      -543.993       543.993       1838.76       2382.76    
  29  0.666937     -0.405060      -215.156       215.156       1673.73       1888.89    
  30  0.343213      -1.06940      -568.036       568.036       1764.99       2333.03    
  31  0.484849     -0.723918      -384.524       384.524       1839.48       2224.00    
  32  0.874661     -0.133919      -71.1338       71.1338       1684.50       1755.64    
  33  0.994710     -0.530415E-02  -2.81741       2.81741       1742.84       1745.66    
  34  0.821923     -0.196109      -104.167       104.167       1608.08       1712.25    
  35  0.954096E-02  -4.65216      -2471.09       2471.09       1758.12       4229.21    
  36  0.240030      -1.42699      -757.975       757.975       1747.69       2505.66    
  37  0.279003      -1.27653      -678.056       678.056       1747.07       2425.12    
  38  0.553830     -0.590898      -313.868       313.868       1775.35       2089.22    
  39  0.400809     -0.914271      -485.634       485.634       1919.37       2405.01    
  40  0.146125      -1.92330      -1021.60       1021.60       1735.45       2757.05    
  41  0.811879     -0.208403      -110.698       110.698       1882.40       1993.10    
  42  0.349149      -1.05226      -558.928       558.928       1947.20       2506.13    
  43  0.897422     -0.108229      -57.4880       57.4880       2118.43       2175.91    
  44  0.114492      -2.16725      -1151.18       1151.18       1799.61       2950.79    
  45  0.831901E-01  -2.48663      -1320.82       1320.82       1736.53       3057.35    
  46  0.721169     -0.326882      -173.630       173.630       1763.87       1937.50    
  47  0.801724     -0.220991      -117.384       117.384       1816.05       1933.43    
  48  0.466569     -0.762349      -404.937       404.937       1698.61       2103.54    
  49  0.103404      -2.26911      -1205.29       1205.29       2257.89       3463.17    
  50  0.417206     -0.874175      -464.336       464.336       1713.20       2177.54    
  51  0.267666      -1.31802      -700.091       700.091       2191.36       2891.45    
  52  0.670232     -0.400131      -212.538       212.538       1839.42       2051.95    
  53  0.161265      -1.82470      -969.229       969.229       1795.55       2764.78    
  54  0.414706     -0.880185      -467.528       467.528       1740.61       2208.14    
  55  0.501015     -0.691119      -367.102       367.102       2299.69       2666.80    
  56  0.516090     -0.661474      -351.356       351.356       1736.08       2087.44    
  57  0.424740     -0.856278      -454.830       454.830       1935.34       2390.17    
  58  0.303796      -1.19140      -632.835       632.835       2485.96       3118.79    
  59  0.803455     -0.218834      -116.238       116.238       1809.33       1925.57    
  60  0.416256     -0.876456      -465.547       465.547       1781.42       2246.96    
  61  0.760689     -0.273531      -145.291       145.291       1961.16       2106.45    
  62  0.995587     -0.442238E-02  -2.34904       2.34904       2413.66       2416.01    
  63  0.961804     -0.389449E-01  -20.6864       20.6864       2259.08       2279.77    
  64  0.321618      -1.13439      -602.555       602.555       1828.34       2430.90    
  65  0.850055     -0.162454      -86.2909       86.2909       1868.49       1954.78    
  66  0.408700     -0.894773      -475.277       475.277       1790.45       2265.73    
  67  0.204039E-01  -3.89203      -2067.33       2067.33       1694.94       3762.27    
  68  0.195538      -1.63200      -866.870       866.870       2825.96       3692.84    
  69  0.577737     -0.548636      -291.419       291.419       1761.73       2053.15    
  70  0.958394     -0.424960E-01  -22.5726       22.5726       2907.03       2929.60    
  71  0.570540     -0.561172      -298.078       298.078       2609.55       2907.62    
  72  0.509347     -0.674626      -358.341       358.341       1780.87       2139.21    
  73  0.805802     -0.215917      -114.689       114.689       1712.25       1826.94    
  74  0.188251      -1.66998      -887.044       887.044       1672.41       2559.45    
loop,thermsimp(1:2)       32   2.09154       2592.82    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126       4093.69        128.72          0.71         30.85          0.90          0.04        161.22
Just calling func    0   0        161.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4093.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       32
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       33
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      125     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -417.585       417.585       1491.54       1909.13    
   2  0.588265E-01  -2.83316      -1504.89       1504.89       1580.67       3085.56    
   3  0.787103E-01  -2.54198      -1350.23       1350.23       1613.97       2964.20    
   4  0.597713     -0.514644      -273.364       273.364       1608.08       1881.45    
   5  0.110741      -2.20056      -1168.87       1168.87       1632.39       2801.26    
   6  0.677861     -0.388813      -206.526       206.526       1721.97       1928.49    
   7  0.307724      -1.17855      -626.012       626.012       1742.84       2368.85    
   8  0.550587     -0.596770      -316.987       316.987       1684.50       2001.49    
   9  0.601295     -0.508669      -270.190       270.190       1705.34       1975.53    
  10  0.487121     -0.719243      -382.041       382.041       1580.47       1962.51    
  11  0.146295      -1.92213      -1020.98       1020.98       1712.25       2733.22    
  12  0.714050     -0.336802      -178.899       178.899       1717.71       1896.61    
  13  0.723089     -0.324223      -172.218       172.218       1778.19       1950.40    
  14  0.805432     -0.216376      -114.933       114.933       1666.68       1781.61    
  15  0.123280      -2.09329      -1111.90       1111.90       1673.73       2785.63    
  16  0.853039     -0.158950      -84.4297       84.4297       1809.33       1893.76    
  17  0.288289      -1.24379      -660.665       660.665       1816.05       2476.71    
  18  0.705126     -0.349379      -185.580       185.580       1763.87       1949.45    
  19  0.772420     -0.258227      -137.162       137.162       1797.48       1934.64    
  20  0.962845     -0.378631E-01  -20.1118       20.1118       1868.49       1888.61    
  21  0.245802      -1.40323      -745.353       745.353       1909.06       2654.42    
  22  0.752702     -0.284087      -150.898       150.898       1781.61       1932.51    
  23  0.729896     -0.314853      -167.240       167.240       1882.40       2049.64    
  24  0.869278     -0.140092      -74.4129       74.4129       1839.42       1913.83    
  25  0.597817E-01  -2.81706      -1496.34       1496.34       1761.73       3258.06    
  26  0.984108     -0.160195E-01  -8.50910       8.50910       1770.57       1779.08    
  27  0.278288      -1.27910      -679.419       679.419       1736.08       2415.50    
  28  0.588278     -0.530555      -281.815       281.815       1775.35       2057.17    
  29  0.807614     -0.213671      -113.496       113.496       1698.61       1812.10    
  30  0.428679     -0.847047      -449.926       449.926       1961.16       2411.09    
  31  0.452991     -0.791883      -420.625       420.625       1750.26       2170.88    
  32  0.678742     -0.387514      -205.836       205.836       1780.87       1986.70    
  33  0.504500     -0.684188      -363.420       363.420       1827.18       2190.60    
  34  0.894800     -0.111155      -59.0422       59.0422       2118.43       2177.47    
  35  0.854311     -0.157461      -83.6384       83.6384       1713.20       1796.84    
  36  0.756230     -0.279410      -148.414       148.414       1710.39       1858.80    
  37  0.744369     -0.295219      -156.812       156.812       2027.68       2184.49    
  38  0.435758     -0.830668      -441.226       441.226       1740.61       2181.84    
  39  0.677387     -0.389513      -206.898       206.898       1839.48       2046.37    
  40  0.504989     -0.683219      -362.906       362.906       1770.80       2133.70    
  41  0.325676      -1.12185      -595.895       595.895       1781.42       2377.31    
  42  0.147207      -1.91591      -1017.68       1017.68       1790.45       2808.13    
  43  0.432041     -0.839234      -445.777       445.777       2259.08       2704.86    
  44  0.615972     -0.484555      -257.381       257.381       1764.99       2022.37    
  45  0.150867      -1.89136      -1004.63       1004.63       1747.59       2752.23    
  46  0.464307     -0.767210      -407.519       407.519       1889.46       2296.98    
  47  0.379753     -0.968234      -514.297       514.297       1838.76       2353.06    
  48  0.886192     -0.120822      -64.1770       64.1770       1935.34       1999.52    
  49  0.231751E-01  -3.76468      -1999.69       1999.69       1919.37       3919.06    
  50  0.257662      -1.35611      -720.324       720.324       2413.66       3133.98    
  51  0.470381E-01  -3.05680      -1623.68       1623.68       1747.07       3370.75    
  52  0.972366     -0.280233E-01  -14.8852       14.8852       1828.34       1843.23    
  53  0.242054      -1.41860      -753.516       753.516       1980.44       2733.95    
  54  0.660577     -0.414642      -220.246       220.246       1747.69       1967.94    
  55  0.234396      -1.45074      -770.591       770.591       1947.20       2717.79    
  56  0.891547     -0.114797      -60.9769       60.9769       1751.68       1812.65    
  57  0.408879E-01  -3.19692      -1698.11       1698.11       1672.41       3370.52    
  58  0.577007     -0.549901      -292.091       292.091       2299.69       2591.78    
  59  0.851462     -0.160801      -85.4126       85.4126       1561.33       1646.74    
  60  0.733240     -0.310283      -164.813       164.813       1735.45       1900.26    
  61  0.219002E-01  -3.82126      -2029.74       2029.74       1795.55       3825.29    
  62  0.293643      -1.22539      -650.891       650.891       2191.36       2842.25    
  63  0.552105     -0.594017      -315.524       315.524       2609.55       2925.07    
  64  0.638007E-01  -2.75199      -1461.78       1461.78       2907.03       4368.81    
  65  0.332554      -1.10095      -584.794       584.794       1799.61       2384.40    
  66  0.365239      -1.00720      -534.997       534.997       1710.27       2245.27    
  67  0.160984      -1.82645      -970.156       970.156       1984.36       2954.51    
  68  0.149423      -1.90098      -1009.74       1009.74       1736.53       2746.27    
  69  0.142989      -1.94499      -1033.12       1033.12       2485.96       3519.08    
  70  0.516056     -0.661540      -351.390       351.390       2257.89       2609.28    
  71  0.719056E-01  -2.63240      -1398.25       1398.25       2825.96       4224.22    
  72  0.968385     -0.321257E-01  -17.0642       17.0642       1694.94       1712.01    
  73  0.888186     -0.118574      -62.9828       62.9828       1569.79       1632.77    
  74  0.626022E-01  -2.77095      -1471.85       1471.85       4093.69       5565.54    
loop,thermsimp(1:2)       33   417.585       1504.89    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       1758.12        129.93          0.74         30.40          0.78          0.05        161.91
Just calling func    0   0        161.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128       2251.26        129.96          0.76         30.32          0.32          0.05        161.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1758.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       33
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       34
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      127     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -1243.87       1243.87       1569.79       2813.66    
   2  0.298819      -1.20792      -641.611       641.611       1561.33       2202.94    
   3  0.706385     -0.347595      -184.632       184.632       1694.94       1879.57    
   4  0.958764     -0.421100E-01  -22.3676       22.3676       1770.57       1792.94    
   5  0.306496      -1.18255      -628.136       628.136       1666.68       2294.82    
   6  0.905447     -0.993270E-01  -52.7596       52.7596       1713.20       1765.96    
   7  0.234113      -1.45195      -771.233       771.233       1698.61       2469.84    
   8  0.704141     -0.350777      -186.322       186.322       1751.68       1938.00    
   9  0.908200     -0.962902E-01  -51.1465       51.1465       1828.34       1879.49    
  10  0.656383     -0.421011      -223.629       223.629       1710.39       1934.01    
  11  0.967894     -0.326327E-01  -17.3335       17.3335       1608.08       1625.42    
  12  0.754670     -0.281475      -149.511       149.511       1868.49       2018.00    
  13  0.488960     -0.715475      -380.039       380.039       1809.33       2189.37    
  14  0.451577     -0.795009      -422.285       422.285       1717.71       2139.99    
  15  0.387599E-01  -3.25037      -1726.50       1726.50       1735.45       3461.95    
  16  0.210942E-02  -6.16134      -3272.72       3272.72       1491.54       4764.27    
  17  0.656530     -0.420787      -223.509       223.509       1839.42       2062.93    
  18  0.181246      -1.70790      -907.187       907.187       1721.97       2629.15    
  19  0.758879     -0.275913      -146.557       146.557       1781.61       1928.17    
  20  0.392052     -0.936362      -497.368       497.368       1797.48       2294.85    
  21  0.406710     -0.899654      -477.870       477.870       1763.87       2241.74    
  22  0.830107     -0.186201      -98.9043       98.9043       1778.19       1877.09    
  23  0.311833      -1.16529      -618.967       618.967       1580.47       2199.43    
  24  0.945407     -0.561396E-01  -29.8197       29.8197       1747.69       1777.51    
  25  0.303319      -1.19297      -633.671       633.671       1705.34       2339.01    
  26  0.284230      -1.25797      -668.197       668.197       1780.87       2449.06    
  27  0.292492      -1.22932      -652.977       652.977       1935.34       2588.32    
  28  0.401496     -0.912557      -484.723       484.723       1684.50       2169.23    
  29  0.379648     -0.968510      -514.444       514.444       1764.99       2279.43    
  30  0.723496E-01  -2.62625      -1394.98       1394.98       1839.48       3234.46    
  31  0.940338     -0.615157E-01  -32.6754       32.6754       1882.40       1915.07    
  32  0.766237     -0.266264      -141.431       141.431       1775.35       1916.78    
  33  0.984920     -0.151946E-01  -8.07092       8.07092       1770.80       1778.87    
  34  0.552546     -0.593218      -315.100       315.100       1750.26       2065.36    
  35  0.735557     -0.307128      -163.137       163.137       2118.43       2281.56    
  36  0.142195      -1.95056      -1036.08       1036.08       1740.61       2776.69    
  37  0.304783      -1.18816      -631.113       631.113       2027.68       2658.79    
  38  0.868582     -0.140894      -74.8386       74.8386       1827.18       1902.01    
  39  0.382741     -0.960397      -510.135       510.135       1710.27       2220.41    
  40  0.273812      -1.29531      -688.033       688.033       1889.46       2577.50    
  41  0.601920     -0.507631      -269.639       269.639       1838.76       2108.40    
  42  0.827744     -0.189051      -100.419       100.419       1742.84       1843.26    
  43  0.881186E-01  -2.42907      -1290.25       1290.25       1781.42       3071.67    
  44  0.386744     -0.949994      -504.609       504.609       1799.61       2304.21    
  45  0.852312     -0.159803      -84.8826       84.8826       1961.16       2046.05    
  46  0.830189     -0.186102      -98.8522       98.8522       1736.08       1834.93    
  47  0.216531      -1.53002      -812.703       812.703       1816.05       2628.75    
  48  0.835540     -0.179677      -95.4392       95.4392       2299.69       2395.13    
  49  0.962152     -0.385824E-01  -20.4939       20.4939       2257.89       2278.38    
  50  0.866477     -0.143320      -76.1272       76.1272       1909.06       1985.19    
  51  0.640111     -0.446114      -236.962       236.962       2259.08       2496.04    
  52  0.103467      -2.26850      -1204.96       1204.96       1947.20       3152.16    
  53  0.746080     -0.292923      -155.592       155.592       1712.25       1867.84    
  54  0.154266      -1.86908      -992.799       992.799       1980.44       2973.24    
  55  0.479981     -0.734008      -389.884       389.884       1736.53       2126.41    
  56  0.641740     -0.443572      -235.612       235.612       1747.59       1983.21    
  57  0.282342      -1.26463      -671.737       671.737       1673.73       2345.47    
  58  0.691857     -0.368376      -195.671       195.671       1632.39       1828.06    
  59  0.774818     -0.255127      -135.516       135.516       1790.45       1925.97    
  60  0.950647     -0.506124E-01  -26.8838       26.8838       2191.36       2218.25    
  61  0.946272E-01  -2.35781      -1252.40       1252.40       2609.55       3861.94    
  62  0.936976     -0.650979E-01  -34.5781       34.5781       1984.36       2018.93    
  63  0.339755      -1.07953      -573.415       573.415       1613.97       2187.39    
  64  0.781991     -0.245913      -130.621       130.621       1580.67       1711.29    
  65  0.524538     -0.645237      -342.731       342.731       2413.66       2756.39    
  66  0.740186     -0.300853      -159.804       159.804       1761.73       1921.53    
  67  0.713516     -0.337550      -179.297       179.297       1672.41       1851.71    
  68  0.760009     -0.274425      -145.767       145.767       1747.07       1892.84    
  69  0.813040     -0.206975      -109.939       109.939       2485.96       2595.89    
  70  0.177817E-01  -4.02959      -2140.40       2140.40       1795.55       3935.95    
  71  0.585717     -0.534918      -284.133       284.133       1919.37       2203.50    
  72  0.151688      -1.88593      -1001.75       1001.75       2825.96       3827.72    
  73  0.870493     -0.138695      -73.6709       73.6709       2907.03       2980.70    
  74  0.226172      -1.48646      -789.564       789.564       1758.12       2547.68    
loop,thermsimp(1:2)       34   1243.87       641.611    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       2555.88        129.97          0.71         30.54          0.94          0.04        162.20
Just calling func    0   0        162.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2555.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       34
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       35
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      128     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -560.532       560.532       1608.08       2168.62    
   2  0.175000      -1.74297      -925.815       925.815       1580.67       2506.48    
   3  0.131587      -2.02809      -1077.26       1077.26       1713.20       2790.46    
   4  0.301717      -1.19826      -636.483       636.483       1747.69       2384.17    
   5  0.166877      -1.79050      -951.061       951.061       1770.80       2721.86    
   6  0.481073     -0.731736      -388.676       388.676       1770.57       2159.24    
   7  0.706381     -0.347600      -184.635       184.635       1632.39       1817.03    
   8  0.702617     -0.352943      -187.473       187.473       1736.08       1923.55    
   9  0.552795     -0.592767      -314.861       314.861       1742.84       2057.70    
  10  0.495420     -0.702349      -373.067       373.067       1672.41       2045.48    
  11  0.479343     -0.735339      -390.590       390.590       1712.25       2102.84    
  12  0.462659     -0.770765      -409.408       409.408       1778.19       2187.59    
  13  0.631315E-01  -2.76253      -1467.38       1467.38       1828.34       3295.72    
  14  0.785681     -0.241205      -128.121       128.121       1694.94       1823.06    
  15  0.767932     -0.264055      -140.258       140.258       1747.07       1887.33    
  16  0.262689E-01  -3.63937      -1933.13       1933.13       1827.18       3760.30    
  17  0.871353     -0.137708      -73.1464       73.1464       1882.40       1955.55    
  18  0.618350     -0.480701      -255.334       255.334       1775.35       2030.69    
  19  0.196090      -1.62918      -865.374       865.374       1761.73       2627.10    
  20  0.925050     -0.779078E-01  -41.3824       41.3824       1790.45       1831.83    
  21  0.903269     -0.101735      -54.0387       54.0387       1781.61       1835.65    
  22  0.958828     -0.420436E-01  -22.3323       22.3323       1710.39       1732.72    
  23  0.969274     -0.312081E-01  -16.5768       16.5768       1751.68       1768.25    
  24  0.313932      -1.15858      -615.403       615.403       1747.59       2363.00    
  25  0.106324      -2.24126      -1190.49       1190.49       1909.06       3099.56    
  26  0.718705     -0.330304      -175.448       175.448       1868.49       2043.94    
  27  0.751116     -0.286195      -152.018       152.018       1984.36       2136.37    
  28  0.996391     -0.361592E-02  -1.92067       1.92067       1961.16       1963.08    
  29  0.313387      -1.16032      -616.327       616.327       1839.42       2455.74    
  30  0.305057      -1.18726      -630.635       630.635       1750.26       2380.89    
  31  0.408833     -0.894447      -475.104       475.104       1838.76       2313.87    
  32  0.589856     -0.527877      -280.393       280.393       1736.53       2016.92    
  33  0.808683     -0.212349      -112.793       112.793       1717.71       1830.50    
  34  0.481635     -0.730569      -388.057       388.057       1684.50       2072.56    
  35  0.677481     -0.389374      -206.824       206.824       1613.97       1820.80    
  36  0.673605     -0.395111      -209.871       209.871       1809.33       2019.20    
  37  0.409374E-01  -3.19571      -1697.47       1697.47       1580.47       3277.93    
  38  0.362144      -1.01571      -539.517       539.517       1561.33       2100.85    
  39  0.364718E-01  -3.31122      -1758.82       1758.82       1919.37       3678.19    
  40  0.280272      -1.27199      -675.646       675.646       2191.36       2867.01    
  41  0.532528     -0.630120      -334.701       334.701       1710.27       2044.98    
  42  0.901591     -0.103595      -55.0265       55.0265       1763.87       1818.89    
  43  0.262858      -1.33614      -709.718       709.718       2257.89       2967.61    
  44  0.168755      -1.77931      -945.117       945.117       1764.99       2710.11    
  45  0.504619     -0.683952      -363.295       363.295       2118.43       2481.72    
  46  0.900650     -0.104639      -55.5810       55.5810       1666.68       1722.26    
  47  0.438495     -0.824406      -437.900       437.900       1797.48       2235.38    
  48  0.984597     -0.155233E-01  -8.24554       8.24554       1799.61       1807.85    
  49  0.469739     -0.755579      -401.341       401.341       1705.34       2106.68    
  50  0.252111      -1.37789      -731.892       731.892       1673.73       2405.63    
  51  0.764692     -0.268282      -142.504       142.504       2299.69       2442.20    
  52  0.848445     -0.164351      -87.2982       87.2982       1780.87       1868.16    
  53  0.705739     -0.348509      -185.118       185.118       1698.61       1883.72    
  54  0.449895     -0.798741      -424.268       424.268       2259.08       2683.35    
  55  0.742135     -0.298224      -158.408       158.408       1758.12       1916.53    
  56  0.305311      -1.18642      -630.194       630.194       1889.46       2519.66    
  57  0.798408     -0.225136      -119.586       119.586       1935.34       2054.93    
  58  0.807590     -0.213700      -113.511       113.511       2485.96       2599.47    
  59  0.768432     -0.263404      -139.912       139.912       1816.05       1955.96    
  60  0.895397     -0.110488      -58.6882       58.6882       1721.97       1780.66    
  61  0.585964     -0.534497      -283.909       283.909       2027.68       2311.59    
  62  0.785258     -0.241743      -128.407       128.407       2413.66       2542.07    
  63  0.311021      -1.16790      -620.352       620.352       1740.61       2360.96    
  64  0.803571     -0.218690      -116.162       116.162       1569.79       1685.95    
  65  0.879509     -0.128391      -68.1975       68.1975       1980.44       2048.64    
  66  0.605375     -0.501907      -266.598       266.598       2907.03       3173.63    
  67  0.774979     -0.254920      -135.406       135.406       1781.42       1916.82    
  68  0.621445     -0.475708      -252.682       252.682       1947.20       2199.88    
  69  0.755932     -0.279804      -148.624       148.624       1839.48       1988.10    
  70  0.211323E-01  -3.85695      -2048.70       2048.70       1735.45       3784.15    
  71  0.616355     -0.483932      -257.051       257.051       2825.96       3083.02    
  72  0.102593      -2.27699      -1209.47       1209.47       2609.55       3819.01    
  73  0.728301     -0.317041      -168.403       168.403       1795.55       1963.96    
  74  0.243662      -1.41197      -749.999       749.999       2555.88       3305.88    
loop,thermsimp(1:2)       35   560.532       925.815    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130       2001.89        129.88          0.71         30.49          0.47          0.04        161.60
Just calling func    0   0        161.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2001.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       35
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       36
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      129     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -1370.30       1370.30       1569.79       2940.09    
   2  0.962370     -0.383559E-01  -20.3735       20.3735       1666.68       1687.05    
   3  0.356737      -1.03076      -547.507       547.507       1710.39       2257.89    
   4  0.884319     -0.122937      -65.3006       65.3006       1751.68       1816.98    
   5  0.919725E-01  -2.38627      -1267.51       1267.51       1721.97       2989.48    
   6  0.900184     -0.105156      -55.8557       55.8557       1799.61       1855.46    
   7  0.390055     -0.941468      -500.080       500.080       1632.39       2132.47    
   8  0.263976      -1.33190      -707.465       707.465       1763.87       2471.33    
   9  0.898455     -0.107078      -56.8769       56.8769       1613.97       1670.85    
  10  0.697674E-01  -2.66259      -1414.29       1414.29       1694.94       3109.23    
  11  0.888938     -0.117727      -62.5333       62.5333       1717.71       1780.24    
  12  0.824147     -0.193406      -102.732       102.732       1790.45       1893.18    
  13  0.941109     -0.606968E-01  -32.2404       32.2404       1781.61       1813.85    
  14  0.885654     -0.121429      -64.4994       64.4994       1780.87       1845.37    
  15  0.798208     -0.225386      -119.718       119.718       1698.61       1818.32    
  16  0.365331      -1.00695      -534.864       534.864       1747.07       2281.93    
  17  0.519490     -0.654907      -347.867       347.867       1758.12       2105.99    
  18  0.922741     -0.804065E-01  -42.7096       42.7096       1781.42       1824.13    
  19  0.877443     -0.130744      -69.4472       69.4472       1736.08       1805.53    
  20  0.584844     -0.536410      -284.925       284.925       1882.40       2167.32    
  21  0.671390     -0.398406      -211.621       211.621       1816.05       2027.67    
  22  0.203335      -1.59290      -846.101       846.101       1961.16       2807.26    
  23  0.330236E-01  -3.41053      -1811.58       1811.58       1795.55       3607.13    
  24  0.879725     -0.128146      -68.0676       68.0676       1839.48       1907.54    
  25  0.833976     -0.181550      -96.4343       96.4343       1736.53       1832.96    
  26  0.901698     -0.103475      -54.9630       54.9630       1809.33       1864.29    
  27  0.692847     -0.366946      -194.911       194.911       1775.35       1970.26    
  28  0.550572     -0.596797      -317.001       317.001       1868.49       2185.49    
  29  0.158383E-01  -4.14532      -2201.87       2201.87       1710.27       3912.15    
  30  0.503246     -0.686677      -364.743       364.743       1672.41       2037.15    
  31  0.648812     -0.432612      -229.791       229.791       1980.44       2210.23    
  32  0.306980      -1.18097      -627.298       627.298       1935.34       2562.64    
  33  0.205188      -1.58383      -841.284       841.284       1742.84       2584.13    
  34  0.265146      -1.32748      -705.116       705.116       1684.50       2389.62    
  35  0.272730E-01  -3.60186      -1913.20       1913.20       1561.33       3474.53    
  36  0.262990E-01  -3.63823      -1932.52       1932.52       1712.25       3644.76    
  37  0.492753     -0.707748      -375.935       375.935       1705.34       2081.28    
  38  0.255065      -1.36624      -725.704       725.704       1984.36       2710.06    
  39  0.623259     -0.472794      -251.134       251.134       1770.57       2021.70    
  40  0.949296     -0.520343E-01  -27.6391       27.6391       1608.08       1635.72    
  41  0.982394     -0.177630E-01  -9.43517       9.43517       1778.19       1787.62    
  42  0.566450     -0.568366      -301.899       301.899       1947.20       2249.10    
  43  0.557613     -0.584090      -310.251       310.251       1797.48       2107.73    
  44  0.900731     -0.104549      -55.5333       55.5333       2027.68       2083.21    
  45  0.671339     -0.398481      -211.661       211.661       1838.76       2050.43    
  46  0.650454     -0.430084      -228.448       228.448       1740.61       1969.06    
  47  0.749315     -0.288595      -153.293       153.293       1747.59       1900.89    
  48  0.667497     -0.404220      -214.710       214.710       1750.26       1964.97    
  49  0.132870      -2.01838      -1072.11       1072.11       1747.69       2819.80    
  50  0.964787     -0.358480E-01  -19.0414       19.0414       1673.73       1692.77    
  51  0.835780     -0.179390      -95.2865       95.2865       2299.69       2394.98    
  52  0.601609     -0.508148      -269.913       269.913       1839.42       2109.33    
  53  0.937321     -0.647298E-01  -34.3826       34.3826       2118.43       2152.81    
  54  0.467877     -0.759550      -403.451       403.451       1580.67       1984.12    
  55  0.953249     -0.478789E-01  -25.4319       25.4319       1889.46       1914.89    
  56  0.827724     -0.189076      -100.431       100.431       2413.66       2514.09    
  57  0.624780     -0.470355      -249.839       249.839       2485.96       2735.79    
  58  0.821535     -0.196581      -104.418       104.418       1761.73       1866.14    
  59  0.625285     -0.469548      -249.410       249.410       2259.08       2508.49    
  60  0.581213     -0.542638      -288.233       288.233       1764.99       2053.22    
  61  0.855886E-01  -2.45820      -1305.72       1305.72       1770.80       3076.52    
  62  0.262334      -1.33814      -710.778       710.778       1713.20       2423.98    
  63  0.978265     -0.219749E-01  -11.6724       11.6724       2191.36       2203.03    
  64  0.600842     -0.509423      -270.591       270.591       2257.89       2528.48    
  65  0.476413     -0.741470      -393.847       393.847       2825.96       3219.81    
  66  0.922813     -0.803282E-01  -42.6680       42.6680       1909.06       1951.73    
  67  0.468949     -0.757261      -402.235       402.235       2907.03       3309.27    
  68  0.832153E-01  -2.48632      -1320.66       1320.66       1580.47       2901.13    
  69  0.927485     -0.752786E-01  -39.9858       39.9858       1828.34       1868.33    
  70  0.487372     -0.718728      -381.767       381.767       2555.88       2937.65    
  71  0.410125     -0.891292      -473.428       473.428       1919.37       2392.80    
  72  0.961670     -0.390839E-01  -20.7602       20.7602       1827.18       1847.94    
  73  0.683411     -0.380659      -202.195       202.195       1735.45       1937.65    
  74  0.970618     -0.298221E-01  -15.8406       15.8406       2001.89       2017.73    
loop,thermsimp(1:2)       36   1370.30       20.3735    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131       1938.60        129.97          0.73         29.03          2.43          0.05        162.22
Just calling func    0   0        162.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132       2370.40        129.40          0.67         30.08          1.94          0.05        162.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1938.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       36
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       37
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      131     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -33.3387       33.3387       1608.08       1641.42    
   2  0.112532E-01  -4.48710      -2383.42       2383.42       1613.97       3997.39    
   3  0.907929     -0.965891E-01  -51.3053       51.3053       1666.68       1717.99    
   4  0.478640     -0.736807      -391.370       391.370       1673.73       2065.10    
   5  0.737686     -0.304237      -161.602       161.602       1717.71       1879.31    
   6  0.114880      -2.16387      -1149.38       1149.38       1778.19       2927.57    
   7  0.309837      -1.17171      -622.377       622.377       1736.08       2358.46    
   8  0.469091     -0.756958      -402.074       402.074       1781.61       2183.68    
   9  0.721151     -0.326907      -173.643       173.643       1751.68       1925.32    
  10  0.557251     -0.584740      -310.597       310.597       1698.61       2009.20    
  11  0.581534     -0.542085      -287.940       287.940       1781.42       2069.36    
  12  0.501412     -0.690326      -366.681       366.681       1736.53       2103.21    
  13  0.783062     -0.244543      -129.894       129.894       1780.87       1910.76    
  14  0.571322     -0.559803      -297.351       297.351       1827.18       2124.53    
  15  0.902729E-01  -2.40492      -1277.42       1277.42       1799.61       3077.03    
  16  0.695403E-01  -2.66585      -1416.02       1416.02       1809.33       3225.35    
  17  0.128872      -2.04894      -1088.34       1088.34       1761.73       2850.06    
  18  0.940828E-01  -2.36358      -1255.46       1255.46       1828.34       3083.81    
  19  0.326350      -1.11979      -594.797       594.797       1790.45       2385.25    
  20  0.102915      -2.27385      -1207.80       1207.80       1747.59       2955.40    
  21  0.324524      -1.12540      -597.777       597.777       1839.48       2437.25    
  22  0.259454      -1.34918      -716.643       716.643       1889.46       2606.11    
  23  0.782812     -0.244863      -130.064       130.064       1735.45       1865.52    
  24  0.383591     -0.958178      -508.956       508.956       1909.06       2418.02    
  25  0.626880     -0.466999      -248.056       248.056       1750.26       1998.31    
  26  0.292269      -1.23008      -653.382       653.382       1740.61       2393.99    
  27  0.448852     -0.801062      -425.501       425.501       1775.35       2200.85    
  28  0.685432     -0.377706      -200.627       200.627       1580.67       1781.30    
  29  0.995399     -0.461118E-02  -2.44932       2.44932       2001.89       2004.33    
  30  0.163323      -1.81203      -962.496       962.496       1770.57       2733.06    
  31  0.952940     -0.482038E-01  -25.6044       25.6044       1816.05       1841.65    
  32  0.861306     -0.149306      -79.3068       79.3068       1672.41       1751.72    
  33  0.587276     -0.532261      -282.721       282.721       1838.76       2121.49    
  34  0.908704     -0.957357E-01  -50.8520       50.8520       1764.99       1815.84    
  35  0.585935     -0.534546      -283.935       283.935       1705.34       1989.28    
  36  0.429836     -0.844352      -448.495       448.495       2027.68       2476.17    
  37  0.726203     -0.319926      -169.935       169.935       1758.12       1928.06    
  38  0.151145E-01  -4.19210      -2226.72       2226.72       1797.48       4024.20    
  39  0.927869     -0.748646E-01  -39.7659       39.7659       1839.42       1879.18    
  40  0.961645     -0.391099E-01  -20.7740       20.7740       1632.39       1653.17    
  41  0.253977      -1.37051      -727.975       727.975       2118.43       2846.40    
  42  0.768038     -0.263917      -140.185       140.185       1882.40       2022.58    
  43  0.569441E-01  -2.86569      -1522.17       1522.17       1868.49       3390.66    
  44  0.103919      -2.26415      -1202.65       1202.65       2191.36       3394.01    
  45  0.312226      -1.16403      -618.297       618.297       1980.44       2598.74    
  46  0.473636E-02  -5.35249      -2843.08       2843.08       1947.20       4790.28    
  47  0.192099      -1.64975      -876.296       876.296       1710.39       2586.68    
  48  0.799429     -0.223858      -118.907       118.907       1747.07       1865.98    
  49  0.164379      -1.80558      -959.072       959.072       1684.50       2643.58    
  50  0.421896     -0.862996      -458.398       458.398       1919.37       2377.77    
  51  0.361660      -1.01705      -540.227       540.227       2299.69       2839.92    
  52  0.346541      -1.05975      -562.910       562.910       1713.20       2276.11    
  53  0.728715     -0.316473      -168.101       168.101       1763.87       1931.97    
  54  0.305329      -1.18637      -630.162       630.162       2259.08       2889.24    
  55  0.547244     -0.602861      -320.222       320.222       2413.66       2733.88    
  56  0.942790     -0.589122E-01  -31.2924       31.2924       2257.89       2289.18    
  57  0.846801     -0.166290      -88.3284       88.3284       1935.34       2023.67    
  58  0.961806     -0.389424E-01  -20.6851       20.6851       1742.84       1763.53    
  59  0.101104      -2.29161      -1217.23       1217.23       1984.36       3201.59    
  60  0.181736      -1.70520      -905.753       905.753       2485.96       3391.71    
  61  0.298004      -1.21065      -643.061       643.061       1961.16       2604.22    
  62  0.840699E-01  -2.47611      -1315.23       1315.23       1747.69       3062.92    
  63  0.796444     -0.227598      -120.893       120.893       1580.47       1701.36    
  64  0.294043      -1.22403      -650.168       650.168       2555.88       3206.05    
  65  0.156591      -1.85412      -984.852       984.852       1569.79       2554.64    
  66  0.973381     -0.269794E-01  -14.3307       14.3307       1721.97       1736.30    
  67  0.515799     -0.662038      -351.655       351.655       1770.80       2122.45    
  68  0.211924      -1.55153      -824.127       824.127       1694.94       2519.07    
  69  0.830172     -0.186122      -98.8627       98.8627       2825.96       2924.83    
  70  0.666225     -0.406128      -215.723       215.723       2907.03       3122.76    
  71  0.756659     -0.278843      -148.113       148.113       1561.33       1709.44    
  72  0.799292     -0.224029      -118.998       118.998       1795.55       1914.55    
  73  0.644747     -0.438898      -233.130       233.130       1712.25       1945.38    
  74  0.802537     -0.219977      -116.845       116.845       1938.60       2055.44    
loop,thermsimp(1:2)       37   33.3387       2383.42    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133       2435.97        129.77          0.69         29.68          1.71          0.04        161.88
Just calling func    0   0        161.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2435.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       37
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       38
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      132     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -525.607       525.607       1608.08       2133.69    
   2  0.687927     -0.374072      -198.696       198.696       1632.39       1831.09    
   3  0.288957      -1.24148      -659.436       659.436       1580.47       2239.90    
   4  0.192838      -1.64590      -874.255       874.255       1561.33       2435.58    
   5  0.369869     -0.994607      -528.306       528.306       1666.68       2194.99    
   6  0.735973     -0.306562      -162.837       162.837       1721.97       1884.80    
   7  0.637144     -0.450760      -239.430       239.430       1672.41       1911.84    
   8  0.703934     -0.351071      -186.478       186.478       1742.84       1929.32    
   9  0.864279     -0.145859      -77.4761       77.4761       1580.67       1658.15    
  10  0.473452     -0.747705      -397.159       397.159       1764.99       2162.15    
  11  0.242010      -1.41877      -753.612       753.612       1816.05       2569.66    
  12  0.510769     -0.671838      -356.861       356.861       1735.45       2092.31    
  13  0.829624     -0.186782      -99.2133       99.2133       1747.07       1846.28    
  14  0.228911      -1.47442      -783.171       783.171       1839.42       2622.59    
  15  0.310006      -1.17116      -622.088       622.088       1717.71       2339.80    
  16  0.248341      -1.39295      -739.896       739.896       1780.87       2520.76    
  17  0.723214     -0.324050      -172.126       172.126       1795.55       1967.68    
  18  0.420900     -0.865360      -459.654       459.654       1751.68       2211.33    
  19  0.133903      -2.01064      -1067.99       1067.99       1758.12       2826.11    
  20  0.571916     -0.558763      -296.799       296.799       1763.87       2060.67    
  21  0.609104     -0.495766      -263.336       263.336       1712.25       1975.58    
  22  0.582057     -0.541186      -287.462       287.462       1705.34       1992.80    
  23  0.440731     -0.819321      -435.199       435.199       1750.26       2185.46    
  24  0.211006      -1.55587      -826.432       826.432       2001.89       2828.32    
  25  0.665769     -0.406813      -216.087       216.087       1698.61       1914.69    
  26  0.766062     -0.266493      -141.553       141.553       1882.40       2023.95    
  27  0.321416E-01  -3.43760      -1825.95       1825.95       1935.34       3761.30    
  28  0.165897E-01  -4.09897      -2177.25       2177.25       1938.60       4115.85    
  29  0.634553     -0.454835      -241.595       241.595       1673.73       1915.33    
  30  0.981834     -0.183335E-01  -9.73822       9.73822       1781.42       1791.15    
  31  0.511720     -0.669978      -355.873       355.873       1736.53       2092.40    
  32  0.426358     -0.852477      -452.811       452.811       1838.76       2291.57    
  33  0.500527     -0.692094      -367.620       367.620       1770.80       2138.42    
  34  0.100483      -2.29777      -1220.51       1220.51       1827.18       3047.68    
  35  0.837324     -0.177545      -94.3065       94.3065       1781.61       1875.92    
  36  0.257741      -1.35580      -720.161       720.161       1775.35       2495.51    
  37  0.437184     -0.827401      -439.491       439.491       1713.20       2152.69    
  38  0.707529     -0.345976      -183.772       183.772       2257.89       2441.66    
  39  0.538379     -0.619193      -328.897       328.897       1736.08       2064.98    
  40  0.611820     -0.491317      -260.973       260.973       1919.37       2180.34    
  41  0.404533     -0.905022      -480.721       480.721       1790.45       2271.17    
  42  0.902499     -0.102588      -54.4918       54.4918       1740.61       1795.10    
  43  0.704299     -0.350552      -186.203       186.203       1909.06       2095.27    
  44  0.511818     -0.669786      -355.770       355.770       1839.48       2195.25    
  45  0.748131     -0.290178      -154.134       154.134       2027.68       2181.81    
  46  0.296598      -1.21538      -645.573       645.573       1694.94       2340.51    
  47  0.805122     -0.216762      -115.138       115.138       1569.79       1684.93    
  48  0.525063     -0.644236      -342.199       342.199       1710.39       2052.59    
  49  0.192567      -1.64731      -875.004       875.004       1980.44       2855.44    
  50  0.991898     -0.813527E-02  -4.32122       4.32122       1961.16       1965.48    
  51  0.238175      -1.43475      -762.097       762.097       1889.46       2651.56    
  52  0.627675     -0.465733      -247.383       247.383       1684.50       1931.89    
  53  0.328849      -1.11216      -590.744       590.744       1770.57       2361.31    
  54  0.697651     -0.360037      -191.241       191.241       2413.66       2604.90    
  55  0.154345      -1.86857      -992.528       992.528       2299.69       3292.22    
  56  0.196838      -1.62537      -863.351       863.351       2118.43       2981.78    
  57  0.397903     -0.921546      -489.498       489.498       1761.73       2251.22    
  58  0.746135E-01  -2.59543      -1378.62       1378.62       2259.08       3637.70    
  59  0.283843      -1.25934      -668.922       668.922       2825.96       3494.89    
  60  0.540853E-02  -5.21978      -2772.59       2772.59       1778.19       4550.78    
  61  0.534720     -0.626011      -332.519       332.519       1747.59       2080.11    
  62  0.909816     -0.945126E-01  -50.2023       50.2023       1747.69       1797.89    
  63  0.190142      -1.65998      -881.734       881.734       1799.61       2681.34    
  64  0.150854      -1.89144      -1004.68       1004.68       1828.34       2833.02    
  65  0.385455     -0.953330      -506.381       506.381       2907.03       3413.41    
  66  0.655101     -0.422966      -224.667       224.667       1984.36       2209.02    
  67  0.527025     -0.640508      -340.219       340.219       2555.88       2896.10    
  68  0.110501      -2.20273      -1170.03       1170.03       1809.33       2979.36    
  69  0.206094      -1.57942      -838.942       838.942       1868.49       2707.44    
  70  0.961998     -0.387429E-01  -20.5791       20.5791       2485.96       2506.53    
  71  0.842154     -0.171793      -91.2513       91.2513       2191.36       2282.61    
  72  0.178445      -1.72347      -915.458       915.458       1613.97       2529.43    
  73  0.742172     -0.298174      -158.382       158.382       1797.48       1955.86    
  74  0.985630     -0.144744E-01  -7.68835       7.68835       2435.97       2443.66    
loop,thermsimp(1:2)       38   525.607       198.696    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       1655.75        129.89          0.69         30.32          1.17          0.05        162.12
Just calling func    0   0        162.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135       1578.48        129.81          0.68         30.37          0.93          0.05        161.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1578.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       38
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       39
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      134     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -171.355       171.355       1580.67       1752.02    
   2  0.309663      -1.17227      -622.675       622.675       1569.79       2192.46    
   3  0.688114     -0.373801      -198.552       198.552       1781.42       1979.97    
   4  0.677876     -0.388791      -206.514       206.514       1740.61       1947.13    
   5  0.283701      -1.25984      -669.188       669.188       1747.69       2416.88    
   6  0.183733      -1.69427      -899.946       899.946       1632.39       2532.34    
   7  0.243414      -1.41299      -750.540       750.540       1747.07       2497.61    
   8  0.785389     -0.241576      -128.318       128.318       1781.61       1909.93    
   9  0.258033      -1.35467      -719.560       719.560       1721.97       2441.53    
  10  0.137887      -1.98132      -1052.42       1052.42       1672.41       2724.83    
  11  0.386520     -0.950573      -504.916       504.916       1698.61       2203.52    
  12  0.882934     -0.124505      -66.1336       66.1336       1673.73       1739.87    
  13  0.395106     -0.928602      -493.246       493.246       1742.84       2236.09    
  14  0.107633      -2.22903      -1184.00       1184.00       1684.50       2868.50    
  15  0.434094     -0.834495      -443.259       443.259       1797.48       2240.74    
  16  0.558484     -0.582529      -309.422       309.422       1961.16       2270.59    
  17  0.102706      -2.27589      -1208.88       1208.88       1795.55       3004.44    
  18  0.325804      -1.12146      -595.686       595.686       1712.25       2307.93    
  19  0.693871     -0.365469      -194.126       194.126       1705.34       1899.47    
  20  0.832622     -0.183176      -97.2976       97.2976       1882.40       1979.70    
  21  0.691207     -0.369316      -196.170       196.170       1710.39       1906.56    
  22  0.903946     -0.100985      -53.6404       53.6404       1763.87       1817.51    
  23  0.258785E-01  -3.65434      -1941.08       1941.08       1736.08       3677.16    
  24  0.247338      -1.39700      -742.045       742.045       1747.59       2489.64    
  25  0.861464     -0.149122      -79.2094       79.2094       1735.45       1814.66    
  26  0.954919     -0.461290E-01  -24.5024       24.5024       1736.53       1761.03    
  27  0.579638     -0.545352      -289.675       289.675       1909.06       2198.74    
  28  0.537182     -0.621418      -330.079       330.079       1608.08       1938.16    
  29  0.407710     -0.897199      -476.566       476.566       1770.80       2247.36    
  30  0.958466     -0.424211E-01  -22.5328       22.5328       1713.20       1735.73    
  31  0.884674     -0.122536      -65.0876       65.0876       1764.99       1830.08    
  32  0.395055     -0.928731      -493.315       493.315       1919.37       2412.69    
  33  0.325425      -1.12262      -596.304       596.304       2027.68       2623.98    
  34  0.679842     -0.385895      -204.976       204.976       1750.26       1955.23    
  35  0.765292     -0.267498      -142.087       142.087       1666.68       1808.77    
  36  0.217460      -1.52574      -810.429       810.429       1839.48       2649.91    
  37  0.181189      -1.70822      -907.354       907.354       1984.36       2891.71    
  38  0.518456     -0.656899      -348.926       348.926       1751.68       2100.60    
  39  0.249864E-01  -3.68942      -1959.71       1959.71       1580.47       3540.18    
  40  0.336654      -1.08870      -578.286       578.286       1761.73       2340.01    
  41  0.873801     -0.134903      -71.6564       71.6564       1790.45       1862.11    
  42  0.478904     -0.736255      -391.077       391.077       2191.36       2582.44    
  43  0.819950     -0.198512      -105.444       105.444       1838.76       1944.21    
  44  0.966813     -0.337500E-01  -17.9270       17.9270       1717.71       1735.63    
  45  0.514109     -0.665319      -353.398       353.398       1694.94       2048.34    
  46  0.483734     -0.726221      -385.747       385.747       1770.57       2156.32    
  47  0.227743E-01  -3.78212      -2008.95       2008.95       1561.33       3570.28    
  48  0.409495     -0.892830      -474.245       474.245       2257.89       2732.13    
  49  0.198361      -1.61767      -859.258       859.258       2435.97       3295.23    
  50  0.925767     -0.771331E-01  -40.9708       40.9708       1775.35       1816.32    
  51  0.842113     -0.171842      -91.2772       91.2772       2485.96       2577.23    
  52  0.347114E-01  -3.36069      -1785.10       1785.10       1780.87       3565.96    
  53  0.215814      -1.53334      -814.464       814.464       1613.97       2428.44    
  54  0.219309      -1.51727      -805.931       805.931       1816.05       2621.98    
  55  0.940126     -0.617416E-01  -32.7953       32.7953       2413.66       2446.45    
  56  0.663408     -0.410365      -217.974       217.974       1839.42       2057.39    
  57  0.630947     -0.460533      -244.622       244.622       1889.46       2134.08    
  58  0.719671     -0.328961      -174.734       174.734       1799.61       1974.34    
  59  0.939094     -0.628392E-01  -33.3783       33.3783       1868.49       1901.87    
  60  0.901520     -0.103673      -55.0682       55.0682       1758.12       1813.19    
  61  0.771028     -0.260031      -138.121       138.121       2001.89       2140.01    
  62  0.320616      -1.13751      -604.212       604.212       1828.34       2432.55    
  63  0.893890     -0.112173      -59.5828       59.5828       1980.44       2040.02    
  64  0.874332     -0.134295      -71.3335       71.3335       2555.88       2627.21    
  65  0.363931      -1.01079      -536.903       536.903       1809.33       2346.23    
  66  0.140534      -1.96231      -1042.32       1042.32       2118.43       3160.75    
  67  0.432559     -0.838038      -445.141       445.141       1827.18       2272.32    
  68  0.446579     -0.806139      -428.197       428.197       2299.69       2727.89    
  69  0.830196     -0.186093      -98.8472       98.8472       2907.03       3005.88    
  70  0.324418      -1.12572      -597.951       597.951       2825.96       3423.92    
  71  0.645984E-01  -2.73957      -1455.18       1455.18       2259.08       3714.26    
  72  0.465516     -0.764609      -406.138       406.138       1935.34       2341.48    
  73  0.456901     -0.783288      -416.059       416.059       1938.60       2354.66    
  74  0.263704      -1.33293      -708.013       708.013       1578.48       2286.50    
loop,thermsimp(1:2)       39   171.355       622.675    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       1862.77        130.04          0.69         30.37          1.07          0.05        162.21
Just calling func    0   0        162.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137       2263.66        129.82          0.68         30.39          1.23          0.05        162.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1862.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       39
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       40
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      136     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -24.6620       24.6620       1717.71       1742.37    
   2  0.450411     -0.797594      -423.659       423.659       1713.20       2136.86    
   3  0.691912E-01  -2.67088      -1418.69       1418.69       1673.73       3092.43    
   4  0.740935     -0.299842      -159.267       159.267       1580.67       1739.94    
   5  0.452531     -0.792898      -421.164       421.164       1736.53       2157.69    
   6  0.461330     -0.773642      -410.936       410.936       1666.68       2077.62    
   7  0.102999      -2.27303      -1207.37       1207.37       1758.12       2965.49    
   8  0.475106     -0.744217      -395.306       395.306       1735.45       2130.76    
   9  0.240275      -1.42597      -757.433       757.433       1775.35       2532.78    
  10  0.276707E-01  -3.58738      -1905.51       1905.51       1763.87       3669.38    
  11  0.132701E-01  -4.32224      -2295.85       2295.85       1764.99       4060.84    
  12  0.997219     -0.278509E-02  -1.47936       1.47936       1790.45       1791.93    
  13  0.563305     -0.573934      -304.857       304.857       1705.34       2010.20    
  14  0.347949      -1.05570      -560.757       560.757       1868.49       2429.25    
  15  0.546018     -0.605103      -321.413       321.413       1710.39       2031.80    
  16  0.343968      -1.06721      -566.869       566.869       1781.61       2348.48    
  17  0.945234     -0.563230E-01  -29.9171       29.9171       1608.08       1638.00    
  18  0.346208      -1.06072      -563.421       563.421       1838.76       2402.19    
  19  0.406433     -0.900337      -478.232       478.232       1740.61       2218.84    
  20  0.632259     -0.458455      -243.518       243.518       1750.26       1993.78    
  21  0.983930     -0.162002E-01  -8.60507       8.60507       1799.61       1808.21    
  22  0.200798      -1.60546      -852.772       852.772       1882.40       2735.17    
  23  0.223962      -1.49628      -794.778       794.778       1781.42       2576.19    
  24  0.594322     -0.520335      -276.387       276.387       1980.44       2256.83    
  25  0.875298     -0.133191      -70.7471       70.7471       1694.94       1765.69    
  26  0.327822      -1.11529      -592.407       592.407       1839.42       2431.82    
  27  0.215105      -1.53663      -816.211       816.211       1751.68       2567.89    
  28  0.905181     -0.996198E-01  -52.9151       52.9151       1889.46       1942.38    
  29  0.699086     -0.357981      -190.149       190.149       2001.89       2192.03    
  30  0.747401     -0.291154      -154.652       154.652       1770.57       1925.22    
  31  0.699189     -0.357834      -190.071       190.071       1569.79       1759.86    
  32  0.563488     -0.573610      -304.685       304.685       1909.06       2213.75    
  33  0.155576      -1.86062      -988.308       988.308       1698.61       2686.91    
  34  0.380593     -0.966025      -513.124       513.124       1742.84       2255.97    
  35  0.626112     -0.468226      -248.708       248.708       1797.48       2046.19    
  36  0.372369     -0.987870      -524.727       524.727       1770.80       2295.52    
  37  0.517531     -0.658686      -349.875       349.875       1961.16       2311.04    
  38  0.673247     -0.395643      -210.154       210.154       1827.18       2037.33    
  39  0.741527     -0.299044      -158.843       158.843       1578.48       1737.33    
  40  0.280982      -1.26947      -674.303       674.303       1712.25       2386.55    
  41  0.331745      -1.10339      -586.088       586.088       1761.73       2347.81    
  42  0.712030     -0.339635      -180.404       180.404       1935.34       2115.75    
  43  0.200581      -1.60654      -853.345       853.345       1809.33       2662.68    
  44  0.989915     -0.101357E-01  -5.38379       5.38379       1938.60       1943.98    
  45  0.808031     -0.213155      -113.222       113.222       1919.37       2032.59    
  46  0.893446     -0.112670      -59.8469       59.8469       1747.69       1807.54    
  47  0.364885      -1.00817      -535.511       535.511       1613.97       2149.49    
  48  0.923731     -0.793347E-01  -42.1403       42.1403       1828.34       1870.48    
  49  0.504880     -0.683434      -363.020       363.020       1721.97       2084.99    
  50  0.724988     -0.321600      -170.825       170.825       2413.66       2584.48    
  51  0.927322     -0.754540E-01  -40.0789       40.0789       1747.59       1787.67    
  52  0.857721     -0.153476      -81.5221       81.5221       1747.07       1828.59    
  53  0.943333     -0.583361E-01  -30.9864       30.9864       1632.39       1663.38    
  54  0.794551     -0.229978      -122.157       122.157       2485.96       2608.11    
  55  0.732400     -0.311429      -165.422       165.422       2191.36       2356.78    
  56  0.143434      -1.94188      -1031.47       1031.47       1816.05       2847.52    
  57  0.859384     -0.151540      -80.4934       80.4934       2027.68       2108.17    
  58  0.677471     -0.389389      -206.832       206.832       2555.88       2762.71    
  59  0.258745      -1.35191      -718.095       718.095       1839.48       2557.57    
  60  0.380926E-01  -3.26773      -1735.72       1735.72       1672.41       3408.13    
  61  0.563373     -0.573814      -304.793       304.793       2299.69       2604.49    
  62  0.985538     -0.145678E-01  -7.73797       7.73797       2257.89       2265.63    
  63  0.647297     -0.434951      -231.033       231.033       1684.50       1915.54    
  64  0.608092     -0.497430      -264.220       264.220       1984.36       2248.58    
  65  0.944821     -0.567601E-01  -30.1493       30.1493       1795.55       1825.70    
  66  0.458402E-01  -3.08259      -1637.38       1637.38       2907.03       4544.41    
  67  0.573743E-01  -2.85816      -1518.17       1518.17       2118.43       3636.60    
  68  0.755011     -0.281022      -149.271       149.271       2435.97       2585.24    
  69  0.199134      -1.61378      -857.192       857.192       2825.96       3683.16    
  70  0.364851      -1.00827      -535.561       535.561       1580.47       2116.03    
  71  0.868783     -0.140661      -74.7152       74.7152       1780.87       1855.58    
  72  0.658442     -0.417879      -221.965       221.965       1561.33       1783.29    
  73  0.257054      -1.35847      -721.579       721.579       1736.08       2457.66    
  74  0.619402     -0.479001      -254.431       254.431       1862.77       2117.20    
loop,thermsimp(1:2)       40   24.6620       423.659    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138       1949.01        129.81          0.70         30.57          1.16          0.04        162.28
Just calling func    0   0        162.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1949.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       40
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       41
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      137     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -545.682       545.682       1608.08       2153.77    
   2  0.414955     -0.879585      -467.210       467.210       1632.39       2099.60    
   3  0.407443     -0.897854      -476.913       476.913       1578.48       2055.40    
   4  0.883897     -0.123414      -65.5541       65.5541       1580.67       1646.22    
   5  0.520045     -0.653840      -347.301       347.301       1717.71       2065.01    
   6  0.634521     -0.454885      -241.621       241.621       1569.79       1811.41    
   7  0.344406      -1.06594      -566.193       566.193       1694.94       2261.14    
   8  0.545595     -0.605879      -321.825       321.825       1561.33       1883.15    
   9  0.766876     -0.265430      -140.988       140.988       1747.59       1888.58    
  10  0.639043     -0.447783      -237.849       237.849       1790.45       2028.30    
  11  0.850701     -0.161694      -85.8874       85.8874       1747.69       1833.58    
  12  0.832060     -0.183851      -97.6563       97.6563       1799.61       1897.26    
  13  0.728209     -0.317167      -168.470       168.470       1795.55       1964.02    
  14  0.531327     -0.632378      -335.900       335.900       1747.07       2082.97    
  15  0.188974E-01  -3.96873      -2108.07       2108.07       1780.87       3888.94    
  16  0.246817      -1.39911      -743.164       743.164       1828.34       2571.51    
  17  0.935336     -0.668496E-01  -35.5085       35.5085       1684.50       1720.01    
  18  0.730823     -0.313585      -166.567       166.567       1770.57       1937.14    
  19  0.482288     -0.729213      -387.337       387.337       1889.46       2276.80    
  20  0.782974E-04  -9.45500      -5022.22       5022.22       1938.60       6960.81    
  21  0.258744      -1.35192      -718.098       718.098       1750.26       2468.36    
  22  0.389044     -0.944063      -501.458       501.458       1705.34       2206.80    
  23  0.611459E-01  -2.79449      -1484.35       1484.35       1710.39       3194.74    
  24  0.124922      -2.08006      -1104.87       1104.87       1919.37       3024.24    
  25  0.253683      -1.37167      -728.591       728.591       1827.18       2555.77    
  26  0.781437     -0.246621      -130.998       130.998       1797.48       1928.48    
  27  0.835634     -0.179565      -95.3796       95.3796       1666.68       1762.06    
  28  0.542030     -0.612434      -325.307       325.307       1721.97       2047.27    
  29  0.463443     -0.769071      -408.508       408.508       2027.68       2436.18    
  30  0.120587      -2.11538      -1123.63       1123.63       1935.34       3058.97    
  31  0.733316     -0.310178      -164.758       164.758       1580.47       1745.22    
  32  0.955530     -0.454889E-01  -24.1623       24.1623       1862.77       1886.93    
  33  0.419735     -0.868132      -461.126       461.126       1735.45       2196.58    
  34  0.284829      -1.25587      -667.079       667.079       1713.20       2380.28    
  35  0.924079     -0.789582E-01  -41.9403       41.9403       1613.97       1655.92    
  36  0.432674     -0.837770      -444.999       444.999       1736.53       2181.52    
  37  0.155293      -1.86244      -989.273       989.273       2001.89       2991.16    
  38  0.634342     -0.455168      -241.772       241.772       1909.06       2150.84    
  39  0.935635     -0.665293E-01  -35.3384       35.3384       1740.61       1775.95    
  40  0.931832     -0.706024E-01  -37.5019       37.5019       1984.36       2021.86    
  41  0.875970     -0.132424      -70.3396       70.3396       1742.84       1813.18    
  42  0.273544      -1.29629      -688.552       688.552       1980.44       2668.99    
  43  0.799596     -0.223649      -118.796       118.796       2257.89       2376.68    
  44  0.772883     -0.257628      -136.844       136.844       1770.80       1907.64    
  45  0.274276      -1.29362      -687.134       687.134       1961.16       2648.30    
  46  0.116034      -2.15387      -1144.07       1144.07       1761.73       2905.80    
  47  0.700214     -0.356369      -189.293       189.293       1781.61       1970.90    
  48  0.704184E-01  -2.65330      -1409.36       1409.36       2191.36       3600.72    
  49  0.699980E-01  -2.65929      -1412.54       1412.54       1712.25       3124.78    
  50  0.186964      -1.67684      -890.688       890.688       1838.76       2729.45    
  51  0.342641      -1.07107      -568.922       568.922       1868.49       2437.42    
  52  0.989806     -0.102462E-01  -5.44246       5.44246       1839.42       1844.86    
  53  0.216227      -1.53143      -813.449       813.449       1736.08       2549.53    
  54  0.233793      -1.45332      -771.961       771.961       1775.35       2547.31    
  55  0.404477     -0.905159      -480.794       480.794       1839.48       2320.27    
  56  0.164502      -1.80483      -958.673       958.673       1751.68       2710.35    
  57  0.561765E-01  -2.87926      -1529.38       1529.38       1781.42       3310.79    
  58  0.169196E-01  -4.07928      -2166.79       2166.79       2413.66       4580.45    
  59  0.486948     -0.719597      -382.229       382.229       2435.97       2818.20    
  60  0.640730     -0.445148      -236.449       236.449       2299.69       2536.14    
  61  0.940004     -0.618708E-01  -32.8640       32.8640       2485.96       2518.82    
  62  0.216981      -1.52795      -811.600       811.600       1809.33       2620.93    
  63  0.131817      -2.02634      -1076.33       1076.33       1698.61       2774.94    
  64  0.996981     -0.302401E-02  -1.60626       1.60626       1882.40       1884.01    
  65  0.534925     -0.625629      -332.316       332.316       2555.88       2888.20    
  66  0.151104      -1.88978      -1003.80       1003.80       1816.05       2819.84    
  67  0.228761      -1.47508      -783.518       783.518       1758.12       2541.64    
  68  0.187751      -1.67264      -888.457       888.457       1673.73       2562.19    
  69  0.417030     -0.874597      -464.560       464.560       1672.41       2136.97    
  70  0.239615      -1.42872      -758.895       758.895       2118.43       2877.32    
  71  0.937866E-02  -4.66932      -2480.20       2480.20       1763.87       4244.07    
  72  0.929880     -0.727002E-01  -38.6162       38.6162       2825.96       2864.58    
  73  0.463017     -0.769992      -408.997       408.997       1764.99       2173.99    
  74  0.570687     -0.560915      -297.941       297.941       1949.01       2246.95    
loop,thermsimp(1:2)       41   545.682       467.210    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139       1719.19        129.69          0.66         30.26          0.84          0.04        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140       1784.48        129.64          0.70         30.55          0.45          0.04        161.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1719.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       41
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       42
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      139     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -1531.60       1531.60       1580.67       3112.27    
   2  0.688513     -0.373221      -198.244       198.244       1613.97       1812.22    
   3  0.530653     -0.633647      -336.574       336.574       1684.50       2021.08    
   4  0.542886     -0.610856      -324.469       324.469       1580.47       1904.93    
   5  0.603382     -0.505205      -268.350       268.350       1666.68       1935.03    
   6  0.478412     -0.737283      -391.623       391.623       1740.61       2132.23    
   7  0.809657     -0.211144      -112.154       112.154       1569.79       1681.94    
   8  0.764585     -0.268422      -142.578       142.578       1742.84       1885.42    
   9  0.228600      -1.47578      -783.891       783.891       1747.69       2531.58    
  10  0.495526     -0.702136      -372.954       372.954       1839.42       2212.37    
  11  0.368264     -0.998954      -530.615       530.615       1561.33       2091.94    
  12  0.407647     -0.897355      -476.648       476.648       1882.40       2359.05    
  13  0.316165      -1.15149      -611.638       611.638       1862.77       2474.41    
  14  0.458518     -0.779756      -414.184       414.184       1747.59       2161.78    
  15  0.643610     -0.440663      -234.067       234.067       1799.61       2033.67    
  16  0.316553E-01  -3.45285      -1834.05       1834.05       1770.80       3604.85    
  17  0.570171     -0.561819      -298.422       298.422       1797.48       2095.90    
  18  0.448642E-01  -3.10412      -1648.81       1648.81       1770.57       3419.38    
  19  0.128957      -2.04828      -1087.99       1087.99       1795.55       2883.54    
  20  0.159422      -1.83620      -975.337       975.337       1781.61       2756.95    
  21  0.154083      -1.87026      -993.428       993.428       1984.36       2977.78    
  22  0.696997     -0.360974      -191.739       191.739       1790.45       1982.19    
  23  0.579421     -0.545727      -289.874       289.874       1721.97       2011.84    
  24  0.528206     -0.638269      -339.030       339.030       1578.48       1917.51    
  25  0.322914      -1.13037      -600.418       600.418       1717.71       2318.13    
  26  0.369562     -0.995437      -528.747       528.747       1747.07       2275.82    
  27  0.134248      -2.00806      -1066.62       1066.62       1632.39       2699.02    
  28  0.950150     -0.511358E-01  -27.1618       27.1618       1672.41       1699.57    
  29  0.138040      -1.98021      -1051.83       1051.83       1909.06       2960.89    
  30  0.316838      -1.14936      -610.508       610.508       1608.08       2218.59    
  31  0.151783      -1.88530      -1001.42       1001.42       1764.99       2766.41    
  32  0.338674      -1.08272      -575.108       575.108       1736.53       2311.63    
  33  0.814165     -0.205592      -109.205       109.205       1735.45       1844.66    
  34  0.578183     -0.547865      -291.010       291.010       1705.34       1996.35    
  35  0.208707      -1.56682      -832.251       832.251       1949.01       2781.26    
  36  0.540561     -0.615147      -326.748       326.748       1694.94       2021.69    
  37  0.910129     -0.941686E-01  -50.0196       50.0196       1889.46       1939.48    
  38  0.907740     -0.967972E-01  -51.4158       51.4158       1839.48       1890.89    
  39  0.549661     -0.598453      -317.881       317.881       2257.89       2575.77    
  40  0.193889      -1.64047      -871.370       871.370       1713.20       2584.57    
  41  0.807651     -0.213625      -113.471       113.471       2027.68       2141.15    
  42  0.613777     -0.488124      -259.277       259.277       1868.49       2127.77    
  43  0.664452     -0.408793      -217.139       217.139       1750.26       1967.40    
  44  0.584630     -0.536776      -285.119       285.119       2485.96       2771.07    
  45  0.618915     -0.479787      -254.849       254.849       2299.69       2554.54    
  46  0.542097     -0.612311      -325.242       325.242       1758.12       2083.36    
  47  0.133641      -2.01260      -1069.03       1069.03       1775.35       2844.39    
  48  0.479627     -0.734747      -390.276       390.276       1736.08       2126.36    
  49  0.225939      -1.48749      -790.112       790.112       1827.18       2617.29    
  50  0.324869      -1.12433      -597.212       597.212       1673.73       2270.95    
  51  0.669051     -0.401895      -213.475       213.475       1828.34       2041.82    
  52  0.602039     -0.507434      -269.534       269.534       1809.33       2078.87    
  53  0.143076      -1.94438      -1032.80       1032.80       1961.16       2993.96    
  54  0.897604     -0.108026      -57.3804       57.3804       1980.44       2037.82    
  55  0.165810      -1.79691      -954.468       954.468       1751.68       2706.14    
  56  0.468567     -0.758077      -402.668       402.668       1838.76       2241.43    
  57  0.641740     -0.443572      -235.613       235.613       1698.61       1934.22    
  58  0.904980     -0.998426E-01  -53.0335       53.0335       2435.97       2489.01    
  59  0.674132     -0.394330      -209.456       209.456       1816.05       2025.50    
  60  0.756363     -0.279234      -148.321       148.321       2825.96       2974.29    
  61  0.113892      -2.17251      -1153.97       1153.97       2118.43       3272.40    
  62  0.835916     -0.179227      -95.2001       95.2001       2555.88       2651.08    
  63  0.284183      -1.25814      -668.285       668.285       1761.73       2430.01    
  64  0.276674      -1.28492      -682.510       682.510       2001.89       2684.40    
  65  0.686678     -0.375890      -199.661       199.661       1919.37       2119.03    
  66  0.567044     -0.567318      -301.342       301.342       1935.34       2236.68    
  67  0.416554     -0.875738      -465.166       465.166       1712.25       2177.41    
  68  0.810149     -0.210537      -111.831       111.831       1710.39       1822.22    
  69  0.979175     -0.210445E-01  -11.1782       11.1782       1781.42       1792.59    
  70  0.334686      -1.09456      -581.399       581.399       2191.36       2772.76    
  71  0.331108      -1.10531      -587.108       587.108       1780.87       2367.97    
  72  0.734322     -0.308808      -164.030       164.030       1763.87       1927.90    
  73  0.958186E-01  -2.34530      -1245.75       1245.75       2413.66       3659.41    
  74  0.473076     -0.748500      -397.581       397.581       1719.19       2116.77    
loop,thermsimp(1:2)       42   1531.60       198.244    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141       1744.72        129.94          0.70         30.06          0.89          0.05        161.64
Just calling func    0   0        161.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142       1917.43        129.80          0.69         30.12          0.86          0.05        161.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    1744.7        1.967    -0.8066      3.483     -100.0     0.4178    
                      -2.702     0.4297     -100.0      2.398      1.641    
                     -0.6017     0.2413      2.009      0.000     0.6953    
                      -1.148     -20.00      0.000      0.000     -1.271    

                      -2.533      6300.     0.1133E+05 -535.2     -1451.    
                      -4.109     -5.597     -4.334     -15.33     -5.168    
                      -13.24     -2.754     -3288.      0.000     -1295.    

                       117.0      3677.      426.2      682.2      2853.    
                      -348.4    -0.3558E-01-0.1478      0.000    -0.1846    
                     -0.1904    -0.1965    -0.2121    -0.2343    -0.8305E-01

                     -0.7398     -1.786      1.382     0.1706     0.4152E-01
                      0.8541E-01 0.2667E-01-0.3832E-01-0.6963E-01-0.8698E-02
                     -0.6237E-01 0.6792E-01-0.2487     -2.186      1.382    

                      -1.623     -1.402     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.877      8.877      0.000     0.4099E-03
                      0.1794     0.1794      9.112      8.918     -5061.    

                      0.5530E-03 0.1794     0.1794      9.777      9.077    
                      -5883.     0.4422E-03-0.5206     0.1794      9.377    
                       9.177     -4915.     0.1106E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1744.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       42
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       43
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      141     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -126.150       126.150       1569.79       1695.94    
   2  0.796559     -0.227454      -120.817       120.817       1672.41       1793.23    
   3  0.784232     -0.243051      -129.101       129.101       1781.42       1910.52    
   4  0.503549     -0.686074      -364.422       364.422       1613.97       1978.40    
   5  0.468337     -0.758566      -402.928       402.928       1710.39       2113.31    
   6  0.198518      -1.61688      -858.838       858.838       1735.45       2594.29    
   7  0.857529     -0.153700      -81.6409       81.6409       1742.84       1824.48    
   8  0.845427     -0.167913      -89.1904       89.1904       1839.48       1928.67    
   9  0.710919     -0.341197      -181.234       181.234       1580.47       1761.70    
  10  0.934107     -0.681640E-01  -36.2067       36.2067       1578.48       1614.69    
  11  0.565087     -0.570775      -303.179       303.179       1763.87       2067.05    
  12  0.147377      -1.91476      -1017.06       1017.06       1698.61       2715.67    
  13  0.471965     -0.750851      -398.830       398.830       1666.68       2065.51    
  14  0.287319      -1.24716      -662.455       662.455       1889.46       2551.92    
  15  0.526906     -0.640733      -340.339       340.339       1750.26       2090.60    
  16  0.176999      -1.73161      -919.781       919.781       1790.45       2710.23    
  17  0.868579     -0.140897      -74.8401       74.8401       1705.34       1780.18    
  18  0.621282     -0.475971      -252.822       252.822       1721.97       1974.79    
  19  0.181881      -1.70440      -905.330       905.330       1684.50       2589.83    
  20  0.565209     -0.570560      -303.065       303.065       1694.94       1998.01    
  21  0.927617     -0.751364E-01  -39.9102       39.9102       1816.05       1855.96    
  22  0.296120      -1.21699      -646.429       646.429       1799.61       2446.04    
  23  0.152389      -1.88132      -999.300       999.300       1980.44       2979.74    
  24  0.508731     -0.675835      -358.984       358.984       1828.34       2187.33    
  25  0.389654     -0.942496      -500.626       500.626       1809.33       2309.96    
  26  0.770754     -0.260386      -138.309       138.309       1758.12       1896.43    
  27  0.144347      -1.93554      -1028.10       1028.10       1561.33       2589.43    
  28  0.690124     -0.370884      -197.003       197.003       1797.48       1994.48    
  29  0.882429     -0.125077      -66.4373       66.4373       1719.19       1785.63    
  30  0.781105     -0.247045      -131.223       131.223       1919.37       2050.60    
  31  0.331946      -1.10278      -585.765       585.765       1736.08       2321.85    
  32  0.157011      -1.85144      -983.429       983.429       1868.49       2851.92    
  33  0.734200     -0.308973      -164.117       164.117       1740.61       1904.73    
  34  0.563390     -0.573784      -304.777       304.777       2027.68       2332.45    
  35  0.349498      -1.05126      -558.397       558.397       1747.59       2305.99    
  36  0.256822      -1.35937      -722.057       722.057       1712.25       2434.30    
  37  0.563556     -0.573488      -304.620       304.620       1839.42       2144.04    
  38  0.945419E-01  -2.35871      -1252.88       1252.88       1608.08       2860.96    
  39  0.571450     -0.559577      -297.231       297.231       1935.34       2232.57    
  40  0.583029E-01  -2.84210      -1509.64       1509.64       1838.76       3348.41    
  41  0.428808     -0.846746      -449.767       449.767       1673.73       2123.50    
  42  0.628450     -0.464499      -246.728       246.728       1747.07       1993.80    
  43  0.152789      -1.87869      -997.907       997.907       1736.53       2734.43    
  44  0.787004E-01  -2.54211      -1350.29       1350.29       1717.71       3068.00    
  45  0.170927E-01  -4.06911      -2161.39       2161.39       1882.40       4043.79    
  46  0.531078     -0.632847      -336.150       336.150       1780.87       2117.02    
  47  0.206082E-01  -3.88206      -2062.04       2062.04       1761.73       3823.76    
  48  0.909565     -0.947891E-01  -50.3492       50.3492       1862.77       1913.12    
  49  0.456291     -0.784625      -416.770       416.770       2435.97       2852.74    
  50  0.997425E-02  -4.60775      -2447.50       2447.50       1747.69       4195.19    
  51  0.251070      -1.38202      -734.089       734.089       2299.69       3033.78    
  52  0.548517     -0.600536      -318.987       318.987       2257.89       2576.87    
  53  0.210242      -1.55950      -828.359       828.359       1713.20       2541.56    
  54  0.848361     -0.164449      -87.3506       87.3506       1827.18       1914.53    
  55  0.160491E-01  -4.13210      -2194.85       2194.85       2555.88       4750.73    
  56  0.407967     -0.896570      -476.232       476.232       2001.89       2478.12    
  57  0.859929     -0.150905      -80.1565       80.1565       1632.39       1712.55    
  58  0.406052     -0.901274      -478.730       478.730       1751.68       2230.41    
  59  0.743169     -0.296832      -157.669       157.669       1781.61       1939.28    
  60  0.434823     -0.832817      -442.368       442.368       1764.99       2207.36    
  61  0.559897     -0.580003      -308.080       308.080       2485.96       2794.04    
  62  0.277128      -1.28328      -681.638       681.638       2191.36       2873.00    
  63  0.839691     -0.174721      -92.8069       92.8069       1949.01       2041.82    
  64  0.641867     -0.443375      -235.508       235.508       1775.35       2010.86    
  65  0.309074      -1.17417      -623.687       623.687       1795.55       2419.24    
  66  0.552351     -0.593572      -315.288       315.288       1909.06       2224.35    
  67  0.764824     -0.268109      -142.412       142.412       2825.96       2968.38    
  68  0.857070     -0.154235      -81.9253       81.9253       1984.36       2066.28    
  69  0.650112     -0.430610      -228.727       228.727       1961.16       2189.89    
  70  0.128926      -2.04851      -1088.11       1088.11       1580.67       2668.78    
  71  0.370422     -0.993113      -527.512       527.512       2118.43       2645.94    
  72  0.795676     -0.228564      -121.406       121.406       1770.57       1891.97    
  73  0.365230      -1.00723      -535.010       535.010       1770.80       2305.81    
  74  0.610005     -0.494288      -262.551       262.551       1744.72       2007.28    
loop,thermsimp(1:2)       43   126.150       120.817    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143       1483.44        130.09          0.70         30.25          0.57          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144       1407.55        130.04          0.74         30.17          0.41          0.05        161.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1407.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       43
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       44
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      143     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -1197.22       1197.22       1578.48       2775.70    
   2  0.780131E-01  -2.55088      -1354.95       1354.95       1569.79       2924.74    
   3  0.723689     -0.323394      -171.777       171.777       1632.39       1804.17    
   4  0.439896     -0.821218      -436.207       436.207       1580.47       2016.67    
   5  0.967364     -0.331803E-01  -17.6244       17.6244       1705.34       1722.97    
   6  0.235884      -1.44441      -767.231       767.231       1719.19       2486.42    
   7  0.311956      -1.16489      -618.758       618.758       1672.41       2291.17    
   8  0.600573     -0.509870      -270.828       270.828       1742.84       2013.67    
   9  0.781739     -0.246234      -130.792       130.792       1816.05       1946.84    
  10  0.505036     -0.683126      -362.856       362.856       1770.57       2133.42    
  11  0.896130     -0.109670      -58.2536       58.2536       1758.12       1816.37    
  12  0.545040     -0.606897      -322.366       322.366       1740.61       2062.98    
  13  0.338019      -1.08465      -576.137       576.137       1781.42       2357.55    
  14  0.200467      -1.60711      -853.648       853.648       1862.77       2716.42    
  15  0.548763     -0.600089      -318.750       318.750       1827.18       2145.93    
  16  0.897241     -0.108431      -57.5953       57.5953       1839.48       1897.07    
  17  0.229905      -1.47009      -780.868       780.868       1781.61       2562.48    
  18  0.387828     -0.947193      -503.121       503.121       1721.97       2225.09    
  19  0.789400     -0.236482      -125.612       125.612       1613.97       1739.59    
  20  0.495667     -0.701851      -372.803       372.803       1747.07       2119.87    
  21  0.818926     -0.199761      -106.107       106.107       1797.48       1903.59    
  22  0.181319      -1.70750      -906.972       906.972       1694.94       2601.91    
  23  0.901986     -0.103156      -54.7936       54.7936       1744.72       1799.52    
  24  0.933790E-01  -2.37109      -1259.45       1259.45       1775.35       3034.80    
  25  0.171523      -1.76304      -936.473       936.473       1949.01       2885.49    
  26  0.648450     -0.433170      -230.087       230.087       1919.37       2149.46    
  27  0.777448     -0.251739      -133.716       133.716       1666.68       1800.40    
  28  0.777670     -0.251453      -133.564       133.564       1984.36       2117.92    
  29  0.972420     -0.279672E-01  -14.8554       14.8554       1763.87       1778.72    
  30  0.825305     -0.192002      -101.986       101.986       1750.26       1852.24    
  31  0.470649     -0.753642      -400.312       400.312       1710.39       2110.70    
  32  0.263953      -1.33198      -707.510       707.510       1780.87       2488.38    
  33  0.857551     -0.153675      -81.6277       81.6277       1673.73       1755.36    
  34  0.950157     -0.511279E-01  -27.1576       27.1576       1839.42       1866.57    
  35  0.866482     -0.143314      -76.1241       76.1241       1828.34       1904.47    
  36  0.904889     -0.999433E-01  -53.0869       53.0869       1961.16       2014.25    
  37  0.297565      -1.21212      -643.843       643.843       1764.99       2408.83    
  38  0.902696     -0.102369      -54.3756       54.3756       1909.06       1963.44    
  39  0.800054     -0.223076      -118.492       118.492       1751.68       1870.17    
  40  0.534162     -0.627057      -333.074       333.074       1935.34       2268.42    
  41  0.593018     -0.522530      -277.552       277.552       1770.80       2048.35    
  42  0.682417E-01  -2.68470      -1426.03       1426.03       1747.59       3173.63    
  43  0.336048      -1.09050      -579.242       579.242       1809.33       2388.57    
  44  0.576540     -0.550710      -292.521       292.521       1736.08       2028.60    
  45  0.217955      -1.52347      -809.221       809.221       2027.68       2836.90    
  46  0.281607      -1.26724      -673.121       673.121       1795.55       2468.67    
  47  0.306631      -1.18211      -627.902       627.902       1712.25       2340.15    
  48  0.676335E-01  -2.69365      -1430.79       1430.79       1799.61       3230.40    
  49  0.145631      -1.92668      -1023.40       1023.40       2001.89       3025.28    
  50  0.820952     -0.197291      -104.795       104.795       1713.20       1818.00    
  51  0.224137      -1.49550      -794.364       794.364       1889.46       2683.83    
  52  0.738282     -0.303430      -161.173       161.173       2257.89       2419.06    
  53  0.364089      -1.01036      -536.671       536.671       1561.33       2098.00    
  54  0.321068      -1.13610      -603.463       603.463       1684.50       2287.97    
  55  0.179504      -1.71756      -912.316       912.316       1735.45       2647.77    
  56  0.808596     -0.212456      -112.850       112.850       2118.43       2231.28    
  57  0.974692     -0.256343E-01  -13.6162       13.6162       1580.67       1594.29    
  58  0.559434     -0.580830      -308.520       308.520       1790.45       2098.97    
  59  0.443035E-01  -3.11669      -1655.49       1655.49       1698.61       3354.10    
  60  0.711672     -0.340139      -180.672       180.672       1736.53       1917.20    
  61  0.578255     -0.547741      -290.944       290.944       2485.96       2776.90    
  62  0.102770      -2.27527      -1208.55       1208.55       1868.49       3077.05    
  63  0.813100     -0.206901      -109.900       109.900       2435.97       2545.87    
  64  0.612419     -0.490339      -260.454       260.454       1608.08       1868.54    
  65  0.406120     -0.901107      -478.641       478.641       2191.36       2670.00    
  66  0.255858      -1.36313      -724.056       724.056       2825.96       3550.02    
  67  0.622680     -0.473723      -251.628       251.628       1980.44       2232.07    
  68  0.428339     -0.847839      -450.347       450.347       2299.69       2750.04    
  69  0.594560     -0.519934      -276.174       276.174       1717.71       1993.88    
  70  0.921341     -0.819246E-01  -43.5160       43.5160       1838.76       1882.28    
  71  0.152539      -1.88033      -998.778       998.778       1761.73       2760.50    
  72  0.539176     -0.617712      -328.111       328.111       1882.40       2210.51    
  73  0.179134      -1.71962      -913.412       913.412       1747.69       2661.10    
  74  0.815719     -0.203686      -108.192       108.192       1407.55       1515.74    
loop,thermsimp(1:2)       44   1197.22       1354.95    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       2710.64        129.46          0.68         30.62          0.59          0.05        161.40
Just calling func    0   0        161.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2710.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       44
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       45
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      144     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -72.3780       72.3780       1407.55       1479.92    
   2  0.990306     -0.974175E-02  -5.17453       5.17453       1580.67       1585.84    
   3  0.488656     -0.716096      -380.369       380.369       1705.34       2085.71    
   4  0.865115E-01  -2.44748      -1300.03       1300.03       1613.97       2914.00    
   5  0.234262      -1.45132      -770.897       770.897       1673.73       2444.63    
   6  0.906541     -0.981186E-01  -52.1177       52.1177       1763.87       1815.99    
   7  0.680454     -0.384995      -204.498       204.498       1744.72       1949.22    
   8  0.575574     -0.552388      -293.412       293.412       1666.68       1960.09    
   9  0.537443E-02  -5.22610      -2775.95       2775.95       1632.39       4408.34    
  10  0.421676     -0.863518      -458.676       458.676       1758.12       2216.80    
  11  0.297588      -1.21204      -643.802       643.802       1713.20       2357.00    
  12  0.119337      -2.12581      -1129.17       1129.17       1750.26       2879.42    
  13  0.958276     -0.426192E-01  -22.6381       22.6381       1839.42       1862.05    
  14  0.115549      -2.15806      -1146.30       1146.30       1608.08       2754.38    
  15  0.104220      -2.26125      -1201.11       1201.11       1751.68       2952.79    
  16  0.719503     -0.329194      -174.858       174.858       1838.76       2013.62    
  17  0.875656     -0.132782      -70.5297       70.5297       1839.48       1910.01    
  18  0.578760     -0.546868      -290.480       290.480       1797.48       2087.96    
  19  0.923704     -0.793639E-01  -42.1558       42.1558       1828.34       1870.50    
  20  0.457980     -0.780930      -414.807       414.807       1736.53       2151.33    
  21  0.783173     -0.244401      -129.819       129.819       1816.05       1945.87    
  22  0.764479     -0.268561      -142.652       142.652       1909.06       2051.72    
  23  0.496891     -0.699384      -371.492       371.492       1717.71       2089.20    
  24  0.554859     -0.589041      -312.881       312.881       1742.84       2055.72    
  25  0.734503E-02  -4.91373      -2610.03       2610.03       1961.16       4571.19    
  26  0.117643      -2.14010      -1136.76       1136.76       1580.47       2717.23    
  27  0.145440      -1.92799      -1024.09       1024.09       1736.08       2760.17    
  28  0.375449     -0.979633      -520.352       520.352       1770.80       2291.15    
  29  0.954324E-01  -2.34934      -1247.90       1247.90       1740.61       2988.51    
  30  0.449085     -0.800543      -425.225       425.225       1561.33       1986.55    
  31  0.354483      -1.03709      -550.874       550.874       1790.45       2341.32    
  32  0.153971      -1.87099      -993.815       993.815       1710.39       2704.20    
  33  0.871598     -0.137427      -72.9970       72.9970       1984.36       2057.35    
  34  0.633061     -0.457188      -242.845       242.845       1747.07       1989.91    
  35  0.947022E-01  -2.35702      -1251.98       1251.98       1770.57       3022.55    
  36  0.793812     -0.230909      -122.652       122.652       1827.18       1949.83    
  37  0.760585     -0.273667      -145.364       145.364       1919.37       2064.74    
  38  0.124312      -2.08496      -1107.47       1107.47       1882.40       2989.87    
  39  0.961605E-03  -6.94691      -3689.99       3689.99       1721.97       5411.96    
  40  0.672529     -0.396710      -210.721       210.721       2118.43       2329.15    
  41  0.749847E-01  -2.59047      -1375.98       1375.98       1980.44       3356.42    
  42  0.982441     -0.177147E-01  -9.40954       9.40954       1935.34       1944.75    
  43  0.340727      -1.07667      -571.897       571.897       1684.50       2256.40    
  44  0.915043     -0.887846E-01  -47.1598       47.1598       1672.41       1719.57    
  45  0.150614      -1.89303      -1005.52       1005.52       1712.25       2717.77    
  46  0.892785     -0.113409      -60.2396       60.2396       1781.42       1841.66    
  47  0.844073     -0.169516      -90.0418       90.0418       1809.33       1899.37    
  48  0.469949     -0.755131      -401.103       401.103       1764.99       2166.09    
  49  0.389072     -0.943991      -501.420       501.420       2257.89       2759.31    
  50  0.738049     -0.303745      -161.340       161.340       1795.55       1956.89    
  51  0.250173      -1.38560      -735.992       735.992       1719.19       2455.19    
  52  0.383245     -0.959081      -509.435       509.435       1780.87       2290.30    
  53  0.384434     -0.955983      -507.790       507.790       2435.97       2943.76    
  54  0.479018E-01  -3.03860      -1614.02       1614.02       1781.61       3395.63    
  55  0.819285     -0.199323      -105.875       105.875       1694.94       1800.82    
  56  0.568165     -0.565344      -300.294       300.294       1735.45       2035.75    
  57  0.918732     -0.847606E-01  -45.0223       45.0223       1747.69       1792.71    
  58  0.374258     -0.982809      -522.039       522.039       2191.36       2713.40    
  59  0.966524     -0.340496E-01  -18.0862       18.0862       1889.46       1907.55    
  60  0.505261     -0.682680      -362.619       362.619       1862.77       2225.39    
  61  0.283819      -1.25942      -668.966       668.966       2299.69       2968.66    
  62  0.448920     -0.800911      -425.420       425.420       1761.73       2187.15    
  63  0.398648     -0.919676      -488.505       488.505       1578.48       2066.99    
  64  0.625742     -0.468817      -249.022       249.022       2485.96       2734.98    
  65  0.924606     -0.783881E-01  -41.6374       41.6374       2027.68       2069.31    
  66  0.546966     -0.603368      -320.491       320.491       1949.01       2269.50    
  67  0.372518     -0.987471      -524.515       524.515       1569.79       2094.30    
  68  0.167437      -1.78715      -949.281       949.281       2001.89       2951.17    
  69  0.142610      -1.94764      -1034.53       1034.53       1775.35       2809.88    
  70  0.935319     -0.668675E-01  -35.5180       35.5180       1868.49       1904.01    
  71  0.100396      -2.29864      -1220.97       1220.97       1747.59       2968.56    
  72  0.179415E-01  -4.02064      -2135.64       2135.64       1799.61       3935.25    
  73  0.733830     -0.309478      -164.386       164.386       1698.61       1862.99    
  74  0.730276E-01  -2.61692      -1390.03       1390.03       2710.64       4100.67    
loop,thermsimp(1:2)       45   72.3780       5.17453    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146       1659.97        130.09          0.71         30.07          0.85          0.05        161.77
Just calling func    0   0        161.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147       1519.51        129.71          0.66         30.32          1.17          0.05        161.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1519.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       45
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       46
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      147
neval,tstepnext:      146     147

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -1290.63       1290.63       1407.55       2698.18    
   2  0.312747      -1.16236      -617.412       617.412       1580.67       2198.08    
   3  0.317683      -1.14670      -609.093       609.093       1672.41       2281.50    
   4  0.693053     -0.366649      -194.753       194.753       1747.69       1942.44    
   5  0.361881      -1.01644      -539.902       539.902       1694.94       2234.84    
   6  0.127478      -2.05981      -1094.11       1094.11       1763.87       2857.98    
   7  0.718706     -0.330302      -175.447       175.447       1781.42       1956.86    
   8  0.609419E-01  -2.79783      -1486.13       1486.13       1839.42       3325.54    
   9  0.320798      -1.13695      -603.912       603.912       1698.61       2302.52    
  10  0.343503      -1.06856      -567.587       567.587       1828.34       2395.93    
  11  0.671828     -0.397753      -211.275       211.275       1809.33       2020.61    
  12  0.616702     -0.483369      -256.752       256.752       1868.49       2125.24    
  13  0.806358E-01  -2.51781      -1337.39       1337.39       1889.46       3226.85    
  14  0.997284     -0.271972E-02  -1.44464       1.44464       1839.48       1840.92    
  15  0.554344     -0.589969      -313.374       313.374       1935.34       2248.72    
  16  0.411057     -0.889023      -472.223       472.223       1816.05       2288.27    
  17  0.846258E-01  -2.46952      -1311.73       1311.73       1744.72       3056.46    
  18  0.737439     -0.304571      -161.779       161.779       1827.18       1988.96    
  19  0.393790     -0.931939      -495.018       495.018       1795.55       2290.57    
  20  0.965947     -0.346467E-01  -18.4033       18.4033       1666.68       1685.08    
  21  0.150166      -1.89601      -1007.11       1007.11       1561.33       2568.43    
  22  0.212005      -1.55114      -823.922       823.922       1747.07       2570.99    
  23  0.615060     -0.486036      -258.168       258.168       1838.76       2096.93    
  24  0.382142     -0.961962      -510.966       510.966       1735.45       2246.42    
  25  0.249044      -1.39013      -738.395       738.395       1909.06       2647.46    
  26  0.245943      -1.40266      -745.050       745.050       1742.84       2487.89    
  27  0.108882      -2.21749      -1177.87       1177.87       1984.36       3162.22    
  28  0.199835      -1.61026      -855.325       855.325       1919.37       2774.70    
  29  0.863954     -0.146235      -77.6760       77.6760       1578.48       1656.16    
  30  0.392842     -0.934347      -496.297       496.297       2027.68       2523.97    
  31  0.770596     -0.260592      -138.419       138.419       1705.34       1843.76    
  32  0.149868      -1.89800      -1008.16       1008.16       1797.48       2805.64    
  33  0.234154      -1.45178      -771.140       771.140       1717.71       2488.85    
  34  0.611512     -0.491821      -261.241       261.241       1569.79       1831.03    
  35  0.518093E-01  -2.96019      -1572.36       1572.36       1736.53       3308.89    
  36  0.567953     -0.565716      -300.492       300.492       1764.99       2065.48    
  37  0.190847      -1.65628      -879.769       879.769       1761.73       2641.50    
  38  0.104561      -2.25798      -1199.37       1199.37       1758.12       2957.49    
  39  0.135276      -2.00044      -1062.57       1062.57       1862.77       2925.34    
  40  0.262364      -1.33802      -710.719       710.719       1684.50       2395.22    
  41  0.463951     -0.767976      -407.926       407.926       1949.01       2356.94    
  42  0.419672     -0.868282      -461.206       461.206       1780.87       2242.07    
  43  0.897011     -0.108687      -57.7312       57.7312       1770.80       1828.53    
  44  0.818933     -0.199754      -106.103       106.103       2118.43       2224.53    
  45  0.136906      -1.98846      -1056.21       1056.21       1790.45       2846.66    
  46  0.561722     -0.576748      -306.351       306.351       1713.20       2019.55    
  47  0.991681     -0.835368E-02  -4.43723       4.43723       1673.73       1678.17    
  48  0.653388     -0.425585      -226.058       226.058       1719.19       1945.25    
  49  0.578557     -0.547219      -290.666       290.666       1710.39       2001.05    
  50  0.784121     -0.243191      -129.176       129.176       2191.36       2320.54    
  51  0.827307     -0.189579      -100.699       100.699       1580.47       1681.17    
  52  0.994261     -0.575522E-02  -3.05700       3.05700       1712.25       1715.30    
  53  0.274030      -1.29452      -687.610       687.610       2485.96       3173.56    
  54  0.879777     -0.128087      -68.0358       68.0358       1608.08       1676.12    
  55  0.694576E-01  -2.66704      -1416.65       1416.65       2257.89       3674.54    
  56  0.431517E-01  -3.14303      -1669.49       1669.49       1736.08       3405.57    
  57  0.620633     -0.477015      -253.377       253.377       1775.35       2028.73    
  58  0.166702      -1.79155      -951.618       951.618       1750.26       2701.88    
  59  0.785136E-01  -2.54448      -1351.55       1351.55       1613.97       2965.53    
  60  0.440162     -0.820613      -435.886       435.886       2435.97       2871.86    
  61  0.924092     -0.789432E-01  -41.9323       41.9323       2001.89       2043.82    
  62  0.957397     -0.435372E-01  -23.1257       23.1257       1751.68       1774.80    
  63  0.817312     -0.201734      -107.155       107.155       1747.59       1854.75    
  64  0.345978      -1.06138      -563.773       563.773       2299.69       2863.47    
  65  0.814305E-02  -4.81059      -2555.24       2555.24       1740.61       4295.85    
  66  0.961102     -0.396751E-01  -21.0742       21.0742       1882.40       1903.47    
  67  0.918841E-01  -2.38723      -1268.02       1268.02       1770.57       3038.59    
  68  0.875898     -0.132506      -70.3831       70.3831       1980.44       2050.82    
  69  0.884301     -0.122958      -65.3117       65.3117       1781.61       1846.92    
  70  0.822040E-01  -2.49855      -1327.16       1327.16       1799.61       3126.76    
  71  0.674949     -0.393119      -208.813       208.813       2710.64       2919.45    
  72  0.890073     -0.116452      -61.8556       61.8556       1632.39       1694.25    
  73  0.102417      -2.27870      -1210.38       1210.38       1961.16       3171.54    
  74  0.704459     -0.350326      -186.083       186.083       1519.51       1705.59    
loop,thermsimp(1:2)       46   1290.63       617.412    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148       1669.14        129.84          0.68         30.03          1.66          0.05        162.26
Just calling func    0   0        162.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149       1545.03        129.54          0.67         30.31          1.57          0.05        162.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1545.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    531.171               147
loop is:       46
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    531.171               147
loop is:       47
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    265.585               220

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      148     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -842.508       842.508       1578.48       2420.99    
   2  0.581082     -0.542864      -144.177       144.177       1608.08       1752.26    
   3  0.690143     -0.370857      -98.4941       98.4941       1673.73       1772.23    
   4  0.958690     -0.421877E-01  -11.2044       11.2044       1580.47       1591.67    
   5  0.947492     -0.539367E-01  -14.3248       14.3248       1666.68       1681.01    
   6  0.253816E-01  -3.67373      -975.689       975.689       1632.39       2608.08    
   7  0.811950     -0.208316      -55.3257       55.3257       1519.51       1574.83    
   8  0.448512     -0.801821      -212.952       212.952       1712.25       1925.20    
   9  0.625244     -0.469613      -124.722       124.722       1751.68       1876.40    
  10  0.557627     -0.584065      -155.119       155.119       1770.80       1925.91    
  11  0.762657     -0.270947      -71.9596       71.9596       1569.79       1641.75    
  12  0.579328     -0.545887      -144.979       144.979       1839.48       1984.46    
  13  0.168395      -1.78144      -473.125       473.125       1705.34       2178.47    
  14  0.993282     -0.674111E-02  -1.79034       1.79034       1781.61       1783.40    
  15  0.573458     -0.556070      -147.684       147.684       1747.59       1895.28    
  16  0.900456     -0.104854      -27.8475       27.8475       1882.40       1910.25    
  17  0.961937     -0.388068E-01  -10.3065       10.3065       1747.69       1758.00    
  18  0.685702     -0.377312      -100.209       100.209       1719.19       1819.40    
  19  0.335644      -1.09171      -289.941       289.941       1781.42       2071.36    
  20  0.726392     -0.319666      -84.8985       84.8985       1827.18       1912.07    
  21  0.523515     -0.647189      -171.884       171.884       1710.39       1882.27    
  22  0.877914     -0.130206      -34.5809       34.5809       1713.20       1747.78    
  23  0.893563     -0.112539      -29.8887       29.8887       1809.33       1839.22    
  24  0.829449     -0.186994      -49.6629       49.6629       1775.35       1825.01    
  25  0.454457     -0.788653      -209.455       209.455       2001.89       2211.34    
  26  0.261407      -1.34168      -356.329       356.329       1980.44       2336.77    
  27  0.144225      -1.93638      -514.275       514.275       1764.99       2279.26    
  28  0.963744     -0.369299E-01  -9.80803       9.80803       1838.76       1848.57    
  29  0.267843      -1.31735      -349.870       349.870       1868.49       2218.36    
  30  0.251943E-01  -3.68114      -977.656       977.656       1580.67       2558.33    
  31  0.321532      -1.13466      -301.348       301.348       2118.43       2419.78    
  32  0.440903     -0.818930      -217.496       217.496       1694.94       1912.44    
  33  0.214416      -1.53984      -408.959       408.959       1780.87       2189.82    
  34  0.212185      -1.55030      -411.737       411.737       1735.45       2147.19    
  35  0.948253E-01  -2.35572      -625.644       625.644       1935.34       2560.99    
  36  0.507627     -0.678008      -180.069       180.069       1672.41       1852.48    
  37  0.415074     -0.879299      -233.529       233.529       1816.05       2049.58    
  38  0.768069     -0.263876      -70.0816       70.0816       1795.55       1865.63    
  39  0.462999E-01  -3.07261      -816.041       816.041       1698.61       2514.65    
  40  0.835390     -0.179856      -47.7672       47.7672       2191.36       2239.13    
  41  0.678734     -0.387526      -102.921       102.921       1949.01       2051.93    
  42  0.363569      -1.01179      -268.715       268.715       1684.50       1953.22    
  43  0.677161     -0.389846      -103.537       103.537       1828.34       1931.88    
  44  0.506668     -0.679899      -180.571       180.571       1742.84       1923.41    
  45  0.875658     -0.132779      -35.2642       35.2642       1717.71       1752.97    
  46  0.924863     -0.781102E-01  -20.7449       20.7449       2027.68       2048.42    
  47  0.794570E-01  -2.53254      -672.605       672.605       1561.33       2233.93    
  48  0.449212     -0.800261      -212.538       212.538       1747.07       1959.61    
  49  0.658987     -0.417051      -110.763       110.763       1761.73       1872.49    
  50  0.674357     -0.393995      -104.639       104.639       1909.06       2013.70    
  51  0.436334     -0.829348      -220.263       220.263       1407.55       1627.81    
  52  0.331871      -1.10301      -292.943       292.943       1750.26       2043.20    
  53  0.233029      -1.45659      -386.850       386.850       1919.37       2306.22    
  54  0.207666      -1.57183      -417.454       417.454       1797.48       2214.93    
  55  0.801765     -0.220940      -58.6784       58.6784       1790.45       1849.13    
  56  0.614336E-01  -2.78980      -740.930       740.930       1763.87       2504.80    
  57  0.167288      -1.78804      -474.876       474.876       2299.69       2774.57    
  58  0.718808     -0.330162      -87.6860       87.6860       2435.97       2523.66    
  59  0.981938     -0.182272E-01  -4.84088       4.84088       2710.64       2715.48    
  60  0.759328     -0.275322      -73.1215       73.1215       1862.77       1935.89    
  61  0.290749      -1.23530      -328.077       328.077       1758.12       2086.20    
  62  0.887200     -0.119685      -31.7866       31.7866       1613.97       1645.76    
  63  0.186280      -1.68051      -446.318       446.318       1770.57       2216.89    
  64  0.427708     -0.849315      -225.566       225.566       1744.72       1970.29    
  65  0.252777      -1.37525      -365.246       365.246       1799.61       2164.85    
  66  0.648648     -0.432865      -114.962       114.962       1984.36       2099.32    
  67  0.823358     -0.194364      -51.6203       51.6203       1961.16       2012.78    
  68  0.352572      -1.04250      -276.873       276.873       2485.96       2762.83    
  69  0.217910      -1.52367      -404.665       404.665       1889.46       2294.13    
  70  0.297394      -1.21270      -322.075       322.075       1736.53       2058.60    
  71  0.597449     -0.515086      -136.799       136.799       1839.42       1976.22    
  72  0.327024      -1.11772      -296.850       296.850       1736.08       2032.93    
  73  0.264314      -1.33062      -353.392       353.392       2257.89       2611.28    
  74  0.810025     -0.210691      -55.9563       55.9563       1545.03       1600.99    
loop,thermsimp(1:2)       47   842.508       144.177    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150       1775.45        130.09          0.69         30.21          0.93          0.05        161.97
Just calling func    0   0        161.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1775.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       47
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       48
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      149     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -150.778       150.778       1519.51       1670.28    
   2  0.216137      -1.53184      -406.834       406.834       1580.47       1987.30    
   3  0.476425     -0.741444      -196.917       196.917       1545.03       1741.95    
   4  0.184047      -1.69256      -449.520       449.520       1407.55       1857.07    
   5  0.722630     -0.324858      -86.2776       86.2776       1569.79       1656.07    
   6  0.887750     -0.119065      -31.6219       31.6219       1613.97       1645.60    
   7  0.236344      -1.44247      -383.098       383.098       1666.68       2049.78    
   8  0.798055     -0.225578      -59.9101       59.9101       1713.20       1773.11    
   9  0.425454     -0.854597      -226.969       226.969       1608.08       1835.05    
  10  0.605701     -0.501368      -133.156       133.156       1717.71       1850.86    
  11  0.742456     -0.297792      -79.0892       79.0892       1747.69       1826.78    
  12  0.378462E-01  -3.27423      -869.586       869.586       1673.73       2543.32    
  13  0.341910      -1.07321      -285.028       285.028       1781.61       2066.64    
  14  0.794971E-01  -2.53203      -672.471       672.471       1719.19       2391.66    
  15  0.586423     -0.533715      -141.747       141.747       1775.35       1917.10    
  16  0.990523     -0.952170E-02  -2.52882       2.52882       1809.33       1811.86    
  17  0.348475      -1.05419      -279.977       279.977       1838.76       2118.74    
  18  0.998034     -0.196755E-02 -0.522552      0.522552       1790.45       1790.97    
  19  0.616072     -0.484391      -128.647       128.647       1672.41       1801.06    
  20  0.427239     -0.850411      -225.857       225.857       1795.55       2021.41    
  21  0.598160     -0.513898      -136.484       136.484       1761.73       1898.21    
  22  0.642831     -0.441873      -117.355       117.355       1751.68       1869.03    
  23  0.392766     -0.934541      -248.200       248.200       1710.39       1958.59    
  24  0.738407     -0.303260      -80.5414       80.5414       1747.59       1828.14    
  25  0.334341      -1.09559      -290.974       290.974       1882.40       2173.37    
  26  0.997912     -0.208996E-02 -0.555062      0.555062       1827.18       1827.73    
  27  0.492305E-01  -3.01124      -799.742       799.742       1694.94       2494.68    
  28  0.304734      -1.18832      -315.599       315.599       1742.84       2058.44    
  29  0.159886      -1.83330      -486.896       486.896       1712.25       2199.14    
  30  0.991331     -0.870666E-02  -2.31236       2.31236       1770.80       1773.11    
  31  0.735164     -0.307662      -81.7106       81.7106       1828.34       1910.05    
  32  0.279948      -1.27315      -338.130       338.130       1862.77       2200.90    
  33  0.457260     -0.782502      -207.821       207.821       1684.50       1892.33    
  34  0.678170     -0.388358      -103.142       103.142       1747.07       1850.21    
  35  0.689603     -0.371639      -98.7019       98.7019       1744.72       1843.43    
  36  0.468470     -0.758283      -201.389       201.389       1839.42       2040.81    
  37  0.937429     -0.646141E-01  -17.1606       17.1606       1839.48       1856.64    
  38  0.115915      -2.15490      -572.309       572.309       1961.16       2533.47    
  39  0.125789      -2.07315      -550.597       550.597       1909.06       2459.66    
  40  0.137562      -1.98368      -526.837       526.837       1736.08       2262.92    
  41  0.273901      -1.29499      -343.929       343.929       1750.26       2094.19    
  42  0.934963     -0.672484E-01  -17.8602       17.8602       2027.68       2045.54    
  43  0.450296     -0.797850      -211.897       211.897       1816.05       2027.94    
  44  0.681645     -0.383246      -101.785       101.785       1949.01       2050.80    
  45  0.282914E-01  -3.56520      -946.864       946.864       1736.53       2683.39    
  46  0.962226     -0.385062E-01  -10.2267       10.2267       1781.42       1791.64    
  47  0.771412     -0.259533      -68.9281       68.9281       1758.12       1827.05    
  48  0.778208     -0.250761      -66.5986       66.5986       1984.36       2050.95    
  49  0.945686     -0.558450E-01  -14.8316       14.8316       1735.45       1750.28    
  50  0.648669     -0.432833      -114.954       114.954       1799.61       1914.56    
  51  0.214283      -1.54046      -409.122       409.122       1705.34       2114.46    
  52  0.692999     -0.366726      -97.3972       97.3972       1780.87       1878.26    
  53  0.966323     -0.342573E-01  -9.09823       9.09823       2001.89       2010.98    
  54  0.975007     -0.253104E-01  -6.72208       6.72208       1797.48       1804.20    
  55  0.947991E-01  -2.35600      -625.718       625.718       1770.57       2396.29    
  56  0.195092      -1.63429      -434.042       434.042       1868.49       2302.54    
  57  0.459282     -0.778091      -206.649       206.649       1561.33       1767.98    
  58  0.563954     -0.572782      -152.123       152.123       2191.36       2343.48    
  59  0.482884     -0.727978      -193.340       193.340       1764.99       1958.33    
  60  0.270357      -1.30801      -347.389       347.389       1889.46       2236.85    
  61  0.184282      -1.69129      -449.181       449.181       1919.37       2368.55    
  62  0.486455     -0.720611      -191.384       191.384       1980.44       2171.82    
  63  0.348603      -1.05382      -279.880       279.880       2118.43       2398.31    
  64  0.556175     -0.586673      -155.812       155.812       1578.48       1734.29    
  65  0.125277      -2.07723      -551.681       551.681       1763.87       2315.55    
  66  0.473622     -0.747346      -198.484       198.484       1698.61       1897.09    
  67  0.762738     -0.270841      -71.9314       71.9314       2435.97       2507.90    
  68  0.898920     -0.106561      -28.3011       28.3011       1580.67       1608.97    
  69  0.646772E-01  -2.73835      -727.265       727.265       1935.34       2662.61    
  70  0.303985      -1.19078      -316.253       316.253       1632.39       1948.64    
  71  0.561577     -0.577006      -153.244       153.244       2257.89       2411.13    
  72  0.522748     -0.648656      -172.273       172.273       2710.64       2882.91    
  73  0.916158     -0.875659E-01  -23.2562       23.2562       2485.96       2509.21    
  74  0.986389     -0.137046E-01  -3.63973       3.63973       1775.45       1779.09    
loop,thermsimp(1:2)       48   150.778       406.834    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151       3062.74        129.90          0.71         30.19          0.43          0.05        161.29
Just calling func    0   0        161.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152       2067.26        129.83          0.70         30.46          0.50          0.05        161.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2067.26
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       48
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       49
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      151     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -453.997       453.997       1580.67       2034.67    
   2  0.335083      -1.09338      -290.385       290.385       1613.97       1904.36    
   3  0.585160     -0.535871      -142.319       142.319       1569.79       1712.11    
   4  0.445729     -0.808044      -214.605       214.605       1519.51       1734.11    
   5  0.963605     -0.370741E-01  -9.84633       9.84633       1578.48       1588.33    
   6  0.538074     -0.619758      -164.599       164.599       1545.03       1709.63    
   7  0.971443     -0.289729E-01  -7.69478       7.69478       1735.45       1743.15    
   8  0.817136     -0.201950      -53.6349       53.6349       1561.33       1614.96    
   9  0.216943      -1.52812      -405.847       405.847       1770.80       2176.64    
  10  0.572311     -0.558074      -148.216       148.216       1713.20       1861.42    
  11  0.511761     -0.669897      -177.915       177.915       1775.45       1953.37    
  12  0.331920E-01  -3.40545      -904.437       904.437       1790.45       2694.89    
  13  0.662680     -0.411462      -109.278       109.278       1781.42       1890.69    
  14  0.578679     -0.547007      -145.277       145.277       1672.41       1817.69    
  15  0.473979     -0.746592      -198.284       198.284       1797.48       1995.76    
  16  0.243750      -1.41161      -374.903       374.903       1809.33       2184.24    
  17  0.784227     -0.243057      -64.5525       64.5525       1747.69       1812.24    
  18  0.215065      -1.53682      -408.155       408.155       1758.12       2166.28    
  19  0.813272     -0.206689      -54.8936       54.8936       1827.18       1882.07    
  20  0.877336     -0.130865      -34.7559       34.7559       1747.59       1782.35    
  21  0.911070     -0.931357E-01  -24.7355       24.7355       1608.08       1632.82    
  22  0.424500     -0.856844      -227.565       227.565       1744.72       1972.29    
  23  0.122508      -2.09958      -557.618       557.618       1747.07       2304.69    
  24  0.173199      -1.75331      -465.654       465.654       1717.71       2183.36    
  25  0.243010      -1.41465      -375.711       375.711       1839.48       2215.19    
  26  0.618804     -0.479966      -127.472       127.472       1407.55       1535.02    
  27  0.365303      -1.00703      -267.452       267.452       1751.68       2019.13    
  28  0.178054      -1.72567      -458.312       458.312       1780.87       2239.18    
  29  0.416122     -0.876776      -232.859       232.859       1684.50       1917.36    
  30  0.789287     -0.236625      -62.8442       62.8442       1698.61       1761.45    
  31  0.786736     -0.239863      -63.7041       63.7041       1761.73       1825.43    
  32  0.295880      -1.21780      -323.430       323.430       1828.34       2151.77    
  33  0.418649     -0.870722      -231.251       231.251       1799.61       2030.86    
  34  0.706992     -0.346736      -92.0879       92.0879       1775.35       1867.44    
  35  0.281863      -1.26633      -336.319       336.319       1632.39       1968.71    
  36  0.357290      -1.02921      -273.343       273.343       1764.99       2038.33    
  37  0.174180      -1.74767      -464.154       464.154       1710.39       2174.54    
  38  0.190924      -1.65588      -439.778       439.778       1580.47       2020.24    
  39  0.630369     -0.461449      -122.554       122.554       2001.89       2124.44    
  40  0.252261      -1.37729      -365.788       365.788       1795.55       2161.34    
  41  0.359213      -1.02384      -271.917       271.917       1816.05       2087.96    
  42  0.740344     -0.300640      -79.8457       79.8457       1839.42       1919.26    
  43  0.283211      -1.26156      -335.053       335.053       2027.68       2362.73    
  44  0.965119     -0.355039E-01  -9.42930       9.42930       1666.68       1676.11    
  45  0.389600     -0.942634      -250.350       250.350       1949.01       2199.36    
  46  0.598383     -0.513525      -136.385       136.385       1984.36       2120.74    
  47  0.631795     -0.459190      -121.954       121.954       1742.84       1864.80    
  48  0.997460     -0.254363E-02 -0.675551      0.675551       1781.61       1782.29    
  49  0.192532      -1.64749      -437.550       437.550       1750.26       2187.81    
  50  0.769348     -0.262212      -69.6395       69.6395       1705.34       1774.98    
  51  0.740745     -0.300099      -79.7019       79.7019       1838.76       1918.47    
  52  0.590587     -0.526639      -139.868       139.868       1980.44       2120.31    
  53  0.628310E-01  -2.76731      -734.956       734.956       1882.40       2617.36    
  54  0.515529     -0.662562      -175.967       175.967       1712.25       1888.21    
  55  0.306025      -1.18409      -314.477       314.477       1862.77       2177.25    
  56  0.686790     -0.375726      -99.7873       99.7873       1889.46       1989.25    
  57  0.357910      -1.02747      -272.882       272.882       1736.08       2008.96    
  58  0.267469      -1.31875      -350.241       350.241       1868.49       2218.73    
  59  0.410193     -0.891128      -236.670       236.670       1763.87       2000.54    
  60  0.490314     -0.712709      -189.285       189.285       2191.36       2380.65    
  61  0.395217     -0.928320      -246.548       246.548       1919.37       2165.92    
  62  0.641491E-01  -2.74655      -729.442       729.442       1719.19       2448.64    
  63  0.610173     -0.494012      -131.202       131.202       1770.57       1901.77    
  64  0.657523     -0.419276      -111.353       111.353       2118.43       2229.78    
  65  0.172961      -1.75469      -466.019       466.019       2257.89       2723.91    
  66  0.166793      -1.79100      -475.663       475.663       1909.06       2384.73    
  67  0.184181      -1.69184      -449.327       449.327       1694.94       2144.27    
  68  0.728490     -0.316781      -84.1325       84.1325       2435.97       2520.11    
  69  0.307541      -1.17915      -313.164       313.164       2485.96       2799.12    
  70  0.929000     -0.736468E-01  -19.5595       19.5595       1961.16       1980.72    
  71  0.111633      -2.19254      -582.307       582.307       1673.73       2256.04    
  72  0.920233     -0.831286E-01  -22.0777       22.0777       1935.34       1957.42    
  73  0.808772     -0.212238      -56.3674       56.3674       1736.53       1792.89    
  74  0.834952     -0.180381      -47.9065       47.9065       2067.26       2115.17    
loop,thermsimp(1:2)       49   453.997       290.385    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153       3483.29        130.41          0.72         30.27          0.16          0.05        161.62
Just calling func    0   0        161.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154       2488.68        130.10          0.75         30.35          0.56          0.05        161.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2488.68
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       49
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       50
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      153     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -916.461       916.461       1407.55       2324.01    
   2  0.601445     -0.508421      -135.029       135.029       1578.48       1713.51    
   3  0.651191     -0.428952      -113.923       113.923       1561.33       1675.25    
   4  0.187303      -1.67503      -444.862       444.862       1608.08       2052.95    
   5  0.664603     -0.408566      -108.509       108.509       1666.68       1775.19    
   6  0.945236     -0.563208E-01  -14.9580       14.9580       1545.03       1559.99    
   7  0.865870     -0.144020      -38.2496       38.2496       1569.79       1608.04    
   8  0.674117     -0.394351      -104.734       104.734       1519.51       1624.24    
   9  0.959689E-01  -2.34373      -622.460       622.460       1735.45       2357.91    
  10  0.663337     -0.410472      -109.015       109.015       1698.61       1807.62    
  11  0.384854     -0.954891      -253.605       253.605       1705.34       1958.95    
  12  0.892338     -0.113910      -30.2529       30.2529       1781.61       1811.86    
  13  0.470837     -0.753243      -200.050       200.050       1747.59       1947.64    
  14  0.262618      -1.33706      -355.102       355.102       1736.53       2091.63    
  15  0.877143     -0.131085      -34.8142       34.8142       1747.69       1782.50    
  16  0.262102      -1.33902      -355.625       355.625       1672.41       2028.03    
  17  0.306130      -1.18375      -314.386       314.386       1761.73       2076.11    
  18  0.251844      -1.37895      -366.228       366.228       1713.20       2079.43    
  19  0.371147     -0.991157      -263.237       263.237       1742.84       2006.08    
  20  0.244393E-01  -3.71156      -985.737       985.737       1775.35       2761.09    
  21  0.550903     -0.596197      -158.341       158.341       1827.18       1985.52    
  22  0.509078     -0.675154      -179.311       179.311       1712.25       1891.56    
  23  0.741178     -0.299515      -79.5468       79.5468       1781.42       1860.96    
  24  0.585965     -0.534496      -141.954       141.954       1770.57       1912.52    
  25  0.602491     -0.506683      -134.568       134.568       1613.97       1748.54    
  26  0.532366     -0.630423      -167.431       167.431       1684.50       1851.94    
  27  0.264247      -1.33087      -353.459       353.459       1838.76       2192.22    
  28  0.468512     -0.758194      -201.365       201.365       1839.42       2040.78    
  29  0.338122      -1.08435      -287.987       287.987       1775.45       2063.44    
  30  0.815455     -0.204008      -54.1816       54.1816       1935.34       1989.52    
  31  0.126007      -2.07142      -550.139       550.139       1632.39       2182.53    
  32  0.391435     -0.937937      -249.102       249.102       1744.72       1993.83    
  33  0.477179     -0.739864      -196.497       196.497       1961.16       2157.66    
  34  0.926058     -0.768180E-01  -20.4017       20.4017       1889.46       1909.86    
  35  0.305992E-01  -3.48678      -926.038       926.038       1797.48       2723.52    
  36  0.142122      -1.95107      -518.175       518.175       1763.87       2282.04    
  37  0.934627E-01  -2.37019      -629.488       629.488       1736.08       2365.57    
  38  0.933240     -0.690924E-01  -18.3499       18.3499       1751.68       1770.03    
  39  0.551354     -0.595378      -158.124       158.124       1580.47       1738.59    
  40  0.167646      -1.78590      -474.309       474.309       1799.61       2273.92    
  41  0.657770     -0.418900      -111.254       111.254       1580.67       1691.92    
  42  0.937012     -0.650587E-01  -17.2786       17.2786       1764.99       1782.27    
  43  0.435130     -0.832109      -220.996       220.996       1816.05       2037.04    
  44  0.346278E-01  -3.36310      -893.189       893.189       2067.26       2960.45    
  45  0.529273     -0.636251      -168.979       168.979       1980.44       2149.42    
  46  0.543808     -0.609159      -161.784       161.784       1984.36       2146.14    
  47  0.476993     -0.740254      -196.601       196.601       2001.89       2198.49    
  48  0.602365     -0.506891      -134.623       134.623       1694.94       1829.56    
  49  0.429141     -0.845970      -224.677       224.677       1828.34       2053.02    
  50  0.161300E-01  -4.12707      -1096.09       1096.09       1795.55       2891.64    
  51  0.806405     -0.215169      -57.1458       57.1458       1919.37       1976.52    
  52  0.577848E-01  -2.85103      -757.191       757.191       1758.12       2515.31    
  53  0.992308     -0.772154E-02  -2.05073       2.05073       1710.39       1712.44    
  54  0.130687      -2.03495      -540.454       540.454       1770.80       2311.25    
  55  0.844072     -0.169518      -45.0214       45.0214       1862.77       1907.79    
  56  0.900890     -0.104372      -27.7198       27.7198       1717.71       1745.43    
  57  0.886923E-01  -2.42258      -643.402       643.402       1809.33       2452.73    
  58  0.675479     -0.392334      -104.198       104.198       1750.26       1854.46    
  59  0.486368     -0.720791      -191.431       191.431       1949.01       2140.44    
  60  0.868319E-01  -2.44378      -649.032       649.032       1839.48       2488.51    
  61  0.536051     -0.623527      -165.600       165.600       1868.49       2034.09    
  62  0.916344     -0.873636E-01  -23.2025       23.2025       2118.43       2141.63    
  63  0.264660E-01  -3.63190      -964.578       964.578       1780.87       2745.44    
  64  0.765006     -0.267871      -71.1426       71.1426       1673.73       1744.88    
  65  0.755495     -0.280383      -74.4655       74.4655       1747.07       1821.53    
  66  0.149819      -1.89833      -504.167       504.167       2027.68       2531.84    
  67  0.514409     -0.664736      -176.544       176.544       2191.36       2367.91    
  68  0.902494E-01  -2.40518      -638.780       638.780       1909.06       2547.84    
  69  0.837965     -0.176779      -46.9499       46.9499       1719.19       1766.14    
  70  0.833448     -0.182184      -48.3854       48.3854       2435.97       2484.36    
  71  0.830623     -0.185580      -49.2873       49.2873       1882.40       1931.69    
  72  0.391825     -0.936940      -248.837       248.837       1790.45       2039.29    
  73  0.561993     -0.576266      -153.048       153.048       2257.89       2410.94    
  74  0.106783      -2.23696      -594.103       594.103       2488.68       3082.78    
loop,thermsimp(1:2)       50   916.461       135.029    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155       1844.08        129.54          0.68         30.74          0.76          0.05        161.77
Just calling func    0   0        161.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1844.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       50
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       51
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      154     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -19.4750       19.4750       1545.03       1564.50    
   2  0.669511     -0.401208      -106.555       106.555       1569.79       1676.34    
   3  0.863337E-01  -2.44954      -650.561       650.561       1519.51       2170.07    
   4  0.279945      -1.27316      -338.133       338.133       1561.33       1899.46    
   5  0.832640     -0.183154      -48.6430       48.6430       1580.67       1629.31    
   6  0.848933     -0.163775      -43.4963       43.4963       1710.39       1753.88    
   7  0.141794      -1.95338      -518.790       518.790       1578.48       2097.27    
   8  0.208764      -1.56655      -416.053       416.053       1580.47       1996.52    
   9  0.755787     -0.279996      -74.3628       74.3628       1673.73       1748.10    
  10  0.177416      -1.72926      -459.266       459.266       1717.71       2176.97    
  11  0.405148     -0.903503      -239.957       239.957       1613.97       1853.93    
  12  0.640380     -0.445693      -118.369       118.369       1719.19       1837.56    
  13  0.548060     -0.601370      -159.715       159.715       1751.68       1911.39    
  14  0.773287     -0.257105      -68.2833       68.2833       1666.68       1734.96    
  15  0.180768      -1.71054      -454.294       454.294       1764.99       2219.28    
  16  0.135846      -1.99624      -530.171       530.171       1747.69       2277.86    
  17  0.601016     -0.509133      -135.218       135.218       1698.61       1833.82    
  18  0.302263      -1.19646      -317.762       317.762       1781.61       2099.37    
  19  0.189428      -1.66374      -441.866       441.866       1747.07       2188.93    
  20  0.737158     -0.304953      -80.9910       80.9910       1694.94       1775.93    
  21  0.790680     -0.234862      -62.3759       62.3759       1684.50       1746.88    
  22  0.177192E-01  -4.03310      -1071.13       1071.13       1750.26       2821.39    
  23  0.236042      -1.44375      -383.437       383.437       1781.42       2164.85    
  24  0.459229     -0.778206      -206.680       206.680       1712.25       1918.93    
  25  0.586479E-01  -2.83620      -753.254       753.254       1862.77       2616.02    
  26  0.263766      -1.33269      -353.943       353.943       1889.46       2243.41    
  27  0.942550     -0.591663E-01  -15.7137       15.7137       1770.57       1786.28    
  28  0.106855      -2.23628      -593.923       593.923       1882.40       2476.32    
  29  0.710700     -0.341505      -90.6986       90.6986       1747.59       1838.29    
  30  0.207109E-01  -3.87709      -1029.70       1029.70       1705.34       2735.04    
  31  0.901203     -0.104025      -27.6275       27.6275       1919.37       1947.00    
  32  0.949751     -0.515555E-01  -13.6924       13.6924       1827.18       1840.87    
  33  0.343487      -1.06861      -283.806       283.806       1935.34       2219.15    
  34  0.875043     -0.133483      -35.4510       35.4510       1744.72       1780.17    
  35  0.122447E-01  -4.40266      -1169.28       1169.28       1742.84       2912.13    
  36  0.820650     -0.197659      -52.4953       52.4953       1672.41       1724.90    
  37  0.748866     -0.289195      -76.8060       76.8060       1868.49       1945.30    
  38  0.594525     -0.519992      -138.102       138.102       1816.05       1954.15    
  39  0.927863E-01  -2.37746      -631.417       631.417       1790.45       2421.87    
  40  0.631335     -0.459918      -122.148       122.148       1839.42       1961.56    
  41  0.282620      -1.26365      -335.608       335.608       1608.08       1943.69    
  42  0.707811     -0.345578      -91.7803       91.7803       1828.34       1920.12    
  43  0.930463     -0.720730E-01  -19.1415       19.1415       1775.45       1794.59    
  44  0.988563     -0.115032E-01  -3.05509       3.05509       1761.73       1764.78    
  45  0.869439     -0.139907      -37.1573       37.1573       1713.20       1750.36    
  46  0.693921     -0.365397      -97.0440       97.0440       1736.53       1833.57    
  47  0.731753     -0.312312      -82.9455       82.9455       1949.01       2031.96    
  48  0.848712     -0.164035      -43.5653       43.5653       2118.43       2161.99    
  49  0.174447      -1.74613      -463.748       463.748       1984.36       2448.10    
  50  0.313212      -1.16087      -308.311       308.311       1980.44       2288.75    
  51  0.880789     -0.126937      -33.7126       33.7126       1961.16       1994.88    
  52  0.441967     -0.816520      -216.856       216.856       1632.39       1849.25    
  53  0.624106     -0.471435      -125.206       125.206       1838.76       1963.97    
  54  0.447426     -0.804244      -213.595       213.595       2001.89       2215.48    
  55  0.681696     -0.383171      -101.765       101.765       1799.61       1901.37    
  56  0.336384      -1.08950      -289.356       289.356       1763.87       2053.22    
  57  0.197044      -1.62433      -431.397       431.397       1770.80       2202.19    
  58  0.186834E-01  -3.98012      -1057.06       1057.06       1407.55       2464.61    
  59  0.467980     -0.759329      -201.667       201.667       1735.45       1937.12    
  60  0.607270     -0.498782      -132.469       132.469       1736.08       1868.55    
  61  0.299128      -1.20689      -320.531       320.531       2191.36       2511.89    
  62  0.166354      -1.79364      -476.363       476.363       2257.89       2734.25    
  63  0.542834     -0.610952      -162.260       162.260       1809.33       1971.59    
  64  0.811476     -0.208901      -55.4810       55.4810       2435.97       2491.45    
  65  0.520065     -0.653802      -173.640       173.640       1839.48       2013.12    
  66  0.955839     -0.451662E-01  -11.9955       11.9955       1758.12       1770.12    
  67  0.729602     -0.315256      -83.7273       83.7273       2027.68       2111.40    
  68  0.792398     -0.232691      -61.7993       61.7993       1909.06       1970.86    
  69  0.803787     -0.218421      -58.0093       58.0093       1797.48       1855.49    
  70  0.812756     -0.207324      -55.0623       55.0623       1780.87       1835.93    
  71  0.189528      -1.66322      -441.727       441.727       1775.35       2217.08    
  72  0.898459     -0.107074      -28.4373       28.4373       1795.55       1823.99    
  73  0.676452     -0.390894      -103.816       103.816       2067.26       2171.08    
  74  0.648856     -0.432545      -114.878       114.878       1844.08       1958.96    
loop,thermsimp(1:2)       51   19.4750       106.555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       3699.71        128.95          0.66         30.62          0.50          0.05        160.78
Just calling func    0   0        160.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    157       1668.46        129.53          0.68         30.46          0.80          0.05        161.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1668.46
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       51
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       52
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      156     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -111.148       111.148       1545.03       1656.18    
   2  0.385391     -0.953496      -253.235       253.235       1580.67       1833.90    
   3  0.323679      -1.12800      -299.581       299.581       1569.79       1869.37    
   4  0.402516E-01  -3.21260      -853.221       853.221       1672.41       2525.63    
   5  0.866022     -0.143846      -38.2033       38.2033       1666.68       1704.88    
   6  0.560147     -0.579555      -153.921       153.921       1684.50       1838.43    
   7  0.389098     -0.943925      -250.693       250.693       1673.73       1924.43    
   8  0.470755     -0.753417      -200.096       200.096       1713.20       1913.30    
   9  0.794299     -0.230295      -61.1630       61.1630       1710.39       1771.55    
  10  0.897132     -0.108553      -28.8300       28.8300       1761.73       1790.56    
  11  0.359474      -1.02311      -271.724       271.724       1758.12       2029.85    
  12  0.604694     -0.503032      -133.598       133.598       1694.94       1828.54    
  13  0.101554      -2.28717      -607.438       607.438       1744.72       2352.16    
  14  0.274480      -1.29288      -343.369       343.369       1770.57       2113.94    
  15  0.916086     -0.876445E-01  -23.2771       23.2771       1775.45       1798.73    
  16  0.820070E-01  -2.50095      -664.216       664.216       1795.55       2459.77    
  17  0.975902     -0.243929E-01  -6.47840       6.47840       1736.53       1743.00    
  18  0.131665      -2.02750      -538.473       538.473       1698.61       2237.08    
  19  0.751313     -0.285933      -75.9397       75.9397       1780.87       1856.81    
  20  0.775324     -0.254475      -67.5847       67.5847       1719.19       1786.78    
  21  0.237000      -1.43969      -382.362       382.362       1747.59       2129.96    
  22  0.113641      -2.17471      -577.570       577.570       1827.18       2404.75    
  23  0.762281     -0.271440      -72.0904       72.0904       1632.39       1704.48    
  24  0.783730     -0.243690      -64.7205       64.7205       1613.97       1678.70    
  25  0.492891     -0.707468      -187.893       187.893       1797.48       1985.37    
  26  0.471904     -0.750980      -199.449       199.449       1736.08       1935.53    
  27  0.855781     -0.155740      -41.3623       41.3623       1561.33       1602.69    
  28  0.636473     -0.451814      -119.995       119.995       1799.61       1919.60    
  29  0.433340     -0.836232      -222.091       222.091       1751.68       1973.77    
  30  0.482236     -0.729321      -193.697       193.697       1712.25       1905.94    
  31  0.855143E-01  -2.45907      -653.093       653.093       1828.34       2481.44    
  32  0.916579     -0.871071E-01  -23.1344       23.1344       1735.45       1758.59    
  33  0.232519      -1.45878      -387.431       387.431       1608.08       1995.52    
  34  0.283977      -1.25886      -334.335       334.335       1868.49       2202.83    
  35  0.401228E-01  -3.21581      -854.072       854.072       1919.37       2773.44    
  36  0.235231      -1.44719      -384.352       384.352       1816.05       2200.40    
  37  0.233426      -1.45489      -386.397       386.397       1844.08       2230.48    
  38  0.903594     -0.101376      -26.9239       26.9239       1839.42       1866.34    
  39  0.857571     -0.153651      -40.8074       40.8074       1838.76       1879.57    
  40  0.444085     -0.811739      -215.586       215.586       1909.06       2124.65    
  41  0.151055      -1.89011      -501.986       501.986       1809.33       2311.32    
  42  0.745694     -0.293440      -77.9333       77.9333       1961.16       2039.10    
  43  0.470647E-01  -3.05623      -811.690       811.690       1580.47       2392.16    
  44  0.344459      -1.06578      -283.056       283.056       1839.48       2122.53    
  45  0.592738     -0.523004      -138.902       138.902       1949.01       2087.91    
  46  0.754292     -0.281975      -74.8884       74.8884       1763.87       1838.76    
  47  0.162950      -1.81431      -481.855       481.855       1578.48       2060.34    
  48  0.939100     -0.628333E-01  -16.6876       16.6876       1781.61       1798.30    
  49  0.966845     -0.337175E-01  -8.95488       8.95488       2027.68       2036.63    
  50  0.287323      -1.24715      -331.224       331.224       2118.43       2449.65    
  51  0.835081     -0.180227      -47.8655       47.8655       1781.42       1829.28    
  52  0.836052     -0.179064      -47.5568       47.5568       1519.51       1567.06    
  53  0.382321     -0.961495      -255.359       255.359       2067.26       2322.62    
  54  0.873869     -0.134824      -35.8073       35.8073       1717.71       1753.51    
  55  0.169635      -1.77411      -471.176       471.176       1747.07       2218.24    
  56  0.511680     -0.670055      -177.957       177.957       1770.80       1948.75    
  57  0.687848     -0.374188      -99.3787       99.3787       2001.89       2101.26    
  58  0.659885     -0.415689      -110.401       110.401       1775.35       1885.75    
  59  0.615967     -0.484562      -128.692       128.692       1935.34       2064.03    
  60  0.600029     -0.510778      -135.655       135.655       1764.99       1900.64    
  61  0.166513      -1.79268      -476.110       476.110       1889.46       2365.57    
  62  0.730640     -0.313835      -83.3500       83.3500       1747.69       1831.04    
  63  0.168194      -1.78264      -473.443       473.443       1980.44       2453.88    
  64  0.562652E-01  -2.87768      -764.269       764.269       1790.45       2554.72    
  65  0.787921     -0.238357      -63.3041       63.3041       1984.36       2047.66    
  66  0.937052     -0.650163E-01  -17.2674       17.2674       1407.55       1424.81    
  67  0.548780     -0.600057      -159.366       159.366       1882.40       2041.77    
  68  0.893892     -0.112170      -29.7907       29.7907       2435.97       2465.76    
  69  0.192558E-01  -3.94994      -1049.05       1049.05       2191.36       3240.41    
  70  0.818438     -0.200358      -53.2121       53.2121       1862.77       1915.98    
  71  0.621039     -0.476361      -126.515       126.515       2257.89       2384.40    
  72  0.868045     -0.141511      -37.5833       37.5833       1705.34       1742.92    
  73  0.579309     -0.545920      -144.988       144.988       1750.26       1895.25    
  74  0.646104E-01  -2.73938      -727.539       727.539       1668.46       2396.00    
loop,thermsimp(1:2)       52   111.148       253.235    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       1637.85        129.98          0.67         30.19          1.06          0.05        161.96
Just calling func    0   0        161.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1637.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       52
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       53
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      157     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -143.872       143.872       1407.55       1551.42    
   2  0.307993      -1.17768      -312.774       312.774       1519.51       1832.28    
   3  0.551684     -0.594779      -157.965       157.965       1561.33       1719.29    
   4  0.969976     -0.304835E-01  -8.09597       8.09597       1545.03       1553.13    
   5  0.401714     -0.912015      -242.218       242.218       1613.97       1856.19    
   6  0.336211      -1.09002      -289.492       289.492       1632.39       1921.88    
   7  0.649191     -0.432028      -114.740       114.740       1666.68       1781.42    
   8  0.426986     -0.851005      -226.014       226.014       1705.34       1931.36    
   9  0.479997     -0.733976      -194.933       194.933       1736.53       1931.46    
  10  0.441527     -0.817516      -217.120       217.120       1717.71       1934.83    
  11  0.218988      -1.51874      -403.355       403.355       1735.45       2138.81    
  12  0.935549     -0.666221E-01  -17.6938       17.6938       1710.39       1728.08    
  13  0.159996      -1.83261      -486.714       486.714       1719.19       2205.91    
  14  0.486870     -0.719759      -191.157       191.157       1761.73       1952.88    
  15  0.835520     -0.179701      -47.7258       47.7258       1781.61       1829.34    
  16  0.643759     -0.440431      -116.972       116.972       1775.45       1892.42    
  17  0.177188      -1.73054      -459.607       459.607       1694.94       2154.55    
  18  0.408356     -0.895617      -237.863       237.863       1781.42       2019.28    
  19  0.463768     -0.768371      -204.068       204.068       1747.69       1951.76    
  20  0.616820     -0.483178      -128.325       128.325       1580.67       1708.99    
  21  0.377083     -0.975289      -259.022       259.022       1684.50       1943.53    
  22  0.278016      -1.28008      -339.970       339.970       1763.87       2103.84    
  23  0.746435     -0.292446      -77.6694       77.6694       1780.87       1858.54    
  24  0.872234     -0.136697      -36.3047       36.3047       1839.42       1875.72    
  25  0.887073E-01  -2.42241      -643.357       643.357       1569.79       2213.14    
  26  0.124913      -2.08014      -552.454       552.454       1838.76       2391.22    
  27  0.918160     -0.853835E-01  -22.6766       22.6766       1775.35       1798.03    
  28  0.924603     -0.783912E-01  -20.8196       20.8196       1750.26       1771.08    
  29  0.863214     -0.147092      -39.0656       39.0656       1764.99       1804.05    
  30  0.823499E-02  -4.79936      -1274.64       1274.64       1712.25       2986.89    
  31  0.548113     -0.601275      -159.690       159.690       1713.20       1872.89    
  32  0.800553     -0.222452      -59.0800       59.0800       1862.77       1921.85    
  33  0.180829      -1.71020      -454.205       454.205       1799.61       2253.81    
  34  0.968975E-01  -2.33410      -619.903       619.903       1673.73       2293.64    
  35  0.749847     -0.287886      -76.4584       76.4584       1736.08       1812.54    
  36  0.902028     -0.103110      -27.3845       27.3845       1770.80       1798.18    
  37  0.312083      -1.16449      -309.270       309.270       1751.68       2060.95    
  38  0.472691     -0.749313      -199.007       199.007       1797.48       1996.49    
  39  0.970346     -0.301026E-01  -7.99480       7.99480       1608.08       1616.08    
  40  0.485853     -0.721850      -191.713       191.713       1758.12       1949.83    
  41  0.604658     -0.503092      -133.614       133.614       2027.68       2161.29    
  42  0.172238      -1.75888      -467.133       467.133       1961.16       2428.30    
  43  0.359079E-01  -3.32680      -883.549       883.549       1882.40       2765.95    
  44  0.464923     -0.765884      -203.408       203.408       1984.36       2187.76    
  45  0.293512      -1.22584      -325.564       325.564       1578.48       1904.05    
  46  0.572788     -0.557239      -147.995       147.995       1935.34       2083.34    
  47  0.931713     -0.707300E-01  -18.7848       18.7848       1949.01       1967.80    
  48  0.983012     -0.171340E-01  -4.55055       4.55055       2001.89       2006.44    
  49  0.572194     -0.558278      -148.270       148.270       1770.57       1918.84    
  50  0.272189      -1.30126      -345.595       345.595       1839.48       2185.07    
  51  0.521081     -0.651849      -173.121       173.121       1909.06       2082.19    
  52  0.560075     -0.579685      -153.956       153.956       1747.59       1901.55    
  53  0.442251     -0.815877      -216.685       216.685       1816.05       2032.73    
  54  0.541873     -0.612723      -162.730       162.730       1868.49       2031.22    
  55  0.619019     -0.479619      -127.380       127.380       1747.07       1874.45    
  56  0.554460     -0.589760      -156.632       156.632       1844.08       2000.72    
  57  0.942853     -0.588454E-01  -15.6285       15.6285       1698.61       1714.23    
  58  0.289656E-01  -3.54165      -940.609       940.609       1809.33       2749.94    
  59  0.420166     -0.867105      -230.290       230.290       2067.26       2297.55    
  60  0.304886      -1.18782      -315.467       315.467       1744.72       2060.19    
  61  0.799970     -0.223182      -59.2738       59.2738       1889.46       1948.74    
  62  0.330194      -1.10808      -294.289       294.289       2257.89       2552.18    
  63  0.193095      -1.64457      -436.774       436.774       1580.47       2017.24    
  64  0.151812      -1.88511      -500.658       500.658       1668.46       2169.12    
  65  0.463265     -0.769456      -204.356       204.356       1827.18       2031.53    
  66  0.468691     -0.757811      -201.264       201.264       2118.43       2319.69    
  67  0.442877     -0.814463      -216.309       216.309       1980.44       2196.75    
  68  0.652140     -0.427496      -113.537       113.537       1795.55       1909.09    
  69  0.258134      -1.35428      -359.676       359.676       2435.97       2795.65    
  70  0.530519E-01  -2.93648      -779.887       779.887       1828.34       2608.23    
  71  0.479897     -0.734184      -194.988       194.988       1672.41       1867.40    
  72  0.266463      -1.32252      -351.241       351.241       1790.45       2141.69    
  73  0.380965     -0.965047      -256.302       256.302       1919.37       2175.67    
  74  0.429433     -0.845291      -224.497       224.497       1637.85       1862.34    
loop,thermsimp(1:2)       53   143.872       312.774    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       1972.79        129.87          0.67         30.32          1.07          0.05        161.97
Just calling func    0   0        161.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1972.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       53
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       54
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      158     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -151.176       151.176       1407.55       1558.72    
   2  0.698829     -0.358349      -95.1722       95.1722       1545.03       1640.20    
   3  0.550231     -0.597418      -158.665       158.665       1608.08       1766.75    
   4  0.844966     -0.168459      -44.7402       44.7402       1580.67       1625.41    
   5  0.139804      -1.96751      -522.542       522.542       1698.61       2221.15    
   6  0.119451      -2.12485      -564.329       564.329       1561.33       2125.66    
   7  0.474112     -0.746312      -198.210       198.210       1710.39       1908.60    
   8  0.293024      -1.22750      -326.006       326.006       1750.26       2076.26    
   9  0.760137     -0.274256      -72.8384       72.8384       1666.68       1739.52    
  10  0.216376      -1.53074      -406.541       406.541       1775.35       2181.89    
  11  0.837069     -0.177849      -47.2340       47.2340       1770.80       1818.03    
  12  0.969258     -0.312245E-01  -8.29278       8.29278       1764.99       1773.28    
  13  0.335918      -1.09089      -289.724       289.724       1736.08       2025.81    
  14  0.966643     -0.339265E-01  -9.01038       9.01038       1781.61       1790.62    
  15  0.723887     -0.323119      -85.8157       85.8157       1519.51       1605.32    
  16  0.459929E-01  -3.07927      -817.808       817.808       1613.97       2431.78    
  17  0.536724     -0.622271      -165.266       165.266       1780.87       1946.13    
  18  0.432574     -0.838001      -222.561       222.561       1637.85       1860.41    
  19  0.160308      -1.83066      -486.196       486.196       1672.41       2158.61    
  20  0.885158     -0.121989      -32.3985       32.3985       1713.20       1745.60    
  21  0.753783     -0.282650      -75.0678       75.0678       1747.07       1822.14    
  22  0.135562      -1.99832      -530.725       530.725       1839.42       2370.14    
  23  0.817964     -0.200937      -53.3659       53.3659       1775.45       1828.82    
  24  0.286617      -1.24961      -331.878       331.878       1747.59       2079.47    
  25  0.319126      -1.14217      -303.344       303.344       1578.48       1881.83    
  26  0.104479E-01  -4.56135      -1211.43       1211.43       1795.55       3006.98    
  27  0.671407     -0.398379      -105.804       105.804       1770.57       1876.37    
  28  0.782955     -0.244680      -64.9835       64.9835       1862.77       1927.75    
  29  0.186689      -1.67831      -445.735       445.735       1632.39       2078.13    
  30  0.462519     -0.771067      -204.784       204.784       1705.34       1910.13    
  31  0.203171      -1.59371      -423.265       423.265       1736.53       2159.79    
  32  0.851762E-01  -2.46303      -654.145       654.145       1717.71       2371.85    
  33  0.702824     -0.352649      -93.6583       93.6583       1684.50       1778.16    
  34  0.747923     -0.290456      -77.1408       77.1408       1889.46       1966.60    
  35  0.224450      -1.49410      -396.812       396.812       1758.12       2154.93    
  36  0.243563E-02  -6.01755      -1598.17       1598.17       1747.69       3345.86    
  37  0.160790      -1.82766      -485.399       485.399       1761.73       2247.13    
  38  0.880431     -0.127343      -33.8205       33.8205       1949.01       1982.83    
  39  0.507306     -0.678640      -180.237       180.237       1797.48       1977.72    
  40  0.266019      -1.32419      -351.685       351.685       1844.08       2195.77    
  41  0.310751      -1.16876      -310.406       310.406       2001.89       2312.29    
  42  0.945006     -0.565640E-01  -15.0226       15.0226       1580.47       1595.49    
  43  0.265699E-01  -3.62797      -963.537       963.537       1781.42       2744.95    
  44  0.652842     -0.426420      -113.251       113.251       1868.49       1981.74    
  45  0.799409     -0.223882      -59.4598       59.4598       1827.18       1886.64    
  46  0.543529     -0.609672      -161.920       161.920       1816.05       1977.97    
  47  0.361947      -1.01626      -269.903       269.903       1744.72       2014.63    
  48  0.398721     -0.919492      -244.204       244.204       1751.68       1995.88    
  49  0.349489      -1.05128      -279.205       279.205       1909.06       2188.27    
  50  0.948739     -0.526212E-01  -13.9754       13.9754       1935.34       1949.32    
  51  0.346176      -1.06081      -281.735       281.735       1763.87       2045.60    
  52  0.678244     -0.388248      -103.113       103.113       1735.45       1838.56    
  53  0.858518     -0.152547      -40.5144       40.5144       1790.45       1830.96    
  54  0.835860E-01  -2.48188      -659.151       659.151       1694.94       2354.09    
  55  0.762568     -0.271063      -71.9904       71.9904       2027.68       2099.67    
  56  0.273927      -1.29489      -343.905       343.905       1668.46       2012.37    
  57  0.729557     -0.315318      -83.7439       83.7439       1919.37       2003.12    
  58  0.320381      -1.13825      -302.301       302.301       1839.48       2141.78    
  59  0.818134     -0.200729      -53.3106       53.3106       1984.36       2037.67    
  60  0.639548     -0.446993      -118.715       118.715       1980.44       2099.15    
  61  0.976107     -0.241828E-01  -6.42259       6.42259       1719.19       1725.62    
  62  0.232128      -1.46046      -387.878       387.878       1569.79       1957.67    
  63  0.215412      -1.53520      -407.728       407.728       1799.61       2207.33    
  64  0.770868     -0.260238      -69.1155       69.1155       1673.73       1742.85    
  65  0.147419E-01  -4.21706      -1119.99       1119.99       2067.26       3187.25    
  66  0.102273      -2.28010      -605.562       605.562       2118.43       2723.99    
  67  0.625951     -0.468483      -124.422       124.422       1838.76       1963.19    
  68  0.176925      -1.73203      -460.001       460.001       1961.16       2421.16    
  69  0.638162E-02  -5.05433      -1342.36       1342.36       2257.89       3600.24    
  70  0.301443      -1.19917      -318.483       318.483       1828.34       2146.82    
  71  0.586975     -0.532773      -141.497       141.497       1809.33       1950.83    
  72  0.595449     -0.518439      -137.690       137.690       1882.40       2020.09    
  73  0.189180      -1.66506      -442.215       442.215       2435.97       2878.19    
  74  0.621622     -0.475424      -126.266       126.266       1972.79       2099.06    
loop,thermsimp(1:2)       54   151.176       95.1722    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160       1483.87        129.89          0.67         30.29          1.00          0.05        161.90
Just calling func    0   0        161.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161       1439.42        129.62          0.68         30.38          1.15          0.05        161.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    1439.4        1.864     -1.109      3.409     -100.0     0.3365    
                      -1.015      6.360     -100.0      2.324      1.567    
                     -0.6757     0.1673      2.009      0.000     0.6768    
                      -1.185     -20.00      0.000      0.000     -1.515    

                      -2.652      6690.      9593.     -508.3     -1451.    
                      -4.165     -5.404     -4.185     -15.33     -5.168    
                      -13.43     -2.722     -3473.      0.000     -1481.    

                      -67.92      3492.      241.2      497.3      2668.    
                      -533.3    -0.2659E-01-0.1243      0.000    -0.1745    
                     -0.9233E-01-0.1059    -0.1951    -0.2197    -0.6967E-01

                     -0.7472     -1.793      1.382     0.3692E-01-0.7608E-01
                      0.8541E-01-0.1013    -0.8589E-01-0.5387E-01-0.3829E-01
                     -0.1726    -0.5848E-01-0.3066     -2.193      1.382    

                      -1.760     -1.570     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.885      8.885      0.000     0.4267E-03
                      0.1535     0.1535      9.169      8.845     -6766.    

                      0.5252E-03 0.1535     0.1535      9.785      9.085    
                      -5421.     0.2546E-03-0.7330     0.1535      9.385    
                       9.185     -4653.     0.1050E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1439.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       54
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       55
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      160     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -435.041       435.041       1407.55       1842.59    
   2  0.875287     -0.133204      -35.3769       35.3769       1580.47       1615.84    
   3  0.103612      -2.26710      -602.108       602.108       1519.51       2121.61    
   4  0.159072      -1.83840      -488.252       488.252       1580.67       2068.92    
   5  0.118738      -2.13084      -565.919       565.919       1545.03       2110.95    
   6  0.294105      -1.22382      -325.028       325.028       1719.19       2044.22    
   7  0.967643     -0.328919E-01  -8.73561       8.73561       1666.68       1675.42    
   8  0.675183     -0.392772      -104.315       104.315       1673.73       1778.05    
   9  0.170112      -1.77130      -470.431       470.431       1713.20       2183.63    
  10  0.990992     -0.904902E-02  -2.40329       2.40329       1608.08       1610.49    
  11  0.198513      -1.61690      -429.426       429.426       1764.99       2194.41    
  12  0.404817E-01  -3.20690      -851.707       851.707       1684.50       2536.21    
  13  0.834933E-01  -2.48299      -659.445       659.445       1781.61       2441.06    
  14  0.458935     -0.778848      -206.850       206.850       1770.80       1977.65    
  15  0.929311     -0.733118E-01  -19.4705       19.4705       1747.07       1766.54    
  16  0.593071     -0.522440      -138.752       138.752       1775.45       1914.21    
  17  0.963359E-01  -2.33991      -621.447       621.447       1790.45       2411.90    
  18  0.383119E-01  -3.26200      -866.338       866.338       1735.45       2601.79    
  19  0.841843     -0.172161      -45.7235       45.7235       1637.85       1683.57    
  20  0.874261     -0.134376      -35.6884       35.6884       1770.57       1806.26    
  21  0.706443     -0.347513      -92.2944       92.2944       1578.48       1670.78    
  22  0.423649E-01  -3.16143      -839.631       839.631       1827.18       2666.81    
  23  0.904835     -0.100003      -26.5593       26.5593       1710.39       1736.95    
  24  0.728800     -0.316356      -84.0195       84.0195       1705.34       1789.36    
  25  0.764304     -0.268790      -71.3867       71.3867       1862.77       1934.16    
  26  0.578519     -0.547284      -145.351       145.351       1780.87       1926.22    
  27  0.321737      -1.13402      -301.179       301.179       1935.34       2236.52    
  28  0.592944     -0.522656      -138.810       138.810       1809.33       1948.14    
  29  0.159596      -1.83511      -487.379       487.379       1569.79       2057.17    
  30  0.797332     -0.226484      -60.1508       60.1508       1838.76       1898.91    
  31  0.263979      -1.33189      -353.730       353.730       1889.46       2243.19    
  32  0.449355     -0.799942      -212.453       212.453       1797.48       2009.93    
  33  0.859901     -0.150938      -40.0868       40.0868       1816.05       1856.13    
  34  0.730093     -0.314584      -83.5488       83.5488       1868.49       1952.04    
  35  0.484666     -0.724295      -192.362       192.362       1949.01       2141.37    
  36  0.180217      -1.71359      -455.105       455.105       1751.68       2206.78    
  37  0.857397     -0.153854      -40.8614       40.8614       1919.37       1960.23    
  38  0.502370     -0.688418      -182.834       182.834       1668.46       1851.29    
  39  0.245408      -1.40484      -373.104       373.104       1744.72       2117.83    
  40  0.134540      -2.00590      -532.736       532.736       1882.40       2415.14    
  41  0.468137     -0.758995      -201.578       201.578       1736.08       1937.66    
  42  0.864548E-01  -2.44813      -650.188       650.188       1984.36       2634.54    
  43  0.178791      -1.72154      -457.215       457.215       1763.87       2221.08    
  44  0.690351     -0.370555      -98.4139       98.4139       1750.26       1848.67    
  45  0.731648     -0.312455      -82.9835       82.9835       1632.39       1715.37    
  46  0.857623     -0.153591      -40.7914       40.7914       1747.59       1788.39    
  47  0.754956     -0.281095      -74.6548       74.6548       1972.79       2047.45    
  48  0.355557      -1.03407      -274.634       274.634       1980.44       2255.07    
  49  0.200964      -1.60463      -426.167       426.167       2027.68       2453.84    
  50  0.243499      -1.41264      -375.177       375.177       1561.33       1936.50    
  51  0.796288     -0.227794      -60.4988       60.4988       1839.48       1899.98    
  52  0.256937      -1.35892      -360.910       360.910       1828.34       2189.25    
  53  0.591760     -0.524655      -139.341       139.341       1758.12       1897.46    
  54  0.799227     -0.224110      -59.5202       59.5202       1672.41       1731.93    
  55  0.115295E-01  -4.46285      -1185.27       1185.27       1736.53       2921.79    
  56  0.559205     -0.581239      -154.369       154.369       1775.35       1929.72    
  57  0.742198     -0.298139      -79.1814       79.1814       1909.06       1988.24    
  58  0.543157     -0.610356      -162.102       162.102       1844.08       2006.19    
  59  0.100933      -2.29330      -609.067       609.067       1799.61       2408.67    
  60  0.201228      -1.60332      -425.817       425.817       1698.61       2124.42    
  61  0.602159E-01  -2.80982      -746.246       746.246       1761.73       2507.97    
  62  0.107777      -2.22769      -591.643       591.643       2001.89       2593.53    
  63  0.131787E-01  -4.32915      -1149.76       1149.76       1694.94       2844.70    
  64  0.756826     -0.278622      -73.9978       73.9978       1839.42       1913.41    
  65  0.617120     -0.482691      -128.196       128.196       1717.71       1845.90    
  66  0.885328     -0.121797      -32.3475       32.3475       1961.16       1993.51    
  67  0.617093     -0.482736      -128.207       128.207       1613.97       1742.18    
  68  0.654899     -0.423274      -112.415       112.415       2118.43       2230.84    
  69  0.847740     -0.165181      -43.8696       43.8696       1781.42       1825.29    
  70  0.121451E-01  -4.41083      -1171.45       1171.45       2435.97       3607.42    
  71  0.861782     -0.148752      -39.5065       39.5065       1795.55       1835.06    
  72  0.786555     -0.240093      -63.7651       63.7651       2067.26       2131.03    
  73  0.634771     -0.454491      -120.706       120.706       1747.69       1868.40    
  74  0.808947     -0.212022      -56.3100       56.3100       1439.42       1495.73    
loop,thermsimp(1:2)       55   435.041       35.3769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       1810.05        129.94          0.66         30.41          0.94          0.05        161.99
Just calling func    0   0        161.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1810.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       55
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       56
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      161     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -519.718       519.718       1439.42       1959.14    
   2  0.197548      -1.62177      -430.719       430.719       1608.08       2038.80    
   3  0.774000     -0.256183      -68.0384       68.0384       1580.47       1648.50    
   4  0.170284      -1.77029      -470.163       470.163       1578.48       2048.65    
   5  0.250636      -1.38376      -367.505       367.505       1666.68       2034.19    
   6  0.907951     -0.965652E-01  -25.6463       25.6463       1637.85       1663.49    
   7  0.611678     -0.491549      -130.548       130.548       1632.39       1762.94    
   8  0.735945E-02  -4.91177      -1304.49       1304.49       1672.41       2976.90    
   9  0.309131      -1.17399      -311.794       311.794       1710.39       2022.18    
  10  0.577854     -0.548434      -145.656       145.656       1613.97       1759.63    
  11  0.931529     -0.709274E-01  -18.8373       18.8373       1747.07       1765.91    
  12  0.665703     -0.406912      -108.070       108.070       1673.73       1781.80    
  13  0.585695     -0.534955      -142.076       142.076       1747.59       1889.67    
  14  0.295001      -1.22078      -324.220       324.220       1705.34       2029.56    
  15  0.317712E-01  -3.44920      -916.056       916.056       1770.57       2686.62    
  16  0.222963      -1.50075      -398.577       398.577       1781.42       2179.99    
  17  0.325931      -1.12107      -297.740       297.740       1795.55       2093.29    
  18  0.785098     -0.241947      -64.2575       64.2575       1407.55       1471.80    
  19  0.550467     -0.596988      -158.551       158.551       1717.71       1876.26    
  20  0.780222     -0.248176      -65.9120       65.9120       1750.26       1816.17    
  21  0.130712      -2.03476      -540.402       540.402       1668.46       2208.86    
  22  0.873397     -0.135365      -35.9509       35.9509       1816.05       1852.00    
  23  0.366975      -1.00246      -266.239       266.239       1747.69       2013.93    
  24  0.813244     -0.206724      -54.9029       54.9029       1758.12       1813.02    
  25  0.782660E-01  -2.54764      -676.616       676.616       1838.76       2515.38    
  26  0.700327     -0.356208      -94.6036       94.6036       1839.48       1934.08    
  27  0.437766     -0.826071      -219.392       219.392       1839.42       2058.81    
  28  0.508966E-01  -2.97796      -790.902       790.902       1775.45       2566.35    
  29  0.276850      -1.28428      -341.085       341.085       1780.87       2121.95    
  30  0.792031     -0.233154      -61.9223       61.9223       1775.35       1837.27    
  31  0.174747      -1.74441      -463.291       463.291       1862.77       2326.06    
  32  0.469718     -0.755623      -200.682       200.682       1561.33       1762.01    
  33  0.252316      -1.37707      -365.730       365.730       1736.08       2101.81    
  34  0.980061     -0.201409E-01  -5.34911       5.34911       1809.33       1814.68    
  35  0.838300     -0.176379      -46.8438       46.8438       1868.49       1915.34    
  36  0.369385     -0.995915      -264.500       264.500       1919.37       2183.87    
  37  0.923139     -0.799751E-01  -21.2402       21.2402       1770.80       1792.04    
  38  0.592446     -0.523496      -139.033       139.033       1909.06       2048.10    
  39  0.348787      -1.05329      -279.739       279.739       1961.16       2240.90    
  40  0.569584     -0.562850      -149.485       149.485       1844.08       1993.57    
  41  0.543034E-01  -2.91317      -773.695       773.695       1797.48       2571.17    
  42  0.582662     -0.540148      -143.455       143.455       1719.19       1862.65    
  43  0.702825     -0.352648      -93.6581       93.6581       1972.79       2066.45    
  44  0.941375     -0.604140E-01  -16.0451       16.0451       1569.79       1585.83    
  45  0.258857      -1.35148      -358.933       358.933       1580.67       1939.60    
  46  0.116535      -2.14956      -570.892       570.892       1545.03       2115.92    
  47  0.102671      -2.27622      -604.531       604.531       1744.72       2349.26    
  48  0.172023      -1.76013      -467.464       467.464       1519.51       1986.97    
  49  0.434982E-01  -3.13504      -832.620       832.620       1698.61       2531.23    
  50  0.852122     -0.160026      -42.5006       42.5006       2067.26       2109.76    
  51  0.583521     -0.538675      -143.064       143.064       1949.01       2092.08    
  52  0.843374     -0.170345      -45.2411       45.2411       1713.20       1758.44    
  53  0.194743      -1.63607      -434.517       434.517       1828.34       2262.86    
  54  0.191808      -1.65126      -438.550       438.550       1764.99       2203.54    
  55  0.656555     -0.420749      -111.745       111.745       1751.68       1863.42    
  56  0.468384E-01  -3.06105      -812.970       812.970       1763.87       2576.84    
  57  0.812217     -0.207988      -55.2384       55.2384       2118.43       2173.67    
  58  0.852265     -0.159858      -42.4558       42.4558       1935.34       1977.80    
  59  0.340213      -1.07818      -286.349       286.349       1889.46       2175.81    
  60  0.655911     -0.421730      -112.005       112.005       1980.44       2092.44    
  61  0.329724      -1.10950      -294.667       294.667       1799.61       2094.27    
  62  0.362242      -1.01544      -269.686       269.686       1790.45       2060.14    
  63  0.273539      -1.29631      -344.281       344.281       1882.40       2226.68    
  64  0.524351     -0.645594      -171.460       171.460       1781.61       1953.07    
  65  0.817273     -0.201783      -53.5905       53.5905       2027.68       2081.27    
  66  0.642237     -0.442797      -117.600       117.600       1761.73       1879.33    
  67  0.276178      -1.28671      -341.731       341.731       1684.50       2026.24    
  68  0.721954     -0.325793      -86.5259       86.5259       2001.89       2088.41    
  69  0.676913     -0.390212      -103.635       103.635       1735.45       1839.09    
  70  0.148059      -1.91014      -507.306       507.306       1984.36       2491.66    
  71  0.692932     -0.366824      -97.4231       97.4231       1827.18       1924.60    
  72  0.749770     -0.287989      -76.4856       76.4856       1694.94       1771.43    
  73  0.513445     -0.666612      -177.042       177.042       1736.53       1913.57    
  74  0.483500E-01  -3.02929      -804.534       804.534       1810.05       2614.58    
loop,thermsimp(1:2)       56   519.718       430.719    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       1264.33        129.90          0.66         30.36          0.98          0.06        161.96
Just calling func    0   0        161.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164       1265.52        129.64          0.68         30.41          1.13          0.05        161.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1264.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       56
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       57
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      163     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -109.443       109.443       1407.55       1516.99    
   2  0.724212     -0.322671      -85.6967       85.6967       1569.79       1655.48    
   3  0.633711     -0.456163      -121.150       121.150       1580.47       1701.62    
   4  0.448566     -0.801700      -212.920       212.920       1637.85       1850.77    
   5  0.964228     -0.364273E-01  -9.67456       9.67456       1713.20       1722.88    
   6  0.714306     -0.336444      -89.3547       89.3547       1613.97       1703.33    
   7  0.528330     -0.638035      -169.453       169.453       1561.33       1730.78    
   8  0.654127     -0.424453      -112.728       112.728       1632.39       1745.12    
   9  0.368899     -0.997232      -264.850       264.850       1747.07       2011.92    
  10  0.227697      -1.47974      -392.997       392.997       1694.94       2087.94    
  11  0.612266     -0.490588      -130.293       130.293       1673.73       1804.03    
  12  0.313777      -1.15907      -307.833       307.833       1770.80       2078.63    
  13  0.258526      -1.35276      -359.273       359.273       1758.12       2117.39    
  14  0.119298      -2.12613      -564.670       564.670       1809.33       2374.00    
  15  0.213331      -1.54491      -410.305       410.305       1750.26       2160.56    
  16  0.294218      -1.22343      -324.926       324.926       1775.35       2100.28    
  17  0.352988      -1.04132      -276.560       276.560       1735.45       2012.01    
  18  0.348706      -1.05353      -279.801       279.801       1816.05       2095.85    
  19  0.449249     -0.800179      -212.516       212.516       1719.19       1931.71    
  20  0.879121     -0.128833      -34.2161       34.2161       1751.68       1785.89    
  21  0.464081     -0.767695      -203.889       203.889       1717.71       1921.60    
  22  0.497582     -0.697995      -185.377       185.377       1761.73       1947.10    
  23  0.920207     -0.831566E-01  -22.0852       22.0852       1747.59       1769.68    
  24  0.811773     -0.208535      -55.3838       55.3838       1736.53       1791.91    
  25  0.190651      -1.65731      -440.157       440.157       1868.49       2308.65    
  26  0.645174     -0.438235      -116.389       116.389       1827.18       1943.56    
  27  0.668343     -0.402954      -107.019       107.019       1839.48       1946.50    
  28  0.765111     -0.267735      -71.1064       71.1064       1580.67       1651.78    
  29  0.991779     -0.825499E-02  -2.19240       2.19240       1781.61       1783.80    
  30  0.136888      -1.98859      -528.141       528.141       1439.42       1967.56    
  31  0.645145E-01  -2.74086      -727.933       727.933       1935.34       2663.28    
  32  0.408515E-01  -3.19781      -849.291       849.291       1519.51       2368.80    
  33  0.264109      -1.33140      -353.599       353.599       1844.08       2197.68    
  34  0.382737     -0.960407      -255.070       255.070       1747.69       2002.76    
  35  0.402738E-02  -5.51464      -1464.61       1464.61       1710.39       3174.99    
  36  0.318074      -1.14547      -304.220       304.220       1684.50       1988.72    
  37  0.245237      -1.40553      -373.289       373.289       1705.34       2078.63    
  38  0.519766     -0.654377      -173.793       173.793       1666.68       1840.47    
  39  0.255147      -1.36592      -362.767       362.767       1608.08       1970.85    
  40  0.833841     -0.181712      -48.2600       48.2600       1909.06       1957.32    
  41  0.696242E-01  -2.66464      -707.690       707.690       1578.48       2286.17    
  42  0.487295     -0.718886      -190.926       190.926       1839.42       2030.34    
  43  0.276229E-01  -3.58911      -953.215       953.215       1790.45       2743.67    
  44  0.638327     -0.448905      -119.223       119.223       1972.79       2092.01    
  45  0.206684      -1.57657      -418.713       418.713       2027.68       2446.39    
  46  0.736003     -0.306521      -81.4075       81.4075       2001.89       2083.29    
  47  0.217444E-01  -3.82840      -1016.77       1016.77       1949.01       2965.78    
  48  0.956929     -0.440260E-01  -11.6927       11.6927       1980.44       1992.13    
  49  0.883561     -0.123795      -32.8780       32.8780       1795.55       1828.43    
  50  0.700901     -0.355388      -94.3859       94.3859       1799.61       1893.99    
  51  0.201997      -1.59950      -424.804       424.804       1736.08       2160.89    
  52  0.412152     -0.886362      -235.405       235.405       2067.26       2302.67    
  53  0.890450     -0.116029      -30.8156       30.8156       1545.03       1575.85    
  54  0.417423     -0.873654      -232.030       232.030       1780.87       2012.90    
  55  0.426501     -0.852140      -226.316       226.316       2118.43       2344.74    
  56  0.983871     -0.162605E-01  -4.31854       4.31854       1889.46       1893.78    
  57  0.384350     -0.956201      -253.953       253.953       1781.42       2035.37    
  58  0.155937      -1.85830      -493.538       493.538       1919.37       2412.91    
  59  0.361264      -1.01815      -270.405       270.405       1764.99       2035.39    
  60  0.538177     -0.619568      -164.548       164.548       1668.46       1833.01    
  61  0.514362E-01  -2.96741      -788.101       788.101       1882.40       2670.50    
  62  0.994100     -0.591759E-02  -1.57162       1.57162       1961.16       1962.73    
  63  0.622557     -0.473920      -125.866       125.866       1828.34       1954.21    
  64  0.703606     -0.351537      -93.3631       93.3631       1862.77       1956.13    
  65  0.151986      -1.88396      -500.353       500.353       1744.72       2245.08    
  66  0.105360      -2.25037      -597.665       597.665       1984.36       2582.02    
  67  0.572995     -0.556878      -147.899       147.899       1838.76       1986.66    
  68  0.201032      -1.60429      -426.076       426.076       1698.61       2124.68    
  69  0.786519     -0.240139      -63.7773       63.7773       1775.45       1839.23    
  70  0.251709E-01  -3.68207      -977.903       977.903       1797.48       2775.38    
  71  0.574605     -0.554072      -147.153       147.153       1763.87       1911.02    
  72  0.842012     -0.171961      -45.6703       45.6703       1810.05       1855.72    
  73  0.705908E-02  -4.95344      -1315.56       1315.56       1770.57       3086.13    
  74  0.322746      -1.13089      -300.348       300.348       1264.33       1564.68    
loop,thermsimp(1:2)       57   109.443       85.6967    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       1480.77        129.92          0.66         30.44          0.94          0.05        162.01
Just calling func    0   0        162.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166       1389.10        129.62          0.67         30.30          1.30          0.04        161.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1389.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       57
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       58
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      165     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -753.986       753.986       1407.55       2161.53    
   2  0.104884      -2.25490      -598.870       598.870       1264.33       1863.20    
   3  0.784254     -0.243023      -64.5432       64.5432       1545.03       1609.57    
   4  0.813133     -0.206861      -54.9392       54.9392       1580.67       1635.61    
   5  0.490778     -0.711764      -189.034       189.034       1569.79       1758.82    
   6  0.168573      -1.78039      -472.844       472.844       1580.47       2053.31    
   7  0.450161     -0.798149      -211.977       211.977       1613.97       1825.95    
   8  0.828233     -0.188461      -50.0524       50.0524       1713.20       1763.25    
   9  0.994731     -0.528342E-02  -1.40320       1.40320       1561.33       1562.73    
  10  0.813340     -0.206606      -54.8716       54.8716       1632.39       1687.26    
  11  0.776133     -0.253432      -67.3078       67.3078       1747.59       1814.90    
  12  0.729556     -0.315319      -83.7440       83.7440       1781.61       1865.36    
  13  0.530451     -0.634028      -168.388       168.388       1751.68       1920.07    
  14  0.752564E-01  -2.58685      -687.030       687.030       1736.53       2423.56    
  15  0.918457     -0.850597E-01  -22.5906       22.5906       1673.73       1696.32    
  16  0.162642      -1.81621      -482.358       482.358       1795.55       2277.91    
  17  0.725851     -0.320411      -85.0963       85.0963       1668.46       1753.56    
  18  0.322292      -1.13230      -300.721       300.721       1775.45       2076.17    
  19  0.838064     -0.176661      -46.9186       46.9186       1666.68       1713.60    
  20  0.346062E-01  -3.36372      -893.355       893.355       1637.85       2531.20    
  21  0.442915     -0.814377      -216.287       216.287       1810.05       2026.34    
  22  0.143708      -1.93997      -515.228       515.228       1889.46       2404.69    
  23  0.940845     -0.609769E-01  -16.1946       16.1946       1799.61       1815.80    
  24  0.972503     -0.278816E-01  -7.40495       7.40495       1763.87       1771.27    
  25  0.291831      -1.23158      -327.090       327.090       1717.71       2044.80    
  26  0.211976      -1.55128      -411.998       411.998       1719.19       2131.19    
  27  0.695427     -0.363229      -96.4684       96.4684       1827.18       1923.64    
  28  0.982540E-01  -2.32020      -616.211       616.211       1839.48       2455.69    
  29  0.730742     -0.313695      -83.3127       83.3127       1761.73       1845.04    
  30  0.417794     -0.872766      -231.794       231.794       1828.34       2060.14    
  31  0.868385     -0.141121      -37.4796       37.4796       1862.77       1900.25    
  32  0.300897      -1.20099      -318.964       318.964       1909.06       2228.03    
  33  0.917219     -0.864093E-01  -22.9490       22.9490       1961.16       1984.11    
  34  0.304394      -1.18943      -315.896       315.896       1439.42       1755.32    
  35  0.856500     -0.154901      -41.1396       41.1396       1608.08       1649.22    
  36  0.310652      -1.16908      -310.491       310.491       1838.76       2149.25    
  37  0.846275     -0.166911      -44.3292       44.3292       1684.50       1728.83    
  38  0.206825      -1.57588      -418.531       418.531       1980.44       2398.97    
  39  0.606376     -0.500256      -132.861       132.861       1747.69       1880.55    
  40  0.840015     -0.174336      -46.3010       46.3010       1747.07       1793.37    
  41  0.348835      -1.05315      -279.702       279.702       1735.45       2015.15    
  42  0.857325     -0.153939      -40.8839       40.8839       1780.87       1821.75    
  43  0.308035E-01  -3.48013      -924.271       924.271       1839.42       2763.69    
  44  0.400632     -0.914711      -242.934       242.934       1781.42       2024.35    
  45  0.242237      -1.41784      -376.557       376.557       1764.99       2141.55    
  46  0.407771     -0.897050      -238.243       238.243       1770.80       2009.04    
  47  0.430691     -0.842364      -223.719       223.719       1705.34       1929.06    
  48  0.415503     -0.878266      -233.255       233.255       2001.89       2235.14    
  49  0.593575     -0.521591      -138.527       138.527       1694.94       1833.47    
  50  0.973620     -0.267342E-01  -7.10020       7.10020       1972.79       1979.89    
  51  0.510257     -0.672840      -178.696       178.696       1816.05       1994.74    
  52  0.796475     -0.227560      -60.4365       60.4365       1775.35       1835.79    
  53  0.213576      -1.54376      -410.001       410.001       1758.12       2168.12    
  54  0.865534     -0.144409      -38.3529       38.3529       1698.61       1736.96    
  55  0.920053     -0.833240E-01  -22.1296       22.1296       1750.26       1772.39    
  56  0.534624     -0.626192      -166.308       166.308       1736.08       1902.39    
  57  0.963687     -0.369888E-01  -9.82367       9.82367       1844.08       1853.91    
  58  0.498139     -0.696877      -185.080       185.080       1744.72       1929.80    
  59  0.987058     -0.130264E-01  -3.45962       3.45962       1578.48       1581.94    
  60  0.488276E-01  -3.01946      -801.924       801.924       2067.26       2869.19    
  61  0.597381E-01  -2.81779      -748.362       748.362       1868.49       2616.86    
  62  0.589016     -0.529301      -140.575       140.575       2118.43       2259.00    
  63  0.680503     -0.384923      -102.230       102.230       1519.51       1621.74    
  64  0.793494     -0.231310      -61.4325       61.4325       1809.33       1870.76    
  65  0.269936E-01  -3.61216      -959.336       959.336       1919.37       2878.71    
  66  0.392490     -0.935245      -248.387       248.387       2027.68       2276.06    
  67  0.150218      -1.89567      -503.461       503.461       1984.36       2487.82    
  68  0.959939     -0.408856E-01  -10.8586       10.8586       1935.34       1946.20    
  69  0.559076     -0.581471      -154.430       154.430       1882.40       2036.83    
  70  0.820359     -0.198013      -52.5894       52.5894       1790.45       1843.04    
  71  0.876568     -0.131741      -34.9884       34.9884       1797.48       1832.47    
  72  0.338606      -1.08292      -287.607       287.607       1949.01       2236.62    
  73  0.877240     -0.130975      -34.7850       34.7850       1770.57       1805.35    
  74  0.746045     -0.292970      -77.8084       77.8084       1389.10       1466.91    
loop,thermsimp(1:2)       58   753.986       598.870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       1508.72        129.78          0.72         30.51          0.92          0.05        161.98
Just calling func    0   0        161.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168       1407.76        129.87          0.71         30.33          0.84          0.04        161.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1407.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       58
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       59
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      167     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -294.419       294.419       1389.10       1683.52    
   2  0.939148     -0.627826E-01  -16.6741       16.6741       1561.33       1578.00    
   3  0.130906      -2.03328      -540.009       540.009       1578.48       2118.49    
   4  0.664370     -0.408916      -108.602       108.602       1545.03       1653.63    
   5  0.490908     -0.711498      -188.964       188.964       1519.51       1708.47    
   6  0.711731     -0.340055      -90.3136       90.3136       1580.67       1670.98    
   7  0.676080     -0.391444      -103.962       103.962       1608.08       1712.05    
   8  0.611139     -0.492432      -130.783       130.783       1632.39       1763.17    
   9  0.614246     -0.487359      -129.435       129.435       1673.73       1803.17    
  10  0.988045     -0.120275E-01  -3.19434       3.19434       1666.68       1669.88    
  11  0.232883      -1.45722      -387.016       387.016       1684.50       2071.52    
  12  0.450825     -0.796675      -211.585       211.585       1698.61       1910.19    
  13  0.493319     -0.706599      -187.662       187.662       1668.46       1856.12    
  14  0.191184      -1.65452      -439.416       439.416       1439.42       1878.84    
  15  0.894136     -0.111897      -29.7183       29.7183       1569.79       1599.51    
  16  0.391751     -0.937128      -248.887       248.887       1713.20       1962.09    
  17  0.236278      -1.44275      -383.173       383.173       1763.87       2147.04    
  18  0.496874E-01  -3.00200      -797.288       797.288       1750.26       2547.55    
  19  0.784524     -0.242678      -64.4518       64.4518       1747.07       1811.52    
  20  0.292328      -1.22988      -326.638       326.638       1770.57       2097.21    
  21  0.832247E-01  -2.48621      -660.301       660.301       1747.59       2407.90    
  22  0.423133     -0.860069      -228.422       228.422       1799.61       2028.03    
  23  0.234472      -1.45042      -385.210       385.210       1780.87       2166.08    
  24  0.868463     -0.141031      -37.4556       37.4556       1613.97       1651.43    
  25  0.122969      -2.09582      -556.619       556.619       1797.48       2354.10    
  26  0.811771     -0.208537      -55.3844       55.3844       1694.94       1750.33    
  27  0.786834     -0.239738      -63.6710       63.6710       1775.35       1839.02    
  28  0.163144      -1.81312      -481.538       481.538       1790.45       2271.99    
  29  0.571103     -0.560186      -148.777       148.777       1761.73       1910.50    
  30  0.769982     -0.261388      -69.4207       69.4207       1844.08       1913.51    
  31  0.471769     -0.751265      -199.525       199.525       1264.33       1463.85    
  32  0.584935     -0.536254      -142.421       142.421       1781.61       1924.03    
  33  0.416140     -0.876734      -232.848       232.848       1809.33       2042.18    
  34  0.106525E-01  -4.54196      -1206.28       1206.28       1747.69       2953.97    
  35  0.595424     -0.518482      -137.701       137.701       1862.77       2000.47    
  36  0.302400      -1.19600      -317.641       317.641       1736.08       2053.72    
  37  0.629701     -0.462510      -122.836       122.836       1751.68       1874.51    
  38  0.939026E-01  -2.36550      -628.241       628.241       1827.18       2455.42    
  39  0.911727     -0.924151E-01  -24.5441       24.5441       1705.34       1729.89    
  40  0.289502      -1.23959      -329.218       329.218       1744.72       2073.94    
  41  0.326571      -1.11911      -297.218       297.218       1935.34       2232.56    
  42  0.972366     -0.280231E-01  -7.44251       7.44251       1972.79       1980.23    
  43  0.823413     -0.194297      -51.6024       51.6024       1961.16       2012.77    
  44  0.790717     -0.234815      -62.3634       62.3634       1816.05       1878.41    
  45  0.167922      -1.78426      -473.872       473.872       1770.80       2244.67    
  46  0.804665     -0.217329      -57.7195       57.7195       1735.45       1793.17    
  47  0.154714      -1.86617      -495.629       495.629       1781.42       2277.04    
  48  0.240456      -1.42522      -378.517       378.517       1810.05       2188.57    
  49  0.351787      -1.04473      -277.465       277.465       1882.40       2159.86    
  50  0.666429E-01  -2.70841      -719.313       719.313       1717.71       2437.02    
  51  0.484113     -0.725437      -192.665       192.665       1580.47       1773.13    
  52  0.298509      -1.20896      -321.081       321.081       1828.34       2149.42    
  53  0.982136     -0.180253E-01  -4.78725       4.78725       1775.45       1780.24    
  54  0.799723     -0.223490      -59.3557       59.3557       1719.19       1778.55    
  55  0.559799     -0.580177      -154.087       154.087       1764.99       1919.08    
  56  0.492929     -0.707390      -187.872       187.872       1838.76       2026.64    
  57  0.655290     -0.422678      -112.257       112.257       1407.55       1519.80    
  58  0.426949     -0.851091      -226.037       226.037       1758.12       1984.16    
  59  0.575269     -0.552918      -146.847       146.847       1909.06       2055.91    
  60  0.252283      -1.37721      -365.766       365.766       2001.89       2367.65    
  61  0.628464     -0.464477      -123.358       123.358       1949.01       2072.37    
  62  0.847342E-01  -2.46824      -655.527       655.527       2118.43       2773.95    
  63  0.701567     -0.354439      -94.1338       94.1338       2027.68       2121.81    
  64  0.171664      -1.76222      -468.019       468.019       1795.55       2263.57    
  65  0.395346     -0.927995      -246.462       246.462       1980.44       2226.90    
  66  0.397662     -0.922153      -244.910       244.910       1889.46       2134.37    
  67  0.166798      -1.79097      -475.655       475.655       1736.53       2212.18    
  68  0.100957      -2.29306      -609.004       609.004       1839.48       2448.48    
  69  0.725220     -0.321280      -85.3272       85.3272       1984.36       2069.68    
  70  0.856561     -0.154829      -41.1204       41.1204       1637.85       1678.97    
  71  0.421738     -0.863372      -229.299       229.299       1868.49       2097.79    
  72  0.294072      -1.22393      -325.058       325.058       1839.42       2164.47    
  73  0.138461      -1.97717      -525.107       525.107       2067.26       2592.37    
  74  0.245131      -1.40596      -373.403       373.403       1407.76       1781.17    
loop,thermsimp(1:2)       59   294.419       16.6741    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       1776.78        134.18          0.70         30.45          1.02          0.05        166.40
Just calling func    0   0        166.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170       3537.94        129.74          0.68         30.18          1.08          0.05        161.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1776.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       59
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       60
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      169     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -316.121       316.121       1264.33       1580.45    
   2  0.843344     -0.170380      -45.2504       45.2504       1407.55       1452.80    
   3  0.457815     -0.781289      -207.499       207.499       1561.33       1768.83    
   4  0.933709     -0.685899E-01  -18.2165       18.2165       1569.79       1588.00    
   5  0.887159     -0.119731      -31.7987       31.7987       1613.97       1645.77    
   6  0.786211     -0.240530      -63.8813       63.8813       1545.03       1608.91    
   7  0.794803     -0.229661      -60.9946       60.9946       1666.68       1727.68    
   8  0.573435E-01  -2.85870      -759.228       759.228       1580.67       2339.90    
   9  0.647106     -0.435245      -115.595       115.595       1637.85       1753.44    
  10  0.110118      -2.20620      -585.936       585.936       1389.10       1975.04    
  11  0.339548      -1.08014      -286.869       286.869       1519.51       1806.37    
  12  0.635246     -0.453742      -120.507       120.507       1608.08       1728.59    
  13  0.488392     -0.716638      -190.328       190.328       1705.34       1895.67    
  14  0.602571     -0.506549      -134.532       134.532       1694.94       1829.47    
  15  0.710041     -0.342433      -90.9452       90.9452       1632.39       1723.34    
  16  0.585763     -0.534840      -142.046       142.046       1580.47       1722.51    
  17  0.288010      -1.24476      -330.590       330.590       1719.19       2049.78    
  18  0.455238     -0.786934      -208.998       208.998       1775.45       1984.45    
  19  0.723984     -0.322986      -85.7803       85.7803       1407.76       1493.54    
  20  0.554067     -0.590470      -156.820       156.820       1735.45       1892.27    
  21  0.646516     -0.436157      -115.837       115.837       1673.73       1789.57    
  22  0.271985      -1.30201      -345.794       345.794       1747.07       2092.86    
  23  0.901636E-02  -4.70871      -1250.57       1250.57       1775.35       3025.92    
  24  0.383616     -0.958114      -254.461       254.461       1668.46       1922.92    
  25  0.443516     -0.813022      -215.927       215.927       1751.68       1967.60    
  26  0.223023      -1.50048      -398.506       398.506       1816.05       2214.55    
  27  0.123255      -2.09350      -556.002       556.002       1439.42       1995.42    
  28  0.817485     -0.201523      -53.5215       53.5215       1698.61       1752.13    
  29  0.333893      -1.09693      -291.329       291.329       1761.73       2053.06    
  30  0.867877     -0.141706      -37.6350       37.6350       1844.08       1881.72    
  31  0.365747      -1.00581      -267.129       267.129       1764.99       2032.12    
  32  0.429445     -0.845262      -224.489       224.489       1781.61       2006.10    
  33  0.856620     -0.154761      -41.1023       41.1023       1713.20       1754.30    
  34  0.729532     -0.315352      -83.7529       83.7529       1972.79       2056.54    
  35  0.315845      -1.15251      -306.088       306.088       1758.12       2064.21    
  36  0.547596     -0.602217      -159.940       159.940       1862.77       2022.71    
  37  0.752130     -0.284846      -75.6510       75.6510       1961.16       2036.81    
  38  0.806451     -0.215112      -57.1306       57.1306       1838.76       1895.89    
  39  0.618613     -0.480275      -127.554       127.554       1799.61       1927.16    
  40  0.630350     -0.461480      -122.562       122.562       1809.33       1931.89    
  41  0.251741      -1.37935      -366.336       366.336       1736.08       2102.42    
  42  0.846504     -0.166640      -44.2571       44.2571       1909.06       1953.32    
  43  0.830791     -0.185377      -49.2333       49.2333       1984.36       2033.59    
  44  0.566838     -0.567681      -150.768       150.768       1684.50       1835.27    
  45  0.499450E-01  -2.99683      -795.915       795.915       1949.01       2744.93    
  46  0.976301     -0.239838E-01  -6.36976       6.36976       1744.72       1751.09    
  47  0.401049     -0.913672      -242.658       242.658       1770.57       2013.23    
  48  0.709931E-01  -2.64517      -702.519       702.519       1868.49       2571.01    
  49  0.920370E-02  -4.68815      -1245.10       1245.10       1578.48       2823.59    
  50  0.379723     -0.968314      -257.170       257.170       2027.68       2284.85    
  51  0.207569      -1.57229      -417.578       417.578       1889.46       2307.04    
  52  0.745673     -0.293468      -77.9407       77.9407       1763.87       1841.81    
  53  0.915877     -0.878737E-01  -23.3379       23.3379       1828.34       1851.68    
  54  0.836769     -0.178207      -47.3292       47.3292       1882.40       1929.73    
  55  0.769684E-01  -2.56436      -681.056       681.056       1839.42       2520.47    
  56  0.797754     -0.225955      -60.0104       60.0104       1780.87       1840.88    
  57  0.555189     -0.588446      -156.283       156.283       1810.05       1966.33    
  58  0.134224      -2.00825      -533.361       533.361       1736.53       2269.89    
  59  0.796234     -0.227862      -60.5168       60.5168       1980.44       2040.96    
  60  0.628721     -0.464068      -123.250       123.250       1935.34       2058.59    
  61  0.460391     -0.775679      -206.009       206.009       1770.80       1976.80    
  62  0.137302      -1.98558      -527.340       527.340       1795.55       2322.89    
  63  0.504249     -0.684686      -181.842       181.842       1790.45       1972.29    
  64  0.548486     -0.600594      -159.509       159.509       1781.42       1940.92    
  65  0.479259     -0.735514      -195.342       195.342       1797.48       1992.82    
  66  0.763784     -0.269471      -71.5674       71.5674       2001.89       2073.45    
  67  0.896024     -0.109788      -29.1581       29.1581       1747.59       1776.75    
  68  0.873307     -0.135468      -35.9783       35.9783       1717.71       1753.69    
  69  0.469885     -0.755268      -200.588       200.588       1839.48       2040.06    
  70  0.705401     -0.348988      -92.6861       92.6861       1827.18       1919.86    
  71  0.997081     -0.292289E-02 -0.776277      0.776277       1750.26       1751.03    
  72  0.204925      -1.58511      -420.982       420.982       2067.26       2488.25    
  73  0.676158     -0.391329      -103.931       103.931       2118.43       2222.36    
  74  0.273114      -1.29787      -344.694       344.694       1776.78       2121.47    
loop,thermsimp(1:2)       60   316.121       45.2504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       1581.32        130.17          0.69         29.37          0.70          0.05        160.98
Just calling func    0   0        160.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1581.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       60
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       61
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      170     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -49.5882       49.5882       1407.55       1457.13    
   2  0.735850     -0.306729      -81.4627       81.4627       1407.76       1489.23    
   3  0.828786     -0.187793      -49.8751       49.8751       1264.33       1314.20    
   4  0.592078     -0.524118      -139.198       139.198       1569.79       1708.99    
   5  0.691797E-01  -2.67105      -709.391       709.391       1545.03       2254.42    
   6  0.772335     -0.258337      -68.6105       68.6105       1613.97       1682.59    
   7  0.504563     -0.684063      -181.677       181.677       1580.47       1762.14    
   8  0.700615     -0.355797      -94.4944       94.4944       1632.39       1726.89    
   9  0.764596     -0.268408      -71.2851       71.2851       1666.68       1737.97    
  10  0.459614     -0.777368      -206.458       206.458       1608.08       1814.54    
  11  0.931193     -0.712882E-01  -18.9331       18.9331       1750.26       1769.19    
  12  0.502482E-01  -2.99078      -794.307       794.307       1744.72       2539.03    
  13  0.498197     -0.696760      -185.049       185.049       1698.61       1883.66    
  14  0.551534E-01  -2.89764      -769.570       769.570       1637.85       2407.42    
  15  0.172209      -1.75905      -467.177       467.177       1717.71       2184.88    
  16  0.238868E-01  -3.73443      -991.810       991.810       1713.20       2705.01    
  17  0.699366     -0.357581      -94.9682       94.9682       1561.33       1656.30    
  18  0.764093     -0.269066      -71.4601       71.4601       1747.59       1819.05    
  19  0.465633     -0.764357      -203.002       203.002       1673.73       1876.74    
  20  0.209906      -1.56110      -414.605       414.605       1519.51       1934.11    
  21  0.216891      -1.52836      -405.910       405.910       1694.94       2100.85    
  22  0.795854E-01  -2.53092      -672.176       672.176       1684.50       2356.68    
  23  0.701683     -0.354273      -94.0898       94.0898       1780.87       1874.96    
  24  0.574425     -0.554385      -147.237       147.237       1763.87       1911.10    
  25  0.674968     -0.393090      -104.399       104.399       1828.34       1932.74    
  26  0.684189     -0.379521      -100.795       100.795       1844.08       1944.88    
  27  0.541862     -0.612745      -162.736       162.736       1735.45       1898.19    
  28  0.668027     -0.403426      -107.144       107.144       1705.34       1812.49    
  29  0.353251      -1.04058      -276.362       276.362       1838.76       2115.13    
  30  0.778708     -0.250119      -66.4280       66.4280       1827.18       1893.60    
  31  0.829283     -0.187194      -49.7160       49.7160       1668.46       1718.18    
  32  0.679297     -0.386697      -102.701       102.701       1799.61       1902.31    
  33  0.536301     -0.623060      -165.476       165.476       1882.40       2047.87    
  34  0.247738      -1.39538      -370.593       370.593       1809.33       2179.92    
  35  0.271399      -1.30416      -346.367       346.367       1781.42       2127.78    
  36  0.284124      -1.25835      -334.198       334.198       1909.06       2243.26    
  37  0.664442     -0.408808      -108.573       108.573       1810.05       1918.62    
  38  0.874508     -0.134094      -35.6133       35.6133       1751.68       1787.29    
  39  0.916444     -0.872538E-01  -23.1733       23.1733       1790.45       1813.62    
  40  0.295165      -1.22022      -324.073       324.073       1389.10       1713.18    
  41  0.242592      -1.41637      -376.168       376.168       1770.80       2146.96    
  42  0.396124     -0.926028      -245.940       245.940       1775.45       2021.39    
  43  0.509193E-01  -2.97751      -790.784       790.784       1797.48       2588.26    
  44  0.778911     -0.249858      -66.3586       66.3586       1439.42       1505.78    
  45  0.351009      -1.04694      -278.053       278.053       1781.61       2059.66    
  46  0.480934     -0.732025      -194.415       194.415       1770.57       1964.98    
  47  0.908579     -0.958731E-01  -25.4625       25.4625       1862.77       1888.23    
  48  0.898885     -0.106600      -28.3113       28.3113       1764.99       1793.30    
  49  0.561121     -0.577819      -153.460       153.460       1984.36       2137.82    
  50  0.851109     -0.161215      -42.8164       42.8164       1961.16       2003.98    
  51  0.975854     -0.244425E-01  -6.49157       6.49157       1839.48       1845.97    
  52  0.187829      -1.67223      -444.119       444.119       1980.44       2424.56    
  53  0.962131     -0.386049E-01  -10.2529       10.2529       1719.19       1729.45    
  54  0.823812     -0.193813      -51.4739       51.4739       1761.73       1813.20    
  55  0.765207     -0.267609      -71.0731       71.0731       1972.79       2043.86    
  56  0.207984      -1.57030      -417.047       417.047       1935.34       2352.39    
  57  0.675792     -0.391869      -104.075       104.075       1758.12       1862.20    
  58  0.641275     -0.444296      -117.999       117.999       2001.89       2119.88    
  59  0.621346E-01  -2.77845      -737.916       737.916       1747.07       2484.98    
  60  0.911977E-01  -2.39473      -636.004       636.004       1736.08       2372.09    
  61  0.697078     -0.360859      -95.8387       95.8387       1776.78       1872.62    
  62  0.760976     -0.273154      -72.5456       72.5456       1816.05       1888.59    
  63  0.812117     -0.208111      -55.2712       55.2712       2118.43       2173.70    
  64  0.654868     -0.423322      -112.428       112.428       1736.53       1848.95    
  65  0.263345E-02  -5.93946      -1577.43       1577.43       2027.68       3605.11    
  66  0.180895      -1.70984      -454.107       454.107       1889.46       2343.57    
  67  0.830100     -0.186209      -49.4543       49.4543       1795.55       1845.01    
  68  0.396842E-01  -3.22680      -856.991       856.991       1580.67       2437.66    
  69  0.862274     -0.148182      -39.3549       39.3549       2067.26       2106.62    
  70  0.362095      -1.01585      -269.794       269.794       1839.42       2109.21    
  71  0.156544      -1.85442      -492.507       492.507       1868.49       2361.00    
  72  0.103594      -2.26727      -602.155       602.155       1949.01       2551.17    
  73  0.147771      -1.91209      -507.823       507.823       1578.48       2086.31    
  74  0.820171     -0.198243      -52.6503       52.6503       1581.32       1633.97    
loop,thermsimp(1:2)       61   49.5882       81.4627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172       1999.18        129.55          0.65         30.05          1.69          0.05        161.98
Just calling func    0   0        161.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1999.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       61
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       62
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      171     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -22.8979       22.8979       1264.33       1287.23    
   2  0.899579E-01  -2.40841      -639.639       639.639       1407.55       2047.19    
   3  0.997625     -0.237830E-02 -0.631642      0.631642       1407.76       1408.40    
   4  0.224083      -1.49574      -397.247       397.247       1439.42       1836.67    
   5  0.120769      -2.11388      -561.415       561.415       1581.32       2142.73    
   6  0.302676E-01  -3.49768      -928.931       928.931       1561.33       2490.26    
   7  0.315161      -1.15467      -306.664       306.664       1613.97       1920.64    
   8  0.155895      -1.85857      -493.610       493.610       1569.79       2063.40    
   9  0.467639     -0.760060      -201.861       201.861       1389.10       1590.96    
  10  0.277823      -1.28077      -340.153       340.153       1668.46       2008.61    
  11  0.712282     -0.339281      -90.1080       90.1080       1632.39       1722.50    
  12  0.929560     -0.730437E-01  -19.3993       19.3993       1719.19       1738.59    
  13  0.499024     -0.695101      -184.609       184.609       1666.68       1851.29    
  14  0.940347     -0.615066E-01  -16.3352       16.3352       1580.47       1596.80    
  15  0.714006     -0.336864      -89.4661       89.4661       1750.26       1839.72    
  16  0.162603      -1.81644      -482.421       482.421       1751.68       2234.10    
  17  0.663729     -0.409881      -108.858       108.858       1764.99       1873.85    
  18  0.314148      -1.15789      -307.519       307.519       1705.34       2012.86    
  19  0.497386     -0.698388      -185.482       185.482       1761.73       1947.21    
  20  0.368387     -0.998622      -265.219       265.219       1790.45       2055.67    
  21  0.326342      -1.11981      -297.405       297.405       1608.08       1905.49    
  22  0.442952     -0.814294      -216.264       216.264       1747.59       1963.86    
  23  0.929694     -0.729000E-01  -19.3612       19.3612       1795.55       1814.91    
  24  0.945450E-01  -2.35868      -626.430       626.430       1839.48       2465.91    
  25  0.407158     -0.898555      -238.643       238.643       1736.53       1975.17    
  26  0.706679     -0.347179      -92.2057       92.2057       1758.12       1850.33    
  27  0.657848     -0.418781      -111.222       111.222       1776.78       1888.00    
  28  0.968040     -0.324817E-01  -8.62667       8.62667       1780.87       1789.49    
  29  0.330387      -1.10749      -294.133       294.133       1673.73       1967.87    
  30  0.756161     -0.279501      -74.2314       74.2314       1698.61       1772.84    
  31  0.307772      -1.17840      -312.965       312.965       1862.77       2175.73    
  32  0.759008E-01  -2.57833      -684.766       684.766       1816.05       2500.81    
  33  0.615618E-01  -2.78771      -740.376       740.376       1827.18       2567.55    
  34  0.545984     -0.605166      -160.723       160.723       1735.45       1896.17    
  35  0.339865      -1.07921      -286.621       286.621       1799.61       2086.23    
  36  0.816477     -0.202757      -53.8493       53.8493       1763.87       1817.72    
  37  0.932889     -0.694691E-01  -18.4500       18.4500       1810.05       1828.50    
  38  0.667042     -0.404902      -107.536       107.536       1828.34       1935.88    
  39  0.583049     -0.539484      -143.279       143.279       1519.51       1662.78    
  40  0.210192      -1.55973      -414.243       414.243       1844.08       2258.33    
  41  0.158846      -1.83982      -488.630       488.630       1770.57       2259.20    
  42  0.360401      -1.02054      -271.040       271.040       1961.16       2232.20    
  43  0.508154     -0.676971      -179.794       179.794       1775.45       1955.25    
  44  0.873303     -0.135473      -35.9796       35.9796       1972.79       2008.77    
  45  0.650524     -0.429977      -114.196       114.196       1882.40       1996.59    
  46  0.805601     -0.216166      -57.4105       57.4105       1781.61       1839.02    
  47  0.312590E-03  -8.07062      -2143.44       2143.44       1578.48       3721.92    
  48  0.892261     -0.113997      -30.2759       30.2759       1694.94       1725.22    
  49  0.504672     -0.683846      -181.619       181.619       2067.26       2248.88    
  50  0.269834      -1.30995      -347.903       347.903       1839.42       2187.32    
  51  0.752889     -0.283838      -75.3831       75.3831       1838.76       1914.15    
  52  0.952800     -0.483498E-01  -12.8410       12.8410       2001.89       2014.73    
  53  0.147189E-01  -4.21863      -1120.40       1120.40       1781.42       2901.82    
  54  0.213392      -1.54462      -410.229       410.229       1984.36       2394.58    
  55  0.278061      -1.27992      -339.927       339.927       1770.80       2110.72    
  56  0.668800     -0.402271      -106.837       106.837       2118.43       2225.26    
  57  0.674989     -0.393058      -104.391       104.391       1809.33       1913.72    
  58  0.186370      -1.68002      -446.189       446.189       1717.71       2163.90    
  59  0.133078      -2.01682      -535.637       535.637       1909.06       2444.70    
  60  0.519821     -0.654270      -173.765       173.765       1545.03       1718.79    
  61  0.136847      -1.98889      -528.220       528.220       1889.46       2417.68    
  62  0.604880     -0.502725      -133.516       133.516       1935.34       2068.86    
  63  0.301519      -1.19892      -318.416       318.416       1684.50       2002.92    
  64  0.531506     -0.632040      -167.861       167.861       1868.49       2036.35    
  65  0.554963     -0.588854      -156.391       156.391       1736.08       1892.47    
  66  0.264726      -1.32906      -352.979       352.979       1637.85       1990.82    
  67  0.520437     -0.653087      -173.450       173.450       1980.44       2153.89    
  68  0.457095     -0.782865      -207.917       207.917       1580.67       1788.59    
  69  0.349515      -1.05121      -279.186       279.186       1747.07       2026.25    
  70  0.624446E-01  -2.77348      -736.594       736.594       1744.72       2481.32    
  71  0.659983     -0.415541      -110.361       110.361       1949.01       2059.37    
  72  0.171300      -1.76434      -468.582       468.582       1797.48       2266.06    
  73  0.458973E-01  -3.08135      -818.361       818.361       1713.20       2531.56    
  74  0.669804     -0.400770      -106.439       106.439       1999.18       2105.62    
loop,thermsimp(1:2)       62   22.8979       639.639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1664.62        129.99          0.68         30.36          0.62          0.05        161.71
Just calling func    0   0        161.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174       1619.56        129.75          0.73         30.56          0.38          0.05        161.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1619.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       62
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       63
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      173     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -128.163       128.163       1264.33       1392.49    
   2  0.828850     -0.187716      -49.8545       49.8545       1407.76       1457.62    
   3  0.138898      -1.97402      -524.270       524.270       1389.10       1913.37    
   4  0.174947      -1.74327      -462.988       462.988       1580.47       2043.45    
   5  0.452367E-01  -3.09585      -822.211       822.211       1519.51       2341.72    
   6  0.982229     -0.179305E-01  -4.76207       4.76207       1545.03       1549.79    
   7  0.855728     -0.155803      -41.3790       41.3790       1632.39       1673.77    
   8  0.350750      -1.04768      -278.249       278.249       1694.94       1973.19    
   9  0.880054     -0.127772      -33.9344       33.9344       1719.19       1753.13    
  10  0.106511      -2.23950      -594.780       594.780       1698.61       2293.39    
  11  0.336060      -1.09047      -289.612       289.612       1580.67       1870.28    
  12  0.904819     -0.100020      -26.5639       26.5639       1780.87       1807.43    
  13  0.765597     -0.267099      -70.9375       70.9375       1795.55       1866.49    
  14  0.551789     -0.594589      -157.914       157.914       1763.87       1921.78    
  15  0.832435     -0.183400      -48.7083       48.7083       1810.05       1858.76    
  16  0.353494      -1.03989      -276.179       276.179       1439.42       1715.60    
  17  0.510104     -0.673140      -178.776       178.776       1781.61       1960.39    
  18  0.523162     -0.647863      -172.063       172.063       1750.26       1922.32    
  19  0.953043     -0.480957E-01  -12.7735       12.7735       1758.12       1770.89    
  20  0.267001E-01  -3.62309      -962.239       962.239       1666.68       2628.92    
  21  0.280924      -1.26967      -337.206       337.206       1764.99       2102.20    
  22  0.956868     -0.440901E-01  -11.7097       11.7097       1776.78       1788.49    
  23  0.779725     -0.248814      -66.0813       66.0813       1736.08       1802.16    
  24  0.901061     -0.104183      -27.6694       27.6694       1735.45       1763.12    
  25  0.533391     -0.628501      -166.921       166.921       1608.08       1775.00    
  26  0.642536     -0.442333      -117.477       117.477       1809.33       1926.81    
  27  0.520565E-01  -2.95543      -784.918       784.918       1838.76       2623.68    
  28  0.330080      -1.10842      -294.380       294.380       1613.97       1908.36    
  29  0.280801      -1.27011      -337.322       337.322       1828.34       2165.66    
  30  0.144013      -1.93785      -514.665       514.665       1761.73       2276.39    
  31  0.201537      -1.60178      -425.409       425.409       1775.45       2200.86    
  32  0.920188     -0.831777E-01  -22.0908       22.0908       1747.59       1769.68    
  33  0.747222     -0.291393      -77.3897       77.3897       1673.73       1751.12    
  34  0.697959     -0.359595      -95.5032       95.5032       1736.53       1832.03    
  35  0.492949     -0.707349      -187.861       187.861       1637.85       1825.71    
  36  0.378001     -0.972857      -258.377       258.377       1882.40       2140.78    
  37  0.936484     -0.656225E-01  -17.4284       17.4284       1684.50       1701.93    
  38  0.458232     -0.780381      -207.258       207.258       1668.46       1875.72    
  39  0.286796      -1.24898      -331.712       331.712       1972.79       2304.50    
  40  0.524458     -0.645389      -171.406       171.406       1705.34       1876.75    
  41  0.126679      -2.06610      -548.725       548.725       2001.89       2550.61    
  42  0.645270     -0.438086      -116.349       116.349       1747.07       1863.42    
  43  0.996049     -0.395919E-02  -1.05150       1.05150       1868.49       1869.54    
  44  0.470695     -0.753545      -200.130       200.130       1407.55       1607.68    
  45  0.783048     -0.244561      -64.9518       64.9518       1790.45       1855.40    
  46  0.682425     -0.382103      -101.481       101.481       1949.01       2050.49    
  47  0.623779     -0.471960      -125.346       125.346       1569.79       1695.13    
  48  0.138146      -1.97945      -525.712       525.712       1935.34       2461.05    
  49  0.317697      -1.14666      -304.535       304.535       1799.61       2104.14    
  50  0.215616      -1.53426      -407.476       407.476       1999.18       2406.66    
  51  0.392653     -0.934829      -248.277       248.277       1770.80       2019.07    
  52  0.311957      -1.16489      -309.378       309.378       1581.32       1890.70    
  53  0.665567     -0.407116      -108.124       108.124       1980.44       2088.56    
  54  0.124333      -2.08479      -553.690       553.690       1717.71       2271.40    
  55  0.175373      -1.74084      -462.341       462.341       1862.77       2325.11    
  56  0.712195E-01  -2.64199      -701.673       701.673       1839.42       2541.09    
  57  0.626551E-01  -2.77011      -735.701       735.701       2118.43       2854.13    
  58  0.869671     -0.139640      -37.0864       37.0864       1961.16       1998.25    
  59  0.112950      -2.18081      -579.190       579.190       1751.68       2330.87    
  60  0.837299     -0.177574      -47.1609       47.1609       2067.26       2114.42    
  61  0.380546     -0.966149      -256.595       256.595       1844.08       2100.68    
  62  0.225371      -1.49001      -395.724       395.724       1770.57       2166.29    
  63  0.556139     -0.586737      -155.829       155.829       1797.48       1953.31    
  64  0.909618     -0.947309E-01  -25.1591       25.1591       1984.36       2009.51    
  65  0.432012     -0.839301      -222.906       222.906       1889.46       2112.37    
  66  0.554192     -0.590244      -156.760       156.760       1909.06       2065.82    
  67  0.264884      -1.32846      -352.820       352.820       1839.48       2192.30    
  68  0.667330     -0.404471      -107.422       107.422       1744.72       1852.15    
  69  0.445504     -0.808549      -214.739       214.739       1561.33       1776.07    
  70  0.194275      -1.63848      -435.157       435.157       1816.05       2251.20    
  71  0.886150     -0.120869      -32.1009       32.1009       1713.20       1745.30    
  72  0.487114     -0.719257      -191.024       191.024       1827.18       2018.20    
  73  0.195816E-01  -3.93317      -1044.59       1044.59       1781.42       2826.01    
  74  0.988505     -0.115613E-01  -3.07051       3.07051       1619.56       1622.63    
loop,thermsimp(1:2)       63   128.163       49.8545    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175       1734.78        130.00          0.66         30.08          1.00          0.04        161.79
Just calling func    0   0        161.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1734.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       63
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       64
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      174     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -53.8260       53.8260       1264.33       1318.15    
   2  0.209930      -1.56098      -414.574       414.574       1407.76       1822.34    
   3  0.710991     -0.341096      -90.5900       90.5900       1545.03       1635.62    
   4  0.967365     -0.331789E-01  -8.81182       8.81182       1407.55       1416.36    
   5  0.650635E-01  -2.73239      -725.683       725.683       1619.56       2345.24    
   6  0.578340     -0.547593      -145.433       145.433       1632.39       1777.82    
   7  0.928890E-01  -2.37635      -631.124       631.124       1569.79       2200.91    
   8  0.486974     -0.719546      -191.101       191.101       1684.50       1875.61    
   9  0.560625     -0.578703      -153.695       153.695       1439.42       1593.12    
  10  0.552834     -0.592698      -157.412       157.412       1713.20       1870.61    
  11  0.744529E-01  -2.59759      -689.881       689.881       1673.73       2363.61    
  12  0.937600     -0.644318E-01  -17.1121       17.1121       1719.19       1736.31    
  13  0.154459      -1.86783      -496.068       496.068       1735.45       2231.52    
  14  0.186893E-02  -6.28239      -1668.51       1668.51       1747.59       3416.10    
  15  0.250797      -1.38311      -367.334       367.334       1758.12       2125.46    
  16  0.924847E-01  -2.38071      -632.282       632.282       1608.08       2240.37    
  17  0.476680     -0.740911      -196.775       196.775       1561.33       1758.10    
  18  0.266527      -1.32228      -351.178       351.178       1776.78       2127.96    
  19  0.369755     -0.994916      -264.235       264.235       1736.08       2000.32    
  20  0.595561     -0.518252      -137.640       137.640       1780.87       1918.51    
  21  0.636070     -0.452447      -120.163       120.163       1637.85       1758.01    
  22  0.447294     -0.804540      -213.674       213.674       1736.53       1950.20    
  23  0.964945     -0.356839E-01  -9.47711       9.47711       1744.72       1754.20    
  24  0.752421     -0.284460      -75.5483       75.5483       1790.45       1866.00    
  25  0.705556     -0.348769      -92.6279       92.6279       1810.05       1902.68    
  26  0.943467     -0.581939E-01  -15.4554       15.4554       1747.07       1762.52    
  27  0.272564      -1.29988      -345.229       345.229       1795.55       2140.78    
  28  0.215815      -1.53333      -407.230       407.230       1868.49       2275.72    
  29  0.756955     -0.278452      -73.9527       73.9527       1580.67       1654.62    
  30  0.538381     -0.619189      -164.447       164.447       1668.46       1832.91    
  31  0.182967      -1.69845      -451.083       451.083       1705.34       2156.42    
  32  0.644758     -0.438881      -116.560       116.560       1581.32       1697.88    
  33  0.939477     -0.624320E-01  -16.5810       16.5810       1613.97       1630.56    
  34  0.663186     -0.410699      -109.076       109.076       1389.10       1498.18    
  35  0.795014     -0.229396      -60.9242       60.9242       1763.87       1824.79    
  36  0.630792     -0.460779      -122.376       122.376       1750.26       1872.63    
  37  0.151039      -1.89022      -502.014       502.014       1809.33       2311.35    
  38  0.668306     -0.403009      -107.033       107.033       1797.48       1904.51    
  39  0.683820     -0.380061      -100.939       100.939       1781.61       1882.55    
  40  0.122229      -2.10186      -558.222       558.222       1694.94       2253.16    
  41  0.664453     -0.408791      -108.569       108.569       1961.16       2069.73    
  42  0.548687     -0.600228      -159.412       159.412       1984.36       2143.77    
  43  0.931535     -0.709210E-01  -18.8356       18.8356       1827.18       1846.01    
  44  0.139742      -1.96796      -522.661       522.661       1770.80       2293.46    
  45  0.429142     -0.845967      -224.676       224.676       1580.47       1805.14    
  46  0.531147     -0.632717      -168.040       168.040       1949.01       2117.05    
  47  0.575558     -0.552416      -146.714       146.714       1909.06       2055.78    
  48  0.336537      -1.08905      -289.235       289.235       1980.44       2269.67    
  49  0.324486      -1.12551      -298.920       298.920       1844.08       2143.00    
  50  0.652768     -0.426534      -113.281       113.281       1764.99       1878.27    
  51  0.537860     -0.620158      -164.705       164.705       1799.61       1964.31    
  52  0.415288     -0.878782      -233.392       233.392       1889.46       2122.85    
  53  0.771827     -0.258995      -68.7854       68.7854       2067.26       2136.05    
  54  0.537995     -0.619906      -164.638       164.638       1882.40       2047.04    
  55  0.438537     -0.824310      -218.925       218.925       1828.34       2047.27    
  56  0.872114     -0.136835      -36.3413       36.3413       1770.57       1806.91    
  57  0.974519E-01  -2.32840      -618.388       618.388       1839.48       2457.86    
  58  0.245035      -1.40635      -373.507       373.507       1775.45       2148.96    
  59  0.285418      -1.25380      -332.991       332.991       1816.05       2149.04    
  60  0.598735     -0.512936      -136.228       136.228       1717.71       1853.94    
  61  0.440039     -0.820892      -218.017       218.017       1761.73       1979.74    
  62  0.115587      -2.15774      -573.063       573.063       1698.61       2271.67    
  63  0.479716     -0.734560      -195.088       195.088       1972.79       2167.88    
  64  0.423297     -0.859681      -228.319       228.319       1862.77       2091.09    
  65  0.385689E-01  -3.25531      -864.562       864.562       1751.68       2616.24    
  66  0.504564     -0.684061      -181.676       181.676       1519.51       1701.18    
  67  0.406483     -0.900213      -239.083       239.083       1999.18       2238.27    
  68  0.362573E-01  -3.31712      -880.977       880.977       1935.34       2816.32    
  69  0.666448E-03  -7.31355      -1942.37       1942.37       1839.42       3781.79    
  70  0.428061     -0.848489      -225.346       225.346       2001.89       2227.23    
  71  0.324089      -1.12674      -299.245       299.245       1838.76       2138.01    
  72  0.491354     -0.710591      -188.723       188.723       1666.68       1855.40    
  73  0.610139E-02  -5.09924      -1354.28       1354.28       1781.42       3135.70    
  74  0.974548     -0.257817E-01  -6.84725       6.84725       1734.78       1741.63    
loop,thermsimp(1:2)       64   53.8260       414.574    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       1489.31        129.79          0.66         30.21          0.97          0.04        161.68
Just calling func    0   0        161.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177       1145.34        129.52          0.65         30.42          0.79          0.05        161.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1145.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       64
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       65
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      176     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -265.843       265.843       1264.33       1530.17    
   2  0.298218      -1.20993      -321.340       321.340       1407.55       1728.89    
   3  0.374092     -0.983254      -261.138       261.138       1389.10       1650.24    
   4  0.417366     -0.873791      -232.066       232.066       1439.42       1671.49    
   5  0.299382      -1.20604      -320.305       320.305       1613.97       1934.28    
   6  0.373029     -0.986099      -261.893       261.893       1545.03       1806.92    
   7  0.628224     -0.464858      -123.460       123.460       1580.67       1704.13    
   8  0.111397      -2.19465      -582.868       582.868       1581.32       2164.19    
   9  0.983555     -0.165818E-01  -4.40388       4.40388       1519.51       1523.91    
  10  0.394578     -0.929938      -246.978       246.978       1719.19       1966.17    
  11  0.410639     -0.890042      -236.382       236.382       1734.78       1971.16    
  12  0.700680     -0.355705      -94.4699       94.4699       1744.72       1839.19    
  13  0.223946      -1.49635      -397.409       397.409       1637.85       2035.25    
  14  0.651113E-01  -2.73166      -725.488       725.488       1561.33       2286.82    
  15  0.704010     -0.350963      -93.2106       93.2106       1747.07       1840.28    
  16  0.172411      -1.75787      -466.865       466.865       1632.39       2099.26    
  17  0.567412     -0.566670      -150.499       150.499       1580.47       1730.97    
  18  0.186334      -1.68021      -446.240       446.240       1770.57       2216.81    
  19  0.677524     -0.389310      -103.395       103.395       1407.76       1511.16    
  20  0.362270      -1.01537      -269.666       269.666       1763.87       2033.53    
  21  0.603880     -0.504381      -133.956       133.956       1668.46       1802.42    
  22  0.782208     -0.245635      -65.2370       65.2370       1827.18       1892.41    
  23  0.129808      -2.04170      -542.246       542.246       1717.71       2259.95    
  24  0.284816      -1.25591      -333.552       333.552       1666.68       2000.23    
  25  0.246930      -1.39865      -371.461       371.461       1790.45       2161.91    
  26  0.256917      -1.35900      -360.931       360.931       1713.20       2074.13    
  27  0.240545      -1.42485      -378.419       378.419       1750.26       2128.68    
  28  0.218018      -1.52318      -404.534       404.534       1684.50       2089.04    
  29  0.235583E-01  -3.74828      -995.487       995.487       1764.99       2760.48    
  30  0.114660      -2.16578      -575.200       575.200       1781.61       2356.81    
  31  0.119129      -2.12755      -565.046       565.046       1810.05       2375.10    
  32  0.471707     -0.751398      -199.560       199.560       1797.48       1997.04    
  33  0.607413     -0.498546      -132.406       132.406       1780.87       1913.27    
  34  0.568731     -0.564347      -149.882       149.882       1736.53       1886.41    
  35  0.587492     -0.531893      -141.263       141.263       1799.61       1940.87    
  36  0.411259     -0.888533      -235.981       235.981       1761.73       1997.71    
  37  0.836192     -0.178897      -47.5123       47.5123       1736.08       1783.59    
  38  0.152977      -1.87747      -498.627       498.627       1882.40       2381.03    
  39  0.941831     -0.599291E-01  -15.9163       15.9163       1828.34       1844.26    
  40  0.936595     -0.655045E-01  -17.3970       17.3970       1909.06       1926.46    
  41  0.856621     -0.154759      -41.1018       41.1018       1961.16       2002.26    
  42  0.484786     -0.724047      -192.296       192.296       1862.77       2055.07    
  43  0.188261      -1.66993      -443.508       443.508       1949.01       2392.52    
  44  0.957606     -0.433189E-01  -11.5049       11.5049       1889.46       1900.97    
  45  0.234891      -1.44863      -384.736       384.736       1758.12       2142.86    
  46  0.758920     -0.275858      -73.2639       73.2639       1776.78       1850.04    
  47  0.135340      -1.99997      -531.162       531.162       2067.26       2598.43    
  48  0.779121E-01  -2.55217      -677.820       677.820       1838.76       2516.58    
  49  0.573767     -0.555531      -147.541       147.541       1795.55       1943.09    
  50  0.982512     -0.176424E-01  -4.68556       4.68556       1844.08       1848.77    
  51  0.109579      -2.21111      -587.238       587.238       1984.36       2571.59    
  52  0.714543     -0.336113      -89.2665       89.2665       1775.45       1864.72    
  53  0.573216     -0.556492      -147.796       147.796       1816.05       1963.84    
  54  0.389116     -0.943877      -250.680       250.680       1705.34       1956.02    
  55  0.149817      -1.89834      -504.172       504.172       1972.79       2476.96    
  56  0.623269     -0.472778      -125.563       125.563       1569.79       1695.35    
  57  0.682320E-02  -4.98743      -1324.59       1324.59       2001.89       3326.47    
  58  0.641698     -0.443637      -117.823       117.823       1735.45       1853.27    
  59  0.233363      -1.45516      -386.469       386.469       1999.18       2385.65    
  60  0.881483     -0.126150      -33.5036       33.5036       1608.08       1641.59    
  61  0.264921      -1.32832      -352.783       352.783       1694.94       2047.72    
  62  0.941652     -0.601200E-01  -15.9670       15.9670       1980.44       1996.41    
  63  0.179971      -1.71496      -455.467       455.467       1698.61       2154.07    
  64  0.381207E-01  -3.26700      -867.666       867.666       1868.49       2736.16    
  65  0.998657     -0.134405E-02 -0.356960      0.356960       1770.80       1771.15    
  66  0.553871     -0.590823      -156.914       156.914       1809.33       1966.25    
  67  0.599651     -0.511408      -135.822       135.822       1619.56       1755.38    
  68  0.834589     -0.180815      -48.0219       48.0219       1673.73       1721.76    
  69  0.622560     -0.473915      -125.865       125.865       1839.48       1965.34    
  70  0.437672E-03  -7.73404      -2054.05       2054.05       1751.68       3805.72    
  71  0.881230     -0.126437      -33.5798       33.5798       1935.34       1968.92    
  72  0.793726     -0.231017      -61.3548       61.3548       1781.42       1842.77    
  73  0.499689     -0.693770      -184.255       184.255       1747.59       1931.85    
  74  0.260074      -1.34679      -357.687       357.687       1145.34       1503.02    
loop,thermsimp(1:2)       65   265.843       321.340    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178       5000.99        128.49          0.62         27.71          5.17          0.04        162.04
Just calling func    0   0        162.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179       1800.90        130.03          0.66         30.02          1.26          0.04        162.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1800.90
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       65
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       66
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      178     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -362.439       362.439       1145.34       1507.78    
   2  0.513427E-01  -2.96923      -788.585       788.585       1407.76       2196.35    
   3  0.288453      -1.24322      -330.182       330.182       1519.51       1849.69    
   4  0.107044      -2.23452      -593.454       593.454       1264.33       1857.78    
   5  0.756779     -0.278684      -74.0143       74.0143       1608.08       1682.10    
   6  0.333762      -1.09733      -291.434       291.434       1389.10       1680.54    
   7  0.270335      -1.30809      -347.411       347.411       1439.42       1786.83    
   8  0.666278E-01  -2.70863      -719.373       719.373       1569.79       2289.16    
   9  0.517510     -0.658727      -174.948       174.948       1580.67       1755.62    
  10  0.719680     -0.328949      -87.3639       87.3639       1673.73       1761.10    
  11  0.401542     -0.912442      -242.331       242.331       1407.55       1649.88    
  12  0.408125     -0.896181      -238.012       238.012       1580.47       1818.48    
  13  0.481086     -0.731710      -194.331       194.331       1619.56       1813.89    
  14  0.166952E-01  -4.09263      -1086.94       1086.94       1770.80       2857.74    
  15  0.913266     -0.907286E-01  -24.0962       24.0962       1736.08       1760.18    
  16  0.972084     -0.283134E-01  -7.51963       7.51963       1668.46       1675.98    
  17  0.889421     -0.117184      -31.1224       31.1224       1545.03       1576.15    
  18  0.171754      -1.76169      -467.880       467.880       1744.72       2212.60    
  19  0.925876     -0.770155E-01  -20.4542       20.4542       1747.07       1767.52    
  20  0.992897     -0.712866E-02  -1.89327       1.89327       1781.42       1783.31    
  21  0.118575E-01  -4.43479      -1177.82       1177.82       1828.34       3006.16    
  22  0.492413     -0.708438      -188.151       188.151       1844.08       2032.24    
  23  0.952433     -0.487360E-01  -12.9436       12.9436       1776.78       1789.72    
  24  0.591826     -0.524543      -139.311       139.311       1735.45       1874.76    
  25  0.762199     -0.271548      -72.1191       72.1191       1775.45       1847.57    
  26  0.613492     -0.488588      -129.762       129.762       1736.53       1866.29    
  27  0.134863      -2.00350      -532.100       532.100       1827.18       2359.28    
  28  0.633670     -0.456227      -121.167       121.167       1889.46       2010.63    
  29  0.829625     -0.186782      -49.6065       49.6065       1780.87       1830.47    
  30  0.148219      -1.90906      -507.019       507.019       1909.06       2416.08    
  31  0.198093      -1.61902      -429.988       429.988       1747.59       2177.58    
  32  0.321318      -1.13532      -301.525       301.525       1613.97       1915.50    
  33  0.475408     -0.743582      -197.484       197.484       1799.61       1997.09    
  34  0.196520      -1.62699      -432.105       432.105       1795.55       2227.66    
  35  0.637413     -0.450337      -119.603       119.603       1705.34       1824.94    
  36  0.596751     -0.516255      -137.110       137.110       1816.05       1953.16    
  37  0.351361      -1.04594      -277.787       277.787       1839.48       2117.26    
  38  0.111764      -2.19136      -581.994       581.994       1719.19       2301.19    
  39  0.213579      -1.54375      -409.997       409.997       1809.33       2219.33    
  40  0.799647     -0.223585      -59.3810       59.3810       1935.34       1994.72    
  41  0.670682     -0.399460      -106.091       106.091       1734.78       1840.87    
  42  0.104235      -2.26111      -600.517       600.517       1980.44       2580.96    
  43  0.607160E-01  -2.80155      -744.050       744.050       1797.48       2541.53    
  44  0.462312     -0.771516      -204.903       204.903       1761.73       1966.63    
  45  0.269658      -1.31060      -348.076       348.076       1666.68       2014.76    
  46  0.678606     -0.387714      -102.971       102.971       1961.16       2064.13    
  47  0.669051     -0.401895      -106.737       106.737       1763.87       1870.60    
  48  0.551912     -0.594367      -157.855       157.855       1637.85       1795.70    
  49  0.116070E-01  -4.45614      -1183.49       1183.49       1694.94       2878.43    
  50  0.911337     -0.928428E-01  -24.6577       24.6577       1862.77       1887.43    
  51  0.302404      -1.19599      -317.637       317.637       1713.20       2030.84    
  52  0.527926     -0.638800      -169.656       169.656       1684.50       1854.16    
  53  0.204835      -1.58555      -421.099       421.099       1632.39       2053.49    
  54  0.761388     -0.272612      -72.4016       72.4016       1750.26       1822.66    
  55  0.189928      -1.66111      -441.167       441.167       1758.12       2199.29    
  56  0.423830     -0.858422      -227.984       227.984       1698.61       1926.59    
  57  0.895148     -0.110767      -29.4180       29.4180       1790.45       1819.87    
  58  0.109823      -2.20889      -586.648       586.648       1581.32       2167.97    
  59  0.960076     -0.407431E-01  -10.8208       10.8208       1770.57       1781.39    
  60  0.694180     -0.365024      -96.9450       96.9450       1717.71       1814.65    
  61  0.302866      -1.19446      -317.232       317.232       1561.33       1878.56    
  62  0.213503      -1.54410      -410.091       410.091       1781.61       2191.70    
  63  0.949162     -0.521754E-01  -13.8570       13.8570       1810.05       1823.91    
  64  0.912779     -0.912617E-01  -24.2378       24.2378       1882.40       1906.64    
  65  0.393978     -0.931461      -247.382       247.382       1999.18       2246.57    
  66  0.957683     -0.432380E-01  -11.4834       11.4834       1949.01       1960.50    
  67  0.785605     -0.241301      -64.0860       64.0860       1972.79       2036.88    
  68  0.670559     -0.399644      -106.140       106.140       1838.76       1944.90    
  69  0.793392     -0.231438      -61.4664       61.4664       1984.36       2045.82    
  70  0.594443     -0.520131      -138.139       138.139       2067.26       2205.40    
  71  0.298128      -1.21023      -321.420       321.420       1868.49       2189.91    
  72  0.233680      -1.45380      -386.108       386.108       1764.99       2151.10    
  73  0.410779     -0.889700      -236.291       236.291       2001.89       2238.18    
  74  0.811201     -0.209240      -55.5710       55.5710       1800.90       1856.47    
loop,thermsimp(1:2)       66   362.439       788.585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180       1412.16        129.85          0.66         30.02          1.25          0.04        161.83
Just calling func    0   0        161.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181       1431.02        129.68          0.64         29.83          1.59          0.04        161.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    1431.0        2.247    -0.9039      3.470     -100.0     0.7044    
                     -0.8474     0.9303     -100.0      2.658     -4.208    
                     -0.3412     0.5018      2.009      0.000     0.7604    
                      -1.018     -20.00      0.000      0.000    -0.7829    

                      -2.621      5978.     0.1146E+05 -629.7     -1451.    
                      -3.914     -5.842     -4.862     -15.33     -5.168    
                      -12.59     -2.915     -2637.      0.000     -1415.    

                       768.2      4328.      1077.      1333.      3505.    
                      -1180.    -0.1025    -0.2494      0.000    -0.2561    
                     -0.1863    -0.1853    -0.3087    -0.3258    -0.1693    

                     -0.7137     -1.760      1.382     0.7330E-01 0.9144E-02
                      0.8541E-01-0.2330E-01-0.8609E-01-0.5998E-01-0.1719E-03
                     -0.1112     0.2462E-01-0.3018     -2.160      1.382    

                      -1.638     -1.471     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.907      8.851      0.000     0.1975E-03
                      0.2706     0.2706      9.161      8.872    -0.1011E+05

                      0.6507E-03 0.2706     0.2706      9.751      9.051    
                      -7511.     0.2963E-03-0.7218     0.2706      9.351    
                       9.197     -4703.     0.1102E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1412.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       66
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       67
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      180     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -321.612       321.612       1145.34       1466.95    
   2  0.840396     -0.173882      -46.1804       46.1804       1545.03       1591.21    
   3  0.165782      -1.79708      -477.279       477.279       1407.55       1884.83    
   4  0.516202E-01  -2.96384      -787.153       787.153       1668.46       2455.61    
   5  0.163201      -1.81278      -481.446       481.446       1389.10       1870.55    
   6  0.201529      -1.60182      -425.420       425.420       1608.08       2033.50    
   7  0.791805     -0.233441      -61.9984       61.9984       1580.67       1642.67    
   8  0.306466      -1.18265      -314.094       314.094       1736.08       2050.17    
   9  0.625963     -0.468465      -124.417       124.417       1673.73       1798.15    
  10  0.255827      -1.36325      -362.060       362.060       1747.07       2109.13    
  11  0.275269      -1.29001      -342.607       342.607       1770.57       2113.18    
  12  0.546374     -0.604451      -160.533       160.533       1781.42       1941.95    
  13  0.738275E-01  -2.60602      -692.122       692.122       1439.42       2131.54    
  14  0.459460     -0.777704      -206.547       206.547       1776.78       1983.33    
  15  0.245891      -1.40287      -372.581       372.581       1637.85       2010.43    
  16  0.818144E-01  -2.50330      -664.840       664.840       1619.56       2284.40    
  17  0.791963     -0.233241      -61.9454       61.9454       1717.71       1779.65    
  18  0.652560     -0.426852      -113.366       113.366       1580.47       1693.83    
  19  0.743237     -0.296740      -78.8097       78.8097       1790.45       1869.26    
  20  0.146095      -1.92350      -510.853       510.853       1750.26       2261.11    
  21  0.747148     -0.291492      -77.4161       77.4161       1810.05       1887.47    
  22  0.935024E-01  -2.36977      -629.376       629.376       1705.34       2334.72    
  23  0.924202     -0.788243E-01  -20.9346       20.9346       1780.87       1801.80    
  24  0.193934      -1.64024      -435.623       435.623       1734.78       2170.40    
  25  0.112499      -2.18481      -580.253       580.253       1775.45       2355.71    
  26  0.609079     -0.495807      -131.679       131.679       1519.51       1651.18    
  27  0.387822     -0.947210      -251.565       251.565       1684.50       1936.07    
  28  0.151976      -1.88403      -500.372       500.372       1800.90       2301.27    
  29  0.820125     -0.198299      -52.6652       52.6652       1264.33       1316.99    
  30  0.100865      -2.29397      -609.245       609.245       1736.53       2345.77    
  31  0.246930      -1.39865      -371.461       371.461       1763.87       2135.33    
  32  0.101973      -2.28305      -606.343       606.343       1735.45       2341.79    
  33  0.389401     -0.943145      -250.486       250.486       1561.33       1811.81    
  34  0.573635     -0.555762      -147.602       147.602       1862.77       2010.37    
  35  0.730896E-01  -2.61607      -694.789       694.789       1882.40       2577.19    
  36  0.260104      -1.34667      -357.656       357.656       1613.97       1971.63    
  37  0.562102     -0.576073      -152.996       152.996       1698.61       1851.60    
  38  0.159056      -1.83850      -488.279       488.279       1838.76       2327.04    
  39  0.779134E-02  -4.85474      -1289.35       1289.35       1816.05       3105.39    
  40  0.693208     -0.366425      -97.3171       97.3171       1949.01       2046.33    
  41  0.600279     -0.510361      -135.544       135.544       1761.73       1897.27    
  42  0.419387     -0.868962      -230.784       230.784       1935.34       2166.13    
  43  0.952036     -0.491524E-01  -13.0542       13.0542       1799.61       1812.66    
  44  0.613955     -0.487834      -129.561       129.561       1889.46       2019.02    
  45  0.842752     -0.171082      -45.4370       45.4370       1666.68       1712.12    
  46  0.733219     -0.310311      -82.4141       82.4141       1713.20       1795.61    
  47  0.776088     -0.253489      -67.3231       67.3231       1844.08       1911.41    
  48  0.965215     -0.354047E-01  -9.40295       9.40295       1972.79       1982.19    
  49  0.487812     -0.717826      -190.644       190.644       1984.36       2175.00    
  50  0.864492     -0.145613      -38.6726       38.6726       1632.39       1671.06    
  51  0.334607      -1.09480      -290.762       290.762       1961.16       2251.93    
  52  0.267438      -1.31887      -350.272       350.272       1839.48       2189.75    
  53  0.333561      -1.09793      -291.594       291.594       1764.99       2056.58    
  54  0.593184     -0.522250      -138.702       138.702       1581.32       1720.02    
  55  0.832475     -0.183352      -48.6957       48.6957       1747.59       1796.29    
  56  0.642050     -0.443089      -117.678       117.678       1868.49       1986.17    
  57  0.799223     -0.224116      -59.5218       59.5218       1781.61       1841.13    
  58  0.184219      -1.69163      -449.273       449.273       1407.76       1857.04    
  59  0.478229     -0.737666      -195.913       195.913       1758.12       1954.03    
  60  0.604888     -0.502712      -133.513       133.513       2067.26       2200.78    
  61  0.575395     -0.552698      -146.788       146.788       1744.72       1891.51    
  62  0.325892E-01  -3.42377      -909.304       909.304       1809.33       2718.64    
  63  0.759877     -0.274599      -72.9295       72.9295       1795.55       1868.48    
  64  0.214378      -1.54002      -409.006       409.006       2001.89       2410.89    
  65  0.668091     -0.403331      -107.119       107.119       1999.18       2106.30    
  66  0.601122     -0.508958      -135.172       135.172       1569.79       1704.96    
  67  0.378138     -0.972496      -258.281       258.281       1719.19       1977.47    
  68  0.849119     -0.163556      -43.4381       43.4381       1827.18       1870.61    
  69  0.426509     -0.852121      -226.311       226.311       1909.06       2135.37    
  70  0.558114E-01  -2.88578      -766.420       766.420       1797.48       2563.90    
  71  0.344448      -1.06581      -283.064       283.064       1980.44       2263.50    
  72  0.354132      -1.03809      -275.700       275.700       1770.80       2046.50    
  73  0.387730     -0.947445      -251.628       251.628       1694.94       1946.57    
  74  0.140493      -1.96260      -521.237       521.237       1412.16       1933.40    
loop,thermsimp(1:2)       67   321.612       46.1804    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       1447.40        129.73          0.65         29.93          1.40          0.05        161.76
Just calling func    0   0        161.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183       1356.13        129.43          0.67         30.28          1.87          0.04        162.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1356.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       67
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       68
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      182     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -1238.29       1238.29       1264.33       2502.62    
   2  0.714357     -0.336373      -89.3357       89.3357       1145.34       1234.67    
   3  0.997096     -0.290808E-02 -0.772345      0.772345       1545.03       1545.80    
   4  0.905437     -0.993373E-01  -26.3825       26.3825       1580.67       1607.05    
   5  0.307060      -1.18071      -313.580       313.580       1519.51       1833.09    
   6  0.179061      -1.72003      -456.814       456.814       1632.39       2089.20    
   7  0.384312     -0.956301      -253.979       253.979       1580.47       1834.45    
   8  0.901101     -0.104138      -27.6576       27.6576       1569.79       1597.45    
   9  0.606170     -0.500594      -132.950       132.950       1666.68       1799.63    
  10  0.515234     -0.663133      -176.118       176.118       1581.32       1757.44    
  11  0.639447     -0.447152      -118.757       118.757       1717.71       1836.46    
  12  0.820429     -0.197928      -52.5667       52.5667       1713.20       1765.77    
  13  0.521739     -0.650587      -172.786       172.786       1747.59       1920.38    
  14  0.767979     -0.263993      -70.1126       70.1126       1673.73       1743.85    
  15  0.530366     -0.634187      -168.431       168.431       1780.87       1949.30    
  16  0.732471     -0.311332      -82.6852       82.6852       1561.33       1644.01    
  17  0.440461     -0.819933      -217.762       217.762       1799.61       2017.37    
  18  0.595715     -0.517993      -137.571       137.571       1781.61       1919.18    
  19  0.407958     -0.896592      -238.122       238.122       1698.61       1936.73    
  20  0.544683     -0.607550      -161.356       161.356       1407.76       1569.12    
  21  0.611386E-01  -2.79461      -742.208       742.208       1795.55       2537.76    
  22  0.135041      -2.00218      -531.748       531.748       1790.45       2322.20    
  23  0.547242     -0.602864      -160.112       160.112       1389.10       1549.22    
  24  0.214436      -1.53975      -408.934       408.934       1827.18       2236.11    
  25  0.340220      -1.07816      -286.344       286.344       1407.55       1693.89    
  26  0.270394      -1.30787      -347.352       347.352       1810.05       2157.40    
  27  0.605229     -0.502149      -133.363       133.363       1744.72       1878.09    
  28  0.630206     -0.461709      -122.623       122.623       1761.73       1884.35    
  29  0.942476     -0.592449E-01  -15.7346       15.7346       1844.08       1859.82    
  30  0.293125      -1.22716      -325.915       325.915       1412.16       1738.08    
  31  0.526210     -0.642056      -170.521       170.521       1684.50       1855.03    
  32  0.972201     -0.281927E-01  -7.48756       7.48756       1781.42       1788.90    
  33  0.570000     -0.562119      -149.290       149.290       1694.94       1844.23    
  34  0.752945     -0.283763      -75.3634       75.3634       1758.12       1833.48    
  35  0.333005      -1.09960      -292.037       292.037       1613.97       1906.01    
  36  0.430444     -0.842939      -223.872       223.872       1719.19       1943.07    
  37  0.106505      -2.23957      -594.796       594.796       1972.79       2567.59    
  38  0.327953      -1.11488      -296.097       296.097       1776.78       2072.88    
  39  0.586631     -0.533359      -141.652       141.652       1868.49       2010.15    
  40  0.563274     -0.573989      -152.443       152.443       1862.77       2015.21    
  41  0.802100     -0.220522      -58.5673       58.5673       1637.85       1696.41    
  42  0.594871     -0.519411      -137.948       137.948       1889.46       2027.41    
  43  0.816066     -0.203261      -53.9830       53.9830       1608.08       1662.07    
  44  0.170795E-01  -4.06987      -1080.90       1080.90       1949.01       3029.91    
  45  0.554958     -0.588864      -156.393       156.393       1770.80       1927.19    
  46  0.674023     -0.394492      -104.771       104.771       1736.08       1840.85    
  47  0.371758     -0.989512      -262.800       262.800       1764.99       2027.79    
  48  0.309440      -1.17299      -311.529       311.529       1999.18       2310.71    
  49  0.182337      -1.70190      -451.999       451.999       1747.07       2199.07    
  50  0.443504     -0.813049      -215.934       215.934       1770.57       1986.50    
  51  0.407824     -0.896918      -238.208       238.208       1439.42       1677.63    
  52  0.140254      -1.96430      -521.689       521.689       1763.87       2285.56    
  53  0.801043     -0.221840      -58.9175       58.9175       1909.06       1967.98    
  54  0.922923     -0.802099E-01  -21.3026       21.3026       1935.34       1956.64    
  55  0.982391     -0.177663E-01  -4.71846       4.71846       1734.78       1739.50    
  56  0.830509     -0.185717      -49.3237       49.3237       1984.36       2033.68    
  57  0.459056     -0.778583      -206.780       206.780       1839.48       2046.26    
  58  0.918078     -0.854734E-01  -22.7005       22.7005       2067.26       2089.96    
  59  0.858811E-01  -2.45479      -651.957       651.957       1961.16       2613.12    
  60  0.642813E-01  -2.74449      -728.895       728.895       1750.26       2479.15    
  61  0.328642      -1.11279      -295.540       295.540       1980.44       2275.98    
  62  0.238578      -1.43306      -380.600       380.600       1619.56       2000.16    
  63  0.183249      -1.69691      -450.674       450.674       1800.90       2251.58    
  64  0.575307     -0.552852      -146.829       146.829       1838.76       1985.59    
  65  0.509614     -0.674103      -179.032       179.032       1705.34       1884.37    
  66  0.528199     -0.638283      -169.518       169.518       1735.45       1904.97    
  67  0.114575      -2.16652      -575.397       575.397       1736.53       2311.92    
  68  0.227493      -1.48064      -393.235       393.235       1775.45       2168.69    
  69  0.451305     -0.795613      -211.303       211.303       2001.89       2213.19    
  70  0.873604     -0.135128      -35.8879       35.8879       1668.46       1704.35    
  71  0.457086     -0.782884      -207.922       207.922       1797.48       2005.40    
  72  0.587276     -0.532261      -141.361       141.361       1882.40       2023.76    
  73  0.193860E-01  -3.94320      -1047.26       1047.26       1809.33       2856.59    
  74  0.543354     -0.609995      -162.006       162.006       1356.13       1518.14    
loop,thermsimp(1:2)       68   1238.29       89.3357    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184       2604.19        129.96          0.69         30.01          1.20          0.05        161.91
Just calling func    0   0        161.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2604.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       68
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       69
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      183     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -173.139       173.139       1145.34       1318.48    
   2  0.554375     -0.589913      -156.672       156.672       1356.13       1512.81    
   3  0.404373     -0.905418      -240.466       240.466       1545.03       1785.50    
   4  0.632877     -0.457478      -121.500       121.500       1389.10       1510.60    
   5  0.395261     -0.928209      -246.519       246.519       1407.76       1654.28    
   6  0.715068     -0.335378      -89.0715       89.0715       1569.79       1658.86    
   7  0.918313     -0.852174E-01  -22.6325       22.6325       1580.67       1603.30    
   8  0.529514E-01  -2.93838      -780.391       780.391       1561.33       2341.72    
   9  0.284219      -1.25801      -334.109       334.109       1608.08       1942.19    
  10  0.809402     -0.211460      -56.1607       56.1607       1439.42       1495.58    
  11  0.604758     -0.502928      -133.570       133.570       1407.55       1541.12    
  12  0.624772     -0.470369      -124.923       124.923       1637.85       1762.77    
  13  0.622683     -0.473718      -125.813       125.813       1668.46       1794.27    
  14  0.491656     -0.709976      -188.559       188.559       1412.16       1600.72    
  15  0.823484     -0.194211      -51.5795       51.5795       1734.78       1786.36    
  16  0.185629E-01  -3.98659      -1058.78       1058.78       1673.73       2732.51    
  17  0.911253     -0.929346E-01  -24.6821       24.6821       1581.32       1606.00    
  18  0.825116     -0.192231      -51.0538       51.0538       1713.20       1764.25    
  19  0.902913     -0.102129      -27.1241       27.1241       1781.42       1808.54    
  20  0.869925     -0.139348      -37.0089       37.0089       1666.68       1703.69    
  21  0.135445      -1.99919      -530.955       530.955       1519.51       2050.46    
  22  0.516840     -0.660022      -175.292       175.292       1758.12       1933.41    
  23  0.127583      -2.05899      -546.838       546.838       1580.47       2127.30    
  24  0.237062E-01  -3.74202      -993.825       993.825       1717.71       2711.53    
  25  0.456233     -0.784753      -208.419       208.419       1736.08       1944.50    
  26  0.547397     -0.602581      -160.037       160.037       1694.94       1854.98    
  27  0.231746E-02  -6.06728      -1611.38       1611.38       1684.50       3295.89    
  28  0.467213     -0.760969      -202.102       202.102       1844.08       2046.19    
  29  0.397333     -0.922981      -245.130       245.130       1744.72       1989.85    
  30  0.291343      -1.23325      -327.534       327.534       1761.73       2089.26    
  31  0.964262     -0.363922E-01  -9.66522       9.66522       1705.34       1715.01    
  32  0.260485      -1.34521      -357.268       357.268       1735.45       2092.72    
  33  0.868574     -0.140902      -37.4216       37.4216       1613.97       1651.40    
  34  0.832573     -0.183235      -48.6645       48.6645       1781.61       1830.28    
  35  0.240383      -1.42552      -378.598       378.598       1747.59       2126.19    
  36  0.878342     -0.129719      -34.4514       34.4514       1770.80       1805.25    
  37  0.168707      -1.77959      -472.634       472.634       1698.61       2171.24    
  38  0.348015      -1.05551      -280.328       280.328       1719.19       1999.52    
  39  0.846224     -0.166971      -44.3452       44.3452       1780.87       1825.21    
  40  0.842580     -0.171286      -45.4911       45.4911       1935.34       1980.83    
  41  0.230401      -1.46794      -389.862       389.862       1909.06       2298.93    
  42  0.441962     -0.816531      -216.859       216.859       1838.76       2055.62    
  43  0.772036     -0.258724      -68.7133       68.7133       1770.57       1839.28    
  44  0.970063     -0.303946E-01  -8.07235       8.07235       1619.56       1627.63    
  45  0.610535     -0.493419      -131.045       131.045       1797.48       1928.52    
  46  0.548201     -0.601114      -159.647       159.647       1868.49       2028.14    
  47  0.322533      -1.13155      -300.523       300.523       1862.77       2163.29    
  48  0.194318E-01  -3.94084      -1046.63       1046.63       1799.61       2846.24    
  49  0.219930      -1.51445      -402.214       402.214       1882.40       2284.61    
  50  0.538995E-01  -2.92063      -775.678       775.678       1889.46       2665.14    
  51  0.189941      -1.66104      -441.148       441.148       1764.99       2206.14    
  52  0.339787      -1.07944      -286.683       286.683       1984.36       2271.04    
  53  0.783417     -0.244091      -64.8269       64.8269       1839.48       1904.30    
  54  0.347888      -1.05587      -280.424       280.424       1776.78       2057.21    
  55  0.511342     -0.670716      -178.132       178.132       1632.39       1810.52    
  56  0.656791     -0.420389      -111.649       111.649       2067.26       2178.91    
  57  0.433072E-01  -3.13944      -833.788       833.788       1810.05       2643.84    
  58  0.940019     -0.618557E-01  -16.4280       16.4280       1775.45       1791.88    
  59  0.560131     -0.579584      -153.929       153.929       1747.07       1901.00    
  60  0.335604      -1.09182      -289.973       289.973       2001.89       2291.86    
  61  0.677192     -0.389801      -103.525       103.525       1827.18       1930.70    
  62  0.166447      -1.79308      -476.215       476.215       1800.90       2277.12    
  63  0.966787     -0.337766E-01  -8.97057       8.97057       1980.44       1989.41    
  64  0.501486     -0.690179      -183.302       183.302       1763.87       1947.17    
  65  0.339741      -1.07957      -286.718       286.718       1999.18       2285.90    
  66  0.920721     -0.825986E-01  -21.9370       21.9370       1736.53       1758.46    
  67  0.215901      -1.53293      -407.125       407.125       1790.45       2197.58    
  68  0.259645      -1.34844      -358.126       358.126       1750.26       2108.38    
  69  0.927059     -0.757381E-01  -20.1149       20.1149       1264.33       1284.44    
  70  0.766870E-02  -4.87061      -1293.56       1293.56       1795.55       3089.11    
  71  0.398597     -0.919805      -244.287       244.287       1972.79       2217.08    
  72  0.870407     -0.138794      -36.8616       36.8616       1961.16       1998.02    
  73  0.571318     -0.559809      -148.677       148.677       1809.33       1958.01    
  74  0.443420     -0.813239      -215.984       215.984       2604.19       2820.18    
loop,thermsimp(1:2)       69   173.139       156.672    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185     135362.75        129.98          0.70         29.94          0.74          0.05        161.40
Just calling func    0   0        161.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186       1915.64        130.02          0.68         30.11          0.84          0.05        161.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1915.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       69
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       70
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      185     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -376.623       376.623       1264.33       1640.95    
   2  0.384023     -0.957054      -254.179       254.179       1145.34       1399.52    
   3  0.672379     -0.396933      -105.420       105.420       1439.42       1544.84    
   4  0.204591      -1.58674      -421.415       421.415       1389.10       1810.52    
   5  0.145151      -1.92998      -512.574       512.574       1356.13       1868.71    
   6  0.235757      -1.44495      -383.758       383.758       1407.55       1791.30    
   7  0.882595     -0.124889      -33.1687       33.1687       1412.16       1445.33    
   8  0.215562      -1.53451      -407.542       407.542       1580.67       1988.21    
   9  0.248905      -1.39068      -369.345       369.345       1581.32       1950.66    
  10  0.695481     -0.363152      -96.4477       96.4477       1619.56       1716.01    
  11  0.515786     -0.662063      -175.834       175.834       1613.97       1789.81    
  12  0.956817     -0.441428E-01  -11.7237       11.7237       1407.76       1419.49    
  13  0.256477      -1.36072      -361.386       361.386       1569.79       1931.17    
  14  0.870409     -0.138792      -36.8611       36.8611       1666.68       1703.54    
  15  0.296335      -1.21627      -323.022       323.022       1705.34       2028.36    
  16  0.563087     -0.574322      -152.531       152.531       1736.53       1889.06    
  17  0.860973     -0.149692      -39.7560       39.7560       1637.85       1677.60    
  18  0.336353      -1.08959      -289.380       289.380       1713.20       2002.58    
  19  0.432238     -0.838780      -222.768       222.768       1545.03       1767.80    
  20  0.411587     -0.887734      -235.769       235.769       1734.78       1970.55    
  21  0.685679     -0.377346      -100.217       100.217       1775.45       1875.67    
  22  0.178038E-01  -4.02835      -1069.87       1069.87       1668.46       2738.33    
  23  0.330516      -1.10710      -294.030       294.030       1770.80       2064.83    
  24  0.987115     -0.129685E-01  -3.44423       3.44423       1781.42       1784.86    
  25  0.702947     -0.352474      -93.6119       93.6119       1632.39       1726.00    
  26  0.159040      -1.83860      -488.304       488.304       1780.87       2269.17    
  27  0.329714      -1.10953      -294.675       294.675       1781.61       2076.29    
  28  0.542452     -0.611656      -162.447       162.447       1770.57       1933.02    
  29  0.484074     -0.725518      -192.687       192.687       1694.94       1887.63    
  30  0.574330     -0.554551      -147.281       147.281       1747.07       1894.35    
  31  0.987944     -0.121288E-01  -3.22124       3.22124       1839.48       1842.70    
  32  0.565195E-01  -2.87317      -763.072       763.072       1797.48       2560.55    
  33  0.662626     -0.411545      -109.300       109.300       1827.18       1936.48    
  34  0.462195     -0.771769      -204.970       204.970       1758.12       1963.09    
  35  0.413957     -0.881994      -234.245       234.245       1608.08       1842.33    
  36  0.627825     -0.465493      -123.628       123.628       1736.08       1859.71    
  37  0.373783E-01  -3.28667      -872.890       872.890       1763.87       2636.76    
  38  0.318481      -1.14419      -303.881       303.881       1809.33       2113.21    
  39  0.193037      -1.64487      -436.854       436.854       1935.34       2372.20    
  40  0.246573      -1.40010      -371.846       371.846       1980.44       2352.28    
  41  0.913643     -0.903152E-01  -23.9864       23.9864       1744.72       1768.71    
  42  0.593287     -0.522077      -138.656       138.656       1961.16       2099.82    
  43  0.323913      -1.12728      -299.389       299.389       1719.19       2018.58    
  44  0.270579E-01  -3.60978      -958.703       958.703       1868.49       2827.20    
  45  0.684823     -0.378595      -100.549       100.549       1844.08       1944.63    
  46  0.279340      -1.27532      -338.707       338.707       1519.51       1858.21    
  47  0.285511      -1.25348      -332.905       332.905       1838.76       2171.67    
  48  0.361874      -1.01646      -269.956       269.956       1776.78       2046.74    
  49  0.779291     -0.249370      -66.2291       66.2291       1761.73       1827.96    
  50  0.590933     -0.526053      -139.712       139.712       1735.45       1875.16    
  51  0.493821E-01  -3.00817      -798.925       798.925       1750.26       2549.18    
  52  0.736348     -0.306053      -81.2831       81.2831       1747.59       1828.88    
  53  0.300670      -1.20174      -319.165       319.165       1580.47       1899.63    
  54  0.329072      -1.11148      -295.192       295.192       1862.77       2157.96    
  55  0.238483      -1.43346      -380.705       380.705       1698.61       2079.31    
  56  0.296796      -1.21471      -322.609       322.609       2067.26       2389.87    
  57  0.878745     -0.129261      -34.3298       34.3298       1790.45       1824.78    
  58  0.493874     -0.705475      -187.364       187.364       1764.99       1952.35    
  59  0.112522      -2.18461      -580.200       580.200       1972.79       2552.99    
  60  0.642649     -0.442156      -117.430       117.430       1984.36       2101.79    
  61  0.688378     -0.373417      -99.1742       99.1742       1800.90       1900.08    
  62  0.879214     -0.128727      -34.1880       34.1880       1882.40       1916.59    
  63  0.621151E-01  -2.77877      -737.999       737.999       1999.18       2737.18    
  64  0.270748      -1.30657      -347.005       347.005       2001.89       2348.89    
  65  0.871636     -0.137384      -36.4871       36.4871       1909.06       1945.55    
  66  0.188105      -1.67075      -443.727       443.727       1561.33       2005.06    
  67  0.394507     -0.930118      -247.026       247.026       1810.05       2057.08    
  68  0.532895     -0.629431      -167.168       167.168       1889.46       2056.63    
  69  0.925318     -0.776179E-01  -20.6142       20.6142       1717.71       1738.32    
  70  0.306237      -1.18340      -314.292       314.292       1673.73       1988.03    
  71  0.214861E-01  -3.84035      -1019.94       1019.94       2604.19       3624.13    
  72  0.995041     -0.497146E-02  -1.32035       1.32035       1799.61       1800.93    
  73  0.391846     -0.936888      -248.824       248.824       1795.55       2044.38    
  74  0.409622     -0.892520      -237.040       237.040       1915.64       2152.68    
loop,thermsimp(1:2)       70   376.623       254.179    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       1969.67        129.98          0.68         30.03          1.50          0.05        162.23
Just calling func    0   0        162.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1969.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       70
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       71
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      186     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -55.8643       55.8643       1145.34       1201.20    
   2  0.601567     -0.508218      -134.975       134.975       1407.76       1542.74    
   3  0.190401      -1.65862      -440.506       440.506       1412.16       1852.67    
   4  0.827263     -0.189632      -50.3635       50.3635       1439.42       1489.78    
   5  0.581677     -0.541840      -143.905       143.905       1264.33       1408.23    
   6  0.680336     -0.385169      -102.295       102.295       1637.85       1740.14    
   7  0.641383     -0.444128      -117.954       117.954       1666.68       1784.63    
   8  0.593931     -0.520992      -138.368       138.368       1619.56       1757.93    
   9  0.326400      -1.11963      -297.358       297.358       1632.39       1929.75    
  10  0.964323     -0.363286E-01  -9.64834       9.64834       1717.71       1727.36    
  11  0.481751     -0.730328      -193.964       193.964       1545.03       1738.99    
  12  0.230624E-01  -3.76955      -1001.14       1001.14       1744.72       2745.86    
  13  0.214859      -1.53777      -408.410       408.410       1781.42       2189.83    
  14  0.325804      -1.12146      -297.843       297.843       1613.97       1911.82    
  15  0.668745     -0.402353      -106.859       106.859       1407.55       1514.41    
  16  0.803263     -0.219073      -58.1825       58.1825       1799.61       1857.79    
  17  0.465531     -0.764577      -203.060       203.060       1389.10       1592.16    
  18  0.589796     -0.527978      -140.223       140.223       1790.45       1930.67    
  19  0.783335     -0.244195      -64.8547       64.8547       1761.73       1826.58    
  20  0.937099     -0.649659E-01  -17.2540       17.2540       1747.59       1764.85    
  21  0.504081     -0.685019      -181.931       181.931       1608.08       1790.01    
  22  0.368431E-01  -3.30109      -876.720       876.720       1839.48       2716.20    
  23  0.462712     -0.770651      -204.674       204.674       1519.51       1724.18    
  24  0.172447      -1.75767      -466.810       466.810       1736.08       2202.89    
  25  0.361979      -1.01617      -269.880       269.880       1356.13       1626.01    
  26  0.616189     -0.484202      -128.597       128.597       1735.45       1864.05    
  27  0.495582     -0.702023      -186.447       186.447       1775.45       1961.90    
  28  0.492859     -0.707532      -187.910       187.910       1694.94       1882.85    
  29  0.189027      -1.66586      -442.429       442.429       1736.53       2178.96    
  30  0.336237      -1.08994      -289.472       289.472       1747.07       2036.54    
  31  0.997382     -0.262184E-02 -0.696321      0.696321       1580.47       1581.16    
  32  0.629287     -0.463168      -123.011       123.011       1800.90       1923.91    
  33  0.226178      -1.48644      -394.775       394.775       1882.40       2277.17    
  34  0.522315     -0.649483      -172.493       172.493       1569.79       1742.28    
  35  0.238835E-02  -6.03715      -1603.38       1603.38       1770.57       3373.95    
  36  0.123092E-01  -4.39741      -1167.89       1167.89       1827.18       2995.06    
  37  0.488141     -0.717152      -190.465       190.465       1844.08       2034.55    
  38  0.925188     -0.777584E-01  -20.6515       20.6515       1909.06       1929.72    
  39  0.676413     -0.390952      -103.831       103.831       1581.32       1685.15    
  40  0.638827     -0.448121      -119.014       119.014       1764.99       1884.00    
  41  0.789998     -0.235725      -62.6050       62.6050       1758.12       1820.73    
  42  0.453703E-01  -3.09290      -821.428       821.428       1734.78       2556.21    
  43  0.866893     -0.142840      -37.9362       37.9362       1673.73       1711.67    
  44  0.122493E-01  -4.40228      -1169.18       1169.18       1580.67       2749.85    
  45  0.172311      -1.75846      -467.020       467.020       1713.20       2180.22    
  46  0.899580     -0.105827      -28.1060       28.1060       1561.33       1589.43    
  47  0.857845     -0.153332      -40.7227       40.7227       1719.19       1759.92    
  48  0.176813      -1.73266      -460.169       460.169       1705.34       2165.51    
  49  0.795271E-01  -2.53166      -672.371       672.371       1795.55       2467.92    
  50  0.461368     -0.773559      -205.446       205.446       1776.78       1982.23    
  51  0.727625     -0.317970      -84.4481       84.4481       1889.46       1973.91    
  52  0.106879      -2.23606      -593.865       593.865       1810.05       2403.92    
  53  0.169411      -1.77543      -471.527       471.527       1770.80       2242.32    
  54  0.150923      -1.89099      -502.219       502.219       1781.61       2283.83    
  55  0.970144     -0.303104E-01  -8.05000       8.05000       1698.61       1706.66    
  56  0.819386     -0.199200      -52.9045       52.9045       1961.16       2014.07    
  57  0.855509     -0.156059      -41.4470       41.4470       1984.36       2025.80    
  58  0.248182      -1.39359      -370.117       370.117       1809.33       2179.45    
  59  0.632181     -0.458580      -121.792       121.792       1915.64       2037.43    
  60  0.626090     -0.468262      -124.363       124.363       1862.77       1987.13    
  61  0.122722      -2.09783      -557.153       557.153       1838.76       2395.92    
  62  0.656077     -0.421477      -111.938       111.938       1780.87       1892.80    
  63  0.811645     -0.208692      -55.4256       55.4256       2001.89       2057.31    
  64  0.241419E-05  -12.9341      -3435.12       3435.12       1980.44       5415.56    
  65  0.450747     -0.796849      -211.631       211.631       1935.34       2146.97    
  66  0.299124      -1.20690      -320.534       320.534       2067.26       2387.80    
  67  0.156254      -1.85627      -492.999       492.999       1750.26       2243.26    
  68  0.323711      -1.12790      -299.554       299.554       1972.79       2272.35    
  69  0.447335     -0.804447      -213.649       213.649       1797.48       2011.13    
  70  0.457702     -0.781538      -207.565       207.565       1763.87       1971.43    
  71  0.532478     -0.630214      -167.376       167.376       1999.18       2166.56    
  72  0.847970E-01  -2.46749      -655.330       655.330       1668.46       2323.79    
  73  0.624219     -0.471254      -125.158       125.158       1868.49       1993.65    
  74  0.753467     -0.283070      -75.1792       75.1792       1969.67       2044.85    
loop,thermsimp(1:2)       71   55.8643       134.975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       1630.67        130.03          0.68         30.06          1.28          0.05        162.10
Just calling func    0   0        162.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189       1728.62        130.07          0.70         29.95          0.93          0.05        161.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1630.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       71
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       72
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      188     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -36.8853       36.8853       1145.34       1182.22    
   2  0.470451     -0.754063      -200.268       200.268       1264.33       1464.60    
   3  0.615627     -0.485114      -128.839       128.839       1439.42       1568.26    
   4  0.291899      -1.23135      -327.028       327.028       1407.55       1734.57    
   5  0.584822     -0.536448      -142.473       142.473       1407.76       1550.24    
   6  0.681731     -0.383120      -101.751       101.751       1580.47       1682.22    
   7  0.680149     -0.385444      -102.368       102.368       1561.33       1663.70    
   8  0.560478     -0.578966      -153.765       153.765       1389.10       1542.87    
   9  0.392299     -0.935730      -248.516       248.516       1356.13       1604.65    
  10  0.586793     -0.533083      -141.579       141.579       1581.32       1722.90    
  11  0.461418     -0.773452      -205.417       205.417       1698.61       1904.02    
  12  0.142886      -1.94571      -516.752       516.752       1673.73       2190.49    
  13  0.960325     -0.404831E-01  -10.7517       10.7517       1519.51       1530.26    
  14  0.547176     -0.602984      -160.144       160.144       1717.71       1877.85    
  15  0.817596     -0.201386      -53.4853       53.4853       1545.03       1598.51    
  16  0.184065      -1.69247      -449.494       449.494       1637.85       2087.34    
  17  0.763954     -0.269247      -71.5081       71.5081       1569.79       1641.30    
  18  0.740640     -0.300240      -79.7393       79.7393       1619.56       1699.30    
  19  0.257299      -1.35751      -360.536       360.536       1719.19       2079.73    
  20  0.274950      -1.29117      -342.915       342.915       1747.59       2090.51    
  21  0.850599     -0.161814      -42.9755       42.9755       1666.68       1709.66    
  22  0.265651      -1.32557      -352.052       352.052       1608.08       1960.14    
  23  0.388810     -0.944665      -250.889       250.889       1758.12       2009.01    
  24  0.921262     -0.820106E-01  -21.7808       21.7808       1761.73       1783.51    
  25  0.622168     -0.474545      -126.032       126.032       1412.16       1538.20    
  26  0.831499     -0.184526      -49.0073       49.0073       1799.61       1848.61    
  27  0.777776     -0.251317      -66.7461       66.7461       1735.45       1802.20    
  28  0.519638     -0.654624      -173.858       173.858       1694.94       1868.80    
  29  0.343480      -1.06863      -283.812       283.812       1764.99       2048.80    
  30  0.379182     -0.969738      -257.548       257.548       1780.87       2038.41    
  31  0.509964     -0.673415      -178.849       178.849       1613.97       1792.82    
  32  0.457294E-01  -3.08501      -819.334       819.334       1800.90       2620.24    
  33  0.952238     -0.489400E-01  -12.9977       12.9977       1909.06       1922.06    
  34  0.198116      -1.61890      -429.956       429.956       1632.39       2062.35    
  35  0.863922     -0.146273      -38.8480       38.8480       1790.45       1829.30    
  36  0.765944     -0.266646      -70.8173       70.8173       1775.45       1846.27    
  37  0.849389     -0.163238      -43.3537       43.3537       1763.87       1807.22    
  38  0.488339     -0.716745      -190.357       190.357       1889.46       2079.82    
  39  0.969632     -0.308388E-01  -8.19033       8.19033       1776.78       1784.97    
  40  0.971690     -0.287184E-01  -7.62717       7.62717       1862.77       1870.40    
  41  0.690522     -0.370307      -98.3481       98.3481       1868.49       1966.84    
  42  0.266028      -1.32415      -351.676       351.676       1797.48       2149.16    
  43  0.581296     -0.542495      -144.079       144.079       1961.16       2105.24    
  44  0.636654     -0.451529      -119.919       119.919       1984.36       2104.27    
  45  0.947680     -0.537383E-01  -14.2721       14.2721       1844.08       1858.36    
  46  0.792806     -0.232176      -61.6626       61.6626       1747.07       1808.73    
  47  0.420588     -0.866101      -230.024       230.024       1915.64       2145.66    
  48  0.780043     -0.248407      -65.9731       65.9731       1969.67       2035.64    
  49  0.834700E-01  -2.48327      -659.520       659.520       2001.89       2661.41    
  50  0.707823     -0.345562      -91.7761       91.7761       1935.34       2027.12    
  51  0.836500     -0.178529      -47.4147       47.4147       1705.34       1752.76    
  52  0.111614      -2.19271      -582.350       582.350       1999.18       2581.53    
  53  0.690314     -0.370608      -98.4280       98.4280       1736.53       1834.95    
  54  0.200139      -1.60874      -427.259       427.259       1809.33       2236.59    
  55  0.182543E-01  -4.00336      -1063.23       1063.23       1713.20       2776.43    
  56  0.248611      -1.39187      -369.659       369.659       1781.42       2151.08    
  57  0.951106     -0.501293E-01  -13.3136       13.3136       1736.08       1749.39    
  58  0.576942     -0.550013      -146.075       146.075       1770.80       1916.87    
  59  0.335384      -1.09248      -290.147       290.147       1750.26       2040.40    
  60  0.137719E-01  -4.28512      -1138.07       1138.07       1972.79       3110.86    
  61  0.839758     -0.174642      -46.3824       46.3824       1882.40       1928.78    
  62  0.324640      -1.12504      -298.794       298.794       1781.61       2080.41    
  63  0.758550     -0.276346      -73.3935       73.3935       1668.46       1741.85    
  64  0.704737     -0.349931      -92.9365       92.9365       2067.26       2160.20    
  65  0.848812     -0.163918      -43.5342       43.5342       1838.76       1882.30    
  66  0.881053     -0.126637      -33.6329       33.6329       1810.05       1843.68    
  67  0.191937      -1.65059      -438.372       438.372       1795.55       2233.93    
  68  0.646624     -0.435990      -115.793       115.793       1734.78       1850.57    
  69  0.424145     -0.857680      -227.787       227.787       1839.48       2067.26    
  70  0.760934     -0.273209      -72.5604       72.5604       1744.72       1817.28    
  71  0.774467     -0.255580      -67.8783       67.8783       1580.67       1648.55    
  72  0.253405      -1.37276      -364.586       364.586       1827.18       2191.76    
  73  0.251414      -1.38065      -366.681       366.681       1770.57       2137.25    
  74  0.600642     -0.509755      -135.384       135.384       1630.67       1766.06    
loop,thermsimp(1:2)       72   36.8853       200.268    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190       1549.69        130.09          0.70         29.93          1.24          0.05        162.01
Just calling func    0   0        162.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1549.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       72
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       73
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      189     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -79.2848       79.2848       1145.34       1224.62    
   2  0.823468     -0.194230      -51.5847       51.5847       1264.33       1315.91    
   3  0.352913      -1.04153      -276.616       276.616       1519.51       1796.12    
   4  0.268511      -1.31486      -349.208       349.208       1412.16       1761.37    
   5  0.137541      -1.98383      -526.877       526.877       1389.10       1915.98    
   6  0.953738     -0.473661E-01  -12.5798       12.5798       1407.76       1420.34    
   7  0.366602      -1.00348      -266.509       266.509       1439.42       1705.93    
   8  0.861530     -0.149046      -39.5844       39.5844       1545.03       1584.61    
   9  0.190086      -1.66028      -440.945       440.945       1356.13       1797.08    
  10  0.931621     -0.708293E-01  -18.8112       18.8112       1569.79       1588.60    
  11  0.135562      -1.99833      -530.727       530.727       1580.67       2111.40    
  12  0.577052     -0.549824      -146.025       146.025       1561.33       1707.35    
  13  0.937511     -0.645266E-01  -17.1373       17.1373       1580.47       1597.60    
  14  0.836727     -0.178258      -47.3426       47.3426       1619.56       1666.90    
  15  0.124731      -2.08159      -552.840       552.840       1666.68       2219.52    
  16  0.830758     -0.185417      -49.2441       49.2441       1581.32       1630.56    
  17  0.925849     -0.770442E-01  -20.4618       20.4618       1407.55       1428.01    
  18  0.945668     -0.558633E-01  -14.8365       14.8365       1668.46       1683.30    
  19  0.700762     -0.355587      -94.4387       94.4387       1736.08       1830.52    
  20  0.585168E-01  -2.83844      -753.848       753.848       1705.34       2459.19    
  21  0.241985      -1.41888      -376.834       376.834       1630.67       2007.51    
  22  0.426115     -0.853047      -226.557       226.557       1761.73       1988.28    
  23  0.730656     -0.313813      -83.3441       83.3441       1776.78       1860.13    
  24  0.227460      -1.48078      -393.274       393.274       1613.97       2007.25    
  25  0.824070     -0.193500      -51.3907       51.3907       1735.45       1786.84    
  26  0.912829     -0.912064E-01  -24.2231       24.2231       1763.87       1788.09    
  27  0.130860      -2.03363      -540.102       540.102       1747.07       2287.17    
  28  0.126999      -2.06358      -548.055       548.055       1744.72       2292.78    
  29  0.394828E-01  -3.23189      -858.342       858.342       1790.45       2648.79    
  30  0.927793     -0.749466E-01  -19.9047       19.9047       1736.53       1756.43    
  31  0.161762      -1.82163      -483.798       483.798       1810.05       2293.85    
  32  0.510374     -0.672611      -178.636       178.636       1775.45       1954.09    
  33  0.930607     -0.719186E-01  -19.1005       19.1005       1799.61       1818.71    
  34  0.825283E-01  -2.49461      -662.533       662.533       1734.78       2397.31    
  35  0.569143     -0.563624      -149.690       149.690       1844.08       1993.77    
  36  0.732951     -0.310676      -82.5111       82.5111       1694.94       1777.45    
  37  0.554950     -0.588877      -156.397       156.397       1862.77       2019.17    
  38  0.614368     -0.487160      -129.383       129.383       1717.71       1847.09    
  39  0.127889      -2.05659      -546.201       546.201       1838.76       2384.97    
  40  0.510007     -0.673330      -178.827       178.827       1698.61       1877.43    
  41  0.206107      -1.57936      -419.455       419.455       1770.80       2190.25    
  42  0.812962E-01  -2.50966      -666.528       666.528       1909.06       2575.59    
  43  0.711913     -0.339799      -90.2457       90.2457       1882.40       1972.64    
  44  0.649899     -0.430939      -114.451       114.451       1608.08       1722.53    
  45  0.102708      -2.27587      -604.437       604.437       1868.49       2472.93    
  46  0.152702      -1.87927      -499.106       499.106       1758.12       2257.23    
  47  0.827734     -0.189064      -50.2126       50.2126       1935.34       1985.56    
  48  0.558329     -0.582808      -154.785       154.785       1969.67       2124.45    
  49  0.174746      -1.74442      -463.293       463.293       1780.87       2244.16    
  50  0.107247      -2.23262      -592.952       592.952       1750.26       2343.21    
  51  0.988891     -0.111711E-01  -2.96687       2.96687       1764.99       1767.96    
  52  0.388651     -0.945075      -250.998       250.998       1632.39       1883.39    
  53  0.580190     -0.544399      -144.584       144.584       1839.48       1984.06    
  54  0.519409E-01  -2.95765      -785.508       785.508       1719.19       2504.70    
  55  0.418368     -0.871393      -231.429       231.429       1889.46       2120.89    
  56  0.435950     -0.830228      -220.496       220.496       1781.61       2002.11    
  57  0.226091      -1.48682      -394.877       394.877       1637.85       2032.72    
  58  0.371316     -0.990702      -263.116       263.116       1747.59       2010.71    
  59  0.113770      -2.17358      -577.271       577.271       1984.36       2561.63    
  60  0.335886      -1.09098      -289.749       289.749       1961.16       2250.91    
  61  0.733883     -0.309406      -82.1737       82.1737       1770.57       1852.74    
  62  0.127704      -2.05804      -546.586       546.586       1915.64       2462.22    
  63  0.205687      -1.58140      -419.997       419.997       1797.48       2217.48    
  64  0.315213      -1.15451      -306.620       306.620       1781.42       2088.04    
  65  0.329345      -1.11065      -294.972       294.972       2067.26       2362.24    
  66  0.193213      -1.64396      -436.612       436.612       1673.73       2110.35    
  67  0.593921     -0.521008      -138.372       138.372       1827.18       1965.55    
  68  0.128520      -2.05167      -544.893       544.893       1795.55       2340.45    
  69  0.201122      -1.60384      -425.957       425.957       1809.33       2235.29    
  70  0.699786E-01  -2.65957      -706.342       706.342       1999.18       2705.52    
  71  0.830255     -0.186022      -49.4047       49.4047       1800.90       1850.31    
  72  0.266599      -1.32201      -351.106       351.106       2001.89       2352.99    
  73  0.170782      -1.76737      -469.388       469.388       1713.20       2182.59    
  74  0.453561     -0.790625      -209.978       209.978       1549.69       1759.67    
loop,thermsimp(1:2)       73   79.2848       51.5847    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       1996.05        130.15          0.69         29.80          1.07          0.05        161.77
Just calling func    0   0        161.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1996.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       73
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       74
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      190     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -47.5862       47.5862       1145.34       1192.92    
   2  0.439366     -0.822423      -218.423       218.423       1264.33       1482.75    
   3  0.603094     -0.505682      -134.302       134.302       1407.76       1542.07    
   4  0.695854E-01  -2.66520      -707.838       707.838       1407.55       2115.38    
   5  0.273021      -1.29821      -344.785       344.785       1545.03       1889.81    
   6  0.418319     -0.871511      -231.460       231.460       1569.79       1801.25    
   7  0.688437     -0.373331      -99.1513       99.1513       1580.47       1679.62    
   8  0.400930     -0.913969      -242.737       242.737       1581.32       1824.06    
   9  0.569492     -0.563010      -149.527       149.527       1619.56       1769.09    
  10  0.812441     -0.207712      -55.1652       55.1652       1668.46       1723.63    
  11  0.222094      -1.50465      -399.614       399.614       1439.42       1839.03    
  12  0.695761     -0.362749      -96.3409       96.3409       1561.33       1657.67    
  13  0.909536E-01  -2.39741      -636.716       636.716       1608.08       2244.80    
  14  0.297191      -1.21338      -322.256       322.256       1736.53       2058.78    
  15  0.806729     -0.214767      -57.0390       57.0390       1549.69       1606.73    
  16  0.407021     -0.898891      -238.732       238.732       1412.16       1650.90    
  17  0.520426     -0.653107      -173.456       173.456       1764.99       1938.45    
  18  0.826852     -0.190129      -50.4955       50.4955       1694.94       1745.44    
  19  0.729268     -0.315714      -83.8490       83.8490       1735.45       1819.30    
  20  0.344086      -1.06687      -283.344       283.344       1763.87       2047.21    
  21  0.280849      -1.26994      -337.277       337.277       1519.51       1856.78    
  22  0.301244E-01  -3.50242      -930.192       930.192       1356.13       2286.33    
  23  0.503253     -0.686663      -182.368       182.368       1799.61       1981.97    
  24  0.549007     -0.599644      -159.257       159.257       1736.08       1895.34    
  25  0.814230     -0.205513      -54.5811       54.5811       1717.71       1772.29    
  26  0.641489     -0.443963      -117.910       117.910       1800.90       1918.81    
  27  0.248696      -1.39152      -369.568       369.568       1770.57       2140.14    
  28  0.684472     -0.379107      -100.685       100.685       1776.78       1877.47    
  29  0.815126     -0.204413      -54.2890       54.2890       1698.61       1752.89    
  30  0.388210     -0.946208      -251.299       251.299       1632.39       1883.69    
  31  0.670538     -0.399675      -106.148       106.148       1389.10       1495.25    
  32  0.851104     -0.161221      -42.8179       42.8179       1775.45       1818.27    
  33  0.381078     -0.964752      -256.224       256.224       1827.18       2083.40    
  34  0.776256     -0.253273      -67.2655       67.2655       1882.40       1949.66    
  35  0.168040      -1.78355      -473.685       473.685       1839.48       2313.16    
  36  0.229069      -1.47373      -391.401       391.401       1935.34       2326.74    
  37  0.917563     -0.860337E-01  -22.8493       22.8493       1761.73       1784.58    
  38  0.161815      -1.82130      -483.711       483.711       1844.08       2327.80    
  39  0.355170      -1.03516      -274.923       274.923       1781.61       2056.53    
  40  0.221709      -1.50639      -400.075       400.075       1613.97       2014.05    
  41  0.424436     -0.856993      -227.605       227.605       1630.67       1858.28    
  42  0.337698      -1.08560      -288.320       288.320       1747.59       2035.91    
  43  0.574481     -0.554289      -147.211       147.211       1862.77       2009.98    
  44  0.614536     -0.486888      -129.310       129.310       1637.85       1767.16    
  45  0.345602      -1.06247      -282.176       282.176       1781.42       2063.59    
  46  0.330006      -1.10864      -294.440       294.440       1673.73       1968.17    
  47  0.934389     -0.678626E-01  -18.0233       18.0233       1580.67       1598.69    
  48  0.884466     -0.122771      -32.6062       32.6062       1889.46       1922.07    
  49  0.928979     -0.736686E-01  -19.5653       19.5653       1969.67       1989.23    
  50  0.788461     -0.237672      -63.1221       63.1221       1713.20       1776.32    
  51  0.963462     -0.372219E-01  -9.88559       9.88559       1770.80       1780.68    
  52  0.630201     -0.461716      -122.625       122.625       1797.48       1920.10    
  53  0.797085     -0.226794      -60.2331       60.2331       1666.68       1726.91    
  54  0.389249     -0.943537      -250.589       250.589       1809.33       2059.92    
  55  0.660522     -0.414724      -110.145       110.145       1780.87       1891.01    
  56  0.520011     -0.653905      -173.668       173.668       1961.16       2134.83    
  57  0.270094      -1.30899      -347.648       347.648       1758.12       2105.77    
  58  0.218485      -1.52104      -403.965       403.965       1747.07       2151.03    
  59  0.391194     -0.938551      -249.265       249.265       1744.72       1993.99    
  60  0.740024     -0.301073      -79.9605       79.9605       1810.05       1890.01    
  61  0.184403      -1.69063      -449.007       449.007       1795.55       2244.56    
  62  0.309007E-01  -3.47698      -923.434       923.434       1750.26       2673.69    
  63  0.916682     -0.869952E-01  -23.1046       23.1046       2001.89       2024.99    
  64  0.268894      -1.31344      -348.830       348.830       2067.26       2416.09    
  65  0.705018     -0.349532      -92.8306       92.8306       1838.76       1931.59    
  66  0.748256     -0.290010      -77.0224       77.0224       1734.78       1811.80    
  67  0.828532     -0.188099      -49.9564       49.9564       1705.34       1755.30    
  68  0.336848      -1.08812      -288.989       288.989       1915.64       2204.63    
  69  0.686319     -0.376413      -99.9697       99.9697       1868.49       1968.46    
  70  0.731123     -0.313173      -83.1743       83.1743       1719.19       1802.37    
  71  0.793361     -0.231477      -61.4768       61.4768       1984.36       2045.83    
  72  0.755239     -0.280722      -74.5555       74.5555       1909.06       1983.62    
  73  0.962869     -0.378380E-01  -10.0492       10.0492       1790.45       1800.50    
  74  0.705811     -0.348407      -92.5318       92.5318       1996.05       2088.59    
loop,thermsimp(1:2)       74   47.5862       218.423    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192       1582.86        129.89          0.68         30.00          1.38          0.05        161.99
Just calling func    0   0        161.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1582.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       74
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       75
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      191     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -260.652       260.652       1145.34       1405.99    
   2  0.269095      -1.31269      -348.631       348.631       1264.33       1612.96    
   3  0.301960      -1.19746      -318.028       318.028       1389.10       1707.13    
   4  0.927593     -0.751619E-01  -19.9619       19.9619       1407.76       1427.73    
   5  0.783450     -0.244048      -64.8155       64.8155       1580.67       1645.48    
   6  0.716705     -0.333091      -88.4641       88.4641       1549.69       1638.16    
   7  0.728578     -0.316661      -84.1005       84.1005       1412.16       1496.26    
   8  0.752541     -0.284300      -75.5058       75.5058       1561.33       1636.83    
   9  0.111710      -2.19185      -582.123       582.123       1580.47       2162.59    
  10  0.202752E-01  -3.89836      -1035.35       1035.35       1668.46       2703.81    
  11  0.967738     -0.327937E-01  -8.70953       8.70953       1666.68       1675.39    
  12  0.530869     -0.633240      -168.179       168.179       1694.94       1863.12    
  13  0.752699E-01  -2.58668      -686.983       686.983       1698.61       2385.59    
  14  0.658334     -0.418043      -111.026       111.026       1705.34       1816.37    
  15  0.383542     -0.958305      -254.512       254.512       1637.85       1892.36    
  16  0.280803      -1.27010      -337.321       337.321       1619.56       1956.88    
  17  0.976909     -0.233616E-01  -6.20449       6.20449       1717.71       1723.91    
  18  0.611898     -0.491189      -130.453       130.453       1713.20       1843.65    
  19  0.860469     -0.150278      -39.9117       39.9117       1770.80       1810.71    
  20  0.375446     -0.979641      -260.178       260.178       1761.73       2021.90    
  21  0.964573     -0.360702E-01  -9.57971       9.57971       1790.45       1800.03    
  22  0.865663     -0.144259      -38.3131       38.3131       1569.79       1608.10    
  23  0.498009     -0.697137      -185.149       185.149       1719.19       1904.34    
  24  0.732547     -0.311228      -82.6576       82.6576       1734.78       1817.44    
  25  0.293766      -1.22497      -325.334       325.334       1775.45       2100.79    
  26  0.805097     -0.216793      -57.5771       57.5771       1735.45       1793.03    
  27  0.236791      -1.44058      -382.596       382.596       1581.32       1963.92    
  28  0.759809     -0.274688      -72.9531       72.9531       1439.42       1512.37    
  29  0.279804      -1.27367      -338.267       338.267       1519.51       1857.77    
  30  0.862550     -0.147862      -39.2701       39.2701       1630.67       1669.94    
  31  0.784800     -0.242327      -64.3584       64.3584       1776.78       1841.14    
  32  0.231425      -1.46350      -388.684       388.684       1632.39       2021.07    
  33  0.839725     -0.174681      -46.3927       46.3927       1545.03       1591.42    
  34  0.204862      -1.58542      -421.064       421.064       1810.05       2231.11    
  35  0.741170     -0.299525      -79.5495       79.5495       1780.87       1860.42    
  36  0.838703     -0.175898      -46.7159       46.7159       1736.08       1782.80    
  37  0.287711      -1.24580      -330.865       330.865       1800.90       2131.77    
  38  0.937479     -0.645611E-01  -17.1465       17.1465       1797.48       1814.63    
  39  0.188655      -1.66783      -442.952       442.952       1889.46       2332.41    
  40  0.818317     -0.200505      -53.2512       53.2512       1838.76       1892.02    
  41  0.903487     -0.101493      -26.9551       26.9551       1764.99       1791.94    
  42  0.148828      -1.90496      -505.931       505.931       1882.40       2388.33    
  43  0.573616E-01  -2.85838      -759.144       759.144       1673.73       2432.88    
  44  0.792726E-01  -2.53486      -673.222       673.222       1868.49       2541.72    
  45  0.150401      -1.89445      -503.139       503.139       1799.61       2302.75    
  46  0.511444     -0.670518      -178.080       178.080       1909.06       2087.14    
  47  0.179810      -1.71585      -455.706       455.706       1969.67       2425.37    
  48  0.167282      -1.78808      -474.887       474.887       1744.72       2219.61    
  49  0.589016     -0.529302      -140.575       140.575       1862.77       2003.34    
  50  0.974997     -0.253206E-01  -6.72479       6.72479       1613.97       1620.70    
  51  0.750240     -0.287363      -76.3193       76.3193       2001.89       2078.20    
  52  0.695153     -0.363624      -96.5732       96.5732       1747.59       1844.17    
  53  0.166976      -1.78991      -475.372       475.372       1984.36       2459.73    
  54  0.228686      -1.47540      -391.846       391.846       1763.87       2155.71    
  55  0.728220     -0.317152      -84.2309       84.2309       1781.61       1865.84    
  56  0.321968      -1.13330      -300.989       300.989       1736.53       2037.52    
  57  0.494283     -0.704647      -187.144       187.144       1809.33       1996.48    
  58  0.398916     -0.919004      -244.074       244.074       1781.42       2025.49    
  59  0.130321      -2.03776      -541.198       541.198       1827.18       2368.37    
  60  0.131470E-01  -4.33156      -1150.40       1150.40       1996.05       3146.45    
  61  0.868361E-03  -7.04890      -1872.08       1872.08       1758.12       3630.21    
  62  0.572113     -0.558419      -148.308       148.308       1407.55       1555.85    
  63  0.201897      -1.60000      -424.936       424.936       1961.16       2386.10    
  64  0.795960     -0.228206      -60.6082       60.6082       1770.57       1831.18    
  65  0.904277E-01  -2.40321      -638.256       638.256       1747.07       2385.32    
  66  0.976775E-01  -2.32608      -617.774       617.774       1915.64       2533.41    
  67  0.231524      -1.46307      -388.570       388.570       1795.55       2184.12    
  68  0.542363     -0.611819      -162.490       162.490       1608.08       1770.57    
  69  0.332318      -1.10166      -292.585       292.585       1356.13       1648.72    
  70  0.840822     -0.173375      -46.0459       46.0459       1839.48       1885.52    
  71  0.528412E-01  -2.94046      -780.944       780.944       1935.34       2716.29    
  72  0.191882      -1.65087      -438.448       438.448       1844.08       2282.53    
  73  0.950825     -0.504248E-01  -13.3921       13.3921       2067.26       2080.66    
  74  0.619954     -0.478110      -126.979       126.979       1582.86       1709.84    
loop,thermsimp(1:2)       75   260.652       348.631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193       3329.09        128.92          0.66         30.55          0.80          0.04        160.97
Just calling func    0   0        160.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194       1555.06        129.57          0.66         30.23          0.91          0.04        161.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1555.06
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       75
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       76
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      193     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -797.067       797.067       1145.34       1942.40    
   2  0.604222     -0.503814      -133.806       133.806       1407.76       1541.57    
   3  0.106168      -2.24273      -595.636       595.636       1412.16       2007.80    
   4  0.342113      -1.07261      -284.870       284.870       1439.42       1724.29    
   5  0.473442     -0.747725      -198.585       198.585       1407.55       1606.13    
   6  0.100866E-01  -4.59655      -1220.78       1220.78       1545.03       2765.81    
   7  0.911848     -0.922817E-01  -24.5087       24.5087       1569.79       1594.30    
   8  0.633547     -0.456421      -121.219       121.219       1264.33       1385.55    
   9  0.729024     -0.316048      -83.9378       83.9378       1613.97       1697.91    
  10  0.620163     -0.477772      -126.889       126.889       1561.33       1688.22    
  11  0.867018     -0.142695      -37.8977       37.8977       1549.69       1587.59    
  12  0.969344E-01  -2.33372      -619.802       619.802       1580.67       2200.47    
  13  0.358466      -1.02592      -272.470       272.470       1356.13       1628.60    
  14  0.953168     -0.479638E-01  -12.7385       12.7385       1630.67       1643.41    
  15  0.684510     -0.379052      -100.671       100.671       1666.68       1767.35    
  16  0.482047     -0.729713      -193.801       193.801       1389.10       1582.91    
  17  0.974791     -0.255318E-01  -6.78088       6.78088       1582.86       1589.64    
  18  0.978669     -0.215619E-01  -5.72653       5.72653       1717.71       1723.43    
  19  0.929785     -0.728022E-01  -19.3352       19.3352       1608.08       1627.42    
  20  0.715020     -0.335444      -89.0890       89.0890       1736.08       1825.17    
  21  0.598247     -0.513752      -136.445       136.445       1764.99       1901.43    
  22  0.107080      -2.23418      -593.366       593.366       1735.45       2328.82    
  23  0.559093     -0.581439      -154.422       154.422       1790.45       1944.87    
  24  0.933094     -0.692491E-01  -18.3916       18.3916       1770.80       1789.19    
  25  0.470169E-01  -3.05725      -811.960       811.960       1797.48       2609.44    
  26  0.166768      -1.79115      -475.704       475.704       1705.34       2181.04    
  27  0.331277      -1.10480      -293.419       293.419       1734.78       2028.20    
  28  0.961755     -0.389952E-01  -10.3566       10.3566       1770.57       1780.93    
  29  0.464366E-01  -3.06967      -815.259       815.259       1776.78       2592.04    
  30  0.966136E-03  -6.94221      -1843.75       1843.75       1713.20       3556.95    
  31  0.941012     -0.607999E-01  -16.1476       16.1476       1747.59       1763.74    
  32  0.201947E-01  -3.90233      -1036.40       1036.40       1519.51       2555.91    
  33  0.679249     -0.386768      -102.720       102.720       1780.87       1883.59    
  34  0.318772      -1.14328      -303.638       303.638       1694.94       1998.58    
  35  0.388100     -0.946493      -251.374       251.374       1781.61       2032.99    
  36  0.658606     -0.417629      -110.916       110.916       1839.48       1950.39    
  37  0.774362     -0.255715      -67.9142       67.9142       1838.76       1906.68    
  38  0.704871     -0.349740      -92.8857       92.8857       1637.85       1730.73    
  39  0.274189      -1.29394      -343.651       343.651       1719.19       2062.84    
  40  0.881806     -0.125783      -33.4060       33.4060       1619.56       1652.96    
  41  0.198448      -1.61723      -429.511       429.511       1581.32       2010.83    
  42  0.342590      -1.07122      -284.501       284.501       1809.33       2093.83    
  43  0.603787     -0.504534      -133.997       133.997       1862.77       1996.77    
  44  0.667409     -0.404353      -107.390       107.390       1632.39       1739.78    
  45  0.317014      -1.14881      -305.107       305.107       1761.73       2066.83    
  46  0.368458     -0.998429      -265.168       265.168       1781.42       2046.58    
  47  0.139912      -1.96674      -522.338       522.338       1736.53       2258.86    
  48  0.537645     -0.620557      -164.811       164.811       2001.89       2166.70    
  49  0.159021      -1.83872      -488.337       488.337       2067.26       2555.60    
  50  0.729011     -0.316067      -83.9427       83.9427       1909.06       1993.01    
  51  0.802486     -0.220041      -58.4398       58.4398       1775.45       1833.89    
  52  0.249203      -1.38949      -369.027       369.027       1800.90       2169.93    
  53  0.282362      -1.26456      -335.850       335.850       1763.87       2099.72    
  54  0.803878     -0.218308      -57.9793       57.9793       1580.47       1638.45    
  55  0.183401      -1.69608      -450.453       450.453       1795.55       2246.01    
  56  0.144999      -1.93103      -512.853       512.853       1744.72       2257.58    
  57  0.821026     -0.197200      -52.3735       52.3735       1810.05       1862.42    
  58  0.391750     -0.937132      -248.889       248.889       1844.08       2092.97    
  59  0.605745     -0.501297      -133.137       133.137       1799.61       1932.74    
  60  0.759982E-01  -2.57705      -684.425       684.425       1889.46       2573.89    
  61  0.856619     -0.154762      -41.1024       41.1024       1827.18       1868.28    
  62  0.200085      -1.60901      -427.330       427.330       1747.07       2174.40    
  63  0.623969     -0.471654      -125.264       125.264       1698.61       1823.87    
  64  0.668527     -0.402679      -106.946       106.946       1961.16       2068.11    
  65  0.926898     -0.759121E-01  -20.1611       20.1611       1882.40       1902.56    
  66  0.972428     -0.279590E-01  -7.42550       7.42550       1969.67       1977.09    
  67  0.230218      -1.46873      -390.073       390.073       1673.73       2063.81    
  68  0.756442E-01  -2.58171      -685.665       685.665       1984.36       2670.02    
  69  0.209346      -1.56377      -415.313       415.313       1915.64       2330.95    
  70  0.198646      -1.61623      -429.247       429.247       1868.49       2297.74    
  71  0.196542E-01  -3.92947      -1043.61       1043.61       1668.46       2712.07    
  72  0.654679     -0.423610      -112.505       112.505       1935.34       2047.85    
  73  0.519808     -0.654295      -173.771       173.771       1996.05       2169.83    
  74  0.290149      -1.23736      -328.625       328.625       1555.06       1883.69    
loop,thermsimp(1:2)       76   797.067       133.806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195       4246.81        129.49          0.68         30.18          0.96          0.04        161.36
Just calling func    0   0        161.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196       1619.79        129.62          0.68         30.35          0.91          0.05        161.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1619.79
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       76
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       77
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      195     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -137.105       137.105       1264.33       1401.43    
   2  0.476930     -0.740385      -196.635       196.635       1407.76       1604.40    
   3  0.845382     -0.167966      -44.6093       44.6093       1389.10       1433.71    
   4  0.397814     -0.921770      -244.808       244.808       1549.69       1794.50    
   5  0.249923      -1.38660      -368.261       368.261       1582.86       1951.12    
   6  0.591552     -0.525005      -139.434       139.434       1569.79       1709.22    
   7  0.143111      -1.94414      -516.334       516.334       1407.55       1923.88    
   8  0.306099      -1.18385      -314.412       314.412       1608.08       1922.50    
   9  0.441827     -0.816836      -216.940       216.940       1356.13       1573.07    
  10  0.504521     -0.684146      -181.699       181.699       1580.47       1762.17    
  11  0.127660      -2.05839      -546.677       546.677       1630.67       2177.35    
  12  0.333524      -1.09804      -291.624       291.624       1619.56       1911.18    
  13  0.130890      -2.03340      -540.040       540.040       1561.33       2101.37    
  14  0.307732      -1.17853      -312.999       312.999       1613.97       1926.97    
  15  0.154434E-01  -4.17057      -1107.64       1107.64       1717.71       2825.35    
  16  0.357863      -1.02761      -272.917       272.917       1439.42       1712.34    
  17  0.271898      -1.30233      -345.879       345.879       1637.85       1983.72    
  18  0.906228E-01  -2.40105      -637.683       637.683       1632.39       2270.07    
  19  0.344142      -1.06670      -283.300       283.300       1747.59       2030.89    
  20  0.392886     -0.934237      -248.120       248.120       1666.68       1914.80    
  21  0.454318     -0.788958      -209.536       209.536       1770.57       1980.10    
  22  0.384129     -0.956778      -254.106       254.106       1770.80       2024.90    
  23  0.354037      -1.03835      -275.771       275.771       1698.61       1974.38    
  24  0.154212      -1.86943      -496.493       496.493       1736.08       2232.57    
  25  0.816320     -0.202949      -53.9003       53.9003       1775.45       1829.35    
  26  0.994970     -0.504291E-02  -1.33932       1.33932       1810.05       1811.39    
  27  0.374719E-01  -3.28416      -872.226       872.226       1827.18       2699.40    
  28  0.227113      -1.48231      -393.679       393.679       1780.87       2174.55    
  29  0.410587     -0.890167      -236.415       236.415       1555.06       1791.48    
  30  0.104540E-01  -4.56077      -1211.27       1211.27       1764.99       2976.26    
  31  0.994826     -0.518730E-02  -1.37767       1.37767       1882.40       1883.78    
  32  0.738930     -0.302553      -80.3535       80.3535       1838.76       1919.12    
  33  0.715904     -0.334209      -88.7610       88.7610       1799.61       1888.37    
  34  0.128324      -2.05320      -545.299       545.299       1145.34       1690.64    
  35  0.856095     -0.155374      -41.2649       41.2649       1790.45       1831.72    
  36  0.423967     -0.858099      -227.899       227.899       1839.48       2067.38    
  37  0.504650     -0.683890      -181.631       181.631       1969.67       2151.30    
  38  0.347036      -1.05833      -281.076       281.076       1909.06       2190.14    
  39  0.906779     -0.978566E-01  -25.9893       25.9893       1862.77       1888.76    
  40  0.616911     -0.483030      -128.286       128.286       1694.94       1823.23    
  41  0.540209     -0.615800      -163.547       163.547       1412.16       1575.71    
  42  0.772932     -0.257564      -68.4051       68.4051       1581.32       1649.72    
  43  0.544989     -0.606989      -161.207       161.207       1734.78       1895.99    
  44  0.951523     -0.496917E-01  -13.1974       13.1974       1781.61       1794.81    
  45  0.172505      -1.75733      -466.721       466.721       1781.42       2248.14    
  46  0.871391     -0.137665      -36.5617       36.5617       1935.34       1971.90    
  47  0.127604      -2.05882      -546.793       546.793       1719.19       2265.99    
  48  0.785934     -0.240882      -63.9748       63.9748       1673.73       1737.71    
  49  0.815977     -0.203369      -54.0119       54.0119       1761.73       1815.74    
  50  0.350587      -1.04815      -278.372       278.372       1961.16       2239.54    
  51  0.739645     -0.301584      -80.0964       80.0964       1844.08       1924.18    
  52  0.996274     -0.373345E-02 -0.991549      0.991549       1809.33       1810.32    
  53  0.303822      -1.19131      -316.396       316.396       1763.87       2080.26    
  54  0.708260     -0.344944      -91.6121       91.6121       2001.89       2093.50    
  55  0.646268     -0.436541      -115.939       115.939       1996.05       2111.99    
  56  0.696585     -0.361566      -96.0266       96.0266       1800.90       1896.93    
  57  0.439732     -0.821591      -218.202       218.202       1747.07       1965.27    
  58  0.791452     -0.233886      -62.1166       62.1166       1705.34       1767.46    
  59  0.202743      -1.59581      -423.825       423.825       1580.67       2004.49    
  60  0.547790E-01  -2.90445      -771.379       771.379       1795.55       2566.93    
  61  0.663631     -0.410029      -108.898       108.898       1744.72       1853.62    
  62  0.838292     -0.176388      -46.8462       46.8462       1736.53       1783.37    
  63  0.450238     -0.797979      -211.932       211.932       1868.49       2080.42    
  64  0.209610      -1.56251      -414.979       414.979       1735.45       2150.43    
  65  0.502241     -0.688676      -182.902       182.902       1915.64       2098.54    
  66  0.837306     -0.177566      -47.1589       47.1589       2067.26       2114.42    
  67  0.345973      -1.06139      -281.891       281.891       1519.51       1801.40    
  68  0.558861     -0.581855      -154.532       154.532       1889.46       2043.99    
  69  0.293365      -1.22634      -325.697       325.697       1776.78       2102.48    
  70  0.234701      -1.44944      -384.951       384.951       1797.48       2182.43    
  71  0.762859E-01  -2.57327      -683.422       683.422       1984.36       2667.78    
  72  0.994504     -0.551100E-02  -1.46364       1.46364       1668.46       1669.92    
  73  0.674972     -0.393084      -104.397       104.397       1545.03       1649.43    
  74  0.843847     -0.169784      -45.0921       45.0921       1619.79       1664.88    
loop,thermsimp(1:2)       77   137.105       196.635    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197       3300.69        129.36          0.70         30.30          0.82          0.05        161.23
Just calling func    0   0        161.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198       1576.82        129.57          0.67         30.19          1.12          0.05        161.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1576.82
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       77
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       78
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      197     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -15.9016       15.9016       1264.33       1280.23    
   2  0.368209     -0.999105      -265.348       265.348       1389.10       1654.45    
   3  0.508630     -0.676034      -179.545       179.545       1356.13       1535.68    
   4  0.744324     -0.295279      -78.4219       78.4219       1412.16       1490.59    
   5  0.401586     -0.912333      -242.302       242.302       1407.76       1650.07    
   6  0.712794     -0.338563      -89.9174       89.9174       1545.03       1634.95    
   7  0.186976      -1.67678      -445.327       445.327       1581.32       2026.65    
   8  0.688451     -0.373311      -99.1460       99.1460       1619.79       1718.93    
   9  0.668652     -0.402492      -106.896       106.896       1668.46       1775.36    
  10  0.656767     -0.420426      -111.659       111.659       1145.34       1257.00    
  11  0.853336     -0.158602      -42.1224       42.1224       1569.79       1611.91    
  12  0.556440     -0.586195      -155.685       155.685       1439.42       1595.11    
  13  0.258558E-01  -3.65522      -970.773       970.773       1673.73       2644.51    
  14  0.121003E-01  -4.41452      -1172.43       1172.43       1580.47       2752.90    
  15  0.150890      -1.89120      -502.275       502.275       1705.34       2207.62    
  16  0.820074     -0.198360      -52.6816       52.6816       1736.53       1789.21    
  17  0.151452      -1.88748      -501.288       501.288       1555.06       2056.35    
  18  0.305465      -1.18592      -314.963       314.963       1549.69       1864.66    
  19  0.533202     -0.628854      -167.014       167.014       1781.61       1948.63    
  20  0.143416      -1.94201      -515.769       515.769       1519.51       2035.27    
  21  0.687081     -0.375303      -99.6748       99.6748       1809.33       1909.01    
  22  0.546247     -0.604685      -160.595       160.595       1810.05       1970.65    
  23  0.356987      -1.03006      -273.568       273.568       1761.73       2035.29    
  24  0.545718     -0.605653      -160.853       160.853       1694.94       1855.79    
  25  0.789688     -0.236117      -62.7092       62.7092       1775.45       1838.16    
  26  0.752086     -0.284904      -75.6664       75.6664       1790.45       1866.12    
  27  0.388816     -0.944650      -250.885       250.885       1744.72       1995.61    
  28  0.988428     -0.116395E-01  -3.09129       3.09129       1882.40       1885.49    
  29  0.124991      -2.07952      -552.289       552.289       1799.61       2351.90    
  30  0.568214     -0.565257      -150.124       150.124       1862.77       2012.89    
  31  0.551032     -0.595962      -158.279       158.279       1734.78       1893.06    
  32  0.423622     -0.858913      -228.115       228.115       1800.90       2029.02    
  33  0.647554     -0.434553      -115.411       115.411       1619.56       1734.97    
  34  0.686255     -0.376506      -99.9945       99.9945       1666.68       1766.68    
  35  0.548072     -0.601349      -159.710       159.710       1838.76       1998.47    
  36  0.880777     -0.126951      -33.7163       33.7163       1608.08       1641.80    
  37  0.894918     -0.111023      -29.4860       29.4860       1407.55       1437.03    
  38  0.241077      -1.42264      -377.832       377.832       1844.08       2221.92    
  39  0.546141     -0.604877      -160.647       160.647       1613.97       1774.62    
  40  0.266590      -1.32204      -351.115       351.115       1582.86       1933.97    
  41  0.575085     -0.553238      -146.932       146.932       1747.07       1894.00    
  42  0.907139     -0.974596E-01  -25.8838       25.8838       1935.34       1961.23    
  43  0.469109     -0.756920      -201.027       201.027       1698.61       1899.63    
  44  0.738008     -0.303801      -80.6851       80.6851       1770.57       1851.25    
  45  0.557598     -0.584116      -155.133       155.133       1637.85       1792.98    
  46  0.305677      -1.18523      -314.779       314.779       1580.67       1895.45    
  47  0.392927     -0.934131      -248.091       248.091       1770.80       2018.89    
  48  0.121997      -2.10376      -558.727       558.727       1747.59       2306.32    
  49  0.712082     -0.339563      -90.1828       90.1828       1889.46       1979.65    
  50  0.342132      -1.07256      -284.855       284.855       1839.48       2124.33    
  51  0.288307      -1.24373      -330.316       330.316       1763.87       2094.18    
  52  0.554777     -0.589188      -156.480       156.480       1868.49       2024.97    
  53  0.116597E-01  -4.45161      -1182.28       1182.28       2001.89       3184.17    
  54  0.844148     -0.169427      -44.9973       44.9973       1915.64       1960.63    
  55  0.910896     -0.933267E-01  -24.7862       24.7862       1561.33       1586.11    
  56  0.257100      -1.35829      -360.742       360.742       1776.78       2137.52    
  57  0.340199      -1.07823      -286.361       286.361       1996.05       2282.41    
  58  0.656010     -0.421580      -111.965       111.965       2067.26       2179.23    
  59  0.894739     -0.111224      -29.5394       29.5394       1735.45       1764.99    
  60  0.226933      -1.48310      -393.890       393.890       1969.67       2363.56    
  61  0.478182     -0.737763      -195.939       195.939       1780.87       1976.81    
  62  0.361863      -1.01649      -269.965       269.965       1630.67       1900.64    
  63  0.415757     -0.877654      -233.092       233.092       1797.48       2030.57    
  64  0.540919     -0.614487      -163.199       163.199       1909.06       2072.26    
  65  0.489341     -0.714697      -189.813       189.813       1736.08       1925.89    
  66  0.963632     -0.370456E-01  -9.83878       9.83878       1961.16       1971.00    
  67  0.312700      -1.16251      -308.746       308.746       1781.42       2090.16    
  68  0.145861      -1.92510      -511.278       511.278       1719.19       2230.47    
  69  0.960223     -0.405895E-01  -10.7800       10.7800       1632.39       1643.17    
  70  0.490262     -0.712815      -189.313       189.313       1795.55       1984.87    
  71  0.565539     -0.569975      -151.377       151.377       1984.36       2135.73    
  72  0.818412     -0.200389      -53.2203       53.2203       1827.18       1880.40    
  73  0.213411      -1.54453      -410.206       410.206       1717.71       2127.91    
  74  0.907759     -0.967768E-01  -25.7025       25.7025       1576.82       1602.53    
loop,thermsimp(1:2)       78   15.9016       265.348    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199       2617.70        129.64          0.65         30.43          1.00          0.04        161.77
Just calling func    0   0        161.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2617.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       78
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       79
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      198     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -702.933       702.933       1145.34       1848.27    
   2  0.952063     -0.491245E-01  -13.0467       13.0467       1264.33       1277.37    
   3  0.207928      -1.57057      -417.119       417.119       1407.55       1824.67    
   4  0.564009     -0.572686      -152.097       152.097       1412.16       1564.26    
   5  0.461636     -0.772979      -205.292       205.292       1356.13       1561.43    
   6  0.683812     -0.380072      -100.941       100.941       1561.33       1662.27    
   7  0.153569      -1.87360      -497.601       497.601       1439.42       1937.02    
   8  0.605650     -0.501453      -133.179       133.179       1576.82       1710.00    
   9  0.257296      -1.35753      -360.540       360.540       1569.79       1930.33    
  10  0.517987     -0.657805      -174.703       174.703       1545.03       1719.73    
  11  0.571129     -0.560140      -148.765       148.765       1608.08       1756.85    
  12  0.735134     -0.307703      -81.7214       81.7214       1632.39       1714.11    
  13  0.766340E-02  -4.87130      -1293.75       1293.75       1407.76       2701.51    
  14  0.435932     -0.830269      -220.507       220.507       1389.10       1609.61    
  15  0.513945     -0.665639      -176.784       176.784       1619.79       1796.57    
  16  0.447046     -0.805095      -213.821       213.821       1619.56       1833.38    
  17  0.244813      -1.40726      -373.747       373.747       1735.45       2109.20    
  18  0.183933      -1.69318      -449.685       449.685       1666.68       2116.37    
  19  0.413164     -0.883910      -234.754       234.754       1613.97       1848.73    
  20  0.869613     -0.139707      -37.1042       37.1042       1668.46       1705.56    
  21  0.853260     -0.158691      -42.1459       42.1459       1736.53       1778.67    
  22  0.138067      -1.98001      -525.862       525.862       1637.85       2163.71    
  23  0.940528     -0.613134E-01  -16.2839       16.2839       1775.45       1791.74    
  24  0.694939     -0.363931      -96.6548       96.6548       1770.57       1867.22    
  25  0.962776     -0.379346E-01  -10.0749       10.0749       1694.94       1705.02    
  26  0.378266     -0.972158      -258.191       258.191       1549.69       1807.89    
  27  0.855922     -0.155576      -41.3187       41.3187       1790.45       1831.77    
  28  0.393452     -0.932797      -247.737       247.737       1827.18       2074.91    
  29  0.253590      -1.37204      -364.393       364.393       1882.40       2246.79    
  30  0.777948     -0.251096      -66.6874       66.6874       1734.78       1801.47    
  31  0.654890     -0.423288      -112.419       112.419       1747.07       1859.49    
  32  0.690016E-01  -2.67363      -710.076       710.076       1580.67       2290.74    
  33  0.101034      -2.29229      -608.799       608.799       1698.61       2307.41    
  34  0.684533     -0.379019      -100.662       100.662       1630.67       1731.34    
  35  0.592603     -0.523230      -138.962       138.962       1809.33       1948.29    
  36  0.904830     -0.100009      -26.5608       26.5608       1736.08       1762.64    
  37  0.400244     -0.915681      -243.191       243.191       1582.86       1826.05    
  38  0.698191     -0.359263      -95.4150       95.4150       1781.61       1877.03    
  39  0.551449E-01  -2.89779      -769.611       769.611       1915.64       2685.25    
  40  0.500493     -0.692161      -183.828       183.828       1935.34       2119.17    
  41  0.289592      -1.23928      -329.135       329.135       1810.05       2139.19    
  42  0.447163     -0.804833      -213.752       213.752       1961.16       2174.91    
  43  0.690940     -0.369702      -98.1873       98.1873       1780.87       1879.05    
  44  0.631068     -0.460341      -122.260       122.260       1889.46       2011.72    
  45  0.926041     -0.768363E-01  -20.4066       20.4066       1795.55       1815.96    
  46  0.436187     -0.829684      -220.352       220.352       1744.72       1965.08    
  47  0.314139      -1.15792      -307.526       307.526       1838.76       2146.29    
  48  0.363110      -1.01305      -269.051       269.051       1862.77       2131.82    
  49  0.446982     -0.805238      -213.859       213.859       1770.80       1984.66    
  50  0.541529     -0.613360      -162.899       162.899       1868.49       2031.39    
  51  0.415529     -0.878202      -233.237       233.237       1581.32       1814.56    
  52  0.559792     -0.580190      -154.090       154.090       1800.90       1954.99    
  53  0.931332     -0.711389E-01  -18.8935       18.8935       1797.48       1816.37    
  54  0.653342     -0.425655      -113.048       113.048       1519.51       1632.55    
  55  0.254324E-01  -3.67173      -975.158       975.158       1761.73       2736.88    
  56  0.365877      -1.00546      -267.035       267.035       1555.06       1822.10    
  57  0.187661      -1.67312      -444.355       444.355       1909.06       2353.42    
  58  0.592744     -0.522993      -138.899       138.899       1781.42       1920.31    
  59  0.211036      -1.55573      -413.178       413.178       1763.87       2177.05    
  60  0.718956     -0.329955      -87.6312       87.6312       1839.48       1927.11    
  61  0.170082      -1.77147      -470.478       470.478       1717.71       2188.18    
  62  0.190051      -1.66046      -440.995       440.995       1984.36       2425.35    
  63  0.275889      -1.28776      -342.009       342.009       1776.78       2118.79    
  64  0.670664     -0.399487      -106.098       106.098       2067.26       2173.36    
  65  0.294211      -1.22346      -324.932       324.932       1705.34       2030.27    
  66  0.710312     -0.342050      -90.8436       90.8436       1844.08       1934.93    
  67  0.432365     -0.838485      -222.689       222.689       1719.19       1941.88    
  68  0.488453     -0.716511      -190.295       190.295       1996.05       2186.35    
  69  0.250523      -1.38421      -367.625       367.625       1747.59       2115.22    
  70  0.842097     -0.171860      -45.6434       45.6434       1799.61       1845.25    
  71  0.403041     -0.908716      -241.342       241.342       1969.67       2211.01    
  72  0.576391     -0.550969      -146.329       146.329       1673.73       1820.06    
  73  0.577169     -0.549620      -145.971       145.971       1580.47       1726.44    
  74  0.275825      -1.28799      -342.070       342.070       2617.70       2959.77    
loop,thermsimp(1:2)       79   702.933       13.0467    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       2001.89        129.70          0.69         30.30          1.30          0.04        162.03
Just calling func    0   0        162.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2001.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       79
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       80
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      199     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -106.986       106.986       1264.33       1371.31    
   2  0.238500      -1.43339      -380.686       380.686       1356.13       1736.82    
   3  0.689211     -0.372208      -98.8530       98.8530       1412.16       1511.02    
   4  0.540774     -0.614753      -163.269       163.269       1389.10       1552.37    
   5  0.178857      -1.72117      -457.118       457.118       1519.51       1976.62    
   6  0.884253     -0.123012      -32.6703       32.6703       1561.33       1594.00    
   7  0.755546     -0.280314      -74.4474       74.4474       1694.94       1769.39    
   8  0.654086E-01  -2.72710      -724.278       724.278       1668.46       2392.74    
   9  0.802958     -0.219452      -58.2833       58.2833       1576.82       1635.11    
  10  0.840665     -0.173562      -46.0954       46.0954       1632.39       1678.49    
  11  0.864930     -0.145107      -38.5382       38.5382       1545.03       1583.57    
  12  0.728243     -0.317120      -84.2225       84.2225       1580.47       1664.69    
  13  0.453086     -0.791672      -210.257       210.257       1630.67       1840.93    
  14  0.702549E-01  -2.65563      -705.295       705.295       1608.08       2313.38    
  15  0.610595     -0.493321      -131.019       131.019       1736.08       1867.10    
  16  0.728410E-02  -4.92206      -1307.23       1307.23       1736.53       3043.75    
  17  0.913763     -0.901841E-01  -23.9516       23.9516       1775.45       1799.40    
  18  0.165001      -1.80180      -478.533       478.533       1619.79       2098.32    
  19  0.917747E-01  -2.38842      -634.329       634.329       1734.78       2369.11    
  20  0.338507      -1.08321      -287.685       287.685       1549.69       1837.38    
  21  0.357666      -1.02815      -273.063       273.063       1581.32       1854.38    
  22  0.389441     -0.943044      -250.459       250.459       1795.55       2046.01    
  23  0.879897     -0.127950      -33.9817       33.9817       1797.48       1831.46    
  24  0.418897     -0.870129      -231.093       231.093       1673.73       1904.83    
  25  0.838426     -0.176230      -46.8040       46.8040       1555.06       1601.86    
  26  0.185169      -1.68649      -447.906       447.906       1407.55       1855.45    
  27  0.200952      -1.60469      -426.181       426.181       1582.86       2009.04    
  28  0.877256     -0.130957      -34.7801       34.7801       1790.45       1825.23    
  29  0.386592     -0.950385      -252.408       252.408       1619.56       1871.97    
  30  0.888706     -0.117988      -31.3360       31.3360       1799.61       1830.94    
  31  0.105408      -2.24991      -597.544       597.544       1145.34       1742.88    
  32  0.994268     -0.574873E-02  -1.52678       1.52678       1613.97       1615.50    
  33  0.764077     -0.269087      -71.4655       71.4655       1747.07       1818.53    
  34  0.812108     -0.208121      -55.2740       55.2740       1770.57       1825.84    
  35  0.121669      -2.10645      -559.443       559.443       1781.61       2341.05    
  36  0.637909     -0.449559      -119.396       119.396       1780.87       1900.26    
  37  0.316007E-02  -5.75716      -1529.02       1529.02       1781.42       3310.43    
  38  0.229677      -1.47108      -390.698       390.698       1839.48       2230.17    
  39  0.521374     -0.651288      -172.973       172.973       1569.79       1742.76    
  40  0.391402     -0.938019      -249.124       249.124       1844.08       2093.21    
  41  0.327357      -1.11670      -296.580       296.580       1439.42       1736.00    
  42  0.963139     -0.375576E-01  -9.97476       9.97476       1719.19       1729.17    
  43  0.174261      -1.74720      -464.030       464.030       1809.33       2273.36    
  44  0.331602      -1.10382      -293.158       293.158       1800.90       2094.06    
  45  0.526338     -0.641812      -170.456       170.456       1744.72       1915.18    
  46  0.413265     -0.883667      -234.689       234.689       1770.80       2005.48    
  47  0.541510E-02  -5.21856      -1385.97       1385.97       1889.46       3275.44    
  48  0.781613     -0.246396      -65.4390       65.4390       1705.34       1770.78    
  49  0.656825     -0.420337      -111.635       111.635       1868.49       1980.13    
  50  0.584791     -0.536501      -142.487       142.487       1827.18       1969.66    
  51  0.811204     -0.209236      -55.5700       55.5700       1735.45       1791.02    
  52  0.421027     -0.865059      -229.747       229.747       1747.59       1977.34    
  53  0.663739     -0.409866      -108.854       108.854       1666.68       1775.54    
  54  0.164765      -1.80323      -478.913       478.913       1776.78       2255.69    
  55  0.883187E-01  -2.42680      -644.523       644.523       1935.34       2579.87    
  56  0.825424     -0.191858      -50.9546       50.9546       1862.77       1913.72    
  57  0.201966E-01  -3.90224      -1036.38       1036.38       1810.05       2846.43    
  58  0.174898      -1.74355      -463.062       463.062       1838.76       2301.83    
  59  0.477008     -0.740222      -196.592       196.592       1637.85       1834.44    
  60  0.162167E-01  -4.12171      -1094.67       1094.67       2067.26       3161.93    
  61  0.378219     -0.972282      -258.224       258.224       1961.16       2219.39    
  62  0.980713     -0.194752E-01  -5.17233       5.17233       1763.87       1769.04    
  63  0.232487      -1.45892      -387.468       387.468       1996.05       2383.52    
  64  0.962055     -0.386832E-01  -10.2737       10.2737       1717.71       1727.98    
  65  0.761875     -0.271973      -72.2320       72.2320       1969.67       2041.90    
  66  0.673649     -0.395046      -104.918       104.918       1882.40       1987.32    
  67  0.979237     -0.209814E-01  -5.57235       5.57235       1580.67       1586.24    
  68  0.361942      -1.01627      -269.907       269.907       1698.61       1968.51    
  69  0.191552      -1.65259      -438.905       438.905       1909.06       2347.97    
  70  0.708040     -0.345254      -91.6945       91.6945       1984.36       2076.05    
  71  0.676759     -0.390440      -103.695       103.695       1915.64       2019.33    
  72  0.647357     -0.434857      -115.492       115.492       1407.76       1523.26    
  73  0.516122     -0.661412      -175.661       175.661       1761.73       1937.39    
  74  0.274129      -1.29416      -343.709       343.709       2001.89       2345.59    
loop,thermsimp(1:2)       80   106.986       380.686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       1407.31        129.66          0.72         30.18          1.25          0.04        161.85
Just calling func    0   0        161.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       1347.44        129.39          0.66         29.88          1.70          0.05        161.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    1407.3        2.091    -0.9231      3.412     -100.0     0.5301    
                     -0.8266     0.7744     -100.0      2.500      1.602    
                     -0.4997     0.3433      2.009      0.000     0.7208    
                      -1.156     -20.00      0.000      0.000    -0.9207    

                      -2.573      6228.     0.1113E+05 -572.2     -1451.    
                      -4.033     -5.578     -4.336     -15.33     -5.168    
                      -12.99     -2.820     -3033.      0.000     -1525.    

                       372.1      3932.      681.3      937.3      3108.    
                      -1028.    -0.6559E-01-0.1533      0.000    -0.1823    
                     -0.2114    -0.1692    -0.2180    -0.2725    -0.1191    

                     -0.7296     -1.776      1.382     0.1170     0.2005E-01
                      0.8541E-01-0.2670E-01-0.8111E-01-0.9138E-01-0.3060E-01
                     -0.9672E-01 0.4849E-01-0.2869     -2.176      1.382    

                      -1.632     -1.432     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.903      8.867      0.000     0.3231E-03
                      0.2151     0.2151      9.133      8.915     -8127.    

                     -0.1793E-03 0.2151     0.2151      9.767      9.094    
                      -6521.     0.3775E-03-0.6635     0.2151      9.367    
                       9.197     -4821.     0.1057E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1347.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       80
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       81
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      201     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -347.717       347.717       1264.33       1612.04    
   2  0.879265     -0.128669      -34.1725       34.1725       1412.16       1446.34    
   3  0.684902     -0.378479      -100.518       100.518       1407.76       1508.28    
   4  0.893896     -0.112166      -29.7895       29.7895       1389.10       1418.89    
   5  0.476761     -0.740739      -196.730       196.730       1545.03       1741.76    
   6  0.755167     -0.280817      -74.5808       74.5808       1580.67       1655.25    
   7  0.452407     -0.793173      -210.655       210.655       1561.33       1771.98    
   8  0.723906     -0.323093      -85.8088       85.8088       1555.06       1640.87    
   9  0.451260     -0.795711      -211.329       211.329       1613.97       1825.30    
  10  0.668265     -0.403071      -107.050       107.050       1576.82       1683.87    
  11  0.777249     -0.251995      -66.9262       66.9262       1580.47       1647.39    
  12  0.342240      -1.07224      -284.772       284.772       1632.39       1917.16    
  13  0.639156     -0.447606      -118.878       118.878       1717.71       1836.58    
  14  0.166924      -1.79022      -475.456       475.456       1719.19       2194.65    
  15  0.375260     -0.980137      -260.310       260.310       1439.42       1699.73    
  16  0.299730      -1.20487      -319.997       319.997       1356.13       1676.13    
  17  0.407119     -0.898650      -238.668       238.668       1569.79       1808.46    
  18  0.762992E-01  -2.57309      -683.376       683.376       1145.34       1828.71    
  19  0.281066      -1.26917      -337.072       337.072       1763.87       2100.94    
  20  0.220512      -1.51180      -401.512       401.512       1694.94       2096.45    
  21  0.389846     -0.942004      -250.182       250.182       1705.34       1955.52    
  22  0.660048     -0.415443      -110.336       110.336       1666.68       1777.02    
  23  0.150026      -1.89695      -503.802       503.802       1735.45       2239.25    
  24  0.113767      -2.17360      -577.276       577.276       1775.45       2352.73    
  25  0.810589     -0.209994      -55.7713       55.7713       1747.07       1802.84    
  26  0.247911      -1.39468      -370.408       370.408       1790.45       2160.86    
  27  0.408875     -0.894345      -237.525       237.525       1770.57       2008.09    
  28  0.310528      -1.16948      -310.597       310.597       1799.61       2110.20    
  29  0.663027     -0.410939      -109.139       109.139       1797.48       1906.62    
  30  0.798362     -0.225193      -59.8079       59.8079       1637.85       1697.65    
  31  0.564885     -0.571133      -151.685       151.685       1549.69       1701.38    
  32  0.473510E-02  -5.35275      -1421.61       1421.61       1630.67       3052.29    
  33  0.933475E-01  -2.37143      -629.816       629.816       1581.32       2211.13    
  34  0.931702     -0.707423E-01  -18.7881       18.7881       1407.55       1426.33    
  35  0.341741      -1.07370      -285.160       285.160       1736.08       2021.24    
  36  0.171330      -1.76417      -468.536       468.536       1619.56       2088.09    
  37  0.355860      -1.03322      -274.407       274.407       1780.87       2055.27    
  38  0.469639     -0.755790      -200.727       200.727       1673.73       1874.46    
  39  0.805376     -0.216446      -57.4848       57.4848       1862.77       1920.25    
  40  0.651615     -0.428301      -113.751       113.751       1744.72       1858.47    
  41  0.126831      -2.06490      -548.406       548.406       1761.73       2310.13    
  42  0.715737     -0.334442      -88.8229       88.8229       1698.61       1787.43    
  43  0.444007     -0.811915      -215.633       215.633       1827.18       2042.81    
  44  0.887105     -0.119791      -31.8148       31.8148       1519.51       1551.32    
  45  0.492139     -0.708993      -188.298       188.298       1747.59       1935.89    
  46  0.590315     -0.527098      -139.990       139.990       1868.49       2008.48    
  47  0.313130      -1.16114      -308.381       308.381       1882.40       2190.78    
  48  0.824070     -0.193500      -51.3908       51.3908       1770.80       1822.19    
  49  0.785026     -0.242039      -64.2820       64.2820       1582.86       1647.14    
  50  0.105781      -2.24638      -596.606       596.606       1915.64       2512.24    
  51  0.644933     -0.438608      -116.488       116.488       1969.67       2086.16    
  52  0.656932     -0.420175      -111.592       111.592       1795.55       1907.15    
  53  0.418239     -0.871703      -231.512       231.512       1984.36       2215.87    
  54  0.191132      -1.65479      -439.487       439.487       1844.08       2283.57    
  55  0.493587     -0.706055      -187.518       187.518       1800.90       1988.42    
  56  0.490289     -0.712761      -189.299       189.299       1619.79       1809.08    
  57  0.703124     -0.352222      -93.5451       93.5451       1961.16       2054.71    
  58  0.514219E-01  -2.96769      -788.175       788.175       1839.48       2627.65    
  59  0.967122     -0.334307E-01  -8.87871       8.87871       1776.78       1785.66    
  60  0.164565      -1.80445      -479.235       479.235       1809.33       2288.57    
  61  0.787129     -0.239363      -63.5713       63.5713       1838.76       1902.34    
  62  0.877224     -0.130993      -34.7898       34.7898       1608.08       1642.87    
  63  0.826666     -0.190355      -50.5554       50.5554       1781.61       1832.17    
  64  0.478850     -0.736368      -195.569       195.569       2001.89       2197.45    
  65  0.850214E-01  -2.46485      -654.629       654.629       1909.06       2563.69    
  66  0.752587     -0.284239      -75.4897       75.4897       1734.78       1810.27    
  67  0.286540      -1.24988      -331.949       331.949       1996.05       2328.00    
  68  0.581717     -0.541771      -143.886       143.886       1668.46       1812.35    
  69  0.907599     -0.969526E-01  -25.7492       25.7492       1935.34       1961.09    
  70  0.159227      -1.83743      -487.994       487.994       1810.05       2298.04    
  71  0.740279     -0.300729      -79.8691       79.8691       1736.53       1816.40    
  72  0.899153     -0.106302      -28.2321       28.2321       2067.26       2095.50    
  73  0.456914     -0.783261      -208.023       208.023       1889.46       2097.49    
  74  0.448831     -0.801110      -212.763       212.763       1347.44       1560.20    
loop,thermsimp(1:2)       81   347.717       34.1725    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       1843.67        129.07          0.64         30.45          1.28          0.04        161.48
Just calling func    0   0        161.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1843.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       81
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       82
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      202     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -1153.36       1153.36       1389.10       2542.46    
   2  0.906957E-01  -2.40025      -637.470       637.470       1407.55       2045.02    
   3  0.973677     -0.266758E-01  -7.08471       7.08471       1412.16       1419.25    
   4  0.764409     -0.268653      -71.3502       71.3502       1407.76       1479.11    
   5  0.647718     -0.434300      -115.344       115.344       1519.51       1634.85    
   6  0.450945     -0.796410      -211.515       211.515       1347.44       1558.95    
   7  0.342138      -1.07254      -284.851       284.851       1264.33       1549.18    
   8  0.491560     -0.710170      -188.611       188.611       1555.06       1743.67    
   9  0.728901     -0.316218      -83.9828       83.9828       1608.08       1692.07    
  10  0.361124      -1.01853      -270.508       270.508       1582.86       1853.36    
  11  0.187026      -1.67651      -445.256       445.256       1580.47       2025.72    
  12  0.560514     -0.578901      -153.748       153.748       1580.67       1734.42    
  13  0.218776      -1.51971      -403.612       403.612       1356.13       1759.75    
  14  0.109271      -2.21392      -587.985       587.985       1576.82       2164.81    
  15  0.263420E-01  -3.63659      -965.825       965.825       1637.85       2603.67    
  16  0.654642     -0.423667      -112.520       112.520       1439.42       1551.94    
  17  0.975959     -0.243343E-01  -6.46282       6.46282       1549.69       1556.16    
  18  0.107212      -2.23295      -593.038       593.038       1545.03       2138.07    
  19  0.972340     -0.280494E-01  -7.44951       7.44951       1561.33       1568.78    
  20  0.259158      -1.35032      -358.624       358.624       1666.68       2025.31    
  21  0.889970     -0.116568      -30.9586       30.9586       1776.78       1807.74    
  22  0.956672     -0.442943E-01  -11.7639       11.7639       1698.61       1710.37    
  23  0.299261      -1.20644      -320.412       320.412       1747.07       2067.48    
  24  0.114836      -2.16425      -574.793       574.793       1569.79       2144.58    
  25  0.728848     -0.316291      -84.0022       84.0022       1619.79       1703.79    
  26  0.650336     -0.430267      -114.273       114.273       1734.78       1849.05    
  27  0.816983     -0.202137      -53.6847       53.6847       1668.46       1722.15    
  28  0.507860     -0.677550      -179.947       179.947       1736.53       1916.47    
  29  0.920661     -0.826634E-01  -21.9542       21.9542       1770.80       1792.75    
  30  0.253772      -1.37132      -364.203       364.203       1613.97       1978.18    
  31  0.667512     -0.404198      -107.349       107.349       1145.34       1252.69    
  32  0.772715     -0.257844      -68.4797       68.4797       1781.61       1850.09    
  33  0.757620     -0.277573      -73.7193       73.7193       1717.71       1791.43    
  34  0.776421     -0.253060      -67.2091       67.2091       1744.72       1811.93    
  35  0.886642     -0.120314      -31.9537       31.9537       1673.73       1705.69    
  36  0.238693E-01  -3.73516      -992.004       992.004       1838.76       2830.77    
  37  0.303957      -1.19087      -316.278       316.278       1797.48       2113.76    
  38  0.875267     -0.133226      -35.3829       35.3829       1795.55       1830.94    
  39  0.144246      -1.93624      -514.236       514.236       1632.39       2146.63    
  40  0.993963     -0.605564E-02  -1.60829       1.60829       1862.77       1864.38    
  41  0.172168      -1.75928      -467.240       467.240       1747.59       2214.83    
  42  0.979713     -0.204952E-01  -5.44323       5.44323       1705.34       1710.78    
  43  0.938694     -0.632658E-01  -16.8025       16.8025       1935.34       1952.14    
  44  0.716061     -0.333990      -88.7029       88.7029       1800.90       1889.60    
  45  0.764601     -0.268402      -71.2836       71.2836       1770.57       1841.85    
  46  0.546951     -0.603396      -160.253       160.253       1868.49       2028.75    
  47  0.104442      -2.25912      -599.989       599.989       1736.08       2336.07    
  48  0.669980     -0.400508      -106.369       106.369       1827.18       1933.54    
  49  0.255048      -1.36630      -362.870       362.870       1961.16       2324.03    
  50  0.761153     -0.272921      -72.4838       72.4838       1780.87       1853.35    
  51  0.273269      -1.29730      -344.544       344.544       1969.67       2314.21    
  52  0.789047E-01  -2.53951      -674.458       674.458       1619.56       2294.02    
  53  0.723703     -0.323374      -85.8834       85.8834       2067.26       2153.15    
  54  0.535422     -0.624699      -165.911       165.911       1694.94       1860.85    
  55  0.394266     -0.930730      -247.188       247.188       1889.46       2136.65    
  56  0.334209      -1.09599      -291.078       291.078       1763.87       2054.95    
  57  0.713084     -0.338156      -89.8092       89.8092       1799.61       1889.42    
  58  0.335811      -1.09121      -289.808       289.808       1790.45       2080.26    
  59  0.877329     -0.130873      -34.7580       34.7580       1882.40       1917.16    
  60  0.804760     -0.217212      -57.6882       57.6882       1719.19       1776.88    
  61  0.676806     -0.390371      -103.677       103.677       2001.89       2105.56    
  62  0.139025      -1.97310      -524.027       524.027       1581.32       2105.35    
  63  0.453238     -0.791339      -210.168       210.168       1984.36       2194.52    
  64  0.174629      -1.74509      -463.471       463.471       1735.45       2198.92    
  65  0.770625     -0.260553      -69.1990       69.1990       1844.08       1913.28    
  66  0.636484     -0.451797      -119.991       119.991       1809.33       1929.32    
  67  0.336462      -1.08927      -289.294       289.294       1810.05       2099.34    
  68  0.534955     -0.625573      -166.143       166.143       1761.73       1927.87    
  69  0.847446E-01  -2.46811      -655.494       655.494       1996.05       2651.55    
  70  0.917274     -0.863490E-01  -22.9330       22.9330       1775.45       1798.39    
  71  0.518675     -0.656478      -174.351       174.351       1915.64       2089.99    
  72  0.975471E-01  -2.32742      -618.128       618.128       1909.06       2527.19    
  73  0.863693     -0.146538      -38.9185       38.9185       1839.48       1878.40    
  74  0.475431     -0.743534      -197.472       197.472       1843.67       2041.14    
loop,thermsimp(1:2)       82   1153.36       637.470    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204       3580.48        128.56          0.68         30.74          0.56          0.04        160.57
Just calling func    0   0        160.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205       1560.83        128.95          0.64         30.37          1.33          0.04        161.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1560.83
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       82
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       83
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      204     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -131.655       131.655       1145.34       1276.99    
   2  0.266275      -1.32323      -351.429       351.429       1412.16       1763.59    
   3  0.545538     -0.605984      -160.940       160.940       1407.76       1568.70    
   4  0.196234      -1.62845      -432.491       432.491       1264.33       1696.82    
   5  0.786411     -0.240275      -63.8136       63.8136       1439.42       1503.23    
   6  0.453912     -0.789853      -209.773       209.773       1549.69       1759.47    
   7  0.900549     -0.104751      -27.8203       27.8203       1347.44       1375.26    
   8  0.339919      -1.07905      -286.579       286.579       1561.33       1847.91    
   9  0.511643     -0.670128      -177.976       177.976       1519.51       1697.48    
  10  0.628202     -0.464894      -123.469       123.469       1608.08       1731.55    
  11  0.672886E-01  -2.69876      -716.752       716.752       1619.79       2336.54    
  12  0.518493     -0.656829      -174.444       174.444       1673.73       1848.18    
  13  0.994926     -0.508642E-02  -1.35088       1.35088       1698.61       1699.96    
  14  0.733191     -0.310349      -82.4241       82.4241       1705.34       1787.77    
  15  0.952818     -0.483318E-01  -12.8362       12.8362       1668.46       1681.30    
  16  0.735955     -0.306586      -81.4248       81.4248       1580.67       1662.09    
  17  0.743149     -0.296859      -78.8413       78.8413       1555.06       1633.90    
  18  0.549375     -0.598975      -159.079       159.079       1356.13       1515.21    
  19  0.355140      -1.03524      -274.945       274.945       1719.19       1994.14    
  20  0.482165     -0.729469      -193.736       193.736       1717.71       1911.44    
  21  0.577197     -0.549571      -145.958       145.958       1770.80       1916.75    
  22  0.107316E-01  -4.53456      -1204.31       1204.31       1775.45       2979.77    
  23  0.923969     -0.790764E-01  -21.0015       21.0015       1776.78       1797.78    
  24  0.810451     -0.210164      -55.8165       55.8165       1744.72       1800.54    
  25  0.143346      -1.94249      -515.897       515.897       1795.55       2311.45    
  26  0.994184     -0.583318E-02  -1.54921       1.54921       1770.57       1772.12    
  27  0.870737     -0.138415      -36.7610       36.7610       1734.78       1771.54    
  28  0.970691     -0.297469E-01  -7.90035       7.90035       1781.61       1789.51    
  29  0.351269      -1.04620      -277.856       277.856       1780.87       2058.72    
  30  0.464982     -0.765756      -203.373       203.373       1582.86       1786.23    
  31  0.921785     -0.814432E-01  -21.6301       21.6301       1694.94       1716.57    
  32  0.110512      -2.20263      -584.986       584.986       1862.77       2447.75    
  33  0.261408      -1.34167      -356.328       356.328       1839.48       2195.81    
  34  0.908908     -0.955118E-01  -25.3665       25.3665       1799.61       1824.97    
  35  0.819412     -0.199168      -52.8961       52.8961       1800.90       1853.80    
  36  0.466482     -0.762536      -202.518       202.518       1844.08       2046.60    
  37  0.717237     -0.332349      -88.2670       88.2670       1736.53       1824.79    
  38  0.802331     -0.220234      -58.4908       58.4908       1882.40       1940.89    
  39  0.949390     -0.519355E-01  -13.7933       13.7933       1761.73       1775.52    
  40  0.258511      -1.35282      -359.288       359.288       1809.33       2168.62    
  41  0.270423      -1.30777      -347.324       347.324       1827.18       2174.50    
  42  0.366439      -1.00392      -266.627       266.627       1935.34       2201.97    
  43  0.934403     -0.678476E-01  -18.0193       18.0193       1613.97       1631.99    
  44  0.956654     -0.443133E-01  -11.7690       11.7690       1666.68       1678.45    
  45  0.377790     -0.973417      -258.525       258.525       1580.47       1838.99    
  46  0.203667      -1.59127      -422.618       422.618       1868.49       2291.11    
  47  0.673892     -0.394685      -104.822       104.822       1843.67       1948.49    
  48  0.347380      -1.05734      -280.813       280.813       1407.55       1688.36    
  49  0.144339      -1.93559      -514.065       514.065       1763.87       2277.93    
  50  0.728571     -0.316670      -84.1028       84.1028       1747.07       1831.17    
  51  0.243065      -1.41443      -375.651       375.651       1790.45       2166.10    
  52  0.686711     -0.375841      -99.8179       99.8179       1915.64       2015.45    
  53  0.159440      -1.83609      -487.638       487.638       1810.05       2297.69    
  54  0.426258     -0.852711      -226.467       226.467       1581.32       1807.79    
  55  0.929286     -0.733386E-01  -19.4777       19.4777       2001.89       2021.36    
  56  0.335987E-01  -3.39327      -901.202       901.202       1797.48       2698.68    
  57  0.539383     -0.617330      -163.954       163.954       1889.46       2053.42    
  58  0.384768     -0.955116      -253.665       253.665       1545.03       1798.69    
  59  0.267956      -1.31693      -349.758       349.758       1569.79       1919.55    
  60  0.116616      -2.14887      -570.708       570.708       1632.39       2203.10    
  61  0.852032     -0.160131      -42.5285       42.5285       2067.26       2109.79    
  62  0.456598     -0.783952      -208.206       208.206       1576.82       1785.03    
  63  0.157616      -1.84759      -490.693       490.693       1984.36       2475.05    
  64  0.928361     -0.743348E-01  -19.7422       19.7422       1735.45       1755.19    
  65  0.200440      -1.60724      -426.859       426.859       1747.59       2174.45    
  66  0.106743      -2.23733      -594.202       594.202       1619.56       2213.76    
  67  0.786346     -0.240359      -63.8358       63.8358       1969.67       2033.50    
  68  0.481815     -0.730195      -193.929       193.929       1961.16       2155.09    
  69  0.410111     -0.891327      -236.723       236.723       1736.08       1972.80    
  70  0.768538     -0.263265      -69.9192       69.9192       1909.06       1978.98    
  71  0.693325     -0.366257      -97.2725       97.2725       1389.10       1486.38    
  72  0.462914     -0.770214      -204.557       204.557       1637.85       1842.40    
  73  0.923938     -0.791099E-01  -21.0104       21.0104       1996.05       2017.06    
  74  0.548506     -0.600557      -159.499       159.499       1560.83       1720.33    
loop,thermsimp(1:2)       83   131.655       351.429    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       2091.34        129.63          0.71         30.56          0.55          0.04        161.50
Just calling func    0   0        161.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2091.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       83
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       84
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      205     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -148.069       148.069       1145.34       1293.41    
   2  0.468879     -0.757411      -201.157       201.157       1347.44       1548.59    
   3  0.886741E-01  -2.42279      -643.457       643.457       1389.10       2032.56    
   4  0.211783      -1.55219      -412.239       412.239       1439.42       1851.66    
   5  0.573306     -0.556336      -147.755       147.755       1356.13       1503.89    
   6  0.401711     -0.912021      -242.219       242.219       1407.76       1649.98    
   7  0.505706     -0.681800      -181.076       181.076       1613.97       1795.05    
   8  0.603045     -0.505763      -134.323       134.323       1555.06       1689.38    
   9  0.696575     -0.361580      -96.0304       96.0304       1580.67       1676.70    
  10  0.294614      -1.22209      -324.569       324.569       1666.68       1991.25    
  11  0.527550     -0.639511      -169.845       169.845       1668.46       1838.31    
  12  0.657157     -0.419832      -111.501       111.501       1407.55       1519.05    
  13  0.627866     -0.465428      -123.611       123.611       1264.33       1387.94    
  14  0.993353E-02  -4.61184      -1224.84       1224.84       1519.51       2744.34    
  15  0.885166E-01  -2.42456      -643.929       643.929       1698.61       2342.53    
  16  0.265764      -1.32515      -351.940       351.940       1694.94       2046.88    
  17  0.446403     -0.806534      -214.203       214.203       1560.83       1775.04    
  18  0.287864      -1.24527      -330.725       330.725       1608.08       1938.81    
  19  0.926928E-01  -2.37846      -631.685       631.685       1735.45       2367.14    
  20  0.394849     -0.929252      -246.796       246.796       1549.69       1796.49    
  21  0.540746     -0.614805      -163.283       163.283       1412.16       1575.45    
  22  0.846435     -0.166721      -44.2788       44.2788       1734.78       1779.06    
  23  0.417037     -0.874580      -232.275       232.275       1770.57       2002.84    
  24  0.210713      -1.55726      -413.585       413.585       1761.73       2175.31    
  25  0.764669     -0.268312      -71.2597       71.2597       1576.82       1648.08    
  26  0.219471E-01  -3.81912      -1014.30       1014.30       1582.86       2597.16    
  27  0.200728      -1.60581      -426.479       426.479       1705.34       2131.82    
  28  0.572660     -0.557463      -148.054       148.054       1781.61       1929.67    
  29  0.599083E-01  -2.81494      -747.607       747.607       1776.78       2524.39    
  30  0.214614      -1.53891      -408.713       408.713       1545.03       1953.74    
  31  0.489389     -0.714598      -189.787       189.787       1744.72       1934.51    
  32  0.162616      -1.81636      -482.400       482.400       1581.32       2063.72    
  33  0.710022     -0.342459      -90.9521       90.9521       1736.53       1827.48    
  34  0.753583     -0.282916      -75.1384       75.1384       1799.61       1874.74    
  35  0.743317     -0.296633      -78.7813       78.7813       1747.07       1825.85    
  36  0.155416      -1.86165      -494.427       494.427       1580.47       2074.89    
  37  0.643355     -0.441059      -117.139       117.139       1637.85       1754.98    
  38  0.656098     -0.421444      -111.929       111.929       1561.33       1673.26    
  39  0.327550      -1.11611      -296.423       296.423       1673.73       1970.16    
  40  0.192244      -1.64899      -437.948       437.948       1800.90       2238.85    
  41  0.433590     -0.835657      -221.938       221.938       1717.71       1939.65    
  42  0.788561     -0.237545      -63.0886       63.0886       1770.80       1833.88    
  43  0.978028     -0.222173E-01  -5.90059       5.90059       1569.79       1575.69    
  44  0.110322      -2.20435      -585.444       585.444       1882.40       2467.84    
  45  0.795332     -0.228995      -60.8178       60.8178       1843.67       1904.49    
  46  0.497518E-01  -3.00071      -796.944       796.944       1736.08       2533.03    
  47  0.852459     -0.159631      -42.3955       42.3955       1909.06       1951.46    
  48  0.133240      -2.01560      -535.314       535.314       1719.19       2254.51    
  49  0.671163     -0.398743      -105.900       105.900       1915.64       2021.54    
  50  0.245122      -1.40600      -373.413       373.413       1996.05       2369.47    
  51  0.820498     -0.197843      -52.5442       52.5442       2001.89       2054.43    
  52  0.422422     -0.861751      -228.868       228.868       1969.67       2198.54    
  53  0.946612E-01  -2.35745      -626.104       626.104       1844.08       2470.19    
  54  0.902486     -0.102603      -27.2497       27.2497       1889.46       1916.71    
  55  0.858585     -0.152469      -40.4935       40.4935       1780.87       1821.36    
  56  0.713346     -0.337789      -89.7117       89.7117       2067.26       2156.98    
  57  0.497785     -0.697587      -185.269       185.269       1961.16       2146.43    
  58  0.971461     -0.289536E-01  -7.68966       7.68966       1790.45       1798.14    
  59  0.714587     -0.336051      -89.2502       89.2502       1809.33       1898.58    
  60  0.194565E-01  -3.93958      -1046.29       1046.29       1747.59       2793.89    
  61  0.675786E-01  -2.69446      -715.610       715.610       1827.18       2542.79    
  62  0.924162     -0.788681E-01  -20.9462       20.9462       1839.48       1860.42    
  63  0.988536     -0.115299E-01  -3.06216       3.06216       1935.34       1938.40    
  64  0.136917      -1.98838      -528.084       528.084       1632.39       2160.48    
  65  0.529964     -0.634945      -168.632       168.632       1619.56       1788.19    
  66  0.369278     -0.996204      -264.577       264.577       1763.87       2028.44    
  67  0.186364      -1.68006      -446.198       446.198       1868.49       2314.69    
  68  0.314345      -1.15726      -307.352       307.352       1810.05       2117.40    
  69  0.451257     -0.795718      -211.331       211.331       1795.55       2006.88    
  70  0.194510      -1.63727      -434.836       434.836       1619.79       2054.62    
  71  0.690618     -0.370168      -98.3111       98.3111       1862.77       1961.08    
  72  0.828229     -0.188466      -50.0537       50.0537       1984.36       2034.41    
  73  0.161272      -1.82466      -484.603       484.603       1797.48       2282.08    
  74  0.425677E-01  -3.15666      -838.363       838.363       2091.34       2929.71    
loop,thermsimp(1:2)       84   148.069       201.157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       1775.45        129.69          0.68         30.19          1.54          0.05        162.14
Just calling func    0   0        162.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1775.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       84
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       85
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      206     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -430.785       430.785       1145.34       1576.12    
   2  0.793097     -0.231809      -61.5652       61.5652       1264.33       1325.89    
   3  0.261081      -1.34293      -356.661       356.661       1356.13       1712.80    
   4  0.912198     -0.918984E-01  -24.4069       24.4069       1407.55       1431.95    
   5  0.493539     -0.706153      -187.544       187.544       1347.44       1534.98    
   6  0.721001     -0.327115      -86.8768       86.8768       1412.16       1499.04    
   7  0.578790     -0.546816      -145.226       145.226       1569.79       1715.01    
   8  0.684127     -0.379612      -100.819       100.819       1576.82       1677.64    
   9  0.627712     -0.465674      -123.676       123.676       1407.76       1531.44    
  10  0.858540     -0.152522      -40.5076       40.5076       1561.33       1601.84    
  11  0.712254E-01  -2.64191      -701.651       701.651       1580.67       2282.32    
  12  0.927250     -0.755316E-01  -20.0601       20.0601       1555.06       1575.12    
  13  0.458073     -0.780727      -207.350       207.350       1637.85       1845.20    
  14  0.940004     -0.618714E-01  -16.4321       16.4321       1560.83       1577.26    
  15  0.322549      -1.13150      -300.510       300.510       1734.78       2035.29    
  16  0.939473     -0.624358E-01  -16.5820       16.5820       1619.56       1636.14    
  17  0.726080     -0.320095      -85.0126       85.0126       1613.97       1698.99    
  18  0.602088E-02  -5.11252      -1357.81       1357.81       1549.69       2907.50    
  19  0.735289     -0.307492      -81.6654       81.6654       1790.45       1872.12    
  20  0.847617     -0.165326      -43.9083       43.9083       1780.87       1824.77    
  21  0.747190E-01  -2.59402      -688.934       688.934       1747.07       2436.00    
  22  0.248374      -1.39282      -369.912       369.912       1736.53       2106.44    
  23  0.350184      -1.04930      -278.677       278.677       1770.80       2049.47    
  24  0.327739E-03  -8.02329      -2130.87       2130.87       1668.46       3799.33    
  25  0.130012      -2.04013      -541.828       541.828       1439.42       1981.25    
  26  0.609791     -0.494639      -131.369       131.369       1839.48       1970.85    
  27  0.793414     -0.231410      -61.4591       61.4591       1799.61       1861.07    
  28  0.962567     -0.381519E-01  -10.1326       10.1326       1809.33       1819.46    
  29  0.499469     -0.694211      -184.372       184.372       1843.67       2028.04    
  30  0.887491     -0.119357      -31.6995       31.6995       1889.46       1921.16    
  31  0.136374      -1.99236      -529.140       529.140       1781.61       2310.75    
  32  0.292356      -1.22978      -326.612       326.612       1744.72       2071.34    
  33  0.301564      -1.19877      -318.377       318.377       1935.34       2253.72    
  34  0.352543      -1.04258      -276.894       276.894       1608.08       1884.98    
  35  0.483726     -0.726236      -192.878       192.878       1717.71       1910.58    
  36  0.410499     -0.890381      -236.472       236.472       1909.06       2145.54    
  37  0.458111     -0.780644      -207.328       207.328       1545.03       1752.36    
  38  0.670071     -0.400372      -106.333       106.333       1862.77       1969.10    
  39  0.175486      -1.74020      -462.170       462.170       1673.73       2135.90    
  40  0.798907     -0.224511      -59.6268       59.6268       1666.68       1726.31    
  41  0.270487      -1.30753      -347.262       347.262       1770.57       2117.83    
  42  0.480368     -0.733202      -194.728       194.728       1795.55       1990.28    
  43  0.658406     -0.417933      -110.997       110.997       1915.64       2026.63    
  44  0.937976     -0.640304E-01  -17.0055       17.0055       1763.87       1780.87    
  45  0.710083     -0.342373      -90.9292       90.9292       1389.10       1480.03    
  46  0.567340     -0.566797      -150.533       150.533       1984.36       2134.89    
  47  0.201426      -1.60233      -425.556       425.556       1694.94       2120.50    
  48  0.660313     -0.415042      -110.229       110.229       2001.89       2112.11    
  49  0.524008     -0.646249      -171.634       171.634       1619.79       1791.42    
  50  0.513616     -0.666280      -176.954       176.954       1581.32       1758.27    
  51  0.951218     -0.500122E-01  -13.2825       13.2825       1580.47       1593.75    
  52  0.703465     -0.351737      -93.4163       93.4163       1810.05       1903.47    
  53  0.702859     -0.352600      -93.6453       93.6453       1705.34       1798.99    
  54  0.453067     -0.791715      -210.268       210.268       1961.16       2171.43    
  55  0.202116      -1.59891      -424.648       424.648       2067.26       2491.91    
  56  0.491988     -0.709301      -188.380       188.380       1632.39       1820.77    
  57  0.632131     -0.458659      -121.813       121.813       1761.73       1883.54    
  58  0.911086     -0.931178E-01  -24.7307       24.7307       1969.67       1994.40    
  59  0.888750     -0.117939      -31.3229       31.3229       1800.90       1832.22    
  60  0.468235     -0.758785      -201.522       201.522       1719.19       1920.72    
  61  0.971366     -0.290520E-01  -7.71579       7.71579       1797.48       1805.19    
  62  0.622947     -0.473294      -125.700       125.700       1868.49       1994.19    
  63  0.837000     -0.177932      -47.2560       47.2560       1698.61       1745.86    
  64  0.495636     -0.701913      -186.418       186.418       1735.45       1921.87    
  65  0.251386      -1.38077      -366.712       366.712       1996.05       2362.77    
  66  0.580065E-01  -2.84720      -756.175       756.175       1882.40       2638.57    
  67  0.601569     -0.508214      -134.974       134.974       1844.08       1979.06    
  68  0.249260      -1.38926      -368.967       368.967       1776.78       2145.75    
  69  0.309647E-01  -3.47491      -922.885       922.885       1736.08       2658.97    
  70  0.653539     -0.425353      -112.967       112.967       1827.18       1940.14    
  71  0.987034     -0.130508E-01  -3.46610       3.46610       1582.86       1586.32    
  72  0.712168     -0.339441      -90.1506       90.1506       1519.51       1609.66    
  73  0.935651     -0.665123E-01  -17.6647       17.6647       1747.59       1765.26    
  74  0.269485      -1.31124      -348.247       348.247       1775.45       2123.70    
loop,thermsimp(1:2)       85   430.785       61.5652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       1525.22        129.93          0.70         30.44          0.94          0.04        162.04
Just calling func    0   0        162.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209       1445.71        129.81          0.68         30.37          0.75          0.05        161.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1445.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       85
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       86
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      208     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -203.431       203.431       1264.33       1467.76    
   2  0.948887     -0.524654E-01  -13.9340       13.9340       1407.55       1421.48    
   3  0.532332     -0.630488      -167.448       167.448       1389.10       1556.55    
   4  0.374267     -0.982785      -261.013       261.013       1412.16       1673.18    
   5  0.694531     -0.364519      -96.8109       96.8109       1407.76       1504.57    
   6  0.414371     -0.880994      -233.979       233.979       1347.44       1581.42    
   7  0.208827E-01  -3.86883      -1027.50       1027.50       1555.06       2582.57    
   8  0.627187     -0.466511      -123.898       123.898       1145.34       1269.24    
   9  0.148799E-01  -4.20774      -1117.51       1117.51       1560.83       2678.35    
  10  0.809008     -0.211946      -56.2898       56.2898       1582.86       1639.15    
  11  0.647680     -0.434359      -115.359       115.359       1580.47       1695.83    
  12  0.289351      -1.24012      -329.357       329.357       1561.33       1890.68    
  13  0.222457      -1.50302      -399.181       399.181       1519.51       1918.69    
  14  0.374268     -0.982782      -261.013       261.013       1619.56       1880.57    
  15  0.785765     -0.241097      -64.0318       64.0318       1576.82       1640.86    
  16  0.298051      -1.21049      -321.489       321.489       1613.97       1935.46    
  17  0.725075     -0.321480      -85.3804       85.3804       1356.13       1441.52    
  18  0.386364     -0.950976      -252.565       252.565       1569.79       1822.35    
  19  0.631686     -0.459363      -122.000       122.000       1666.68       1788.68    
  20  0.688282     -0.373557      -99.2113       99.2113       1698.61       1797.82    
  21  0.373817     -0.983990      -261.333       261.333       1545.03       1806.36    
  22  0.219845      -1.51483      -402.318       402.318       1581.32       1983.64    
  23  0.926271     -0.765889E-01  -20.3409       20.3409       1747.59       1767.93    
  24  0.618127     -0.481061      -127.763       127.763       1763.87       1891.63    
  25  0.176216      -1.73604      -461.068       461.068       1619.79       2080.85    
  26  0.742943     -0.297136      -78.9150       78.9150       1705.34       1784.26    
  27  0.357690      -1.02809      -273.045       273.045       1797.48       2070.52    
  28  0.478359     -0.737394      -195.841       195.841       1809.33       2005.17    
  29  0.395976     -0.926401      -246.038       246.038       1632.39       1878.43    
  30  0.803186     -0.219169      -58.2081       58.2081       1780.87       1839.07    
  31  0.231845      -1.46168      -388.202       388.202       1800.90       2189.10    
  32  0.808968     -0.211996      -56.3031       56.3031       1637.85       1694.15    
  33  0.579217     -0.546078      -145.030       145.030       1799.61       1944.64    
  34  0.384357     -0.956183      -253.948       253.948       1790.45       2044.40    
  35  0.856367     -0.155057      -41.1808       41.1808       1761.73       1802.91    
  36  0.265661      -1.32553      -352.042       352.042       1608.08       1960.13    
  37  0.288915      -1.24162      -329.757       329.757       1810.05       2139.81    
  38  0.224915      -1.49203      -396.262       396.262       1717.71       2113.97    
  39  0.685944     -0.376959      -100.115       100.115       1719.19       1819.31    
  40  0.265936      -1.32450      -351.767       351.767       1889.46       2241.23    
  41  0.412966     -0.884389      -234.881       234.881       1735.45       1970.33    
  42  0.440796     -0.819173      -217.560       217.560       1827.18       2044.74    
  43  0.572522     -0.557705      -148.118       148.118       1862.77       2010.89    
  44  0.798412     -0.225131      -59.7915       59.7915       1839.48       1899.27    
  45  0.127097      -2.06281      -547.851       547.851       1844.08       2391.94    
  46  0.243397      -1.41306      -375.289       375.289       1439.42       1814.71    
  47  0.322195      -1.13260      -300.801       300.801       1795.55       2096.35    
  48  0.512728     -0.668011      -177.414       177.414       1868.49       2045.91    
  49  0.786191     -0.240556      -63.8881       63.8881       1969.67       2033.56    
  50  0.733079     -0.310501      -82.4645       82.4645       1915.64       1998.10    
  51  0.601364     -0.508554      -135.065       135.065       1843.67       1978.73    
  52  0.348529      -1.05403      -279.936       279.936       1734.78       2014.72    
  53  0.923986     -0.790584E-01  -20.9968       20.9968       1770.80       1791.79    
  54  0.843742     -0.169908      -45.1251       45.1251       1744.72       1789.85    
  55  0.723581     -0.323543      -85.9282       85.9282       1736.53       1822.45    
  56  0.378158     -0.972444      -258.267       258.267       2001.89       2260.15    
  57  0.463644     -0.768638      -204.139       204.139       1770.57       1974.71    
  58  0.427569     -0.849641      -225.652       225.652       1694.94       1920.59    
  59  0.235852      -1.44455      -383.651       383.651       1775.45       2159.10    
  60  0.203797      -1.59063      -422.448       422.448       1984.36       2406.80    
  61  0.146982E-02  -6.52261      -1732.31       1732.31       1673.73       3406.04    
  62  0.681525     -0.383422      -101.831       101.831       1909.06       2010.89    
  63  0.931276     -0.711992E-01  -18.9095       18.9095       1776.78       1795.69    
  64  0.581849     -0.541545      -143.826       143.826       1961.16       2104.99    
  65  0.652684     -0.426663      -113.315       113.315       1935.34       2048.66    
  66  0.388365     -0.945809      -251.193       251.193       1580.67       1831.86    
  67  0.216086      -1.53208      -406.897       406.897       1781.61       2188.51    
  68  0.409967     -0.891679      -236.817       236.817       1996.05       2232.87    
  69  0.440345     -0.820196      -217.832       217.832       1747.07       1964.90    
  70  0.507524E-01  -2.98080      -791.655       791.655       2067.26       2858.92    
  71  0.734141     -0.309054      -82.0802       82.0802       1882.40       1964.48    
  72  0.701795     -0.354114      -94.0473       94.0473       1736.08       1830.13    
  73  0.741735     -0.298763      -79.3471       79.3471       1549.69       1629.04    
  74  0.619311     -0.479148      -127.255       127.255       1445.71       1572.97    
loop,thermsimp(1:2)       86   203.431       13.9340    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       2201.31        129.70          0.70         30.44          1.25          0.05        162.14
Just calling func    0   0        162.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2201.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       86
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       87
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      209     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -451.079       451.079       1145.34       1596.42    
   2  0.721345     -0.326637      -86.7501       86.7501       1407.55       1494.30    
   3  0.842493     -0.171390      -45.5185       45.5185       1356.13       1401.65    
   4  0.260540      -1.34500      -357.211       357.211       1264.33       1621.54    
   5  0.782605     -0.245127      -65.1022       65.1022       1407.76       1472.87    
   6  0.208492      -1.56785      -416.399       416.399       1389.10       1805.50    
   7  0.290568E-01  -3.53850      -939.774       939.774       1445.71       2385.49    
   8  0.673682     -0.394997      -104.905       104.905       1347.44       1452.34    
   9  0.399393     -0.917808      -243.756       243.756       1549.69       1793.45    
  10  0.966971     -0.335863E-01  -8.92004       8.92004       1582.86       1591.78    
  11  0.390645     -0.939956      -249.638       249.638       1576.82       1826.46    
  12  0.259548      -1.34881      -358.225       358.225       1412.16       1770.39    
  13  0.260765      -1.34413      -356.982       356.982       1637.85       1994.83    
  14  0.110601E-01  -4.50441      -1196.31       1196.31       1580.47       2776.77    
  15  0.727710     -0.317852      -84.4169       84.4169       1747.59       1832.01    
  16  0.717076     -0.332574      -88.3268       88.3268       1705.34       1793.67    
  17  0.612129     -0.490811      -130.352       130.352       1666.68       1797.03    
  18  0.589376     -0.528691      -140.413       140.413       1744.72       1885.14    
  19  0.541615     -0.613199      -162.857       162.857       1770.80       1933.65    
  20  0.330403      -1.10744      -294.120       294.120       1776.78       2070.90    
  21  0.229530      -1.47172      -390.867       390.867       1698.61       2089.47    
  22  0.564010     -0.572684      -152.096       152.096       1761.73       1913.82    
  23  0.454226     -0.789161      -209.589       209.589       1545.03       1754.62    
  24  0.579528     -0.545541      -144.888       144.888       1439.42       1584.31    
  25  0.245500      -1.40446      -373.003       373.003       1719.19       2092.20    
  26  0.708019     -0.345284      -91.7023       91.7023       1569.79       1661.49    
  27  0.300215      -1.20326      -319.568       319.568       1736.53       2056.09    
  28  0.721461     -0.326478      -86.7076       86.7076       1736.08       1822.79    
  29  0.326772      -1.11849      -297.055       297.055       1580.67       1877.72    
  30  0.580879     -0.543212      -144.269       144.269       1780.87       1925.14    
  31  0.963075     -0.376241E-01  -9.99241       9.99241       1632.39       1642.38    
  32  0.656935     -0.420170      -111.591       111.591       1619.56       1731.15    
  33  0.908335     -0.961416E-01  -25.5338       25.5338       1561.33       1586.86    
  34  0.765938     -0.266654      -70.8195       70.8195       1763.87       1834.69    
  35  0.497301     -0.698561      -185.527       185.527       1839.48       2025.00    
  36  0.833603     -0.181997      -48.3358       48.3358       1519.51       1567.84    
  37  0.433057     -0.836886      -222.265       222.265       1694.94       1917.21    
  38  0.349547      -1.05112      -279.161       279.161       1613.97       1893.14    
  39  0.142838      -1.94604      -516.841       516.841       1799.61       2316.45    
  40  0.326780      -1.11847      -297.049       297.049       1608.08       1905.13    
  41  0.707709     -0.345723      -91.8189       91.8189       1882.40       1974.22    
  42  0.914339     -0.895538E-01  -23.7842       23.7842       1747.07       1770.85    
  43  0.392800     -0.934454      -248.177       248.177       1735.45       1983.63    
  44  0.434772     -0.832933      -221.215       221.215       1770.57       1991.78    
  45  0.229545      -1.47165      -390.850       390.850       1843.67       2234.52    
  46  0.661281     -0.413577      -109.840       109.840       1581.32       1691.16    
  47  0.459966     -0.776602      -206.254       206.254       1915.64       2121.89    
  48  0.352439      -1.04288      -276.973       276.973       1809.33       2086.30    
  49  0.490345     -0.712647      -189.268       189.268       1862.77       2052.04    
  50  0.837788     -0.176990      -47.0059       47.0059       1909.06       1956.07    
  51  0.247493      -1.39637      -370.856       370.856       1734.78       2105.64    
  52  0.221382      -1.50787      -400.467       400.467       1969.67       2370.13    
  53  0.374412     -0.982399      -260.911       260.911       1790.45       2051.36    
  54  0.170580      -1.76855      -469.701       469.701       1827.18       2296.88    
  55  0.464054     -0.767755      -203.904       203.904       1868.49       2072.40    
  56  0.936961     -0.651140E-01  -17.2933       17.2933       1935.34       1952.64    
  57  0.302357      -1.19615      -317.679       317.679       1797.48       2115.16    
  58  0.572748E-01  -2.85990      -759.546       759.546       1619.79       2379.33    
  59  0.495156     -0.702883      -186.675       186.675       1795.55       1982.23    
  60  0.101162      -2.29104      -608.466       608.466       1961.16       2569.63    
  61  0.786435E-02  -4.84542      -1286.87       1286.87       1717.71       3004.58    
  62  0.960492     -0.403100E-01  -10.7057       10.7057       1810.05       1820.76    
  63  0.902616     -0.102458      -27.2114       27.2114       1775.45       1802.66    
  64  0.646986     -0.435430      -115.644       115.644       1781.61       1897.26    
  65  0.218936      -1.51897      -403.417       403.417       1800.90       2204.32    
  66  0.491829     -0.709625      -188.466       188.466       1996.05       2184.52    
  67  0.873324     -0.135448      -35.9731       35.9731       1889.46       1925.44    
  68  0.419066     -0.869727      -230.987       230.987       2001.89       2232.87    
  69  0.390022     -0.941553      -250.063       250.063       1844.08       2094.15    
  70  0.843189     -0.170564      -45.2992       45.2992       1984.36       2029.65    
  71  0.992789     -0.723678E-02  -1.92198       1.92198       1555.06       1556.98    
  72  0.694490     -0.364577      -96.8263       96.8263       1560.83       1657.66    
  73  0.329411      -1.11045      -294.919       294.919       2067.26       2362.18    
  74  0.445795     -0.807896      -214.565       214.565       2201.31       2415.88    
loop,thermsimp(1:2)       87   451.079       86.7501    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       1280.04        129.74          0.69         30.45          1.09          0.05        162.01
Just calling func    0   0        162.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212       1240.71        129.28          0.66         30.25          1.78          0.04        162.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1240.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       87
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       88
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      211     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -401.913       401.913       1356.13       1758.05    
   2  0.246752E-01  -3.70196      -983.186       983.186       1347.44       2330.62    
   3  0.679039     -0.387076      -102.802       102.802       1407.76       1510.57    
   4  0.709027     -0.343862      -91.3246       91.3246       1407.55       1498.87    
   5  0.577754     -0.548608      -145.702       145.702       1555.06       1700.76    
   6  0.738694     -0.302871      -80.4382       80.4382       1519.51       1599.94    
   7  0.181723      -1.70527      -452.895       452.895       1439.42       1892.32    
   8  0.103748      -2.26579      -601.760       601.760       1561.33       2163.09    
   9  0.456811E-02  -5.38866      -1431.15       1431.15       1582.86       3014.00    
  10  0.303247      -1.19321      -316.898       316.898       1145.34       1462.24    
  11  0.284736      -1.25619      -333.626       333.626       1264.33       1597.95    
  12  0.900494     -0.104812      -27.8365       27.8365       1632.39       1660.23    
  13  0.691792     -0.368470      -97.8601       97.8601       1560.83       1658.69    
  14  0.502714     -0.687735      -182.652       182.652       1569.79       1752.44    
  15  0.305219      -1.18673      -315.177       315.177       1581.32       1896.50    
  16  0.412005     -0.886720      -235.500       235.500       1619.56       1855.06    
  17  0.412225     -0.886186      -235.358       235.358       1545.03       1780.39    
  18  0.121697      -2.10622      -559.382       559.382       1412.16       1971.55    
  19  0.465374     -0.764915      -203.150       203.150       1747.07       1950.22    
  20  0.273016      -1.29823      -344.790       344.790       1549.69       1894.48    
  21  0.502763     -0.687636      -182.626       182.626       1705.34       1887.97    
  22  0.516442     -0.660793      -175.497       175.497       1666.68       1842.18    
  23  0.554333     -0.589990      -156.693       156.693       1775.45       1932.15    
  24  0.192397E-01  -3.95078      -1049.27       1049.27       1389.10       2438.37    
  25  0.451279E-01  -3.09825      -822.851       822.851       1810.05       2632.90    
  26  0.457340     -0.782327      -207.775       207.775       1736.08       1943.86    
  27  0.325184      -1.12336      -298.349       298.349       1576.82       1875.17    
  28  0.700952     -0.355315      -94.3665       94.3665       1747.59       1841.96    
  29  0.961087     -0.396906E-01  -10.5412       10.5412       1763.87       1774.41    
  30  0.195966E-02  -6.23498      -1655.92       1655.92       1580.67       3236.59    
  31  0.766376     -0.266082      -70.6676       70.6676       1744.72       1815.39    
  32  0.398846     -0.919180      -244.121       244.121       1613.97       1858.10    
  33  0.675249     -0.392674      -104.288       104.288       1781.61       1885.90    
  34  0.189468      -1.66354      -441.811       441.811       1608.08       2049.89    
  35  0.444608     -0.810562      -215.273       215.273       1761.73       1977.00    
  36  0.514006     -0.665520      -176.752       176.752       1694.94       1871.69    
  37  0.575199     -0.553039      -146.879       146.879       1780.87       1927.75    
  38  0.121449      -2.10826      -559.924       559.924       1889.46       2449.39    
  39  0.209130      -1.56480      -415.587       415.587       1770.80       2186.38    
  40  0.466284E-01  -3.06555      -814.164       814.164       1935.34       2749.51    
  41  0.386630E-01  -3.25287      -863.915       863.915       1909.06       2772.98    
  42  0.335751E-01  -3.39397      -901.389       901.389       1882.40       2783.79    
  43  0.878126     -0.129965      -34.5168       34.5168       1795.55       1830.07    
  44  0.652938     -0.426273      -113.212       113.212       1735.45       1848.66    
  45  0.932456E-01  -2.37252      -630.106       630.106       1770.57       2400.67    
  46  0.662683     -0.411458      -109.277       109.277       1637.85       1747.12    
  47  0.204704      -1.58619      -421.269       421.269       1839.48       2260.75    
  48  0.985446     -0.146609E-01  -3.89372       3.89372       1984.36       1988.25    
  49  0.105847      -2.24576      -596.441       596.441       1790.45       2386.89    
  50  0.843201     -0.170550      -45.2955       45.2955       1862.77       1908.06    
  51  0.364087      -1.01036      -268.338       268.338       1736.53       2004.86    
  52  0.650651E-01  -2.73237      -725.676       725.676       1776.78       2502.46    
  53  0.968103     -0.324171E-01  -8.60950       8.60950       1868.49       1877.10    
  54  0.131933      -2.02546      -537.932       537.932       1809.33       2347.26    
  55  0.906847     -0.977815E-01  -25.9693       25.9693       1698.61       1724.58    
  56  0.443328E-01  -3.11603      -827.572       827.572       1719.19       2546.77    
  57  0.507045     -0.679156      -180.374       180.374       1844.08       2024.46    
  58  0.287709      -1.24581      -330.868       330.868       1734.78       2065.65    
  59  0.900299     -0.105028      -27.8940       27.8940       1797.48       1825.37    
  60  0.689829E-01  -2.67390      -710.147       710.147       1915.64       2625.78    
  61  0.876407     -0.131925      -35.0373       35.0373       1996.05       2031.09    
  62  0.718081     -0.331173      -87.9546       87.9546       1800.90       1888.86    
  63  0.177063      -1.73125      -459.795       459.795       2001.89       2461.68    
  64  0.749425E-01  -2.59103      -688.141       688.141       1843.67       2531.81    
  65  0.136072      -1.99457      -529.729       529.729       1827.18       2356.90    
  66  0.662610     -0.411569      -109.307       109.307       1799.61       1908.91    
  67  0.612646     -0.489969      -130.128       130.128       2067.26       2197.39    
  68  0.258380      -1.35332      -359.423       359.423       1969.67       2329.09    
  69  0.406590     -0.899949      -239.013       239.013       1619.79       1858.80    
  70  0.889463     -0.117137      -31.1100       31.1100       1445.71       1476.82    
  71  0.568198     -0.565286      -150.132       150.132       2201.31       2351.44    
  72  0.280610      -1.27079      -337.503       337.503       1961.16       2298.67    
  73  0.369152     -0.996547      -264.668       264.668       1580.47       1845.13    
  74  0.637974     -0.449458      -119.369       119.369       1240.71       1360.08    
loop,thermsimp(1:2)       88   401.913       983.186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213       1891.26        129.75          0.70         30.49          0.41          0.05        161.41
Just calling func    0   0        161.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1891.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       88
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       89
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      212     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -34.9301       34.9301       1240.71       1275.64    
   2  0.765270     -0.267527      -71.0512       71.0512       1145.34       1216.39    
   3  0.215687      -1.53393      -407.389       407.389       1445.71       1853.10    
   4  0.999601E-01  -2.30298      -611.639       611.639       1407.55       2019.19    
   5  0.706519     -0.347405      -92.2656       92.2656       1407.76       1500.03    
   6  0.201358      -1.60267      -425.646       425.646       1264.33       1689.97    
   7  0.450677     -0.797005      -211.673       211.673       1519.51       1731.18    
   8  0.897557     -0.108078      -28.7040       28.7040       1560.83       1589.54    
   9  0.161166      -1.82532      -484.778       484.778       1632.39       2117.17    
  10  0.972556E-01  -2.33041      -618.923       618.923       1555.06       2173.98    
  11  0.742112     -0.298255      -79.2120       79.2120       1698.61       1777.82    
  12  0.172377      -1.75807      -466.917       466.917       1637.85       2104.76    
  13  0.658751     -0.417410      -110.858       110.858       1569.79       1680.65    
  14  0.725340     -0.321114      -85.2832       85.2832       1356.13       1441.42    
  15  0.501488     -0.690175      -183.300       183.300       1763.87       1947.17    
  16  0.845372     -0.167978      -44.6126       44.6126       1545.03       1589.64    
  17  0.132369      -2.02216      -537.056       537.056       1744.72       2281.78    
  18  0.734515E-01  -2.61113      -693.478       693.478       1797.48       2490.96    
  19  0.391205     -0.938523      -249.258       249.258       1795.55       2044.81    
  20  0.376983     -0.975555      -259.093       259.093       1747.59       2006.69    
  21  0.315463      -1.15371      -306.409       306.409       1666.68       1973.09    
  22  0.267113      -1.32008      -350.595       350.595       1580.47       1931.06    
  23  0.965292     -0.353243E-01  -9.38162       9.38162       1735.45       1744.83    
  24  0.954592     -0.464714E-01  -12.3421       12.3421       1619.56       1631.90    
  25  0.992414     -0.761515E-02  -2.02247       2.02247       1613.97       1616.00    
  26  0.867953E-02  -4.74679      -1260.68       1260.68       1619.79       2880.46    
  27  0.829585     -0.186829      -49.6191       49.6191       1694.94       1744.56    
  28  0.349695      -1.05069      -279.049       279.049       1576.82       1855.87    
  29  0.673511     -0.395251      -104.973       104.973       1868.49       1973.47    
  30  0.340696      -1.07676      -285.973       285.973       1781.61       2067.58    
  31  0.558731     -0.582087      -154.594       154.594       1705.34       1859.93    
  32  0.747295     -0.291295      -77.3636       77.3636       1800.90       1878.27    
  33  0.123287      -2.09324      -555.935       555.935       1439.42       1995.36    
  34  0.355051      -1.03549      -275.012       275.012       1549.69       1824.71    
  35  0.511895     -0.669636      -177.845       177.845       1581.32       1759.16    
  36  0.571856E-01  -2.86145      -759.960       759.960       1862.77       2622.73    
  37  0.507517     -0.678226      -180.127       180.127       1799.61       1979.73    
  38  0.326770      -1.11850      -297.056       297.056       1780.87       2077.92    
  39  0.736001     -0.306523      -81.4080       81.4080       1775.45       1856.86    
  40  0.970046     -0.304120E-01  -8.07697       8.07697       1736.08       1744.16    
  41  0.673510     -0.395253      -104.973       104.973       1747.07       1852.04    
  42  0.335032      -1.09353      -290.425       290.425       1412.16       1702.59    
  43  0.872321E-01  -2.43918      -647.811       647.811       1761.73       2409.54    
  44  0.749956     -0.287741      -76.4197       76.4197       1984.36       2060.78    
  45  0.159001      -1.83884      -488.370       488.370       1736.53       2224.90    
  46  0.529687     -0.635468      -168.771       168.771       1844.08       2012.86    
  47  0.142415      -1.94901      -517.628       517.628       1996.05       2513.68    
  48  0.803387     -0.218919      -58.1415       58.1415       1608.08       1666.23    
  49  0.709133     -0.343713      -91.2851       91.2851       1734.78       1826.07    
  50  0.261172      -1.34258      -356.569       356.569       1561.33       1917.90    
  51  0.106599      -2.23868      -594.562       594.562       1770.80       2365.36    
  52  0.955666     -0.453468E-01  -12.0434       12.0434       2067.26       2079.31    
  53  0.376236     -0.977539      -259.620       259.620       1839.48       2099.10    
  54  0.890774     -0.115665      -30.7189       30.7189       1961.16       1991.88    
  55  0.554077     -0.590452      -156.815       156.815       1969.67       2126.48    
  56  0.892825E-01  -2.41595      -641.641       641.641       1347.44       1989.08    
  57  0.941033     -0.607774E-01  -16.1416       16.1416       1809.33       1825.47    
  58  0.209380E-01  -3.86619      -1026.80       1026.80       2201.31       3228.12    
  59  0.427794     -0.849113      -225.512       225.512       1827.18       2052.69    
  60  0.194887      -1.63533      -434.321       434.321       1790.45       2224.77    
  61  0.840289     -0.174009      -46.2142       46.2142       1770.57       1816.78    
  62  0.634527     -0.454875      -120.808       120.808       1389.10       1509.91    
  63  0.159135      -1.83800      -488.146       488.146       1889.46       2377.61    
  64  0.182987      -1.69834      -451.054       451.054       2001.89       2452.94    
  65  0.520726     -0.652532      -173.303       173.303       1776.78       1950.08    
  66  0.249623      -1.38781      -368.581       368.581       1843.67       2212.25    
  67  0.801631     -0.221107      -58.7227       58.7227       1719.19       1777.92    
  68  0.329011      -1.11166      -295.241       295.241       1915.64       2210.88    
  69  0.995152     -0.485930E-02  -1.29056       1.29056       1810.05       1811.34    
  70  0.187107      -1.67607      -445.140       445.140       1935.34       2380.48    
  71  0.122259      -2.10161      -558.158       558.158       1909.06       2467.22    
  72  0.311222      -1.16725      -310.004       310.004       1882.40       2192.40    
  73  0.953750     -0.473535E-01  -12.5764       12.5764       1582.86       1595.43    
  74  0.303762      -1.19151      -316.448       316.448       1891.26       2207.71    
loop,thermsimp(1:2)       89   34.9301       71.0512    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       1666.76        130.07          0.68         30.23          0.95          0.05        161.99
Just calling func    0   0        161.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1666.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       89
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       90
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      213     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -491.106       491.106       1145.34       1636.44    
   2  0.894146     -0.111886      -29.7152       29.7152       1240.71       1270.43    
   3  0.721270     -0.326741      -86.7777       86.7777       1356.13       1442.91    
   4  0.536866     -0.622006      -165.196       165.196       1407.76       1572.96    
   5  0.418107     -0.872017      -231.595       231.595       1389.10       1620.70    
   6  0.391189     -0.938564      -249.269       249.269       1560.83       1810.10    
   7  0.799669     -0.223558      -59.3736       59.3736       1545.03       1604.40    
   8  0.595070     -0.519076      -137.859       137.859       1582.86       1720.72    
   9  0.384356E-03  -7.86394      -2088.55       2088.55       1613.97       3702.52    
  10  0.654302     -0.424187      -112.658       112.658       1619.56       1732.22    
  11  0.873355     -0.135413      -35.9637       35.9637       1608.08       1644.05    
  12  0.303212      -1.19332      -316.929       316.929       1569.79       1886.72    
  13  0.434159     -0.834344      -221.590       221.590       1264.33       1485.92    
  14  0.970825     -0.296089E-01  -7.86370       7.86370       1412.16       1420.03    
  15  0.405896     -0.901659      -239.467       239.467       1519.51       1758.97    
  16  0.250423      -1.38461      -367.731       367.731       1736.08       2103.81    
  17  0.517030     -0.659654      -175.194       175.194       1694.94       1870.14    
  18  0.165468      -1.79897      -477.781       477.781       1735.45       2213.23    
  19  0.679403     -0.386541      -102.660       102.660       1581.32       1683.98    
  20  0.554013     -0.590567      -156.846       156.846       1698.61       1855.45    
  21  0.211764E-01  -3.85487      -1023.80       1023.80       1719.19       2742.99    
  22  0.453828     -0.790038      -209.822       209.822       1810.05       2019.87    
  23  0.377409     -0.974426      -258.793       258.793       1770.57       2029.36    
  24  0.496879     -0.699408      -185.752       185.752       1549.69       1735.45    
  25  0.214619      -1.53889      -408.706       408.706       1809.33       2218.04    
  26  0.724154     -0.322751      -85.7180       85.7180       1734.78       1820.50    
  27  0.385609     -0.952932      -253.085       253.085       1747.07       2000.15    
  28  0.777864     -0.251204      -66.7160       66.7160       1445.71       1512.43    
  29  0.709283     -0.343500      -91.2286       91.2286       1576.82       1668.05    
  30  0.191760      -1.65151      -438.617       438.617       1775.45       2214.07    
  31  0.347616      -1.05666      -280.632       280.632       1705.34       1985.97    
  32  0.191581      -1.65244      -438.865       438.865       1800.90       2239.77    
  33  0.770989     -0.260081      -69.0738       69.0738       1561.33       1630.40    
  34  0.788566E-01  -2.54012      -674.619       674.619       1580.47       2255.09    
  35  0.229474      -1.47197      -390.933       390.933       1763.87       2154.80    
  36  0.339326      -1.08079      -287.043       287.043       1776.78       2063.82    
  37  0.220886      -1.51011      -401.062       401.062       1666.68       2067.74    
  38  0.223644      -1.49770      -397.767       397.767       1868.49       2266.26    
  39  0.138287      -1.97842      -525.440       525.440       1799.61       2325.05    
  40  0.796402     -0.227651      -60.4608       60.4608       1347.44       1407.90    
  41  0.104384      -2.25968      -600.138       600.138       1961.16       2561.30    
  42  0.919642     -0.837713E-01  -22.2484       22.2484       1439.42       1461.67    
  43  0.360767      -1.01952      -270.770       270.770       1747.59       2018.36    
  44  0.924300     -0.787181E-01  -20.9064       20.9064       1844.08       1864.99    
  45  0.561139     -0.577786      -153.452       153.452       1407.55       1561.00    
  46  0.509073E-01  -2.97775      -790.846       790.846       1795.55       2586.40    
  47  0.715469     -0.334817      -88.9226       88.9226       1827.18       1916.10    
  48  0.294040E-01  -3.52662      -936.619       936.619       1984.36       2920.97    
  49  0.264026E-02  -5.93688      -1576.75       1576.75       1781.61       3358.36    
  50  0.634029     -0.455661      -121.017       121.017       1780.87       1901.88    
  51  0.319148      -1.14210      -303.325       303.325       2067.26       2370.59    
  52  0.495674     -0.701836      -186.397       186.397       1839.48       2025.87    
  53  0.838343     -0.176328      -46.8302       46.8302       1637.85       1684.68    
  54  0.240556      -1.42480      -378.406       378.406       1632.39       2010.80    
  55  0.919800     -0.835990E-01  -22.2027       22.2027       1969.67       1991.87    
  56  0.652899     -0.426332      -113.228       113.228       1555.06       1668.29    
  57  0.777375     -0.251832      -66.8830       66.8830       1882.40       1949.28    
  58  0.988137     -0.119340E-01  -3.16949       3.16949       1891.26       1894.43    
  59  0.771111     -0.259922      -69.0316       69.0316       1915.64       1984.67    
  60  0.980963     -0.192203E-01  -5.10463       5.10463       1843.67       1848.77    
  61  0.358823      -1.02493      -272.205       272.205       1790.45       2062.66    
  62  0.398479     -0.920100      -244.365       244.365       1736.53       1980.89    
  63  0.524779     -0.644778      -171.244       171.244       1744.72       1915.97    
  64  0.391693E-01  -3.23986      -860.460       860.460       1770.80       2631.26    
  65  0.494448     -0.704313      -187.055       187.055       1889.46       2076.52    
  66  0.224697      -1.49300      -396.519       396.519       1935.34       2331.86    
  67  0.585684     -0.534974      -142.081       142.081       1761.73       1903.81    
  68  0.558887     -0.581807      -154.519       154.519       2001.89       2156.41    
  69  0.540529     -0.615206      -163.390       163.390       1909.06       2072.45    
  70  0.314620      -1.15639      -307.120       307.120       1797.48       2104.60    
  71  0.763547     -0.269781      -71.6498       71.6498       1996.05       2067.70    
  72  0.314721      -1.15607      -307.035       307.035       1862.77       2169.80    
  73  0.838345     -0.176326      -46.8296       46.8296       1619.79       1666.62    
  74  0.179413      -1.71806      -456.292       456.292       1666.76       2123.06    
loop,thermsimp(1:2)       90   491.106       29.7152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       1732.84        129.93          0.66         30.26          0.89          0.05        161.79
Just calling func    0   0        161.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1732.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       90
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       91
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      214     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -603.981       603.981       1240.71       1844.69    
   2  0.846291     -0.166892      -44.3240       44.3240       1347.44       1391.76    
   3  0.167054      -1.78944      -475.248       475.248       1412.16       1887.41    
   4  0.786038     -0.240750      -63.9397       63.9397       1356.13       1420.07    
   5  0.680218     -0.385341      -102.341       102.341       1439.42       1541.76    
   6  0.843894     -0.169729      -45.0775       45.0775       1264.33       1309.41    
   7  0.295559      -1.21889      -323.719       323.719       1445.71       1769.43    
   8  0.383493     -0.958433      -254.546       254.546       1407.55       1662.09    
   9  0.867247     -0.142431      -37.8276       37.8276       1407.76       1445.59    
  10  0.241960      -1.41898      -376.861       376.861       1545.03       1921.89    
  11  0.486925     -0.719645      -191.127       191.127       1389.10       1580.23    
  12  0.750166     -0.287460      -76.3453       76.3453       1561.33       1637.67    
  13  0.507045     -0.679156      -180.374       180.374       1145.34       1325.71    
  14  0.237743      -1.43656      -381.530       381.530       1608.08       1989.61    
  15  0.256837E-01  -3.66190      -972.546       972.546       1619.79       2592.33    
  16  0.776460     -0.253010      -67.1956       67.1956       1576.82       1644.02    
  17  0.316300      -1.15106      -305.706       305.706       1555.06       1860.77    
  18  0.493161     -0.706919      -187.747       187.747       1581.32       1769.07    
  19  0.807271     -0.214096      -56.8608       56.8608       1637.85       1694.71    
  20  0.338915      -1.08201      -287.365       287.365       1582.86       1870.22    
  21  0.132986      -2.01751      -535.821       535.821       1619.56       2155.38    
  22  0.409975     -0.891659      -236.812       236.812       1549.69       1786.51    
  23  0.525021     -0.644317      -171.121       171.121       1519.51       1690.63    
  24  0.393064     -0.933783      -247.999       247.999       1560.83       1808.83    
  25  0.176068      -1.73689      -461.292       461.292       1734.78       2196.07    
  26  0.965490     -0.351191E-01  -9.32712       9.32712       1843.67       1852.99    
  27  0.387767     -0.947350      -251.602       251.602       1698.61       1950.21    
  28  0.936248     -0.658753E-01  -17.4955       17.4955       1844.08       1861.58    
  29  0.914720     -0.891370E-01  -23.6735       23.6735       1694.94       1718.62    
  30  0.332171      -1.10211      -292.703       292.703       1569.79       1862.49    
  31  0.845314E-01  -2.47063      -656.163       656.163       1891.26       2547.42    
  32  0.687741     -0.374343      -99.4200       99.4200       1780.87       1880.29    
  33  0.899776     -0.105610      -28.0483       28.0483       1761.73       1789.77    
  34  0.558791     -0.581980      -154.565       154.565       1744.72       1899.29    
  35  0.882799     -0.124658      -33.1073       33.1073       1827.18       1860.28    
  36  0.235569      -1.44575      -383.970       383.970       1882.40       2266.37    
  37  0.533400     -0.628484      -166.916       166.916       1736.53       1903.44    
  38  0.147169      -1.91617      -508.907       508.907       1915.64       2424.54    
  39  0.966208E-01  -2.33696      -620.662       620.662       1705.34       2326.00    
  40  0.952887     -0.482588E-01  -12.8168       12.8168       1969.67       1982.48    
  41  0.155551      -1.86078      -494.196       494.196       1747.07       2241.26    
  42  0.645067     -0.438401      -116.433       116.433       1632.39       1748.82    
  43  0.394254     -0.930759      -247.196       247.196       1747.59       1994.79    
  44  0.546893     -0.603501      -160.281       160.281       1810.05       1970.33    
  45  0.390314     -0.940803      -249.863       249.863       1839.48       2089.34    
  46  0.311561      -1.16616      -309.715       309.715       1770.57       2080.28    
  47  0.752427E-01  -2.58704      -687.079       687.079       1790.45       2477.53    
  48  0.144673      -1.93328      -513.451       513.451       1776.78       2290.23    
  49  0.297567      -1.21212      -321.920       321.920       1996.05       2317.97    
  50  0.544131     -0.608565      -161.626       161.626       1666.68       1828.31    
  51  0.750603E-01  -2.58946      -687.723       687.723       1909.06       2596.79    
  52  0.127547      -2.05927      -546.912       546.912       1889.46       2436.37    
  53  0.839209     -0.175296      -46.5559       46.5559       1736.08       1782.64    
  54  0.718305     -0.330861      -87.8719       87.8719       1797.48       1885.35    
  55  0.246952      -1.39856      -371.438       371.438       1666.76       2038.20    
  56  0.550710     -0.596548      -158.434       158.434       1763.87       1922.30    
  57  0.588510     -0.530162      -140.803       140.803       2001.89       2142.69    
  58  0.361548      -1.01736      -270.196       270.196       1862.77       2132.96    
  59  0.962524     -0.381965E-01  -10.1444       10.1444       1735.45       1745.60    
  60  0.510442     -0.672478      -178.600       178.600       1775.45       1954.05    
  61  0.177498      -1.72880      -459.143       459.143       1809.33       2268.47    
  62  0.775349     -0.254441      -67.5759       67.5759       1800.90       1868.48    
  63  0.313518E-01  -3.46248      -919.585       919.585       1580.47       2500.05    
  64  0.136553      -1.99105      -528.792       528.792       1868.49       2397.29    
  65  0.694627E-01  -2.66696      -708.307       708.307       1799.61       2507.91    
  66  0.784048     -0.243285      -64.6128       64.6128       1935.34       1999.96    
  67  0.561706     -0.576776      -153.183       153.183       2067.26       2220.45    
  68  0.992642E-01  -2.30997      -613.494       613.494       1961.16       2574.66    
  69  0.111580      -2.19301      -582.432       582.432       1795.55       2377.99    
  70  0.655988     -0.421613      -111.974       111.974       1770.80       1882.77    
  71  0.739953     -0.301169      -79.9860       79.9860       1719.19       1799.18    
  72  0.899949     -0.105417      -27.9972       27.9972       1984.36       2012.35    
  73  0.308570      -1.17581      -312.277       312.277       1781.61       2093.89    
  74  0.826728     -0.190280      -50.5354       50.5354       1732.84       1783.37    
loop,thermsimp(1:2)       91   603.981       44.3240    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216       1332.88        129.77          0.65         30.13          1.52          0.05        162.12
Just calling func    0   0        162.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    217       1377.69        129.34          0.64         30.08          1.58          0.05        161.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1332.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       91
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       92
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      216     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -403.796       403.796       1264.33       1668.12    
   2  0.389473     -0.942961      -250.437       250.437       1145.34       1395.77    
   3  0.919121     -0.843378E-01  -22.3989       22.3989       1347.44       1369.84    
   4  0.970518     -0.299250E-01  -7.94764       7.94764       1356.13       1364.08    
   5  0.713317     -0.337830      -89.7226       89.7226       1407.76       1497.49    
   6  0.639607     -0.446902      -118.691       118.691       1439.42       1558.11    
   7  0.712661     -0.338749      -89.9667       89.9667       1389.10       1479.07    
   8  0.212311      -1.54970      -411.579       411.579       1561.33       1972.91    
   9  0.831769     -0.184200      -48.9209       48.9209       1576.82       1625.74    
  10  0.794875     -0.229571      -60.9706       60.9706       1407.55       1468.52    
  11  0.909815     -0.945137E-01  -25.1015       25.1015       1519.51       1544.61    
  12  0.753651E-01  -2.58541      -686.647       686.647       1637.85       2324.49    
  13  0.676081     -0.391442      -103.961       103.961       1694.94       1798.90    
  14  0.597437     -0.515107      -136.805       136.805       1735.45       1872.26    
  15  0.146947      -1.91768      -509.308       509.308       1632.39       2141.70    
  16  0.854910     -0.156760      -41.6330       41.6330       1581.32       1622.95    
  17  0.984999     -0.151146E-01  -4.01421       4.01421       1445.71       1449.73    
  18  0.533419     -0.628448      -166.906       166.906       1736.08       1902.99    
  19  0.383774     -0.957703      -254.352       254.352       1732.84       1987.19    
  20  0.691729     -0.368561      -97.8845       97.8845       1549.69       1647.58    
  21  0.313732E-01  -3.46180      -919.403       919.403       1761.73       2681.13    
  22  0.415635     -0.877947      -233.170       233.170       1719.19       1952.36    
  23  0.288746      -1.24221      -329.912       329.912       1560.83       1890.74    
  24  0.176464      -1.73464      -460.694       460.694       1666.68       2127.37    
  25  0.881312     -0.126344      -33.5551       33.5551       1240.71       1274.27    
  26  0.962783     -0.379267E-01  -10.0728       10.0728       1843.67       1853.74    
  27  0.415450     -0.878393      -233.288       233.288       1827.18       2060.46    
  28  0.271836      -1.30256      -345.940       345.940       1555.06       1901.00    
  29  0.926655     -0.761736E-01  -20.2306       20.2306       1844.08       1864.32    
  30  0.277790      -1.28089      -340.186       340.186       1569.79       1909.97    
  31  0.189974      -1.66087      -441.102       441.102       1800.90       2242.00    
  32  0.410540     -0.890281      -236.446       236.446       1582.86       1819.30    
  33  0.952387     -0.487839E-01  -12.9563       12.9563       1780.87       1793.82    
  34  0.896015     -0.109798      -29.1607       29.1607       1770.80       1799.96    
  35  0.121549E-01  -4.41002      -1171.24       1171.24       1797.48       2968.72    
  36  0.723911     -0.323087      -85.8073       85.8073       1412.16       1497.97    
  37  0.759053     -0.275683      -73.2174       73.2174       1744.72       1817.94    
  38  0.969929     -0.305320E-01  -8.10885       8.10885       1736.53       1744.63    
  39  0.852636     -0.159422      -42.3402       42.3402       1545.03       1587.37    
  40  0.730471     -0.314065      -83.4111       83.4111       1763.87       1847.28    
  41  0.528358     -0.637981      -169.438       169.438       1698.61       1868.04    
  42  0.404403     -0.905344      -240.446       240.446       1775.45       2015.90    
  43  0.232822      -1.45748      -387.085       387.085       1810.05       2197.14    
  44  0.847643     -0.165296      -43.9001       43.9001       1969.67       2013.57    
  45  0.429393E-01  -3.14797      -836.054       836.054       1608.08       2444.14    
  46  0.673157     -0.395777      -105.113       105.113       1747.59       1852.71    
  47  0.806068E-01  -2.51817      -668.789       668.789       1935.34       2604.13    
  48  0.926018     -0.768619E-01  -20.4134       20.4134       1984.36       2004.77    
  49  0.167973      -1.78395      -473.791       473.791       1666.76       2140.56    
  50  0.780773     -0.247471      -65.7247       65.7247       1770.57       1836.29    
  51  0.565702E-01  -2.87227      -762.834       762.834       1839.48       2602.31    
  52  0.646011     -0.436939      -116.045       116.045       1781.61       1897.66    
  53  0.455316     -0.786763      -208.953       208.953       1862.77       2071.72    
  54  0.410066     -0.891437      -236.752       236.752       2001.89       2238.64    
  55  0.934064     -0.682104E-01  -18.1157       18.1157       1619.56       1637.67    
  56  0.511079     -0.671231      -178.269       178.269       1734.78       1913.05    
  57  0.578130     -0.547957      -145.529       145.529       2067.26       2212.79    
  58  0.458047     -0.780783      -207.365       207.365       1747.07       1954.43    
  59  0.223630      -1.49776      -397.784       397.784       1882.40       2280.18    
  60  0.952824E-01  -2.35091      -624.367       624.367       1809.33       2433.70    
  61  0.995385     -0.462583E-02  -1.22855       1.22855       1776.78       1778.01    
  62  0.675298     -0.392602      -104.269       104.269       1996.05       2100.32    
  63  0.728172     -0.317218      -84.2485       84.2485       1705.34       1789.59    
  64  0.240868      -1.42350      -378.062       378.062       1795.55       2173.61    
  65  0.188028      -1.67116      -443.837       443.837       1868.49       2312.33    
  66  0.645358     -0.437951      -116.313       116.313       1915.64       2031.95    
  67  0.170606      -1.76840      -469.660       469.660       1889.46       2359.12    
  68  0.827167     -0.189749      -50.3946       50.3946       1790.45       1840.85    
  69  0.457642     -0.781668      -207.599       207.599       1580.47       1788.07    
  70  0.819756E-01  -2.50133      -664.317       664.317       1799.61       2463.92    
  71  0.965811     -0.347876E-01  -9.23908       9.23908       1891.26       1900.50    
  72  0.806837     -0.214633      -57.0034       57.0034       1961.16       2018.17    
  73  0.556186     -0.586653      -155.806       155.806       1619.79       1775.59    
  74  0.506643     -0.679949      -180.585       180.585       1332.88       1513.46    
loop,thermsimp(1:2)       92   403.796       250.437    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218       1370.93        129.65          0.65         30.06          1.27          0.05        161.68
Just calling func    0   0        161.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219       1207.13        129.36          0.64         30.57          1.15          0.05        161.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1207.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       92
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       93
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      218     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -506.347       506.347       1240.71       1747.06    
   2  0.695074     -0.363738      -96.6033       96.6033       1356.13       1452.74    
   3  0.541180     -0.614003      -163.070       163.070       1347.44       1510.51    
   4  0.189791      -1.66183      -441.358       441.358       1145.34       1586.70    
   5  0.245553      -1.40424      -372.946       372.946       1445.71       1818.66    
   6  0.641474     -0.443986      -117.916       117.916       1407.55       1525.46    
   7  0.308462      -1.17616      -312.370       312.370       1389.10       1701.47    
   8  0.478005     -0.738133      -196.037       196.037       1407.76       1603.80    
   9  0.395759     -0.926951      -246.184       246.184       1412.16       1658.35    
  10  0.438776E-01  -3.12635      -830.313       830.313       1332.88       2163.19    
  11  0.294628E-01  -3.52463      -936.089       936.089       1519.51       2455.59    
  12  0.331052E-01  -3.40806      -905.132       905.132       1439.42       2344.55    
  13  0.916325E-01  -2.38997      -634.741       634.741       1545.03       2179.77    
  14  0.985908     -0.141919E-01  -3.76915       3.76915       1581.32       1585.09    
  15  0.511724     -0.669970      -177.934       177.934       1576.82       1754.76    
  16  0.185695      -1.68365      -447.153       447.153       1619.56       2066.71    
  17  0.830711     -0.185474      -49.2590       49.2590       1549.69       1598.95    
  18  0.765179E-04  -9.47799      -2517.21       2517.21       1264.33       3781.54    
  19  0.129365      -2.04512      -543.154       543.154       1736.53       2279.68    
  20  0.796363     -0.227700      -60.4737       60.4737       1619.79       1680.26    
  21  0.589256     -0.528895      -140.467       140.467       1776.78       1917.25    
  22  0.770995     -0.260073      -69.0716       69.0716       1580.47       1649.54    
  23  0.685430     -0.377709      -100.314       100.314       1705.34       1805.66    
  24  0.487688     -0.718080      -190.712       190.712       1780.87       1971.58    
  25  0.114898      -2.16371      -574.651       574.651       1694.94       2269.59    
  26  0.165093      -1.80124      -478.384       478.384       1770.80       2249.18    
  27  0.302275      -1.19642      -317.751       317.751       1744.72       2062.48    
  28  0.123669      -2.09014      -555.111       555.111       1582.86       2137.97    
  29  0.960526     -0.402739E-01  -10.6961       10.6961       1770.57       1781.26    
  30  0.744557     -0.294966      -78.3386       78.3386       1790.45       1868.79    
  31  0.418436     -0.871232      -231.386       231.386       1763.87       1995.25    
  32  0.624411     -0.470947      -125.077       125.077       1747.59       1872.67    
  33  0.920055     -0.833222E-01  -22.1291       22.1291       1843.67       1865.80    
  34  0.330507      -1.10713      -294.037       294.037       1844.08       2138.12    
  35  0.889566     -0.117022      -31.0792       31.0792       1698.61       1729.69    
  36  0.269410      -1.31152      -348.320       348.320       1735.45       2083.77    
  37  0.458780     -0.779184      -206.940       206.940       1560.83       1767.77    
  38  0.952588     -0.485730E-01  -12.9003       12.9003       1781.61       1794.51    
  39  0.213836      -1.54254      -409.677       409.677       1891.26       2300.94    
  40  0.460697     -0.775015      -205.833       205.833       1555.06       1760.89    
  41  0.571693     -0.559153      -148.503       148.503       1736.08       1884.58    
  42  0.201363      -1.60265      -425.640       425.640       1569.79       1995.43    
  43  0.707817     -0.345570      -91.7784       91.7784       1734.78       1826.56    
  44  0.927118     -0.756745E-01  -20.0980       20.0980       1719.19       1739.29    
  45  0.288916      -1.24162      -329.756       329.756       1747.07       2076.82    
  46  0.702737     -0.352773      -93.6912       93.6912       1561.33       1655.02    
  47  0.253190      -1.37362      -364.812       364.812       1732.84       2097.65    
  48  0.709086     -0.343779      -91.3026       91.3026       1984.36       2075.66    
  49  0.399421     -0.917738      -243.738       243.738       1969.67       2213.41    
  50  0.837301     -0.177572      -47.1606       47.1606       1775.45       1822.61    
  51  0.906694     -0.979507E-01  -26.0143       26.0143       1961.16       1987.18    
  52  0.479547     -0.734913      -195.182       195.182       1915.64       2110.82    
  53  0.573668     -0.555704      -147.587       147.587       1827.18       1974.76    
  54  0.616113     -0.484325      -128.630       128.630       1862.77       1991.40    
  55  0.899004     -0.106467      -28.2762       28.2762       1996.05       2024.33    
  56  0.668105     -0.403310      -107.113       107.113       1666.68       1773.79    
  57  0.464354     -0.767107      -203.732       203.732       1666.76       1870.50    
  58  0.298472E-01  -3.51166      -932.646       932.646       1632.39       2565.04    
  59  0.458507     -0.779779      -207.098       207.098       1795.55       2002.65    
  60  0.372295E-01  -3.29065      -873.949       873.949       1810.05       2684.00    
  61  0.349332      -1.05173      -279.325       279.325       2067.26       2346.59    
  62  0.396867     -0.924153      -245.442       245.442       2001.89       2247.33    
  63  0.599776     -0.511199      -135.767       135.767       1800.90       1936.67    
  64  0.175124      -1.74226      -462.718       462.718       1882.40       2345.12    
  65  0.723227     -0.324033      -86.0583       86.0583       1868.49       1954.55    
  66  0.738639     -0.302946      -80.4579       80.4579       1637.85       1718.30    
  67  0.691263     -0.369235      -98.0635       98.0635       1889.46       1987.53    
  68  0.575263     -0.552928      -146.850       146.850       1809.33       1956.18    
  69  0.312385      -1.16352      -309.013       309.013       1608.08       1917.10    
  70  0.708595     -0.344472      -91.4866       91.4866       1799.61       1891.09    
  71  0.674476     -0.393819      -104.593       104.593       1839.48       1944.07    
  72  0.196387      -1.62767      -432.285       432.285       1935.34       2367.63    
  73  0.800316     -0.222748      -59.1587       59.1587       1761.73       1820.88    
  74  0.992803     -0.722339E-02  -1.91843       1.91843       1207.13       1209.05    
loop,thermsimp(1:2)       93   506.347       96.6033    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       1437.49        129.49          0.64         30.26          1.46          0.04        161.90
Just calling func    0   0        161.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221       3280.80        129.57          0.70         30.77          0.80          0.04        161.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    3280.8        1.999     -1.076      2.959     -100.0     0.3542    
                     -0.9496     0.8341     -100.0      2.340      1.200    
                     -0.6595    -0.5090E-01  2.009      0.000     0.6809    
                      -1.344     -20.00      0.000      0.000    -0.1204    

                      -2.371      6461.     0.1042E+05 -514.2     -1451.    
                      -4.153     -4.673     -3.662     -15.33     -5.168    
                      -13.39     -2.724     -3433.      0.000     0.1289E+05

                      -1333.      3532.      281.6      537.6      2709.    
                      -3016.    -0.4161E-01-0.3227E-01  0.000    -0.9333E-01
                     -0.1792    -0.2266    -0.9952E-01-0.1437    -0.8066E-01

                     -0.7456     -1.792      1.382     0.2362    -0.4629E-03
                      0.8541E-01-0.7833E-01-0.1135    -0.1703E-01-0.2015    
                     -0.1446     0.4352E-01-0.2965     -2.192      1.382    

                      -1.824     -1.419     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.979      8.883      0.000     0.4248E-03
                      0.1592     0.1592      9.045      8.955     -7377.    

                      0.3080E-03 0.1592     0.1592      9.783      9.156    
                      -5522.     0.4167E-03-0.6961     0.1592      9.428    
                       9.264     -4881.     0.7227E-02
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1437.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       93
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       94
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      220
neval,tstepnext:      220     220

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -45.5844       45.5844       1207.13       1252.72    
   2  0.478368     -0.737375      -195.836       195.836       1356.13       1551.97    
   3  0.283498      -1.26055      -334.784       334.784       1347.44       1682.22    
   4  0.520516     -0.652935      -173.410       173.410       1407.55       1580.96    
   5  0.703282E-01  -2.65458      -705.018       705.018       1581.32       2286.34    
   6  0.914137     -0.897748E-01  -23.8429       23.8429       1145.34       1169.18    
   7  0.479535     -0.734938      -195.189       195.189       1549.69       1744.88    
   8  0.921875     -0.813456E-01  -21.6042       21.6042       1407.76       1429.37    
   9  0.739547     -0.301718      -80.1318       80.1318       1580.47       1660.60    
  10  0.790753     -0.234770      -62.3515       62.3515       1561.33       1623.68    
  11  0.212247E-01  -3.85259      -1023.19       1023.19       1412.16       2435.36    
  12  0.286971      -1.24837      -331.550       331.550       1619.79       1951.34    
  13  0.695666     -0.362886      -96.3771       96.3771       1389.10       1485.48    
  14  0.534590     -0.626255      -166.324       166.324       1637.85       1804.17    
  15  0.945577     -0.559603E-01  -14.8622       14.8622       1698.61       1713.47    
  16  0.619446     -0.478930      -127.197       127.197       1719.19       1846.39    
  17  0.291083E-01  -3.53673      -939.304       939.304       1240.71       2180.01    
  18  0.372584E-01  -3.28988      -873.743       873.743       1576.82       2450.57    
  19  0.713241     -0.337936      -89.7508       89.7508       1555.06       1644.81    
  20  0.280281      -1.27196      -337.814       337.814       1560.83       1898.65    
  21  0.254796      -1.36729      -363.132       363.132       1666.68       2029.81    
  22  0.498598     -0.695955      -184.835       184.835       1770.57       1955.40    
  23  0.515261E-01  -2.96567      -787.637       787.637       1781.61       2569.25    
  24  0.347627      -1.05662      -280.624       280.624       1705.34       1985.96    
  25  0.696212     -0.362102      -96.1689       96.1689       1445.71       1541.88    
  26  0.707749E-01  -2.64825      -703.336       703.336       1761.73       2465.06    
  27  0.364523E-01  -3.31175      -879.552       879.552       1775.45       2655.00    
  28  0.895087E-02  -4.71600      -1252.50       1252.50       1734.78       2987.28    
  29  0.333194      -1.09903      -291.887       291.887       1843.67       2135.55    
  30  0.451375     -0.795457      -211.262       211.262       1790.45       2001.71    
  31  0.849961E-01  -2.46515      -654.708       654.708       1666.76       2321.47    
  32  0.524791     -0.644756      -171.238       171.238       1747.59       1918.83    
  33  0.641068     -0.444619      -118.084       118.084       1736.08       1854.17    
  34  0.757376     -0.277895      -73.8049       73.8049       1799.61       1873.41    
  35  0.760597     -0.273651      -72.6777       72.6777       1608.08       1680.76    
  36  0.709070     -0.343801      -91.3084       91.3084       1776.78       1868.09    
  37  0.794718     -0.229768      -61.0229       61.0229       1800.90       1861.92    
  38  0.869679     -0.139632      -37.0841       37.0841       1839.48       1876.56    
  39  0.229100E-01  -3.77618      -1002.90       1002.90       1868.49       2871.39    
  40  0.935590     -0.665776E-01  -17.6820       17.6820       1809.33       1827.01    
  41  0.889453     -0.117149      -31.1130       31.1130       1780.87       1811.98    
  42  0.529054     -0.636665      -169.089       169.089       1827.18       1996.26    
  43  0.907902     -0.966186E-01  -25.6605       25.6605       1961.16       1986.82    
  44  0.693802     -0.365568      -97.0895       97.0895       1889.46       1986.55    
  45  0.883803     -0.123521      -32.8054       32.8054       1862.77       1895.57    
  46  0.275134E-01  -3.59308      -954.269       954.269       1763.87       2718.14    
  47  0.324767      -1.12465      -298.690       298.690       1569.79       1868.48    
  48  0.853326     -0.158614      -42.1255       42.1255       1795.55       1837.68    
  49  0.325639      -1.12197      -297.978       297.978       1996.05       2294.03    
  50  0.773280     -0.257115      -68.2859       68.2859       1744.72       1813.01    
  51  0.108890      -2.21741      -588.912       588.912       1619.56       2208.47    
  52  0.188532E-01  -3.97107      -1054.66       1054.66       1984.36       3039.01    
  53  0.970927     -0.295045E-01  -7.83596       7.83596       1747.07       1754.90    
  54  0.549714     -0.598357      -158.915       158.915       1735.45       1894.37    
  55  0.937888E-01  -2.36671      -628.563       628.563       1732.84       2361.40    
  56  0.293516      -1.22582      -325.560       325.560       1915.64       2241.20    
  57  0.598789     -0.512846      -136.204       136.204       1582.86       1719.06    
  58  0.173412      -1.75209      -465.329       465.329       1844.08       2309.41    
  59  0.552776     -0.592802      -157.439       157.439       1332.88       1490.31    
  60  0.586717     -0.533213      -141.614       141.614       1545.03       1686.64    
  61  0.902886     -0.102159      -27.1320       27.1320       1969.67       1996.80    
  62  0.423679     -0.858778      -228.079       228.079       2001.89       2229.96    
  63  0.796344E-01  -2.53031      -672.013       672.013       1770.80       2442.81    
  64  0.894023     -0.112024      -29.7519       29.7519       1694.94       1724.69    
  65  0.840662     -0.173566      -46.0966       46.0966       1736.53       1782.62    
  66  0.730459     -0.314083      -83.4157       83.4157       1891.26       1974.68    
  67  0.652850     -0.426409      -113.248       113.248       1439.42       1552.67    
  68  0.856696     -0.154672      -41.0787       41.0787       1882.40       1923.48    
  69  0.562214     -0.575873      -152.943       152.943       2067.26       2220.21    
  70  0.680885     -0.384362      -102.081       102.081       1935.34       2037.42    
  71  0.353093      -1.04102      -276.480       276.480       1519.51       1795.99    
  72  0.588480     -0.530213      -140.817       140.817       1632.39       1773.21    
  73  0.641636     -0.443734      -117.849       117.849       1810.05       1927.90    
  74  0.729310     -0.315656      -83.8336       83.8336       1437.49       1521.32    
loop,thermsimp(1:2)       94   45.5844       195.836    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       1407.45        129.81          0.67         29.98          1.08          0.04        161.59
Just calling func    0   0        161.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1407.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    265.585               220
loop is:       94
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    265.585               220
loop is:       95
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    132.793               293

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      221     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -39.1527       39.1527       1145.34       1184.49    
   2  0.739179     -0.302215      -40.1319       40.1319       1207.13       1247.26    
   3  0.131167      -2.03128      -269.739       269.739       1407.76       1677.50    
   4  0.523356     -0.647493      -85.9824       85.9824       1389.10       1475.09    
   5  0.660412     -0.414891      -55.0945       55.0945       1332.88       1387.97    
   6  0.433074E-01  -3.13943      -416.893       416.893       1437.49       1854.38    
   7  0.480352     -0.733236      -97.3684       97.3684       1445.71       1543.08    
   8  0.808114     -0.213053      -28.2918       28.2918       1356.13       1384.43    
   9  0.723804     -0.323235      -42.9232       42.9232       1439.42       1482.34    
  10  0.322682      -1.13109      -150.200       150.200       1407.55       1557.75    
  11  0.898907     -0.106576      -14.1525       14.1525       1561.33       1575.48    
  12  0.359972      -1.02173      -135.678       135.678       1555.06       1690.74    
  13  0.879118     -0.128836      -17.1085       17.1085       1580.47       1597.57    
  14  0.963559     -0.371220E-01  -4.92952       4.92952       1608.08       1613.01    
  15  0.662848     -0.411210      -54.6056       54.6056       1347.44       1402.04    
  16  0.648402     -0.433244      -57.5316       57.5316       1545.03       1602.56    
  17  0.375343     -0.979916      -130.126       130.126       1698.61       1828.73    
  18  0.812441     -0.207712      -27.5827       27.5827       1582.86       1610.44    
  19  0.248177E-01  -3.69620      -490.828       490.828       1694.94       2185.77    
  20  0.653530     -0.425366      -56.4855       56.4855       1549.69       1606.18    
  21  0.712244     -0.339334      -45.0611       45.0611       1747.07       1792.13    
  22  0.358229      -1.02658      -136.323       136.323       1632.39       1768.71    
  23  0.325518      -1.12234      -149.038       149.038       1736.53       1885.56    
  24  0.770349     -0.260912      -34.6471       34.6471       1519.51       1554.15    
  25  0.633518E-01  -2.75905      -366.382       366.382       1637.85       2004.23    
  26  0.168796      -1.77907      -236.247       236.247       1780.87       2017.11    
  27  0.562007     -0.576241      -76.5205       76.5205       1744.72       1821.24    
  28  0.156316      -1.85588      -246.447       246.447       1809.33       2055.78    
  29  0.967732     -0.328002E-01  -4.35563       4.35563       1795.55       1799.91    
  30  0.538071     -0.619766      -82.3003       82.3003       1719.19       1801.49    
  31  0.967495     -0.330453E-01  -4.38817       4.38817       1736.08       1740.47    
  32  0.771619     -0.259265      -34.4284       34.4284       1800.90       1835.33    
  33  0.246044      -1.40225      -186.208       186.208       1776.78       1962.99    
  34  0.700731     -0.355631      -47.2252       47.2252       1569.79       1617.01    
  35  0.382714     -0.960468      -127.543       127.543       1799.61       1927.15    
  36  0.580395     -0.544047      -72.2454       72.2454       1839.48       1911.72    
  37  0.305131      -1.18701      -157.627       157.627       1735.45       1893.08    
  38  0.624250     -0.471204      -62.5724       62.5724       1862.77       1925.34    
  39  0.575432     -0.552634      -73.3857       73.3857       1560.83       1634.22    
  40  0.701335     -0.354770      -47.1108       47.1108       1747.59       1794.70    
  41  0.290211      -1.23715      -164.284       164.284       1882.40       2046.68    
  42  0.140976      -1.95916      -260.162       260.162       1810.05       2070.21    
  43  0.275714      -1.28839      -171.089       171.089       1619.79       1790.87    
  44  0.856479     -0.154925      -20.5729       20.5729       1770.57       1791.14    
  45  0.994286     -0.573084E-02 -0.761013      0.761013       1891.26       1892.02    
  46  0.913008     -0.910102E-01  -12.0855       12.0855       1705.34       1717.43    
  47  0.204063      -1.58933      -211.051       211.051       1889.46       2100.51    
  48  0.388833     -0.944605      -125.437       125.437       1961.16       2086.60    
  49  0.781619     -0.246387      -32.7184       32.7184       1827.18       1859.89    
  50  0.373421     -0.985049      -130.807       130.807       1969.67       2100.47    
  51  0.834918     -0.180422      -23.9587       23.9587       1790.45       1814.41    
  52  0.174969      -1.74315      -231.477       231.477       1666.68       1898.16    
  53  0.531353     -0.632329      -83.9686       83.9686       1935.34       2019.31    
  54  0.339530      -1.08019      -143.442       143.442       1843.67       1987.11    
  55  0.929760     -0.728288E-01  -9.67113       9.67113       1240.71       1250.38    
  56  0.223523      -1.49824      -198.955       198.955       1619.56       1818.51    
  57  0.557869     -0.583631      -77.5018       77.5018       2067.26       2144.77    
  58  0.521577     -0.650898      -86.4345       86.4345       2001.89       2088.32    
  59  0.856336     -0.155092      -20.5951       20.5951       1915.64       1936.23    
  60  0.645536     -0.437674      -58.1199       58.1199       1581.32       1639.44    
  61  0.438677     -0.823992      -109.420       109.420       1996.05       2105.47    
  62  0.346732      -1.05920      -140.654       140.654       1844.08       1984.74    
  63  0.902848     -0.102201      -13.5715       13.5715       1666.76       1680.34    
  64  0.578219     -0.547803      -72.7442       72.7442       1732.84       1805.58    
  65  0.602211     -0.507147      -67.3454       67.3454       1412.16       1479.51    
  66  0.432652     -0.837821      -111.256       111.256       1770.80       1882.05    
  67  0.123601      -2.09070      -277.629       277.629       1576.82       1854.45    
  68  0.840915     -0.173264      -23.0082       23.0082       1761.73       1784.73    
  69  0.638713     -0.448300      -59.5309       59.5309       1781.61       1841.14    
  70  0.127935      -2.05623      -273.052       273.052       1775.45       2048.50    
  71  0.555419     -0.588033      -78.0864       78.0864       1763.87       1841.95    
  72  0.860781     -0.149915      -19.9077       19.9077       1868.49       1888.40    
  73  0.170020      -1.77184      -235.287       235.287       1734.78       1970.07    
  74  0.355131      -1.03527      -137.476       137.476       1407.45       1544.92    
loop,thermsimp(1:2)       95   39.1527       40.1319    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223       1506.58        129.74          0.67         30.02          1.22          0.05        161.70
Just calling func    0   0        161.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1506.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       95
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   198.394    

hmean,hstd :    1672.14       198.394    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1672.14       198.394    
h(1),h(best1),h(np1) :    1145.34       1145.34       1506.58    
htherm(1),htherm(best1),htherm(np1) :    1184.49       1184.49       2185.77    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        1
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      222     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -516.515       516.515       1145.34       1661.85    
   2  0.977100     -0.231667E-01  -3.07636       3.07636       1207.13       1210.21    
   3  0.491467     -0.710361      -94.3307       94.3307       1240.71       1335.04    
   4  0.802113E-01  -2.52309      -335.048       335.048       1356.13       1691.18    
   5  0.891044     -0.115361      -15.3191       15.3191       1332.88       1348.19    
   6  0.397551     -0.922433      -122.492       122.492       1347.44       1469.93    
   7  0.121203      -2.11029      -280.231       280.231       1389.10       1669.34    
   8  0.789985E-01  -2.53833      -337.071       337.071       1412.16       1749.24    
   9  0.921855     -0.813679E-01  -10.8051       10.8051       1439.42       1450.23    
  10  0.252671      -1.37567      -182.678       182.678       1445.71       1628.39    
  11  0.787271     -0.239182      -31.7616       31.7616       1407.45       1439.21    
  12  0.634653     -0.454676      -60.3776       60.3776       1519.51       1579.88    
  13  0.706648     -0.347222      -46.1085       46.1085       1407.55       1453.66    
  14  0.349740E-01  -3.35315      -445.274       445.274       1561.33       2006.60    
  15  0.686787     -0.375731      -49.8943       49.8943       1580.47       1630.36    
  16  0.309348      -1.17329      -155.804       155.804       1545.03       1700.83    
  17  0.703748     -0.351336      -46.6548       46.6548       1549.69       1596.35    
  18  0.985092     -0.150207E-01  -1.99464       1.99464       1582.86       1584.85    
  19  0.440741     -0.819298      -108.797       108.797       1608.08       1716.88    
  20  0.796112     -0.228015      -30.2787       30.2787       1569.79       1600.07    
  21  0.451938     -0.794210      -105.465       105.465       1560.83       1666.30    
  22  0.230902      -1.46576      -194.642       194.642       1581.32       1775.96    
  23  0.760212     -0.274159      -36.4062       36.4062       1407.76       1444.17    
  24  0.250434E-02  -5.98973      -795.392       795.392       1666.76       2462.16    
  25  0.627913E-01  -2.76794      -367.562       367.562       1555.06       1922.62    
  26  0.263128      -1.33511      -177.293       177.293       1705.34       1882.63    
  27  0.177986      -1.72605      -229.207       229.207       1736.08       1965.29    
  28  0.919776     -0.836247E-01  -11.1047       11.1047       1632.39       1643.50    
  29  0.854272     -0.157506      -20.9156       20.9156       1761.73       1782.64    
  30  0.648187     -0.433576      -57.5756       57.5756       1619.79       1677.36    
  31  0.853797     -0.158061      -20.9894       20.9894       1770.57       1791.56    
  32  0.484551     -0.724533      -96.2126       96.2126       1747.07       1843.28    
  33  0.423817     -0.858454      -113.996       113.996       1747.59       1861.59    
  34  0.932015     -0.704065E-01  -9.34946       9.34946       1795.55       1804.90    
  35  0.161906      -1.82074      -241.781       241.781       1719.19       1960.97    
  36  0.812519     -0.207617      -27.5699       27.5699       1732.84       1760.41    
  37  0.346838      -1.05890      -140.614       140.614       1790.45       1931.06    
  38  0.477141     -0.739943      -98.2589       98.2589       1619.56       1717.82    
  39  0.931946     -0.704808E-01  -9.35934       9.35934       1744.72       1754.08    
  40  0.189794      -1.66182      -220.677       220.677       1698.61       1919.28    
  41  0.361902      -1.01638      -134.968       134.968       1800.90       1935.87    
  42  0.775630E-02  -4.85925      -645.273       645.273       1781.61       2426.88    
  43  0.292497      -1.22930      -163.242       163.242       1763.87       1927.11    
  44  0.264300      -1.33067      -176.703       176.703       1437.49       1614.19    
  45  0.529597     -0.635638      -84.4081       84.4081       1576.82       1661.23    
  46  0.163272      -1.81234      -240.665       240.665       1827.18       2067.84    
  47  0.212593      -1.54838      -205.613       205.613       1770.80       1976.41    
  48  0.359173      -1.02395      -135.973       135.973       1736.53       1872.50    
  49  0.993707     -0.631295E-02 -0.838314      0.838314       1868.49       1869.33    
  50  0.261479      -1.34140      -178.128       178.128       1891.26       2069.39    
  51  0.441392     -0.817822      -108.601       108.601       1735.45       1844.05    
  52  0.624656     -0.470554      -62.4861       62.4861       1666.68       1729.17    
  53  0.646784     -0.435743      -57.8634       57.8634       1839.48       1897.34    
  54  0.343734      -1.06789      -141.808       141.808       1862.77       2004.58    
  55  0.438651     -0.824052      -109.428       109.428       1799.61       1909.03    
  56  0.476250     -0.741811      -98.5071       98.5071       1915.64       2014.14    
  57  0.665451     -0.407291      -54.0852       54.0852       1776.78       1830.87    
  58  0.903561E-01  -2.40400      -319.233       319.233       1734.78       2054.01    
  59  0.899286     -0.106155      -14.0966       14.0966       1844.08       1858.18    
  60  0.822477     -0.195434      -25.9523       25.9523       1843.67       1869.62    
  61  0.824462E-01  -2.49561      -331.399       331.399       1637.85       1969.24    
  62  0.689460     -0.371846      -49.3784       49.3784       1780.87       1830.24    
  63  0.124471      -2.08368      -276.698       276.698       1935.34       2212.04    
  64  0.215598      -1.53434      -203.749       203.749       1882.40       2086.15    
  65  0.671537     -0.398187      -52.8763       52.8763       1775.45       1828.33    
  66  0.330886      -1.10598      -146.866       146.866       1809.33       1956.20    
  67  0.198204      -1.61846      -214.920       214.920       1810.05       2024.97    
  68  0.774065     -0.256099      -34.0081       34.0081       1961.16       1995.17    
  69  0.787755     -0.238568      -31.6801       31.6801       2001.89       2033.57    
  70  0.613901     -0.487921      -64.7924       64.7924       1969.67       2034.46    
  71  0.427667     -0.849410      -112.795       112.795       1889.46       2002.26    
  72  0.898090     -0.107485      -14.2732       14.2732       1996.05       2010.33    
  73  0.550021     -0.597800      -79.3834       79.3834       2067.26       2146.65    
  74  0.431420     -0.840672      -111.635       111.635       1506.58       1618.22    
loop,thermsimp(1:2)        1   516.515       3.07636    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       2122.92        129.71          0.67         29.96          1.25          0.04        161.62
Just calling func    0   0        161.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2122.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        1
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        2
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      223     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -197.685       197.685       1207.13       1404.82    
   2  0.726663     -0.319292      -42.3996       42.3996       1240.71       1283.11    
   3  0.929061     -0.735808E-01  -9.77099       9.77099       1332.88       1342.65    
   4  0.764703     -0.268268      -35.6240       35.6240       1407.45       1443.07    
   5  0.119617      -2.12346      -281.980       281.980       1407.76       1689.74    
   6  0.369672     -0.995138      -132.147       132.147       1439.42       1571.57    
   7  0.875806     -0.132611      -17.6098       17.6098       1407.55       1425.16    
   8  0.657886     -0.418723      -55.6033       55.6033       1347.44       1403.04    
   9  0.387095E-01  -3.25167      -431.798       431.798       1519.51       1951.30    
  10  0.454078     -0.789485      -104.838       104.838       1582.86       1687.69    
  11  0.890470     -0.116006      -15.4047       15.4047       1549.69       1565.10    
  12  0.118445      -2.13331      -283.287       283.287       1569.79       1853.08    
  13  0.190238      -1.65948      -220.367       220.367       1437.49       1657.86    
  14  0.435624     -0.830976      -110.347       110.347       1506.58       1616.93    
  15  0.768655     -0.263114      -34.9395       34.9395       1445.71       1480.65    
  16  0.870896E-01  -2.44082      -324.123       324.123       1580.47       1904.59    
  17  0.936453     -0.656556E-01  -8.71857       8.71857       1632.39       1641.11    
  18  0.159312      -1.83689      -243.925       243.925       1576.82       1820.75    
  19  0.988165     -0.119051E-01  -1.58091       1.58091       1145.34       1146.92    
  20  0.713347     -0.337787      -44.8556       44.8556       1560.83       1605.69    
  21  0.417075     -0.874489      -116.126       116.126       1389.10       1505.23    
  22  0.719048     -0.329827      -43.7986       43.7986       1619.79       1663.58    
  23  0.785519     -0.241411      -32.0576       32.0576       1356.13       1388.19    
  24  0.356994      -1.03004      -136.781       136.781       1545.03       1681.81    
  25  0.357951      -1.02736      -136.426       136.426       1608.08       1744.51    
  26  0.154816      -1.86552      -247.727       247.727       1619.56       1867.29    
  27  0.246912      -1.39872      -185.740       185.740       1666.68       1852.42    
  28  0.553458     -0.591570      -78.5561       78.5561       1412.16       1490.72    
  29  0.729602     -0.315256      -41.8637       41.8637       1744.72       1786.59    
  30  0.605470     -0.501750      -66.6288       66.6288       1732.84       1799.46    
  31  0.278987E-01  -3.57918      -475.288       475.288       1581.32       2056.61    
  32  0.187991      -1.67136      -221.945       221.945       1761.73       1983.67    
  33  0.543158     -0.610355      -81.0507       81.0507       1770.57       1851.62    
  34  0.996749     -0.325625E-02 -0.432406      0.432406       1795.55       1795.99    
  35  0.540727     -0.614841      -81.6463       81.6463       1775.45       1857.10    
  36  0.833271E-01  -2.48498      -329.987       329.987       1780.87       2110.85    
  37  0.404538     -0.905011      -120.179       120.179       1776.78       1896.96    
  38  0.147302      -1.91527      -254.334       254.334       1747.07       2001.40    
  39  0.364226E-01  -3.31257      -439.885       439.885       1735.45       2175.34    
  40  0.381304     -0.964158      -128.033       128.033       1844.08       1972.12    
  41  0.737758     -0.304140      -40.3875       40.3875       1747.59       1787.98    
  42  0.179374      -1.71828      -228.175       228.175       1868.49       2096.67    
  43  0.281757      -1.26671      -168.210       168.210       1843.67       2011.88    
  44  0.192633      -1.64697      -218.705       218.705       1736.53       1955.23    
  45  0.954983     -0.460617E-01  -6.11665       6.11665       1705.34       1711.46    
  46  0.710258     -0.342127      -45.4320       45.4320       1839.48       1884.91    
  47  0.831769     -0.184201      -24.4605       24.4605       1799.61       1824.07    
  48  0.912541     -0.915218E-01  -12.1534       12.1534       1698.61       1710.76    
  49  0.221543      -1.50714      -200.137       200.137       1555.06       1755.20    
  50  0.690803E-02  -4.97507      -660.653       660.653       1763.87       2424.52    
  51  0.162616      -1.81637      -241.200       241.200       1790.45       2031.65    
  52  0.869433     -0.139913      -18.5795       18.5795       1800.90       1819.48    
  53  0.541563     -0.613295      -81.4411       81.4411       1809.33       1890.77    
  54  0.310811      -1.16857      -155.178       155.178       1719.19       1874.37    
  55  0.879573     -0.128319      -17.0398       17.0398       1736.08       1753.12    
  56  0.262339      -1.33812      -177.692       177.692       1637.85       1815.54    
  57  0.651476     -0.428515      -56.9036       56.9036       1770.80       1827.70    
  58  0.498193     -0.696767      -92.5255       92.5255       1961.16       2053.69    
  59  0.251241      -1.38134      -183.432       183.432       1889.46       2072.89    
  60  0.704518     -0.350242      -46.5095       46.5095       1862.77       1909.28    
  61  0.387431     -0.948219      -125.916       125.916       1561.33       1687.24    
  62  0.447312     -0.804500      -106.832       106.832       1996.05       2102.89    
  63  0.842599     -0.171264      -22.7425       22.7425       1915.64       1938.38    
  64  0.754683     -0.281457      -37.3754       37.3754       1810.05       1847.43    
  65  0.160341      -1.83045      -243.070       243.070       2001.89       2244.96    
  66  0.388561     -0.945304      -125.529       125.529       1969.67       2095.20    
  67  0.504240     -0.684704      -90.9236       90.9236       1734.78       1825.70    
  68  0.340326      -1.07785      -143.131       143.131       1827.18       1970.31    
  69  0.995948     -0.406008E-02 -0.539149      0.539149       1891.26       1891.80    
  70  0.822310     -0.195638      -25.9792       25.9792       1882.40       1908.38    
  71  0.584501     -0.536996      -71.3092       71.3092       2067.26       2138.57    
  72  0.953467     -0.476500E-01  -6.32757       6.32757       1935.34       1941.67    
  73  0.576559     -0.550677      -73.1259       73.1259       1781.61       1854.74    
  74  0.214918      -1.53750      -204.169       204.169       2122.92       2327.09    
loop,thermsimp(1:2)        2   197.685       42.3996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       1428.62        129.65          0.67         30.08          1.23          0.05        161.68
Just calling func    0   0        161.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1428.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        2
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        3
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      224     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -116.618       116.618       1145.34       1261.95    
   2  0.117190E-02  -6.74913      -896.234       896.234       1240.71       2136.95    
   3  0.432199     -0.838870      -111.396       111.396       1332.88       1444.27    
   4  0.466381     -0.762753      -101.288       101.288       1356.13       1457.42    
   5  0.696685     -0.361422      -47.9941       47.9941       1347.44       1395.43    
   6  0.193714      -1.64137      -217.962       217.962       1207.13       1425.09    
   7  0.535145     -0.625217      -83.0242       83.0242       1407.55       1490.57    
   8  0.812984     -0.207044      -27.4940       27.4940       1407.45       1434.94    
   9  0.956789     -0.441723E-01  -5.86576       5.86576       1445.71       1451.58    
  10  0.496711E-01  -3.00233      -398.688       398.688       1412.16       1810.85    
  11  0.206308E-01  -3.88097      -515.365       515.365       1389.10       1904.47    
  12  0.423434     -0.859358      -114.116       114.116       1549.69       1663.81    
  13  0.216826      -1.52866      -202.995       202.995       1439.42       1642.42    
  14  0.792422     -0.232661      -30.8957       30.8957       1560.83       1591.73    
  15  0.265940      -1.32449      -175.882       175.882       1506.58       1682.46    
  16  0.993400     -0.662201E-02 -0.879355      0.879355       1632.39       1633.27    
  17  0.645200E-01  -2.74078      -363.955       363.955       1437.49       1801.45    
  18  0.651527     -0.428436      -56.8932       56.8932       1619.79       1676.68    
  19  0.858875     -0.152131      -20.2019       20.2019       1545.03       1565.23    
  20  0.126056      -2.07103      -275.017       275.017       1561.33       1836.34    
  21  0.772661E-01  -2.56050      -340.016       340.016       1582.86       1922.87    
  22  0.441429     -0.817737      -108.589       108.589       1407.76       1516.35    
  23  0.166586      -1.79224      -237.996       237.996       1698.61       1936.60    
  24  0.217490      -1.52560      -202.589       202.589       1705.34       1907.93    
  25  0.632871     -0.457488      -60.7511       60.7511       1608.08       1668.83    
  26  0.201694      -1.60100      -212.602       212.602       1736.08       1948.68    
  27  0.282690      -1.26341      -167.771       167.771       1555.06       1722.83    
  28  0.255086E-01  -3.66874      -487.182       487.182       1744.72       2231.91    
  29  0.562308     -0.575706      -76.4495       76.4495       1747.59       1824.04    
  30  0.283366E-01  -3.56360      -473.220       473.220       1795.55       2268.77    
  31  0.404254E-01  -3.20830      -426.038       426.038       1732.84       2158.87    
  32  0.170475      -1.76917      -234.933       234.933       1637.85       1872.78    
  33  0.141712      -1.95396      -259.471       259.471       1800.90       2060.37    
  34  0.773173     -0.257253      -34.1612       34.1612       1576.82       1610.98    
  35  0.255978      -1.36266      -180.952       180.952       1799.61       1980.56    
  36  0.823739     -0.193902      -25.7487       25.7487       1734.78       1760.53    
  37  0.166307      -1.79392      -238.219       238.219       1770.80       2009.01    
  38  0.676319     -0.391090      -51.9338       51.9338       1810.05       1861.98    
  39  0.144546      -1.93416      -256.842       256.842       1770.57       2027.41    
  40  0.593436     -0.521826      -69.2947       69.2947       1666.68       1735.98    
  41  0.762921     -0.270600      -35.9337       35.9337       1569.79       1605.72    
  42  0.855796     -0.155724      -20.6789       20.6789       1781.61       1802.29    
  43  0.433555     -0.835737      -110.980       110.980       1775.45       1886.43    
  44  0.252891      -1.37480      -182.563       182.563       1619.56       1802.12    
  45  0.942909     -0.587850E-01  -7.80622       7.80622       1719.19       1727.00    
  46  0.432313     -0.838605      -111.361       111.361       1839.48       1950.84    
  47  0.975713     -0.245869E-01  -3.26496       3.26496       1809.33       1812.60    
  48  0.541226     -0.613919      -81.5240       81.5240       1891.26       1972.78    
  49  0.255057      -1.36627      -181.430       181.430       1776.78       1958.21    
  50  0.202141      -1.59879      -212.307       212.307       1580.47       1792.77    
  51  0.949562     -0.517549E-01  -6.87267       6.87267       1882.40       1889.27    
  52  0.255660E-01  -3.66649      -486.883       486.883       1862.77       2349.65    
  53  0.306802      -1.18155      -156.901       156.901       1915.64       2072.54    
  54  0.243277E-01  -3.71614      -493.476       493.476       1935.34       2428.82    
  55  0.466793     -0.761870      -101.171       101.171       1519.51       1620.68    
  56  0.200407      -1.60740      -213.451       213.451       1736.53       1949.98    
  57  0.282970      -1.26241      -167.639       167.639       1827.18       1994.82    
  58  0.214232      -1.54069      -204.593       204.593       1844.08       2048.68    
  59  0.326606      -1.11900      -148.595       148.595       1761.73       1910.32    
  60  0.997507     -0.249621E-02 -0.331478      0.331478       1747.07       1747.40    
  61  0.426725     -0.851615      -113.088       113.088       1843.67       1956.76    
  62  0.862854     -0.147510      -19.5883       19.5883       1790.45       1810.04    
  63  0.737079     -0.305061      -40.5098       40.5098       1961.16       2001.67    
  64  0.976691     -0.235846E-01  -3.13186       3.13186       1581.32       1584.45    
  65  0.191821      -1.65119      -219.266       219.266       1889.46       2108.73    
  66  0.743386     -0.296540      -39.3784       39.3784       1969.67       2009.05    
  67  0.683162     -0.381024      -50.5972       50.5972       1868.49       1919.09    
  68  0.789040     -0.236939      -31.4637       31.4637       1996.05       2027.52    
  69  0.908546     -0.959094E-01  -12.7361       12.7361       1780.87       1793.60    
  70  0.562283     -0.575750      -76.4553       76.4553       2067.26       2143.72    
  71  0.151982E-01  -4.18658      -555.947       555.947       1735.45       2291.40    
  72  0.478777     -0.736520      -97.8045       97.8045       2001.89       2099.69    
  73  0.226919E-01  -3.78575      -502.720       502.720       2122.92       2625.64    
  74  0.489970     -0.713411      -94.7357       94.7357       1428.62       1523.36    
loop,thermsimp(1:2)        3   116.618       896.234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       1661.77        130.16          0.67         29.66          1.14          0.05        161.69
Just calling func    0   0        161.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1661.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        3
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        4
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      225     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -55.8579       55.8579       1145.34       1201.20    
   2  0.880966     -0.126736      -16.8296       16.8296       1347.44       1364.27    
   3  0.854972     -0.156687      -20.8069       20.8069       1207.13       1227.94    
   4  0.797101     -0.226774      -30.1139       30.1139       1407.45       1437.56    
   5  0.158477      -1.84214      -244.623       244.623       1332.88       1577.50    
   6  0.593839     -0.521148      -69.2046       69.2046       1445.71       1514.92    
   7  0.817101     -0.201993      -26.8232       26.8232       1356.13       1382.96    
   8  0.997190     -0.281377E-02 -0.373648      0.373648       1407.55       1407.92    
   9  0.402857     -0.909174      -120.732       120.732       1407.76       1528.50    
  10  0.690455     -0.370405      -49.1871       49.1871       1428.62       1477.81    
  11  0.609635     -0.494895      -65.7184       65.7184       1545.03       1610.75    
  12  0.491117     -0.711073      -94.4252       94.4252       1581.32       1675.74    
  13  0.990676     -0.936814E-02  -1.24402       1.24402       1560.83       1562.08    
  14  0.976919     -0.233519E-01  -3.10096       3.10096       1569.79       1572.89    
  15  0.692556     -0.367366      -48.7835       48.7835       1576.82       1625.61    
  16  0.549694     -0.598394      -79.4624       79.4624       1519.51       1598.97    
  17  0.538267E-01  -2.92199      -388.018       388.018       1632.39       2020.41    
  18  0.602193     -0.507178      -67.3495       67.3495       1439.42       1506.77    
  19  0.537276     -0.621243      -82.4965       82.4965       1549.69       1632.19    
  20  0.338220      -1.08406      -143.955       143.955       1608.08       1752.04    
  21  0.306772      -1.18165      -156.915       156.915       1619.79       1776.70    
  22  0.895389     -0.110497      -14.6732       14.6732       1506.58       1521.25    
  23  0.120096      -2.11946      -281.449       281.449       1555.06       1836.51    
  24  0.680166     -0.385418      -51.1806       51.1806       1719.19       1770.37    
  25  0.369434     -0.995782      -132.233       132.233       1666.68       1798.91    
  26  0.235484      -1.44611      -192.033       192.033       1747.07       1939.10    
  27  0.260836      -1.34386      -178.455       178.455       1734.78       1913.24    
  28  0.720259     -0.328144      -43.5752       43.5752       1580.47       1624.04    
  29  0.695069     -0.363744      -48.3025       48.3025       1780.87       1829.17    
  30  0.105076      -2.25307      -299.192       299.192       1437.49       1736.68    
  31  0.968349     -0.321628E-01  -4.27098       4.27098       1619.56       1623.83    
  32  0.974131     -0.262091E-01  -3.48038       3.48038       1781.61       1785.09    
  33  0.647785E-01  -2.73678      -363.424       363.424       1790.45       2153.87    
  34  0.910402     -0.938690E-01  -12.4651       12.4651       1412.16       1424.63    
  35  0.488733     -0.715939      -95.0714       95.0714       1809.33       1904.40    
  36  0.377436E-01  -3.27694      -435.154       435.154       1747.59       2182.75    
  37  0.154608      -1.86686      -247.906       247.906       1561.33       1809.23    
  38  0.277804      -1.28084      -170.086       170.086       1810.05       1980.14    
  39  0.969547     -0.309263E-01  -4.10678       4.10678       1637.85       1641.95    
  40  0.380083     -0.967367      -128.459       128.459       1775.45       1903.91    
  41  0.751822     -0.285256      -37.8799       37.8799       1882.40       1920.28    
  42  0.137692      -1.98274      -263.293       263.293       1389.10       1652.40    
  43  0.293470      -1.22598      -162.801       162.801       1705.34       1868.14    
  44  0.433705     -0.835390      -110.934       110.934       1761.73       1872.66    
  45  0.418034     -0.872194      -115.821       115.821       1868.49       1984.31    
  46  0.166728      -1.79139      -237.884       237.884       1582.86       1820.74    
  47  0.921960     -0.812537E-01  -10.7899       10.7899       1698.61       1709.40    
  48  0.412601     -0.885275      -117.558       117.558       1736.08       1853.64    
  49  0.925181     -0.777655E-01  -10.3267       10.3267       1736.53       1746.85    
  50  0.687711     -0.374386      -49.7158       49.7158       1839.48       1889.19    
  51  0.729890     -0.314862      -41.8114       41.8114       1843.67       1885.48    
  52  0.355028      -1.03556      -137.515       137.515       1776.78       1914.30    
  53  0.123338      -2.09283      -277.913       277.913       1891.26       2169.17    
  54  0.638370E-01  -2.75142      -365.369       365.369       1799.61       2164.97    
  55  0.379414     -0.969128      -128.693       128.693       1827.18       1955.87    
  56  0.643705     -0.440515      -58.4972       58.4972       1961.16       2019.66    
  57  0.172292      -1.75856      -233.524       233.524       1770.80       2004.32    
  58  0.996763     -0.324212E-02 -0.430529      0.430529       1969.67       1970.10    
  59  0.606366     -0.500272      -66.4324       66.4324       1770.57       1837.00    
  60  0.299698      -1.20498      -160.013       160.013       1996.05       2156.07    
  61  0.723907E-02  -4.92826      -654.437       654.437       1844.08       2498.52    
  62  0.197118      -1.62395      -215.649       215.649       1800.90       2016.55    
  63  0.316130      -1.15160      -152.924       152.924       1915.64       2068.56    
  64  0.115913      -2.15492      -286.157       286.157       2001.89       2288.04    
  65  0.661756     -0.412859      -54.8246       54.8246       1889.46       1944.29    
  66  0.838437     -0.176215      -23.4001       23.4001       1240.71       1264.11    
  67  0.929092     -0.735473E-01  -9.76654       9.76654       2067.26       2077.03    
  68  0.167251      -1.78826      -237.468       237.468       1732.84       1970.30    
  69  0.174207      -1.74751      -232.057       232.057       1744.72       1976.78    
  70  0.506799     -0.679641      -90.2513       90.2513       1795.55       1885.80    
  71  0.209504      -1.56301      -207.556       207.556       1735.45       1943.01    
  72  0.709189E-01  -2.64622      -351.398       351.398       1862.77       2214.17    
  73  0.995856     -0.415281E-02 -0.551462      0.551462       1935.34       1935.89    
  74  0.699869     -0.356862      -47.3886       47.3886       1661.77       1709.15    
loop,thermsimp(1:2)        4   55.8579       16.8296    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       2098.08        130.22          0.66         29.73          1.10          0.04        161.75
Just calling func    0   0        161.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2098.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        4
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        5
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      226     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -61.3067       61.3067       1145.34       1206.64    
   2  0.876370     -0.131967      -17.5242       17.5242       1207.13       1224.66    
   3  0.840080     -0.174259      -23.1403       23.1403       1240.71       1263.85    
   4  0.608986E-01  -2.79854      -371.626       371.626       1347.44       1719.06    
   5  0.311901      -1.16507      -154.713       154.713       1356.13       1510.85    
   6  0.937552E-01  -2.36707      -314.329       314.329       1407.55       1721.88    
   7  0.608418     -0.496893      -65.9838       65.9838       1412.16       1478.15    
   8  0.297707      -1.21164      -160.897       160.897       1407.45       1568.34    
   9  0.365777      -1.00573      -133.554       133.554       1428.62       1562.18    
  10  0.194673      -1.63643      -217.306       217.306       1439.42       1656.73    
  11  0.941388     -0.604003E-01  -8.02072       8.02072       1445.71       1453.73    
  12  0.984881     -0.152343E-01  -2.02300       2.02300       1506.58       1508.60    
  13  0.750245     -0.287355      -38.1586       38.1586       1407.76       1445.92    
  14  0.437446     -0.826803      -109.793       109.793       1560.83       1670.63    
  15  0.174754      -1.74437      -231.640       231.640       1569.79       1801.43    
  16  0.300465E-01  -3.50501      -465.439       465.439       1332.88       1798.31    
  17  0.372924     -0.986380      -130.984       130.984       1519.51       1650.49    
  18  0.803506     -0.218771      -29.0512       29.0512       1545.03       1574.08    
  19  0.232583      -1.45851      -193.679       193.679       1619.56       1813.24    
  20  0.383368     -0.958759      -127.316       127.316       1580.47       1707.78    
  21  0.622786     -0.473552      -62.8842       62.8842       1576.82       1639.71    
  22  0.356422      -1.03164      -136.994       136.994       1549.69       1686.69    
  23  0.919964     -0.834212E-01  -11.0777       11.0777       1637.85       1648.92    
  24  0.550740     -0.596492      -79.2098       79.2098       1389.10       1468.31    
  25  0.402627     -0.909745      -120.807       120.807       1581.32       1702.13    
  26  0.256265      -1.36154      -180.803       180.803       1661.77       1842.57    
  27  0.763510     -0.269828      -35.8312       35.8312       1698.61       1734.44    
  28  0.388963     -0.944271      -125.392       125.392       1437.49       1562.88    
  29  0.981923     -0.182423E-01  -2.42244       2.42244       1736.53       1738.95    
  30  0.656629     -0.420635      -55.8573       55.8573       1608.08       1663.94    
  31  0.932472     -0.699161E-01  -9.28435       9.28435       1719.19       1728.48    
  32  0.336775      -1.08834      -144.524       144.524       1619.79       1764.31    
  33  0.810758     -0.209786      -27.8580       27.8580       1781.61       1809.47    
  34  0.557014     -0.585166      -77.7057       77.7057       1666.68       1744.39    
  35  0.652747     -0.426565      -56.6447       56.6447       1561.33       1617.97    
  36  0.890774     -0.115665      -15.3594       15.3594       1582.86       1598.22    
  37  0.703035     -0.352349      -46.7894       46.7894       1780.87       1827.66    
  38  0.534296     -0.626805      -83.2350       83.2350       1555.06       1638.30    
  39  0.604162     -0.503914      -66.9160       66.9160       1770.57       1837.48    
  40  0.545557     -0.605948      -80.4654       80.4654       1736.08       1816.55    
  41  0.371346     -0.990620      -131.547       131.547       1705.34       1836.89    
  42  0.491801     -0.709680      -94.2403       94.2403       1761.73       1855.97    
  43  0.879731     -0.128139      -17.0160       17.0160       1843.67       1860.68    
  44  0.995113     -0.489866E-02 -0.650505      0.650505       1795.55       1796.20    
  45  0.467927     -0.759444      -100.849       100.849       1839.48       1940.33    
  46  0.355083      -1.03540      -137.494       137.494       1775.45       1912.95    
  47  0.216960      -1.52804      -202.913       202.913       1809.33       2012.24    
  48  0.276988      -1.28378      -170.477       170.477       1734.78       1905.26    
  49  0.905458     -0.993144E-01  -13.1882       13.1882       1776.78       1789.97    
  50  0.704241     -0.350635      -46.5617       46.5617       1882.40       1928.96    
  51  0.784564     -0.242627      -32.2191       32.2191       1935.34       1967.56    
  52  0.329376      -1.11055      -147.473       147.473       1747.07       1894.54    
  53  0.845894     -0.167361      -22.2243       22.2243       1735.45       1757.68    
  54  0.645172     -0.438238      -58.1948       58.1948       1889.46       1947.66    
  55  0.279949      -1.27315      -169.065       169.065       1827.18       1996.24    
  56  0.149089      -1.90321      -252.733       252.733       1969.67       2222.40    
  57  0.887681     -0.119143      -15.8213       15.8213       1732.84       1748.66    
  58  0.582426     -0.540553      -71.7815       71.7815       1744.72       1816.51    
  59  0.221293      -1.50827      -200.287       200.287       1810.05       2010.34    
  60  0.839449     -0.175010      -23.2400       23.2400       1868.49       1891.73    
  61  0.383721     -0.957840      -127.194       127.194       1770.80       1897.99    
  62  0.933136     -0.692040E-01  -9.18978       9.18978       1800.90       1810.09    
  63  0.148663      -1.90607      -253.113       253.113       1961.16       2214.28    
  64  0.788780     -0.237267      -31.5073       31.5073       1632.39       1663.90    
  65  0.948785     -0.525734E-01  -6.98137       6.98137       1915.64       1922.62    
  66  0.246696      -1.39960      -185.857       185.857       2067.26       2253.12    
  67  0.297902      -1.21099      -160.811       160.811       1790.45       1951.26    
  68  0.402979     -0.908870      -120.691       120.691       1996.05       2116.75    
  69  0.946008     -0.555038E-01  -7.37049       7.37049       1799.61       1806.98    
  70  0.182802      -1.69935      -225.662       225.662       1891.26       2116.92    
  71  0.245157      -1.40586      -186.688       186.688       1747.59       1934.28    
  72  0.205669      -1.58149      -210.010       210.010       1862.77       2072.78    
  73  0.242147      -1.41821      -188.328       188.328       2001.89       2190.21    
  74  0.883444E-01  -2.42651      -322.223       322.223       2098.08       2420.30    
loop,thermsimp(1:2)        5   61.3067       17.5242    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228       1844.08        129.35          0.67         30.46          0.71          0.05        161.25
Just calling func    0   0        161.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1844.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        5
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        6
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      227     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -203.516       203.516       1145.34       1348.85    
   2  0.942431     -0.592928E-01  -7.87365       7.87365       1207.13       1215.01    
   3  0.193824      -1.64081      -217.887       217.887       1240.71       1458.60    
   4  0.162512      -1.81700      -241.285       241.285       1407.76       1649.05    
   5  0.625243     -0.469616      -62.3615       62.3615       1445.71       1508.07    
   6  0.499178     -0.694793      -92.2634       92.2634       1389.10       1481.37    
   7  0.706095     -0.348006      -46.2126       46.2126       1412.16       1458.38    
   8  0.527414     -0.639770      -84.9567       84.9567       1506.58       1591.54    
   9  0.575748     -0.552085      -73.3128       73.3128       1356.13       1429.45    
  10  0.490522     -0.712286      -94.5864       94.5864       1428.62       1523.21    
  11  0.306517      -1.18248      -157.025       157.025       1437.49       1594.51    
  12  0.798470     -0.225057      -29.8860       29.8860       1407.45       1437.33    
  13  0.333550      -1.09796      -145.801       145.801       1545.03       1690.83    
  14  0.166731      -1.79138      -237.881       237.881       1582.86       1820.74    
  15  0.443580     -0.812878      -107.944       107.944       1561.33       1669.27    
  16  0.669985     -0.400500      -53.1835       53.1835       1555.06       1608.24    
  17  0.339921      -1.07904      -143.289       143.289       1576.82       1720.11    
  18  0.201260      -1.60316      -212.888       212.888       1637.85       1850.73    
  19  0.772250     -0.258447      -34.3198       34.3198       1519.51       1553.83    
  20  0.401372E-01  -3.21545      -426.988       426.988       1439.42       1866.41    
  21  0.940962     -0.608526E-01  -8.08078       8.08078       1632.39       1640.47    
  22  0.115324      -2.16001      -286.834       286.834       1608.08       1894.92    
  23  0.939991E-01  -2.36447      -313.984       313.984       1560.83       1874.82    
  24  0.412221     -0.886196      -117.680       117.680       1549.69       1667.37    
  25  0.136462      -1.99171      -264.484       264.484       1581.32       1845.80    
  26  0.310095      -1.17088      -155.484       155.484       1580.47       1735.95    
  27  0.985727     -0.143755E-01  -1.90896       1.90896       1347.44       1349.35    
  28  0.900161     -0.105182      -13.9673       13.9673       1407.55       1421.51    
  29  0.250220      -1.38542      -183.973       183.973       1719.19       1903.17    
  30  0.780405     -0.247942      -32.9249       32.9249       1698.61       1731.53    
  31  0.228719      -1.47526      -195.904       195.904       1736.53       1932.43    
  32  0.407088     -0.898727      -119.344       119.344       1666.68       1786.03    
  33  0.975627     -0.246749E-01  -3.27665       3.27665       1732.84       1736.11    
  34  0.885140     -0.122009      -16.2020       16.2020       1735.45       1751.65    
  35  0.896135     -0.109664      -14.5626       14.5626       1619.79       1634.35    
  36  0.856661     -0.154713      -20.5448       20.5448       1776.78       1797.33    
  37  0.258643      -1.35231      -179.577       179.577       1795.55       1975.13    
  38  0.336283      -1.08980      -144.718       144.718       1332.88       1477.59    
  39  0.868205     -0.141327      -18.7672       18.7672       1569.79       1588.56    
  40  0.937935     -0.640747E-01  -8.50865       8.50865       1799.61       1808.11    
  41  0.418906     -0.870109      -115.544       115.544       1781.61       1897.16    
  42  0.351040      -1.04685      -139.015       139.015       1800.90       1939.92    
  43  0.611628E-01  -2.79422      -371.051       371.051       1619.56       1990.61    
  44  0.153518      -1.87394      -248.845       248.845       1744.72       1993.57    
  45  0.938341     -0.636423E-01  -8.45123       8.45123       1736.08       1744.53    
  46  0.598133     -0.513942      -68.2477       68.2477       1780.87       1849.11    
  47  0.795771     -0.228444      -30.3357       30.3357       1705.34       1735.68    
  48  0.295375      -1.21951      -161.942       161.942       1770.57       1932.51    
  49  0.804738     -0.217239      -28.8478       28.8478       1661.77       1690.61    
  50  0.260094      -1.34671      -178.834       178.834       1761.73       1940.56    
  51  0.640517     -0.445479      -59.1563       59.1563       1843.67       1902.82    
  52  0.221872      -1.50566      -199.940       199.940       1868.49       2068.43    
  53  0.837141     -0.177762      -23.6055       23.6055       1747.07       1770.67    
  54  0.212745      -1.54766      -205.518       205.518       1770.80       1976.31    
  55  0.162033      -1.81996      -241.677       241.677       1734.78       1976.46    
  56  0.631631     -0.459450      -61.0116       61.0116       1775.45       1836.46    
  57  0.816014E-01  -2.50591      -332.766       332.766       1915.64       2248.40    
  58  0.754954     -0.281099      -37.3278       37.3278       1882.40       1919.73    
  59  0.568761E-01  -2.86688      -380.701       380.701       1747.59       2128.29    
  60  0.610521     -0.493442      -65.5255       65.5255       1839.48       1905.00    
  61  0.691718     -0.368577      -48.9443       48.9443       1889.46       1938.41    
  62  0.330677      -1.10661      -146.950       146.950       1790.45       1937.40    
  63  0.669260     -0.401583      -53.3272       53.3272       1935.34       1988.67    
  64  0.677208     -0.389776      -51.7594       51.7594       1827.18       1878.94    
  65  0.440183     -0.820565      -108.965       108.965       1810.05       1919.02    
  66  0.258089      -1.35445      -179.861       179.861       1809.33       1989.19    
  67  0.109764      -2.20942      -293.395       293.395       1862.77       2156.16    
  68  0.440932     -0.818865      -108.739       108.739       1996.05       2104.79    
  69  0.361307      -1.01803      -135.186       135.186       1891.26       2026.45    
  70  0.304201      -1.19007      -158.032       158.032       2001.89       2159.92    
  71  0.279324      -1.27538      -169.361       169.361       1961.16       2130.52    
  72  0.833329     -0.182326      -24.2116       24.2116       1969.67       1993.88    
  73  0.703144     -0.352194      -46.7688       46.7688       2067.26       2114.03    
  74  0.890049     -0.116479      -15.4676       15.4676       1844.08       1859.55    
loop,thermsimp(1:2)        6   203.516       7.87365    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229       1527.51        129.89          0.68         30.50          0.55          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1527.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        6
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        7
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      228     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -176.746       176.746       1207.13       1383.88    
   2  0.401807     -0.911784      -121.078       121.078       1145.34       1266.42    
   3  0.418885     -0.870159      -115.551       115.551       1347.44       1462.99    
   4  0.753378     -0.283189      -37.6054       37.6054       1407.55       1445.15    
   5  0.792066     -0.233111      -30.9554       30.9554       1356.13       1387.09    
   6  0.868474     -0.141017      -18.7260       18.7260       1407.45       1426.17    
   7  0.318670      -1.14360      -151.861       151.861       1412.16       1564.03    
   8  0.863267     -0.147031      -19.5246       19.5246       1240.71       1260.24    
   9  0.589255     -0.528896      -70.2335       70.2335       1332.88       1403.11    
  10  0.632079E-01  -2.76133      -366.684       366.684       1389.10       1755.79    
  11  0.992270     -0.775975E-02  -1.03044       1.03044       1445.71       1446.74    
  12  0.466140     -0.763269      -101.356       101.356       1428.62       1529.98    
  13  0.177509      -1.72873      -229.563       229.563       1519.51       1749.07    
  14  0.933326     -0.690005E-01  -9.16277       9.16277       1569.79       1578.95    
  15  0.876357     -0.131982      -17.5262       17.5262       1506.58       1524.11    
  16  0.673496     -0.395274      -52.4895       52.4895       1437.49       1489.98    
  17  0.648708     -0.432773      -57.4691       57.4691       1555.06       1612.53    
  18  0.400813     -0.914259      -121.407       121.407       1619.79       1741.19    
  19  0.763164     -0.270282      -35.8915       35.8915       1632.39       1668.28    
  20  0.196240      -1.62842      -216.242       216.242       1407.76       1624.01    
  21  0.923666     -0.794046E-01  -10.5443       10.5443       1549.69       1560.24    
  22  0.999600     -0.400298E-03 -0.531566E-01  0.531566E-01   1561.33       1561.38    
  23  0.379715     -0.968335      -128.588       128.588       1661.77       1790.35    
  24  0.197375      -1.62265      -215.476       215.476       1545.03       1760.51    
  25  0.760736     -0.273468      -36.3146       36.3146       1576.82       1613.14    
  26  0.392182     -0.936030      -124.298       124.298       1698.61       1822.90    
  27  0.256208      -1.36177      -180.833       180.833       1705.34       1886.17    
  28  0.251796      -1.37914      -183.139       183.139       1580.47       1763.61    
  29  0.332089E-01  -3.40494      -452.151       452.151       1732.84       2184.99    
  30  0.970457     -0.299883E-01  -3.98223       3.98223       1736.08       1740.06    
  31  0.467370E-01  -3.06322      -406.773       406.773       1735.45       2142.22    
  32  0.716125     -0.333901      -44.3395       44.3395       1747.07       1791.41    
  33  0.757897     -0.277208      -36.8112       36.8112       1666.68       1703.49    
  34  0.765628     -0.267059      -35.4635       35.4635       1776.78       1812.24    
  35  0.323816      -1.12758      -149.734       149.734       1799.61       1949.34    
  36  0.909845     -0.944807E-01  -12.5463       12.5463       1582.86       1595.40    
  37  0.515782     -0.662071      -87.9182       87.9182       1775.45       1863.37    
  38  0.464370     -0.767074      -101.862       101.862       1581.32       1683.18    
  39  0.445707     -0.808094      -107.309       107.309       1780.87       1888.18    
  40  0.786320     -0.240391      -31.9222       31.9222       1637.85       1669.77    
  41  0.631860     -0.459087      -60.9633       60.9633       1844.08       1905.05    
  42  0.672488     -0.396772      -52.6883       52.6883       1439.42       1492.11    
  43  0.251717E-02  -5.98462      -794.713       794.713       1560.83       2355.55    
  44  0.245023      -1.40640      -186.760       186.760       1827.18       2013.94    
  45  0.252688      -1.37560      -182.669       182.669       1608.08       1790.75    
  46  0.268946      -1.31324      -174.389       174.389       1781.61       1956.00    
  47  0.550357     -0.597189      -79.3023       79.3023       1843.67       1922.97    
  48  0.826205     -0.190912      -25.3517       25.3517       1719.19       1744.55    
  49  0.964276     -0.363780E-01  -4.83073       4.83073       1839.48       1844.31    
  50  0.415479     -0.878324      -116.635       116.635       1810.05       1926.69    
  51  0.599143E-01  -2.81484      -373.790       373.790       1882.40       2256.19    
  52  0.348555      -1.05396      -139.958       139.958       1736.53       1876.48    
  53  0.243819      -1.41133      -187.414       187.414       1770.57       1957.98    
  54  0.233297      -1.45544      -193.272       193.272       1790.45       1983.72    
  55  0.705284     -0.349155      -46.3652       46.3652       1889.46       1935.83    
  56  0.258436      -1.35311      -179.683       179.683       1800.90       1980.58    
  57  0.328631      -1.11282      -147.774       147.774       1761.73       1909.50    
  58  0.676481     -0.390852      -51.9022       51.9022       1795.55       1847.46    
  59  0.784590     -0.242594      -32.2147       32.2147       1770.80       1803.01    
  60  0.546419E-01  -2.90695      -386.022       386.022       1734.78       2120.80    
  61  0.507256     -0.678740      -90.1316       90.1316       1935.34       2025.47    
  62  0.980797     -0.193899E-01  -2.57484       2.57484       1809.33       1811.91    
  63  0.193856      -1.64064      -217.865       217.865       1619.56       1837.42    
  64  0.101492      -2.28777      -303.799       303.799       1744.72       2048.52    
  65  0.245844E-01  -3.70564      -492.082       492.082       1969.67       2461.75    
  66  0.610050     -0.494214      -65.6280       65.6280       1891.26       1956.89    
  67  0.373100E-01  -3.28849      -436.688       436.688       1868.49       2305.18    
  68  0.476763     -0.740736      -98.3643       98.3643       1996.05       2094.42    
  69  0.412657     -0.885139      -117.540       117.540       2067.26       2184.80    
  70  0.580580     -0.543727      -72.2030       72.2030       1747.59       1819.80    
  71  0.241635      -1.42033      -188.609       188.609       1961.16       2149.77    
  72  0.463019     -0.769988      -102.249       102.249       1862.77       1965.02    
  73  0.389737     -0.942284      -125.128       125.128       2001.89       2127.01    
  74  0.661923     -0.412607      -54.7911       54.7911       1527.51       1582.30    
loop,thermsimp(1:2)        7   176.746       121.078    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230       2586.34        129.96          0.68         30.27          0.67          0.05        161.63
Just calling func    0   0        161.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    231       1603.60        129.77          0.68         30.09          1.21          0.05        161.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1603.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        7
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        8
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      230     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -298.263       298.263       1240.71       1538.97    
   2  0.476819     -0.740619      -98.3488       98.3488       1145.34       1243.69    
   3  0.564430     -0.571938      -75.9492       75.9492       1207.13       1283.08    
   4  0.211741      -1.55239      -206.146       206.146       1356.13       1562.28    
   5  0.154226E-01  -4.17192      -554.000       554.000       1332.88       1886.88    
   6  0.489577     -0.714213      -94.8422       94.8422       1407.45       1502.29    
   7  0.583965     -0.537914      -71.4310       71.4310       1407.55       1478.98    
   8  0.430258     -0.843370      -111.993       111.993       1445.71       1557.70    
   9  0.280982      -1.26946      -168.576       168.576       1347.44       1516.01    
  10  0.535183     -0.625146      -83.0149       83.0149       1437.49       1520.50    
  11  0.306750      -1.18172      -156.924       156.924       1439.42       1596.35    
  12  0.924930     -0.780370E-01  -10.3627       10.3627       1506.58       1516.94    
  13  0.829670E-01  -2.48931      -330.562       330.562       1428.62       1759.19    
  14  0.330275      -1.10783      -147.112       147.112       1549.69       1696.81    
  15  0.229751      -1.47076      -195.306       195.306       1561.33       1756.63    
  16  0.455737     -0.785839      -104.354       104.354       1412.16       1516.52    
  17  0.830949     -0.185187      -24.5915       24.5915       1569.79       1594.38    
  18  0.148624      -1.90634      -253.148       253.148       1527.51       1780.66    
  19  0.883001     -0.124429      -16.5233       16.5233       1582.86       1599.38    
  20  0.668001     -0.403466      -53.5773       53.5773       1555.06       1608.64    
  21  0.610583     -0.493341      -65.5121       65.5121       1576.82       1642.34    
  22  0.689050     -0.372441      -49.4574       49.4574       1407.76       1457.22    
  23  0.124417      -2.08412      -276.755       276.755       1632.39       1909.15    
  24  0.785584E-01  -2.54391      -337.813       337.813       1637.85       1975.66    
  25  0.936565     -0.655366E-01  -8.70277       8.70277       1581.32       1590.02    
  26  0.483719     -0.726252      -96.4409       96.4409       1666.68       1763.12    
  27  0.715685     -0.334515      -44.4212       44.4212       1736.08       1780.50    
  28  0.786437     -0.240243      -31.9025       31.9025       1619.79       1651.69    
  29  0.361023      -1.01881      -135.291       135.291       1719.19       1854.48    
  30  0.325559      -1.12221      -149.021       149.021       1519.51       1668.53    
  31  0.850460     -0.161978      -21.5095       21.5095       1389.10       1410.61    
  32  0.301358      -1.19946      -159.279       159.279       1545.03       1704.31    
  33  0.304725      -1.18834      -157.803       157.803       1580.47       1738.27    
  34  0.887065     -0.119838      -15.9135       15.9135       1661.77       1677.68    
  35  0.762822     -0.270730      -35.9510       35.9510       1608.08       1644.03    
  36  0.364130      -1.01024      -134.153       134.153       1747.07       1881.22    
  37  0.762041     -0.271754      -36.0870       36.0870       1770.80       1806.88    
  38  0.941180     -0.606207E-01  -8.04998       8.04998       1809.33       1817.38    
  39  0.449403     -0.799835      -106.212       106.212       1776.78       1882.99    
  40  0.743855     -0.295910      -39.2946       39.2946       1747.59       1786.89    
  41  0.743104     -0.296920      -39.4288       39.4288       1698.61       1738.03    
  42  0.350527      -1.04832      -139.209       139.209       1619.56       1758.77    
  43  0.607240     -0.498831      -66.2411       66.2411       1839.48       1905.72    
  44  0.557347     -0.584567      -77.6262       77.6262       1795.55       1873.18    
  45  0.217970      -1.52340      -202.296       202.296       1775.45       1977.75    
  46  0.364570      -1.00904      -133.992       133.992       1736.53       1870.52    
  47  0.330900      -1.10594      -146.861       146.861       1705.34       1852.20    
  48  0.861127     -0.149514      -19.8543       19.8543       1780.87       1800.72    
  49  0.710764E-01  -2.64400      -351.104       351.104       1844.08       2195.19    
  50  0.264543      -1.32975      -176.581       176.581       1761.73       1938.31    
  51  0.985836     -0.142654E-01  -1.89434       1.89434       1843.67       1845.56    
  52  0.296563      -1.21550      -161.409       161.409       1810.05       1971.46    
  53  0.875112     -0.133403      -17.7149       17.7149       1889.46       1907.18    
  54  0.808637     -0.212405      -28.2058       28.2058       1799.61       1827.81    
  55  0.394372     -0.930461      -123.558       123.558       1781.61       1905.17    
  56  0.209815      -1.56153      -207.360       207.360       1891.26       2098.62    
  57  0.154667      -1.86648      -247.855       247.855       1770.57       2018.42    
  58  0.741232     -0.299442      -39.7637       39.7637       1862.77       1902.53    
  59  0.386718E-01  -3.25265      -431.927       431.927       1800.90       2232.83    
  60  0.372867     -0.986533      -131.004       131.004       1790.45       1921.45    
  61  0.910828E-01  -2.39599      -318.169       318.169       1827.18       2145.35    
  62  0.660999     -0.414003      -54.9765       54.9765       1935.34       1990.32    
  63  0.631205E-01  -2.76271      -366.867       366.867       1744.72       2111.59    
  64  0.959104     -0.417554E-01  -5.54481       5.54481       1996.05       2001.60    
  65  0.132829      -2.01869      -268.067       268.067       1734.78       2002.85    
  66  0.162229      -1.81875      -241.516       241.516       2001.89       2243.40    
  67  0.155176      -1.86319      -247.418       247.418       1735.45       1982.87    
  68  0.950416E-01  -2.35344      -312.520       312.520       1961.16       2273.68    
  69  0.591456     -0.525169      -69.7385       69.7385       2067.26       2137.00    
  70  0.297427      -1.21259      -161.023       161.023       1732.84       1893.86    
  71  0.980650E-01  -2.32213      -308.361       308.361       1882.40       2190.76    
  72  0.795540     -0.228734      -30.3741       30.3741       1868.49       1898.87    
  73  0.949409     -0.519153E-01  -6.89398       6.89398       1560.83       1567.73    
  74  0.155806      -1.85914      -246.880       246.880       1603.60       1850.48    
loop,thermsimp(1:2)        8   298.263       98.3488    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       1436.49        130.00          0.66         29.73          1.36          0.05        161.81
Just calling func    0   0        161.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1436.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        8
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:        9
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      231     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -58.9689       58.9689       1145.34       1204.31    
   2  0.805197     -0.216668      -28.7719       28.7719       1207.13       1235.90    
   3  0.976428     -0.238543E-01  -3.16768       3.16768       1389.10       1392.27    
   4  0.599028     -0.512447      -68.0492       68.0492       1407.76       1475.81    
   5  0.591081     -0.525802      -69.8226       69.8226       1407.55       1477.37    
   6  0.151500      -1.88717      -250.602       250.602       1407.45       1658.05    
   7  0.565682     -0.569723      -75.6550       75.6550       1347.44       1423.09    
   8  0.345258      -1.06346      -141.220       141.220       1412.16       1553.38    
   9  0.658101     -0.418397      -55.5600       55.5600       1506.58       1562.14    
  10  0.691977E-01  -2.67079      -354.661       354.661       1437.49       1792.15    
  11  0.289062      -1.24111      -164.811       164.811       1240.71       1405.52    
  12  0.949819     -0.514835E-01  -6.83664       6.83664       1445.71       1452.55    
  13  0.791632     -0.233658      -31.0281       31.0281       1356.13       1387.16    
  14  0.400532     -0.914962      -121.500       121.500       1560.83       1682.33    
  15  0.241886      -1.41929      -188.471       188.471       1581.32       1769.79    
  16  0.383016     -0.959678      -127.438       127.438       1569.79       1697.23    
  17  0.993978     -0.604041E-02 -0.802121      0.802121       1439.42       1440.22    
  18  0.807089     -0.214322      -28.4604       28.4604       1582.86       1611.32    
  19  0.732161     -0.311755      -41.3987       41.3987       1555.06       1596.46    
  20  0.176507      -1.73440      -230.315       230.315       1576.82       1807.14    
  21  0.628098     -0.465059      -61.7564       61.7564       1608.08       1669.84    
  22  0.383392     -0.958697      -127.308       127.308       1619.79       1747.09    
  23  0.906421     -0.982517E-01  -13.0471       13.0471       1519.51       1532.55    
  24  0.329288      -1.11082      -147.509       147.509       1661.77       1809.27    
  25  0.869436     -0.139911      -18.5791       18.5791       1549.69       1568.27    
  26  0.354994      -1.03565      -137.527       137.527       1545.03       1682.56    
  27  0.127935      -2.05623      -273.053       273.053       1698.61       1971.66    
  28  0.840123     -0.174207      -23.1334       23.1334       1580.47       1603.60    
  29  0.625861     -0.468627      -62.2302       62.2302       1561.33       1623.56    
  30  0.488384     -0.716653      -95.1662       95.1662       1619.56       1714.72    
  31  0.888226E-01  -2.42111      -321.506       321.506       1428.62       1750.13    
  32  0.262955      -1.33577      -177.381       177.381       1666.68       1844.06    
  33  0.153205E-01  -4.17856      -554.883       554.883       1736.08       2290.96    
  34  0.432355     -0.838509      -111.348       111.348       1527.51       1638.86    
  35  0.225273      -1.49044      -197.920       197.920       1747.59       1945.51    
  36  0.812147     -0.208074      -27.6307       27.6307       1780.87       1808.50    
  37  0.832805E-01  -2.48554      -330.061       330.061       1770.80       2100.86    
  38  0.442280     -0.815813      -108.334       108.334       1809.33       1917.67    
  39  0.106639      -2.23831      -297.231       297.231       1799.61       2096.84    
  40  0.143053      -1.94454      -258.220       258.220       1843.67       2101.89    
  41  0.871774     -0.137225      -18.2225       18.2225       1603.60       1621.83    
  42  0.137692      -1.98273      -263.292       263.292       1705.34       1968.63    
  43  0.366512      -1.00372      -133.287       133.287       1719.19       1852.48    
  44  0.617157     -0.482633      -64.0900       64.0900       1736.53       1800.62    
  45  0.420337     -0.866700      -115.091       115.091       1795.55       1910.64    
  46  0.935846     -0.663044E-01  -8.80474       8.80474       1747.07       1755.87    
  47  0.979912     -0.202925E-01  -2.69469       2.69469       1776.78       1779.48    
  48  0.692793     -0.367024      -48.7381       48.7381       1332.88       1381.61    
  49  0.155424      -1.86160      -247.207       247.207       1732.84       1980.04    
  50  0.703218     -0.352088      -46.7547       46.7547       1868.49       1915.25    
  51  0.396734     -0.924489      -122.765       122.765       1862.77       1985.53    
  52  0.247863      -1.39488      -185.230       185.230       1781.61       1966.84    
  53  0.176690      -1.73336      -230.177       230.177       1839.48       2069.65    
  54  0.832421     -0.183417      -24.3564       24.3564       1889.46       1913.82    
  55  0.598900     -0.512660      -68.0775       68.0775       1632.39       1700.47    
  56  0.940005     -0.618702E-01  -8.21591       8.21591       1790.45       1798.67    
  57  0.556954     -0.585272      -77.7199       77.7199       1761.73       1839.45    
  58  0.920495     -0.828436E-01  -11.0010       11.0010       1810.05       1821.05    
  59  0.896932     -0.108775      -14.4446       14.4446       1637.85       1652.29    
  60  0.200022      -1.60933      -213.707       213.707       1775.45       1989.16    
  61  0.667904E-01  -2.70620      -359.363       359.363       1735.45       2094.81    
  62  0.146707      -1.91932      -254.871       254.871       1935.34       2190.21    
  63  0.305705      -1.18513      -157.377       157.377       1996.05       2153.43    
  64  0.975058     -0.252587E-01  -3.35417       3.35417       1734.78       1738.14    
  65  0.229625      -1.47131      -195.379       195.379       1770.57       1965.95    
  66  0.477708     -0.738756      -98.1013       98.1013       1891.26       1989.36    
  67  0.443063     -0.814043      -108.099       108.099       1744.72       1852.82    
  68  0.988727     -0.113371E-01  -1.50549       1.50549       2067.26       2068.77    
  69  0.338863      -1.08216      -143.703       143.703       1827.18       1970.88    
  70  0.929830     -0.727534E-01  -9.66112       9.66112       1882.40       1892.06    
  71  0.537152     -0.621475      -82.5273       82.5273       1844.08       1926.61    
  72  0.626264E-01  -2.77057      -367.911       367.911       1800.90       2168.81    
  73  0.970389     -0.300585E-01  -3.99154       3.99154       2001.89       2005.88    
  74  0.902865     -0.102183      -13.5691       13.5691       1436.49       1450.06    
loop,thermsimp(1:2)        9   58.9689       28.7719    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       1560.28        129.75          0.68         29.99          1.20          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1560.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:        9
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       10
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      232     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -24.2380       24.2380       1145.34       1169.58    
   2  0.367543      -1.00091      -132.914       132.914       1207.13       1340.05    
   3  0.528755     -0.637231      -84.6196       84.6196       1332.88       1417.49    
   4  0.776829     -0.252535      -33.5348       33.5348       1356.13       1389.67    
   5  0.149594E-01  -4.20242      -558.050       558.050       1389.10       1947.15    
   6  0.892228     -0.114033      -15.1427       15.1427       1240.71       1255.85    
   7  0.191037      -1.65529      -219.810       219.810       1347.44       1567.25    
   8  0.516533     -0.660616      -87.7249       87.7249       1439.42       1527.15    
   9  0.273230      -1.29744      -172.291       172.291       1436.49       1608.78    
  10  0.822225     -0.195741      -25.9930       25.9930       1445.71       1471.70    
  11  0.359850      -1.02207      -135.723       135.723       1407.76       1543.49    
  12  0.611658     -0.491581      -65.2784       65.2784       1407.55       1472.82    
  13  0.249481      -1.38837      -184.365       184.365       1519.51       1703.87    
  14  0.441252     -0.818139      -108.643       108.643       1412.16       1520.81    
  15  0.910514E-01  -2.39633      -318.215       318.215       1506.58       1824.80    
  16  0.745146     -0.294175      -39.0643       39.0643       1549.69       1588.76    
  17  0.758301     -0.276675      -36.7404       36.7404       1555.06       1591.80    
  18  0.638521     -0.448601      -59.5709       59.5709       1580.47       1640.04    
  19  0.150180      -1.89592      -251.764       251.764       1582.86       1834.62    
  20  0.144147      -1.93692      -257.209       257.209       1603.60       1860.81    
  21  0.104928      -2.25448      -299.378       299.378       1561.33       1860.71    
  22  0.398120     -0.921002      -122.302       122.302       1527.51       1649.82    
  23  0.802258     -0.220325      -29.2576       29.2576       1637.85       1667.10    
  24  0.399299     -0.918044      -121.909       121.909       1407.45       1529.36    
  25  0.493060     -0.707124      -93.9009       93.9009       1608.08       1701.98    
  26  0.504407     -0.684372      -90.8796       90.8796       1560.83       1651.71    
  27  0.762058     -0.271733      -36.0841       36.0841       1545.03       1581.11    
  28  0.430267     -0.843350      -111.991       111.991       1569.79       1681.78    
  29  0.993832     -0.618725E-02 -0.821621      0.821621       1632.39       1633.21    
  30  0.705390     -0.349005      -46.3453       46.3453       1619.56       1665.90    
  31  0.969760     -0.307069E-01  -4.07765       4.07765       1734.78       1738.86    
  32  0.245618      -1.40398      -186.438       186.438       1619.79       1806.22    
  33  0.685790     -0.377184      -50.0873       50.0873       1428.62       1478.71    
  34  0.905089     -0.997222E-01  -13.2424       13.2424       1747.07       1760.31    
  35  0.414065     -0.881732      -117.088       117.088       1581.32       1698.41    
  36  0.714747E-01  -2.63841      -350.362       350.362       1776.78       2127.14    
  37  0.694510     -0.364548      -48.4093       48.4093       1437.49       1485.90    
  38  0.770213E-01  -2.56367      -340.437       340.437       1790.45       2130.89    
  39  0.846173     -0.167031      -22.1805       22.1805       1736.53       1758.71    
  40  0.485012     -0.723582      -96.0864       96.0864       1576.82       1672.91    
  41  0.345787      -1.06193      -141.017       141.017       1780.87       1921.88    
  42  0.851861     -0.160332      -21.2909       21.2909       1661.77       1683.06    
  43  0.774151     -0.255989      -33.9934       33.9934       1810.05       1844.04    
  44  0.512382     -0.668685      -88.7964       88.7964       1761.73       1850.52    
  45  0.839798     -0.174594      -23.1849       23.1849       1666.68       1689.87    
  46  0.430550     -0.842692      -111.903       111.903       1719.19       1831.10    
  47  0.988263     -0.118067E-01  -1.56784       1.56784       1744.72       1746.29    
  48  0.349495      -1.05127      -139.600       139.600       1882.40       2022.00    
  49  0.290701      -1.23546      -164.060       164.060       1795.55       1959.61    
  50  0.210466      -1.55843      -206.948       206.948       1889.46       2096.41    
  51  0.361038      -1.01877      -135.285       135.285       1868.49       2003.78    
  52  0.168890      -1.77851      -236.173       236.173       1809.33       2045.50    
  53  0.176000      -1.73727      -230.697       230.697       1844.08       2074.78    
  54  0.494423     -0.704364      -93.5344       93.5344       1747.59       1841.13    
  55  0.887313     -0.119558      -15.8764       15.8764       1770.57       1786.44    
  56  0.318781      -1.14325      -151.815       151.815       1781.61       1933.43    
  57  0.385435     -0.953382      -126.602       126.602       1705.34       1831.94    
  58  0.557906     -0.583564      -77.4930       77.4930       1827.18       1904.67    
  59  0.262507      -1.33748      -177.607       177.607       1698.61       1876.21    
  60  0.573408     -0.556157      -73.8536       73.8536       1732.84       1806.69    
  61  0.334195      -1.09603      -145.545       145.545       1862.77       2008.31    
  62  0.365463      -1.00659      -133.668       133.668       1775.45       1909.12    
  63  0.182452      -1.70127      -225.916       225.916       1891.26       2117.18    
  64  0.224434      -1.49418      -198.416       198.416       2001.89       2200.30    
  65  0.599163     -0.512222      -68.0193       68.0193       2067.26       2135.28    
  66  0.549089     -0.599495      -79.6086       79.6086       1839.48       1919.09    
  67  0.830082     -0.186231      -24.7301       24.7301       1735.45       1760.18    
  68  0.824393     -0.193108      -25.6434       25.6434       1799.61       1825.25    
  69  0.814179     -0.205575      -27.2989       27.2989       1770.80       1798.09    
  70  0.731713E-01  -2.61495      -347.246       347.246       1843.67       2190.91    
  71  0.588145     -0.530782      -70.4839       70.4839       1996.05       2066.54    
  72  0.777400     -0.251801      -33.4373       33.4373       1800.90       1834.34    
  73  0.497973     -0.697209      -92.5842       92.5842       1935.34       2027.93    
  74  0.692859     -0.366929      -48.7255       48.7255       1560.28       1609.00    
loop,thermsimp(1:2)       10   24.2380       132.914    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234       2584.34        129.59          0.68         30.59          0.69          0.05        161.61
Just calling func    0   0        161.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    235       1450.94        129.62          0.66         30.42          0.71          0.05        161.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1450.94
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       10
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       11
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      234     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -11.1596       11.1596       1145.34       1156.50    
   2  0.309089      -1.17413      -155.915       155.915       1240.71       1396.63    
   3  0.237901      -1.43590      -190.677       190.677       1207.13       1397.81    
   4  0.542467     -0.611627      -81.2196       81.2196       1356.13       1437.35    
   5  0.523672     -0.646889      -85.9022       85.9022       1332.88       1418.78    
   6  0.850058     -0.162450      -21.5722       21.5722       1445.71       1467.28    
   7  0.589343     -0.528746      -70.2136       70.2136       1407.55       1477.76    
   8  0.979269     -0.209490E-01  -2.78187       2.78187       1428.62       1431.41    
   9  0.110419      -2.20347      -292.605       292.605       1437.49       1730.09    
  10  0.557914     -0.583550      -77.4911       77.4911       1412.16       1489.66    
  11  0.474464     -0.745569      -99.0060       99.0060       1439.42       1538.43    
  12  0.312482      -1.16321      -154.465       154.465       1407.45       1561.91    
  13  0.297011      -1.21399      -161.208       161.208       1407.76       1568.97    
  14  0.857571     -0.153651      -20.4038       20.4038       1347.44       1367.84    
  15  0.792567     -0.232479      -30.8715       30.8715       1545.03       1575.90    
  16  0.963006     -0.376958E-01  -5.00573       5.00573       1549.69       1554.70    
  17  0.294103      -1.22382      -162.515       162.515       1555.06       1717.58    
  18  0.403484     -0.907618      -120.525       120.525       1436.49       1557.02    
  19  0.449313     -0.800035      -106.239       106.239       1560.28       1666.52    
  20  0.721912     -0.325852      -43.2707       43.2707       1632.39       1675.66    
  21  0.512488     -0.668479      -88.7690       88.7690       1580.47       1669.24    
  22  0.885190     -0.121953      -16.1944       16.1944       1527.51       1543.71    
  23  0.694751E-01  -2.66679      -354.130       354.130       1560.83       1914.96    
  24  0.820879     -0.197380      -26.2106       26.2106       1619.56       1645.77    
  25  0.211527      -1.55340      -206.281       206.281       1637.85       1844.13    
  26  0.937420     -0.646236E-01  -8.58153       8.58153       1576.82       1585.41    
  27  0.515756E-01  -2.96471      -393.691       393.691       1569.79       1963.48    
  28  0.695222     -0.363525      -48.2734       48.2734       1661.77       1710.04    
  29  0.718776     -0.330205      -43.8488       43.8488       1666.68       1710.53    
  30  0.536080     -0.623471      -82.7924       82.7924       1581.32       1664.11    
  31  0.585855     -0.534682      -71.0019       71.0019       1608.08       1679.09    
  32  0.693572     -0.365900      -48.5889       48.5889       1519.51       1568.09    
  33  0.700823     -0.355500      -47.2077       47.2077       1734.78       1781.99    
  34  0.250985      -1.38236      -183.567       183.567       1744.72       1928.29    
  35  0.290600      -1.23581      -164.106       164.106       1736.53       1900.63    
  36  0.828609     -0.188007      -24.9660       24.9660       1735.45       1760.42    
  37  0.225820      -1.48802      -197.598       197.598       1747.07       1944.67    
  38  0.999674     -0.326354E-03 -0.433374E-01  0.433374E-01   1770.57       1770.61    
  39  0.878216     -0.129862      -17.2448       17.2448       1770.80       1788.04    
  40  0.685898E-01  -2.67961      -355.833       355.833       1619.79       1975.62    
  41  0.273860      -1.29514      -171.985       171.985       1732.84       1904.82    
  42  0.697655     -0.360030      -47.8094       47.8094       1506.58       1554.39    
  43  0.293168      -1.22701      -162.938       162.938       1799.61       1962.54    
  44  0.319476      -1.14107      -151.526       151.526       1719.19       1870.72    
  45  0.874681     -0.133896      -17.7804       17.7804       1705.34       1723.12    
  46  0.408697     -0.894781      -118.820       118.820       1800.90       1919.72    
  47  0.142130E-01  -4.25360      -564.846       564.846       1582.86       2147.70    
  48  0.164528      -1.80468      -239.648       239.648       1747.59       1987.24    
  49  0.652669     -0.426685      -56.6606       56.6606       1810.05       1866.71    
  50  0.492107     -0.709060      -94.1580       94.1580       1761.73       1855.88    
  51  0.542705     -0.611189      -81.1614       81.1614       1561.33       1642.49    
  52  0.798603     -0.224891      -29.8639       29.8639       1603.60       1633.47    
  53  0.474092E-01  -3.04894      -404.877       404.877       1698.61       2103.48    
  54  0.425084     -0.855468      -113.600       113.600       1827.18       1940.78    
  55  0.349722      -1.05062      -139.514       139.514       1775.45       1914.97    
  56  0.499235     -0.694678      -92.2482       92.2482       1839.48       1931.72    
  57  0.193091      -1.64459      -218.390       218.390       1780.87       1999.26    
  58  0.876894     -0.131369      -17.4448       17.4448       1781.61       1799.06    
  59  0.634591     -0.454774      -60.3906       60.3906       1389.10       1449.49    
  60  0.571394     -0.559676      -74.3209       74.3209       1795.55       1869.87    
  61  0.749680     -0.288108      -38.2587       38.2587       1868.49       1906.75    
  62  0.111050      -2.19777      -291.848       291.848       1862.77       2154.62    
  63  0.456811     -0.783485      -104.041       104.041       1882.40       1986.44    
  64  0.686362     -0.376350      -49.9766       49.9766       1935.34       1985.32    
  65  0.160608      -1.82879      -242.850       242.850       1809.33       2052.18    
  66  0.557454     -0.584375      -77.6007       77.6007       1996.05       2073.65    
  67  0.914976     -0.888571E-01  -11.7996       11.7996       1844.08       1855.88    
  68  0.203755      -1.59084      -211.252       211.252       1889.46       2100.71    
  69  0.851702     -0.160519      -21.3158       21.3158       1891.26       1912.58    
  70  0.770841     -0.260273      -34.5624       34.5624       1776.78       1811.34    
  71  0.137106      -1.98700      -263.859       263.859       1790.45       2054.31    
  72  0.142091      -1.95129      -259.116       259.116       2067.26       2326.38    
  73  0.833303E-01  -2.48494      -329.982       329.982       1843.67       2173.65    
  74  0.277948      -1.28032      -170.017       170.017       1450.94       1620.96    
loop,thermsimp(1:2)       11   11.1596       155.915    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236       1447.80        129.34          0.64         30.36          1.06          0.05        161.45
Just calling func    0   0        161.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1447.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       11
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       12
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      235     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -35.9431       35.9431       1145.34       1181.28    
   2  0.482922E-01  -3.03048      -402.426       402.426       1347.44       1749.86    
   3  0.612960     -0.489456      -64.9962       64.9962       1240.71       1305.71    
   4  0.910127     -0.941714E-01  -12.5053       12.5053       1207.13       1219.64    
   5  0.362433      -1.01492      -134.774       134.774       1332.88       1467.65    
   6  0.476779     -0.740702      -98.3598       98.3598       1428.62       1526.98    
   7  0.179006E-01  -4.02292      -534.214       534.214       1356.13       1890.35    
   8  0.589646     -0.528233      -70.1454       70.1454       1389.10       1459.25    
   9  0.926206     -0.766581E-01  -10.1796       10.1796       1445.71       1455.89    
  10  0.492629     -0.707999      -94.0171       94.0171       1407.55       1501.56    
  11  0.661123     -0.413815      -54.9516       54.9516       1412.16       1467.12    
  12  0.542248     -0.612032      -81.2733       81.2733       1439.42       1520.69    
  13  0.216527      -1.53004      -203.178       203.178       1527.51       1730.69    
  14  0.549832     -0.598143      -79.4290       79.4290       1506.58       1586.01    
  15  0.429556     -0.845003      -112.210       112.210       1549.69       1661.90    
  16  0.264838      -1.32864      -176.433       176.433       1436.49       1612.92    
  17  0.251706      -1.37949      -183.187       183.187       1407.45       1590.63    
  18  0.701724     -0.354215      -47.0371       47.0371       1519.51       1566.54    
  19  0.324289      -1.12612      -149.540       149.540       1407.76       1557.30    
  20  0.160749E-02  -6.43308      -854.266       854.266       1545.03       2399.30    
  21  0.533627     -0.628058      -83.4015       83.4015       1576.82       1660.23    
  22  0.883065     -0.124357      -16.5136       16.5136       1450.94       1467.45    
  23  0.484824     -0.723969      -96.1377       96.1377       1603.60       1699.74    
  24  0.724157     -0.322747      -42.8584       42.8584       1561.33       1604.19    
  25  0.847375     -0.165612      -21.9921       21.9921       1619.56       1641.55    
  26  0.167586      -1.78626      -237.202       237.202       1581.32       1818.52    
  27  0.890079     -0.116445      -15.4630       15.4630       1560.28       1575.74    
  28  0.235223      -1.44722      -192.181       192.181       1580.47       1772.65    
  29  0.206112      -1.57934      -209.724       209.724       1632.39       1842.12    
  30  0.463385     -0.769198      -102.144       102.144       1608.08       1710.23    
  31  0.487880E-01  -3.02027      -401.070       401.070       1661.77       2062.83    
  32  0.244157      -1.40994      -187.230       187.230       1666.68       1853.91    
  33  0.770602     -0.260583      -34.6035       34.6035       1555.06       1589.66    
  34  0.264159      -1.33120      -176.774       176.774       1705.34       1882.11    
  35  0.189030E-01  -3.96843      -526.979       526.979       1437.49       1964.47    
  36  0.635342     -0.453592      -60.2337       60.2337       1735.45       1795.69    
  37  0.139550      -1.96933      -261.513       261.513       1770.57       2032.08    
  38  0.561566     -0.577026      -76.6248       76.6248       1734.78       1811.41    
  39  0.951789     -0.494118E-01  -6.56153       6.56153       1770.80       1777.36    
  40  0.527693     -0.639242      -84.8866       84.8866       1781.61       1866.50    
  41  0.925337     -0.775972E-01  -10.3043       10.3043       1776.78       1787.09    
  42  0.795352     -0.228971      -30.4057       30.4057       1637.85       1668.25    
  43  0.530799     -0.633371      -84.1071       84.1071       1761.73       1845.83    
  44  0.642763     -0.441979      -58.6915       58.6915       1844.08       1902.78    
  45  0.485146     -0.723305      -96.0496       96.0496       1810.05       1906.10    
  46  0.795896     -0.228287      -30.3148       30.3148       1795.55       1825.87    
  47  0.519140     -0.655581      -87.0564       87.0564       1719.19       1806.25    
  48  0.694073E-01  -2.66776      -354.259       354.259       1736.53       2090.79    
  49  0.401486     -0.912583      -121.184       121.184       1732.84       1854.02    
  50  0.587982E-01  -2.83364      -376.287       376.287       1868.49       2244.78    
  51  0.752652     -0.284152      -37.7333       37.7333       1891.26       1928.99    
  52  0.139929      -1.96662      -261.153       261.153       1560.83       1821.99    
  53  0.136759      -1.98953      -264.195       264.195       1775.45       2039.65    
  54  0.690728     -0.370009      -49.1345       49.1345       1800.90       1850.04    
  55  0.409546     -0.892705      -118.545       118.545       1744.72       1863.27    
  56  0.422285     -0.862075      -114.477       114.477       1839.48       1953.95    
  57  0.160439      -1.82984      -242.989       242.989       1827.18       2070.17    
  58  0.230463      -1.46767      -194.895       194.895       1747.07       1941.96    
  59  0.836860     -0.178099      -23.6502       23.6502       1799.61       1823.26    
  60  0.635813     -0.452850      -60.1352       60.1352       1569.79       1629.92    
  61  0.464135     -0.767580      -101.929       101.929       1619.79       1721.71    
  62  0.999501     -0.498826E-03 -0.662404E-01  0.662404E-01   1935.34       1935.41    
  63  0.472031     -0.750710      -99.6887       99.6887       1882.40       1982.09    
  64  0.926290     -0.765681E-01  -10.1677       10.1677       1747.59       1757.76    
  65  0.825201E-01  -2.49471      -331.280       331.280       1780.87       2112.15    
  66  0.987125     -0.129587E-01  -1.72082       1.72082       1809.33       1811.05    
  67  0.902936     -0.102104      -13.5586       13.5586       1790.45       1804.01    
  68  0.269140E-01  -3.61511      -480.060       480.060       1996.05       2476.11    
  69  0.343181      -1.06950      -142.021       142.021       1889.46       2031.48    
  70  0.364015      -1.01056      -134.195       134.195       1698.61       1832.80    
  71  0.420237     -0.866937      -115.123       115.123       1582.86       1697.98    
  72  0.806946     -0.214499      -28.4838       28.4838       1862.77       1891.25    
  73  0.545083     -0.606816      -80.5808       80.5808       1843.67       1924.25    
  74  0.651758     -0.428082      -56.8461       56.8461       1447.80       1504.65    
loop,thermsimp(1:2)       12   35.9431       402.426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       1827.47        129.39          0.67         30.67          1.02          0.05        161.79
Just calling func    0   0        161.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238      16893.10        127.23          0.67         30.87          0.71          0.05        159.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1827.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       12
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       13
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      237     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -69.4352       69.4352       1145.34       1214.77    
   2  0.691791     -0.368472      -48.9303       48.9303       1207.13       1256.06    
   3  0.688173     -0.373715      -49.6266       49.6266       1240.71       1290.34    
   4  0.439966     -0.821058      -109.030       109.030       1445.71       1554.74    
   5  0.945690     -0.558403E-01  -7.41518       7.41518       1389.10       1396.52    
   6  0.238956      -1.43147      -190.089       190.089       1412.16       1602.25    
   7  0.280830E-01  -3.57259      -474.414       474.414       1450.94       1925.35    
   8  0.902031E-01  -2.40569      -319.458       319.458       1332.88       1652.33    
   9  0.198361      -1.61767      -214.814       214.814       1407.55       1622.36    
  10  0.201288      -1.60302      -212.869       212.869       1447.80       1660.67    
  11  0.710033     -0.342444      -45.4740       45.4740       1439.42       1484.90    
  12  0.182913      -1.69874      -225.581       225.581       1428.62       1654.20    
  13  0.817316     -0.201730      -26.7882       26.7882       1407.76       1434.55    
  14  0.894732     -0.111231      -14.7706       14.7706       1519.51       1534.28    
  15  0.854000     -0.157824      -20.9579       20.9579       1560.28       1581.24    
  16  0.248066      -1.39406      -185.121       185.121       1506.58       1691.70    
  17  0.670877     -0.399170      -53.0068       53.0068       1555.06       1608.07    
  18  0.701473     -0.354573      -47.0847       47.0847       1407.45       1454.53    
  19  0.199467      -1.61210      -214.076       214.076       1561.33       1775.40    
  20  0.391533     -0.937685      -124.518       124.518       1436.49       1561.01    
  21  0.586761     -0.533138      -70.7967       70.7967       1569.79       1640.58    
  22  0.163799      -1.80912      -240.237       240.237       1619.56       1859.80    
  23  0.955964     -0.450353E-01  -5.98035       5.98035       1576.82       1582.80    
  24  0.365727      -1.00587      -133.572       133.572       1549.69       1683.27    
  25  0.733577     -0.309822      -41.1421       41.1421       1637.85       1678.99    
  26  0.111597      -2.19286      -291.196       291.196       1582.86       1874.05    
  27  0.714895     -0.335619      -44.5677       44.5677       1603.60       1648.17    
  28  0.816688     -0.202498      -26.8902       26.8902       1608.08       1634.97    
  29  0.480603     -0.732714      -97.2990       97.2990       1619.79       1717.08    
  30  0.573891     -0.555316      -73.7418       73.7418       1527.51       1601.26    
  31  0.204452      -1.58742      -210.798       210.798       1347.44       1558.24    
  32  0.845356E-01  -2.47058      -328.075       328.075       1747.59       2075.67    
  33  0.524789E-01  -2.94734      -391.386       391.386       1580.47       1971.85    
  34  0.631781     -0.459213      -60.9801       60.9801       1770.80       1831.78    
  35  0.620363     -0.477450      -63.4018       63.4018       1776.78       1840.18    
  36  0.553551     -0.591402      -78.5338       78.5338       1735.45       1813.99    
  37  0.546271     -0.604640      -80.2917       80.2917       1790.45       1870.74    
  38  0.402204     -0.910797      -120.947       120.947       1719.19       1840.14    
  39  0.735174     -0.307648      -40.8533       40.8533       1809.33       1850.19    
  40  0.359565      -1.02286      -135.828       135.828       1734.78       1870.61    
  41  0.564111     -0.572504      -76.0244       76.0244       1581.32       1657.34    
  42  0.412661     -0.885128      -117.538       117.538       1560.83       1678.37    
  43  0.795853     -0.228341      -30.3220       30.3220       1799.61       1829.93    
  44  0.909991E-01  -2.39691      -318.291       318.291       1795.55       2113.84    
  45  0.830687     -0.185502      -24.6333       24.6333       1698.61       1723.24    
  46  0.592588     -0.523256      -69.4845       69.4845       1632.39       1701.88    
  47  0.489472     -0.714427      -94.8707       94.8707       1761.73       1856.60    
  48  0.992056     -0.797586E-02  -1.05914       1.05914       1800.90       1801.96    
  49  0.808208     -0.212936      -28.2763       28.2763       1666.68       1694.96    
  50  0.212569      -1.54849      -205.628       205.628       1732.84       1938.46    
  51  0.214041      -1.54159      -204.712       204.712       1744.72       1949.44    
  52  0.586527     -0.533536      -70.8496       70.8496       1781.61       1852.46    
  53  0.603460     -0.505075      -67.0702       67.0702       1705.34       1772.41    
  54  0.819887     -0.198589      -26.3711       26.3711       1356.13       1382.51    
  55  0.204248      -1.58842      -210.931       210.931       1862.77       2073.70    
  56  0.540917     -0.614489      -81.5996       81.5996       1844.08       1925.68    
  57  0.430522     -0.842757      -111.912       111.912       1810.05       1921.96    
  58  0.637009E-01  -2.75356      -365.652       365.652       1843.67       2209.32    
  59  0.872387     -0.136522      -18.1291       18.1291       1891.26       1909.39    
  60  0.740351     -0.300631      -39.9216       39.9216       1935.34       1975.26    
  61  0.844085     -0.169502      -22.5086       22.5086       1747.07       1769.58    
  62  0.574613     -0.554058      -73.5749       73.5749       1839.48       1913.05    
  63  0.382052     -0.962198      -127.773       127.773       1437.49       1565.26    
  64  0.564583     -0.571667      -75.9132       75.9132       1882.40       1958.31    
  65  0.700807     -0.355522      -47.2107       47.2107       1889.46       1936.67    
  66  0.237235      -1.43870      -191.049       191.049       1770.57       1961.62    
  67  0.745904     -0.293158      -38.9293       38.9293       1775.45       1814.38    
  68  0.369081     -0.996740      -132.360       132.360       1661.77       1794.12    
  69  0.512148     -0.669141      -88.8570       88.8570       1827.18       1916.03    
  70  0.239900E-01  -3.73012      -495.332       495.332       1736.53       2231.86    
  71  0.364860E-01  -3.31083      -439.653       439.653       1780.87       2220.52    
  72  0.792805E-01  -2.53476      -336.598       336.598       1868.49       2205.09    
  73  0.400998     -0.913800      -121.346       121.346       1545.03       1666.38    
  74  0.784935     -0.242154      -32.1563       32.1563       1827.47       1859.62    
loop,thermsimp(1:2)       13   69.4352       48.9303    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       1331.35        129.80          0.68         30.49          0.64          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1331.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       13
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       14
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      238     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -143.656       143.656       1145.34       1288.99    
   2  0.649641     -0.431335      -57.2781       57.2781       1207.13       1264.41    
   3  0.930116     -0.724456E-01  -9.62024       9.62024       1240.71       1250.33    
   4  0.297326      -1.21293      -161.068       161.068       1356.13       1517.20    
   5  0.751734     -0.285373      -37.8954       37.8954       1389.10       1427.00    
   6  0.409056     -0.893902      -118.704       118.704       1407.76       1526.47    
   7  0.115094      -2.16201      -287.099       287.099       1407.45       1694.55    
   8  0.606681     -0.499753      -66.3635       66.3635       1439.42       1505.78    
   9  0.140571      -1.96204      -260.545       260.545       1519.51       1780.05    
  10  0.447669E-01  -3.10629      -412.492       412.492       1445.71       1858.20    
  11  0.517394     -0.658951      -87.5038       87.5038       1347.44       1434.94    
  12  0.587057     -0.532633      -70.7298       70.7298       1436.49       1507.22    
  13  0.384993E-01  -3.25712      -432.521       432.521       1437.49       1870.01    
  14  0.829105E-01  -2.48999      -330.653       330.653       1560.28       1890.93    
  15  0.382179     -0.961866      -127.729       127.729       1576.82       1704.55    
  16  0.269516      -1.31113      -174.108       174.108       1527.51       1701.62    
  17  0.879580     -0.128311      -17.0387       17.0387       1412.16       1429.20    
  18  0.760503E-01  -2.57636      -342.122       342.122       1555.06       1897.18    
  19  0.482544     -0.728684      -96.7638       96.7638       1407.55       1504.31    
  20  0.561499     -0.577145      -76.6407       76.6407       1608.08       1684.72    
  21  0.254621      -1.36798      -181.657       181.657       1569.79       1751.45    
  22  0.479261     -0.735511      -97.6704       97.6704       1603.60       1701.27    
  23  0.638455     -0.448704      -59.5846       59.5846       1332.88       1392.46    
  24  0.289082      -1.24105      -164.802       164.802       1428.62       1593.43    
  25  0.656024     -0.421558      -55.9798       55.9798       1581.32       1637.30    
  26  0.597431     -0.515117      -68.4037       68.4037       1447.80       1516.20    
  27  0.859562     -0.151333      -20.0959       20.0959       1545.03       1565.13    
  28  0.554826     -0.589100      -78.2282       78.2282       1560.83       1639.06    
  29  0.128413      -2.05250      -272.558       272.558       1637.85       1910.40    
  30  0.311170      -1.16742      -155.024       155.024       1549.69       1704.72    
  31  0.606679     -0.499755      -66.3638       66.3638       1506.58       1572.94    
  32  0.923238     -0.798686E-01  -10.6060       10.6060       1666.68       1677.29    
  33  0.734154     -0.309037      -41.0378       41.0378       1632.39       1673.43    
  34  0.988670     -0.113947E-01  -1.51313       1.51313       1619.79       1621.30    
  35  0.136308      -1.99284      -264.634       264.634       1698.61       1963.24    
  36  0.345839      -1.06178      -140.997       140.997       1747.07       1888.07    
  37  0.349440      -1.05142      -139.621       139.621       1705.34       1844.96    
  38  0.625658E-01  -2.77154      -368.040       368.040       1561.33       1929.37    
  39  0.394804     -0.929365      -123.413       123.413       1661.77       1785.18    
  40  0.899667E-02  -4.71090      -625.573       625.573       1800.90       2426.47    
  41  0.823946     -0.193651      -25.7154       25.7154       1735.45       1761.17    
  42  0.834235     -0.181240      -24.0674       24.0674       1775.45       1799.52    
  43  0.777534     -0.251627      -33.4143       33.4143       1799.61       1833.02    
  44  0.384993     -0.954531      -126.755       126.755       1770.80       1897.55    
  45  0.247443E-01  -3.69916      -491.221       491.221       1719.19       2210.42    
  46  0.810695     -0.209863      -27.8683       27.8683       1776.78       1804.65    
  47  0.893618     -0.112477      -14.9361       14.9361       1809.33       1824.27    
  48  0.545617     -0.605837      -80.4507       80.4507       1781.61       1862.06    
  49  0.587193     -0.532402      -70.6991       70.6991       1761.73       1832.43    
  50  0.991207     -0.883185E-02  -1.17281       1.17281       1827.47       1828.64    
  51  0.477440     -0.739316      -98.1758       98.1758       1619.56       1717.73    
  52  0.444858     -0.810000      -107.562       107.562       1734.78       1842.34    
  53  0.103440      -2.26876      -301.275       301.275       1790.45       2091.73    
  54  0.320718      -1.13719      -151.011       151.011       1582.86       1733.87    
  55  0.161721      -1.82188      -241.933       241.933       1891.26       2133.19    
  56  0.912244     -0.918481E-01  -12.1968       12.1968       1839.48       1851.67    
  57  0.358583      -1.02559      -136.191       136.191       1827.18       1963.37    
  58  0.263871      -1.33229      -176.919       176.919       1810.05       1986.97    
  59  0.782230     -0.245606      -32.6147       32.6147       1450.94       1483.55    
  60  0.592946     -0.522652      -69.4044       69.4044       1844.08       1913.49    
  61  0.652732     -0.426589      -56.6478       56.6478       1889.46       1946.11    
  62  0.817021     -0.202091      -26.8362       26.8362       1732.84       1759.67    
  63  0.177213      -1.73040      -229.785       229.785       1744.72       1974.51    
  64  0.263258      -1.33462      -177.228       177.228       1882.40       2059.63    
  65  0.856937     -0.154391      -20.5019       20.5019       1770.57       1791.07    
  66  0.541629E-01  -2.91576      -387.191       387.191       1580.47       1967.66    
  67  0.919404     -0.840293E-01  -11.1585       11.1585       1935.34       1946.50    
  68  0.996572     -0.343426E-02 -0.456045      0.456045       1862.77       1863.22    
  69  0.257654      -1.35614      -180.085       180.085       1747.59       1927.68    
  70  0.684182     -0.379532      -50.3990       50.3990       1795.55       1845.95    
  71  0.870041     -0.139215      -18.4867       18.4867       1868.49       1886.98    
  72  0.854707     -0.156997      -20.8480       20.8480       1843.67       1864.52    
  73  0.195719      -1.63108      -216.595       216.595       1780.87       1997.46    
  74  0.352846      -1.04172      -138.333       138.333       1331.35       1469.68    
loop,thermsimp(1:2)       14   143.656       57.2781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       1448.61        129.93          0.67         30.54          0.55          0.05        161.74
Just calling func    0   0        161.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1448.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       14
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       15
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      239     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -201.232       201.232       1240.71       1441.94    
   2  0.894567E-01  -2.41400      -320.561       320.561       1207.13       1527.69    
   3  0.863615     -0.146628      -19.4711       19.4711       1145.34       1164.81    
   4  0.807990     -0.213206      -28.3122       28.3122       1332.88       1361.19    
   5  0.318173      -1.14516      -152.069       152.069       1389.10       1541.17    
   6  0.464606     -0.766566      -101.794       101.794       1412.16       1513.96    
   7  0.574933     -0.553501      -73.5009       73.5009       1347.44       1420.94    
   8  0.974939     -0.253802E-01  -3.37031       3.37031       1331.35       1334.72    
   9  0.415757     -0.877653      -116.546       116.546       1450.94       1567.48    
  10  0.187109      -1.67606      -222.569       222.569       1407.55       1630.12    
  11  0.730515E-01  -2.61659      -347.464       347.464       1439.42       1786.88    
  12  0.209185      -1.56454      -207.759       207.759       1436.49       1644.25    
  13  0.496690     -0.699790      -92.9269       92.9269       1447.80       1540.73    
  14  0.862986     -0.147356      -19.5679       19.5679       1356.13       1375.70    
  15  0.888200     -0.118558      -15.7436       15.7436       1407.76       1423.51    
  16  0.380888     -0.965250      -128.178       128.178       1545.03       1673.21    
  17  0.135305      -2.00022      -265.615       265.615       1506.58       1772.20    
  18  0.927079     -0.757167E-01  -10.0546       10.0546       1428.62       1438.68    
  19  0.603067     -0.505727      -67.1568       67.1568       1619.79       1686.94    
  20  0.136202      -1.99362      -264.738       264.738       1581.32       1846.06    
  21  0.954653     -0.464076E-01  -6.16259       6.16259       1560.83       1566.99    
  22  0.151192      -1.88920      -250.872       250.872       1632.39       1883.26    
  23  0.449259     -0.800155      -106.255       106.255       1666.68       1772.94    
  24  0.780874     -0.247341      -32.8451       32.8451       1608.08       1640.93    
  25  0.456238     -0.784740      -104.208       104.208       1407.45       1511.65    
  26  0.163284      -1.81227      -240.656       240.656       1603.60       1844.26    
  27  0.821444     -0.196692      -26.1192       26.1192       1527.51       1553.63    
  28  0.861448     -0.149141      -19.8048       19.8048       1576.82       1596.63    
  29  0.924167     -0.788621E-01  -10.4723       10.4723       1549.69       1560.17    
  30  0.195059      -1.63445      -217.044       217.044       1619.56       1836.60    
  31  0.375134     -0.980472      -130.200       130.200       1582.86       1713.06    
  32  0.909862     -0.944628E-01  -12.5440       12.5440       1569.79       1582.33    
  33  0.831459     -0.184574      -24.5100       24.5100       1732.84       1757.35    
  34  0.627278     -0.466365      -61.9298       61.9298       1735.45       1797.38    
  35  0.918890     -0.845891E-01  -11.2328       11.2328       1519.51       1530.74    
  36  0.475784     -0.742791      -98.6372       98.6372       1661.77       1760.40    
  37  0.344524      -1.06559      -141.503       141.503       1770.57       1912.07    
  38  0.286778      -1.24905      -165.864       165.864       1775.45       1941.32    
  39  0.336148      -1.09020      -144.771       144.771       1776.78       1921.55    
  40  0.709840     -0.342716      -45.5102       45.5102       1809.33       1854.84    
  41  0.219827      -1.51491      -201.169       201.169       1827.47       2028.64    
  42  0.347594      -1.05672      -140.325       140.325       1761.73       1902.05    
  43  0.905734     -0.990099E-01  -13.1478       13.1478       1799.61       1812.75    
  44  0.826231     -0.190881      -25.3476       25.3476       1734.78       1760.13    
  45  0.400277     -0.915599      -121.585       121.585       1705.34       1826.93    
  46  0.555153     -0.588512      -78.1501       78.1501       1795.55       1873.70    
  47  0.864397     -0.145723      -19.3510       19.3510       1839.48       1858.83    
  48  0.277380E-01  -3.58495      -476.055       476.055       1445.71       1921.77    
  49  0.993968     -0.605015E-02 -0.803416      0.803416       1781.61       1782.41    
  50  0.717076     -0.332573      -44.1633       44.1633       1862.77       1906.93    
  51  0.736253     -0.306182      -40.6587       40.6587       1843.67       1884.33    
  52  0.278813      -1.27722      -169.605       169.605       1437.49       1607.09    
  53  0.646460     -0.436245      -57.9301       57.9301       1868.49       1926.42    
  54  0.600312     -0.510306      -67.7649       67.7649       1747.07       1814.83    
  55  0.295434      -1.21931      -161.916       161.916       1560.28       1722.19    
  56  0.946129     -0.553767E-01  -7.35362       7.35362       1555.06       1562.41    
  57  0.722008     -0.325719      -43.2531       43.2531       1770.80       1814.05    
  58  0.789514     -0.236338      -31.3839       31.3839       1637.85       1669.23    
  59  0.955429     -0.455949E-01  -6.05467       6.05467       1844.08       1850.14    
  60  0.693546     -0.365938      -48.5938       48.5938       1747.59       1796.19    
  61  0.979434     -0.207808E-01  -2.75954       2.75954       1561.33       1564.09    
  62  0.860966     -0.149700      -19.8791       19.8791       1889.46       1909.34    
  63  0.329063      -1.11151      -147.600       147.600       1935.34       2082.94    
  64  0.839540     -0.174902      -23.2257       23.2257       1698.61       1721.83    
  65  0.511945     -0.669538      -88.9097       88.9097       1827.18       1916.09    
  66  0.265617      -1.32570      -176.043       176.043       1580.47       1756.51    
  67  0.793213     -0.231663      -30.7631       30.7631       1744.72       1775.49    
  68  0.515723     -0.662186      -87.9335       87.9335       1810.05       1897.98    
  69  0.928816     -0.738450E-01  -9.80607       9.80607       1780.87       1790.67    
  70  0.936254     -0.658686E-01  -8.74687       8.74687       1882.40       1891.15    
  71  0.735848     -0.306732      -40.7318       40.7318       1790.45       1831.18    
  72  0.194591      -1.63686      -217.362       217.362       1891.26       2108.62    
  73  0.834124     -0.181373      -24.0850       24.0850       1719.19       1743.28    
  74  0.129274      -2.04582      -271.670       271.670       1448.61       1720.28    
loop,thermsimp(1:2)       15   201.232       320.561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241       1453.26        129.89          0.66         30.28          1.39          0.05        162.26
Just calling func    0   0        162.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    1453.3        2.165    -0.7481      3.557     -100.0     0.4676    
                     -0.6118     0.5756     -100.0      2.569      1.733    
                     -0.4302     0.2483      2.009      0.000     0.7382    
                      -1.103     -20.00      0.000      0.000    -0.9508    

                      -3.958      5970.     0.1152E+05 -597.4     -1451.    
                      -3.981     -6.037     -4.709     -15.33     -5.168    
                      -12.81     -2.931     -2859.      0.000     -760.9    

                       201.0      3781.      855.0      1111.      2913.    
                      -444.8    -0.7591E-01-0.1916      0.000    -0.2044    
                     -0.1945    -0.2533    -0.2500    -0.2723    -0.1389    

                     -0.7370     -1.769      1.382     0.1638     0.1478    
                      0.8541E-01 0.5084E-01-0.1032    -0.7860E-01 0.2676E-01
                     -0.3850E-02 0.4659E-01-0.2544     -2.183      1.382    

                      -1.530     -1.429     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.880      8.860      0.000     0.2921E-03
                      0.2394     0.2394      9.089      8.942     -7817.    

                      0.5631E-03 0.2394     0.2394      9.760      9.075    
                      -6955.     0.3578E-03-0.5448     0.1995      9.391    
                       9.176     -4791.     0.1164E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1453.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       15
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       16
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      240     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -194.170       194.170       1145.34       1339.51    
   2  0.641193     -0.444425      -59.0163       59.0163       1331.35       1390.36    
   3  0.353033      -1.04119      -138.263       138.263       1332.88       1471.14    
   4  0.928955     -0.736953E-01  -9.78619       9.78619       1356.13       1365.92    
   5  0.350257      -1.04909      -139.311       139.311       1347.44       1486.75    
   6  0.682617     -0.381821      -50.7030       50.7030       1407.76       1458.47    
   7  0.162763      -1.81546      -241.080       241.080       1428.62       1669.70    
   8  0.874032     -0.134639      -17.8790       17.8790       1240.71       1258.59    
   9  0.518909     -0.656027      -87.1156       87.1156       1407.45       1494.56    
  10  0.461984     -0.772226      -102.546       102.546       1412.16       1514.71    
  11  0.449468     -0.799691      -106.193       106.193       1207.13       1313.33    
  12  0.523281     -0.647637      -86.0015       86.0015       1519.51       1605.51    
  13  0.637377     -0.450394      -59.8091       59.8091       1447.80       1507.61    
  14  0.596329     -0.516963      -68.6489       68.6489       1389.10       1457.75    
  15  0.286246      -1.25090      -166.111       166.111       1527.51       1693.62    
  16  0.590425     -0.526913      -69.9702       69.9702       1549.69       1619.66    
  17  0.853637     -0.158249      -21.0143       21.0143       1555.06       1576.07    
  18  0.245572      -1.40416      -186.463       186.463       1561.33       1747.79    
  19  0.375654     -0.979088      -130.016       130.016       1560.83       1690.85    
  20  0.281654      -1.26708      -168.258       168.258       1450.94       1619.20    
  21  0.443392     -0.813302      -108.001       108.001       1569.79       1677.79    
  22  0.442934     -0.814335      -108.138       108.138       1576.82       1684.96    
  23  0.171790      -1.76149      -233.912       233.912       1437.49       1671.40    
  24  0.802582     -0.219921      -29.2039       29.2039       1407.55       1436.75    
  25  0.162733      -1.81564      -241.104       241.104       1608.08       1849.19    
  26  0.838320     -0.176355      -23.4186       23.4186       1436.49       1459.91    
  27  0.210754      -1.55706      -206.767       206.767       1637.85       1844.61    
  28  0.240377      -1.42554      -189.302       189.302       1545.03       1734.33    
  29  0.173042E-01  -4.05680      -538.714       538.714       1619.79       2158.50    
  30  0.640146     -0.446059      -59.2333       59.2333       1582.86       1642.09    
  31  0.749210     -0.288736      -38.3420       38.3420       1448.61       1486.96    
  32  0.666162     -0.406222      -53.9433       53.9433       1698.61       1752.55    
  33  0.601746     -0.507920      -67.4480       67.4480       1560.28       1627.73    
  34  0.677044     -0.390020      -51.7917       51.7917       1719.19       1770.99    
  35  0.290379      -1.23657      -164.207       164.207       1580.47       1744.67    
  36  0.439723     -0.821610      -109.104       109.104       1732.84       1841.94    
  37  0.680091     -0.385528      -51.1953       51.1953       1734.78       1785.98    
  38  0.803784     -0.218425      -29.0052       29.0052       1661.77       1690.77    
  39  0.507823     -0.677622      -89.9833       89.9833       1506.58       1596.56    
  40  0.894573     -0.111408      -14.7942       14.7942       1666.68       1681.48    
  41  0.826908     -0.190062      -25.2389       25.2389       1744.72       1769.96    
  42  0.815562     -0.203878      -27.0735       27.0735       1781.61       1808.68    
  43  0.352457      -1.04283      -138.480       138.480       1439.42       1577.90    
  44  0.104059      -2.26279      -300.482       300.482       1780.87       2081.35    
  45  0.601892     -0.507677      -67.4157       67.4157       1747.59       1815.01    
  46  0.988184     -0.118862E-01  -1.57840       1.57840       1735.45       1737.03    
  47  0.733912     -0.309366      -41.0815       41.0815       1799.61       1840.69    
  48  0.107394      -2.23125      -296.293       296.293       1770.80       2067.09    
  49  0.592150     -0.523995      -69.5827       69.5827       1747.07       1816.65    
  50  0.821901     -0.196136      -26.0454       26.0454       1705.34       1731.39    
  51  0.400070E-01  -3.21870      -427.420       427.420       1790.45       2217.87    
  52  0.271211      -1.30486      -173.276       173.276       1619.56       1792.83    
  53  0.296309      -1.21635      -161.522       161.522       1603.60       1765.13    
  54  0.436334     -0.829346      -110.131       110.131       1581.32       1691.45    
  55  0.372372     -0.987863      -131.181       131.181       1844.08       1975.27    
  56  0.806182     -0.215446      -28.6096       28.6096       1809.33       1837.94    
  57  0.194087      -1.63945      -217.707       217.707       1839.48       2057.18    
  58  0.739876     -0.301273      -40.0068       40.0068       1795.55       1835.56    
  59  0.348380      -1.05446      -140.025       140.025       1632.39       1772.42    
  60  0.850149     -0.162343      -21.5580       21.5580       1843.67       1865.23    
  61  0.123296      -2.09317      -277.957       277.957       1882.40       2160.36    
  62  0.855160     -0.156467      -20.7776       20.7776       1810.05       1830.83    
  63  0.959969E-01  -2.34344      -311.191       311.191       1761.73       2072.92    
  64  0.739916     -0.301218      -39.9996       39.9996       1862.77       1902.77    
  65  0.470406     -0.754159      -100.147       100.147       1889.46       1989.61    
  66  0.559264     -0.581134      -77.1704       77.1704       1770.57       1847.74    
  67  0.935836     -0.663155E-01  -8.80621       8.80621       1827.18       1835.98    
  68  0.190508      -1.65806      -220.179       220.179       1776.78       1996.96    
  69  0.410140     -0.891256      -118.352       118.352       1445.71       1564.06    
  70  0.289980E-01  -3.54053      -470.156       470.156       1868.49       2338.65    
  71  0.401138     -0.913450      -121.299       121.299       1775.45       1896.75    
  72  0.695873     -0.362588      -48.1490       48.1490       1827.47       1875.62    
  73  0.405124     -0.903562      -119.986       119.986       1935.34       2055.33    
  74  0.584331     -0.537288      -71.3479       71.3479       1453.26       1524.60    
loop,thermsimp(1:2)       16   194.170       59.0163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       2078.96        129.77          0.66         30.72          0.38          0.05        161.58
Just calling func    0   0        161.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2078.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       16
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       17
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      241     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -33.5204       33.5204       1240.71       1274.23    
   2  0.350417      -1.04863      -139.251       139.251       1207.13       1346.38    
   3  0.533846     -0.627648      -83.3470       83.3470       1145.34       1228.68    
   4  0.622955     -0.473280      -62.8482       62.8482       1356.13       1418.98    
   5  0.661091E-01  -2.71645      -360.724       360.724       1331.35       1692.07    
   6  0.759206     -0.275482      -36.5820       36.5820       1407.55       1444.13    
   7  0.430535     -0.842727      -111.908       111.908       1389.10       1501.01    
   8  0.257678      -1.35604      -180.073       180.073       1407.76       1587.84    
   9  0.296561      -1.21550      -161.410       161.410       1436.49       1597.90    
  10  0.805929     -0.215760      -28.6513       28.6513       1332.88       1361.53    
  11  0.421616     -0.863661      -114.688       114.688       1347.44       1462.13    
  12  0.767803     -0.264223      -35.0868       35.0868       1448.61       1483.70    
  13  0.605260     -0.502097      -66.6748       66.6748       1407.45       1474.12    
  14  0.566784     -0.567776      -75.3965       75.3965       1447.80       1523.20    
  15  0.292740      -1.22847      -163.132       163.132       1412.16       1575.30    
  16  0.898463     -0.107069      -14.2180       14.2180       1453.26       1467.47    
  17  0.218067      -1.52295      -202.237       202.237       1445.71       1647.95    
  18  0.856756     -0.154603      -20.5301       20.5301       1555.06       1575.59    
  19  0.338883      -1.08210      -143.695       143.695       1439.42       1583.12    
  20  0.796034     -0.228113      -30.2918       30.2918       1506.58       1536.87    
  21  0.778636     -0.250212      -33.2263       33.2263       1519.51       1552.73    
  22  0.575989     -0.551667      -73.2574       73.2574       1450.94       1524.20    
  23  0.355531      -1.03414      -137.327       137.327       1549.69       1687.02    
  24  0.164949      -1.80212      -239.308       239.308       1560.28       1799.59    
  25  0.315998      -1.15202      -152.980       152.980       1582.86       1735.84    
  26  0.330933      -1.10584      -146.847       146.847       1428.62       1575.47    
  27  0.429436     -0.845283      -112.247       112.247       1437.49       1549.74    
  28  0.464808     -0.766130      -101.736       101.736       1569.79       1671.52    
  29  0.192211      -1.64916      -218.997       218.997       1666.68       1885.68    
  30  0.866849     -0.142891      -18.9748       18.9748       1576.82       1595.80    
  31  0.474973     -0.744498      -98.8639       98.8639       1661.77       1760.63    
  32  0.667713     -0.403897      -53.6345       53.6345       1560.83       1614.47    
  33  0.994155     -0.586200E-02 -0.778431      0.778431       1581.32       1582.10    
  34  0.577739     -0.548634      -72.8545       72.8545       1527.51       1600.37    
  35  0.381919     -0.962546      -127.819       127.819       1705.34       1833.16    
  36  0.733204     -0.310331      -41.2097       41.2097       1545.03       1586.24    
  37  0.492382     -0.708500      -94.0836       94.0836       1735.45       1829.54    
  38  0.188899E-01  -3.96913      -527.071       527.071       1580.47       2107.54    
  39  0.741920E-01  -2.60110      -345.407       345.407       1561.33       1906.73    
  40  0.210592      -1.55783      -206.869       206.869       1698.61       1905.47    
  41  0.682838     -0.381498      -50.6602       50.6602       1603.60       1654.26    
  42  0.656831     -0.420328      -55.8165       55.8165       1744.72       1800.54    
  43  0.444670     -0.810424      -107.618       107.618       1719.19       1826.81    
  44  0.872301     -0.136621      -18.1422       18.1422       1632.39       1650.53    
  45  0.932741     -0.696282E-01  -9.24611       9.24611       1734.78       1744.03    
  46  0.601727     -0.507951      -67.4522       67.4522       1619.56       1687.01    
  47  0.940344     -0.615097E-01  -8.16803       8.16803       1781.61       1789.78    
  48  0.208477E-01  -3.87051      -513.975       513.975       1747.59       2261.57    
  49  0.257831      -1.35545      -179.994       179.994       1747.07       1927.06    
  50  0.522803     -0.648550      -86.1226       86.1226       1810.05       1896.17    
  51  0.676437     -0.390915      -51.9107       51.9107       1795.55       1847.46    
  52  0.612346     -0.490458      -65.1292       65.1292       1827.18       1892.31    
  53  0.206854      -1.57574      -209.247       209.247       1809.33       2018.58    
  54  0.201156      -1.60367      -212.956       212.956       1799.61       2012.56    
  55  0.785118     -0.241921      -32.1253       32.1253       1732.84       1764.96    
  56  0.534951     -0.625580      -83.0724       83.0724       1637.85       1720.92    
  57  0.147432      -1.91439      -254.217       254.217       1770.57       2024.79    
  58  0.696605     -0.361537      -48.0095       48.0095       1608.08       1656.09    
  59  0.711810     -0.339944      -45.1420       45.1420       1843.67       1888.81    
  60  0.934269     -0.679906E-01  -9.02864       9.02864       1827.47       1836.50    
  61  0.821040     -0.197183      -26.1844       26.1844       1775.45       1801.64    
  62  0.682914     -0.381386      -50.6452       50.6452       1862.77       1913.41    
  63  0.660876     -0.414189      -55.0013       55.0013       1844.08       1899.09    
  64  0.653213     -0.425852      -56.5500       56.5500       1889.46       1946.01    
  65  0.327611      -1.11593      -148.187       148.187       1776.78       1924.97    
  66  0.191936      -1.65059      -219.187       219.187       1935.34       2154.53    
  67  0.417647E-01  -3.17570      -421.710       421.710       1839.48       2261.19    
  68  0.629872     -0.462239      -61.3820       61.3820       1770.80       1832.18    
  69  0.391125     -0.938727      -124.656       124.656       1761.73       1886.38    
  70  0.111121      -2.19714      -291.764       291.764       1780.87       2072.63    
  71  0.315632      -1.15318      -153.134       153.134       1619.79       1772.92    
  72  0.335886      -1.09098      -144.875       144.875       1882.40       2027.27    
  73  0.742251     -0.298067      -39.5811       39.5811       1790.45       1830.03    
  74  0.319217      -1.14188      -151.634       151.634       2078.96       2230.59    
loop,thermsimp(1:2)       17   33.5204       139.251    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243       1315.96        129.79          0.68         30.39          0.66          0.05        161.57
Just calling func    0   0        161.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244       1238.38        129.45          0.67         30.16          1.14          0.05        161.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1238.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       17
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       18
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      243     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -189.292       189.292       1145.34       1334.63    
   2  0.711556E-02  -4.94547      -656.722       656.722       1240.71       1897.43    
   3  0.909796     -0.945347E-01  -12.5535       12.5535       1207.13       1219.69    
   4  0.659218     -0.416702      -55.3349       55.3349       1332.88       1388.21    
   5  0.833482     -0.182144      -24.1873       24.1873       1356.13       1380.32    
   6  0.726295E-01  -2.62238      -348.233       348.233       1407.55       1755.78    
   7  0.687091     -0.375288      -49.8355       49.8355       1347.44       1397.27    
   8  0.860775     -0.149922      -19.9085       19.9085       1453.26       1473.16    
   9  0.846215     -0.166982      -22.1740       22.1740       1407.45       1429.62    
  10  0.398551     -0.919919      -122.158       122.158       1448.61       1570.77    
  11  0.416092     -0.876849      -116.439       116.439       1389.10       1505.54    
  12  0.463389     -0.769189      -102.143       102.143       1447.80       1549.94    
  13  0.207356      -1.57332      -208.925       208.925       1450.94       1659.86    
  14  0.133003      -2.01738      -267.894       267.894       1506.58       1774.47    
  15  0.464971     -0.765779      -101.690       101.690       1437.49       1539.18    
  16  0.568281     -0.565140      -75.0464       75.0464       1519.51       1594.55    
  17  0.638811     -0.448147      -59.5106       59.5106       1412.16       1471.67    
  18  0.865664     -0.144259      -19.1565       19.1565       1428.62       1447.78    
  19  0.475002     -0.744436      -98.8557       98.8557       1555.06       1653.92    
  20  0.537086     -0.621597      -82.5435       82.5435       1581.32       1663.86    
  21  0.782345     -0.245459      -32.5952       32.5952       1439.42       1472.02    
  22  0.725469     -0.320937      -42.6181       42.6181       1545.03       1587.65    
  23  0.701426E-01  -2.65723      -352.860       352.860       1407.76       1760.62    
  24  0.297043      -1.21388      -161.194       161.194       1576.82       1738.02    
  25  0.444870     -0.809973      -107.558       107.558       1436.49       1544.05    
  26  0.685684     -0.377338      -50.1077       50.1077       1527.51       1577.62    
  27  0.651244     -0.428871      -56.9509       56.9509       1560.83       1617.78    
  28  0.269082      -1.31274      -174.322       174.322       1445.71       1620.03    
  29  0.177107      -1.73100      -229.864       229.864       1632.39       1862.26    
  30  0.766464     -0.265968      -35.3186       35.3186       1603.60       1638.92    
  31  0.801833     -0.220855      -29.3279       29.3279       1608.08       1637.41    
  32  0.759414     -0.275209      -36.5457       36.5457       1569.79       1606.33    
  33  0.566307     -0.568618      -75.5083       75.5083       1619.56       1695.07    
  34  0.297948      -1.21084      -160.790       160.790       1549.69       1710.48    
  35  0.430097E-01  -3.14633      -417.809       417.809       1331.35       1749.16    
  36  0.529414     -0.635984      -84.4539       84.4539       1637.85       1722.30    
  37  0.717133     -0.332494      -44.1527       44.1527       1582.86       1627.01    
  38  0.209457      -1.56323      -207.586       207.586       1734.78       1942.37    
  39  0.732428     -0.311390      -41.3503       41.3503       1661.77       1703.12    
  40  0.697782     -0.359849      -47.7853       47.7853       1732.84       1780.62    
  41  0.977227     -0.230362E-01  -3.05903       3.05903       1619.79       1622.84    
  42  0.744700     -0.294773      -39.1437       39.1437       1781.61       1820.75    
  43  0.713341     -0.337796      -44.8568       44.8568       1560.28       1605.13    
  44  0.497823     -0.697510      -92.6242       92.6242       1744.72       1837.35    
  45  0.968758     -0.317404E-01  -4.21489       4.21489       1775.45       1779.67    
  46  0.287665      -1.24596      -165.454       165.454       1719.19       1884.65    
  47  0.964672     -0.359674E-01  -4.77620       4.77620       1735.45       1740.23    
  48  0.733769     -0.309561      -41.1075       41.1075       1790.45       1831.56    
  49  0.692680     -0.367187      -48.7598       48.7598       1770.80       1819.56    
  50  0.328873      -1.11208      -147.676       147.676       1705.34       1853.02    
  51  0.744920     -0.294478      -39.1046       39.1046       1827.47       1866.57    
  52  0.655188     -0.422834      -56.1492       56.1492       1795.55       1851.70    
  53  0.255467      -1.36466      -181.217       181.217       1666.68       1847.90    
  54  0.262199E-02  -5.94382      -789.296       789.296       1761.73       2551.02    
  55  0.538310     -0.619321      -82.2412       82.2412       1843.67       1925.91    
  56  0.456270     -0.784671      -104.199       104.199       1827.18       1931.37    
  57  0.990209     -0.983957E-02  -1.30662       1.30662       1810.05       1811.36    
  58  0.262373      -1.33799      -177.675       177.675       1844.08       2021.76    
  59  0.645275     -0.438079      -58.1737       58.1737       1698.61       1756.78    
  60  0.423351     -0.859554      -114.142       114.142       1561.33       1675.47    
  61  0.353204      -1.04071      -138.198       138.198       1862.77       2000.97    
  62  0.721881     -0.325895      -43.2765       43.2765       1776.78       1820.06    
  63  0.213966      -1.54194      -204.758       204.758       1747.07       1951.83    
  64  0.176516      -1.73434      -230.308       230.308       1889.46       2119.77    
  65  0.885542     -0.121555      -16.1417       16.1417       1799.61       1815.75    
  66  0.551521     -0.595076      -79.0217       79.0217       1809.33       1888.35    
  67  0.847646     -0.165292      -21.9495       21.9495       1770.57       1792.52    
  68  0.825749E-01  -2.49405      -331.191       331.191       1882.40       2213.59    
  69  0.123448      -2.09193      -277.793       277.793       1780.87       2058.66    
  70  0.384918     -0.954725      -126.780       126.780       1580.47       1707.25    
  71  0.991208     -0.883065E-02  -1.17265       1.17265       1935.34       1936.52    
  72  0.864006     -0.146175      -19.4110       19.4110       2078.96       2098.37    
  73  0.128713      -2.05017      -272.247       272.247       1839.48       2111.72    
  74  0.699101     -0.357960      -47.5345       47.5345       1238.38       1285.92    
loop,thermsimp(1:2)       18   189.292       656.722    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       1310.35        129.77          0.67         30.12          0.97          0.05        161.59
Just calling func    0   0        161.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246       1281.30        129.46          0.67         30.13          0.94          0.05        161.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1281.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       18
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       19
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      245     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -43.2178       43.2178       1207.13       1250.35    
   2  0.240049      -1.42691      -189.483       189.483       1238.38       1427.87    
   3  0.365543      -1.00637      -133.639       133.639       1145.34       1278.98    
   4  0.399010     -0.918769      -122.006       122.006       1356.13       1478.14    
   5  0.685268     -0.377945      -50.1883       50.1883       1332.88       1383.06    
   6  0.335805E-01  -3.39381      -450.673       450.673       1347.44       1798.11    
   7  0.820520     -0.197817      -26.2686       26.2686       1407.45       1433.72    
   8  0.756560     -0.278973      -37.0456       37.0456       1428.62       1465.67    
   9  0.869461     -0.139882      -18.5753       18.5753       1412.16       1430.74    
  10  0.787378     -0.239047      -31.7436       31.7436       1439.42       1471.16    
  11  0.330926      -1.10586      -146.850       146.850       1453.26       1600.11    
  12  0.339084E-01  -3.38409      -449.383       449.383       1389.10       1838.49    
  13  0.672805     -0.396300      -52.6257       52.6257       1437.49       1490.12    
  14  0.822413     -0.195513      -25.9627       25.9627       1436.49       1462.45    
  15  0.928870     -0.737865E-01  -9.79830       9.79830       1447.80       1457.60    
  16  0.778944     -0.249816      -33.1738       33.1738       1448.61       1481.79    
  17  0.301602E-01  -3.50123      -464.938       464.938       1527.51       1992.45    
  18  0.292626      -1.22886      -163.184       163.184       1545.03       1708.21    
  19  0.149515      -1.90036      -252.354       252.354       1519.51       1771.86    
  20  0.500330E-01  -2.99507      -397.724       397.724       1560.28       1958.00    
  21  0.759114E-01  -2.57819      -342.365       342.365       1569.79       1912.15    
  22  0.613440     -0.488673      -64.8921       64.8921       1560.83       1625.72    
  23  0.132502      -2.02116      -268.395       268.395       1445.71       1714.11    
  24  0.189750E-02  -6.26722      -832.241       832.241       1619.79       2452.03    
  25  0.507622     -0.678018      -90.0358       90.0358       1582.86       1672.89    
  26  0.378733     -0.970924      -128.932       128.932       1608.08       1737.02    
  27  0.139411      -1.97033      -261.645       261.645       1603.60       1865.25    
  28  0.298599      -1.20865      -160.500       160.500       1555.06       1715.56    
  29  0.767617     -0.264464      -35.1189       35.1189       1450.94       1486.06    
  30  0.656077     -0.421478      -55.9691       55.9691       1581.32       1637.29    
  31  0.701883     -0.353988      -47.0070       47.0070       1561.33       1608.33    
  32  0.940950     -0.608655E-01  -8.08249       8.08249       1619.56       1627.64    
  33  0.621043     -0.476355      -63.2564       63.2564       1661.77       1725.02    
  34  0.622910     -0.473353      -62.8577       62.8577       1580.47       1643.32    
  35  0.525019     -0.644320      -85.5610       85.5610       1549.69       1635.26    
  36  0.871126     -0.137969      -18.3213       18.3213       1637.85       1656.17    
  37  0.475532     -0.743322      -98.7076       98.7076       1576.82       1675.53    
  38  0.320094      -1.13914      -151.269       151.269       1735.45       1886.72    
  39  0.688986     -0.372534      -49.4698       49.4698       1331.35       1380.82    
  40  0.831218     -0.184863      -24.5485       24.5485       1407.55       1432.09    
  41  0.639633     -0.446861      -59.3398       59.3398       1698.61       1757.95    
  42  0.628257     -0.464807      -61.7229       61.7229       1407.76       1469.49    
  43  0.925835     -0.770596E-01  -10.2329       10.2329       1506.58       1516.81    
  44  0.611089     -0.492512      -65.4020       65.4020       1775.45       1840.85    
  45  0.423003E-01  -3.16296      -420.018       420.018       1732.84       2152.85    
  46  0.430763     -0.842198      -111.838       111.838       1770.57       1882.41    
  47  0.374764     -0.981459      -130.331       130.331       1810.05       1940.38    
  48  0.109336      -2.21333      -293.913       293.913       1799.61       2093.52    
  49  0.642636E-02  -5.04735      -670.251       670.251       1770.80       2441.05    
  50  0.232984      -1.45679      -193.450       193.450       1776.78       1970.23    
  51  0.169005E-01  -4.08041      -541.849       541.849       1781.61       2323.46    
  52  0.183441      -1.69586      -225.198       225.198       1790.45       2015.65    
  53  0.257429      -1.35701      -180.201       180.201       1744.72       1924.92    
  54  0.784332     -0.242922      -32.2583       32.2583       1666.68       1698.94    
  55  0.417881     -0.872558      -115.869       115.869       1795.55       1911.42    
  56  0.597408E-01  -2.81774      -374.175       374.175       1705.34       2079.52    
  57  0.854186E-01  -2.46019      -326.695       326.695       1632.39       1959.09    
  58  0.484163     -0.725335      -96.3191       96.3191       1827.47       1923.79    
  59  0.392210     -0.935958      -124.288       124.288       1719.19       1843.48    
  60  0.544229     -0.608385      -80.7890       80.7890       1809.33       1890.12    
  61  0.846696     -0.166413      -22.0984       22.0984       1240.71       1262.81    
  62  0.273327      -1.29709      -172.244       172.244       1843.67       2015.91    
  63  0.253790      -1.37125      -182.092       182.092       1827.18       2009.27    
  64  0.683640     -0.380324      -50.5043       50.5043       1935.34       1985.85    
  65  0.707324     -0.346266      -45.9816       45.9816       1734.78       1780.76    
  66  0.664908     -0.408107      -54.1936       54.1936       1747.07       1801.26    
  67  0.269947      -1.30953      -173.896       173.896       1862.77       2036.66    
  68  0.112661      -2.18338      -289.936       289.936       1844.08       2134.02    
  69  0.392076     -0.936299      -124.334       124.334       1780.87       1905.20    
  70  0.711292     -0.340672      -45.2387       45.2387       2078.96       2124.20    
  71  0.887428     -0.119427      -15.8591       15.8591       1839.48       1855.34    
  72  0.620380     -0.477423      -63.3982       63.3982       1889.46       1952.86    
  73  0.295869      -1.21784      -161.720       161.720       1882.40       2044.12    
  74  0.625911     -0.468547      -62.2196       62.2196       1281.30       1343.52    
loop,thermsimp(1:2)       19   43.2178       189.483    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       1301.69        129.98          0.69         30.00          1.54          0.05        162.26
Just calling func    0   0        162.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248       1228.83        129.86          0.67         30.06          1.70          0.05        162.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1228.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       19
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       20
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      247     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -154.731       154.731       1207.13       1361.86    
   2  0.362384      -1.01505      -134.791       134.791       1240.71       1375.50    
   3  0.900627     -0.104664      -13.8986       13.8986       1145.34       1159.24    
   4  0.233893      -1.45289      -192.933       192.933       1281.30       1474.23    
   5  0.183338      -1.69642      -225.273       225.273       1331.35       1556.62    
   6  0.351708      -1.04495      -138.762       138.762       1332.88       1471.64    
   7  0.979617     -0.205938E-01  -2.73470       2.73470       1238.38       1241.12    
   8  0.801294     -0.221527      -29.4172       29.4172       1412.16       1441.58    
   9  0.423893     -0.858275      -113.973       113.973       1407.55       1521.52    
  10  0.486446     -0.720630      -95.6944       95.6944       1407.45       1503.14    
  11  0.430531     -0.842736      -111.909       111.909       1447.80       1559.71    
  12  0.214629      -1.53884      -204.347       204.347       1436.49       1640.84    
  13  0.860310     -0.150463      -19.9804       19.9804       1428.62       1448.60    
  14  0.450659     -0.797045      -105.842       105.842       1407.76       1513.61    
  15  0.867432     -0.142218      -18.8855       18.8855       1439.42       1458.31    
  16  0.850327     -0.162134      -21.5302       21.5302       1356.13       1377.66    
  17  0.914193     -0.897130E-01  -11.9132       11.9132       1448.61       1460.53    
  18  0.908448     -0.960172E-01  -12.7504       12.7504       1450.94       1463.69    
  19  0.349788E-01  -3.35301      -445.255       445.255       1437.49       1882.75    
  20  0.825048     -0.192314      -25.5379       25.5379       1506.58       1532.12    
  21  0.628933     -0.463730      -61.5799       61.5799       1453.26       1514.84    
  22  0.756366     -0.279229      -37.0796       37.0796       1561.33       1598.41    
  23  0.545707     -0.605674      -80.4290       80.4290       1560.83       1641.26    
  24  0.653619     -0.425231      -56.4676       56.4676       1619.56       1676.03    
  25  0.781643     -0.246357      -32.7144       32.7144       1549.69       1582.41    
  26  0.444411     -0.811005      -107.695       107.695       1581.32       1689.01    
  27  0.223111      -1.50008      -199.200       199.200       1580.47       1779.67    
  28  0.143901      -1.93863      -257.436       257.436       1637.85       1895.28    
  29  0.419282E-01  -3.17180      -421.191       421.191       1582.86       2004.05    
  30  0.407367     -0.898040      -119.253       119.253       1576.82       1696.08    
  31  0.722138     -0.325538      -43.2291       43.2291       1666.68       1709.91    
  32  0.290143      -1.23738      -164.315       164.315       1545.03       1709.34    
  33  0.236931E-01  -3.74257      -496.986       496.986       1445.71       1942.70    
  34  0.198981      -1.61454      -214.400       214.400       1555.06       1769.46    
  35  0.765966     -0.266617      -35.4048       35.4048       1661.77       1697.17    
  36  0.522733     -0.648684      -86.1405       86.1405       1608.08       1694.22    
  37  0.297579E-01  -3.51466      -466.721       466.721       1698.61       2165.33    
  38  0.175475      -1.74026      -231.093       231.093       1519.51       1750.60    
  39  0.311931      -1.16497      -154.700       154.700       1734.78       1889.48    
  40  0.310920      -1.16822      -155.131       155.131       1347.44       1502.57    
  41  0.122272      -2.10150      -279.064       279.064       1747.07       2026.13    
  42  0.949359     -0.519686E-01  -6.90104       6.90104       1389.10       1396.01    
  43  0.500750     -0.691648      -91.8458       91.8458       1775.45       1867.30    
  44  0.729401E-01  -2.61812      -347.667       347.667       1719.19       2066.86    
  45  0.952528     -0.486360E-01  -6.45850       6.45850       1839.48       1845.94    
  46  0.718842     -0.330114      -43.8367       43.8367       1603.60       1647.44    
  47  0.529396     -0.636019      -84.4586       84.4586       1770.57       1855.03    
  48  0.314661      -1.15626      -153.543       153.543       1735.45       1888.99    
  49  0.947465     -0.539649E-01  -7.16614       7.16614       1809.33       1816.50    
  50  0.613869     -0.487974      -64.7994       64.7994       1780.87       1845.67    
  51  0.303056      -1.19384      -158.533       158.533       1795.55       1954.09    
  52  0.749186     -0.288769      -38.3463       38.3463       1569.79       1608.13    
  53  0.671119E-01  -2.70139      -358.725       358.725       1827.47       2186.19    
  54  0.545553E-02  -5.21113      -691.999       691.999       1744.72       2436.72    
  55  0.866985     -0.142734      -18.9540       18.9540       1810.05       1829.00    
  56  0.622088     -0.474673      -63.0331       63.0331       1889.46       1952.50    
  57  0.471050     -0.752790      -99.9650       99.9650       1560.28       1660.24    
  58  0.433456     -0.835964      -111.010       111.010       1632.39       1743.40    
  59  0.946573     -0.549070E-01  -7.29124       7.29124       1776.78       1784.07    
  60  0.795665     -0.228577      -30.3533       30.3533       1935.34       1965.70    
  61  0.536872E-01  -2.92458      -388.363       388.363       1527.51       1915.88    
  62  0.761403     -0.272592      -36.1983       36.1983       1827.18       1863.37    
  63  0.615271     -0.485692      -64.4963       64.4963       1790.45       1854.95    
  64  0.585500     -0.535288      -71.0824       71.0824       1843.67       1914.75    
  65  0.649114     -0.432147      -57.3860       57.3860       1862.77       1920.15    
  66  0.550765     -0.596448      -79.2039       79.2039       1882.40       1961.60    
  67  0.495492     -0.702204      -93.2475       93.2475       1705.34       1798.59    
  68  0.303565      -1.19216      -158.310       158.310       1799.61       1957.92    
  69  0.645152     -0.438270      -58.1990       58.1990       2078.96       2137.16    
  70  0.582875     -0.539782      -71.6791       71.6791       1844.08       1915.76    
  71  0.720704     -0.327527      -43.4932       43.4932       1732.84       1776.33    
  72  0.129533      -2.04382      -271.404       271.404       1781.61       2053.02    
  73  0.998938     -0.106248E-02 -0.141090      0.141090       1770.80       1770.94    
  74  0.656875     -0.420261      -55.8076       55.8076       1228.83       1284.63    
loop,thermsimp(1:2)       20   154.731       134.791    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       1614.33        129.96          0.67         30.10          1.37          0.05        162.15
Just calling func    0   0        162.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1614.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       20
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       21
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      248     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -156.732       156.732       1145.34       1302.07    
   2  0.575213     -0.553015      -73.4363       73.4363       1238.38       1311.82    
   3  0.632244     -0.458480      -60.8828       60.8828       1228.83       1289.71    
   4  0.819203     -0.199424      -26.4820       26.4820       1207.13       1233.61    
   5  0.137693E-02  -6.58790      -874.824       874.824       1240.71       2115.53    
   6  0.367814      -1.00018      -132.816       132.816       1356.13       1488.95    
   7  0.452636     -0.792666      -105.260       105.260       1389.10       1494.36    
   8  0.278102      -1.27977      -169.944       169.944       1412.16       1582.11    
   9  0.417803     -0.872745      -115.894       115.894       1428.62       1544.52    
  10  0.682140     -0.382521      -50.7960       50.7960       1439.42       1490.22    
  11  0.204733      -1.58605      -210.615       210.615       1448.61       1659.23    
  12  0.637442     -0.450292      -59.7955       59.7955       1450.94       1510.73    
  13  0.114518      -2.16702      -287.765       287.765       1332.88       1620.64    
  14  0.724207     -0.322678      -42.8493       42.8493       1281.30       1324.15    
  15  0.461399     -0.773492      -102.714       102.714       1347.44       1450.15    
  16  0.731739     -0.312332      -41.4753       41.4753       1407.45       1448.92    
  17  0.773272     -0.257124      -34.1442       34.1442       1407.76       1441.91    
  18  0.789195     -0.236742      -31.4376       31.4376       1453.26       1484.69    
  19  0.762001     -0.271807      -36.0939       36.0939       1407.55       1443.64    
  20  0.933384     -0.689386E-01  -9.15454       9.15454       1506.58       1515.74    
  21  0.694037     -0.365230      -48.4999       48.4999       1331.35       1379.85    
  22  0.423570     -0.859038      -114.074       114.074       1447.80       1561.87    
  23  0.272919      -1.29858      -172.442       172.442       1549.69       1722.14    
  24  0.535843     -0.623914      -82.8512       82.8512       1561.33       1644.18    
  25  0.902288     -0.102822      -13.6540       13.6540       1569.79       1583.44    
  26  0.479374     -0.735275      -97.6390       97.6390       1436.49       1534.13    
  27  0.494900E-01  -3.00599      -399.173       399.173       1560.83       1960.01    
  28  0.921867     -0.813539E-01  -10.8032       10.8032       1603.60       1614.41    
  29  0.132425      -2.02174      -268.472       268.472       1560.28       1828.75    
  30  0.640539     -0.445446      -59.1519       59.1519       1619.56       1678.71    
  31  0.215363      -1.53543      -203.894       203.894       1581.32       1785.21    
  32  0.437204E-01  -3.12994      -415.633       415.633       1608.08       2023.72    
  33  0.166028      -1.79560      -238.443       238.443       1576.82       1815.27    
  34  0.425825     -0.853727      -113.369       113.369       1661.77       1775.13    
  35  0.810393     -0.210235      -27.9177       27.9177       1545.03       1572.95    
  36  0.855958     -0.155534      -20.6538       20.6538       1666.68       1687.33    
  37  0.830452     -0.185786      -24.6710       24.6710       1632.39       1657.06    
  38  0.658784     -0.417359      -55.4223       55.4223       1519.51       1574.93    
  39  0.910965     -0.932509E-01  -12.3830       12.3830       1555.06       1567.44    
  40  0.603480     -0.505043      -67.0659       67.0659       1770.80       1837.86    
  41  0.702610     -0.352953      -46.8696       46.8696       1732.84       1779.70    
  42  0.329065      -1.11150      -147.599       147.599       1580.47       1728.07    
  43  0.790497     -0.235094      -31.2187       31.2187       1776.78       1808.00    
  44  0.641572     -0.443834      -58.9378       58.9378       1705.34       1764.28    
  45  0.650683     -0.429733      -57.0654       57.0654       1809.33       1866.40    
  46  0.194049E-02  -6.24481      -829.265       829.265       1810.05       2639.32    
  47  0.662053     -0.412409      -54.7649       54.7649       1780.87       1835.63    
  48  0.294846      -1.22130      -162.180       162.180       1839.48       2001.66    
  49  0.709874     -0.342668      -45.5039       45.5039       1790.45       1835.95    
  50  0.700314     -0.356226      -47.3042       47.3042       1770.57       1817.87    
  51  0.639811E-01  -2.74917      -365.069       365.069       1827.18       2192.25    
  52  0.251451      -1.38051      -183.321       183.321       1775.45       1958.77    
  53  0.828691     -0.187907      -24.9527       24.9527       1437.49       1462.44    
  54  0.962710     -0.380034E-01  -5.04658       5.04658       1735.45       1740.50    
  55  0.429583     -0.844940      -112.202       112.202       1734.78       1846.98    
  56  0.871108     -0.137990      -18.3240       18.3240       1637.85       1656.17    
  57  0.328516      -1.11317      -147.821       147.821       1843.67       1991.49    
  58  0.401423     -0.912741      -121.205       121.205       1844.08       1965.29    
  59  0.671285     -0.398562      -52.9261       52.9261       1527.51       1580.44    
  60  0.919587     -0.838302E-01  -11.1320       11.1320       1862.77       1873.90    
  61  0.209634      -1.56239      -207.474       207.474       1445.71       1653.19    
  62  0.894137     -0.111896      -14.8589       14.8589       1889.46       1904.32    
  63  0.623590     -0.472262      -62.7129       62.7129       1795.55       1858.27    
  64  0.469722     -0.755615      -100.340       100.340       1799.61       1899.95    
  65  0.927315E-01  -2.37805      -315.787       315.787       1882.40       2198.19    
  66  0.663316     -0.410504      -54.5120       54.5120       1935.34       1989.85    
  67  0.972420     -0.279677E-01  -3.71391       3.71391       1582.86       1586.57    
  68  0.594470     -0.520086      -69.0635       69.0635       1747.07       1816.13    
  69  0.421560     -0.863793      -114.705       114.705       1781.61       1896.32    
  70  0.878821     -0.129174      -17.1534       17.1534       1719.19       1736.35    
  71  0.231393      -1.46364      -194.361       194.361       2078.96       2273.32    
  72  0.209055      -1.56516      -207.842       207.842       1698.61       1906.45    
  73  0.278482      -1.27840      -169.762       169.762       1827.47       1997.23    
  74  0.725973     -0.320242      -42.5258       42.5258       1614.33       1656.86    
loop,thermsimp(1:2)       21   156.732       73.4363    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250       2250.03        129.66          0.68         30.52          0.64          0.05        161.55
Just calling func    0   0        161.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2250.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       21
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       22
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      249     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -23.3271       23.3271       1207.13       1230.46    
   2  0.801853     -0.220830      -29.3246       29.3246       1228.83       1258.15    
   3  0.768645     -0.263126      -34.9411       34.9411       1145.34       1180.28    
   4  0.855557     -0.156003      -20.7160       20.7160       1238.38       1259.10    
   5  0.845591     -0.167720      -22.2719       22.2719       1281.30       1303.57    
   6  0.350050      -1.04968      -139.390       139.390       1331.35       1470.74    
   7  0.927608     -0.751463E-01  -9.97887       9.97887       1407.76       1417.74    
   8  0.655345E-01  -2.72518      -361.884       361.884       1407.55       1769.43    
   9  0.355481      -1.03428      -137.345       137.345       1407.45       1544.79    
  10  0.728523     -0.316737      -42.0603       42.0603       1347.44       1389.50    
  11  0.573220     -0.556486      -73.8972       73.8972       1437.49       1511.39    
  12  0.112478      -2.18499      -290.151       290.151       1453.26       1743.41    
  13  0.338739      -1.08253      -143.751       143.751       1356.13       1499.89    
  14  0.239648      -1.42858      -189.705       189.705       1439.42       1629.13    
  15  0.918959     -0.845134E-01  -11.2228       11.2228       1389.10       1400.33    
  16  0.283771      -1.25959      -167.264       167.264       1450.94       1618.20    
  17  0.414404     -0.880913      -116.979       116.979       1506.58       1623.56    
  18  0.716403     -0.333512      -44.2880       44.2880       1436.49       1480.78    
  19  0.317726      -1.14657      -152.256       152.256       1428.62       1580.88    
  20  0.339005      -1.08174      -143.647       143.647       1447.80       1591.45    
  21  0.163059      -1.81364      -240.839       240.839       1555.06       1795.90    
  22  0.477081     -0.740069      -98.2757       98.2757       1545.03       1643.31    
  23  0.105851      -2.24573      -298.216       298.216       1519.51       1817.72    
  24  0.840431     -0.173840      -23.0847       23.0847       1527.51       1550.60    
  25  0.235315      -1.44683      -192.129       192.129       1412.16       1604.29    
  26  0.865464     -0.144489      -19.1871       19.1871       1569.79       1588.97    
  27  0.909462     -0.949026E-01  -12.6024       12.6024       1582.86       1595.46    
  28  0.152105E-01  -4.18577      -555.839       555.839       1603.60       2159.44    
  29  0.962485     -0.382371E-01  -5.07761       5.07761       1332.88       1337.95    
  30  0.259410      -1.34934      -179.183       179.183       1561.33       1740.51    
  31  0.364880      -1.00819      -133.880       133.880       1445.71       1579.59    
  32  0.467235     -0.760923      -101.045       101.045       1637.85       1738.89    
  33  0.844908     -0.168527      -22.3792       22.3792       1614.33       1636.71    
  34  0.188232      -1.67008      -221.775       221.775       1632.39       1854.17    
  35  0.496585     -0.700000      -92.9549       92.9549       1448.61       1541.57    
  36  0.410505     -0.890367      -118.234       118.234       1619.56       1737.79    
  37  0.533875     -0.627594      -83.3398       83.3398       1666.68       1750.02    
  38  0.610668     -0.493202      -65.4936       65.4936       1549.69       1615.19    
  39  0.241933      -1.41910      -188.445       188.445       1580.47       1768.91    
  40  0.642629     -0.442188      -58.7193       58.7193       1719.19       1777.91    
  41  0.775072     -0.254799      -33.8354       33.8354       1735.45       1769.29    
  42  0.345343      -1.06322      -141.187       141.187       1705.34       1846.53    
  43  0.844097     -0.169488      -22.5067       22.5067       1661.77       1684.27    
  44  0.426886     -0.851239      -113.038       113.038       1732.84       1845.87    
  45  0.594109     -0.520693      -69.1442       69.1442       1581.32       1650.46    
  46  0.489527     -0.714316      -94.8559       94.8559       1776.78       1871.64    
  47  0.313882      -1.15874      -153.872       153.872       1576.82       1730.70    
  48  0.687066     -0.375325      -49.8405       49.8405       1747.07       1796.91    
  49  0.394505     -0.930124      -123.514       123.514       1770.57       1894.08    
  50  0.971200     -0.292233E-01  -3.88063       3.88063       1560.28       1564.16    
  51  0.916939     -0.867145E-01  -11.5150       11.5150       1780.87       1792.38    
  52  0.968457     -0.320511E-01  -4.25616       4.25616       1790.45       1794.71    
  53  0.437414     -0.826876      -109.803       109.803       1770.80       1880.60    
  54  0.647516     -0.434611      -57.7132       57.7132       1734.78       1792.49    
  55  0.181293      -1.70764      -226.762       226.762       1795.55       2022.31    
  56  0.836714     -0.178273      -23.6733       23.6733       1809.33       1833.01    
  57  0.940459     -0.613876E-01  -8.15182       8.15182       1862.77       1870.92    
  58  0.141896      -1.95266      -259.299       259.299       1781.61       2040.91    
  59  0.111323      -2.19532      -291.522       291.522       1799.61       2091.13    
  60  0.721494E-01  -2.62902      -349.114       349.114       1889.46       2238.58    
  61  0.618358     -0.480687      -63.8317       63.8317       1698.61       1762.44    
  62  0.825766     -0.191444      -25.4223       25.4223       1775.45       1800.87    
  63  0.438611     -0.824143      -109.440       109.440       1560.83       1670.27    
  64  0.158533      -1.84179      -244.576       244.576       1844.08       2088.66    
  65  0.750786     -0.286635      -38.0630       38.0630       1935.34       1973.41    
  66  0.936921     -0.651566E-01  -8.65232       8.65232       1843.67       1852.32    
  67  0.652715     -0.426615      -56.6514       56.6514       1827.47       1884.12    
  68  0.471604     -0.751616      -99.8090       99.8090       1839.48       1939.29    
  69  0.883538     -0.123821      -16.4425       16.4425       1608.08       1624.53    
  70  0.267870      -1.31725      -174.921       174.921       1240.71       1415.63    
  71  0.662224     -0.412151      -54.7307       54.7307       1827.18       1881.91    
  72  0.652465     -0.426998      -56.7022       56.7022       1882.40       1939.10    
  73  0.261718      -1.34049      -178.007       178.007       2078.96       2256.96    
  74  0.929393     -0.732233E-01  -9.72352       9.72352       2250.03       2259.76    
loop,thermsimp(1:2)       22   23.3271       29.3246    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       1810.05        129.91          0.68         30.07          1.15          0.05        161.86
Just calling func    0   0        161.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1810.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       22
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       23
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      250     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -21.8386       21.8386       1145.34       1167.18    
   2  0.848474     -0.164316      -21.8200       21.8200       1207.13       1228.95    
   3  0.146795      -1.91872      -254.792       254.792       1228.83       1483.62    
   4  0.398624     -0.919738      -122.134       122.134       1238.38       1360.52    
   5  0.888093     -0.118679      -15.7596       15.7596       1281.30       1297.06    
   6  0.475009     -0.744421      -98.8536       98.8536       1332.88       1431.73    
   7  0.120824      -2.11342      -280.647       280.647       1347.44       1628.08    
   8  0.270052      -1.30914      -173.844       173.844       1389.10       1562.95    
   9  0.201748E-01  -3.90332      -518.333       518.333       1240.71       1759.04    
  10  0.999386     -0.614559E-03 -0.816089E-01  0.816089E-01   1407.76       1407.85    
  11  0.212655      -1.54808      -205.574       205.574       1331.35       1536.92    
  12  0.197911      -1.61994      -215.116       215.116       1436.49       1651.61    
  13  0.786394     -0.240297      -31.9097       31.9097       1356.13       1388.04    
  14  0.781263     -0.246844      -32.7790       32.7790       1437.49       1470.27    
  15  0.788011     -0.238244      -31.6370       31.6370       1448.61       1480.25    
  16  0.956387     -0.445927E-01  -5.92158       5.92158       1407.45       1413.37    
  17  0.717415     -0.332100      -44.1005       44.1005       1527.51       1571.61    
  18  0.808756     -0.212258      -28.1863       28.1863       1560.28       1588.46    
  19  0.756838     -0.278606      -36.9969       36.9969       1445.71       1482.71    
  20  0.570684     -0.560919      -74.4859       74.4859       1428.62       1503.11    
  21  0.946031     -0.554796E-01  -7.36729       7.36729       1569.79       1577.16    
  22  0.678634E-01  -2.69026      -357.246       357.246       1447.80       1805.05    
  23  0.631502     -0.459654      -61.0386       61.0386       1582.86       1643.90    
  24  0.114784E-01  -4.46729      -593.223       593.223       1412.16       2005.39    
  25  0.549681     -0.598417      -79.4654       79.4654       1549.69       1629.16    
  26  0.846433     -0.166725      -22.1398       22.1398       1450.94       1473.08    
  27  0.441841     -0.816805      -108.466       108.466       1506.58       1615.05    
  28  0.299100      -1.20698      -160.278       160.278       1608.08       1768.36    
  29  0.378130     -0.972517      -129.143       129.143       1439.42       1568.56    
  30  0.830469     -0.185764      -24.6681       24.6681       1614.33       1639.00    
  31  0.675108     -0.392883      -52.1720       52.1720       1545.03       1597.20    
  32  0.997619     -0.238377E-02 -0.316547      0.316547       1581.32       1581.64    
  33  0.897623     -0.108005      -14.3422       14.3422       1560.83       1575.17    
  34  0.591811E-01  -2.82715      -375.425       375.425       1661.77       2037.19    
  35  0.229825      -1.47044      -195.263       195.263       1576.82       1772.09    
  36  0.654017     -0.424622      -56.3867       56.3867       1619.56       1675.94    
  37  0.305777      -1.18490      -157.346       157.346       1637.85       1795.19    
  38  0.936135     -0.659954E-01  -8.76371       8.76371       1561.33       1570.09    
  39  0.698153     -0.359317      -47.7146       47.7146       1453.26       1500.97    
  40  0.829975     -0.186360      -24.7473       24.7473       1666.68       1691.43    
  41  0.951351     -0.498721E-01  -6.62264       6.62264       1698.61       1705.23    
  42  0.883299     -0.124092      -16.4785       16.4785       1580.47       1596.94    
  43  0.910087     -0.942154E-01  -12.5111       12.5111       1735.45       1747.96    
  44  0.590840     -0.526210      -69.8768       69.8768       1407.55       1477.42    
  45  0.146785      -1.91879      -254.801       254.801       1719.19       1973.99    
  46  0.830381E-01  -2.48846      -330.449       330.449       1780.87       2111.32    
  47  0.289482      -1.23966      -164.618       164.618       1734.78       1899.40    
  48  0.594462     -0.520098      -69.0652       69.0652       1790.45       1859.52    
  49  0.241311      -1.42167      -188.787       188.787       1555.06       1743.85    
  50  0.612368     -0.490422      -65.1244       65.1244       1747.07       1812.19    
  51  0.952207     -0.489727E-01  -6.50321       6.50321       1775.45       1781.96    
  52  0.857144     -0.154149      -20.4699       20.4699       1519.51       1539.98    
  53  0.221746      -1.50622      -200.015       200.015       1809.33       2009.35    
  54  0.874757     -0.133809      -17.7689       17.7689       1732.84       1750.60    
  55  0.474241     -0.746040      -99.0686       99.0686       1705.34       1804.41    
  56  0.679995E-01  -2.68826      -356.980       356.980       1843.67       2200.65    
  57  0.276977      -1.28382      -170.482       170.482       1632.39       1802.87    
  58  0.308562      -1.17583      -156.142       156.142       1862.77       2018.91    
  59  0.910099     -0.942023E-01  -12.5094       12.5094       1776.78       1789.29    
  60  0.189281      -1.66452      -221.036       221.036       1770.80       1991.83    
  61  0.759386     -0.275245      -36.5505       36.5505       1827.18       1863.73    
  62  0.464823     -0.766099      -101.732       101.732       1827.47       1929.20    
  63  0.428490     -0.847488      -112.540       112.540       1770.57       1883.11    
  64  0.377334     -0.974624      -129.423       129.423       1882.40       2011.82    
  65  0.168846      -1.77877      -236.208       236.208       1839.48       2075.68    
  66  0.816398     -0.202853      -26.9374       26.9374       1935.34       1962.28    
  67  0.663000     -0.410981      -54.5753       54.5753       1795.55       1850.13    
  68  0.805080     -0.216814      -28.7913       28.7913       1781.61       1810.40    
  69  0.767976E-01  -2.56658      -340.823       340.823       1844.08       2184.91    
  70  0.646958     -0.435474      -57.8277       57.8277       1799.61       1857.43    
  71  0.988002E-01  -2.31466      -307.369       307.369       1603.60       1910.97    
  72  0.310465      -1.16968      -155.325       155.325       1889.46       2044.79    
  73  0.957874     -0.430393E-01  -5.71530       5.71530       2078.96       2084.67    
  74  0.155852E-01  -4.16143      -552.607       552.607       1810.05       2362.66    
loop,thermsimp(1:2)       23   21.8386       21.8200    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       2250.03        129.68          0.69         30.46          1.11          0.05        161.99
Just calling func    0   0        161.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2250.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       23
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       24
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      251     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -303.104       303.104       1145.34       1448.44    
   2  0.372115     -0.988552      -131.272       131.272       1207.13       1338.40    
   3  0.732875     -0.310780      -41.2693       41.2693       1281.30       1322.57    
   4  0.341646      -1.07398      -142.617       142.617       1238.38       1381.00    
   5  0.406512     -0.900141      -119.532       119.532       1356.13       1475.67    
   6  0.271848      -1.30251      -172.964       172.964       1407.76       1580.73    
   7  0.738418     -0.303245      -40.2687       40.2687       1407.45       1447.72    
   8  0.903199     -0.101813      -13.5200       13.5200       1332.88       1346.40    
   9  0.511789     -0.669842      -88.9501       88.9501       1437.49       1526.44    
  10  0.202674      -1.59616      -211.958       211.958       1450.94       1662.90    
  11  0.325695      -1.12179      -148.966       148.966       1407.55       1556.51    
  12  0.719720     -0.328893      -43.6746       43.6746       1448.61       1492.29    
  13  0.715609     -0.334622      -44.4353       44.4353       1445.71       1490.15    
  14  0.973328     -0.270339E-01  -3.58991       3.58991       1228.83       1232.42    
  15  0.373998     -0.983504      -130.602       130.602       1453.26       1583.86    
  16  0.977965     -0.222815E-01  -2.95882       2.95882       1428.62       1431.58    
  17  0.105495      -2.24909      -298.663       298.663       1331.35       1630.01    
  18  0.729809     -0.314973      -41.8261       41.8261       1519.51       1561.33    
  19  0.378008     -0.972839      -129.186       129.186       1389.10       1518.29    
  20  0.678326     -0.388127      -51.5404       51.5404       1439.42       1490.96    
  21  0.671993     -0.397507      -52.7861       52.7861       1561.33       1614.11    
  22  0.515926     -0.661792      -87.8812       87.8812       1527.51       1615.39    
  23  0.363490      -1.01200      -134.387       134.387       1560.83       1695.22    
  24  0.206319      -1.57833      -209.591       209.591       1569.79       1779.38    
  25  0.755157E-01  -2.58341      -343.058       343.058       1581.32       1924.38    
  26  0.413763     -0.882461      -117.184       117.184       1560.28       1677.46    
  27  0.279023      -1.27646      -169.504       169.504       1580.47       1749.97    
  28  0.506422     -0.680385      -90.3501       90.3501       1545.03       1635.38    
  29  0.643082E-02  -5.04665      -670.158       670.158       1506.58       2176.74    
  30  0.285888E-01  -3.55474      -472.043       472.043       1347.44       1819.48    
  31  0.660419     -0.414880      -55.0930       55.0930       1549.69       1604.79    
  32  0.739369     -0.301959      -40.0979       40.0979       1614.33       1654.43    
  33  0.270269      -1.30834      -173.738       173.738       1582.86       1756.59    
  34  0.663889     -0.409640      -54.3972       54.3972       1436.49       1490.89    
  35  0.898739E-01  -2.40935      -319.944       319.944       1619.56       1939.50    
  36  0.832427     -0.183410      -24.3555       24.3555       1666.68       1691.04    
  37  0.723106     -0.324200      -43.0514       43.0514       1698.61       1741.66    
  38  0.986274     -0.138207E-01  -1.83529       1.83529       1555.06       1556.90    
  39  0.812861     -0.207195      -27.5140       27.5140       1735.45       1762.97    
  40  0.553236     -0.591971      -78.6094       78.6094       1732.84       1811.44    
  41  0.693785E-01  -2.66818      -354.314       354.314       1240.71       1595.03    
  42  0.117256      -2.14340      -284.628       284.628       1608.08       1892.71    
  43  0.807809     -0.213430      -28.3419       28.3419       1576.82       1605.17    
  44  0.900249     -0.105084      -13.9543       13.9543       1775.45       1789.41    
  45  0.753470     -0.283066      -37.5891       37.5891       1776.78       1814.37    
  46  0.127159      -2.06232      -273.861       273.861       1637.85       1911.71    
  47  0.535389     -0.624762      -82.9638       82.9638       1632.39       1715.35    
  48  0.957281     -0.436582E-01  -5.79748       5.79748       1705.34       1711.14    
  49  0.227700      -1.47973      -196.497       196.497       1447.80       1644.30    
  50  0.636404     -0.451921      -60.0118       60.0118       1781.61       1841.62    
  51  0.905015     -0.998042E-01  -13.2533       13.2533       1747.07       1760.32    
  52  0.555191     -0.588444      -78.1410       78.1410       1795.55       1873.69    
  53  0.687780     -0.374286      -49.7025       49.7025       1799.61       1849.31    
  54  0.759422E-01  -2.57778      -342.311       342.311       1790.45       2132.76    
  55  0.374598     -0.981902      -130.389       130.389       1827.18       1957.57    
  56  0.399521     -0.917488      -121.836       121.836       1770.57       1892.40    
  57  0.997363     -0.264016E-02 -0.350594      0.350594       1734.78       1735.13    
  58  0.164658      -1.80389      -239.543       239.543       1603.60       1843.15    
  59  0.697359     -0.360454      -47.8657       47.8657       1827.47       1875.33    
  60  0.822795     -0.195048      -25.9009       25.9009       1935.34       1961.24    
  61  0.755086     -0.280923      -37.3045       37.3045       1719.19       1756.50    
  62  0.912857     -0.911765E-01  -12.1076       12.1076       1770.80       1782.90    
  63  0.891590     -0.114749      -15.2378       15.2378       1412.16       1427.40    
  64  0.461859     -0.772496      -102.582       102.582       1809.33       1911.91    
  65  0.695630     -0.362938      -48.1955       48.1955       1882.40       1930.59    
  66  0.168128      -1.78303      -236.773       236.773       1862.77       2099.54    
  67  0.552556     -0.593201      -78.7727       78.7727       1661.77       1740.54    
  68  0.450301E-01  -3.10043      -411.714       411.714       1889.46       2301.18    
  69  0.675538     -0.392246      -52.0874       52.0874       1839.48       1891.56    
  70  0.455839     -0.785615      -104.324       104.324       2078.96       2183.28    
  71  0.700226     -0.356352      -47.3209       47.3209       1780.87       1828.19    
  72  0.694116     -0.365117      -48.4848       48.4848       1844.08       1892.57    
  73  0.604722E-01  -2.80557      -372.559       372.559       1843.67       2216.23    
  74  0.194722      -1.63618      -217.273       217.273       2250.03       2467.31    
loop,thermsimp(1:2)       24   303.104       131.272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       1810.05        129.92          0.68         30.07          0.90          0.05        161.63
Just calling func    0   0        161.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1810.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       24
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       25
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      252     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -5.03662       5.03662       1228.83       1233.86    
   2  0.355374      -1.03458      -137.385       137.385       1281.30       1418.68    
   3  0.294461      -1.22261      -162.353       162.353       1207.13       1369.49    
   4  0.644538     -0.439222      -58.3254       58.3254       1332.88       1391.20    
   5  0.741622     -0.298915      -39.6938       39.6938       1238.38       1278.08    
   6  0.805913E-01  -2.51837      -334.420       334.420       1412.16       1746.58    
   7  0.498180     -0.696794      -92.5291       92.5291       1428.62       1521.15    
   8  0.771004     -0.260061      -34.5342       34.5342       1407.45       1441.98    
   9  0.753480     -0.283053      -37.5873       37.5873       1145.34       1182.92    
  10  0.460525     -0.775387      -102.966       102.966       1356.13       1459.10    
  11  0.918626     -0.848759E-01  -11.2709       11.2709       1445.71       1456.98    
  12  0.355379      -1.03457      -137.383       137.383       1436.49       1573.87    
  13  0.664646     -0.408501      -54.2459       54.2459       1439.42       1493.67    
  14  0.328018      -1.11469      -148.022       148.022       1448.61       1596.64    
  15  0.529583     -0.635665      -84.4116       84.4116       1389.10       1473.52    
  16  0.259823      -1.34775      -178.972       178.972       1437.49       1616.46    
  17  0.463690E-01  -3.07112      -407.823       407.823       1407.55       1815.37    
  18  0.366509      -1.00373      -133.288       133.288       1555.06       1688.35    
  19  0.794534     -0.229999      -30.5422       30.5422       1519.51       1550.05    
  20  0.669373     -0.401413      -53.3047       53.3047       1407.76       1461.07    
  21  0.798901     -0.224518      -29.8144       29.8144       1453.26       1483.07    
  22  0.610403     -0.493636      -65.5513       65.5513       1240.71       1306.26    
  23  0.267818      -1.31745      -174.947       174.947       1549.69       1724.64    
  24  0.663049     -0.410906      -54.5653       54.5653       1576.82       1631.39    
  25  0.782871     -0.244788      -32.5060       32.5060       1561.33       1593.83    
  26  0.706545     -0.347368      -46.1279       46.1279       1527.51       1573.64    
  27  0.120119      -2.11927      -281.424       281.424       1331.35       1612.77    
  28  0.270575      -1.30721      -173.588       173.588       1545.03       1718.62    
  29  0.505391     -0.682422      -90.6206       90.6206       1447.80       1538.42    
  30  0.665734     -0.406865      -54.0286       54.0286       1614.33       1668.36    
  31  0.836788     -0.178185      -23.6616       23.6616       1450.94       1474.60    
  32  0.866983     -0.142736      -18.9543       18.9543       1560.28       1579.23    
  33  0.552904     -0.592571      -78.6890       78.6890       1666.68       1745.37    
  34  0.554153     -0.590314      -78.3894       78.3894       1560.83       1639.22    
  35  0.592407E-01  -2.82615      -375.292       375.292       1705.34       2080.63    
  36  0.902163     -0.102960      -13.6723       13.6723       1632.39       1646.06    
  37  0.266638E-01  -3.62445      -481.300       481.300       1734.78       2216.08    
  38  0.897053     -0.108640      -14.4266       14.4266       1661.77       1676.19    
  39  0.840496     -0.173763      -23.0744       23.0744       1698.61       1721.68    
  40  0.288358      -1.24355      -165.135       165.135       1580.47       1745.60    
  41  0.835972E-01  -2.48175      -329.558       329.558       1719.19       2048.75    
  42  0.412070     -0.886563      -117.729       117.729       1582.86       1700.59    
  43  0.725010     -0.321570      -42.7021       42.7021       1747.07       1789.77    
  44  0.316556      -1.15026      -152.745       152.745       1735.45       1888.20    
  45  0.486178     -0.721181      -95.7676       95.7676       1569.79       1665.56    
  46  0.143341      -1.94253      -257.954       257.954       1770.80       2028.75    
  47  0.956913     -0.440430E-01  -5.84859       5.84859       1775.45       1781.30    
  48  0.362697      -1.01419      -134.677       134.677       1732.84       1867.51    
  49  0.951746     -0.494572E-01  -6.56756       6.56756       1776.78       1783.35    
  50  0.511140     -0.671112      -89.1187       89.1187       1347.44       1436.56    
  51  0.364891E-01  -3.31074      -439.642       439.642       1780.87       2220.51    
  52  0.377076     -0.975308      -129.514       129.514       1781.61       1911.12    
  53  0.670030E-01  -2.70302      -358.941       358.941       1603.60       1962.54    
  54  0.448832     -0.801107      -106.381       106.381       1799.61       1905.99    
  55  0.252392      -1.37677      -182.825       182.825       1795.55       1978.38    
  56  0.910592     -0.936608E-01  -12.4375       12.4375       1827.47       1839.90    
  57  0.801917     -0.220751      -29.3141       29.3141       1839.48       1868.79    
  58  0.473432     -0.747746      -99.2952       99.2952       1770.57       1869.86    
  59  0.431618     -0.840214      -111.574       111.574       1844.08       1955.66    
  60  0.886774     -0.120166      -15.9571       15.9571       1608.08       1624.04    
  61  0.880132     -0.127683      -16.9554       16.9554       1637.85       1654.80    
  62  0.962190     -0.385439E-01  -5.11834       5.11834       1809.33       1814.45    
  63  0.618144     -0.481034      -63.8777       63.8777       1581.32       1645.20    
  64  0.169887      -1.77262      -235.391       235.391       1882.40       2117.79    
  65  0.384484E-01  -3.25844      -432.697       432.697       1619.56       2052.25    
  66  0.178067      -1.72560      -229.146       229.146       1827.18       2056.32    
  67  0.255365      -1.36506      -181.270       181.270       1935.34       2116.61    
  68  0.476812     -0.740633      -98.3506       98.3506       1862.77       1961.12    
  69  0.642499     -0.442391      -58.7462       58.7462       1790.45       1849.20    
  70  0.178007      -1.72593      -229.191       229.191       1506.58       1735.77    
  71  0.622345     -0.474260      -62.9783       62.9783       2078.96       2141.94    
  72  0.712002     -0.339675      -45.1063       45.1063       1843.67       1888.77    
  73  0.125902      -2.07225      -275.179       275.179       1889.46       2164.64    
  74  0.359449      -1.02318      -135.871       135.871       1810.05       1945.92    
loop,thermsimp(1:2)       25   5.03662       137.385    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       1226.27        129.73          0.68         30.23          0.98          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1226.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       25
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       26
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      253     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -1.66719       1.66719       1145.34       1147.00    
   2  0.516099     -0.661457      -87.8366       87.8366       1228.83       1316.66    
   3  0.202206      -1.59847      -212.265       212.265       1238.38       1450.65    
   4  0.240260      -1.42603      -189.367       189.367       1240.71       1430.08    
   5  0.717263E-01  -2.63490      -349.895       349.895       1207.13       1557.03    
   6  0.395382     -0.927902      -123.219       123.219       1332.88       1456.09    
   7  0.494348     -0.704516      -93.5546       93.5546       1281.30       1374.85    
   8  0.970815     -0.296196E-01  -3.93327       3.93327       1347.44       1351.37    
   9  0.992795     -0.723105E-02 -0.960231      0.960231       1407.45       1408.41    
  10  0.387320     -0.948503      -125.954       125.954       1445.71       1571.67    
  11  0.586568     -0.533466      -70.8404       70.8404       1356.13       1426.97    
  12  0.119144      -2.12742      -282.506       282.506       1407.76       1690.27    
  13  0.145144      -1.93003      -256.294       256.294       1389.10       1645.40    
  14  0.767931     -0.264056      -35.0647       35.0647       1450.94       1486.00    
  15  0.415014     -0.879442      -116.783       116.783       1453.26       1570.04    
  16  0.994477     -0.553801E-02 -0.735406      0.735406       1439.42       1440.16    
  17  0.757243     -0.278071      -36.9258       36.9258       1428.62       1465.55    
  18  0.669290     -0.401537      -53.3212       53.3212       1447.80       1501.12    
  19  0.112026      -2.18903      -290.687       290.687       1519.51       1810.19    
  20  0.434244     -0.834148      -110.769       110.769       1527.51       1638.28    
  21  0.491828     -0.709627      -94.2332       94.2332       1436.49       1530.72    
  22  0.517535     -0.658677      -87.4675       87.4675       1560.28       1647.74    
  23  0.411147     -0.888804      -118.027       118.027       1561.33       1679.35    
  24  0.250164      -1.38564      -184.003       184.003       1448.61       1632.62    
  25  0.109742E-01  -4.51221      -599.188       599.188       1331.35       1930.54    
  26  0.559459     -0.580786      -77.1241       77.1241       1437.49       1514.61    
  27  0.289677      -1.23899      -164.529       164.529       1608.08       1772.61    
  28  0.835809     -0.179356      -23.8171       23.8171       1576.82       1600.64    
  29  0.236182      -1.44315      -191.640       191.640       1560.83       1752.47    
  30  0.700988     -0.355264      -47.1765       47.1765       1581.32       1628.50    
  31  0.886914     -0.120007      -15.9361       15.9361       1632.39       1648.33    
  32  0.182911      -1.69875      -225.582       225.582       1637.85       1863.43    
  33  0.693089     -0.366597      -48.6814       48.6814       1569.79       1618.47    
  34  0.108523      -2.22079      -294.904       294.904       1614.33       1909.24    
  35  0.141600      -1.95475      -259.576       259.576       1661.77       1921.34    
  36  0.168348E-01  -4.08431      -542.366       542.366       1555.06       2097.43    
  37  0.419419E-01  -3.17147      -421.148       421.148       1582.86       2004.00    
  38  0.244896      -1.40692      -186.829       186.829       1545.03       1731.86    
  39  0.360662      -1.01981      -135.424       135.424       1698.61       1834.03    
  40  0.927013     -0.757879E-01  -10.0641       10.0641       1549.69       1559.76    
  41  0.869067     -0.140335      -18.6354       18.6354       1506.58       1525.22    
  42  0.827083     -0.189851      -25.2108       25.2108       1666.68       1691.89    
  43  0.928403     -0.742893E-01  -9.86507       9.86507       1580.47       1590.33    
  44  0.513193     -0.667103      -88.5864       88.5864       1412.16       1500.75    
  45  0.809080     -0.211858      -28.1332       28.1332       1775.45       1803.59    
  46  0.341224E-02  -5.68039      -754.313       754.313       1776.78       2531.09    
  47  0.734431     -0.308659      -40.9877       40.9877       1747.07       1788.06    
  48  0.688454     -0.373307      -49.5725       49.5725       1809.33       1858.90    
  49  0.990614     -0.943067E-02  -1.25232       1.25232       1407.55       1408.80    
  50  0.143408      -1.94206      -257.891       257.891       1827.47       2085.36    
  51  0.868596     -0.140878      -18.7075       18.7075       1790.45       1809.16    
  52  0.244103      -1.41016      -187.260       187.260       1732.84       1920.09    
  53  0.207986      -1.57029      -208.522       208.522       1839.48       2048.00    
  54  0.426578E-01  -3.15455      -418.900       418.900       1770.57       2189.47    
  55  0.111938      -2.18981      -290.791       290.791       1735.45       2026.24    
  56  0.304345      -1.18959      -157.969       157.969       1843.67       2001.64    
  57  0.911041     -0.931671E-01  -12.3719       12.3719       1799.61       1811.98    
  58  0.144299      -1.93587      -257.069       257.069       1781.61       2038.68    
  59  0.306010      -1.18414      -157.245       157.245       1810.05       1967.29    
  60  0.633032     -0.457234      -60.7174       60.7174       1844.08       1904.80    
  61  0.737469E-02  -4.90970      -651.972       651.972       1862.77       2514.74    
  62  0.794623     -0.229887      -30.5273       30.5273       1603.60       1634.13    
  63  0.200033      -1.60927      -213.700       213.700       1795.55       2009.25    
  64  0.543825     -0.609128      -80.8877       80.8877       1770.80       1851.68    
  65  0.719260     -0.329532      -43.7594       43.7594       1719.19       1762.95    
  66  0.200311      -1.60788      -213.515       213.515       1619.56       1833.07    
  67  0.778326     -0.250609      -33.2791       33.2791       1827.18       1860.46    
  68  0.932167     -0.702437E-01  -9.32785       9.32785       1705.34       1714.67    
  69  0.188590      -1.66818      -221.522       221.522       1935.34       2156.86    
  70  0.722923     -0.324453      -43.0849       43.0849       1882.40       1925.48    
  71  0.779142     -0.249562      -33.1400       33.1400       2078.96       2112.10    
  72  0.253373      -1.37289      -182.310       182.310       1889.46       2071.77    
  73  0.410592E-01  -3.19274      -423.973       423.973       1734.78       2158.75    
  74  0.622772     -0.473575      -62.8873       62.8873       1226.27       1289.16    
loop,thermsimp(1:2)       26   1.66719       87.8366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       1322.70        129.82          0.69         30.22          0.69          0.05        161.48
Just calling func    0   0        161.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256       1119.26        129.92          0.71         30.41          0.46          0.05        161.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1119.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       26
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       27
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      255     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -213.981       213.981       1145.34       1359.32    
   2  0.983274     -0.168677E-01  -2.23990       2.23990       1226.27       1228.51    
   3  0.569108     -0.563685      -74.8532       74.8532       1228.83       1303.68    
   4  0.411179     -0.888728      -118.017       118.017       1347.44       1465.45    
   5  0.889241     -0.117387      -15.5881       15.5881       1281.30       1296.89    
   6  0.109537      -2.21149      -293.670       293.670       1407.45       1701.12    
   7  0.658027     -0.418509      -55.5750       55.5750       1407.55       1463.12    
   8  0.427534     -0.849722      -112.837       112.837       1356.13       1468.97    
   9  0.277803      -1.28084      -170.086       170.086       1240.71       1410.80    
  10  0.568421     -0.564892      -75.0136       75.0136       1439.42       1514.43    
  11  0.368489     -0.998346      -132.573       132.573       1238.38       1370.96    
  12  0.100945E-01  -4.59576      -610.284       610.284       1332.88       1943.16    
  13  0.811445     -0.208939      -27.7455       27.7455       1428.62       1456.37    
  14  0.135138      -2.00146      -265.779       265.779       1450.94       1716.72    
  15  0.600340     -0.510258      -67.7586       67.7586       1412.16       1479.92    
  16  0.537538     -0.620755      -82.4318       82.4318       1447.80       1530.23    
  17  0.923261     -0.798434E-01  -10.6026       10.6026       1437.49       1448.09    
  18  0.296505      -1.21569      -161.435       161.435       1506.58       1668.02    
  19  0.975666     -0.246348E-01  -3.27132       3.27132       1436.49       1439.76    
  20  0.102971      -2.27331      -301.879       301.879       1207.13       1509.01    
  21  0.110137      -2.20603      -292.945       292.945       1549.69       1842.64    
  22  0.874539     -0.134058      -17.8019       17.8019       1453.26       1471.06    
  23  0.887507     -0.119339      -15.8474       15.8474       1445.71       1461.56    
  24  0.811767     -0.208543      -27.6929       27.6929       1580.47       1608.16    
  25  0.304283      -1.18980      -157.996       157.996       1576.82       1734.82    
  26  0.304144      -1.19025      -158.057       158.057       1569.79       1727.84    
  27  0.854538     -0.157194      -20.8742       20.8742       1581.32       1602.19    
  28  0.543001     -0.610645      -81.0891       81.0891       1448.61       1529.70    
  29  0.808766     -0.212246      -28.1847       28.1847       1603.60       1631.79    
  30  0.286176      -1.25115      -166.143       166.143       1527.51       1693.66    
  31  0.328161      -1.11425      -147.964       147.964       1389.10       1537.07    
  32  0.563264     -0.574006      -76.2238       76.2238       1560.28       1636.50    
  33  0.180895      -1.70984      -227.054       227.054       1632.39       1859.45    
  34  0.977796     -0.224538E-01  -2.98169       2.98169       1561.33       1564.31    
  35  0.650784     -0.429577      -57.0447       57.0447       1407.76       1464.81    
  36  0.350586      -1.04815      -139.186       139.186       1666.68       1805.87    
  37  0.852996E-01  -2.46159      -326.880       326.880       1705.34       2032.22    
  38  0.363921      -1.01082      -134.229       134.229       1545.03       1679.26    
  39  0.715496E-01  -2.63737      -350.223       350.223       1560.83       1911.05    
  40  0.540542     -0.615184      -81.6919       81.6919       1719.19       1800.89    
  41  0.458744E-02  -5.38443      -715.013       715.013       1608.08       2323.10    
  42  0.684509     -0.379054      -50.3355       50.3355       1747.07       1797.40    
  43  0.827193     -0.189717      -25.1931       25.1931       1775.45       1800.65    
  44  0.430712     -0.842315      -111.853       111.853       1790.45       1902.30    
  45  0.925073     -0.778822E-01  -10.3422       10.3422       1519.51       1529.85    
  46  0.139567      -1.96921      -261.497       261.497       1799.61       2061.10    
  47  0.905138     -0.996680E-01  -13.2352       13.2352       1619.56       1632.79    
  48  0.230323      -1.46827      -194.976       194.976       1698.61       1893.58    
  49  0.854981     -0.156676      -20.8054       20.8054       1770.80       1791.60    
  50  0.526676     -0.641170      -85.1427       85.1427       1809.33       1894.47    
  51  0.425904     -0.853542      -113.344       113.344       1827.18       1940.52    
  52  0.770395     -0.260852      -34.6392       34.6392       1637.85       1672.48    
  53  0.222399      -1.50328      -199.625       199.625       1844.08       2043.71    
  54  0.849203     -0.163457      -21.7059       21.7059       1614.33       1636.04    
  55  0.409521     -0.892766      -118.553       118.553       1732.84       1851.39    
  56  0.526161     -0.642147      -85.2724       85.2724       1661.77       1747.04    
  57  0.705716     -0.348543      -46.2840       46.2840       1882.40       1928.68    
  58  0.548845E-03  -7.50769      -996.967       996.967       1331.35       2328.31    
  59  0.498314     -0.696524      -92.4933       92.4933       1810.05       1902.54    
  60  0.774749     -0.255216      -33.8908       33.8908       1843.67       1877.56    
  61  0.537402E-01  -2.92359      -388.232       388.232       1582.86       1971.09    
  62  0.708174     -0.345066      -45.8222       45.8222       1795.55       1841.38    
  63  0.272932      -1.29853      -172.436       172.436       1735.45       1907.89    
  64  0.701294     -0.354828      -47.1185       47.1185       1781.61       1828.73    
  65  0.309054      -1.17424      -155.930       155.930       1839.48       1995.41    
  66  0.911982     -0.921347E-01  -12.2348       12.2348       1889.46       1901.70    
  67  0.874613     -0.133974      -17.7908       17.7908       1827.47       1845.26    
  68  0.317616      -1.14691      -152.302       152.302       1555.06       1707.36    
  69  0.587945     -0.531123      -70.5292       70.5292       2078.96       2149.49    
  70  0.358507E-02  -5.63098      -747.752       747.752       1935.34       2683.09    
  71  0.802817     -0.219629      -29.1651       29.1651       1734.78       1763.95    
  72  0.559815     -0.580150      -77.0396       77.0396       1770.57       1847.61    
  73  0.303478      -1.19244      -158.348       158.348       1862.77       2021.12    
  74  0.226763      -1.48385      -197.044       197.044       1119.26       1316.31    
loop,thermsimp(1:2)       27   213.981       2.23990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257       3228.77        128.82          0.65         30.57          1.34          0.04        161.42
Just calling func    0   0        161.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258       1405.23        129.27          0.67         30.62          1.45          0.04        162.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1405.23
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       27
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       28
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      257     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -194.204       194.204       1226.27       1420.48    
   2  0.922423     -0.807516E-01  -10.7232       10.7232       1281.30       1292.02    
   3  0.556007     -0.586974      -77.9458       77.9458       1228.83       1306.77    
   4  0.921345     -0.819211E-01  -10.8785       10.8785       1119.26       1130.14    
   5  0.623358     -0.472635      -62.7624       62.7624       1145.34       1208.10    
   6  0.967150     -0.334012E-01  -4.43543       4.43543       1238.38       1242.82    
   7  0.239844      -1.42777      -189.597       189.597       1240.71       1430.31    
   8  0.707370     -0.346201      -45.9729       45.9729       1436.49       1482.46    
   9  0.375591     -0.979256      -130.038       130.038       1437.49       1567.53    
  10  0.164915      -1.80233      -239.336       239.336       1428.62       1667.96    
  11  0.634729     -0.454558      -60.3619       60.3619       1445.71       1506.07    
  12  0.956585     -0.443852E-01  -5.89403       5.89403       1407.55       1413.44    
  13  0.281051      -1.26922      -168.543       168.543       1407.76       1576.31    
  14  0.332446      -1.10128      -146.242       146.242       1347.44       1493.68    
  15  0.417901     -0.872510      -115.863       115.863       1356.13       1472.00    
  16  0.454459     -0.788647      -104.726       104.726       1453.26       1557.98    
  17  0.163150      -1.81309      -240.765       240.765       1412.16       1652.93    
  18  0.412675     -0.885095      -117.534       117.534       1207.13       1324.67    
  19  0.510076     -0.673195      -89.3954       89.3954       1439.42       1528.82    
  20  0.159872E-02  -6.43855      -854.992       854.992       1448.61       2303.61    
  21  0.279094      -1.27620      -169.471       169.471       1519.51       1688.98    
  22  0.229843E-01  -3.77294      -501.019       501.019       1447.80       1948.82    
  23  0.829240E-02  -4.79242      -636.398       636.398       1389.10       2025.50    
  24  0.722732     -0.324717      -43.1200       43.1200       1561.33       1604.45    
  25  0.399402     -0.917787      -121.875       121.875       1581.32       1703.19    
  26  0.321457      -1.13489      -150.705       150.705       1580.47       1731.17    
  27  0.103147      -2.27160      -301.651       301.651       1603.60       1905.25    
  28  0.488570     -0.716273      -95.1158       95.1158       1619.56       1714.67    
  29  0.775391     -0.254388      -33.7808       33.7808       1614.33       1648.11    
  30  0.264831      -1.32866      -176.437       176.437       1560.28       1736.71    
  31  0.291634      -1.23225      -163.634       163.634       1506.58       1670.22    
  32  0.754799E-02  -4.88647      -648.888       648.888       1637.85       2286.73    
  33  0.403715     -0.907047      -120.449       120.449       1545.03       1665.48    
  34  0.794963     -0.229460      -30.4706       30.4706       1527.51       1557.98    
  35  0.482612E-01  -3.03113      -402.511       402.511       1407.45       1809.96    
  36  0.309506      -1.17278      -155.736       155.736       1555.06       1710.80    
  37  0.265676      -1.32548      -176.013       176.013       1450.94       1626.95    
  38  0.793358     -0.231480      -30.7389       30.7389       1569.79       1600.53    
  39  0.603192E-01  -2.80811      -372.896       372.896       1576.82       1949.72    
  40  0.516664     -0.660363      -87.6914       87.6914       1661.77       1749.46    
  41  0.524892E-01  -2.94715      -391.360       391.360       1734.78       2126.14    
  42  0.581500     -0.542144      -71.9928       71.9928       1770.80       1842.79    
  43  0.403805     -0.906823      -120.419       120.419       1747.07       1867.49    
  44  0.447829     -0.803344      -106.678       106.678       1775.45       1882.13    
  45  0.470604     -0.753737      -100.091       100.091       1719.19       1819.28    
  46  0.479088     -0.735871      -97.7182       97.7182       1666.68       1764.40    
  47  0.959223     -0.416322E-01  -5.52844       5.52844       1781.61       1787.14    
  48  0.527403     -0.639789      -84.9593       84.9593       1795.55       1880.51    
  49  0.731687     -0.312402      -41.4847       41.4847       1549.69       1591.18    
  50  0.682707     -0.381689      -50.6856       50.6856       1827.47       1878.15    
  51  0.386616     -0.950322      -126.196       126.196       1770.57       1896.76    
  52  0.120332      -2.11750      -281.189       281.189       1732.84       2014.02    
  53  0.285899      -1.25212      -166.272       166.272       1632.39       1798.66    
  54  0.798593     -0.224904      -29.8656       29.8656       1843.67       1873.53    
  55  0.305098      -1.18712      -157.641       157.641       1698.61       1856.25    
  56  0.274289      -1.29357      -171.777       171.777       1809.33       1981.11    
  57  0.805459     -0.216343      -28.7288       28.7288       1889.46       1918.19    
  58  0.665552     -0.407139      -54.0650       54.0650       1790.45       1844.52    
  59  0.721477     -0.326454      -43.3507       43.3507       1810.05       1853.40    
  60  0.563306     -0.573931      -76.2139       76.2139       1735.45       1811.67    
  61  0.253697      -1.37162      -182.141       182.141       1560.83       1742.97    
  62  0.714468     -0.336217      -44.6471       44.6471       1882.40       1927.05    
  63  0.106618      -2.23850      -297.257       297.257       1827.18       2124.43    
  64  0.116686      -2.14827      -285.274       285.274       1332.88       1618.15    
  65  0.856486     -0.154918      -20.5719       20.5719       1582.86       1603.43    
  66  0.895996     -0.109820      -14.5832       14.5832       1839.48       1854.06    
  67  0.112164      -2.18779      -290.522       290.522       1862.77       2153.29    
  68  0.573757     -0.555550      -73.7729       73.7729       1705.34       1779.11    
  69  0.376044     -0.978049      -129.878       129.878       1844.08       1973.96    
  70  0.779305     -0.249353      -33.1123       33.1123       1799.61       1832.72    
  71  0.815848E-01  -2.50611      -332.793       332.793       2078.96       2411.75    
  72  0.580028     -0.544678      -72.3292       72.3292       1608.08       1680.41    
  73  0.653056     -0.426093      -56.5820       56.5820       1331.35       1387.93    
  74  0.381298     -0.964173      -128.035       128.035       1405.23       1533.26    
loop,thermsimp(1:2)       28   194.204       10.7232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       1738.05        129.76          0.65         30.24          1.61          0.05        162.30
Just calling func    0   0        162.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1738.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       28
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       29
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      258     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -146.400       146.400       1119.26       1265.66    
   2  0.991191     -0.884791E-02  -1.17494       1.17494       1145.34       1146.51    
   3  0.752830     -0.283916      -37.7020       37.7020       1238.38       1276.09    
   4  0.718872     -0.330071      -43.8311       43.8311       1281.30       1325.13    
   5  0.362244      -1.01544      -134.843       134.843       1228.83       1363.67    
   6  0.993342E-01  -2.30927      -306.654       306.654       1207.13       1513.79    
   7  0.734379     -0.308729      -40.9970       40.9970       1331.35       1372.34    
   8  0.190509      -1.65806      -220.178       220.178       1407.55       1627.72    
   9  0.113713      -2.17408      -288.701       288.701       1226.27       1514.97    
  10  0.582158     -0.541014      -71.8426       71.8426       1240.71       1312.55    
  11  0.100405E-01  -4.60113      -610.996       610.996       1356.13       1967.13    
  12  0.614877     -0.486333      -64.5814       64.5814       1436.49       1501.07    
  13  0.996806     -0.319890E-02 -0.424791      0.424791       1347.44       1347.86    
  14  0.439871E-01  -3.12386      -414.826       414.826       1445.71       1860.54    
  15  0.610456     -0.493549      -65.5397       65.5397       1439.42       1504.96    
  16  0.676471     -0.390866      -51.9041       51.9041       1405.23       1457.13    
  17  0.263829      -1.33246      -176.940       176.940       1453.26       1630.20    
  18  0.761962     -0.271858      -36.1007       36.1007       1527.51       1563.61    
  19  0.405295     -0.903140      -119.930       119.930       1437.49       1557.42    
  20  0.184680      -1.68913      -224.304       224.304       1407.76       1632.07    
  21  0.695434     -0.363219      -48.2329       48.2329       1549.69       1597.93    
  22  0.597154     -0.515580      -68.4652       68.4652       1569.79       1638.25    
  23  0.254276      -1.36933      -181.837       181.837       1582.86       1764.69    
  24  0.777974     -0.251062      -33.3392       33.3392       1561.33       1594.67    
  25  0.597236     -0.515443      -68.4470       68.4470       1332.88       1401.32    
  26  0.658168     -0.418295      -55.5465       55.5465       1450.94       1506.48    
  27  0.917953     -0.856086E-01  -11.3682       11.3682       1614.33       1625.70    
  28  0.167567      -1.78637      -237.217       237.217       1412.16       1649.38    
  29  0.867739E-02  -4.74703      -630.371       630.371       1545.03       2175.40    
  30  0.157469      -1.84853      -245.471       245.471       1428.62       1674.10    
  31  0.947458     -0.539724E-01  -7.16714       7.16714       1506.58       1513.75    
  32  0.883772     -0.123556      -16.4073       16.4073       1608.08       1624.49    
  33  0.873100     -0.135705      -18.0206       18.0206       1519.51       1537.53    
  34  0.138043      -1.98019      -262.954       262.954       1581.32       1844.27    
  35  0.833185     -0.182500      -24.2346       24.2346       1555.06       1579.30    
  36  0.907894     -0.966275E-01  -12.8314       12.8314       1619.56       1632.39    
  37  0.858432     -0.152648      -20.2705       20.2705       1580.47       1600.74    
  38  0.192050      -1.65000      -219.108       219.108       1560.28       1779.39    
  39  0.890666     -0.115786      -15.3755       15.3755       1560.83       1576.21    
  40  0.389935     -0.941775      -125.061       125.061       1661.77       1786.83    
  41  0.842362     -0.171545      -22.7800       22.7800       1666.68       1689.46    
  42  0.143912      -1.93855      -257.425       257.425       1705.34       1962.77    
  43  0.678545     -0.387804      -51.4975       51.4975       1781.61       1833.11    
  44  0.621021     -0.476390      -63.2611       63.2611       1632.39       1695.65    
  45  0.533199     -0.628861      -83.5081       83.5081       1407.45       1490.96    
  46  0.891703     -0.114623      -15.2210       15.2210       1735.45       1750.67    
  47  0.675469     -0.392349      -52.1010       52.1010       1719.19       1771.29    
  48  0.757471     -0.277770      -36.8858       36.8858       1799.61       1836.49    
  49  0.855441     -0.156139      -20.7341       20.7341       1770.80       1791.53    
  50  0.737982     -0.303836      -40.3472       40.3472       1790.45       1830.80    
  51  0.630328     -0.461515      -61.2858       61.2858       1810.05       1871.34    
  52  0.701612     -0.354375      -47.0584       47.0584       1839.48       1886.54    
  53  0.161537E-01  -4.12561      -547.850       547.850       1698.61       2246.46    
  54  0.716145     -0.333873      -44.3358       44.3358       1747.07       1791.40    
  55  0.644842     -0.438751      -58.2629       58.2629       1843.67       1901.93    
  56  0.465420E-01  -3.06740      -407.328       407.328       1827.47       2234.79    
  57  0.644178     -0.439780      -58.3996       58.3996       1795.55       1853.95    
  58  0.297766      -1.21145      -160.871       160.871       1775.45       1936.32    
  59  0.877956     -0.130159      -17.2841       17.2841       1770.57       1787.85    
  60  0.373410     -0.985078      -130.811       130.811       1603.60       1734.41    
  61  0.162588      -1.81653      -241.222       241.222       1889.46       2130.68    
  62  0.634599     -0.454761      -60.3890       60.3890       1882.40       1942.79    
  63  0.762468     -0.271195      -36.0127       36.0127       1447.80       1483.81    
  64  0.237905      -1.43588      -190.675       190.675       1576.82       1767.50    
  65  0.473101     -0.748446      -99.3882       99.3882       1844.08       1943.47    
  66  0.156066      -1.85747      -246.659       246.659       1809.33       2055.99    
  67  0.992592     -0.743581E-02 -0.987421      0.987421       1732.84       1733.82    
  68  0.568078     -0.565496      -75.0937       75.0937       1389.10       1464.20    
  69  0.918090     -0.854598E-01  -11.3484       11.3484       1827.18       1838.52    
  70  0.561720     -0.576753      -76.5885       76.5885       1734.78       1811.37    
  71  0.649692E-01  -2.73384      -363.034       363.034       1862.77       2225.80    
  72  0.757920     -0.277177      -36.8071       36.8071       1637.85       1674.65    
  73  0.182763      -1.69956      -225.690       225.690       1448.61       1674.30    
  74  0.281733      -1.26680      -168.221       168.221       1738.05       1906.27    
loop,thermsimp(1:2)       29   146.400       1.17494    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260       1250.82        129.50          0.64         30.21          1.33          0.05        161.73
Just calling func    0   0        161.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    261       1261.97        129.12          0.63         30.20          1.59          0.05        161.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    1262.0        2.767     -1.033      3.887     -100.0     0.8305    
                     -0.8297      1.832     -100.0      3.124      1.710    
                      0.1244     0.5103      2.009      0.000     0.7401    
                      -1.089     -20.00      0.000      0.000     0.1824    

                      -2.669      5072.     0.1110E+05 -798.7     -1451.    
                      -3.565     -6.590     -5.249     -15.33     -5.168    
                      -11.43     -3.187     -1473.      0.000     -620.7    

                      -527.7      4591.      2241.      2497.      3642.    
                      -2732.    -0.2403    -0.3598      0.000    -0.2206    
                     -0.1818    -0.3879    -0.2996    -0.3293    -0.2616    

                     -0.7071     -2.324      1.382     0.2358E-01 0.3867E-01
                      0.8541E-01-0.7044E-01-0.1441    -0.1396    -0.3782E-02
                     -0.2197    -0.6973E-01-0.3752     -2.153      1.382    

                      -1.707     -1.553     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.964      8.805      0.000    -0.1628E-03
                      0.2315     0.4335      9.116      8.984    -0.1750E+05

                      0.4047E-03 0.4335     0.3475      9.705      9.129    
                     -0.1042E+05 0.5416E-05 -1.001     0.3226      9.391    
                       9.240     -4281.     0.1067E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1250.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       29
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       30
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      260     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -245.396       245.396       1145.34       1390.73    
   2  0.553200     -0.592035      -78.6179       78.6179       1119.26       1197.88    
   3  0.825049     -0.192313      -25.5377       25.5377       1238.38       1263.92    
   4  0.767336     -0.264830      -35.1675       35.1675       1240.71       1275.88    
   5  0.966534     -0.340385E-01  -4.52006       4.52006       1281.30       1285.82    
   6  0.954430     -0.466410E-01  -6.19358       6.19358       1347.44       1353.63    
   7  0.780674     -0.247598      -32.8792       32.8792       1228.83       1261.70    
   8  0.312863      -1.16199      -154.304       154.304       1331.35       1485.65    
   9  0.990226     -0.982218E-02  -1.30431       1.30431       1332.88       1334.18    
  10  0.893872     -0.112193      -14.8983       14.8983       1405.23       1420.13    
  11  0.322320      -1.13221      -150.349       150.349       1389.10       1539.45    
  12  0.927465     -0.752997E-01  -9.99925       9.99925       1447.80       1457.80    
  13  0.539466     -0.617176      -81.9564       81.9564       1407.45       1489.40    
  14  0.461474     -0.773330      -102.693       102.693       1436.49       1539.18    
  15  0.745701     -0.293430      -38.9654       38.9654       1439.42       1478.39    
  16  0.703580     -0.351573      -46.6863       46.6863       1450.94       1497.62    
  17  0.917420E-01  -2.38878      -317.212       317.212       1506.58       1823.79    
  18  0.671661     -0.398001      -52.8517       52.8517       1207.13       1259.98    
  19  0.845179     -0.168207      -22.3367       22.3367       1226.27       1248.61    
  20  0.283605E-01  -3.56276      -473.108       473.108       1519.51       1992.61    
  21  0.108883E-01  -4.52006      -600.231       600.231       1437.49       2037.72    
  22  0.506006     -0.681208      -90.4594       90.4594       1527.51       1617.97    
  23  0.353918      -1.03869      -137.931       137.931       1560.83       1698.76    
  24  0.656862     -0.420282      -55.8103       55.8103       1555.06       1610.87    
  25  0.691560     -0.368806      -48.9747       48.9747       1561.33       1610.30    
  26  0.445402     -0.808779      -107.400       107.400       1549.69       1657.09    
  27  0.832700     -0.183081      -24.3118       24.3118       1580.47       1604.78    
  28  0.963063     -0.376360E-01  -4.99779       4.99779       1608.08       1613.08    
  29  0.422212     -0.862247      -114.500       114.500       1614.33       1728.83    
  30  0.917895     -0.856720E-01  -11.3766       11.3766       1407.55       1418.92    
  31  0.767210     -0.264994      -35.1893       35.1893       1453.26       1488.44    
  32  0.360836      -1.01933      -135.360       135.360       1407.76       1543.12    
  33  0.635930     -0.452667      -60.1108       60.1108       1619.56       1679.67    
  34  0.687292     -0.374995      -49.7966       49.7966       1569.79       1619.58    
  35  0.833832     -0.181724      -24.1316       24.1316       1412.16       1436.30    
  36  0.362075      -1.01590      -134.905       134.905       1428.62       1563.53    
  37  0.385764     -0.952530      -126.489       126.489       1448.61       1575.10    
  38  0.752556     -0.284279      -37.7502       37.7502       1637.85       1675.60    
  39  0.547433     -0.602515      -80.0095       80.0095       1666.68       1746.69    
  40  0.171004      -1.76607      -234.521       234.521       1632.39       1866.91    
  41  0.159022      -1.83871      -244.167       244.167       1732.84       1977.00    
  42  0.850806     -0.161571      -21.4554       21.4554       1603.60       1625.06    
  43  0.926075     -0.768001E-01  -10.1985       10.1985       1735.45       1745.65    
  44  0.584885     -0.536340      -71.2220       71.2220       1582.86       1654.08    
  45  0.547650     -0.602120      -79.9570       79.9570       1576.82       1656.78    
  46  0.864296     -0.145840      -19.3665       19.3665       1719.19       1738.56    
  47  0.384639     -0.955450      -126.877       126.877       1560.28       1687.15    
  48  0.359776      -1.02227      -135.751       135.751       1661.77       1797.52    
  49  0.147032      -1.91711      -254.578       254.578       1770.57       2025.15    
  50  0.649806     -0.431082      -57.2445       57.2445       1747.07       1804.31    
  51  0.909946     -0.943695E-01  -12.5316       12.5316       1770.80       1783.33    
  52  0.740699     -0.300161      -39.8592       39.8592       1734.78       1774.64    
  53  0.959446     -0.413992E-01  -5.49751       5.49751       1790.45       1795.95    
  54  0.993892     -0.612654E-02 -0.813559      0.813559       1781.61       1782.42    
  55  0.499875     -0.693397      -92.0780       92.0780       1799.61       1891.68    
  56  0.716813     -0.332941      -44.2121       44.2121       1827.18       1871.39    
  57  0.586555     -0.533488      -70.8433       70.8433       1581.32       1652.16    
  58  0.687999     -0.373968      -49.6601       49.6601       1795.55       1845.21    
  59  0.238056      -1.43525      -190.591       190.591       1445.71       1636.30    
  60  0.842319     -0.171596      -22.7867       22.7867       1810.05       1832.84    
  61  0.559244     -0.581169      -77.1750       77.1750       1839.48       1916.65    
  62  0.596920     -0.515973      -68.5174       68.5174       1843.67       1912.19    
  63  0.266753      -1.32143      -175.477       175.477       1738.05       1913.53    
  64  0.681727     -0.383126      -50.8763       50.8763       1775.45       1826.33    
  65  0.401206E-01  -3.21587      -427.043       427.043       1882.40       2309.44    
  66  0.275178      -1.29034      -171.347       171.347       1844.08       2015.43    
  67  0.830963     -0.185171      -24.5893       24.5893       1705.34       1729.93    
  68  0.802444     -0.220093      -29.2267       29.2267       1356.13       1385.36    
  69  0.661893E-01  -2.71524      -360.563       360.563       1809.33       2169.90    
  70  0.865761E-01  -2.44673      -324.908       324.908       1889.46       2214.37    
  71  0.778264     -0.250689      -33.2897       33.2897       1545.03       1578.32    
  72  0.386768     -0.949931      -126.144       126.144       1862.77       1988.91    
  73  0.506835     -0.679569      -90.2418       90.2418       1827.47       1917.71    
  74  0.564048     -0.572615      -76.0391       76.0391       1250.82       1326.86    
loop,thermsimp(1:2)       30   245.396       78.6179    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       2181.36        129.93          0.69         30.46          0.45          0.05        161.57
Just calling func    0   0        161.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2181.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       30
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       31
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      261     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -170.226       170.226       1119.26       1289.49    
   2  0.202445      -1.59728      -212.108       212.108       1226.27       1438.38    
   3  0.927152     -0.756373E-01  -10.0441       10.0441       1207.13       1217.18    
   4  0.403144     -0.908460      -120.637       120.637       1228.83       1349.46    
   5  0.791838     -0.233398      -30.9936       30.9936       1238.38       1269.38    
   6  0.292576      -1.22903      -163.206       163.206       1240.71       1403.92    
   7  0.135578      -1.99821      -265.348       265.348       1281.30       1546.65    
   8  0.516570     -0.660545      -87.7156       87.7156       1250.82       1338.54    
   9  0.730579     -0.313918      -41.6860       41.6860       1332.88       1374.56    
  10  0.508248     -0.676786      -89.8722       89.8722       1347.44       1437.31    
  11  0.928455     -0.742338E-01  -9.85770       9.85770       1356.13       1365.99    
  12  0.696477     -0.361721      -48.0338       48.0338       1145.34       1193.37    
  13  0.465556     -0.764522      -101.523       101.523       1407.55       1509.07    
  14  0.194653      -1.63654      -217.320       217.320       1405.23       1622.55    
  15  0.650312     -0.430303      -57.1411       57.1411       1412.16       1469.31    
  16  0.555802     -0.587343      -77.9948       77.9948       1447.80       1525.79    
  17  0.985517     -0.145893E-01  -1.93735       1.93735       1439.42       1441.36    
  18  0.923066     -0.800544E-01  -10.6306       10.6306       1331.35       1341.98    
  19  0.658765     -0.417388      -55.4260       55.4260       1453.26       1508.68    
  20  0.197878      -1.62010      -215.138       215.138       1407.45       1622.59    
  21  0.449673     -0.799236      -106.133       106.133       1450.94       1557.07    
  22  0.208093      -1.56977      -208.454       208.454       1436.49       1644.95    
  23  0.102791      -2.27506      -302.111       302.111       1389.10       1691.22    
  24  0.650538     -0.429955      -57.0949       57.0949       1407.76       1464.86    
  25  0.223365      -1.49895      -199.049       199.049       1428.62       1627.67    
  26  0.520729     -0.652525      -86.6505       86.6505       1448.61       1535.26    
  27  0.919707E-01  -2.38629      -316.881       316.881       1545.03       1861.91    
  28  0.788427     -0.237716      -31.5669       31.5669       1580.47       1612.03    
  29  0.395754     -0.926961      -123.094       123.094       1561.33       1684.42    
  30  0.903388     -0.101603      -13.4922       13.4922       1555.06       1568.55    
  31  0.569415     -0.563145      -74.7815       74.7815       1608.08       1682.87    
  32  0.974677     -0.256496E-01  -3.40608       3.40608       1527.51       1530.92    
  33  0.376411     -0.977073      -129.748       129.748       1569.79       1699.54    
  34  0.309090      -1.17412      -155.915       155.915       1603.60       1759.52    
  35  0.248039      -1.39417      -185.136       185.136       1445.71       1630.85    
  36  0.941329     -0.604621E-01  -8.02892       8.02892       1581.32       1589.35    
  37  0.131879      -2.02587      -269.021       269.021       1582.86       1851.88    
  38  0.188022      -1.67120      -221.923       221.923       1576.82       1798.75    
  39  0.898649E-01  -2.40945      -319.957       319.957       1549.69       1869.65    
  40  0.853893     -0.157949      -20.9745       20.9745       1637.85       1658.82    
  41  0.643577     -0.440714      -58.5236       58.5236       1619.56       1678.08    
  42  0.664391     -0.408885      -54.2969       54.2969       1560.28       1614.57    
  43  0.825262     -0.192054      -25.5034       25.5034       1560.83       1586.34    
  44  0.611498     -0.491843      -65.3131       65.3131       1614.33       1679.65    
  45  0.284000      -1.25878      -167.157       167.157       1705.34       1872.50    
  46  0.108174      -2.22402      -295.333       295.333       1719.19       2014.53    
  47  0.293070      -1.22734      -162.982       162.982       1735.45       1898.43    
  48  0.412045     -0.886623      -117.737       117.737       1666.68       1784.42    
  49  0.464041     -0.767783      -101.956       101.956       1734.78       1836.74    
  50  0.711768     -0.340003      -45.1499       45.1499       1781.61       1826.76    
  51  0.919970     -0.834138E-01  -11.0767       11.0767       1770.80       1781.87    
  52  0.551321     -0.595437      -79.0697       79.0697       1790.45       1869.52    
  53  0.720690E-01  -2.63013      -349.262       349.262       1661.77       2011.03    
  54  0.788823     -0.237213      -31.5001       31.5001       1747.07       1778.57    
  55  0.339304      -1.08086      -143.530       143.530       1506.58       1650.11    
  56  0.824115     -0.193445      -25.6881       25.6881       1775.45       1801.14    
  57  0.564535     -0.571754      -75.9247       75.9247       1810.05       1885.97    
  58  0.608050     -0.497498      -66.0641       66.0641       1795.55       1861.62    
  59  0.696797     -0.361262      -47.9729       47.9729       1632.39       1680.36    
  60  0.287274      -1.24732      -165.635       165.635       1827.18       1992.81    
  61  0.302150E-01  -3.49942      -464.697       464.697       1799.61       2264.30    
  62  0.896370     -0.109402      -14.5278       14.5278       1843.67       1858.20    
  63  0.289059      -1.24112      -164.812       164.812       1738.05       1902.86    
  64  0.476596     -0.741086      -98.4107       98.4107       1839.48       1937.89    
  65  0.895851E-01  -2.41257      -320.371       320.371       1827.47       2147.84    
  66  0.864694     -0.145380      -19.3054       19.3054       1732.84       1752.14    
  67  0.222506      -1.50280      -199.561       199.561       1862.77       2062.33    
  68  0.800191     -0.222904      -29.6001       29.6001       1519.51       1549.11    
  69  0.332930      -1.09982      -146.048       146.048       1844.08       1990.13    
  70  0.616166     -0.484239      -64.3034       64.3034       1770.57       1834.87    
  71  0.560690E-01  -2.88117      -382.599       382.599       1437.49       1820.09    
  72  0.629756     -0.462422      -61.4062       61.4062       1809.33       1870.74    
  73  0.847024     -0.166026      -22.0471       22.0471       1889.46       1911.51    
  74  0.661200     -0.413699      -54.9362       54.9362       2181.36       2236.30    
loop,thermsimp(1:2)       31   170.226       212.108    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       1136.23        129.44          0.64         30.50          0.99          0.04        161.62
Just calling func    0   0        161.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    264       2493.73        129.17          0.68         30.69          0.64          0.05        161.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1136.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       31
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       32
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      263     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -47.1093       47.1093       1145.34       1192.45    
   2  0.779682     -0.248869      -33.0480       33.0480       1207.13       1240.18    
   3  0.611645     -0.491604      -65.2814       65.2814       1238.38       1303.67    
   4  0.380626     -0.965937      -128.269       128.269       1119.26       1247.53    
   5  0.986599     -0.134915E-01  -1.79157       1.79157       1250.82       1252.62    
   6  0.699021     -0.358075      -47.5497       47.5497       1331.35       1378.90    
   7  0.981217E-01  -2.32155      -308.284       308.284       1228.83       1537.11    
   8  0.221199      -1.50869      -200.343       200.343       1356.13       1556.48    
   9  0.802460     -0.220073      -29.2241       29.2241       1332.88       1362.10    
  10  0.623430     -0.472519      -62.7470       62.7470       1240.71       1303.46    
  11  0.669862     -0.400684      -53.2079       53.2079       1347.44       1400.65    
  12  0.957999     -0.429090E-01  -5.69800       5.69800       1226.27       1231.97    
  13  0.569879E-01  -2.86492      -380.440       380.440       1439.42       1819.86    
  14  0.245244      -1.40550      -186.640       186.640       1407.76       1594.40    
  15  0.870123     -0.139121      -18.4742       18.4742       1412.16       1430.64    
  16  0.429679     -0.844716      -112.172       112.172       1453.26       1565.43    
  17  0.369880     -0.994577      -132.072       132.072       1407.55       1539.62    
  18  0.964882     -0.357490E-01  -4.74721       4.74721       1447.80       1452.55    
  19  0.625983     -0.468432      -62.2043       62.2043       1527.51       1589.72    
  20  0.508652     -0.675991      -89.7666       89.7666       1448.61       1538.38    
  21  0.694697     -0.364279      -48.3736       48.3736       1281.30       1329.67    
  22  0.817819     -0.201114      -26.7064       26.7064       1519.51       1546.21    
  23  0.655732     -0.422003      -56.0389       56.0389       1450.94       1506.98    
  24  0.658757     -0.417401      -55.4277       55.4277       1555.06       1610.49    
  25  0.325934      -1.12106      -148.869       148.869       1560.83       1709.70    
  26  0.849137     -0.163535      -21.7162       21.7162       1581.32       1603.04    
  27  0.953435     -0.476843E-01  -6.33213       6.33213       1580.47       1586.80    
  28  0.435049     -0.832297      -110.523       110.523       1560.28       1670.80    
  29  0.155341E-01  -4.16472      -553.044       553.044       1405.23       1958.27    
  30  0.390095     -0.941364      -125.006       125.006       1407.45       1532.45    
  31  0.400867E-02  -5.51929      -732.922       732.922       1428.62       2161.55    
  32  0.989750     -0.103025E-01  -1.36810       1.36810       1445.71       1447.08    
  33  0.194149      -1.63913      -217.664       217.664       1436.49       1654.16    
  34  0.573547     -0.555915      -73.8214       73.8214       1506.58       1580.40    
  35  0.570216     -0.561740      -74.5949       74.5949       1637.85       1712.44    
  36  0.802122     -0.220494      -29.2800       29.2800       1619.56       1648.84    
  37  0.831214E-01  -2.48745      -330.315       330.315       1614.33       1944.65    
  38  0.280368      -1.27165      -168.866       168.866       1632.39       1801.26    
  39  0.568263     -0.565171      -75.0505       75.0505       1608.08       1683.13    
  40  0.570544     -0.561165      -74.5185       74.5185       1561.33       1635.85    
  41  0.524202     -0.645877      -85.7677       85.7677       1389.10       1474.87    
  42  0.625335E-01  -2.77205      -368.108       368.108       1569.79       1937.90    
  43  0.717146     -0.332476      -44.1504       44.1504       1732.84       1776.99    
  44  0.234175      -1.45169      -192.773       192.773       1603.60       1796.38    
  45  0.366320      -1.00425      -133.357       133.357       1747.07       1880.43    
  46  0.458915     -0.778891      -103.431       103.431       1770.80       1874.23    
  47  0.379536     -0.968806      -128.650       128.650       1666.68       1795.33    
  48  0.854466     -0.157278      -20.8854       20.8854       1576.82       1597.71    
  49  0.452738E-01  -3.09503      -410.997       410.997       1775.45       2186.45    
  50  0.966525     -0.340477E-01  -4.52128       4.52128       1437.49       1442.01    
  51  0.400949     -0.913920      -121.362       121.362       1781.61       1902.97    
  52  0.563096     -0.574305      -76.2635       76.2635       1770.57       1846.83    
  53  0.612298     -0.490536      -65.1396       65.1396       1734.78       1799.92    
  54  0.395518     -0.927559      -123.173       123.173       1582.86       1706.03    
  55  0.693522     -0.365972      -48.5983       48.5983       1843.67       1892.27    
  56  0.270894      -1.30603      -173.431       173.431       1795.55       1968.98    
  57  0.885600     -0.121490      -16.1330       16.1330       1545.03       1561.16    
  58  0.862297     -0.148155      -19.6739       19.6739       1790.45       1810.12    
  59  0.483017     -0.727702      -96.6335       96.6335       1549.69       1646.33    
  60  0.594400     -0.520203      -69.0791       69.0791       1809.33       1878.41    
  61  0.351664      -1.04508      -138.779       138.779       1705.34       1844.12    
  62  0.402505     -0.910048      -120.848       120.848       1810.05       1930.90    
  63  0.272240      -1.30107      -172.773       172.773       1735.45       1908.22    
  64  0.234792      -1.44906      -192.424       192.424       1738.05       1930.47    
  65  0.825709E-01  -2.49410      -331.198       331.198       1889.46       2220.66    
  66  0.636436     -0.451871      -60.0051       60.0051       1839.48       1899.48    
  67  0.942309     -0.594220E-01  -7.89080       7.89080       1844.08       1851.98    
  68  0.185829      -1.68293      -223.480       223.480       1827.18       2050.66    
  69  0.518004     -0.657773      -87.3474       87.3474       1661.77       1749.11    
  70  0.831797     -0.184167      -24.4560       24.4560       1719.19       1743.65    
  71  0.377117     -0.975199      -129.499       129.499       1862.77       1992.27    
  72  0.484710     -0.724205      -96.1691       96.1691       1827.47       1923.64    
  73  0.948059     -0.533383E-01  -7.08293       7.08293       2181.36       2188.44    
  74  0.325864      -1.12128      -148.897       148.897       1136.23       1285.12    
loop,thermsimp(1:2)       32   47.1093       33.0480    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265       3549.68        130.12          0.71         29.99          0.41          0.05        161.29
Just calling func    0   0        161.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266       1418.12        130.00          0.72         30.25          0.62          0.05        161.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1418.12
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       32
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       33
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      265     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -120.365       120.365       1145.34       1265.70    
   2  0.598662     -0.513057      -68.1302       68.1302       1226.27       1294.40    
   3  0.165178      -1.80073      -239.124       239.124       1207.13       1446.26    
   4  0.785331     -0.241651      -32.0894       32.0894       1119.26       1151.35    
   5  0.422061     -0.862604      -114.548       114.548       1250.82       1365.37    
   6  0.343624      -1.06821      -141.850       141.850       1136.23       1278.08    
   7  0.988862     -0.112001E-01  -1.48729       1.48729       1240.71       1242.20    
   8  0.586093E-01  -2.83686      -376.714       376.714       1238.38       1615.10    
   9  0.324880      -1.12430      -149.299       149.299       1281.30       1430.60    
  10  0.869373     -0.139983      -18.5887       18.5887       1332.88       1351.46    
  11  0.314362      -1.15721      -153.669       153.669       1331.35       1485.02    
  12  0.635265     -0.453712      -60.2497       60.2497       1347.44       1407.69    
  13  0.800738     -0.222221      -29.5093       29.5093       1412.16       1441.67    
  14  0.234515      -1.45024      -192.581       192.581       1437.49       1630.07    
  15  0.818766     -0.199957      -26.5528       26.5528       1445.71       1472.26    
  16  0.480807     -0.732289      -97.2425       97.2425       1447.80       1545.04    
  17  0.173083      -1.75398      -232.916       232.916       1389.10       1622.02    
  18  0.544835     -0.607272      -80.6413       80.6413       1450.94       1531.58    
  19  0.955728     -0.452816E-01  -6.01306       6.01306       1407.45       1413.46    
  20  0.909631     -0.947157E-01  -12.5776       12.5776       1228.83       1241.40    
  21  0.538276     -0.619384      -82.2496       82.2496       1448.61       1530.86    
  22  0.640373     -0.445705      -59.1863       59.1863       1407.55       1466.73    
  23  0.588429     -0.530300      -70.4199       70.4199       1519.51       1589.93    
  24  0.954392     -0.466804E-01  -6.19881       6.19881       1356.13       1362.33    
  25  0.976738     -0.235363E-01  -3.12545       3.12545       1545.03       1548.16    
  26  0.801897     -0.220775      -29.3173       29.3173       1453.26       1482.57    
  27  0.679499     -0.386400      -51.3111       51.3111       1506.58       1557.89    
  28  0.303686      -1.19176      -158.257       158.257       1580.47       1738.72    
  29  0.907562     -0.969936E-01  -12.8800       12.8800       1527.51       1540.39    
  30  0.117971E-01  -4.43990      -589.587       589.587       1407.76       1997.35    
  31  0.324683      -1.12491      -149.379       149.379       1576.82       1726.20    
  32  0.662106     -0.412329      -54.7543       54.7543       1581.32       1636.07    
  33  0.334080      -1.09637      -145.590       145.590       1555.06       1700.65    
  34  0.307577      -1.17903      -156.567       156.567       1561.33       1717.89    
  35  0.539029     -0.617986      -82.0640       82.0640       1549.69       1631.76    
  36  0.822737     -0.195119      -25.9104       25.9104       1619.56       1645.47    
  37  0.973480     -0.268776E-01  -3.56915       3.56915       1436.49       1440.06    
  38  0.918970     -0.845018E-01  -11.2212       11.2212       1560.28       1571.50    
  39  0.203072      -1.59419      -211.697       211.697       1608.08       1819.78    
  40  0.467655     -0.760024      -100.926       100.926       1582.86       1683.78    
  41  0.323145      -1.12965      -150.010       150.010       1560.83       1710.84    
  42  0.505961     -0.681295      -90.4710       90.4710       1637.85       1728.32    
  43  0.699853E-01  -2.65947      -353.158       353.158       1719.19       2072.35    
  44  0.188263      -1.66991      -221.752       221.752       1661.77       1883.52    
  45  0.663178     -0.410711      -54.5394       54.5394       1732.84       1787.37    
  46  0.680233     -0.385320      -51.1676       51.1676       1666.68       1717.85    
  47  0.717812     -0.331548      -44.0271       44.0271       1603.60       1647.63    
  48  0.319374      -1.14139      -151.569       151.569       1734.78       1886.35    
  49  0.667076     -0.404851      -53.7612       53.7612       1632.39       1686.15    
  50  0.755360     -0.280560      -37.2564       37.2564       1790.45       1827.71    
  51  0.105804      -2.24617      -298.275       298.275       1439.42       1737.70    
  52  0.432752     -0.837590      -111.226       111.226       1705.34       1816.57    
  53  0.258710      -1.35205      -179.542       179.542       1770.57       1950.11    
  54  0.826410     -0.190665      -25.3189       25.3189       1844.08       1869.40    
  55  0.958430     -0.424590E-01  -5.63824       5.63824       1770.80       1776.43    
  56  0.898442     -0.107093      -14.2211       14.2211       1809.33       1823.55    
  57  0.794924     -0.229509      -30.4771       30.4771       1747.07       1777.55    
  58  0.191148      -1.65471      -219.733       219.733       1843.67       2063.40    
  59  0.920959     -0.823397E-01  -10.9341       10.9341       1839.48       1850.41    
  60  0.239714      -1.42831      -189.669       189.669       1781.61       1971.28    
  61  0.337561      -1.08601      -144.214       144.214       1735.45       1879.67    
  62  0.229537      -1.47169      -195.430       195.430       1827.47       2022.90    
  63  0.518941     -0.655965      -87.1073       87.1073       1738.05       1825.16    
  64  0.565096     -0.570759      -75.7926       75.7926       1810.05       1885.84    
  65  0.934648     -0.675849E-01  -8.97478       8.97478       1569.79       1578.76    
  66  0.699822     -0.356929      -47.3976       47.3976       1614.33       1661.73    
  67  0.614954     -0.486208      -64.5649       64.5649       1405.23       1469.79    
  68  0.137942      -1.98092      -263.052       263.052       1795.55       2058.60    
  69  0.565370     -0.570275      -75.7284       75.7284       1862.77       1938.50    
  70  0.290261E-01  -3.53956      -470.027       470.027       1827.18       2297.20    
  71  0.538956     -0.618121      -82.0819       82.0819       1428.62       1510.71    
  72  0.354440      -1.03722      -137.735       137.735       1775.45       1913.19    
  73  0.751241E-01  -2.58861      -343.749       343.749       2181.36       2525.11    
  74  0.811885     -0.208396      -27.6735       27.6735       1418.12       1445.79    
loop,thermsimp(1:2)       33   120.365       68.1302    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267       1848.25        129.79          0.66         30.25          0.94          0.05        161.69
Just calling func    0   0        161.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1848.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       33
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       34
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      266     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -195.785       195.785       1119.26       1315.05    
   2  0.299376      -1.20605      -160.155       160.155       1228.83       1388.98    
   3  0.220114      -1.51361      -200.996       200.996       1240.71       1441.71    
   4  0.229209      -1.47312      -195.620       195.620       1145.34       1340.96    
   5  0.902477     -0.102612      -13.6262       13.6262       1136.23       1149.85    
   6  0.659052     -0.416953      -55.3683       55.3683       1226.27       1281.64    
   7  0.100321E-01  -4.60197      -611.108       611.108       1332.88       1943.98    
   8  0.588837     -0.529606      -70.3277       70.3277       1356.13       1426.46    
   9  0.270943      -1.30585      -173.407       173.407       1250.82       1424.23    
  10  0.505518     -0.682171      -90.5873       90.5873       1347.44       1438.02    
  11  0.264565      -1.32967      -176.570       176.570       1407.45       1584.02    
  12  0.806386     -0.215193      -28.5761       28.5761       1281.30       1309.88    
  13  0.340560      -1.07716      -143.039       143.039       1436.49       1579.53    
  14  0.906186     -0.985106E-01  -13.0815       13.0815       1412.16       1425.25    
  15  0.786070     -0.240709      -31.9644       31.9644       1418.12       1450.08    
  16  0.540508     -0.615247      -81.7002       81.7002       1207.13       1288.83    
  17  0.935065     -0.671392E-01  -8.91559       8.91559       1407.55       1416.46    
  18  0.915359     -0.884391E-01  -11.7441       11.7441       1405.23       1416.97    
  19  0.958261     -0.426353E-01  -5.66165       5.66165       1445.71       1451.37    
  20  0.935110     -0.670907E-01  -8.90916       8.90916       1453.26       1462.16    
  21  0.637755     -0.449800      -59.7302       59.7302       1331.35       1391.08    
  22  0.975714     -0.245861E-01  -3.26486       3.26486       1428.62       1431.89    
  23  0.797424     -0.226369      -30.0602       30.0602       1448.61       1478.67    
  24  0.214179      -1.54094      -204.626       204.626       1450.94       1655.56    
  25  0.372145     -0.988472      -131.262       131.262       1527.51       1658.78    
  26  0.925208     -0.777367E-01  -10.3229       10.3229       1447.80       1458.12    
  27  0.175897      -1.73786      -230.774       230.774       1545.03       1775.80    
  28  0.952033     -0.491554E-01  -6.52747       6.52747       1506.58       1513.11    
  29  0.158274E-01  -4.14601      -550.560       550.560       1560.28       2110.84    
  30  0.799308     -0.224008      -29.7467       29.7467       1569.79       1599.53    
  31  0.248227      -1.39341      -185.035       185.035       1519.51       1704.54    
  32  0.244914      -1.40685      -186.819       186.819       1238.38       1425.20    
  33  0.390842     -0.939452      -124.752       124.752       1389.10       1513.86    
  34  0.146784      -1.91879      -254.802       254.802       1437.49       1692.29    
  35  0.500975     -0.691199      -91.7861       91.7861       1549.69       1641.48    
  36  0.480131E-01  -3.03628      -403.196       403.196       1581.32       1984.51    
  37  0.124503      -2.08343      -276.664       276.664       1619.56       1896.22    
  38  0.670304     -0.400024      -53.1203       53.1203       1603.60       1656.72    
  39  0.997449     -0.255468E-02 -0.339243      0.339243       1614.33       1614.67    
  40  0.681761     -0.383076      -50.8696       50.8696       1582.86       1633.73    
  41  0.440529     -0.819778      -108.860       108.860       1632.39       1741.25    
  42  0.342489      -1.07152      -142.290       142.290       1555.06       1697.35    
  43  0.735753     -0.306861      -40.7489       40.7489       1560.83       1601.58    
  44  0.614752     -0.486537      -64.6085       64.6085       1666.68       1731.29    
  45  0.351660      -1.04509      -138.780       138.780       1561.33       1700.11    
  46  0.777165     -0.252103      -33.4774       33.4774       1576.82       1610.30    
  47  0.392618     -0.934919      -124.150       124.150       1637.85       1762.00    
  48  0.385647     -0.952832      -126.529       126.529       1439.42       1565.95    
  49  0.834392     -0.181052      -24.0424       24.0424       1580.47       1604.51    
  50  0.469158     -0.756815      -100.499       100.499       1770.80       1871.30    
  51  0.697320     -0.360511      -47.8732       47.8732       1747.07       1794.94    
  52  0.987150     -0.129333E-01  -1.71744       1.71744       1732.84       1734.55    
  53  0.512413     -0.668624      -88.7884       88.7884       1705.34       1794.13    
  54  0.781282     -0.246819      -32.7758       32.7758       1608.08       1640.86    
  55  0.290579      -1.23588      -164.116       164.116       1809.33       1973.45    
  56  0.921499     -0.817534E-01  -10.8562       10.8562       1738.05       1748.91    
  57  0.198558      -1.61668      -214.683       214.683       1790.45       2005.13    
  58  0.488340     -0.716743      -95.1782       95.1782       1839.48       1934.65    
  59  0.874587     -0.134003      -17.7947       17.7947       1844.08       1861.88    
  60  0.165334      -1.79979      -238.999       238.999       1735.45       1974.45    
  61  0.712283     -0.339280      -45.0538       45.0538       1661.77       1706.82    
  62  0.578012E-01  -2.85075      -378.558       378.558       1810.05       2188.61    
  63  0.700556     -0.355880      -47.2583       47.2583       1734.78       1782.04    
  64  0.502101     -0.688954      -91.4880       91.4880       1775.45       1866.94    
  65  0.730977E-02  -4.91854      -653.146       653.146       1862.77       2515.92    
  66  0.986830     -0.132576E-01  -1.76051       1.76051       1770.57       1772.33    
  67  0.264041      -1.33165      -176.833       176.833       1781.61       1958.44    
  68  0.184096      -1.69230      -224.725       224.725       1407.76       1632.49    
  69  0.683389     -0.380691      -50.5530       50.5530       1827.47       1878.02    
  70  0.934635     -0.675991E-01  -8.97666       8.97666       1795.55       1804.53    
  71  0.974376     -0.259579E-01  -3.44701       3.44701       1843.67       1847.11    
  72  0.210957      -1.55610      -206.639       206.639       1719.19       1925.83    
  73  0.730997     -0.313347      -41.6101       41.6101       1827.18       1868.79    
  74  0.126848      -2.06477      -274.186       274.186       1848.25       2122.44    
loop,thermsimp(1:2)       34   195.785       160.155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       1750.92        129.45          0.66         30.65          0.59          0.05        161.41
Just calling func    0   0        161.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1750.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       34
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       35
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      267     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -140.461       140.461       1136.23       1276.69    
   2  0.621479     -0.475653      -63.1633       63.1633       1226.27       1289.44    
   3  0.221273      -1.50836      -200.299       200.299       1207.13       1407.43    
   4  0.180626E-01  -4.01391      -533.018       533.018       1281.30       1814.32    
   5  0.216093      -1.53205      -203.445       203.445       1119.26       1322.71    
   6  0.351343      -1.04599      -138.900       138.900       1145.34       1284.24    
   7  0.360847      -1.01930      -135.356       135.356       1228.83       1364.18    
   8  0.439525     -0.822061      -109.164       109.164       1331.35       1440.51    
   9  0.910616E-01  -2.39622      -318.200       318.200       1407.55       1725.75    
  10  0.549745     -0.598300      -79.4499       79.4499       1405.23       1484.68    
  11  0.619825     -0.478318      -63.5171       63.5171       1250.82       1314.34    
  12  0.548169E-01  -2.90376      -385.597       385.597       1238.38       1623.98    
  13  0.947163     -0.542842E-01  -7.20855       7.20855       1412.16       1419.37    
  14  0.725459     -0.320951      -42.6199       42.6199       1356.13       1398.75    
  15  0.481613     -0.730615      -97.0203       97.0203       1428.62       1525.64    
  16  0.866286     -0.143540      -19.0611       19.0611       1347.44       1366.50    
  17  0.221988E-01  -3.80772      -505.637       505.637       1240.71       1746.35    
  18  0.980823     -0.193630E-01  -2.57127       2.57127       1418.12       1420.69    
  19  0.332549      -1.10097      -146.200       146.200       1445.71       1591.91    
  20  0.989035     -0.110256E-01  -1.46412       1.46412       1447.80       1449.26    
  21  0.364016      -1.01056      -134.195       134.195       1453.26       1587.45    
  22  0.861799     -0.148733      -19.7507       19.7507       1448.61       1468.36    
  23  0.622306     -0.474324      -62.9867       62.9867       1506.58       1569.57    
  24  0.575476     -0.552558      -73.3756       73.3756       1389.10       1462.48    
  25  0.205536      -1.58213      -210.096       210.096       1439.42       1649.52    
  26  0.124037      -2.08718      -277.162       277.162       1436.49       1713.65    
  27  0.467008     -0.761408      -101.109       101.109       1407.45       1508.56    
  28  0.273870      -1.29510      -171.980       171.980       1569.79       1741.77    
  29  0.842780     -0.171050      -22.7141       22.7141       1560.83       1583.55    
  30  0.709315     -0.343455      -45.6083       45.6083       1580.47       1626.07    
  31  0.677144     -0.389871      -51.7720       51.7720       1576.82       1628.60    
  32  0.656062     -0.421500      -55.9721       55.9721       1614.33       1670.30    
  33  0.721592     -0.326295      -43.3296       43.3296       1407.76       1451.09    
  34  0.120172      -2.11883      -281.366       281.366       1582.86       1864.22    
  35  0.832403     -0.183439      -24.3593       24.3593       1608.08       1632.44    
  36  0.607577     -0.498276      -66.1674       66.1674       1549.69       1615.86    
  37  0.169814      -1.77305      -235.448       235.448       1450.94       1686.39    
  38  0.578085     -0.548034      -72.7749       72.7749       1603.60       1676.38    
  39  0.201144      -1.60373      -212.964       212.964       1527.51       1740.48    
  40  0.922823     -0.803178E-01  -10.6656       10.6656       1437.49       1448.16    
  41  0.136644      -1.99038      -264.307       264.307       1555.06       1819.37    
  42  0.836366     -0.178689      -23.7285       23.7285       1561.33       1585.06    
  43  0.590669     -0.526499      -69.9152       69.9152       1519.51       1589.42    
  44  0.745946     -0.293102      -38.9218       38.9218       1661.77       1700.69    
  45  0.874736     -0.133833      -17.7720       17.7720       1666.68       1684.45    
  46  0.370232     -0.993625      -131.946       131.946       1732.84       1864.78    
  47  0.832293     -0.183570      -24.3768       24.3768       1632.39       1656.77    
  48  0.351566      -1.04536      -138.816       138.816       1738.05       1876.87    
  49  0.705870     -0.348324      -46.2549       46.2549       1637.85       1684.10    
  50  0.323816      -1.12758      -149.734       149.734       1770.57       1920.30    
  51  0.197269      -1.62319      -215.547       215.547       1545.03       1760.58    
  52  0.140686      -1.96123      -260.437       260.437       1734.78       1995.22    
  53  0.913651     -0.903067E-01  -11.9921       11.9921       1705.34       1717.33    
  54  0.515699     -0.662233      -87.9396       87.9396       1747.07       1835.01    
  55  0.217669      -1.52478      -202.480       202.480       1795.55       1998.03    
  56  0.234146      -1.45181      -192.790       192.790       1843.67       2036.46    
  57  0.948303     -0.530813E-01  -7.04880       7.04880       1844.08       1851.13    
  58  0.165683      -1.79768      -238.718       238.718       1775.45       2014.17    
  59  0.506186     -0.680851      -90.4120       90.4120       1827.18       1917.59    
  60  0.644381     -0.439466      -58.3578       58.3578       1770.80       1829.15    
  61  0.790610     -0.234950      -31.1996       31.1996       1827.47       1858.67    
  62  0.945427     -0.561185E-01  -7.45213       7.45213       1619.56       1627.01    
  63  0.195494      -1.63222      -216.747       216.747       1719.19       1935.94    
  64  0.478914     -0.736235      -97.7666       97.7666       1839.48       1937.24    
  65  0.926031     -0.768470E-01  -10.2047       10.2047       1332.88       1343.08    
  66  0.945712     -0.558175E-01  -7.41215       7.41215       1781.61       1789.02    
  67  0.892862     -0.113323      -15.0485       15.0485       1809.33       1824.38    
  68  0.766967     -0.265312      -35.2315       35.2315       1735.45       1770.68    
  69  0.720632     -0.327626      -43.5064       43.5064       1581.32       1624.83    
  70  0.404614     -0.904821      -120.154       120.154       1790.45       1910.60    
  71  0.799730     -0.223481      -29.6766       29.6766       1560.28       1589.95    
  72  0.442243     -0.815895      -108.345       108.345       1848.25       1956.60    
  73  0.662526     -0.411695      -54.6701       54.6701       1810.05       1864.72    
  74  0.720492     -0.327821      -43.5322       43.5322       1750.92       1794.46    
loop,thermsimp(1:2)       35   140.461       63.1633    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       1251.99        129.80          0.66         30.34          0.85          0.04        161.69
Just calling func    0   0        161.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270       1244.63        129.96          0.70         29.77          1.36          0.05        161.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1244.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       35
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       36
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      269     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -193.036       193.036       1136.23       1329.26    
   2  0.607568     -0.498291      -66.1694       66.1694       1145.34       1211.51    
   3  0.905785     -0.989529E-01  -13.1402       13.1402       1226.27       1239.41    
   4  0.995938E-01  -2.30666      -306.307       306.307       1250.82       1557.13    
   5  0.851360     -0.160920      -21.3690       21.3690       1119.26       1140.63    
   6  0.730583     -0.313913      -41.6853       41.6853       1332.88       1374.56    
   7  0.426216     -0.852810      -113.247       113.247       1228.83       1342.07    
   8  0.285108      -1.25489      -166.640       166.640       1347.44       1514.08    
   9  0.839246     -0.175251      -23.2721       23.2721       1356.13       1379.41    
  10  0.217639      -1.52492      -202.498       202.498       1207.13       1409.63    
  11  0.183996E-02  -6.29801      -836.330       836.330       1412.16       2248.49    
  12  0.682631     -0.381801      -50.7004       50.7004       1418.12       1468.82    
  13  0.203596      -1.59162      -211.355       211.355       1331.35       1542.70    
  14  0.881164     -0.126512      -16.7999       16.7999       1437.49       1454.29    
  15  0.711431     -0.340477      -45.2128       45.2128       1447.80       1493.01    
  16  0.874326     -0.134302      -17.8343       17.8343       1407.76       1425.60    
  17  0.814222     -0.205523      -27.2919       27.2919       1389.10       1416.40    
  18  0.995668     -0.434126E-02 -0.576488      0.576488       1448.61       1449.19    
  19  0.693805     -0.365564      -48.5443       48.5443       1405.23       1453.77    
  20  0.958584     -0.422984E-01  -5.61692       5.61692       1407.45       1413.06    
  21  0.748022     -0.290323      -38.5528       38.5528       1428.62       1467.18    
  22  0.696703     -0.361396      -47.9908       47.9908       1506.58       1554.57    
  23  0.732990     -0.310623      -41.2485       41.2485       1560.83       1602.08    
  24  0.534749     -0.625958      -83.1226       83.1226       1561.33       1644.45    
  25  0.691641     -0.368688      -48.9591       48.9591       1453.26       1502.21    
  26  0.300458      -1.20245      -159.676       159.676       1519.51       1679.18    
  27  0.977116     -0.231502E-01  -3.07418       3.07418       1560.28       1563.35    
  28  0.542581     -0.611418      -81.1919       81.1919       1445.71       1526.90    
  29  0.266111      -1.32384      -175.796       175.796       1549.69       1725.49    
  30  0.692298     -0.367738      -48.8329       48.8329       1238.38       1287.22    
  31  0.664047     -0.409403      -54.3657       54.3657       1581.32       1635.68    
  32  0.542186     -0.612146      -81.2885       81.2885       1580.47       1661.75    
  33  0.362243      -1.01544      -134.843       134.843       1619.56       1754.40    
  34  0.578658     -0.547044      -72.6434       72.6434       1576.82       1649.47    
  35  0.489298     -0.714783      -94.9179       94.9179       1608.08       1703.00    
  36  0.617485     -0.482100      -64.0194       64.0194       1439.42       1503.44    
  37  0.368651     -0.997905      -132.514       132.514       1632.39       1764.91    
  38  0.198936      -1.61477      -214.430       214.430       1614.33       1828.76    
  39  0.505263     -0.682676      -90.6544       90.6544       1603.60       1694.26    
  40  0.983997     -0.161325E-01  -2.14228       2.14228       1637.85       1639.99    
  41  0.630553     -0.461159      -61.2385       61.2385       1666.68       1727.92    
  42  0.423821E-01  -3.16103      -419.761       419.761       1450.94       1870.70    
  43  0.488935     -0.715526      -95.0166       95.0166       1661.77       1756.78    
  44  0.402078     -0.911110      -120.989       120.989       1436.49       1557.48    
  45  0.380878     -0.965277      -128.182       128.182       1705.34       1833.52    
  46  0.260585E-01  -3.64741      -484.349       484.349       1407.55       1891.90    
  47  0.681660     -0.383224      -50.8893       50.8893       1527.51       1578.40    
  48  0.489074     -0.715241      -94.9787       94.9787       1569.79       1664.77    
  49  0.752363     -0.284536      -37.7843       37.7843       1240.71       1278.50    
  50  0.978934     -0.212911E-01  -2.82731       2.82731       1545.03       1547.86    
  51  0.297789      -1.21137      -160.861       160.861       1735.45       1896.31    
  52  0.551604     -0.594926      -79.0018       79.0018       1781.61       1860.61    
  53  0.546413     -0.604381      -80.2574       80.2574       1750.92       1831.18    
  54  0.831880     -0.184067      -24.4427       24.4427       1281.30       1305.74    
  55  0.873708     -0.135010      -17.9283       17.9283       1555.06       1572.99    
  56  0.169447      -1.77521      -235.735       235.735       1809.33       2045.07    
  57  0.434000     -0.834712      -110.844       110.844       1770.80       1881.64    
  58  0.506119     -0.680984      -90.4296       90.4296       1747.07       1837.50    
  59  0.168470      -1.78100      -236.503       236.503       1844.08       2080.59    
  60  0.820014     -0.198433      -26.3505       26.3505       1827.47       1853.82    
  61  0.973689     -0.266631E-01  -3.54066       3.54066       1582.86       1586.40    
  62  0.438579     -0.824215      -109.450       109.450       1810.05       1919.50    
  63  0.725095     -0.321452      -42.6865       42.6865       1732.84       1775.52    
  64  0.857338     -0.153923      -20.4399       20.4399       1738.05       1758.49    
  65  0.363865      -1.01097      -134.250       134.250       1790.45       1924.70    
  66  0.391136     -0.938701      -124.653       124.653       1827.18       1951.83    
  67  0.949080     -0.522625E-01  -6.94008       6.94008       1770.57       1777.51    
  68  0.791138     -0.234283      -31.1111       31.1111       1719.19       1750.30    
  69  0.675448     -0.392379      -52.1050       52.1050       1839.48       1891.58    
  70  0.955283     -0.457479E-01  -6.07499       6.07499       1848.25       1854.33    
  71  0.307295E-01  -3.48253      -462.455       462.455       1734.78       2197.24    
  72  0.581651E-01  -2.84447      -377.725       377.725       1795.55       2173.28    
  73  0.422976E-02  -5.46561      -725.793       725.793       1775.45       2501.25    
  74  0.221744      -1.50623      -200.017       200.017       1244.63       1444.65    
loop,thermsimp(1:2)       36   193.036       66.1694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271       1684.80        129.70          0.68         30.22          0.99          0.05        161.63
Just calling func    0   0        161.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1684.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       36
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       37
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      270     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -117.977       117.977       1119.26       1237.24    
   2  0.697205     -0.360676      -47.8951       47.8951       1145.34       1193.23    
   3  0.314648E-01  -3.45889      -459.315       459.315       1226.27       1685.59    
   4  0.857269     -0.154003      -20.4505       20.4505       1240.71       1261.16    
   5  0.652165     -0.427457      -56.7632       56.7632       1238.38       1295.15    
   6  0.510145     -0.673060      -89.3774       89.3774       1281.30       1370.68    
   7  0.175175      -1.74197      -231.320       231.320       1136.23       1367.55    
   8  0.373803     -0.984025      -130.671       130.671       1228.83       1359.50    
   9  0.514972     -0.663642      -88.1268       88.1268       1332.88       1421.00    
  10  0.548235     -0.601051      -79.8151       79.8151       1356.13       1435.95    
  11  0.541310     -0.613763      -81.5033       81.5033       1207.13       1288.64    
  12  0.734083     -0.309133      -41.0505       41.0505       1407.45       1448.50    
  13  0.422599     -0.861332      -114.379       114.379       1389.10       1503.48    
  14  0.287055      -1.24808      -165.736       165.736       1407.76       1573.50    
  15  0.885133     -0.122017      -16.2030       16.2030       1244.63       1260.83    
  16  0.391075     -0.938857      -124.673       124.673       1448.61       1573.29    
  17  0.473784     -0.747003      -99.1965       99.1965       1405.23       1504.42    
  18  0.691812     -0.368440      -48.9262       48.9262       1437.49       1486.42    
  19  0.644447     -0.439363      -58.3442       58.3442       1428.62       1486.97    
  20  0.805933     -0.215754      -28.6506       28.6506       1418.12       1446.77    
  21  0.393766     -0.931998      -123.763       123.763       1447.80       1571.56    
  22  0.907098E-01  -2.40009      -318.714       318.714       1453.26       1771.97    
  23  0.376515     -0.976796      -129.711       129.711       1439.42       1569.13    
  24  0.819190     -0.199439      -26.4841       26.4841       1347.44       1373.92    
  25  0.692438     -0.367536      -48.8061       48.8061       1445.71       1494.52    
  26  0.188370      -1.66935      -221.677       221.677       1331.35       1553.02    
  27  0.500532     -0.692083      -91.9036       91.9036       1545.03       1636.93    
  28  0.282311      -1.26475      -167.949       167.949       1506.58       1674.53    
  29  0.338061      -1.08453      -144.017       144.017       1250.82       1394.84    
  30  0.466208     -0.763123      -101.337       101.337       1436.49       1537.83    
  31  0.893084     -0.113075      -15.0155       15.0155       1560.28       1575.29    
  32  0.818806     -0.199908      -26.5464       26.5464       1555.06       1581.61    
  33  0.585066     -0.536031      -71.1810       71.1810       1527.51       1598.69    
  34  0.527412     -0.639774      -84.9573       84.9573       1582.86       1667.81    
  35  0.994295     -0.572143E-02 -0.759764      0.759764       1560.83       1561.59    
  36  0.739278     -0.302082      -40.1142       40.1142       1581.32       1621.43    
  37  0.230995      -1.46536      -194.589       194.589       1637.85       1832.43    
  38  0.414929     -0.879648      -116.811       116.811       1561.33       1678.14    
  39  0.378446     -0.971682      -129.032       129.032       1576.82       1705.86    
  40  0.368620     -0.997990      -132.526       132.526       1580.47       1712.99    
  41  0.301312      -1.19961      -159.299       159.299       1569.79       1729.09    
  42  0.105882E-01  -4.54801      -603.943       603.943       1519.51       2123.45    
  43  0.481885     -0.730049      -96.9452       96.9452       1603.60       1700.55    
  44  0.446716     -0.805833      -107.009       107.009       1608.08       1715.09    
  45  0.482098     -0.729608      -96.8866       96.8866       1549.69       1646.58    
  46  0.278892      -1.27693      -169.567       169.567       1666.68       1836.25    
  47  0.756484     -0.279074      -37.0590       37.0590       1719.19       1756.25    
  48  0.662766     -0.411334      -54.6221       54.6221       1619.56       1674.18    
  49  0.433861E-01  -3.13762      -416.652       416.652       1661.77       2078.42    
  50  0.825649E-02  -4.79676      -636.974       636.974       1738.05       2375.02    
  51  0.476679     -0.740911      -98.3876       98.3876       1632.39       1730.78    
  52  0.128614      -2.05094      -272.349       272.349       1732.84       2005.18    
  53  0.609086     -0.495797      -65.8381       65.8381       1770.57       1836.41    
  54  0.484878E-01  -3.02644      -401.889       401.889       1614.33       2016.22    
  55  0.287383E-02  -5.85211      -777.117       777.117       1750.92       2528.04    
  56  0.699724     -0.357070      -47.4163       47.4163       1705.34       1752.76    
  57  0.407524     -0.897655      -119.202       119.202       1747.07       1866.27    
  58  0.530107     -0.634677      -84.2805       84.2805       1827.47       1911.75    
  59  0.589469E-01  -2.83112      -375.952       375.952       1848.25       2224.21    
  60  0.357066E-01  -3.33242      -442.521       442.521       1781.61       2224.13    
  61  0.726760     -0.319159      -42.3820       42.3820       1450.94       1493.32    
  62  0.486103     -0.721334      -95.7879       95.7879       1770.80       1866.58    
  63  0.212811      -1.54735      -205.477       205.477       1839.48       2044.95    
  64  0.264725      -1.32906      -176.490       176.490       1407.55       1584.04    
  65  0.162129      -1.81936      -241.598       241.598       1735.45       1977.05    
  66  0.148935      -1.90425      -252.870       252.870       1810.05       2062.92    
  67  0.271622      -1.30334      -173.075       173.075       1790.45       1963.53    
  68  0.965736     -0.348643E-01  -4.62972       4.62972       1827.18       1831.81    
  69  0.659377     -0.416460      -55.3028       55.3028       1809.33       1864.63    
  70  0.569807     -0.562457      -74.6902       74.6902       1844.08       1918.77    
  71  0.294586      -1.22218      -162.297       162.297       1795.55       1957.85    
  72  0.404373     -0.905416      -120.233       120.233       1734.78       1855.01    
  73  0.725150     -0.321376      -42.6764       42.6764       1412.16       1454.84    
  74  0.192207      -1.64918      -218.999       218.999       1684.80       1903.80    
loop,thermsimp(1:2)       37   117.977       47.8951    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272       1848.21        129.78          0.67         29.87          1.42          0.05        161.79
Just calling func    0   0        161.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1848.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       37
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       38
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      271     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -118.770       118.770       1145.34       1264.11    
   2  0.259700      -1.34823      -179.035       179.035       1119.26       1298.30    
   3  0.681144E-01  -2.68657      -356.756       356.756       1244.63       1601.39    
   4  0.158140      -1.84427      -244.906       244.906       1240.71       1485.62    
   5  0.497681     -0.697796      -92.6622       92.6622       1207.13       1299.79    
   6  0.800218     -0.222871      -29.5956       29.5956       1238.38       1267.98    
   7  0.831967     -0.183962      -24.4288       24.4288       1228.83       1253.25    
   8  0.707345     -0.346237      -45.9777       45.9777       1136.23       1182.20    
   9  0.265927      -1.32454      -175.889       175.889       1281.30       1457.19    
  10  0.659046     -0.416962      -55.3694       55.3694       1347.44       1402.81    
  11  0.654587E-01  -2.72634      -362.037       362.037       1250.82       1612.86    
  12  0.223329      -1.49911      -199.071       199.071       1332.88       1531.95    
  13  0.996019     -0.398855E-02 -0.529650      0.529650       1356.13       1356.66    
  14  0.553910     -0.590753      -78.4476       78.4476       1418.12       1496.57    
  15  0.218863      -1.51931      -201.753       201.753       1407.45       1609.20    
  16  0.414020     -0.881841      -117.102       117.102       1412.16       1529.27    
  17  0.229117      -1.47352      -195.673       195.673       1437.49       1633.16    
  18  0.341764      -1.07363      -142.571       142.571       1428.62       1571.19    
  19  0.357052      -1.02987      -136.759       136.759       1450.94       1587.70    
  20  0.780779     -0.247463      -32.8613       32.8613       1445.71       1478.57    
  21  0.382234     -0.961721      -127.709       127.709       1389.10       1516.81    
  22  0.123899      -2.08829      -277.310       277.310       1405.23       1682.54    
  23  0.393312     -0.933152      -123.916       123.916       1436.49       1560.41    
  24  0.481741     -0.730349      -96.9850       96.9850       1331.35       1428.33    
  25  0.120001      -2.12026      -281.554       281.554       1560.83       1842.39    
  26  0.506023     -0.681173      -90.4548       90.4548       1439.42       1529.88    
  27  0.891157     -0.115235      -15.3024       15.3024       1447.80       1463.10    
  28  0.584674     -0.536701      -71.2700       71.2700       1448.61       1519.88    
  29  0.313196      -1.16093      -154.162       154.162       1407.76       1561.93    
  30  0.507340     -0.678574      -90.1097       90.1097       1560.28       1650.39    
  31  0.985030     -0.150835E-01  -2.00298       2.00298       1555.06       1557.06    
  32  0.186570      -1.67895      -222.952       222.952       1407.55       1630.50    
  33  0.992622     -0.740493E-02 -0.983320      0.983320       1527.51       1528.50    
  34  0.344152      -1.06667      -141.646       141.646       1581.32       1722.96    
  35  0.327214      -1.11714      -148.348       148.348       1545.03       1693.38    
  36  0.722008     -0.325719      -43.2531       43.2531       1549.69       1592.95    
  37  0.471441     -0.751960      -99.8548       99.8548       1582.86       1682.71    
  38  0.483594     -0.726510      -96.4752       96.4752       1619.56       1716.03    
  39  0.799410     -0.223881      -29.7297       29.7297       1506.58       1536.31    
  40  0.864070     -0.146101      -19.4012       19.4012       1561.33       1580.73    
  41  0.326419      -1.11957      -148.671       148.671       1226.27       1374.94    
  42  0.970166E-01  -2.33287      -309.788       309.788       1603.60       1913.39    
  43  0.822479     -0.195432      -25.9520       25.9520       1576.82       1602.78    
  44  0.719858     -0.328701      -43.6491       43.6491       1580.47       1624.12    
  45  0.359763      -1.02231      -135.755       135.755       1608.08       1743.84    
  46  0.879180     -0.128765      -17.0991       17.0991       1569.79       1586.89    
  47  0.152514      -1.88050      -249.716       249.716       1632.39       1882.11    
  48  0.379430     -0.969085      -128.687       128.687       1705.34       1834.03    
  49  0.444703     -0.810349      -107.608       107.608       1719.19       1826.80    
  50  0.240485      -1.42510      -189.243       189.243       1453.26       1642.50    
  51  0.682479     -0.382024      -50.7300       50.7300       1827.18       1877.91    
  52  0.989508     -0.105479E-01  -1.40068       1.40068       1637.85       1639.25    
  53  0.626329E-01  -2.77046      -367.897       367.897       1666.68       2034.58    
  54  0.217806      -1.52415      -202.396       202.396       1770.57       1972.96    
  55  0.297102      -1.21368      -161.168       161.168       1734.78       1895.95    
  56  0.447982     -0.803002      -106.633       106.633       1809.33       1915.96    
  57  0.343456      -1.06870      -141.915       141.915       1747.07       1888.98    
  58  0.737340     -0.304706      -40.4627       40.4627       1770.80       1811.26    
  59  0.863080     -0.147248      -19.5534       19.5534       1684.80       1704.35    
  60  0.463462     -0.769030      -102.122       102.122       1827.47       1929.59    
  61  0.120067      -2.11970      -281.481       281.481       1844.08       2125.57    
  62  0.758415     -0.276525      -36.7205       36.7205       1795.55       1832.27    
  63  0.356867      -1.03039      -136.828       136.828       1790.45       1927.28    
  64  0.811695     -0.208631      -27.7047       27.7047       1735.45       1763.16    
  65  0.712430     -0.339074      -45.0265       45.0265       1732.84       1777.86    
  66  0.343671      -1.06807      -141.832       141.832       1614.33       1756.16    
  67  0.455065     -0.787315      -104.550       104.550       1839.48       1944.03    
  68  0.462404     -0.771317      -102.425       102.425       1810.05       1912.48    
  69  0.197402      -1.62251      -215.458       215.458       1661.77       1877.22    
  70  0.870222     -0.139007      -18.4591       18.4591       1519.51       1537.96    
  71  0.938983     -0.629581E-01  -8.36037       8.36037       1781.61       1789.97    
  72  0.362909      -1.01360      -134.599       134.599       1848.25       1982.85    
  73  0.461338     -0.773624      -102.732       102.732       1738.05       1840.78    
  74  0.437927E-01  -3.12829      -415.414       415.414       1848.21       2263.62    
loop,thermsimp(1:2)       38   118.770       179.035    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       1750.92        129.53          0.65         30.58          0.69          0.05        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1750.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       38
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       39
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      272     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -276.061       276.061       1136.23       1412.29    
   2  0.274837      -1.29158      -171.512       171.512       1228.83       1400.34    
   3  0.305931E-01  -3.48698      -463.045       463.045       1145.34       1608.38    
   4  0.929157     -0.734779E-01  -9.75733       9.75733       1238.38       1248.14    
   5  0.995956     -0.405208E-02 -0.538086      0.538086       1119.26       1119.80    
   6  0.904971     -0.998521E-01  -13.2596       13.2596       1207.13       1220.39    
   7  0.189758      -1.66200      -220.702       220.702       1356.13       1576.84    
   8  0.134931      -2.00299      -265.983       265.983       1226.27       1492.26    
   9  0.302412      -1.19596      -158.815       158.815       1347.44       1506.25    
  10  0.389155     -0.943777      -125.327       125.327       1331.35       1456.67    
  11  0.947428     -0.540040E-01  -7.17133       7.17133       1281.30       1288.47    
  12  0.338357      -1.08365      -143.901       143.901       1447.80       1591.70    
  13  0.937476     -0.645645E-01  -8.57369       8.57369       1445.71       1454.28    
  14  0.399493     -0.917560      -121.845       121.845       1240.71       1362.56    
  15  0.527586     -0.639444      -84.9135       84.9135       1418.12       1503.03    
  16  0.297740      -1.21153      -160.883       160.883       1389.10       1549.99    
  17  0.557978     -0.583436      -77.4760       77.4760       1448.61       1526.09    
  18  0.267521      -1.31856      -175.095       175.095       1527.51       1702.61    
  19  0.637637     -0.449986      -59.7548       59.7548       1412.16       1471.92    
  20  0.838569     -0.176059      -23.3793       23.3793       1439.42       1462.80    
  21  0.132199E-01  -4.32603      -574.465       574.465       1332.88       1907.34    
  22  0.745606     -0.293557      -38.9823       38.9823       1506.58       1545.56    
  23  0.334504      -1.09511      -145.422       145.422       1519.51       1664.93    
  24  0.118852      -2.12987      -282.832       282.832       1555.06       1837.89    
  25  0.319911      -1.13971      -151.346       151.346       1436.49       1587.84    
  26  0.638302E-01  -2.75153      -365.383       365.383       1407.76       1773.15    
  27  0.173204      -1.75329      -232.824       232.824       1428.62       1661.45    
  28  0.885640     -0.121444      -16.1269       16.1269       1561.33       1577.45    
  29  0.710758     -0.341423      -45.3385       45.3385       1569.79       1615.13    
  30  0.938919     -0.630265E-01  -8.36945       8.36945       1450.94       1459.31    
  31  0.217740      -1.52445      -202.436       202.436       1549.69       1752.13    
  32  0.130036      -2.03994      -270.889       270.889       1244.63       1515.52    
  33  0.331090      -1.10537      -146.785       146.785       1576.82       1723.61    
  34  0.453525E-01  -3.09329      -410.766       410.766       1407.45       1818.21    
  35  0.494600     -0.704006      -93.4868       93.4868       1250.82       1344.31    
  36  0.488771E-01  -3.01845      -400.827       400.827       1580.47       1981.29    
  37  0.262916E-01  -3.63850      -483.167       483.167       1407.55       1890.71    
  38  0.975293     -0.250177E-01  -3.32217       3.32217       1437.49       1440.81    
  39  0.521026     -0.651955      -86.5748       86.5748       1637.85       1724.42    
  40  0.210960      -1.55609      -206.637       206.637       1453.26       1659.89    
  41  0.475166E-02  -5.34926      -710.343       710.343       1560.28       2270.62    
  42  0.675859     -0.391771      -52.0243       52.0243       1405.23       1457.25    
  43  0.691418     -0.369011      -49.0019       49.0019       1582.86       1631.86    
  44  0.425152     -0.855309      -113.579       113.579       1545.03       1658.61    
  45  0.141313      -1.95678      -259.845       259.845       1684.80       1944.64    
  46  0.902170     -0.102952      -13.6713       13.6713       1619.56       1633.23    
  47  0.794321     -0.230268      -30.5779       30.5779       1581.32       1611.90    
  48  0.685387     -0.377772      -50.1654       50.1654       1608.08       1658.25    
  49  0.273223      -1.29747      -172.294       172.294       1614.33       1786.63    
  50  0.784111     -0.243205      -32.2958       32.2958       1735.45       1767.75    
  51  0.824524     -0.192949      -25.6223       25.6223       1732.84       1758.46    
  52  0.855082     -0.156558      -20.7898       20.7898       1781.61       1802.40    
  53  0.744692E-01  -2.59737      -344.912       344.912       1770.80       2115.71    
  54  0.294857E-01  -3.52385      -467.941       467.941       1719.19       2187.14    
  55  0.225962      -1.48739      -197.514       197.514       1795.55       1993.07    
  56  0.211073      -1.55555      -206.566       206.566       1705.34       1911.91    
  57  0.525673E-01  -2.94566      -391.162       391.162       1738.05       2129.21    
  58  0.855455     -0.156122      -20.7318       20.7318       1560.83       1581.56    
  59  0.169262E-01  -4.07890      -541.647       541.647       1661.77       2203.41    
  60  0.578360     -0.547559      -72.7118       72.7118       1827.18       1899.89    
  61  0.753083     -0.283580      -37.6574       37.6574       1632.39       1670.05    
  62  0.942983     -0.587068E-01  -7.79583       7.79583       1747.07       1754.86    
  63  0.164299      -1.80607      -239.833       239.833       1734.78       1974.61    
  64  0.964876     -0.357557E-01  -4.74809       4.74809       1810.05       1814.80    
  65  0.905245E-01  -2.40213      -318.986       318.986       1603.60       1922.59    
  66  0.812887     -0.207163      -27.5098       27.5098       1809.33       1836.84    
  67  0.702547     -0.353043      -46.8815       46.8815       1790.45       1837.33    
  68  0.229959      -1.46986      -195.186       195.186       1827.47       2022.65    
  69  0.880507     -0.127257      -16.8988       16.8988       1839.48       1856.38    
  70  0.528445     -0.637816      -84.6973       84.6973       1770.57       1855.27    
  71  0.461632     -0.772988      -102.647       102.647       1848.25       1950.90    
  72  0.877049     -0.131193      -17.4214       17.4214       1666.68       1684.10    
  73  0.652452     -0.427017      -56.7047       56.7047       1844.08       1900.79    
  74  0.563656     -0.573311      -76.1314       76.1314       1750.92       1827.06    
loop,thermsimp(1:2)       39   276.061       171.512    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       1496.95        129.75          0.69         30.21          1.00          0.04        161.69
Just calling func    0   0        161.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1496.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       39
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       40
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      273     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -101.505       101.505       1119.26       1220.77    
   2  0.310178      -1.17061      -155.448       155.448       1207.13       1362.58    
   3  0.883713     -0.123623      -16.4162       16.4162       1238.38       1254.80    
   4  0.641465     -0.444001      -58.9601       58.9601       1281.30       1340.26    
   5  0.458576E-01  -3.08222      -409.295       409.295       1250.82       1660.12    
   6  0.611421     -0.491970      -65.3300       65.3300       1240.71       1306.04    
   7  0.292603      -1.22894      -163.194       163.194       1228.83       1392.02    
   8  0.180818      -1.71026      -227.110       227.110       1136.23       1363.34    
   9  0.490648     -0.712028      -94.5521       94.5521       1437.49       1532.04    
  10  0.538601     -0.618781      -82.1695       82.1695       1445.71       1527.88    
  11  0.451209     -0.795824      -105.680       105.680       1331.35       1437.03    
  12  0.610260     -0.493870      -65.5823       65.5823       1405.23       1470.81    
  13  0.425113     -0.855401      -113.591       113.591       1450.94       1564.53    
  14  0.647858     -0.434084      -57.6432       57.6432       1439.42       1497.06    
  15  0.394937     -0.929029      -123.368       123.368       1412.16       1535.53    
  16  0.452279E-01  -3.09604      -411.132       411.132       1226.27       1637.40    
  17  0.954905     -0.461437E-01  -6.12754       6.12754       1418.12       1424.25    
  18  0.362548      -1.01460      -134.731       134.731       1347.44       1482.17    
  19  0.808078     -0.213097      -28.2977       28.2977       1244.63       1272.93    
  20  0.219348      -1.51709      -201.459       201.459       1448.61       1650.07    
  21  0.206981      -1.57513      -209.165       209.165       1506.58       1715.75    
  22  0.719933     -0.328597      -43.6353       43.6353       1389.10       1432.74    
  23  0.950238     -0.510432E-01  -6.77816       6.77816       1356.13       1362.91    
  24  0.845993     -0.167244      -22.2088       22.2088       1561.33       1583.54    
  25  0.157926      -1.84563      -245.086       245.086       1560.83       1805.92    
  26  0.430020     -0.843924      -112.067       112.067       1436.49       1548.56    
  27  0.624159     -0.471350      -62.5918       62.5918       1447.80       1510.39    
  28  0.355386      -1.03455      -137.381       137.381       1145.34       1282.72    
  29  0.297353      -1.21284      -161.056       161.056       1581.32       1742.37    
  30  0.185476      -1.68483      -223.733       223.733       1569.79       1793.52    
  31  0.406569     -0.900002      -119.514       119.514       1582.86       1702.37    
  32  0.147052      -1.91697      -254.560       254.560       1619.56       1874.12    
  33  0.205955      -1.58010      -209.825       209.825       1608.08       1817.91    
  34  0.383503     -0.958409      -127.270       127.270       1545.03       1672.30    
  35  0.514677E-01  -2.96680      -393.969       393.969       1453.26       1847.22    
  36  0.499194     -0.694760      -92.2590       92.2590       1428.62       1520.88    
  37  0.103172E-01  -4.57394      -607.386       607.386       1519.51       2126.89    
  38  0.470163     -0.754676      -100.215       100.215       1632.39       1732.61    
  39  0.983694     -0.164404E-01  -2.18316       2.18316       1666.68       1668.86    
  40  0.880425     -0.127351      -16.9112       16.9112       1527.51       1544.42    
  41  0.969759     -0.307072E-01  -4.07769       4.07769       1576.82       1580.90    
  42  0.761826E-01  -2.57462      -341.891       341.891       1637.85       1979.74    
  43  0.124427      -2.08404      -276.745       276.745       1549.69       1826.44    
  44  0.997702     -0.230032E-02 -0.305466      0.305466       1747.07       1747.37    
  45  0.213939      -1.54206      -204.775       204.775       1732.84       1937.61    
  46  0.471369     -0.752113      -99.8751       99.8751       1735.45       1835.33    
  47  0.421561E-01  -3.16638      -420.472       420.472       1407.76       1828.24    
  48  0.693092     -0.366592      -48.6807       48.6807       1614.33       1663.01    
  49  0.375157     -0.980409      -130.191       130.191       1781.61       1911.80    
  50  0.285659      -1.25296      -166.383       166.383       1810.05       1976.43    
  51  0.338951      -1.08190      -143.669       143.669       1407.45       1551.12    
  52  0.930127E-01  -2.37502      -315.385       315.385       1750.92       2066.31    
  53  0.840878     -0.173309      -23.0142       23.0142       1809.33       1832.35    
  54  0.384591     -0.955575      -126.893       126.893       1790.45       1917.34    
  55  0.212856      -1.54714      -205.448       205.448       1555.06       1760.51    
  56  0.878356     -0.129704      -17.2237       17.2237       1770.57       1787.79    
  57  0.623236E-01  -2.77542      -368.555       368.555       1839.48       2208.03    
  58  0.374221E-02  -5.58808      -742.056       742.056       1407.55       2149.60    
  59  0.851985     -0.160186      -21.2716       21.2716       1827.18       1848.45    
  60  0.779613     -0.248958      -33.0597       33.0597       1844.08       1877.14    
  61  0.991658     -0.837700E-02  -1.11240       1.11240       1332.88       1333.99    
  62  0.425290     -0.854985      -113.536       113.536       1705.34       1818.88    
  63  0.613403     -0.488733      -64.9002       64.9002       1603.60       1668.50    
  64  0.487347E-01  -3.02136      -401.215       401.215       1684.80       2086.01    
  65  0.267732      -1.31777      -174.990       174.990       1848.25       2023.24    
  66  0.159530      -1.83552      -243.744       243.744       1734.78       1978.52    
  67  0.312803E-01  -3.46477      -460.095       460.095       1580.47       2040.56    
  68  0.956405     -0.445737E-01  -5.91905       5.91905       1795.55       1801.47    
  69  0.683324     -0.380786      -50.5656       50.5656       1827.47       1878.03    
  70  0.482307     -0.729174      -96.8290       96.8290       1770.80       1867.62    
  71  0.928745     -0.739216E-01  -9.81624       9.81624       1738.05       1747.87    
  72  0.483353     -0.727009      -96.5414       96.5414       1719.19       1815.74    
  73  0.313709      -1.15929      -153.945       153.945       1661.77       1815.71    
  74  0.609018     -0.495907      -65.8528       65.8528       1496.95       1562.80    
loop,thermsimp(1:2)       40   101.505       155.448    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275       1170.33        129.66          0.67         30.01          1.24          0.05        161.63
Just calling func    0   0        161.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    276       1039.39        129.00          0.66         30.43          1.36          0.05        161.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1039.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       40
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       41
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      275     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -194.543       194.543       1119.26       1313.81    
   2  0.984723     -0.153953E-01  -2.04439       2.04439       1238.38       1240.43    
   3  0.689569     -0.371688      -49.3574       49.3574       1244.63       1293.99    
   4  0.539532     -0.617054      -81.9402       81.9402       1145.34       1227.28    
   5  0.103859      -2.26472      -300.739       300.739       1240.71       1541.45    
   6  0.403261     -0.908171      -120.598       120.598       1332.88       1453.47    
   7  0.545138     -0.606716      -80.5674       80.5674       1281.30       1361.87    
   8  0.211198      -1.55496      -206.487       206.487       1207.13       1413.62    
   9  0.533123     -0.629004      -83.5271       83.5271       1356.13       1439.66    
  10  0.891214     -0.115171      -15.2938       15.2938       1136.23       1151.52    
  11  0.604806     -0.502847      -66.7744       66.7744       1228.83       1295.60    
  12  0.176166      -1.73633      -230.572       230.572       1418.12       1648.69    
  13  0.733693     -0.309664      -41.1211       41.1211       1389.10       1430.23    
  14  0.248504      -1.39230      -184.887       184.887       1331.35       1516.23    
  15  0.183808      -1.69387      -224.933       224.933       1405.23       1630.16    
  16  0.308674E-02  -5.78064      -767.627       767.627       1347.44       2115.06    
  17  0.651025     -0.429207      -56.9955       56.9955       1439.42       1496.42    
  18  0.864353     -0.145775      -19.3578       19.3578       1447.80       1467.16    
  19  0.547352     -0.602664      -80.0293       80.0293       1428.62       1508.65    
  20  0.631248     -0.460057      -61.0922       61.0922       1445.71       1506.80    
  21  0.344368E-01  -3.36863      -447.329       447.329       1437.49       1884.82    
  22  0.876828     -0.131444      -17.4548       17.4548       1412.16       1429.62    
  23  0.884538     -0.122690      -16.2924       16.2924       1527.51       1543.81    
  24  0.926808     -0.760084E-01  -10.0934       10.0934       1436.49       1446.58    
  25  0.823462     -0.194237      -25.7933       25.7933       1407.45       1433.24    
  26  0.852580     -0.159489      -21.1789       21.1789       1496.95       1518.13    
  27  0.577707     -0.548689      -72.8618       72.8618       1450.94       1523.80    
  28  0.510093     -0.673163      -89.3911       89.3911       1576.82       1666.21    
  29  0.890288     -0.116210      -15.4318       15.4318       1561.33       1576.76    
  30  0.304875      -1.18785      -157.738       157.738       1226.27       1384.01    
  31  0.152164      -1.88279      -250.021       250.021       1448.61       1698.63    
  32  0.718687     -0.330329      -43.8653       43.8653       1250.82       1294.69    
  33  0.488128     -0.717177      -95.2359       95.2359       1614.33       1709.57    
  34  0.373052     -0.986038      -130.939       130.939       1603.60       1734.54    
  35  0.247351      -1.39695      -185.504       185.504       1666.68       1852.19    
  36  0.532108     -0.630909      -83.7801       83.7801       1545.03       1628.81    
  37  0.828879E-02  -4.79285      -636.455       636.455       1582.86       2219.31    
  38  0.168277      -1.78214      -236.655       236.655       1506.58       1743.24    
  39  0.253216      -1.37351      -182.393       182.393       1632.39       1814.78    
  40  0.458588     -0.779602      -103.525       103.525       1581.32       1684.84    
  41  0.725692     -0.320630      -42.5773       42.5773       1747.07       1789.65    
  42  0.283543      -1.26039      -167.371       167.371       1738.05       1905.42    
  43  0.798055     -0.225578      -29.9551       29.9551       1555.06       1585.02    
  44  0.805371     -0.216453      -28.7433       28.7433       1770.57       1799.31    
  45  0.580747     -0.543441      -72.1650       72.1650       1569.79       1641.95    
  46  0.581119     -0.542799      -72.0797       72.0797       1795.55       1867.63    
  47  0.305196      -1.18680      -157.598       157.598       1560.83       1718.43    
  48  0.905702     -0.990454E-01  -13.1525       13.1525       1661.77       1674.92    
  49  0.265633E-01  -3.62822      -481.801       481.801       1719.19       2201.00    
  50  0.114529E-01  -4.46951      -593.518       593.518       1608.08       2201.60    
  51  0.990634     -0.941033E-02  -1.24962       1.24962       1705.34       1706.59    
  52  0.609564     -0.495011      -65.7338       65.7338       1549.69       1615.43    
  53  0.380905     -0.965204      -128.172       128.172       1407.76       1535.94    
  54  0.902244     -0.102870      -13.6604       13.6604       1809.33       1822.99    
  55  0.841859     -0.172142      -22.8592       22.8592       1735.45       1758.31    
  56  0.954561     -0.465036E-01  -6.17533       6.17533       1453.26       1459.43    
  57  0.637314     -0.450492      -59.8221       59.8221       1827.18       1887.00    
  58  0.224695      -1.49301      -198.261       198.261       1770.80       1969.06    
  59  0.537548     -0.620738      -82.4294       82.4294       1619.56       1701.99    
  60  0.271295      -1.30455      -173.235       173.235       1844.08       2017.32    
  61  0.524725E-02  -5.25005      -697.168       697.168       1827.47       2524.63    
  62  0.194770      -1.63594      -217.240       217.240       1781.61       1998.85    
  63  0.833225E-01  -2.48504      -329.995       329.995       1790.45       2120.45    
  64  0.195984      -1.62972      -216.415       216.415       1732.84       1949.25    
  65  0.232752      -1.45778      -193.583       193.583       1810.05       2003.63    
  66  0.101893      -2.28383      -303.276       303.276       1734.78       2038.06    
  67  0.955311     -0.457184E-01  -6.07107       6.07107       1637.85       1643.92    
  68  0.791211     -0.234190      -31.0987       31.0987       1848.25       1879.35    
  69  0.617608     -0.481901      -63.9930       63.9930       1580.47       1644.46    
  70  0.792156     -0.232997      -30.9403       30.9403       1750.92       1781.86    
  71  0.195697      -1.63119      -216.610       216.610       1684.80       1901.41    
  72  0.174438      -1.74618      -231.880       231.880       1519.51       1751.39    
  73  0.966870     -0.336914E-01  -4.47397       4.47397       1407.55       1412.02    
  74  0.587560     -0.531777      -70.6161       70.6161       1039.39       1110.00    
loop,thermsimp(1:2)       41   194.543       2.04439    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       1687.12        129.54          0.65         29.85          1.55          0.05        161.65
Just calling func    0   0        161.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1687.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       41
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       42
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      276     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -413.897       413.897       1039.39       1453.29    
   2  0.196215      -1.62854      -216.258       216.258       1136.23       1352.48    
   3  0.501152     -0.690846      -91.7393       91.7393       1145.34       1237.08    
   4  0.288339      -1.24362      -165.143       165.143       1238.38       1403.53    
   5  0.773132     -0.257306      -34.1683       34.1683       1244.63       1278.80    
   6  0.417683     -0.873033      -115.932       115.932       1250.82       1366.76    
   7  0.229479      -1.47195      -195.463       195.463       1228.83       1424.29    
   8  0.964123     -0.365367E-01  -4.85180       4.85180       1119.26       1124.11    
   9  0.263782      -1.33263      -176.964       176.964       1281.30       1458.26    
  10  0.102960      -2.27342      -301.893       301.893       1226.27       1528.17    
  11  0.828790     -0.187788      -24.9369       24.9369       1407.55       1432.48    
  12  0.738697     -0.302868      -40.2186       40.2186       1207.13       1247.35    
  13  0.458595     -0.779589      -103.524       103.524       1412.16       1515.69    
  14  0.905176     -0.996260E-01  -13.2296       13.2296       1389.10       1402.33    
  15  0.147067      -1.91687      -254.546       254.546       1407.45       1661.99    
  16  0.142365      -1.94936      -258.861       258.861       1356.13       1615.00    
  17  0.483147     -0.727435      -96.5980       96.5980       1436.49       1533.09    
  18  0.640417     -0.445636      -59.1772       59.1772       1332.88       1392.05    
  19  0.719349     -0.329408      -43.7430       43.7430       1453.26       1497.00    
  20  0.714234     -0.336545      -44.6907       44.6907       1447.80       1492.49    
  21  0.825507     -0.191757      -25.4639       25.4639       1439.42       1464.88    
  22  0.155188      -1.86312      -247.408       247.408       1445.71       1693.12    
  23  0.248874      -1.39081      -184.689       184.689       1428.62       1613.31    
  24  0.107953      -2.22606      -295.605       295.605       1331.35       1626.95    
  25  0.349169      -1.05220      -139.724       139.724       1496.95       1636.68    
  26  0.967311     -0.332356E-01  -4.41344       4.41344       1450.94       1455.35    
  27  0.519506     -0.654877      -86.9629       86.9629       1407.76       1494.73    
  28  0.462662     -0.770758      -102.351       102.351       1240.71       1343.06    
  29  0.811438     -0.208948      -27.7467       27.7467       1527.51       1555.26    
  30  0.394710E-01  -3.23219      -429.211       429.211       1561.33       1990.54    
  31  0.482930     -0.727884      -96.6576       96.6576       1555.06       1651.72    
  32  0.520883     -0.652231      -86.6114       86.6114       1549.69       1636.31    
  33  0.980978E-01  -2.32179      -308.317       308.317       1545.03       1853.35    
  34  0.626549     -0.467529      -62.0844       62.0844       1405.23       1467.31    
  35  0.618402     -0.480616      -63.8223       63.8223       1569.79       1633.61    
  36  0.681438     -0.383550      -50.9326       50.9326       1637.85       1688.78    
  37  0.816820     -0.202336      -26.8687       26.8687       1580.47       1607.33    
  38  0.578487     -0.547340      -72.6827       72.6827       1418.12       1490.80    
  39  0.349734      -1.05058      -139.510       139.510       1576.82       1716.33    
  40  0.945672     -0.558596E-01  -7.41774       7.41774       1661.77       1669.18    
  41  0.767680     -0.264382      -35.1079       35.1079       1581.32       1616.43    
  42  0.122064      -2.10321      -279.290       279.290       1448.61       1727.90    
  43  0.211623      -1.55295      -206.220       206.220       1619.56       1825.78    
  44  0.969992E-01  -2.33305      -309.812       309.812       1705.34       2015.15    
  45  0.877482     -0.130699      -17.3559       17.3559       1614.33       1631.69    
  46  0.448991     -0.800752      -106.334       106.334       1560.83       1667.17    
  47  0.833113     -0.182586      -24.2461       24.2461       1603.60       1627.85    
  48  0.691765     -0.368508      -48.9352       48.9352       1506.58       1555.52    
  49  0.310664      -1.16904      -155.240       155.240       1519.51       1674.75    
  50  0.422283     -0.862080      -114.478       114.478       1735.45       1849.93    
  51  0.382184E-01  -3.26444      -433.493       433.493       1750.92       2184.42    
  52  0.679614E-01  -2.68882      -357.055       357.055       1747.07       2104.12    
  53  0.580404     -0.544031      -72.2433       72.2433       1770.57       1842.81    
  54  0.887981     -0.118805      -15.7764       15.7764       1632.39       1648.17    
  55  0.540749     -0.614799      -81.6408       81.6408       1809.33       1890.97    
  56  0.749712     -0.288066      -38.2530       38.2530       1666.68       1704.93    
  57  0.428385     -0.847733      -112.573       112.573       1795.55       1908.13    
  58  0.271790      -1.30272      -172.992       172.992       1848.25       2021.25    
  59  0.317865      -1.14613      -152.197       152.197       1437.49       1589.69    
  60  0.855566     -0.155992      -20.7146       20.7146       1827.18       1847.89    
  61  0.153120      -1.87653      -249.190       249.190       1684.80       1933.99    
  62  0.507684     -0.677896      -90.0196       90.0196       1738.05       1828.07    
  63  0.270723      -1.30666      -173.514       173.514       1732.84       1906.35    
  64  0.721736     -0.326096      -43.3031       43.3031       1770.80       1814.10    
  65  0.707323     -0.346268      -45.9818       45.9818       1781.61       1827.59    
  66  0.420146     -0.867152      -115.151       115.151       1810.05       1925.20    
  67  0.782833     -0.244836      -32.5124       32.5124       1844.08       1876.60    
  68  0.835529     -0.179691      -23.8616       23.8616       1734.78       1758.64    
  69  0.267477      -1.31872      -175.117       175.117       1347.44       1522.55    
  70  0.512596     -0.668267      -88.7409       88.7409       1790.45       1879.19    
  71  0.967143     -0.334090E-01  -4.43647       4.43647       1719.19       1723.63    
  72  0.528135     -0.638402      -84.7751       84.7751       1608.08       1692.86    
  73  0.970249     -0.302028E-01  -4.01071       4.01071       1582.86       1586.87    
  74  0.262903      -1.33597      -177.407       177.407       1687.12       1864.53    
loop,thermsimp(1:2)       42   413.897       216.258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       1805.42        129.41          0.64         29.81          2.19          0.05        162.11
Just calling func    0   0        162.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1805.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       42
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       43
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      277     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -160.503       160.503       1119.26       1279.77    
   2  0.383173     -0.959268      -127.384       127.384       1145.34       1272.72    
   3  0.386205     -0.951387      -126.337       126.337       1207.13       1333.47    
   4  0.362178      -1.01562      -134.867       134.867       1244.63       1379.50    
   5  0.394462     -0.930233      -123.528       123.528       1240.71       1364.24    
   6  0.883072     -0.124349      -16.5126       16.5126       1136.23       1152.74    
   7  0.571477     -0.559531      -74.3016       74.3016       1250.82       1325.13    
   8  0.944036     -0.575912E-01  -7.64769       7.64769       1332.88       1340.52    
   9  0.326573      -1.11910      -148.609       148.609       1389.10       1537.71    
  10  0.467297     -0.760791      -101.027       101.027       1238.38       1339.41    
  11  0.828365     -0.188301      -25.0050       25.0050       1228.83       1253.83    
  12  0.826991     -0.189962      -25.2255       25.2255       1407.55       1432.77    
  13  0.675447E-01  -2.69497      -357.872       357.872       1039.39       1397.26    
  14  0.924113     -0.789214E-01  -10.4802       10.4802       1450.94       1461.42    
  15  0.810131     -0.210560      -27.9608       27.9608       1281.30       1309.26    
  16  0.410286     -0.890900      -118.305       118.305       1439.42       1557.73    
  17  0.334977      -1.09369      -145.235       145.235       1405.23       1550.46    
  18  0.119017      -2.12849      -282.648       282.648       1418.12       1700.77    
  19  0.447328     -0.804463      -106.827       106.827       1447.80       1554.63    
  20  0.324388E-02  -5.73098      -761.033       761.033       1407.76       2168.80    
  21  0.158272      -1.84344      -244.795       244.795       1453.26       1698.05    
  22  0.241219      -1.42205      -188.838       188.838       1412.16       1601.00    
  23  0.259790      -1.34788      -178.989       178.989       1347.44       1526.43    
  24  0.521973     -0.650139      -86.3337       86.3337       1226.27       1312.61    
  25  0.336335      -1.08965      -144.697       144.697       1436.49       1581.19    
  26  0.642248     -0.442780      -58.7980       58.7980       1527.51       1586.31    
  27  0.984615     -0.155047E-01  -2.05891       2.05891       1506.58       1508.64    
  28  0.373782     -0.984082      -130.679       130.679       1582.86       1713.54    
  29  0.932479     -0.699087E-01  -9.28336       9.28336       1437.49       1446.77    
  30  0.711360     -0.340577      -45.2261       45.2261       1580.47       1625.69    
  31  0.315363      -1.15403      -153.247       153.247       1428.62       1581.87    
  32  0.528583     -0.637556      -84.6627       84.6627       1356.13       1440.80    
  33  0.622355E-01  -2.77683      -368.743       368.743       1581.32       1950.06    
  34  0.144849      -1.93206      -256.563       256.563       1331.35       1587.91    
  35  0.868928     -0.140495      -18.6566       18.6566       1603.60       1622.26    
  36  0.243398      -1.41306      -187.644       187.644       1614.33       1801.98    
  37  0.936928     -0.651491E-01  -8.65133       8.65133       1569.79       1578.44    
  38  0.979804E-01  -2.32299      -308.476       308.476       1549.69       1858.17    
  39  0.805773     -0.215953      -28.6769       28.6769       1496.95       1525.63    
  40  0.210751      -1.55708      -206.769       206.769       1632.39       1839.16    
  41  0.497104     -0.698956      -92.8162       92.8162       1555.06       1647.88    
  42  0.532106     -0.630913      -83.7806       83.7806       1407.45       1491.23    
  43  0.898420     -0.107117      -14.2244       14.2244       1560.83       1575.06    
  44  0.579370     -0.545814      -72.4800       72.4800       1661.77       1734.25    
  45  0.191213      -1.65437      -219.688       219.688       1519.51       1739.19    
  46  0.491633     -0.710023      -94.2859       94.2859       1637.85       1732.13    
  47  0.989123     -0.109370E-01  -1.45235       1.45235       1608.08       1609.54    
  48  0.576855     -0.550164      -73.0577       73.0577       1445.71       1518.77    
  49  0.133368      -2.01464      -267.530       267.530       1666.68       1934.21    
  50  0.708426     -0.344710      -45.7749       45.7749       1576.82       1622.60    
  51  0.183469      -1.69571      -225.178       225.178       1719.19       1944.37    
  52  0.951201     -0.500300E-01  -6.64361       6.64361       1448.61       1455.26    
  53  0.380646E-01  -3.26847      -434.029       434.029       1734.78       2168.81    
  54  0.575108     -0.553198      -73.4607       73.4607       1770.80       1844.26    
  55  0.136357E-01  -4.29506      -570.353       570.353       1619.56       2189.91    
  56  0.665821E-01  -2.70932      -359.778       359.778       1781.61       2141.39    
  57  0.885471     -0.121635      -16.1522       16.1522       1738.05       1754.20    
  58  0.213600E-01  -3.84624      -510.752       510.752       1770.57       2281.32    
  59  0.740349     -0.300634      -39.9220       39.9220       1827.18       1867.10    
  60  0.290679      -1.23553      -164.070       164.070       1735.45       1899.52    
  61  0.895680     -0.110173      -14.6301       14.6301       1545.03       1559.66    
  62  0.956670     -0.442971E-01  -5.88233       5.88233       1687.12       1693.00    
  63  0.196231      -1.62846      -216.248       216.248       1844.08       2060.33    
  64  0.279139      -1.27605      -169.450       169.450       1790.45       1959.90    
  65  0.686055     -0.376797      -50.0359       50.0359       1809.33       1859.37    
  66  0.798228     -0.225361      -29.9263       29.9263       1732.84       1762.76    
  67  0.898321     -0.107228      -14.2391       14.2391       1795.55       1809.79    
  68  0.764857     -0.268067      -35.5973       35.5973       1810.05       1845.65    
  69  0.330164      -1.10817      -147.156       147.156       1684.80       1831.96    
  70  0.598170     -0.513879      -68.2394       68.2394       1561.33       1629.57    
  71  0.810123     -0.210569      -27.9621       27.9621       1705.34       1733.30    
  72  0.351685      -1.04502      -138.771       138.771       1848.25       1987.03    
  73  0.586228     -0.534047      -70.9175       70.9175       1747.07       1817.99    
  74  0.215652      -1.53409      -203.716       203.716       1805.42       2009.13    
loop,thermsimp(1:2)       43   160.503       127.384    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       1155.20        129.77          0.69         29.77          1.66          0.05        161.94
Just calling func    0   0        161.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280       1082.37        128.84          0.66         30.47          1.61          0.05        161.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1082.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       43
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       44
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      279     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -165.741       165.741       1136.23       1301.97    
   2  0.260243      -1.34614      -178.757       178.757       1228.83       1407.58    
   3  0.646915     -0.435540      -57.8365       57.8365       1145.34       1203.17    
   4  0.572447     -0.557835      -74.0763       74.0763       1119.26       1193.34    
   5  0.105907      -2.24520      -298.146       298.146       1281.30       1579.44    
   6  0.693038     -0.366671      -48.6912       48.6912       1226.27       1274.96    
   7  0.329408      -1.11046      -147.461       147.461       1250.82       1398.29    
   8  0.187221      -1.67546      -222.489       222.489       1207.13       1429.62    
   9  0.545731     -0.605630      -80.4231       80.4231       1238.38       1318.81    
  10  0.752820     -0.283930      -37.7038       37.7038       1332.88       1370.58    
  11  0.153542      -1.87378      -248.824       248.824       1240.71       1489.53    
  12  0.400659     -0.914645      -121.458       121.458       1244.63       1366.09    
  13  0.306182      -1.18357      -157.170       157.170       1039.39       1196.56    
  14  0.270957E-01  -3.60838      -479.167       479.167       1407.55       1886.71    
  15  0.776765     -0.252618      -33.5458       33.5458       1356.13       1389.68    
  16  0.711945     -0.339755      -45.1170       45.1170       1437.49       1482.61    
  17  0.217190      -1.52698      -202.772       202.772       1448.61       1651.39    
  18  0.285226      -1.25447      -166.585       166.585       1450.94       1617.52    
  19  0.348904      -1.05296      -139.825       139.825       1407.45       1547.27    
  20  0.686414     -0.376275      -49.9665       49.9665       1506.58       1556.55    
  21  0.212825      -1.54729      -205.468       205.468       1445.71       1651.18    
  22  0.501697     -0.689760      -91.5950       91.5950       1496.95       1588.55    
  23  0.363771      -1.01123      -134.284       134.284       1347.44       1481.72    
  24  0.789273     -0.236642      -31.4244       31.4244       1389.10       1420.53    
  25  0.232884      -1.45721      -193.507       193.507       1405.23       1598.74    
  26  0.754896     -0.281175      -37.3379       37.3379       1447.80       1485.14    
  27  0.639358     -0.447290      -59.3969       59.3969       1439.42       1498.82    
  28  0.532505     -0.630163      -83.6810       83.6810       1545.03       1628.71    
  29  0.759813     -0.274683      -36.4759       36.4759       1560.83       1597.31    
  30  0.768360     -0.263497      -34.9905       34.9905       1569.79       1604.78    
  31  0.245116      -1.40602      -186.709       186.709       1436.49       1623.20    
  32  0.672517     -0.396727      -52.6825       52.6825       1428.62       1481.31    
  33  0.910675     -0.935691E-01  -12.4253       12.4253       1527.51       1539.94    
  34  0.441618     -0.817310      -108.533       108.533       1331.35       1439.88    
  35  0.212980      -1.54656      -205.372       205.372       1412.16       1617.54    
  36  0.471690     -0.751434      -99.7849       99.7849       1608.08       1707.87    
  37  0.968545     -0.319606E-01  -4.24413       4.24413       1603.60       1607.85    
  38  0.711169     -0.340845      -45.2617       45.2617       1576.82       1622.09    
  39  0.222170      -1.50431      -199.762       199.762       1580.47       1780.23    
  40  0.896100     -0.109703      -14.5678       14.5678       1561.33       1575.90    
  41  0.898054     -0.107525      -14.2785       14.2785       1555.06       1569.34    
  42  0.981364     -0.188122E-01  -2.49812       2.49812       1687.12       1689.62    
  43  0.238126      -1.43496      -190.552       190.552       1453.26       1643.81    
  44  0.884882     -0.122301      -16.2407       16.2407       1418.12       1434.36    
  45  0.206421      -1.57784      -209.526       209.526       1582.86       1792.38    
  46  0.421939     -0.862894      -114.586       114.586       1637.85       1752.43    
  47  0.334170E-01  -3.39869      -451.321       451.321       1705.34       2156.66    
  48  0.940374     -0.614772E-01  -8.16371       8.16371       1661.77       1669.93    
  49  0.119361      -2.12561      -282.265       282.265       1519.51       1801.77    
  50  0.493355     -0.706527      -93.8216       93.8216       1738.05       1831.87    
  51  0.239498      -1.42921      -189.789       189.789       1732.84       1922.62    
  52  0.779094     -0.249623      -33.1481       33.1481       1614.33       1647.48    
  53  0.993851     -0.616759E-02 -0.819011      0.819011       1795.55       1796.37    
  54  0.680666     -0.384683      -51.0831       51.0831       1747.07       1798.15    
  55  0.861145     -0.149492      -19.8514       19.8514       1684.80       1704.65    
  56  0.679030     -0.387090      -51.4027       51.4027       1632.39       1683.79    
  57  0.568731E-01  -2.86693      -380.708       380.708       1770.80       2151.50    
  58  0.342751      -1.07075      -142.188       142.188       1810.05       1952.24    
  59  0.929483     -0.731270E-01  -9.71073       9.71073       1549.69       1559.41    
  60  0.287616      -1.24613      -165.477       165.477       1809.33       1974.81    
  61  0.622582     -0.473881      -62.9279       62.9279       1827.18       1890.10    
  62  0.449193     -0.800303      -106.274       106.274       1735.45       1841.73    
  63  0.746100     -0.292896      -38.8944       38.8944       1666.68       1705.58    
  64  0.783595     -0.243863      -32.3832       32.3832       1719.19       1751.58    
  65  0.447963     -0.803044      -106.638       106.638       1581.32       1687.96    
  66  0.788663     -0.237416      -31.5272       31.5272       1790.45       1821.98    
  67  0.445514     -0.808528      -107.367       107.367       1848.25       1955.62    
  68  0.174611      -1.74519      -231.749       231.749       1805.42       2037.17    
  69  0.891268E-01  -2.41769      -321.052       321.052       1844.08       2165.14    
  70  0.279672      -1.27414      -169.196       169.196       1781.61       1950.81    
  71  0.700166     -0.356438      -47.3324       47.3324       1407.76       1455.10    
  72  0.269233      -1.31218      -174.248       174.248       1734.78       1909.03    
  73  0.631814     -0.459159      -60.9730       60.9730       1619.56       1680.53    
  74  0.785892     -0.240936      -31.9946       31.9946       1082.37       1114.36    
loop,thermsimp(1:2)       44   165.741       178.757    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       1683.61        130.54          0.67         30.17          0.55          0.05        161.98
Just calling func    0   0        161.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    1683.6        2.349     -1.105      3.615     -100.0     0.6554    
                     -0.8603      1.339     -100.0      2.567      1.528    
                     -0.2834     0.2608      2.009      0.000     0.6800    
                      -1.178     -20.00      0.000      0.000    -0.2947    

                      -2.616     0.1083E+05 0.1044E+05 -650.7     -1451.    
                      -3.870     -5.852     -4.614     -15.33     -5.168    
                      -12.45     -2.944     -2492.      0.000     -1228.    

                      -691.9      3883.      1222.      1478.      2978.    
                      -2268.    -0.8823E-01-0.2330      0.000    -0.1722    
                     -0.2179    -0.2634    -0.2181    -0.2440    -0.1475    

                     -0.7340     -1.769      1.382     0.6965E-01 0.2243E-01
                      0.8541E-01-0.2979E-01-0.1473    -0.9896E-01-0.6834E-01
                     -0.1785    -0.2427E-01-0.3381     -2.180      1.382    

                      -1.702     -1.500     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.948      8.870      0.000     0.1011E-03
                      0.1507     0.2908      9.100      8.940    -0.1228E+05

                      0.4095E-03 0.2908     0.2312      9.745      9.127    
                      -7873.     0.1852E-03-0.8567     0.2138      9.402    
                       9.234     -4545.     0.9662E-02
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1683.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       44
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       45
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      280     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -210.896       210.896       1082.37       1293.27    
   2  0.455846E-01  -3.08818      -410.088       410.088       1119.26       1529.35    
   3  0.655807     -0.421889      -56.0237       56.0237       1039.39       1095.41    
   4  0.902989     -0.102045      -13.5508       13.5508       1145.34       1158.89    
   5  0.826012     -0.191146      -25.3827       25.3827       1226.27       1251.66    
   6  0.160871      -1.82715      -242.632       242.632       1136.23       1378.86    
   7  0.516410     -0.660854      -87.7566       87.7566       1238.38       1326.14    
   8  0.506939     -0.679364      -90.2145       90.2145       1244.63       1334.85    
   9  0.728359     -0.316962      -42.0902       42.0902       1332.88       1374.97    
  10  0.453162     -0.791506      -105.106       105.106       1356.13       1461.24    
  11  0.837994     -0.176745      -23.4704       23.4704       1250.82       1274.30    
  12  0.118024      -2.13686      -283.760       283.760       1228.83       1512.59    
  13  0.274030      -1.29452      -171.903       171.903       1389.10       1561.01    
  14  0.402227     -0.910738      -120.939       120.939       1207.13       1328.07    
  15  0.444245     -0.811380      -107.745       107.745       1418.12       1525.87    
  16  0.594880     -0.519396      -68.9720       68.9720       1331.35       1400.32    
  17  0.548806     -0.600010      -79.6770       79.6770       1407.76       1487.44    
  18  0.222827      -1.50136      -199.369       199.369       1428.62       1627.99    
  19  0.152541      -1.88032      -249.693       249.693       1347.44       1597.13    
  20  0.816533     -0.202688      -26.9154       26.9154       1437.49       1464.41    
  21  0.525417     -0.643564      -85.4606       85.4606       1447.80       1533.26    
  22  0.661450     -0.413320      -54.8859       54.8859       1240.71       1295.60    
  23  0.437535     -0.826598      -109.766       109.766       1439.42       1549.19    
  24  0.464442     -0.766918      -101.841       101.841       1527.51       1629.35    
  25  0.683975     -0.379834      -50.4391       50.4391       1407.45       1457.89    
  26  0.407919     -0.896688      -119.074       119.074       1506.58       1625.65    
  27  0.934669     -0.675632E-01  -8.97189       8.97189       1549.69       1558.67    
  28  0.866891     -0.142842      -18.9683       18.9683       1555.06       1574.03    
  29  0.145435E-01  -4.23061      -561.794       561.794       1561.33       2123.12    
  30  0.514599     -0.664368      -88.2231       88.2231       1281.30       1369.52    
  31  0.370591     -0.992656      -131.817       131.817       1496.95       1628.77    
  32  0.251726      -1.37941      -183.176       183.176       1560.83       1744.01    
  33  0.959470     -0.413742E-01  -5.49418       5.49418       1405.23       1410.72    
  34  0.344885E-01  -3.36713      -447.130       447.130       1569.79       2016.92    
  35  0.348690      -1.05357      -139.907       139.907       1603.60       1743.51    
  36  0.610898     -0.492826      -65.4436       65.4436       1450.94       1516.38    
  37  0.440567     -0.819693      -108.849       108.849       1412.16       1521.01    
  38  0.340409      -1.07761      -143.098       143.098       1576.82       1719.92    
  39  0.345015E-01  -3.36675      -447.080       447.080       1436.49       1883.57    
  40  0.667224     -0.404630      -53.7319       53.7319       1545.03       1598.76    
  41  0.138336      -1.97807      -262.674       262.674       1453.26       1715.93    
  42  0.412023     -0.886676      -117.744       117.744       1614.33       1732.08    
  43  0.578410     -0.547473      -72.7003       72.7003       1445.71       1518.41    
  44  0.972817     -0.275594E-01  -3.65969       3.65969       1448.61       1452.27    
  45  0.152341      -1.88163      -249.867       249.867       1661.77       1911.63    
  46  0.764264     -0.268842      -35.7002       35.7002       1619.56       1655.26    
  47  0.898082E-01  -2.41008      -320.041       320.041       1632.39       1952.43    
  48  0.205097      -1.58427      -210.380       210.380       1581.32       1791.70    
  49  0.249611E-01  -3.69044      -490.063       490.063       1687.12       2177.18    
  50  0.999211     -0.789000E-03 -0.104773      0.104773       1684.80       1684.90    
  51  0.622898E-01  -2.77596      -368.627       368.627       1666.68       2035.31    
  52  0.588779     -0.529705      -70.3409       70.3409       1608.08       1678.42    
  53  0.395562     -0.927447      -123.158       123.158       1719.19       1842.35    
  54  0.213371      -1.54472      -205.128       205.128       1637.85       1842.97    
  55  0.801544     -0.221215      -29.3758       29.3758       1580.47       1609.84    
  56  0.392036     -0.936401      -124.347       124.347       1582.86       1707.20    
  57  0.504835     -0.683524      -90.7670       90.7670       1795.55       1886.32    
  58  0.389514     -0.942856      -125.204       125.204       1747.07       1872.27    
  59  0.694006     -0.365275      -48.5058       48.5058       1519.51       1568.01    
  60  0.220113      -1.51361      -200.997       200.997       1790.45       1991.45    
  61  0.548334     -0.600870      -79.7912       79.7912       1738.05       1817.84    
  62  0.490082     -0.713183      -94.7055       94.7055       1735.45       1830.16    
  63  0.315187      -1.15459      -153.321       153.321       1407.55       1560.87    
  64  0.454028     -0.789596      -104.853       104.853       1827.18       1932.03    
  65  0.617612     -0.481894      -63.9920       63.9920       1734.78       1798.77    
  66  0.446806     -0.805630      -106.982       106.982       1732.84       1839.82    
  67  0.907640     -0.969076E-01  -12.8686       12.8686       1781.61       1794.48    
  68  0.508446     -0.676396      -89.8204       89.8204       1810.05       1899.87    
  69  0.552574     -0.593168      -78.7683       78.7683       1848.25       1927.02    
  70  0.716954     -0.332744      -44.1859       44.1859       1809.33       1853.52    
  71  0.414283     -0.881205      -117.018       117.018       1805.42       1922.43    
  72  0.320057      -1.13926      -151.285       151.285       1770.80       1922.08    
  73  0.154914      -1.86488      -247.643       247.643       1705.34       1952.98    
  74  0.642674     -0.442117      -58.7099       58.7099       1683.61       1742.32    
loop,thermsimp(1:2)       45   210.896       410.088    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282       1794.63        129.34          0.65         30.55          1.05          0.05        161.64
Just calling func    0   0        161.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1794.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       45
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       46
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      281     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -30.5445       30.5445       1039.39       1069.93    
   2  0.338444      -1.08340      -143.867       143.867       1145.34       1289.20    
   3  0.563800     -0.573055      -76.0975       76.0975       1226.27       1302.37    
   4  0.295284      -1.21982      -161.983       161.983       1250.82       1412.81    
   5  0.506481     -0.680269      -90.3347       90.3347       1082.37       1172.70    
   6  0.345803      -1.06189      -141.011       141.011       1240.71       1381.72    
   7  0.741641     -0.298890      -39.6903       39.6903       1238.38       1278.07    
   8  0.182310      -1.70204      -226.019       226.019       1207.13       1433.15    
   9  0.315187      -1.15459      -153.321       153.321       1244.63       1397.95    
  10  0.598844     -0.512755      -68.0901       68.0901       1281.30       1349.39    
  11  0.659119     -0.416852      -55.3548       55.3548       1332.88       1388.23    
  12  0.247481      -1.39642      -185.435       185.435       1136.23       1321.66    
  13  0.255298      -1.36532      -181.305       181.305       1331.35       1512.65    
  14  0.876488     -0.131833      -17.5064       17.5064       1405.23       1422.73    
  15  0.358010      -1.02719      -136.404       136.404       1448.61       1585.02    
  16  0.317480      -1.14734      -152.359       152.359       1407.45       1559.81    
  17  0.153422      -1.87456      -248.928       248.928       1356.13       1605.06    
  18  0.296162      -1.21685      -161.589       161.589       1437.49       1599.08    
  19  0.629760     -0.462417      -61.4055       61.4055       1407.76       1469.17    
  20  0.458345E-01  -3.08272      -409.362       409.362       1228.83       1638.19    
  21  0.209534      -1.56287      -207.537       207.537       1450.94       1658.48    
  22  0.490210E-01  -3.01551      -400.437       400.437       1445.71       1846.15    
  23  0.144817      -1.93229      -256.593       256.593       1412.16       1668.76    
  24  0.764061     -0.269107      -35.7355       35.7355       1418.12       1453.86    
  25  0.158664      -1.84097      -244.467       244.467       1119.26       1363.73    
  26  0.242818      -1.41544      -187.960       187.960       1447.80       1635.76    
  27  0.779950     -0.248525      -33.0023       33.0023       1439.42       1472.42    
  28  0.763580     -0.269737      -35.8191       35.8191       1549.69       1585.51    
  29  0.817639     -0.201335      -26.7357       26.7357       1407.55       1434.28    
  30  0.656802     -0.420373      -55.8225       55.8225       1389.10       1444.93    
  31  0.202192      -1.59854      -212.274       212.274       1519.51       1731.78    
  32  0.469647     -0.755773      -100.361       100.361       1555.06       1655.42    
  33  0.107456      -2.23067      -296.217       296.217       1347.44       1643.65    
  34  0.709118     -0.343734      -45.6453       45.6453       1545.03       1590.67    
  35  0.988480     -0.115868E-01  -1.53865       1.53865       1580.47       1582.00    
  36  0.645173     -0.438236      -58.1946       58.1946       1506.58       1564.78    
  37  0.583143     -0.539322      -71.6180       71.6180       1428.62       1500.24    
  38  0.276552E-01  -3.58794      -476.452       476.452       1496.95       1973.40    
  39  0.560517     -0.578896      -76.8732       76.8732       1527.51       1604.39    
  40  0.292779      -1.22834      -163.114       163.114       1619.56       1782.67    
  41  0.486207     -0.721121      -95.7595       95.7595       1608.08       1703.84    
  42  0.379142E-01  -3.27243      -434.554       434.554       1684.80       2119.35    
  43  0.459895     -0.776757      -103.148       103.148       1582.86       1686.00    
  44  0.810771     -0.209769      -27.8558       27.8558       1453.26       1481.11    
  45  0.189138      -1.66528      -221.136       221.136       1576.82       1797.96    
  46  0.509870     -0.673599      -89.4489       89.4489       1614.33       1703.78    
  47  0.468020E-01  -3.06183      -406.588       406.588       1683.61       2090.20    
  48  0.568404     -0.564922      -75.0175       75.0175       1603.60       1678.62    
  49  0.891250     -0.115130      -15.2885       15.2885       1560.83       1576.12    
  50  0.415261     -0.878849      -116.705       116.705       1581.32       1698.02    
  51  0.714019     -0.336846      -44.7306       44.7306       1781.61       1826.34    
  52  0.606207     -0.500534      -66.4672       66.4672       1734.78       1801.25    
  53  0.106011      -2.24421      -298.015       298.015       1738.05       2036.06    
  54  0.330348      -1.10761      -147.082       147.082       1735.45       1882.53    
  55  0.773475     -0.256862      -34.1094       34.1094       1732.84       1766.94    
  56  0.721841     -0.325951      -43.2839       43.2839       1719.19       1762.48    
  57  0.714980     -0.335501      -44.5521       44.5521       1637.85       1682.40    
  58  0.616486     -0.483719      -64.2343       64.2343       1809.33       1873.57    
  59  0.885098     -0.122057      -16.2082       16.2082       1747.07       1763.28    
  60  0.463686     -0.768549      -102.058       102.058       1436.49       1538.55    
  61  0.912951     -0.910727E-01  -12.0938       12.0938       1795.55       1807.65    
  62  0.819534     -0.199020      -26.4283       26.4283       1810.05       1836.48    
  63  0.771708     -0.259149      -34.4131       34.4131       1661.77       1696.18    
  64  0.812091E-03  -7.11590      -944.939       944.939       1770.80       2715.73    
  65  0.880919     -0.126790      -16.8367       16.8367       1805.42       1822.25    
  66  0.552031     -0.594151      -78.8988       78.8988       1848.25       1927.15    
  67  0.134353      -2.00729      -266.553       266.553       1827.18       2093.73    
  68  0.410649     -0.890016      -118.188       118.188       1632.39       1750.58    
  69  0.258019      -1.35472      -179.897       179.897       1705.34       1885.24    
  70  0.808143     -0.213016      -28.2870       28.2870       1790.45       1818.74    
  71  0.635973     -0.452599      -60.1019       60.1019       1569.79       1629.89    
  72  0.517431     -0.658879      -87.4942       87.4942       1666.68       1754.18    
  73  0.418067     -0.872114      -115.810       115.810       1561.33       1677.14    
  74  0.774048     -0.256121      -34.0110       34.0110       1794.63       1828.64    
loop,thermsimp(1:2)       46   30.5445       143.867    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       1175.64        129.88          0.64         29.93          1.40          0.05        161.90
Just calling func    0   0        161.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284       1076.81        128.60          0.68         30.24          1.81          0.04        161.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1076.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       46
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       47
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      283     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -56.6926       56.6926       1039.39       1096.08    
   2  0.474910     -0.744630      -98.8814       98.8814       1082.37       1181.25    
   3  0.125725      -2.07366      -275.367       275.367       1238.38       1513.75    
   4  0.950967     -0.502756E-01  -6.67622       6.67622       1145.34       1152.01    
   5  0.562475     -0.575409      -76.4101       76.4101       1226.27       1302.68    
   6  0.728528     -0.316729      -42.0593       42.0593       1136.23       1178.29    
   7  0.326058      -1.12068      -148.818       148.818       1281.30       1430.12    
   8  0.460979     -0.774402      -102.835       102.835       1119.26       1222.10    
   9  0.186861      -1.67739      -222.745       222.745       1240.71       1463.46    
  10  0.737773     -0.304119      -40.3848       40.3848       1332.88       1373.26    
  11  0.254524      -1.36836      -181.708       181.708       1244.63       1426.34    
  12  0.475390     -0.743621      -98.7474       98.7474       1250.82       1349.57    
  13  0.783107     -0.244486      -32.4659       32.4659       1405.23       1437.69    
  14  0.615536     -0.485261      -64.4391       64.4391       1207.13       1271.57    
  15  0.600710E-01  -2.81223      -373.443       373.443       1407.55       1780.99    
  16  0.834417     -0.181022      -24.0384       24.0384       1389.10       1413.14    
  17  0.270355      -1.30802      -173.695       173.695       1418.12       1591.82    
  18  0.408387     -0.895540      -118.921       118.921       1407.76       1526.68    
  19  0.248286      -1.39318      -185.003       185.003       1439.42       1624.42    
  20  0.586808E-01  -2.83564      -376.552       376.552       1453.26       1829.81    
  21  0.747050     -0.291623      -38.7254       38.7254       1428.62       1467.35    
  22  0.261869E-01  -3.64250      -483.697       483.697       1331.35       1815.04    
  23  0.495813     -0.701557      -93.1616       93.1616       1436.49       1529.65    
  24  0.600032     -0.510772      -67.8267       67.8267       1407.45       1475.27    
  25  0.936456     -0.656531E-01  -8.71825       8.71825       1506.58       1515.30    
  26  0.583260     -0.539121      -71.5914       71.5914       1560.83       1632.42    
  27  0.994266     -0.575021E-02 -0.763586      0.763586       1580.47       1581.23    
  28  0.149755      -1.89876      -252.141       252.141       1448.61       1700.75    
  29  0.751239     -0.286032      -37.9829       37.9829       1549.69       1587.68    
  30  0.703931     -0.351075      -46.6202       46.6202       1545.03       1591.65    
  31  0.998476     -0.152564E-02 -0.202594      0.202594       1437.49       1437.69    
  32  0.501495     -0.690161      -91.6483       91.6483       1527.51       1619.16    
  33  0.446468     -0.806387      -107.082       107.082       1356.13       1463.22    
  34  0.321376      -1.13514      -150.739       150.739       1569.79       1720.53    
  35  0.850901     -0.161459      -21.4406       21.4406       1447.80       1469.24    
  36  0.975881     -0.244142E-01  -3.24203       3.24203       1228.83       1232.07    
  37  0.386316     -0.951100      -126.299       126.299       1347.44       1473.74    
  38  0.782734     -0.244962      -32.5292       32.5292       1555.06       1587.59    
  39  0.142678      -1.94716      -258.569       258.569       1450.94       1709.51    
  40  0.509914     -0.673514      -89.4377       89.4377       1412.16       1501.60    
  41  0.211111      -1.55537      -206.542       206.542       1561.33       1767.87    
  42  0.212538      -1.54864      -205.647       205.647       1603.60       1809.25    
  43  0.889982     -0.116555      -15.4776       15.4776       1637.85       1653.32    
  44  0.769070     -0.262573      -34.8678       34.8678       1582.86       1617.72    
  45  0.792434     -0.232646      -30.8937       30.8937       1661.77       1692.66    
  46  0.250220E-01  -3.68800      -489.739       489.739       1581.32       2071.06    
  47  0.190304      -1.65913      -220.321       220.321       1614.33       1834.65    
  48  0.579595     -0.545425      -72.4284       72.4284       1608.08       1680.51    
  49  0.373376     -0.985170      -130.823       130.823       1519.51       1650.33    
  50  0.933620E-01  -2.37127      -314.887       314.887       1632.39       1947.28    
  51  0.628243     -0.464828      -61.7257       61.7257       1666.68       1728.41    
  52  0.737857     -0.304005      -40.3697       40.3697       1719.19       1759.56    
  53  0.430189     -0.843530      -112.015       112.015       1747.07       1859.08    
  54  0.957397     -0.435375E-01  -5.78145       5.78145       1732.84       1738.62    
  55  0.388126     -0.946424      -125.678       125.678       1619.56       1745.24    
  56  0.989586     -0.104686E-01  -1.39016       1.39016       1576.82       1578.21    
  57  0.754642     -0.281511      -37.3826       37.3826       1734.78       1772.16    
  58  0.404023E-01  -3.20887      -426.114       426.114       1795.55       2221.67    
  59  0.298112      -1.21029      -160.717       160.717       1790.45       1951.17    
  60  0.915557     -0.882223E-01  -11.7153       11.7153       1805.42       1817.13    
  61  0.205580E-01  -3.88450      -515.833       515.833       1781.61       2297.44    
  62  0.883530     -0.123830      -16.4438       16.4438       1794.63       1811.07    
  63  0.776014     -0.253585      -33.6742       33.6742       1810.05       1843.72    
  64  0.755316     -0.280619      -37.2641       37.2641       1445.71       1482.98    
  65  0.912949     -0.910754E-01  -12.0941       12.0941       1809.33       1821.43    
  66  0.262008      -1.33938      -177.860       177.860       1735.45       1913.31    
  67  0.636818     -0.451272      -59.9255       59.9255       1705.34       1765.27    
  68  0.545112     -0.606763      -80.5737       80.5737       1848.25       1928.83    
  69  0.261545      -1.34115      -178.095       178.095       1496.95       1675.05    
  70  0.375676     -0.979027      -130.008       130.008       1738.05       1868.06    
  71  0.160262      -1.83095      -243.136       243.136       1683.61       1926.75    
  72  0.113292      -2.17779      -289.194       289.194       1827.18       2116.37    
  73  0.528621     -0.637484      -84.6532       84.6532       1684.80       1769.45    
  74  0.297593      -1.21203      -160.948       160.948       1076.81       1237.75    
loop,thermsimp(1:2)       47   56.6926       98.8814    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       1152.28        129.81          0.64         29.77          1.39          0.05        161.66
Just calling func    0   0        161.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286       1042.84        128.30          0.63         29.79          2.48          0.04        161.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1042.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       47
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       48
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      285     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -152.973       152.973       1039.39       1192.36    
   2  0.452730     -0.792459      -105.233       105.233       1145.34       1250.57    
   3  0.463916     -0.768051      -101.992       101.992       1136.23       1238.22    
   4  0.531172E-01  -2.93526      -389.780       389.780       1082.37       1472.15    
   5  0.933113     -0.692290E-01  -9.19310       9.19310       1119.26       1128.46    
   6  0.107612      -2.22922      -296.024       296.024       1228.83       1524.85    
   7  0.228017      -1.47833      -196.312       196.312       1076.81       1273.12    
   8  0.766526     -0.265887      -35.3079       35.3079       1207.13       1242.44    
   9  0.676418     -0.390944      -51.9145       51.9145       1226.27       1278.19    
  10  0.220696      -1.51097      -200.646       200.646       1250.82       1451.47    
  11  0.959946E-01  -2.34346      -311.195       311.195       1332.88       1644.07    
  12  0.570655     -0.560971      -74.4929       74.4929       1389.10       1463.60    
  13  0.736426     -0.305947      -40.6275       40.6275       1244.63       1285.26    
  14  0.966377     -0.342013E-01  -4.54169       4.54169       1281.30       1285.84    
  15  0.797662     -0.226070      -30.0204       30.0204       1437.49       1467.51    
  16  0.413688     -0.882643      -117.209       117.209       1405.23       1522.44    
  17  0.200670      -1.60609      -213.277       213.277       1356.13       1569.41    
  18  0.843958E-01  -2.47224      -328.295       328.295       1240.71       1569.01    
  19  0.375580     -0.979284      -130.042       130.042       1428.62       1558.67    
  20  0.968669     -0.318322E-01  -4.22708       4.22708       1447.80       1452.03    
  21  0.379263     -0.969525      -128.746       128.746       1347.44       1476.18    
  22  0.421746     -0.863352      -114.647       114.647       1407.45       1522.09    
  23  0.639909     -0.446429      -59.2825       59.2825       1445.71       1504.99    
  24  0.549878     -0.598059      -79.4179       79.4179       1412.16       1491.58    
  25  0.226469      -1.48515      -197.217       197.217       1238.38       1435.60    
  26  0.547044E-02  -5.20840      -691.637       691.637       1506.58       2198.22    
  27  0.372808     -0.986692      -131.025       131.025       1407.76       1538.79    
  28  0.406819E-01  -3.20197      -425.198       425.198       1436.49       1861.69    
  29  0.664564     -0.408624      -54.2622       54.2622       1576.82       1631.09    
  30  0.708700     -0.344323      -45.7235       45.7235       1580.47       1626.19    
  31  0.863329     -0.146959      -19.5151       19.5151       1555.06       1574.58    
  32  0.406109     -0.901134      -119.664       119.664       1549.69       1669.36    
  33  0.101947      -2.28330      -303.206       303.206       1545.03       1848.24    
  34  0.660574     -0.414646      -55.0620       55.0620       1418.12       1473.18    
  35  0.839002     -0.175542      -23.3107       23.3107       1582.86       1606.17    
  36  0.735312E-01  -2.61005      -346.595       346.595       1527.51       1874.11    
  37  0.559917     -0.579967      -77.0153       77.0153       1439.42       1516.44    
  38  0.922004     -0.812055E-01  -10.7835       10.7835       1560.83       1571.62    
  39  0.891471     -0.114882      -15.2555       15.2555       1519.51       1534.76    
  40  0.489346     -0.714686      -94.9051       94.9051       1637.85       1732.75    
  41  0.583196     -0.539231      -71.6059       71.6059       1496.95       1568.56    
  42  0.989235     -0.108230E-01  -1.43722       1.43722       1608.08       1609.52    
  43  0.844741     -0.168725      -22.4055       22.4055       1661.77       1684.17    
  44  0.734982     -0.307909      -40.8880       40.8880       1448.61       1489.50    
  45  0.913246     -0.907495E-01  -12.0509       12.0509       1450.94       1462.99    
  46  0.605096     -0.502369      -66.7109       66.7109       1569.79       1636.50    
  47  0.623739     -0.472024      -62.6813       62.6813       1666.68       1729.36    
  48  0.780990     -0.247193      -32.8255       32.8255       1732.84       1765.66    
  49  0.615662E-01  -2.78764      -370.178       370.178       1619.56       1989.74    
  50  0.646443E-02  -5.04144      -669.466       669.466       1719.19       2388.66    
  51  0.848055     -0.164809      -21.8855       21.8855       1705.34       1727.23    
  52  0.740886     -0.299909      -39.8256       39.8256       1561.33       1601.15    
  53  0.350650      -1.04797      -139.162       139.162       1684.80       1823.96    
  54  0.873328     -0.135444      -17.9860       17.9860       1734.78       1752.77    
  55  0.353091      -1.04103      -138.241       138.241       1407.55       1545.79    
  56  0.867938     -0.141635      -18.8081       18.8081       1603.60       1622.41    
  57  0.746706     -0.292084      -38.7866       38.7866       1794.63       1833.41    
  58  0.701641     -0.354333      -47.0528       47.0528       1331.35       1378.40    
  59  0.454866     -0.787753      -104.608       104.608       1805.42       1910.03    
  60  0.172086      -1.75976      -233.683       233.683       1809.33       2043.01    
  61  0.633774     -0.456062      -60.5617       60.5617       1453.26       1513.82    
  62  0.321574      -1.13453      -150.657       150.657       1614.33       1764.99    
  63  0.171612      -1.76252      -234.049       234.049       1810.05       2044.10    
  64  0.417516     -0.873431      -115.985       115.985       1747.07       1863.05    
  65  0.735059     -0.307804      -40.8741       40.8741       1738.05       1778.92    
  66  0.259350      -1.34958      -179.214       179.214       1735.45       1914.67    
  67  0.498266     -0.696622      -92.5063       92.5063       1683.61       1776.12    
  68  0.309265      -1.17356      -155.840       155.840       1848.25       2004.09    
  69  0.612008     -0.491010      -65.2026       65.2026       1632.39       1697.59    
  70  0.624712E-01  -2.77305      -368.241       368.241       1790.45       2158.69    
  71  0.209490      -1.56308      -207.565       207.565       1581.32       1788.88    
  72  0.357768E-01  -3.33046      -442.260       442.260       1827.18       2269.44    
  73  0.669071     -0.401864      -53.3646       53.3646       1795.55       1848.92    
  74  0.513997     -0.665537      -88.3785       88.3785       1042.84       1131.21    
loop,thermsimp(1:2)       48   152.973       105.233    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287       1193.97        129.83          0.64         29.82          1.21          0.05        161.55
Just calling func    0   0        161.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288       1291.14        128.27          0.62         29.54          2.87          0.05        161.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1193.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       48
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       49
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      287     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02  -1.12889       1.12889       1119.26       1120.39    
   2  0.120199      -2.11861      -281.335       281.335       1042.84       1324.17    
   3  0.825835     -0.191360      -25.4112       25.4112       1039.39       1064.80    
   4  0.769690     -0.261767      -34.7607       34.7607       1136.23       1170.99    
   5  0.206534      -1.57729      -209.453       209.453       1207.13       1416.58    
   6  0.435455     -0.831363      -110.399       110.399       1145.34       1255.74    
   7  0.408718     -0.894731      -118.814       118.814       1076.81       1195.62    
   8  0.504170E-01  -2.98743      -396.708       396.708       1226.27       1622.98    
   9  0.943874     -0.577631E-01  -7.67051       7.67051       1244.63       1252.30    
  10  0.161493      -1.82330      -242.120       242.120       1281.30       1523.42    
  11  0.248560      -1.39207      -184.857       184.857       1331.35       1516.20    
  12  0.952734     -0.484195E-01  -6.42976       6.42976       1238.38       1244.81    
  13  0.349224      -1.05204      -139.704       139.704       1250.82       1390.53    
  14  0.245013      -1.40644      -186.765       186.765       1447.80       1634.57    
  15  0.713805     -0.337146      -44.7705       44.7705       1450.94       1495.71    
  16  0.206995      -1.57506      -209.157       209.157       1389.10       1598.26    
  17  0.573984     -0.555154      -73.7204       73.7204       1437.49       1511.21    
  18  0.791297     -0.234082      -31.0844       31.0844       1082.37       1113.45    
  19  0.599323     -0.511955      -67.9839       67.9839       1418.12       1486.10    
  20  0.632893     -0.457454      -60.7466       60.7466       1347.44       1408.18    
  21  0.920472     -0.828688E-01  -11.0044       11.0044       1448.61       1459.62    
  22  0.650695     -0.429713      -57.0628       57.0628       1412.16       1469.23    
  23  0.759327     -0.275322      -36.5608       36.5608       1445.71       1482.27    
  24  0.547563     -0.602278      -79.9780       79.9780       1453.26       1533.23    
  25  0.375945     -0.978312      -129.913       129.913       1439.42       1569.33    
  26  0.436593     -0.828753      -110.052       110.052       1407.45       1517.50    
  27  0.226348      -1.48568      -197.287       197.287       1405.23       1602.52    
  28  0.889061     -0.117589      -15.6150       15.6150       1228.83       1244.44    
  29  0.294563      -1.22226      -162.307       162.307       1519.51       1681.81    
  30  0.760606     -0.273640      -36.3374       36.3374       1407.76       1444.10    
  31  0.131934      -2.02545      -268.965       268.965       1407.55       1676.51    
  32  0.150887      -1.89123      -251.141       251.141       1428.62       1679.77    
  33  0.108814      -2.21811      -294.549       294.549       1496.95       1791.50    
  34  0.392982     -0.933991      -124.027       124.027       1240.71       1364.74    
  35  0.524209     -0.645865      -85.7661       85.7661       1356.13       1441.90    
  36  0.779329     -0.249322      -33.1081       33.1081       1560.83       1593.94    
  37  0.684136     -0.379599      -50.4079       50.4079       1555.06       1605.47    
  38  0.898629     -0.106885      -14.1936       14.1936       1561.33       1575.52    
  39  0.885947E-01  -2.42368      -321.847       321.847       1582.86       1904.70    
  40  0.865042     -0.144977      -19.2519       19.2519       1608.08       1627.34    
  41  0.953799     -0.473027E-01  -6.28145       6.28145       1603.60       1609.89    
  42  0.264945      -1.32823      -176.380       176.380       1580.47       1756.85    
  43  0.931660     -0.707875E-01  -9.40006       9.40006       1576.82       1586.22    
  44  0.273150      -1.29773      -172.329       172.329       1569.79       1742.12    
  45  0.773196     -0.257223      -34.1573       34.1573       1332.88       1367.03    
  46  0.936342     -0.657743E-01  -8.73434       8.73434       1549.69       1558.43    
  47  0.367272      -1.00165      -133.012       133.012       1661.77       1794.78    
  48  0.970907     -0.295243E-01  -3.92060       3.92060       1632.39       1636.31    
  49  0.722669     -0.324804      -43.1316       43.1316       1705.34       1748.47    
  50  0.247966      -1.39446      -185.175       185.175       1666.68       1851.86    
  51  0.730821     -0.313587      -41.6420       41.6420       1637.85       1679.49    
  52  0.379134     -0.969864      -128.791       128.791       1734.78       1863.57    
  53  0.326173      -1.12033      -148.771       148.771       1614.33       1763.10    
  54  0.555872     -0.587218      -77.9782       77.9782       1732.84       1810.81    
  55  0.600838     -0.509431      -67.6486       67.6486       1683.61       1751.26    
  56  0.714504     -0.336167      -44.6405       44.6405       1738.05       1782.69    
  57  0.190775      -1.65666      -219.992       219.992       1581.32       1801.31    
  58  0.206210      -1.57886      -209.661       209.661       1684.80       1894.46    
  59  0.855348     -0.156247      -20.7485       20.7485       1794.63       1815.38    
  60  0.886753     -0.120189      -15.9602       15.9602       1545.03       1560.99    
  61  0.391830     -0.936926      -124.417       124.417       1795.55       1919.97    
  62  0.986898     -0.131885E-01  -1.75134       1.75134       1436.49       1438.24    
  63  0.153388      -1.87479      -248.958       248.958       1747.07       1996.03    
  64  0.416027     -0.877006      -116.460       116.460       1527.51       1643.97    
  65  0.815763     -0.203631      -27.0407       27.0407       1805.42       1832.46    
  66  0.196403      -1.62759      -216.131       216.131       1735.45       1951.58    
  67  0.751119E-01  -2.58878      -343.770       343.770       1619.56       1963.33    
  68  0.297288      -1.21305      -161.084       161.084       1848.25       2009.34    
  69  0.984987     -0.151265E-01  -2.00869       2.00869       1809.33       1811.34    
  70  0.142264      -1.95007      -258.955       258.955       1810.05       2069.00    
  71  0.506200     -0.680824      -90.4085       90.4085       1790.45       1880.86    
  72  0.681243     -0.383837      -50.9707       50.9707       1506.58       1557.55    
  73  0.526734     -0.641059      -85.1279       85.1279       1827.18       1912.30    
  74  0.953143     -0.479904E-01  -6.37277       6.37277       1193.97       1200.34    
loop,thermsimp(1:2)       49   1.12889       281.335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289       2113.66        129.82          0.65         30.05          1.20          0.04        161.75
Just calling func    0   0        161.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    290       1217.14        129.61          0.66         30.13          1.21          0.05        161.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1217.14
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       49
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       50
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      289     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -622.730       622.730       1039.39       1662.12    
   2  0.902150     -0.102974      -13.6742       13.6742       1082.37       1096.04    
   3  0.375868     -0.978517      -129.940       129.940       1119.26       1249.20    
   4  0.136549E-01  -4.29366      -570.166       570.166       1136.23       1706.39    
   5  0.948329     -0.530533E-01  -7.04509       7.04509       1076.81       1083.85    
   6  0.489379E-01  -3.01720      -400.662       400.662       1193.97       1594.63    
   7  0.319400      -1.14131      -151.558       151.558       1228.83       1380.38    
   8  0.748008     -0.290342      -38.5552       38.5552       1238.38       1276.94    
   9  0.468015     -0.759255      -100.823       100.823       1244.63       1345.45    
  10  0.467420     -0.760527      -100.992       100.992       1145.34       1246.33    
  11  0.345085      -1.06396      -141.287       141.287       1042.84       1184.12    
  12  0.598981     -0.512526      -68.0597       68.0597       1240.71       1308.77    
  13  0.231496      -1.46319      -194.301       194.301       1332.88       1527.18    
  14  0.685496     -0.377613      -50.1442       50.1442       1250.82       1300.97    
  15  0.225803      -1.48809      -197.607       197.607       1347.44       1545.04    
  16  0.744991E-01  -2.59697      -344.858       344.858       1207.13       1551.99    
  17  0.436777     -0.828332      -109.996       109.996       1436.49       1546.49    
  18  0.241074      -1.42265      -188.918       188.918       1356.13       1545.05    
  19  0.728071     -0.317357      -42.1427       42.1427       1407.76       1449.91    
  20  0.228500      -1.47622      -196.031       196.031       1448.61       1644.64    
  21  0.423678     -0.858781      -114.040       114.040       1412.16       1526.20    
  22  0.812855     -0.207202      -27.5149       27.5149       1445.71       1473.23    
  23  0.810546     -0.210047      -27.8927       27.8927       1418.12       1446.01    
  24  0.113500      -2.17595      -288.950       288.950       1450.94       1739.89    
  25  0.197385      -1.62260      -215.470       215.470       1437.49       1652.96    
  26  0.101018      -2.29246      -304.422       304.422       1331.35       1635.77    
  27  0.857009E-01  -2.45689      -326.257       326.257       1407.45       1733.70    
  28  0.693668     -0.365762      -48.5705       48.5705       1281.30       1329.87    
  29  0.705918     -0.348256      -46.2458       46.2458       1453.26       1499.50    
  30  0.309793      -1.17185      -155.613       155.613       1506.58       1662.19    
  31  0.144843      -1.93210      -256.569       256.569       1549.69       1806.26    
  32  0.412916     -0.884511      -117.457       117.457       1545.03       1662.49    
  33  0.916661     -0.870180E-01  -11.5554       11.5554       1439.42       1450.98    
  34  0.933384E-01  -2.37152      -314.921       314.921       1561.33       1876.25    
  35  0.937330     -0.647200E-01  -8.59434       8.59434       1576.82       1585.42    
  36  0.958012     -0.428952E-01  -5.69617       5.69617       1560.83       1566.53    
  37  0.692877E-01  -2.66949      -354.488       354.488       1389.10       1743.59    
  38  0.228520E-01  -3.77872      -501.786       501.786       1405.23       1907.01    
  39  0.188135      -1.67060      -221.843       221.843       1555.06       1776.90    
  40  0.122595E-01  -4.40146      -584.481       584.481       1603.60       2188.08    
  41  0.776693     -0.252710      -33.5581       33.5581       1226.27       1259.83    
  42  0.571957     -0.558691      -74.1901       74.1901       1608.08       1682.27    
  43  0.313016      -1.16150      -154.239       154.239       1447.80       1602.04    
  44  0.512360     -0.668728      -88.8022       88.8022       1632.39       1721.19    
  45  0.874954     -0.133584      -17.7390       17.7390       1527.51       1545.25    
  46  0.617920     -0.481397      -63.9259       63.9259       1407.55       1471.47    
  47  0.529196     -0.636396      -84.5087       84.5087       1637.85       1722.35    
  48  0.389261E-02  -5.54867      -736.823       736.823       1428.62       2165.45    
  49  0.323386E-01  -3.43149      -455.677       455.677       1519.51       1975.18    
  50  0.900641     -0.104648      -13.8965       13.8965       1569.79       1583.68    
  51  0.872638     -0.136235      -18.0910       18.0910       1705.34       1723.43    
  52  0.965349     -0.352660E-01  -4.68307       4.68307       1683.61       1688.30    
  53  0.679490     -0.386413      -51.3128       51.3128       1580.47       1631.78    
  54  0.101129      -2.29136      -304.276       304.276       1614.33       1918.61    
  55  0.885746     -0.121326      -16.1111       16.1111       1738.05       1754.16    
  56  0.307763      -1.17843      -156.486       156.486       1496.95       1653.44    
  57  0.978164     -0.220781E-01  -2.93181       2.93181       1661.77       1664.70    
  58  0.678582     -0.387750      -51.4903       51.4903       1581.32       1632.81    
  59  0.573317     -0.556317      -73.8748       73.8748       1732.84       1806.71    
  60  0.541891     -0.612690      -81.3607       81.3607       1809.33       1890.69    
  61  0.110478      -2.20294      -292.534       292.534       1794.63       2087.16    
  62  0.125637      -2.07436      -275.459       275.459       1805.42       2080.88    
  63  0.580733     -0.543464      -72.1680       72.1680       1666.68       1738.85    
  64  0.261777      -1.34026      -177.977       177.977       1734.78       1912.76    
  65  0.500314     -0.692519      -91.9614       91.9614       1790.45       1882.41    
  66  0.810055     -0.210653      -27.9731       27.9731       1684.80       1712.77    
  67  0.548357     -0.600828      -79.7856       79.7856       1582.86       1662.64    
  68  0.260831      -1.34388      -178.458       178.458       1827.18       2005.63    
  69  0.276330      -1.28616      -170.793       170.793       1795.55       1966.35    
  70  0.637232     -0.450622      -59.8393       59.8393       1735.45       1795.29    
  71  0.324688      -1.12489      -149.377       149.377       1619.56       1768.94    
  72  0.157175      -1.85039      -245.719       245.719       1747.07       1992.79    
  73  0.960006     -0.408161E-01  -5.42008       5.42008       1848.25       1853.67    
  74  0.584715     -0.536631      -71.2606       71.2606       1217.14       1288.40    
loop,thermsimp(1:2)       50   622.730       13.6742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291       1286.40        129.88          0.65         29.92          1.56          0.05        162.06
Just calling func    0   0        162.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1286.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       50
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       51
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      290     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -13.4886       13.4886       1076.81       1090.29    
   2  0.808902     -0.212077      -28.1623       28.1623       1082.37       1110.53    
   3  0.762147     -0.271616      -36.0686       36.0686       1042.84       1078.90    
   4  0.287851      -1.24531      -165.368       165.368       1145.34       1310.71    
   5  0.212418      -1.54920      -205.722       205.722       1119.26       1324.99    
   6  0.380717     -0.965699      -128.238       128.238       1226.27       1354.51    
   7  0.877795     -0.130342      -17.3085       17.3085       1238.38       1255.69    
   8  0.836834     -0.178130      -23.6543       23.6543       1217.14       1240.80    
   9  0.435183     -0.831988      -110.482       110.482       1250.82       1361.31    
  10  0.900166     -0.105177      -13.9667       13.9667       1240.71       1254.68    
  11  0.175095      -1.74242      -231.381       231.381       1281.30       1512.68    
  12  0.322232      -1.13248      -150.385       150.385       1244.63       1395.02    
  13  0.706662     -0.347203      -46.1061       46.1061       1228.83       1274.93    
  14  0.494297     -0.704618      -93.5681       93.5681       1418.12       1511.69    
  15  0.324383      -1.12583      -149.502       149.502       1407.76       1557.27    
  16  0.777122     -0.252157      -33.4846       33.4846       1439.42       1472.91    
  17  0.499054E-01  -2.99763      -398.063       398.063       1407.55       1805.61    
  18  0.489193E-01  -3.01758      -400.713       400.713       1445.71       1846.42    
  19  0.480140     -0.733678      -97.4270       97.4270       1453.26       1550.68    
  20  0.914126     -0.897865E-01  -11.9230       11.9230       1412.16       1424.09    
  21  0.613008     -0.489378      -64.9858       64.9858       1332.88       1397.86    
  22  0.470573     -0.753804      -100.100       100.100       1347.44       1447.54    
  23  0.614279     -0.487307      -64.7108       64.7108       1356.13       1420.85    
  24  0.410529     -0.890308      -118.226       118.226       1527.51       1645.74    
  25  0.582759     -0.539981      -71.7055       71.7055       1436.49       1508.20    
  26  0.422753E-01  -3.16355      -420.096       420.096       1207.13       1627.23    
  27  0.717044     -0.332618      -44.1692       44.1692       1560.83       1605.00    
  28  0.420765     -0.865682      -114.956       114.956       1569.79       1684.74    
  29  0.801392     -0.221405      -29.4009       29.4009       1576.82       1606.22    
  30  0.426188     -0.852875      -113.255       113.255       1193.97       1307.23    
  31  0.338881      -1.08211      -143.696       143.696       1447.80       1591.50    
  32  0.398160     -0.920902      -122.289       122.289       1580.47       1702.76    
  33  0.938837     -0.631132E-01  -8.38097       8.38097       1581.32       1589.70    
  34  0.411860E-01  -3.18966      -423.563       423.563       1331.35       1754.91    
  35  0.180703      -1.71090      -227.195       227.195       1448.61       1675.81    
  36  0.617012     -0.482867      -64.1212       64.1212       1437.49       1501.61    
  37  0.788612     -0.237480      -31.5356       31.5356       1496.95       1528.49    
  38  0.381719     -0.963071      -127.889       127.889       1039.39       1167.28    
  39  0.376038     -0.978064      -129.880       129.880       1506.58       1636.46    
  40  0.105996      -2.24435      -298.034       298.034       1545.03       1843.06    
  41  0.769932E-01  -2.56404      -340.485       340.485       1582.86       1923.34    
  42  0.365987      -1.00516      -133.478       133.478       1661.77       1795.24    
  43  0.731763     -0.312298      -41.4709       41.4709       1608.08       1649.55    
  44  0.447137     -0.804891      -106.884       106.884       1683.61       1790.50    
  45  0.273519      -1.29638      -172.150       172.150       1136.23       1308.38    
  46  0.870614     -0.138556      -18.3993       18.3993       1684.80       1703.20    
  47  0.822463     -0.195452      -25.9545       25.9545       1632.39       1658.35    
  48  0.456061     -0.785129      -104.259       104.259       1637.85       1742.11    
  49  0.603947     -0.504269      -66.9633       66.9633       1705.34       1772.30    
  50  0.342037      -1.07284      -142.465       142.465       1407.45       1549.91    
  51  0.693527     -0.365965      -48.5975       48.5975       1666.68       1715.28    
  52  0.958323     -0.425703E-01  -5.65302       5.65302       1450.94       1456.59    
  53  0.587360     -0.532117      -70.6612       70.6612       1389.10       1459.77    
  54  0.364787      -1.00844      -133.914       133.914       1738.05       1871.96    
  55  0.878785     -0.129215      -17.1588       17.1588       1619.56       1636.72    
  56  0.273053      -1.29809      -172.377       172.377       1555.06       1727.44    
  57  0.896174     -0.109620      -14.5568       14.5568       1735.45       1750.01    
  58  0.239994      -1.42714      -189.514       189.514       1549.69       1739.21    
  59  0.595505E-01  -2.82093      -374.599       374.599       1732.84       2107.43    
  60  0.353403      -1.04015      -138.124       138.124       1848.25       1986.38    
  61  0.729282     -0.315695      -41.9220       41.9220       1561.33       1603.25    
  62  0.231928      -1.46133      -194.054       194.054       1790.45       1984.50    
  63  0.107599      -2.22934      -296.040       296.040       1809.33       2105.37    
  64  0.641905     -0.443315      -58.8689       58.8689       1405.23       1464.10    
  65  0.701312     -0.354803      -47.1152       47.1152       1734.78       1781.90    
  66  0.245029      -1.40638      -186.757       186.757       1614.33       1801.09    
  67  0.223204      -1.49967      -199.145       199.145       1795.55       1994.70    
  68  0.335163      -1.09314      -145.161       145.161       1519.51       1664.67    
  69  0.921199     -0.820796E-01  -10.8996       10.8996       1747.07       1757.97    
  70  0.395288     -0.928141      -123.250       123.250       1827.18       1950.43    
  71  0.956072     -0.449224E-01  -5.96537       5.96537       1805.42       1811.38    
  72  0.734146     -0.309048      -41.0393       41.0393       1794.63       1835.67    
  73  0.113032      -2.18009      -289.499       289.499       1428.62       1718.12    
  74  0.726092     -0.320079      -42.5042       42.5042       1286.40       1328.91    
loop,thermsimp(1:2)       51   13.4886       28.1623    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       1186.97        129.96          0.65         30.20          1.32          0.05        162.19
Just calling func    0   0        162.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1186.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       51
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       52
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      291     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -114.853       114.853       1042.84       1157.69    
   2  0.315135      -1.15476      -153.343       153.343       1076.81       1230.15    
   3  0.696708     -0.361389      -47.9898       47.9898       1082.37       1130.36    
   4  0.922116     -0.810842E-01  -10.7674       10.7674       1039.39       1050.16    
   5  0.908133     -0.963648E-01  -12.7965       12.7965       1217.14       1229.94    
   6  0.174132      -1.74794      -232.114       232.114       1240.71       1472.82    
   7  0.490629     -0.712068      -94.5574       94.5574       1238.38       1332.94    
   8  0.382604     -0.960755      -127.581       127.581       1228.83       1356.41    
   9  0.985159     -0.149527E-01  -1.98561       1.98561       1193.97       1195.96    
  10  0.182634      -1.70027      -225.784       225.784       1136.23       1362.01    
  11  0.554568     -0.589565      -78.2899       78.2899       1145.34       1223.63    
  12  0.999791     -0.209153E-03 -0.277740E-01  0.277740E-01   1119.26       1119.29    
  13  0.284621      -1.25660      -166.867       166.867       1286.40       1453.27    
  14  0.920706E-01  -2.38520      -316.737       316.737       1226.27       1543.01    
  15  0.243911      -1.41095      -187.364       187.364       1250.82       1438.19    
  16  0.866829     -0.142914      -18.9779       18.9779       1244.63       1263.61    
  17  0.640039     -0.446225      -59.2555       59.2555       1332.88       1392.13    
  18  0.737488E-01  -2.60709      -346.202       346.202       1356.13       1702.34    
  19  0.511916     -0.669594      -88.9172       88.9172       1412.16       1501.08    
  20  0.870220     -0.139009      -18.4594       18.4594       1347.44       1365.90    
  21  0.594690     -0.519714      -69.0142       69.0142       1450.94       1519.95    
  22  0.659508     -0.416262      -55.2765       55.2765       1389.10       1444.38    
  23  0.702023     -0.353789      -46.9806       46.9806       1405.23       1452.21    
  24  0.178121      -1.72529      -229.106       229.106       1439.42       1668.53    
  25  0.622271     -0.474379      -62.9940       62.9940       1437.49       1500.48    
  26  0.877027     -0.131217      -17.4247       17.4247       1436.49       1453.92    
  27  0.206753      -1.57623      -209.312       209.312       1418.12       1627.43    
  28  0.927381     -0.753912E-01  -10.0114       10.0114       1281.30       1291.31    
  29  0.610274     -0.493848      -65.5794       65.5794       1496.95       1562.53    
  30  0.453676     -0.790373      -104.956       104.956       1407.45       1512.40    
  31  0.203335      -1.59290      -211.525       211.525       1453.26       1664.78    
  32  0.558786     -0.581989      -77.2838       77.2838       1407.76       1485.05    
  33  0.685013     -0.378317      -50.2377       50.2377       1581.32       1631.56    
  34  0.753574     -0.282929      -37.5709       37.5709       1447.80       1485.37    
  35  0.736990E-01  -2.60777      -346.292       346.292       1561.33       1907.62    
  36  0.719848     -0.328716      -43.6510       43.6510       1560.83       1604.48    
  37  0.177345E-01  -4.03224      -535.452       535.452       1576.82       2112.28    
  38  0.277334E-01  -3.58512      -476.077       476.077       1207.13       1683.21    
  39  0.228604      -1.47576      -195.970       195.970       1506.58       1702.55    
  40  0.874609     -0.133979      -17.7914       17.7914       1619.56       1637.35    
  41  0.875699     -0.132733      -17.6260       17.6260       1527.51       1545.14    
  42  0.540874     -0.614569      -81.6102       81.6102       1608.08       1689.69    
  43  0.343108E-01  -3.37230      -447.816       447.816       1632.39       2080.21    
  44  0.982551     -0.176027E-01  -2.33751       2.33751       1519.51       1521.84    
  45  0.201823      -1.60037      -212.517       212.517       1448.61       1661.13    
  46  0.116838      -2.14697      -285.102       285.102       1569.79       1854.89    
  47  0.520586     -0.652800      -86.6870       86.6870       1580.47       1667.15    
  48  0.515528     -0.662563      -87.9835       87.9835       1684.80       1772.78    
  49  0.814407     -0.205295      -27.2617       27.2617       1666.68       1693.94    
  50  0.436930     -0.827981      -109.950       109.950       1428.62       1538.57    
  51  0.802441     -0.220097      -29.2272       29.2272       1555.06       1584.29    
  52  0.366662      -1.00331      -133.233       133.233       1549.69       1682.93    
  53  0.915349     -0.884494E-01  -11.7454       11.7454       1637.85       1649.59    
  54  0.619345     -0.479093      -63.6201       63.6201       1735.45       1799.07    
  55  0.984856     -0.152594E-01  -2.02634       2.02634       1331.35       1333.37    
  56  0.594834     -0.519472      -68.9821       68.9821       1747.07       1816.05    
  57  0.295281      -1.21983      -161.984       161.984       1705.34       1867.33    
  58  0.363721      -1.01137      -134.302       134.302       1734.78       1869.08    
  59  0.113237      -2.17827      -289.258       289.258       1683.61       1972.87    
  60  0.684322     -0.379327      -50.3718       50.3718       1661.77       1712.14    
  61  0.172853E-01  -4.05790      -538.859       538.859       1614.33       2153.19    
  62  0.910904     -0.933174E-01  -12.3919       12.3919       1407.55       1419.94    
  63  0.792218     -0.232919      -30.9299       30.9299       1805.42       1836.35    
  64  0.644894E-02  -5.04384      -669.785       669.785       1794.63       2464.41    
  65  0.674921     -0.393160      -52.2088       52.2088       1545.03       1597.24    
  66  0.713821     -0.337122      -44.7674       44.7674       1445.71       1490.48    
  67  0.122871      -2.09662      -278.416       278.416       1738.05       2016.47    
  68  0.809527     -0.211305      -28.0597       28.0597       1582.86       1610.92    
  69  0.266630      -1.32189      -175.538       175.538       1827.18       2002.71    
  70  0.457713     -0.781513      -103.779       103.779       1790.45       1894.23    
  71  0.510631     -0.672109      -89.2511       89.2511       1848.25       1937.51    
  72  0.512413     -0.668624      -88.7883       88.7883       1795.55       1884.34    
  73  0.104223      -2.26122      -300.274       300.274       1809.33       2109.61    
  74  0.982940     -0.172071E-01  -2.28497       2.28497       1186.97       1189.26    
loop,thermsimp(1:2)       52   114.853       153.343    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293       1552.59        130.04          0.66         29.95          1.25          0.05        161.95
Just calling func    0   0        161.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1552.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       52
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       53
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      292     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -448.687       448.687       1039.39       1488.08    
   2  0.714674     -0.335928      -44.6088       44.6088       1119.26       1163.87    
   3  0.977792     -0.224587E-01  -2.98235       2.98235       1082.37       1085.35    
   4  0.771231     -0.259767      -34.4952       34.4952       1042.84       1077.33    
   5  0.265148      -1.32747      -176.278       176.278       1186.97       1363.25    
   6  0.559491     -0.580728      -77.1164       77.1164       1193.97       1271.09    
   7  0.934824E-01  -2.36998      -314.716       314.716       1145.34       1460.05    
   8  0.928182     -0.745278E-01  -9.89674       9.89674       1217.14       1227.04    
   9  0.464905     -0.765922      -101.709       101.709       1076.81       1178.51    
  10  0.871919     -0.137059      -18.2004       18.2004       1244.63       1262.83    
  11  0.982233     -0.179265E-01  -2.38050       2.38050       1281.30       1283.68    
  12  0.426376     -0.852433      -113.197       113.197       1238.38       1351.58    
  13  0.471128E-01  -3.05521      -405.709       405.709       1331.35       1737.06    
  14  0.686439     -0.376238      -49.9617       49.9617       1228.83       1278.79    
  15  0.117826      -2.13855      -283.983       283.983       1136.23       1420.21    
  16  0.756878E-01  -2.58114      -342.756       342.756       1347.44       1690.19    
  17  0.196211      -1.62856      -216.261       216.261       1332.88       1549.14    
  18  0.431930     -0.839491      -111.478       111.478       1407.55       1519.02    
  19  0.707794     -0.345602      -45.8935       45.8935       1250.82       1296.72    
  20  0.174358E-01  -4.04923      -537.708       537.708       1389.10       1926.81    
  21  0.267976      -1.31686      -174.869       174.869       1405.23       1580.10    
  22  0.793866     -0.230841      -30.6540       30.6540       1286.40       1317.06    
  23  0.135848      -1.99622      -265.084       265.084       1436.49       1701.58    
  24  0.663958     -0.409536      -54.3834       54.3834       1240.71       1295.09    
  25  0.281101      -1.26904      -168.519       168.519       1407.76       1576.28    
  26  0.606466     -0.500106      -66.4104       66.4104       1447.80       1514.21    
  27  0.940056     -0.618158E-01  -8.20869       8.20869       1445.71       1453.92    
  28  0.124106      -2.08662      -277.088       277.088       1437.49       1714.58    
  29  0.205090      -1.58431      -210.384       210.384       1412.16       1622.55    
  30  0.852960     -0.159043      -21.1197       21.1197       1407.45       1428.57    
  31  0.241701      -1.42005      -188.572       188.572       1450.94       1639.51    
  32  0.744368     -0.295220      -39.2031       39.2031       1519.51       1558.71    
  33  0.279909      -1.27329      -169.084       169.084       1428.62       1597.71    
  34  0.142971      -1.94511      -258.297       258.297       1226.27       1484.57    
  35  0.367233      -1.00176      -133.026       133.026       1527.51       1660.54    
  36  0.839044     -0.175493      -23.3041       23.3041       1496.95       1520.26    
  37  0.762369     -0.271325      -36.0300       36.0300       1555.06       1591.09    
  38  0.414704     -0.880189      -116.883       116.883       1545.03       1661.91    
  39  0.294445      -1.22266      -162.361       162.361       1560.83       1723.19    
  40  0.296874      -1.21445      -161.269       161.269       1582.86       1744.13    
  41  0.834777     -0.180590      -23.9811       23.9811       1418.12       1442.10    
  42  0.399354     -0.917907      -121.891       121.891       1581.32       1703.21    
  43  0.948666     -0.526981E-01  -6.99792       6.99792       1619.56       1626.56    
  44  0.306553E-01  -3.48495      -462.776       462.776       1637.85       2100.62    
  45  0.768324E-01  -2.56613      -340.763       340.763       1448.61       1789.38    
  46  0.723813     -0.323222      -42.9215       42.9215       1453.26       1496.18    
  47  0.912222     -0.918720E-01  -12.1999       12.1999       1580.47       1592.67    
  48  0.846322     -0.166855      -22.1571       22.1571       1439.42       1461.58    
  49  0.704090     -0.350850      -46.5903       46.5903       1549.69       1596.28    
  50  0.443839     -0.812294      -107.867       107.867       1207.13       1315.00    
  51  0.790462     -0.235137      -31.2245       31.2245       1608.08       1639.31    
  52  0.134239      -2.00813      -266.665       266.665       1666.68       1933.35    
  53  0.720618     -0.327646      -43.5090       43.5090       1356.13       1399.64    
  54  0.489652     -0.714061      -94.8220       94.8220       1506.58       1601.40    
  55  0.493891E-01  -3.00802      -399.444       399.444       1661.77       2061.21    
  56  0.524875     -0.644595      -85.5975       85.5975       1684.80       1770.40    
  57  0.919627     -0.837868E-01  -11.1263       11.1263       1735.45       1746.58    
  58  0.372709     -0.986956      -131.061       131.061       1747.07       1878.13    
  59  0.121203      -2.11029      -280.231       280.231       1805.42       2085.65    
  60  0.195183      -1.63382      -216.959       216.959       1569.79       1786.75    
  61  0.325168      -1.12341      -149.181       149.181       1705.34       1854.52    
  62  0.248863      -1.39085      -184.695       184.695       1734.78       1919.48    
  63  0.910643     -0.936046E-01  -12.4300       12.4300       1795.55       1807.98    
  64  0.131372E-01  -4.33230      -575.298       575.298       1790.45       2365.75    
  65  0.308708      -1.17536      -156.079       156.079       1561.33       1717.41    
  66  0.863163     -0.147151      -19.5406       19.5406       1848.25       1867.79    
  67  0.437001     -0.827819      -109.928       109.928       1683.61       1793.54    
  68  0.933437     -0.688822E-01  -9.14704       9.14704       1827.18       1836.32    
  69  0.595007     -0.519181      -68.9435       68.9435       1738.05       1806.99    
  70  0.184309      -1.69114      -224.571       224.571       1632.39       1856.96    
  71  0.340956      -1.07600      -142.885       142.885       1809.33       1952.22    
  72  0.582092     -0.541127      -71.8577       71.8577       1576.82       1648.68    
  73  0.451420     -0.795358      -105.618       105.618       1614.33       1719.95    
  74  0.721473E-01  -2.62905      -349.118       349.118       1552.59       1901.71    
loop,thermsimp(1:2)       53   448.687       44.6088    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       1157.00        129.90          0.66         29.98          1.33          0.04        161.91
Just calling func    0   0        161.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1157.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       53
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       54
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      293
neval,tstepnext:      293     293

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -64.5549       64.5549       1042.84       1107.39    
   2  0.438442     -0.824528      -109.491       109.491       1082.37       1191.86    
   3  0.666371     -0.405908      -53.9017       53.9017       1119.26       1173.16    
   4  0.419797     -0.867984      -115.262       115.262       1076.81       1192.07    
   5  0.662493     -0.411746      -54.6768       54.6768       1217.14       1271.82    
   6  0.261021      -1.34315      -178.361       178.361       1244.63       1422.99    
   7  0.451731     -0.794667      -105.526       105.526       1193.97       1299.50    
   8  0.858047     -0.153096      -20.3300       20.3300       1228.83       1249.16    
   9  0.678039     -0.388550      -51.5966       51.5966       1281.30       1332.90    
  10  0.257304      -1.35750      -180.265       180.265       1240.71       1420.98    
  11  0.379774     -0.968178      -128.567       128.567       1250.82       1379.39    
  12  0.200314      -1.60787      -213.513       213.513       1207.13       1420.65    
  13  0.702955E-01  -2.65505      -352.571       352.571       1286.40       1638.97    
  14  0.846007     -0.167228      -22.2066       22.2066       1238.38       1260.59    
  15  0.692217     -0.367856      -48.8486       48.8486       1186.97       1235.82    
  16  0.830541     -0.185678      -24.6567       24.6567       1356.13       1380.79    
  17  0.162133E-02  -6.42451      -853.127       853.127       1136.23       1989.35    
  18  0.829216     -0.187275      -24.8687       24.8687       1407.45       1432.32    
  19  0.464918     -0.765894      -101.705       101.705       1418.12       1519.83    
  20  0.204157      -1.58887      -210.990       210.990       1445.71       1656.70    
  21  0.203429      -1.59244      -211.464       211.464       1145.34       1356.80    
  22  0.403935     -0.906500      -120.377       120.377       1439.42       1559.80    
  23  0.508037     -0.677201      -89.9273       89.9273       1226.27       1316.20    
  24  0.337702      -1.08559      -144.158       144.158       1039.39       1183.55    
  25  0.375672     -0.979039      -130.009       130.009       1453.26       1583.26    
  26  0.218755      -1.51980      -201.819       201.819       1447.80       1649.62    
  27  0.803422     -0.218876      -29.0651       29.0651       1407.55       1436.61    
  28  0.324101      -1.12670      -149.618       149.618       1496.95       1646.57    
  29  0.804001     -0.218155      -28.9693       28.9693       1332.88       1361.84    
  30  0.727676     -0.317899      -42.2147       42.2147       1519.51       1561.72    
  31  0.769479     -0.262042      -34.7973       34.7973       1407.76       1442.56    
  32  0.632293     -0.458402      -60.8724       60.8724       1405.23       1466.10    
  33  0.300459      -1.20244      -159.676       159.676       1555.06       1714.74    
  34  0.567362     -0.566759      -75.2614       75.2614       1580.47       1655.73    
  35  0.803345     -0.218971      -29.0778       29.0778       1549.69       1578.77    
  36  0.764706     -0.268264      -35.6235       35.6235       1428.62       1464.25    
  37  0.159444      -1.83606      -243.815       243.815       1506.58       1750.40    
  38  0.951670     -0.495367E-01  -6.57810       6.57810       1412.16       1418.74    
  39  0.769198     -0.262407      -34.8457       34.8457       1619.56       1654.40    
  40  0.916532     -0.871588E-01  -11.5740       11.5740       1608.08       1619.66    
  41  0.146117E-01  -4.22593      -561.173       561.173       1450.94       2012.11    
  42  0.196164      -1.62880      -216.293       216.293       1576.82       1793.12    
  43  0.399482     -0.917586      -121.849       121.849       1527.51       1649.36    
  44  0.646732     -0.435823      -57.8741       57.8741       1545.03       1602.90    
  45  0.207790      -1.57122      -208.647       208.647       1347.44       1556.08    
  46  0.276388      -1.28595      -170.765       170.765       1436.49       1607.26    
  47  0.410494     -0.890394      -118.238       118.238       1581.32       1699.56    
  48  0.437747     -0.826115      -109.702       109.702       1437.49       1547.19    
  49  0.414886     -0.879752      -116.825       116.825       1561.33       1678.15    
  50  0.453890     -0.789901      -104.893       104.893       1614.33       1719.23    
  51  0.141383      -1.95628      -259.780       259.780       1560.83       1820.61    
  52  0.264375      -1.33039      -176.666       176.666       1331.35       1508.01    
  53  0.598599     -0.513163      -68.1443       68.1443       1582.86       1651.00    
  54  0.716868     -0.332864      -44.2019       44.2019       1735.45       1779.65    
  55  0.547773     -0.601894      -79.9271       79.9271       1684.80       1764.73    
  56  0.920744     -0.825729E-01  -10.9651       10.9651       1569.79       1580.75    
  57  0.394656     -0.929742      -123.463       123.463       1448.61       1572.08    
  58  0.439395     -0.822357      -109.203       109.203       1683.61       1792.82    
  59  0.890216     -0.116291      -15.4426       15.4426       1738.05       1753.49    
  60  0.693208     -0.366425      -48.6585       48.6585       1795.55       1844.21    
  61  0.747783     -0.290642      -38.5952       38.5952       1827.18       1865.77    
  62  0.408813     -0.894498      -118.783       118.783       1705.34       1824.12    
  63  0.175963E-03  -8.64523      -1148.02       1148.02       1632.39       2780.41    
  64  0.715035     -0.335424      -44.5419       44.5419       1848.25       1892.80    
  65  0.895535     -0.110334      -14.6516       14.6516       1747.07       1761.72    
  66  0.332554      -1.10095      -146.199       146.199       1552.59       1698.79    
  67  0.594595     -0.519874      -69.0355       69.0355       1734.78       1803.82    
  68  0.883454     -0.123916      -16.4552       16.4552       1389.10       1405.56    
  69  0.727087     -0.318709      -42.3222       42.3222       1666.68       1709.00    
  70  0.760468     -0.273821      -36.3614       36.3614       1809.33       1845.69    
  71  0.915560     -0.882188E-01  -11.7148       11.7148       1661.77       1673.48    
  72  0.479318     -0.735391      -97.6545       97.6545       1805.42       1903.07    
  73  0.820230     -0.198170      -26.3156       26.3156       1637.85       1664.16    
  74  0.214600      -1.53898      -204.365       204.365       1157.00       1361.36    
loop,thermsimp(1:2)       54   64.5549       109.491    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       1300.22        129.96          0.68         30.03          1.27          0.05        161.99
Just calling func    0   0        161.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1300.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    132.793               293
loop is:       54
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    132.793               293
loop is:       55
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    66.3963               366

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      294     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -31.0895       31.0895       1042.84       1073.93    
   2  0.909442     -0.949244E-01  -6.30263       6.30263       1119.26       1125.57    
   3  0.449837     -0.798870      -53.0420       53.0420       1039.39       1092.43    
   4  0.761598     -0.272336      -18.0821       18.0821       1082.37       1100.45    
   5  0.706800     -0.347007      -23.0400       23.0400       1076.81       1099.85    
   6  0.214343      -1.54018      -102.262       102.262       1186.97       1289.23    
   7  0.855661     -0.155881      -10.3499       10.3499       1228.83       1239.18    
   8  0.432924E-01  -3.13978      -208.470       208.470       1238.38       1446.85    
   9  0.902784     -0.102271      -6.79045       6.79045       1217.14       1223.93    
  10  0.706965     -0.346774      -23.0245       23.0245       1193.97       1217.00    
  11  0.826667     -0.190354      -12.6388       12.6388       1226.27       1238.91    
  12  0.824436     -0.193055      -12.8182       12.8182       1281.30       1294.12    
  13  0.442772     -0.814700      -54.0931       54.0931       1145.34       1199.43    
  14  0.416355     -0.876217      -58.1776       58.1776       1157.00       1215.18    
  15  0.268464      -1.31504      -87.3137       87.3137       1332.88       1420.19    
  16  0.779742     -0.248792      -16.5189       16.5189       1250.82       1267.34    
  17  0.406799E-01  -3.20202      -212.602       212.602       1356.13       1568.74    
  18  0.975397     -0.249106E-01  -1.65397       1.65397       1389.10       1390.76    
  19  0.425150E-01  -3.15790      -209.673       209.673       1412.16       1621.84    
  20  0.302481      -1.19574      -79.3925       79.3925       1207.13       1286.52    
  21  0.732033     -0.311930      -20.7110       20.7110       1240.71       1261.42    
  22  0.774561     -0.255459      -16.9616       16.9616       1244.63       1261.59    
  23  0.899897     -0.105475      -7.00314       7.00314       1407.45       1414.45    
  24  0.549624     -0.598520      -39.7396       39.7396       1407.55       1447.29    
  25  0.143543      -1.94112      -128.883       128.883       1407.76       1536.65    
  26  0.229055      -1.47379      -97.8545       97.8545       1428.62       1526.48    
  27  0.334206      -1.09600      -72.7702       72.7702       1405.23       1478.00    
  28  0.301620      -1.19859      -79.5818       79.5818       1331.35       1410.93    
  29  0.856030     -0.155449      -10.3213       10.3213       1418.12       1428.44    
  30  0.978878     -0.213482E-01  -1.41744       1.41744       1437.49       1438.91    
  31  0.890790E-01  -2.41823      -160.562       160.562       1347.44       1508.00    
  32  0.275076      -1.29071      -85.6982       85.6982       1439.42       1525.12    
  33  0.506865     -0.679511      -45.1170       45.1170       1519.51       1564.62    
  34  0.628553     -0.464334      -30.8301       30.8301       1448.61       1479.44    
  35  0.787972     -0.238293      -15.8218       15.8218       1549.69       1565.52    
  36  0.746168     -0.292804      -19.4411       19.4411       1569.79       1589.23    
  37  0.116954      -2.14598      -142.485       142.485       1453.26       1595.74    
  38  0.245368      -1.40500      -93.2866       93.2866       1545.03       1638.32    
  39  0.873952     -0.134729      -8.94553       8.94553       1436.49       1445.44    
  40  0.850596     -0.161818      -10.7441       10.7441       1608.08       1618.83    
  41  0.455763     -0.785783      -52.1731       52.1731       1286.40       1338.58    
  42  0.984333     -0.157910E-01  -1.04846       1.04846       1496.95       1498.00    
  43  0.956700     -0.442655E-01  -2.93907       2.93907       1527.51       1530.45    
  44  0.186161      -1.68114      -111.622       111.622       1447.80       1559.42    
  45  0.791379     -0.233979      -15.5353       15.5353       1582.86       1598.39    
  46  0.262937      -1.33584      -88.6950       88.6950       1619.56       1708.25    
  47  0.115228E-01  -4.46342      -296.355       296.355       1580.47       1876.82    
  48  0.324912      -1.12420      -74.6428       74.6428       1445.71       1520.35    
  49  0.164288      -1.80613      -119.921       119.921       1637.85       1757.77    
  50  0.334193E-02  -5.70121      -378.539       378.539       1661.77       2040.30    
  51  0.189130      -1.66532      -110.571       110.571       1561.33       1671.90    
  52  0.157956      -1.84544      -122.530       122.530       1552.59       1675.12    
  53  0.414399     -0.880925      -58.4902       58.4902       1581.32       1639.81    
  54  0.445375     -0.808838      -53.7039       53.7039       1666.68       1720.38    
  55  0.674924     -0.393155      -26.1041       26.1041       1555.06       1581.16    
  56  0.204431      -1.58752      -105.406       105.406       1614.33       1719.74    
  57  0.741769     -0.298718      -19.8338       19.8338       1506.58       1526.41    
  58  0.662845     -0.411215      -27.3031       27.3031       1738.05       1765.35    
  59  0.716249     -0.333728      -22.1583       22.1583       1747.07       1769.23    
  60  0.503649     -0.685876      -45.5397       45.5397       1684.80       1730.34    
  61  0.525560     -0.643292      -42.7122       42.7122       1735.45       1778.16    
  62  0.981258     -0.189199E-01  -1.25621       1.25621       1683.61       1684.87    
  63  0.892133     -0.114140      -7.57850       7.57850       1576.82       1584.40    
  64  0.239527E-01  -3.73167      -247.769       247.769       1734.78       1982.55    
  65  0.819895E-01  -2.50116      -166.068       166.068       1560.83       1726.90    
  66  0.567274     -0.566913      -37.6410       37.6410       1705.34       1742.98    
  67  0.543991     -0.608823      -40.4236       40.4236       1795.55       1835.98    
  68  0.962374     -0.383523E-01  -2.54645       2.54645       1809.33       1811.88    
  69  0.514511     -0.664538      -44.1229       44.1229       1827.18       1871.30    
  70  0.845541     -0.167779      -11.1399       11.1399       1848.25       1859.39    
  71  0.674893     -0.393201      -26.1071       26.1071       1805.42       1831.52    
  72  0.210589      -1.55785      -103.435       103.435       1136.23       1239.66    
  73  0.242462E-01  -3.71950      -246.961       246.961       1450.94       1697.90    
  74  0.672797     -0.396312      -26.3137       26.3137       1300.22       1326.54    
loop,thermsimp(1:2)       55   31.0895       6.30263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       1463.91        129.42          0.64         29.81          2.27          0.04        162.18
Just calling func    0   0        162.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1463.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       55
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       56
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      295     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -93.1584       93.1584       1042.84       1135.99    
   2  0.963480     -0.372033E-01  -2.47016       2.47016       1039.39       1041.86    
   3  0.633143     -0.457059      -30.3470       30.3470       1076.81       1107.15    
   4  0.939850E-02  -4.66721      -309.885       309.885       1082.37       1392.26    
   5  0.796978     -0.226928      -15.0672       15.0672       1119.26       1134.33    
   6  0.229125      -1.47349      -97.8343       97.8343       1145.34       1243.17    
   7  0.926958     -0.758467E-01  -5.03594       5.03594       1157.00       1162.03    
   8  0.687512     -0.374676      -24.8771       24.8771       1193.97       1218.85    
   9  0.695030     -0.363800      -24.1550       24.1550       1217.14       1241.30    
  10  0.900736     -0.104543      -6.94125       6.94125       1226.27       1233.21    
  11  0.867179     -0.142510      -9.46213       9.46213       1228.83       1238.29    
  12  0.879271     -0.128662      -8.54268       8.54268       1136.23       1144.77    
  13  0.197557      -1.62173      -107.677       107.677       1240.71       1348.39    
  14  0.790701     -0.234835      -15.5922       15.5922       1244.63       1260.22    
  15  0.807456     -0.213867      -14.2000       14.2000       1250.82       1265.02    
  16  0.688117     -0.373796      -24.8187       24.8187       1207.13       1231.95    
  17  0.227000      -1.48280      -98.4527       98.4527       1186.97       1285.42    
  18  0.374715     -0.981589      -65.1739       65.1739       1281.30       1346.47    
  19  0.176077      -1.73683      -115.319       115.319       1300.22       1415.54    
  20  0.446126E-01  -3.10974      -206.475       206.475       1286.40       1492.88    
  21  0.997763E-01  -2.30482      -153.032       153.032       1389.10       1542.14    
  22  0.142978E-01  -4.24765      -282.028       282.028       1331.35       1613.38    
  23  0.652216     -0.427379      -28.3764       28.3764       1407.45       1435.82    
  24  0.909797     -0.945339E-01  -6.27670       6.27670       1332.88       1339.15    
  25  0.145015      -1.93092      -128.206       128.206       1418.12       1546.33    
  26  0.189723      -1.66219      -110.363       110.363       1437.49       1547.85    
  27  0.260997      -1.34324      -89.1865       89.1865       1436.49       1525.68    
  28  0.167755      -1.78525      -118.534       118.534       1238.38       1356.92    
  29  0.148939      -1.90422      -126.433       126.433       1407.55       1533.98    
  30  0.209474      -1.56315      -103.788       103.788       1405.23       1509.02    
  31  0.594522     -0.519998      -34.5259       34.5259       1448.61       1483.14    
  32  0.401703     -0.912043      -60.5563       60.5563       1496.95       1557.51    
  33  0.306469      -1.18264      -78.5230       78.5230       1347.44       1425.96    
  34  0.879335     -0.128589      -8.53784       8.53784       1445.71       1454.25    
  35  0.920707     -0.826134E-01  -5.48523       5.48523       1439.42       1444.91    
  36  0.215616      -1.53425      -101.869       101.869       1506.58       1608.45    
  37  0.821708     -0.196370      -13.0383       13.0383       1428.62       1441.66    
  38  0.935240     -0.669517E-01  -4.44535       4.44535       1527.51       1531.96    
  39  0.691932     -0.368268      -24.4516       24.4516       1407.76       1432.22    
  40  0.493152     -0.706938      -46.9381       46.9381       1447.80       1494.74    
  41  0.362160      -1.01567      -67.4366       67.4366       1519.51       1586.94    
  42  0.636318     -0.452056      -30.0149       30.0149       1549.69       1579.71    
  43  0.178369      -1.72390      -114.461       114.461       1356.13       1470.60    
  44  0.987372     -0.127089E-01 -0.843823      0.843823       1555.06       1555.90    
  45  0.557690     -0.583953      -38.7723       38.7723       1576.82       1615.60    
  46  0.434391     -0.833811      -55.3620       55.3620       1569.79       1625.15    
  47  0.759572     -0.275001      -18.2590       18.2590       1453.26       1471.51    
  48  0.578559     -0.547214      -36.3330       36.3330       1582.86       1619.19    
  49  0.262392      -1.33792      -88.8327       88.8327       1608.08       1696.92    
  50  0.615619     -0.485127      -32.2106       32.2106       1412.16       1444.38    
  51  0.580502     -0.543861      -36.1104       36.1104       1545.03       1581.14    
  52  0.434749     -0.832986      -55.3072       55.3072       1581.32       1636.63    
  53  0.741569     -0.298987      -19.8516       19.8516       1561.33       1581.18    
  54  0.207475      -1.57274      -104.424       104.424       1552.59       1657.02    
  55  0.610742     -0.493081      -32.7388       32.7388       1683.61       1716.35    
  56  0.746759     -0.292013      -19.3886       19.3886       1450.94       1470.33    
  57  0.846394     -0.166771      -11.0729       11.0729       1619.56       1630.63    
  58  0.114011      -2.17146      -144.177       144.177       1614.33       1758.51    
  59  0.148375      -1.90801      -126.685       126.685       1666.68       1793.37    
  60  0.610037     -0.494236      -32.8154       32.8154       1560.83       1593.65    
  61  0.104069      -2.26270      -150.235       150.235       1684.80       1835.03    
  62  0.570721     -0.560855      -37.2387       37.2387       1705.34       1742.58    
  63  0.154528      -1.86738      -123.987       123.987       1637.85       1761.83    
  64  0.365341      -1.00692      -66.8560       66.8560       1738.05       1804.91    
  65  0.856377     -0.155044      -10.2944       10.2944       1747.07       1757.36    
  66  0.758370     -0.276584      -18.3642       18.3642       1735.45       1753.82    
  67  0.641541     -0.443881      -29.4721       29.4721       1809.33       1838.80    
  68  0.744629E-01  -2.59745      -172.461       172.461       1805.42       1977.88    
  69  0.186851      -1.67744      -111.376       111.376       1795.55       1906.93    
  70  0.431508     -0.840469      -55.8041       55.8041       1848.25       1904.06    
  71  0.622787     -0.473551      -31.4420       31.4420       1827.18       1858.62    
  72  0.308057      -1.17747      -78.1798       78.1798       1580.47       1658.65    
  73  0.225569      -1.48913      -98.8726       98.8726       1734.78       1833.65    
  74  0.756713E-02  -4.88394      -324.276       324.276       1463.91       1788.18    
loop,thermsimp(1:2)       56   93.1584       2.47016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297       1699.88        129.45          0.68         30.66          0.79          0.04        161.61
Just calling func    0   0        161.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1699.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       56
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       57
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      296     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -79.0816       79.0816       1039.39       1118.47    
   2  0.729962     -0.314762      -20.8991       20.8991       1076.81       1097.70    
   3  0.788140     -0.238080      -15.8076       15.8076       1119.26       1135.07    
   4  0.718031     -0.331242      -21.9933       21.9933       1042.84       1064.83    
   5  0.603575     -0.504885      -33.5225       33.5225       1136.23       1169.75    
   6  0.287757      -1.24564      -82.7059       82.7059       1157.00       1239.70    
   7  0.690986     -0.369635      -24.5424       24.5424       1193.97       1218.51    
   8  0.976315     -0.239695E-01  -1.59149       1.59149       1207.13       1208.72    
   9  0.983892     -0.162393E-01  -1.07823       1.07823       1226.27       1227.35    
  10  0.858769     -0.152255      -10.1092       10.1092       1228.83       1238.93    
  11  0.968889     -0.316048E-01  -2.09844       2.09844       1217.14       1219.24    
  12  0.364921      -1.00807      -66.9324       66.9324       1145.34       1212.27    
  13  0.540930     -0.614466      -40.7983       40.7983       1244.63       1285.43    
  14  0.812278E-01  -2.51050      -166.688       166.688       1250.82       1417.51    
  15  0.919841     -0.835539E-01  -5.54767       5.54767       1186.97       1192.52    
  16  0.275462      -1.28930      -85.6051       85.6051       1332.88       1418.48    
  17  0.704362     -0.350463      -23.2695       23.2695       1281.30       1304.57    
  18  0.896809     -0.108913      -7.23141       7.23141       1240.71       1247.94    
  19  0.166873      -1.79052      -118.884       118.884       1238.38       1357.27    
  20  0.927791E-02  -4.68012      -310.743       310.743       1082.37       1393.11    
  21  0.906733     -0.979074E-01  -6.50069       6.50069       1300.22       1306.73    
  22  0.575421     -0.552654      -36.6942       36.6942       1347.44       1384.13    
  23  0.975069     -0.252469E-01  -1.67630       1.67630       1407.76       1409.44    
  24  0.610094     -0.494143      -32.8093       32.8093       1407.45       1440.26    
  25  0.823028     -0.194765      -12.9317       12.9317       1428.62       1441.56    
  26  0.709022     -0.343869      -22.8316       22.8316       1412.16       1435.00    
  27  0.956893     -0.440633E-01  -2.92564       2.92564       1439.42       1442.35    
  28  0.897850E-01  -2.41034      -160.038       160.038       1445.71       1605.75    
  29  0.836996     -0.177936      -11.8143       11.8143       1450.94       1462.75    
  30  0.688664     -0.373001      -24.7659       24.7659       1356.13       1380.90    
  31  0.587454     -0.531957      -35.3200       35.3200       1453.26       1488.58    
  32  0.880970     -0.126731      -8.41448       8.41448       1448.61       1457.03    
  33  0.506724     -0.679789      -45.1355       45.1355       1286.40       1331.54    
  34  0.802262     -0.220320      -14.6284       14.6284       1447.80       1462.43    
  35  0.764787E-01  -2.57074      -170.688       170.688       1405.23       1575.92    
  36  0.907101     -0.975014E-01  -6.47373       6.47373       1436.49       1442.97    
  37  0.797350     -0.226461      -15.0362       15.0362       1527.51       1542.55    
  38  0.257375      -1.35722      -90.1144       90.1144       1407.55       1497.66    
  39  0.643190     -0.441315      -29.3017       29.3017       1389.10       1418.41    
  40  0.513768     -0.665984      -44.2189       44.2189       1418.12       1462.34    
  41  0.850264     -0.162208      -10.7700       10.7700       1437.49       1448.26    
  42  0.200819      -1.60535      -106.589       106.589       1555.06       1661.65    
  43  0.331940      -1.10280      -73.2219       73.2219       1496.95       1570.17    
  44  0.900490     -0.104816      -6.95940       6.95940       1549.69       1556.65    
  45  0.618957     -0.479719      -31.8516       31.8516       1545.03       1576.88    
  46  0.395756     -0.926956      -61.5465       61.5465       1561.33       1622.87    
  47  0.528166     -0.638345      -42.3838       42.3838       1519.51       1561.89    
  48  0.586635     -0.533352      -35.4126       35.4126       1560.83       1596.24    
  49  0.705559     -0.348765      -23.1567       23.1567       1506.58       1529.74    
  50  0.191018      -1.65539      -109.912       109.912       1331.35       1441.26    
  51  0.581133     -0.542775      -36.0383       36.0383       1576.82       1612.86    
  52  0.297529      -1.21224      -80.4885       80.4885       1582.86       1663.35    
  53  0.532486     -0.630198      -41.8428       41.8428       1569.79       1611.63    
  54  0.396084     -0.926129      -61.4915       61.4915       1619.56       1681.05    
  55  0.209334      -1.56382      -103.832       103.832       1581.32       1685.15    
  56  0.632068     -0.458758      -30.4599       30.4599       1552.59       1583.05    
  57  0.941424     -0.603613E-01  -4.00777       4.00777       1580.47       1584.47    
  58  0.875379     -0.133099      -8.83727       8.83727       1608.08       1616.92    
  59  0.497903     -0.697350      -46.3015       46.3015       1683.61       1729.91    
  60  0.840483     -0.173779      -11.5383       11.5383       1705.34       1716.88    
  61  0.230101      -1.46924      -97.5520       97.5520       1735.45       1833.00    
  62  0.213210      -1.54548      -102.614       102.614       1747.07       1849.68    
  63  0.412073     -0.886554      -58.8639       58.8639       1614.33       1673.20    
  64  0.264912      -1.32836      -88.1981       88.1981       1637.85       1726.04    
  65  0.234943      -1.44841      -96.1691       96.1691       1463.91       1560.07    
  66  0.957879     -0.430340E-01  -2.85730       2.85730       1666.68       1669.54    
  67  0.458250     -0.780340      -51.8117       51.8117       1738.05       1789.86    
  68  0.218142E-01  -3.82520      -253.979       253.979       1734.78       1988.76    
  69  0.340067E-01  -3.38120      -224.499       224.499       1684.80       1909.30    
  70  0.897872     -0.107728      -7.15274       7.15274       1809.33       1816.48    
  71  0.530797     -0.633375      -42.0538       42.0538       1827.18       1869.23    
  72  0.993119     -0.690470E-02 -0.458447      0.458447       1848.25       1848.71    
  73  0.512816     -0.667838      -44.3420       44.3420       1795.55       1839.90    
  74  0.394920     -0.929072      -61.6870       61.6870       1699.88       1761.57    
loop,thermsimp(1:2)       57   79.0816       20.8991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       2230.68        129.36          0.68         30.67          0.59          0.04        161.34
Just calling func    0   0        161.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299       1172.60        129.66          0.65         30.30          1.01          0.04        161.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1172.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       57
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       58
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      298     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -42.1276       42.1276       1042.84       1084.96    
   2  0.175946E-01  -4.04016      -268.252       268.252       1076.81       1345.06    
   3  0.419998     -0.867504      -57.5991       57.5991       1039.39       1096.99    
   4  0.448197E-01  -3.10511      -206.168       206.168       1119.26       1325.43    
   5  0.501784     -0.689586      -45.7860       45.7860       1136.23       1182.01    
   6  0.858173     -0.152949      -10.1553       10.1553       1186.97       1197.13    
   7  0.101932      -2.28345      -151.613       151.613       1207.13       1358.75    
   8  0.453268     -0.791273      -52.5376       52.5376       1145.34       1197.87    
   9  0.128092      -2.05501      -136.445       136.445       1193.97       1330.42    
  10  0.779644     -0.248918      -16.5272       16.5272       1217.14       1233.67    
  11  0.769943E-01  -2.56402      -170.242       170.242       1226.27       1396.51    
  12  0.140214      -1.96458      -130.441       130.441       1228.83       1359.27    
  13  0.571588     -0.559337      -37.1379       37.1379       1157.00       1194.14    
  14  0.455096     -0.787247      -52.2703       52.2703       1240.71       1292.98    
  15  0.594240     -0.520471      -34.5574       34.5574       1244.63       1279.19    
  16  0.833288     -0.182376      -12.1091       12.1091       1281.30       1293.41    
  17  0.807090E-01  -2.51691      -167.113       167.113       1300.22       1467.34    
  18  0.430313     -0.843242      -55.9881       55.9881       1286.40       1342.39    
  19  0.990463     -0.958277E-02 -0.636261      0.636261       1238.38       1239.02    
  20  0.907906     -0.966144E-01  -6.41484       6.41484       1356.13       1362.55    
  21  0.607469     -0.498455      -33.0956       33.0956       1347.44       1380.53    
  22  0.927102     -0.756916E-01  -5.02565       5.02565       1082.37       1087.40    
  23  0.379122     -0.969896      -64.3975       64.3975       1407.76       1472.16    
  24  0.183121E-01  -4.00019      -265.598       265.598       1250.82       1516.42    
  25  0.561966     -0.576313      -38.2651       38.2651       1389.10       1427.37    
  26  0.638772     -0.448208      -29.7593       29.7593       1332.88       1362.63    
  27  0.234202      -1.45157      -96.3789       96.3789       1412.16       1508.54    
  28  0.257221      -1.35782      -90.1541       90.1541       1407.45       1497.60    
  29  0.688379     -0.373416      -24.7934       24.7934       1331.35       1356.14    
  30  0.360237E-01  -3.32358      -220.673       220.673       1428.62       1649.30    
  31  0.849177     -0.163487      -10.8549       10.8549       1439.42       1450.28    
  32  0.324868E-01  -3.42692      -227.535       227.535       1436.49       1664.03    
  33  0.216483E-01  -3.83283      -254.486       254.486       1437.49       1691.98    
  34  0.794095     -0.230552      -15.3078       15.3078       1448.61       1463.92    
  35  0.453180     -0.791465      -52.5504       52.5504       1418.12       1470.67    
  36  0.286278      -1.25079      -83.0480       83.0480       1447.80       1530.85    
  37  0.931500     -0.709590E-01  -4.71142       4.71142       1450.94       1455.65    
  38  0.483424     -0.726861      -48.2609       48.2609       1453.26       1501.52    
  39  0.782276     -0.245547      -16.3034       16.3034       1407.55       1423.85    
  40  0.976661     -0.236156E-01  -1.56799       1.56799       1506.58       1508.15    
  41  0.707981     -0.345338      -22.9291       22.9291       1527.51       1550.44    
  42  0.101993      -2.28285      -151.573       151.573       1549.69       1701.27    
  43  0.690974E-01  -2.67224      -177.427       177.427       1463.91       1641.33    
  44  0.767576E-01  -2.56710      -170.446       170.446       1519.51       1689.95    
  45  0.584825     -0.536443      -35.6179       35.6179       1496.95       1532.57    
  46  0.588828     -0.529621      -35.1649       35.1649       1405.23       1440.39    
  47  0.894562     -0.111421      -7.39794       7.39794       1545.03       1552.43    
  48  0.260723      -1.34430      -89.2564       89.2564       1552.59       1641.85    
  49  0.773456E-01  -2.55947      -169.939       169.939       1580.47       1750.41    
  50  0.848651E-01  -2.46669      -163.779       163.779       1560.83       1724.61    
  51  0.992803     -0.722305E-02 -0.479584      0.479584       1445.71       1446.19    
  52  0.529202     -0.636386      -42.2537       42.2537       1569.79       1612.04    
  53  0.540374     -0.615494      -40.8666       40.8666       1576.82       1617.69    
  54  0.185914      -1.68247      -111.710       111.710       1608.08       1719.79    
  55  0.764153     -0.268988      -17.8598       17.8598       1561.33       1579.19    
  56  0.931974E-01  -2.37304      -157.561       157.561       1555.06       1712.62    
  57  0.753946     -0.282434      -18.7526       18.7526       1582.86       1601.61    
  58  0.279731      -1.27393      -84.5840       84.5840       1666.68       1751.26    
  59  0.790083     -0.235617      -15.6441       15.6441       1614.33       1629.98    
  60  0.179541      -1.71735      -114.026       114.026       1619.56       1733.58    
  61  0.424504     -0.856835      -56.8907       56.8907       1581.32       1638.21    
  62  0.359861      -1.02204      -67.8595       67.8595       1705.34       1773.20    
  63  0.234475      -1.45041      -96.3017       96.3017       1637.85       1734.15    
  64  0.320303      -1.13849      -75.5914       75.5914       1683.61       1759.20    
  65  0.558182     -0.583071      -38.7138       38.7138       1699.88       1738.59    
  66  0.460702     -0.775003      -51.4574       51.4574       1738.05       1789.51    
  67  0.627136E-01  -2.76918      -183.863       183.863       1809.33       1993.20    
  68  0.673665     -0.395022      -26.2280       26.2280       1735.45       1761.68    
  69  0.540500     -0.615261      -40.8511       40.8511       1795.55       1836.40    
  70  0.277195      -1.28303      -85.1887       85.1887       1848.25       1933.44    
  71  0.248535      -1.39217      -92.4351       92.4351       1747.07       1839.50    
  72  0.493876     -0.705472      -46.8407       46.8407       1827.18       1874.02    
  73  0.539055     -0.617938      -41.0288       41.0288       1684.80       1725.83    
  74  0.434355     -0.833893      -55.3674       55.3674       1172.60       1227.97    
loop,thermsimp(1:2)       58   42.1276       268.252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300       1115.73        129.52          0.65         30.54          0.88          0.04        161.62
Just calling func    0   0        161.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    301       2040.83        128.41          0.62         29.80          2.67          0.04        161.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    2040.8        3.104     -1.203      4.289     -100.0      1.491    
                     -0.8747      2.856     -100.0      3.254      1.733    
                      -5.427     0.6785      2.009      0.000     0.7449    
                      -1.031     -20.00      0.000      0.000      1.346    

                      -2.834      4806.     0.1099E+05 -792.6     -1451.    
                      -3.146     -7.384     -5.931     -15.33     -5.168    
                      -11.55     -3.342     -78.06      0.000     -19.40    

                      -1077.      5190.      3636.      3892.      4162.    
                      -4603.    -0.2739    -0.5431      0.000    -0.2524    
                     -0.3149    -0.5370    -0.3643    -0.3823    -0.3723    

                     -0.6841     -1.700      1.382    -0.1431     0.3796E-01
                      0.8541E-01 0.1319E-01-0.1530    -0.2532     0.5651E-01
                     -0.2341    -0.1767    -0.4655     -2.131      1.382    

                      -1.793     -1.687     0.1500E+05 0.1500E+05  0.000    
                       0.000      9.032      8.818      0.000    -0.3629E-03
                      0.2280     0.6288      9.193      9.038    -0.2633E+05

                      0.3032E-03 0.6288     0.4581      9.674      9.175    
                     -0.1391E+05-0.3672E-03 -1.345     0.4086      9.409    
                       9.294     -3741.     0.1027E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1115.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       58
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       59
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      300     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -3.62134       3.62134       1042.84       1046.46    
   2  0.224221      -1.49512      -99.2706       99.2706       1082.37       1181.64    
   3  0.699642     -0.357186      -23.7158       23.7158       1039.39       1063.10    
   4  0.490916     -0.711482      -47.2398       47.2398       1136.23       1183.47    
   5  0.204251      -1.58840      -105.464       105.464       1157.00       1262.46    
   6  0.356522      -1.03136      -68.4785       68.4785       1186.97       1255.45    
   7  0.745938     -0.293113      -19.4616       19.4616       1145.34       1164.80    
   8  0.451533     -0.795107      -52.7922       52.7922       1172.60       1225.40    
   9  0.101038      -2.29226      -152.198       152.198       1217.14       1369.34    
  10  0.826978     -0.189977      -12.6138       12.6138       1238.38       1251.00    
  11  0.212337      -1.54958      -102.886       102.886       1244.63       1347.52    
  12  0.490540     -0.712248      -47.2907       47.2907       1240.71       1288.00    
  13  0.672078     -0.397381      -26.3846       26.3846       1281.30       1307.68    
  14  0.690580     -0.370223      -24.5814       24.5814       1119.26       1143.84    
  15  0.513190     -0.667108      -44.2935       44.2935       1193.97       1238.26    
  16  0.268393      -1.31530      -87.3313       87.3313       1286.40       1373.73    
  17  0.896898     -0.108813      -7.22478       7.22478       1076.81       1084.03    
  18  0.911953     -0.921674E-01  -6.11957       6.11957       1331.35       1337.47    
  19  0.355703      -1.03366      -68.6311       68.6311       1207.13       1275.76    
  20  0.293818      -1.22479      -81.3218       81.3218       1228.83       1310.15    
  21  0.713392     -0.337724      -22.4236       22.4236       1356.13       1378.56    
  22  0.660627     -0.414565      -27.5256       27.5256       1332.88       1360.40    
  23  0.795097     -0.229291      -15.2241       15.2241       1347.44       1362.66    
  24  0.919484     -0.839428E-01  -5.57349       5.57349       1226.27       1231.85    
  25  0.976382     -0.239014E-01  -1.58696       1.58696       1407.55       1409.13    
  26  0.922195     -0.809991E-01  -5.37804       5.37804       1389.10       1394.48    
  27  0.436062     -0.829970      -55.1069       55.1069       1405.23       1460.33    
  28  0.271848      -1.30251      -86.4820       86.4820       1445.71       1532.19    
  29  0.389360     -0.943252      -62.6285       62.6285       1439.42       1502.05    
  30  0.314178E-01  -3.46038      -229.757       229.757       1450.94       1680.70    
  31  0.545460     -0.606126      -40.2445       40.2445       1448.61       1488.86    
  32  0.925479E-01  -2.38003      -158.025       158.025       1300.22       1458.25    
  33  0.971973     -0.284273E-01  -1.88747       1.88747       1418.12       1420.01    
  34  0.403500     -0.907578      -60.2598       60.2598       1407.76       1468.02    
  35  0.392926     -0.934133      -62.0230       62.0230       1407.45       1469.47    
  36  0.718758     -0.330230      -21.9261       21.9261       1453.26       1475.18    
  37  0.746082     -0.292920      -19.4488       19.4488       1506.58       1526.03    
  38  0.353478      -1.03993      -69.0478       69.0478       1412.16       1481.21    
  39  0.843229     -0.170517      -11.3217       11.3217       1250.82       1262.15    
  40  0.388011     -0.946720      -62.8587       62.8587       1447.80       1510.66    
  41  0.969569     -0.309034E-01  -2.05187       2.05187       1496.95       1499.00    
  42  0.441380E-01  -3.12043      -207.185       207.185       1527.51       1734.70    
  43  0.533000     -0.629233      -41.7788       41.7788       1545.03       1586.81    
  44  0.288396      -1.24342      -82.5586       82.5586       1561.33       1643.89    
  45  0.683115     -0.381092      -25.3031       25.3031       1582.86       1608.16    
  46  0.339511      -1.08025      -71.7246       71.7246       1569.79       1641.51    
  47  0.150420E-01  -4.19691      -278.659       278.659       1576.82       1855.48    
  48  0.141026      -1.95881      -130.058       130.058       1614.33       1744.39    
  49  0.421666     -0.863541      -57.3360       57.3360       1581.32       1638.65    
  50  0.953496     -0.476201E-01  -3.16180       3.16180       1463.91       1467.07    
  51  0.966647     -0.339215E-01  -2.25226       2.25226       1552.59       1554.84    
  52  0.365434      -1.00667      -66.8392       66.8392       1428.62       1495.46    
  53  0.314209      -1.15770      -76.8668       76.8668       1436.49       1513.36    
  54  0.612536     -0.490148      -32.5440       32.5440       1519.51       1552.05    
  55  0.962603     -0.381139E-01  -2.53062       2.53062       1437.49       1440.02    
  56  0.518973     -0.655904      -43.5496       43.5496       1549.69       1593.24    
  57  0.963657     -0.370202E-01  -2.45800       2.45800       1555.06       1557.52    
  58  0.423866     -0.858338      -56.9905       56.9905       1608.08       1665.07    
  59  0.195959      -1.62985      -108.216       108.216       1560.83       1669.05    
  60  0.108838      -2.21789      -147.260       147.260       1684.80       1832.06    
  61  0.196446      -1.62737      -108.051       108.051       1619.56       1727.61    
  62  0.950303     -0.509747E-01  -3.38453       3.38453       1637.85       1641.23    
  63  0.363538      -1.01187      -67.1846       67.1846       1699.88       1767.06    
  64  0.834223     -0.181254      -12.0346       12.0346       1580.47       1592.50    
  65  0.529644     -0.635549      -42.1981       42.1981       1666.68       1708.88    
  66  0.944564     -0.570321E-01  -3.78672       3.78672       1683.61       1687.40    
  67  0.534482     -0.626456      -41.5944       41.5944       1735.45       1777.05    
  68  0.238252      -1.43443      -95.2407       95.2407       1705.34       1800.58    
  69  0.335731      -1.09145      -72.4679       72.4679       1738.05       1810.52    
  70  0.396637     -0.924734      -61.3989       61.3989       1795.55       1856.95    
  71  0.766416     -0.266030      -17.6634       17.6634       1747.07       1764.73    
  72  0.667108     -0.404804      -26.8775       26.8775       1827.18       1854.05    
  73  0.745469     -0.293741      -19.5033       19.5033       1848.25       1867.76    
  74  0.934886     -0.673307E-01  -4.47051       4.47051       1115.73       1120.20    
loop,thermsimp(1:2)       59   3.62134       99.2706    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302       1830.87        129.86          0.68         30.26          0.96          0.04        161.80
Just calling func    0   0        161.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1830.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       59
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       60
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      301     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -70.2525       70.2525       1042.84       1113.09    
   2  0.605757     -0.501276      -33.2829       33.2829       1039.39       1072.67    
   3  0.690633     -0.370146      -24.5763       24.5763       1076.81       1101.38    
   4  0.400665     -0.914628      -60.7280       60.7280       1115.73       1176.45    
   5  0.862165     -0.148309      -9.84716       9.84716       1119.26       1129.11    
   6  0.874011     -0.134662      -8.94107       8.94107       1145.34       1154.28    
   7  0.389525     -0.942826      -62.6002       62.6002       1082.37       1144.97    
   8  0.102225E-01  -4.58317      -304.306       304.306       1136.23       1440.53    
   9  0.102697      -2.27597      -151.116       151.116       1172.60       1323.72    
  10  0.818271     -0.200561      -13.3165       13.3165       1226.27       1239.59    
  11  0.888768     -0.117920      -7.82943       7.82943       1193.97       1201.80    
  12  0.539210     -0.617651      -41.0098       41.0098       1238.38       1279.39    
  13  0.317914      -1.14597      -76.0885       76.0885       1186.97       1263.06    
  14  0.437422     -0.826857      -54.9002       54.9002       1250.82       1305.72    
  15  0.925263     -0.776773E-01  -5.15749       5.15749       1157.00       1162.16    
  16  0.422436     -0.861717      -57.2148       57.2148       1207.13       1264.35    
  17  0.965248     -0.353697E-01  -2.34842       2.34842       1240.71       1243.06    
  18  0.771278     -0.259706      -17.2435       17.2435       1281.30       1298.54    
  19  0.902488     -0.102600      -6.81227       6.81227       1228.83       1235.64    
  20  0.512816     -0.667839      -44.3420       44.3420       1331.35       1375.69    
  21  0.915966     -0.877758E-01  -5.82799       5.82799       1244.63       1250.46    
  22  0.612605     -0.490035      -32.5365       32.5365       1332.88       1365.41    
  23  0.323528      -1.12847      -74.9262       74.9262       1347.44       1422.36    
  24  0.206646      -1.57675      -104.690       104.690       1217.14       1321.83    
  25  0.481057     -0.731769      -48.5867       48.5867       1286.40       1334.99    
  26  0.287887E-01  -3.54777      -235.559       235.559       1356.13       1591.69    
  27  0.996968     -0.303648E-02 -0.201611      0.201611       1389.10       1389.31    
  28  0.132770      -2.01914      -134.063       134.063       1407.55       1541.61    
  29  0.716038     -0.334023      -22.1779       22.1779       1418.12       1440.30    
  30  0.229552      -1.47162      -97.7104       97.7104       1437.49       1535.20    
  31  0.236358      -1.44241      -95.7705       95.7705       1300.22       1396.00    
  32  0.542780     -0.611051      -40.5715       40.5715       1405.23       1445.80    
  33  0.875156     -0.133353      -8.85413       8.85413       1463.91       1472.76    
  34  0.988730     -0.113343E-01 -0.752557      0.752557       1407.76       1408.52    
  35  0.244332      -1.40923      -93.5675       93.5675       1407.45       1501.01    
  36  0.659246     -0.416659      -27.6646       27.6646       1453.26       1480.92    
  37  0.457872     -0.781166      -51.8666       51.8666       1412.16       1464.03    
  38  0.380652E-01  -3.26846      -217.013       217.013       1448.61       1665.63    
  39  0.358843      -1.02487      -68.0475       68.0475       1428.62       1496.67    
  40  0.846233     -0.166960      -11.0855       11.0855       1496.95       1508.04    
  41  0.359308      -1.02358      -67.9617       67.9617       1439.42       1507.38    
  42  0.533329     -0.628617      -41.7379       41.7379       1447.80       1489.54    
  43  0.645289     -0.438058      -29.0854       29.0854       1436.49       1465.58    
  44  0.311850      -1.16523      -77.3671       77.3671       1506.58       1583.95    
  45  0.270084      -1.30902      -86.9142       86.9142       1445.71       1532.63    
  46  0.530313     -0.634287      -42.1143       42.1143       1519.51       1561.62    
  47  0.975874     -0.244213E-01  -1.62148       1.62148       1552.59       1554.21    
  48  0.313811      -1.15896      -76.9510       76.9510       1555.06       1632.01    
  49  0.932688     -0.696844E-01  -4.62679       4.62679       1545.03       1549.66    
  50  0.357359      -1.02901      -68.3228       68.3228       1580.47       1648.79    
  51  0.545837     -0.605435      -40.1986       40.1986       1549.69       1589.89    
  52  0.954982     -0.460626E-01  -3.05839       3.05839       1582.86       1585.92    
  53  0.470912     -0.753083      -50.0020       50.0020       1581.32       1631.32    
  54  0.719568     -0.329104      -21.8513       21.8513       1637.85       1659.70    
  55  0.859620     -0.151265      -10.0434       10.0434       1569.79       1579.83    
  56  0.544817     -0.607304      -40.3228       40.3228       1561.33       1601.65    
  57  0.505571E-02  -5.28724      -351.053       351.053       1608.08       1959.14    
  58  0.412350     -0.885884      -58.8194       58.8194       1560.83       1619.65    
  59  0.335424      -1.09236      -72.5287       72.5287       1450.94       1523.47    
  60  0.908603     -0.958472E-01  -6.36390       6.36390       1683.61       1689.98    
  61  0.434554     -0.833434      -55.3370       55.3370       1666.68       1722.02    
  62  0.801863     -0.220817      -14.6615       14.6615       1619.56       1634.22    
  63  0.567796     -0.565993      -37.5799       37.5799       1527.51       1565.09    
  64  0.818165     -0.200691      -13.3252       13.3252       1614.33       1627.66    
  65  0.490355     -0.712626      -47.3157       47.3157       1747.07       1794.38    
  66  0.971730     -0.286771E-01  -1.90405       1.90405       1699.88       1701.78    
  67  0.373659     -0.984411      -65.3613       65.3613       1735.45       1800.81    
  68  0.179333      -1.71851      -114.103       114.103       1705.34       1819.44    
  69  0.352089      -1.04387      -69.3093       69.3093       1738.05       1807.36    
  70  0.247178      -1.39765      -92.7987       92.7987       1684.80       1777.60    
  71  0.304805      -1.18808      -78.8843       78.8843       1827.18       1906.06    
  72  0.561911     -0.576412      -38.2716       38.2716       1576.82       1615.10    
  73  0.193340      -1.64331      -109.109       109.109       1795.55       1904.66    
  74  0.254418      -1.36878      -90.8817       90.8817       1830.87       1921.76    
loop,thermsimp(1:2)       60   70.2525       33.2829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303       1189.08        129.79          0.68         30.15          1.41          0.04        162.08
Just calling func    0   0        162.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1189.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       60
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       61
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      302     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -27.1958       27.1958       1039.39       1066.58    
   2  0.718953     -0.329960      -21.9081       21.9081       1076.81       1098.71    
   3  0.454275     -0.789053      -52.3902       52.3902       1042.84       1095.23    
   4  0.253407E-01  -3.67534      -244.029       244.029       1119.26       1363.29    
   5  0.611947     -0.491110      -32.6079       32.6079       1082.37       1114.98    
   6  0.234016      -1.45237      -96.4318       96.4318       1145.34       1241.77    
   7  0.359481E-01  -3.32568      -220.813       220.813       1157.00       1377.81    
   8  0.222118E-01  -3.80713      -252.780       252.780       1115.73       1368.51    
   9  0.905838E-01  -2.40148      -159.449       159.449       1193.97       1353.42    
  10  0.791683     -0.233594      -15.5098       15.5098       1228.83       1244.34    
  11  0.557734     -0.583873      -38.7670       38.7670       1226.27       1265.04    
  12  0.936048E-01  -2.36867      -157.271       157.271       1240.71       1397.98    
  13  0.431059     -0.841510      -55.8732       55.8732       1244.63       1300.50    
  14  0.225758      -1.48829      -98.8171       98.8171       1186.97       1285.79    
  15  0.275181E-01  -3.59291      -238.556       238.556       1207.13       1445.69    
  16  0.802517     -0.220002      -14.6073       14.6073       1238.38       1252.99    
  17  0.423872     -0.858323      -56.9895       56.9895       1281.30       1338.29    
  18  0.300971      -1.20074      -79.7248       79.7248       1250.82       1330.55    
  19  0.479556     -0.734895      -48.7943       48.7943       1217.14       1265.94    
  20  0.621838     -0.475076      -31.5433       31.5433       1172.60       1204.15    
  21  0.397654     -0.922172      -61.2288       61.2288       1286.40       1347.63    
  22  0.664976     -0.408004      -27.0900       27.0900       1332.88       1359.97    
  23  0.288358      -1.24355      -82.5672       82.5672       1331.35       1413.91    
  24  0.442017     -0.816406      -54.2064       54.2064       1389.10       1443.31    
  25  0.150763E-01  -4.19463      -278.508       278.508       1300.22       1578.73    
  26  0.600886     -0.509350      -33.8190       33.8190       1407.76       1441.58    
  27  0.162927      -1.81446      -120.473       120.473       1347.44       1467.91    
  28  0.932743     -0.696251E-01  -4.62285       4.62285       1418.12       1422.74    
  29  0.997186     -0.281799E-02 -0.187104      0.187104       1136.23       1136.41    
  30  0.418339     -0.871463      -57.8619       57.8619       1405.23       1463.09    
  31  0.694800     -0.364132      -24.1770       24.1770       1412.16       1436.34    
  32  0.852711     -0.159334      -10.5792       10.5792       1436.49       1447.07    
  33  0.624847     -0.470249      -31.2228       31.2228       1463.91       1495.13    
  34  0.427649     -0.849453      -56.4006       56.4006       1453.26       1509.66    
  35  0.149871      -1.89798      -126.019       126.019       1447.80       1573.82    
  36  0.563430     -0.573713      -38.0924       38.0924       1428.62       1466.72    
  37  0.860100     -0.150706      -10.0063       10.0063       1407.45       1417.45    
  38  0.867090E-01  -2.44520      -162.352       162.352       1439.42       1601.77    
  39  0.847848     -0.165054      -10.9590       10.9590       1496.95       1507.91    
  40  0.782599E-01  -2.54772      -169.159       169.159       1450.94       1620.10    
  41  0.697889E-01  -2.66228      -176.766       176.766       1445.71       1622.48    
  42  0.422765     -0.860939      -57.1632       57.1632       1437.49       1494.65    
  43  0.158365      -1.84286      -122.359       122.359       1407.55       1529.91    
  44  0.518935     -0.655976      -43.5544       43.5544       1545.03       1588.58    
  45  0.430406     -0.843027      -55.9739       55.9739       1552.59       1608.57    
  46  0.639805     -0.446592      -29.6521       29.6521       1519.51       1549.16    
  47  0.830453E-01  -2.48837      -165.219       165.219       1527.51       1692.73    
  48  0.639384     -0.447250      -29.6957       29.6957       1569.79       1599.48    
  49  0.833791     -0.181773      -12.0690       12.0690       1506.58       1518.65    
  50  0.453972     -0.789720      -52.4345       52.4345       1582.86       1635.29    
  51  0.542088     -0.612327      -40.6562       40.6562       1549.69       1590.35    
  52  0.271321      -1.30445      -86.6108       86.6108       1356.13       1442.75    
  53  0.176790      -1.73279      -115.051       115.051       1561.33       1676.38    
  54  0.511778     -0.669865      -44.4766       44.4766       1576.82       1621.30    
  55  0.632948     -0.457366      -30.3674       30.3674       1560.83       1591.20    
  56  0.252444      -1.37657      -91.3989       91.3989       1614.33       1705.73    
  57  0.726388     -0.319671      -21.2250       21.2250       1581.32       1602.54    
  58  0.483977     -0.725718      -48.1850       48.1850       1555.06       1603.25    
  59  0.497846     -0.697465      -46.3091       46.3091       1619.56       1665.87    
  60  0.369093     -0.996706      -66.1776       66.1776       1580.47       1646.64    
  61  0.225129      -1.49108      -99.0024       99.0024       1637.85       1736.85    
  62  0.908331E-01  -2.39873      -159.267       159.267       1448.61       1607.88    
  63  0.196370      -1.62776      -108.077       108.077       1683.61       1791.69    
  64  0.448748     -0.801293      -53.2029       53.2029       1699.88       1753.08    
  65  0.175426      -1.74054      -115.565       115.565       1666.68       1782.25    
  66  0.399277     -0.918099      -60.9584       60.9584       1684.80       1745.76    
  67  0.417464     -0.873557      -58.0010       58.0010       1747.07       1805.07    
  68  0.593993     -0.520889      -34.5851       34.5851       1735.45       1770.04    
  69  0.718485     -0.330610      -21.9513       21.9513       1738.05       1760.00    
  70  0.294519      -1.22241      -81.1637       81.1637       1705.34       1786.50    
  71  0.235197      -1.44733      -96.0976       96.0976       1795.55       1891.65    
  72  0.190064E-01  -3.96298      -263.127       263.127       1827.18       2090.30    
  73  0.295859      -1.21787      -80.8623       80.8623       1830.87       1911.74    
  74  0.325136      -1.12351      -74.5970       74.5970       1189.08       1263.68    
loop,thermsimp(1:2)       61   27.1958       21.9081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       1147.76        130.01          0.70         30.07          0.69          0.05        161.52
Just calling func    0   0        161.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1147.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       61
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       62
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      303     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.940668      0.940668       1039.39       1040.33    
   2  0.420912     -0.865330      -57.4548       57.4548       1042.84       1100.29    
   3  0.617210     -0.482545      -32.0392       32.0392       1076.81       1108.84    
   4  0.787846     -0.238453      -15.8324       15.8324       1082.37       1098.20    
   5  0.608770     -0.496315      -32.9535       32.9535       1136.23       1169.18    
   6  0.925975     -0.769083E-01  -5.10642       5.10642       1172.60       1177.71    
   7  0.545822     -0.605462      -40.2004       40.2004       1145.34       1185.54    
   8  0.240142      -1.42653      -94.7161       94.7161       1228.83       1323.54    
   9  0.800257     -0.222822      -14.7946       14.7946       1238.38       1253.18    
  10  0.250149      -1.38570      -92.0054       92.0054       1189.08       1281.08    
  11  0.814044     -0.205741      -13.6605       13.6605       1226.27       1239.93    
  12  0.897552     -0.108084      -7.17638       7.17638       1217.14       1224.32    
  13  0.807530     -0.213775      -14.1939       14.1939       1186.97       1201.17    
  14  0.369031     -0.996874      -66.1888       66.1888       1244.63       1310.82    
  15  0.892620     -0.113594      -7.54223       7.54223       1250.82       1258.37    
  16  0.992736     -0.729054E-02 -0.484065      0.484065       1281.30       1281.78    
  17  0.264259      -1.33083      -88.3620       88.3620       1286.40       1374.76    
  18  0.164586      -1.80432      -119.800       119.800       1193.97       1313.77    
  19  0.594739     -0.519633      -34.5017       34.5017       1332.88       1367.38    
  20  0.766319     -0.266156      -17.6718       17.6718       1119.26       1136.93    
  21  0.392663     -0.934804      -62.0675       62.0675       1115.73       1177.79    
  22  0.900399     -0.104917      -6.96613       6.96613       1157.00       1163.96    
  23  0.853164E-01  -2.46139      -163.427       163.427       1240.71       1404.14    
  24  0.753181     -0.283450      -18.8200       18.8200       1331.35       1350.17    
  25  0.801958     -0.220699      -14.6536       14.6536       1407.45       1422.10    
  26  0.840206     -0.174108      -11.5601       11.5601       1418.12       1429.68    
  27  0.899787     -0.105597      -7.01128       7.01128       1412.16       1419.18    
  28  0.555629     -0.587654      -39.0181       39.0181       1407.76       1446.78    
  29  0.117481E-01  -4.44406      -295.069       295.069       1356.13       1651.20    
  30  0.228476      -1.47632      -98.0224       98.0224       1389.10       1487.13    
  31  0.121877      -2.10474      -139.747       139.747       1207.13       1346.88    
  32  0.475375     -0.743652      -49.3757       49.3757       1436.49       1485.87    
  33  0.208734      -1.56669      -104.023       104.023       1405.23       1509.25    
  34  0.680231     -0.385322      -25.5840       25.5840       1428.62       1454.21    
  35  0.211647      -1.55284      -103.103       103.103       1347.44       1450.54    
  36  0.982763     -0.173870E-01  -1.15444       1.15444       1437.49       1438.64    
  37  0.819904     -0.198568      -13.1842       13.1842       1463.91       1477.09    
  38  0.282339      -1.26465      -83.9680       83.9680       1496.95       1580.92    
  39  0.391986     -0.936529      -62.1821       62.1821       1453.26       1515.44    
  40  0.218050      -1.52303      -101.124       101.124       1506.58       1607.70    
  41  0.236244      -1.44289      -95.8027       95.8027       1407.55       1503.35    
  42  0.544673     -0.607570      -40.3404       40.3404       1519.51       1559.85    
  43  0.721937     -0.325818      -21.6331       21.6331       1447.80       1469.43    
  44  0.649728     -0.431202      -28.6302       28.6302       1300.22       1328.86    
  45  0.641823     -0.443443      -29.4430       29.4430       1545.03       1574.47    
  46  0.597293     -0.515347      -34.2171       34.2171       1549.69       1583.91    
  47  0.467405     -0.760558      -50.4983       50.4983       1560.83       1611.33    
  48  0.676900     -0.390232      -25.9100       25.9100       1569.79       1595.70    
  49  0.925913     -0.769750E-01  -5.11086       5.11086       1439.42       1444.53    
  50  0.692551     -0.367374      -24.3923       24.3923       1581.32       1605.71    
  51  0.161390      -1.82393      -121.102       121.102       1555.06       1676.16    
  52  0.513279     -0.666936      -44.2821       44.2821       1448.61       1492.90    
  53  0.379540     -0.968796      -64.3245       64.3245       1552.59       1616.92    
  54  0.557165     -0.584894      -38.8348       38.8348       1450.94       1489.77    
  55  0.459054     -0.778587      -51.6953       51.6953       1576.82       1628.52    
  56  0.466253     -0.763026      -50.6621       50.6621       1445.71       1496.37    
  57  0.635692E-01  -2.75563      -182.963       182.963       1582.86       1765.82    
  58  0.591279     -0.525467      -34.8891       34.8891       1580.47       1615.36    
  59  0.344168      -1.06663      -70.8200       70.8200       1619.56       1690.38    
  60  0.119291      -2.12619      -141.171       141.171       1561.33       1702.50    
  61  0.399057E-01  -3.22124      -213.878       213.878       1527.51       1741.39    
  62  0.737545     -0.304428      -20.2129       20.2129       1614.33       1634.55    
  63  0.855773     -0.155750      -10.3412       10.3412       1637.85       1648.19    
  64  0.604062E-01  -2.80666      -186.352       186.352       1684.80       1871.15    
  65  0.659236     -0.416674      -27.6656       27.6656       1699.88       1727.54    
  66  0.738818     -0.302704      -20.0984       20.0984       1738.05       1758.15    
  67  0.577372     -0.549268      -36.4694       36.4694       1735.45       1771.92    
  68  0.219220      -1.51768      -100.768       100.768       1666.68       1767.45    
  69  0.318915      -1.14283      -75.8798       75.8798       1705.34       1781.22    
  70  0.599810     -0.511142      -33.9380       33.9380       1683.61       1717.55    
  71  0.863673     -0.146561      -9.73114       9.73114       1747.07       1756.80    
  72  0.103344      -2.26969      -150.699       150.699       1795.55       1946.25    
  73  0.345925      -1.06153      -70.4820       70.4820       1830.87       1901.36    
  74  0.583617     -0.538510      -35.7551       35.7551       1147.76       1183.52    
loop,thermsimp(1:2)       62  0.940668       57.4548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305       1061.57        129.98          0.68         29.91          1.18          0.04        161.79
Just calling func    0   0        161.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    306       1172.35        128.57          0.64         29.74          2.47          0.04        161.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1061.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       62
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       63
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      305     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01  -1.00468       1.00468       1039.39       1040.39    
   2  0.760415     -0.273890      -18.1853       18.1853       1082.37       1100.56    
   3  0.328612      -1.11288      -73.8909       73.8909       1042.84       1116.73    
   4  0.164880      -1.80254      -119.682       119.682       1076.81       1196.49    
   5  0.706606     -0.347282      -23.0582       23.0582       1119.26       1142.32    
   6  0.832070     -0.183839      -12.2062       12.2062       1157.00       1169.20    
   7  0.231505      -1.46315      -97.1480       97.1480       1136.23       1233.37    
   8  0.802671E-01  -2.52240      -167.478       167.478       1172.60       1340.08    
   9  0.116349      -2.15116      -142.829       142.829       1115.73       1258.56    
  10  0.874222     -0.134421      -8.92508       8.92508       1147.76       1156.69    
  11  0.729333     -0.315625      -20.9564       20.9564       1145.34       1166.29    
  12  0.301675      -1.19841      -79.5697       79.5697       1186.97       1266.54    
  13  0.496896     -0.699375      -46.4359       46.4359       1217.14       1263.58    
  14  0.692174     -0.367918      -24.4284       24.4284       1226.27       1250.70    
  15  0.717718     -0.331678      -22.0222       22.0222       1238.38       1260.41    
  16  0.867334E-01  -2.44492      -162.333       162.333       1250.82       1413.16    
  17  0.762934     -0.270584      -17.9658       17.9658       1189.08       1207.04    
  18  0.966741     -0.338246E-01  -2.24583       2.24583       1281.30       1283.54    
  19  0.375386     -0.979801      -65.0552       65.0552       1244.63       1309.69    
  20  0.878716     -0.129293      -8.58459       8.58459       1193.97       1202.56    
  21  0.238969      -1.43142      -95.0411       95.0411       1228.83       1323.87    
  22  0.939578     -0.623249E-01  -4.13814       4.13814       1300.22       1304.36    
  23  0.694828     -0.364091      -24.1743       24.1743       1207.13       1231.31    
  24  0.869149     -0.140241      -9.31145       9.31145       1331.35       1340.66    
  25  0.310010      -1.17115      -77.7602       77.7602       1332.88       1410.64    
  26  0.831753     -0.184219      -12.2315       12.2315       1286.40       1298.63    
  27  0.621050     -0.476344      -31.6275       31.6275       1240.71       1272.34    
  28  0.902274     -0.102837      -6.82802       6.82802       1412.16       1418.99    
  29  0.341345      -1.07486      -71.3669       71.3669       1407.45       1478.81    
  30  0.718647     -0.330385      -21.9363       21.9363       1418.12       1440.06    
  31  0.489532     -0.714305      -47.4272       47.4272       1437.49       1484.92    
  32  0.387793     -0.947282      -62.8961       62.8961       1439.42       1502.32    
  33  0.576785     -0.550285      -36.5369       36.5369       1407.76       1444.30    
  34  0.454048     -0.789552      -52.4234       52.4234       1347.44       1399.86    
  35  0.532728     -0.629744      -41.8127       41.8127       1428.62       1470.44    
  36  0.459832     -0.776895      -51.5830       51.5830       1447.80       1499.38    
  37  0.784910     -0.242187      -16.0803       16.0803       1463.91       1479.99    
  38  0.842297     -0.171622      -11.3951       11.3951       1436.49       1447.89    
  39  0.967556     -0.329823E-01  -2.18991       2.18991       1389.10       1391.29    
  40  0.126414      -2.06819      -137.320       137.320       1450.94       1588.26    
  41  0.407002     -0.898938      -59.6862       59.6862       1448.61       1508.30    
  42  0.903435     -0.101551      -6.74264       6.74264       1445.71       1452.45    
  43  0.430116     -0.843701      -56.0186       56.0186       1407.55       1463.57    
  44  0.675859     -0.391771      -26.0122       26.0122       1405.23       1431.24    
  45  0.444470     -0.810872      -53.8389       53.8389       1453.26       1507.09    
  46  0.728661     -0.316547      -21.0175       21.0175       1519.51       1540.52    
  47  0.143617      -1.94060      -128.849       128.849       1545.03       1673.88    
  48  0.729467E-01  -2.61803      -173.827       173.827       1496.95       1670.78    
  49  0.720547     -0.327745      -21.7610       21.7610       1549.69       1571.46    
  50  0.742905     -0.297187      -19.7321       19.7321       1569.79       1589.52    
  51  0.807330     -0.214023      -14.2104       14.2104       1581.32       1595.53    
  52  0.387442     -0.948190      -62.9563       62.9563       1506.58       1569.54    
  53  0.207045      -1.57482      -104.562       104.562       1560.83       1665.39    
  54  0.823983     -0.193606      -12.8547       12.8547       1580.47       1593.32    
  55  0.950173E-01  -2.35370      -156.277       156.277       1552.59       1708.87    
  56  0.662008     -0.412478      -27.3870       27.3870       1576.82       1604.21    
  57  0.640494E-01  -2.74810      -182.464       182.464       1614.33       1796.80    
  58  0.772515     -0.258104      -17.1372       17.1372       1637.85       1654.98    
  59  0.204175      -1.58878      -105.489       105.489       1356.13       1461.62    
  60  0.193223      -1.64391      -109.150       109.150       1555.06       1664.21    
  61  0.846602     -0.166525      -11.0566       11.0566       1619.56       1630.61    
  62  0.699262E-01  -2.66031      -176.635       176.635       1561.33       1737.96    
  63  0.581483     -0.542173      -35.9983       35.9983       1683.61       1719.61    
  64  0.497263     -0.698636      -46.3869       46.3869       1699.88       1746.27    
  65  0.912190     -0.919065E-01  -6.10225       6.10225       1527.51       1533.62    
  66  0.486665     -0.720179      -47.8172       47.8172       1747.07       1794.89    
  67  0.635633     -0.453135      -30.0865       30.0865       1738.05       1768.14    
  68  0.217422      -1.52591      -101.315       101.315       1582.86       1684.17    
  69  0.214720E-01  -3.84101      -255.029       255.029       1666.68       1921.71    
  70  0.256495      -1.36065      -90.3419       90.3419       1735.45       1825.79    
  71  0.838851     -0.175722      -11.6673       11.6673       1705.34       1717.01    
  72  0.319226      -1.14186      -75.8151       75.8151       1684.80       1760.61    
  73  0.779832     -0.248677      -16.5112       16.5112       1830.87       1847.38    
  74  0.133931      -2.01043      -133.485       133.485       1061.57       1195.06    
loop,thermsimp(1:2)       63   1.00468       18.1853    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307        984.15        129.09          0.64         30.17          1.66          0.05        161.61
Just calling func    0   0        161.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    308       1397.21        128.55          0.63         29.94          2.12          0.04        161.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    984.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       63
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       64
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      307     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01  -2.41295       2.41295       1039.39       1041.80    
   2  0.186231      -1.68077      -111.597       111.597       1082.37       1193.97    
   3  0.127308      -2.06115      -136.853       136.853       1042.84       1179.69    
   4  0.305661      -1.18528      -78.6982       78.6982       1119.26       1197.96    
   5  0.685804     -0.377164      -25.0423       25.0423       1147.76       1172.80    
   6  0.713250     -0.337923      -22.4369       22.4369       1145.34       1167.77    
   7  0.562604     -0.575180      -38.1898       38.1898       1157.00       1195.19    
   8  0.410540     -0.890283      -59.1115       59.1115       1061.57       1120.68    
   9  0.667633     -0.404017      -26.8252       26.8252       1076.81       1103.63    
  10  0.111237      -2.19609      -145.812       145.812       1193.97       1339.78    
  11  0.987129     -0.129550E-01 -0.860163      0.860163       1189.08       1189.94    
  12  0.525481     -0.643442      -42.7222       42.7222       1207.13       1249.85    
  13  0.740553     -0.300358      -19.9427       19.9427       1136.23       1156.17    
  14  0.456748E-01  -3.08621      -204.913       204.913       1226.27       1431.19    
  15  0.831796     -0.184168      -12.2281       12.2281       1115.73       1127.95    
  16  0.798422     -0.225118      -14.9470       14.9470       1238.38       1253.33    
  17  0.985535     -0.145708E-01 -0.967445      0.967445       1217.14       1218.11    
  18  0.323340      -1.12905      -74.9647       74.9647       1186.97       1261.94    
  19  0.745026     -0.294336      -19.5428       19.5428       1240.71       1260.25    
  20  0.711871     -0.339858      -22.5653       22.5653       1281.30       1303.86    
  21  0.232875      -1.45725      -96.7562       96.7562       1286.40       1383.16    
  22  0.118192      -2.13545      -141.786       141.786       1300.22       1442.01    
  23  0.310641      -1.16912      -77.6250       77.6250       1244.63       1322.26    
  24  0.220899      -1.51005      -100.262       100.262       1228.83       1329.09    
  25  0.487797     -0.717856      -47.6630       47.6630       1172.60       1220.27    
  26  0.278848      -1.27709      -84.7939       84.7939       1331.35       1416.14    
  27  0.159355      -1.83662      -121.945       121.945       1389.10       1511.05    
  28  0.473156     -0.748329      -49.6863       49.6863       1347.44       1397.12    
  29  0.358980      -1.02449      -68.0222       68.0222       1332.88       1400.90    
  30  0.873266     -0.135515      -8.99768       8.99768       1250.82       1259.82    
  31  0.168201      -1.78260      -118.358       118.358       1412.16       1530.52    
  32  0.492581     -0.708096      -47.0150       47.0150       1405.23       1452.24    
  33  0.878329     -0.129734      -8.61388       8.61388       1418.12       1426.73    
  34  0.266147      -1.32371      -87.8894       87.8894       1407.76       1495.65    
  35  0.510485     -0.672394      -44.6445       44.6445       1436.49       1481.14    
  36  0.810074     -0.210630      -13.9851       13.9851       1445.71       1459.70    
  37  0.950614     -0.506467E-01  -3.36275       3.36275       1356.13       1359.50    
  38  0.329006      -1.11168      -73.8115       73.8115       1407.55       1481.36    
  39  0.934893E-01  -2.36991      -157.353       157.353       1428.62       1585.98    
  40  0.686671     -0.375900      -24.9584       24.9584       1407.45       1432.41    
  41  0.888060     -0.118716      -7.88233       7.88233       1463.91       1471.79    
  42  0.749618     -0.288192      -19.1349       19.1349       1437.49       1456.62    
  43  0.433754     -0.835279      -55.4594       55.4594       1447.80       1503.26    
  44  0.630341     -0.461494      -30.6415       30.6415       1439.42       1470.06    
  45  0.569388     -0.563194      -37.3940       37.3940       1453.26       1490.65    
  46  0.965872     -0.347242E-01  -2.30556       2.30556       1448.61       1450.92    
  47  0.797995     -0.225653      -14.9825       14.9825       1527.51       1542.50    
  48  0.716091     -0.333948      -22.1729       22.1729       1519.51       1541.68    
  49  0.339849      -1.07925      -71.6585       71.6585       1506.58       1578.24    
  50  0.202757      -1.59575      -105.952       105.952       1549.69       1655.65    
  51  0.266068      -1.32400      -87.9089       87.9089       1450.94       1538.85    
  52  0.985546E-01  -2.31715      -153.850       153.850       1569.79       1723.64    
  53  0.751309     -0.285938      -18.9853       18.9853       1580.47       1599.45    
  54  0.846042     -0.167187      -11.1006       11.1006       1581.32       1592.42    
  55  0.714380     -0.336340      -22.3317       22.3317       1576.82       1599.16    
  56  0.873273     -0.135507      -8.99717       8.99717       1619.56       1628.56    
  57  0.373211     -0.985610      -65.4409       65.4409       1637.85       1703.29    
  58  0.618869     -0.479862      -31.8610       31.8610       1555.06       1586.92    
  59  0.529025     -0.636720      -42.2758       42.2758       1560.83       1603.11    
  60  0.659913E-01  -2.71823      -180.481       180.481       1496.95       1677.43    
  61  0.541361E-01  -2.91625      -193.629       193.629       1545.03       1738.66    
  62  0.785735E-01  -2.54372      -168.894       168.894       1582.86       1751.75    
  63  0.569382     -0.563203      -37.3946       37.3946       1552.59       1589.99    
  64  0.564569     -0.571693      -37.9583       37.9583       1705.34       1743.30    
  65  0.689424     -0.371899      -24.6927       24.6927       1683.61       1708.30    
  66  0.992491     -0.753783E-02 -0.500484      0.500484       1561.33       1561.83    
  67  0.922665     -0.804887E-01  -5.34416       5.34416       1699.88       1705.22    
  68  0.497573     -0.698012      -46.3454       46.3454       1684.80       1731.14    
  69  0.594717     -0.519669      -34.5041       34.5041       1738.05       1772.55    
  70  0.132266      -2.02294      -134.316       134.316       1747.07       1881.38    
  71  0.165174      -1.80075      -119.563       119.563       1614.33       1733.90    
  72  0.787265     -0.239190      -15.8813       15.8813       1735.45       1751.33    
  73  0.825773     -0.191435      -12.7106       12.7106       1830.87       1843.58    
  74  0.927368     -0.754049E-01  -5.00661       5.00661       984.147       989.153    
loop,thermsimp(1:2)       64   2.41295       111.597    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309       1030.06        129.92          0.69         30.32          0.73          0.04        161.70
Just calling func    0   0        161.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1030.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       64
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       65
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      308     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -56.8835       56.8835       984.147       1041.03    
   2  0.350039      -1.04971      -69.6968       69.6968       1039.39       1109.09    
   3  0.872911     -0.135921      -9.02467       9.02467       1076.81       1085.83    
   4  0.829005     -0.187529      -12.4512       12.4512       1061.57       1074.02    
   5  0.201827      -1.60035      -106.257       106.257       1115.73       1221.98    
   6  0.735791     -0.306809      -20.3710       20.3710       1136.23       1156.60    
   7  0.985788     -0.143135E-01 -0.950362      0.950362       1145.34       1146.29    
   8  0.962727     -0.379858E-01  -2.52212       2.52212       1147.76       1150.28    
   9  0.796954     -0.226958      -15.0692       15.0692       1042.84       1057.91    
  10  0.563149     -0.574211      -38.1255       38.1255       1189.08       1227.20    
  11  0.776846     -0.252513      -16.7660       16.7660       1082.37       1099.14    
  12  0.921010     -0.822839E-01  -5.46335       5.46335       1157.00       1162.46    
  13  0.884938     -0.122238      -8.11617       8.11617       1119.26       1127.38    
  14  0.850974     -0.161373      -10.7146       10.7146       1217.14       1227.86    
  15  0.391065     -0.938882      -62.3383       62.3383       1172.60       1234.94    
  16  0.150921      -1.89100      -125.555       125.555       1207.13       1332.69    
  17  0.295162      -1.22023      -81.0188       81.0188       1238.38       1319.40    
  18  0.662567     -0.411634      -27.3310       27.3310       1250.82       1278.16    
  19  0.893994     -0.112056      -7.44010       7.44010       1240.71       1248.15    
  20  0.103282      -2.27029      -150.739       150.739       1186.97       1337.71    
  21  0.416341     -0.876251      -58.1798       58.1798       1281.30       1339.48    
  22  0.986101E-01  -2.31658      -153.812       153.812       1244.63       1398.44    
  23  0.617817E-01  -2.78415      -184.857       184.857       1228.83       1413.68    
  24  0.371945     -0.989010      -65.6666       65.6666       1193.97       1259.64    
  25  0.884755     -0.122444      -8.12985       8.12985       1356.13       1364.26    
  26  0.584237     -0.537449      -35.6847       35.6847       1286.40       1322.09    
  27  0.239981      -1.42719      -94.7605       94.7605       1347.44       1442.20    
  28  0.106477      -2.23982      -148.716       148.716       1332.88       1481.59    
  29  0.142954      -1.94523      -129.156       129.156       1331.35       1460.50    
  30  0.802284     -0.220292      -14.6266       14.6266       1418.12       1432.75    
  31  0.373571     -0.984648      -65.3770       65.3770       1226.27       1291.65    
  32  0.617091     -0.482739      -32.0521       32.0521       1407.45       1439.50    
  33  0.813617     -0.206266      -13.6953       13.6953       1300.22       1313.92    
  34  0.219787E-01  -3.81768      -253.480       253.480       1448.61       1702.09    
  35  0.398995     -0.918807      -61.0054       61.0054       1405.23       1466.23    
  36  0.906985     -0.976296E-01  -6.48225       6.48225       1437.49       1443.97    
  37  0.259146E-01  -3.65295      -242.542       242.542       1445.71       1688.25    
  38  0.347543      -1.05687      -70.1721       70.1721       1439.42       1509.59    
  39  0.879549     -0.128346      -8.52168       8.52168       1463.91       1472.43    
  40  0.618015     -0.481242      -31.9527       31.9527       1436.49       1468.44    
  41  0.173348      -1.75246      -116.357       116.357       1407.55       1523.90    
  42  0.324418      -1.12572      -74.7438       74.7438       1453.26       1528.00    
  43  0.426503     -0.852135      -56.5786       56.5786       1407.76       1464.34    
  44  0.672650     -0.396530      -26.3282       26.3282       1447.80       1474.13    
  45  0.500711     -0.691727      -45.9281       45.9281       1389.10       1435.03    
  46  0.457446     -0.782097      -51.9283       51.9283       1412.16       1464.09    
  47  0.408507     -0.895245      -59.4410       59.4410       1450.94       1510.38    
  48  0.649058     -0.432234      -28.6987       28.6987       1519.51       1548.20    
  49  0.275220      -1.29018      -85.6635       85.6635       1527.51       1613.18    
  50  0.706820     -0.346979      -23.0381       23.0381       1561.33       1584.37    
  51  0.596044     -0.517441      -34.3561       34.3561       1506.58       1540.94    
  52  0.362601      -1.01445      -67.3559       67.3559       1428.62       1495.98    
  53  0.934637     -0.675969E-01  -4.48818       4.48818       1555.06       1559.55    
  54  0.724055     -0.322888      -21.4386       21.4386       1552.59       1574.03    
  55  0.871040     -0.138067      -9.16713       9.16713       1581.32       1590.49    
  56  0.722457     -0.325097      -21.5852       21.5852       1576.82       1598.41    
  57  0.840721     -0.173495      -11.5194       11.5194       1580.47       1591.99    
  58  0.702714     -0.352805      -23.4249       23.4249       1560.83       1584.26    
  59  0.436737     -0.828424      -55.0043       55.0043       1619.56       1674.56    
  60  0.419753E-01  -3.17067      -210.521       210.521       1549.69       1760.22    
  61  0.588078     -0.530895      -35.2495       35.2495       1496.95       1532.20    
  62  0.762320     -0.271389      -18.0192       18.0192       1637.85       1655.86    
  63  0.646142     -0.436736      -28.9977       28.9977       1699.88       1728.88    
  64  0.940150     -0.617158E-01  -4.09770       4.09770       1683.61       1687.71    
  65  0.254129      -1.36991      -90.9572       90.9572       1569.79       1660.75    
  66  0.598588     -0.513182      -34.0734       34.0734       1684.80       1718.87    
  67  0.254926      -1.36678      -90.7493       90.7493       1614.33       1705.08    
  68  0.423512     -0.859172      -57.0459       57.0459       1545.03       1602.08    
  69  0.562567     -0.575245      -38.1941       38.1941       1705.34       1743.54    
  70  0.451860     -0.794383      -52.7441       52.7441       1735.45       1788.20    
  71  0.683714E-01  -2.68280      -178.128       178.128       1582.86       1760.99    
  72  0.301554E-01  -3.50139      -232.479       232.479       1738.05       1970.53    
  73  0.720678E-01  -2.63015      -174.632       174.632       1830.87       2005.51    
  74  0.298608      -1.20862      -80.2482       80.2482       1030.06       1110.31    
loop,thermsimp(1:2)       65   56.8835       69.6968    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       1669.70        129.75          0.68         30.35          0.82          0.04        161.63
Just calling func    0   0        161.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1669.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       65
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       66
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      309     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -49.5463       49.5463       984.147       1033.69    
   2  0.162949E-01  -4.11691      -273.347       273.347       1042.84       1316.18    
   3  0.560104     -0.579632      -38.4855       38.4855       1061.57       1100.06    
   4  0.583629     -0.538490      -35.7537       35.7537       1076.81       1112.56    
   5  0.794243     -0.230366      -15.2954       15.2954       1082.37       1097.67    
   6  0.183626E-01  -3.99744      -265.415       265.415       1039.39       1304.80    
   7  0.642495     -0.442397      -29.3735       29.3735       1030.06       1059.44    
   8  0.611061E-02  -5.09773      -338.470       338.470       1119.26       1457.73    
   9  0.974115E-01  -2.32881      -154.624       154.624       1145.34       1299.96    
  10  0.817249E-01  -2.50440      -166.283       166.283       1147.76       1314.05    
  11  0.644422     -0.439401      -29.1746       29.1746       1136.23       1165.40    
  12  0.378181     -0.972383      -64.5626       64.5626       1157.00       1221.56    
  13  0.105422      -2.24978      -149.377       149.377       1115.73       1265.10    
  14  0.713647     -0.337367      -22.3999       22.3999       1189.08       1211.48    
  15  0.602100     -0.507333      -33.6850       33.6850       1217.14       1250.83    
  16  0.746624     -0.292194      -19.4006       19.4006       1172.60       1192.00    
  17  0.687673     -0.374442      -24.8616       24.8616       1240.71       1265.57    
  18  0.356323      -1.03192      -68.5156       68.5156       1193.97       1262.49    
  19  0.631203     -0.460128      -30.5508       30.5508       1250.82       1281.38    
  20  0.348432      -1.05431      -70.0025       70.0025       1226.27       1296.28    
  21  0.200848      -1.60521      -106.580       106.580       1300.22       1406.80    
  22  0.863860     -0.146345      -9.71675       9.71675       1238.38       1248.10    
  23  0.278415      -1.27864      -84.8971       84.8971       1286.40       1371.30    
  24  0.871038     -0.138069      -9.16730       9.16730       1207.13       1216.30    
  25  0.581010     -0.542987      -36.0523       36.0523       1186.97       1223.02    
  26  0.960519     -0.402815E-01  -2.67454       2.67454       1281.30       1283.97    
  27  0.104828      -2.25543      -149.752       149.752       1356.13       1505.89    
  28  0.907238     -0.973501E-01  -6.46369       6.46369       1244.63       1251.10    
  29  0.685005     -0.378330      -25.1197       25.1197       1228.83       1253.95    
  30  0.239566E-01  -3.73151      -247.759       247.759       1418.12       1665.88    
  31  0.643900     -0.440211      -29.2284       29.2284       1389.10       1418.33    
  32  0.526819     -0.640898      -42.5533       42.5533       1407.45       1450.00    
  33  0.463387     -0.769192      -51.0715       51.0715       1347.44       1398.51    
  34  0.847158E-01  -2.46845      -163.896       163.896       1437.49       1601.39    
  35  0.134368E-01  -4.30976      -286.152       286.152       1331.35       1617.50    
  36  0.141068      -1.95851      -130.038       130.038       1412.16       1542.20    
  37  0.239867      -1.42767      -94.7920       94.7920       1407.76       1502.56    
  38  0.317049      -1.14870      -76.2694       76.2694       1405.23       1481.50    
  39  0.925847     -0.770459E-01  -5.11556       5.11556       1436.49       1441.61    
  40  0.939258     -0.626649E-01  -4.16072       4.16072       1463.91       1468.07    
  41  0.111598      -2.19286      -145.598       145.598       1447.80       1593.40    
  42  0.357545      -1.02849      -68.2882       68.2882       1332.88       1401.16    
  43  0.902640     -0.102432      -6.80109       6.80109       1428.62       1435.43    
  44  0.914421     -0.894640E-01  -5.94008       5.94008       1439.42       1445.36    
  45  0.320420      -1.13812      -75.5671       75.5671       1450.94       1526.51    
  46  0.341333      -1.07490      -71.3692       71.3692       1407.55       1478.92    
  47  0.509727     -0.673879      -44.7431       44.7431       1453.26       1498.00    
  48  0.130581E-02  -6.64093      -440.933       440.933       1496.95       1937.88    
  49  0.105413      -2.24987      -149.383       149.383       1506.58       1655.96    
  50  0.743306     -0.296647      -19.6963       19.6963       1519.51       1539.20    
  51  0.114013      -2.17144      -144.176       144.176       1555.06       1699.24    
  52  0.225326      -1.49021      -98.9441       98.9441       1552.59       1651.54    
  53  0.131158      -2.03135      -134.874       134.874       1560.83       1695.71    
  54  0.886877     -0.120049      -7.97080       7.97080       1561.33       1569.30    
  55  0.202581      -1.59661      -106.009       106.009       1581.32       1687.33    
  56  0.890722     -0.115722      -7.68355       7.68355       1580.47       1588.15    
  57  0.154728      -1.86608      -123.901       123.901       1576.82       1700.72    
  58  0.246051      -1.40222      -93.1020       93.1020       1545.03       1638.13    
  59  0.936822     -0.652622E-01  -4.33317       4.33317       1527.51       1531.85    
  60  0.803405     -0.218896      -14.5339       14.5339       1637.85       1652.38    
  61  0.621921E-01  -2.77753      -184.418       184.418       1569.79       1754.21    
  62  0.114098      -2.17070      -144.127       144.127       1619.56       1763.68    
  63  0.750290     -0.287295      -19.0753       19.0753       1683.61       1702.69    
  64  0.946840     -0.546256E-01  -3.62694       3.62694       1445.71       1449.34    
  65  0.149613      -1.89970      -126.133       126.133       1448.61       1574.75    
  66  0.470076     -0.754861      -50.1200       50.1200       1614.33       1664.45    
  67  0.936184     -0.659437E-01  -4.37842       4.37842       1684.80       1689.18    
  68  0.136491      -1.99150      -132.228       132.228       1699.88       1832.11    
  69  0.660647     -0.414536      -27.5237       27.5237       1705.34       1732.86    
  70  0.438707     -0.823923      -54.7054       54.7054       1549.69       1604.40    
  71  0.641830     -0.443432      -29.4422       29.4422       1582.86       1612.30    
  72  0.841754E-01  -2.47485      -164.321       164.321       1735.45       1899.77    
  73  0.185718      -1.68352      -111.780       111.780       1738.05       1849.83    
  74  0.279686E-01  -3.57667      -237.478       237.478       1669.70       1907.18    
loop,thermsimp(1:2)       66   49.5463       273.347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       1241.02        129.66          0.69         30.32          1.10          0.04        161.81
Just calling func    0   0        161.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1241.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       66
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       67
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      310     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -22.6265       22.6265       984.147       1006.77    
   2  0.492413     -0.708438      -47.0377       47.0377       1030.06       1077.10    
   3  0.156563      -1.85430      -123.118       123.118       1082.37       1205.49    
   4  0.185270      -1.68594      -111.940       111.940       1061.57       1173.51    
   5  0.685983     -0.376903      -25.0250       25.0250       1076.81       1101.83    
   6  0.518581     -0.656659      -43.5997       43.5997       1136.23       1179.83    
   7  0.430667     -0.842421      -55.9336       55.9336       1172.60       1228.54    
   8  0.748228     -0.290047      -19.2581       19.2581       1189.08       1208.34    
   9  0.348167      -1.05507      -70.0530       70.0530       1207.13       1277.19    
  10  0.281980E-01  -3.56850      -236.936       236.936       1157.00       1393.93    
  11  0.670749     -0.399360      -26.5160       26.5160       1186.97       1213.49    
  12  0.225031      -1.49152      -99.0313       99.0313       1238.38       1337.42    
  13  0.258016      -1.35474      -89.9495       89.9495       1217.14       1307.09    
  14  0.122388      -2.10056      -139.469       139.469       1244.63       1384.10    
  15  0.556210     -0.586609      -38.9487       38.9487       1228.83       1267.77    
  16  0.938933     -0.630108E-01  -4.18369       4.18369       1193.97       1198.15    
  17  0.440352     -0.820180      -54.4569       54.4569       1115.73       1170.18    
  18  0.779048     -0.249683      -16.5780       16.5780       1240.71       1257.29    
  19  0.929725     -0.728667E-01  -4.83808       4.83808       1250.82       1255.66    
  20  0.330740      -1.10642      -73.4625       73.4625       1281.30       1354.76    
  21  0.214890      -1.53763      -102.093       102.093       1226.27       1328.37    
  22  0.363221      -1.01274      -67.2425       67.2425       1145.34       1212.58    
  23  0.681309     -0.383740      -25.4789       25.4789       1039.39       1064.87    
  24  0.107313      -2.23200      -148.197       148.197       1147.76       1295.96    
  25  0.622524     -0.473973      -31.4701       31.4701       1042.84       1074.31    
  26  0.532378     -0.630402      -41.8564       41.8564       1286.40       1328.26    
  27  0.298562      -1.20878      -80.2584       80.2584       1347.44       1427.70    
  28  0.432099     -0.839100      -55.7132       55.7132       1332.88       1388.59    
  29  0.243978      -1.41068      -93.6639       93.6639       1300.22       1393.89    
  30  0.581243     -0.542587      -36.0258       36.0258       1389.10       1425.13    
  31  0.897127E-01  -2.41114      -160.091       160.091       1428.62       1588.71    
  32  0.738124     -0.303644      -20.1608       20.1608       1436.49       1456.65    
  33  0.462727     -0.770619      -51.1662       51.1662       1439.42       1490.59    
  34  0.984641E-01  -2.31806      -153.911       153.911       1445.71       1599.62    
  35  0.641923     -0.443287      -29.4326       29.4326       1407.45       1436.88    
  36  0.334628      -1.09474      -72.6865       72.6865       1119.26       1191.95    
  37  0.482851     -0.728048      -48.3397       48.3397       1463.91       1512.25    
  38  0.826279     -0.190822      -12.6699       12.6699       1407.55       1420.22    
  39  0.966417     -0.341596E-01  -2.26807       2.26807       1405.23       1407.50    
  40  0.236833      -1.44040      -95.6373       95.6373       1453.26       1548.89    
  41  0.274744      -1.29192      -85.7784       85.7784       1407.76       1493.54    
  42  0.310307      -1.17019      -77.6965       77.6965       1356.13       1433.83    
  43  0.697298     -0.360543      -23.9387       23.9387       1450.94       1474.88    
  44  0.239072      -1.43099      -95.0125       95.0125       1527.51       1622.53    
  45  0.809729     -0.211055      -14.0133       14.0133       1519.51       1533.52    
  46  0.651880     -0.427895      -28.4106       28.4106       1412.16       1440.58    
  47  0.515020     -0.663550      -44.0573       44.0573       1561.33       1605.38    
  48  0.359059      -1.02427      -68.0077       68.0077       1448.61       1516.62    
  49  0.516010E-02  -5.26680      -349.696       349.696       1580.47       1930.16    
  50  0.321807      -1.13380      -75.2803       75.2803       1447.80       1523.08    
  51  0.787972     -0.238293      -15.8218       15.8218       1437.49       1453.31    
  52  0.842264     -0.171662      -11.3977       11.3977       1549.69       1561.09    
  53  0.201829      -1.60034      -106.256       106.256       1582.86       1689.11    
  54  0.650136     -0.430573      -28.5885       28.5885       1331.35       1359.94    
  55  0.498155     -0.696844      -46.2679       46.2679       1545.03       1591.30    
  56  0.780214E-01  -2.55077      -169.362       169.362       1552.59       1721.95    
  57  0.840777     -0.173429      -11.5150       11.5150       1637.85       1649.36    
  58  0.514128     -0.665282      -44.1723       44.1723       1506.58       1550.75    
  59  0.683522E-01  -2.68308      -178.147       178.147       1614.33       1792.48    
  60  0.376137E-01  -3.28039      -217.806       217.806       1418.12       1635.93    
  61  0.284022      -1.25870      -83.5733       83.5733       1581.32       1664.89    
  62  0.136027      -1.99490      -132.454       132.454       1684.80       1817.25    
  63  0.698137     -0.359341      -23.8589       23.8589       1560.83       1584.69    
  64  0.436751     -0.828392      -55.0022       55.0022       1555.06       1610.06    
  65  0.983110     -0.170340E-01  -1.13100       1.13100       1576.82       1577.95    
  66  0.807889E-01  -2.51592      -167.048       167.048       1683.61       1850.66    
  67  0.618306     -0.480773      -31.9215       31.9215       1705.34       1737.26    
  68  0.640808     -0.445025      -29.5480       29.5480       1569.79       1599.34    
  69  0.353445      -1.04003      -69.0540       69.0540       1619.56       1688.61    
  70  0.705613     -0.348688      -23.1516       23.1516       1699.88       1723.03    
  71  0.559094     -0.581438      -38.6054       38.6054       1738.05       1776.66    
  72  0.496930     -0.699307      -46.4314       46.4314       1735.45       1781.88    
  73  0.113595      -2.17512      -144.420       144.420       1669.70       1814.12    
  74  0.215620      -1.53424      -101.868       101.868       1241.02       1342.89    
loop,thermsimp(1:2)       67   22.6265       47.0377    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       1057.86        129.76          0.71         30.36          0.68          0.05        161.57
Just calling func    0   0        161.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1057.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       67
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       68
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      311     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -34.4656       34.4656       984.147       1018.61    
   2  0.204294      -1.58819      -105.450       105.450       1039.39       1144.84    
   3  0.902141     -0.102985      -6.83780       6.83780       1042.84       1049.67    
   4  0.317306      -1.14789      -76.2157       76.2157       1030.06       1106.28    
   5  0.914914E-01  -2.39151      -158.787       158.787       1076.81       1235.59    
   6  0.362439      -1.01490      -67.3855       67.3855       1115.73       1183.11    
   7  0.284546      -1.25686      -83.4508       83.4508       1061.57       1145.02    
   8  0.752727     -0.284053      -18.8601       18.8601       1136.23       1155.09    
   9  0.972148     -0.282475E-01  -1.87553       1.87553       1119.26       1121.14    
  10  0.312417      -1.16342      -77.2465       77.2465       1193.97       1271.22    
  11  0.772549E-01  -2.56064      -170.017       170.017       1082.37       1252.39    
  12  0.190763      -1.65672      -110.000       110.000       1189.08       1299.08    
  13  0.829036     -0.187492      -12.4488       12.4488       1145.34       1157.79    
  14  0.309766      -1.17194      -77.8124       77.8124       1186.97       1264.78    
  15  0.691616     -0.368724      -24.4819       24.4819       1172.60       1197.09    
  16  0.177510      -1.72873      -114.781       114.781       1250.82       1365.61    
  17  0.848561     -0.164214      -10.9032       10.9032       1240.71       1251.61    
  18  0.464945     -0.765836      -50.8487       50.8487       1228.83       1279.67    
  19  0.626682     -0.467316      -31.0281       31.0281       1207.13       1238.16    
  20  0.451266     -0.795699      -52.8315       52.8315       1147.76       1200.59    
  21  0.161179E-01  -4.12783      -274.072       274.072       1217.14       1491.22    
  22  0.848853     -0.163869      -10.8803       10.8803       1286.40       1297.28    
  23  0.565946     -0.569256      -37.7965       37.7965       1226.27       1264.07    
  24  0.798567     -0.224937      -14.9350       14.9350       1238.38       1253.32    
  25  0.282371      -1.26453      -83.9604       83.9604       1241.02       1324.98    
  26  0.887219     -0.119663      -7.94521       7.94521       1281.30       1289.24    
  27  0.311981      -1.16481      -77.3392       77.3392       1331.35       1408.69    
  28  0.454937     -0.787596      -52.2935       52.2935       1244.63       1296.92    
  29  0.200774E-01  -3.90816      -259.488       259.488       1332.88       1592.36    
  30  0.549692     -0.598397      -39.7313       39.7313       1300.22       1339.96    
  31  0.928164     -0.745470E-01  -4.94965       4.94965       1157.00       1161.95    
  32  0.876026     -0.132360      -8.78820       8.78820       1405.23       1414.02    
  33  0.360538      -1.02016      -67.7347       67.7347       1407.55       1475.28    
  34  0.810484     -0.210124      -13.9514       13.9514       1389.10       1403.06    
  35  0.350387      -1.04872      -69.6310       69.6310       1347.44       1417.07    
  36  0.609257     -0.495514      -32.9003       32.9003       1356.13       1389.03    
  37  0.847473     -0.165497      -10.9884       10.9884       1407.45       1418.44    
  38  0.459433     -0.777763      -51.6406       51.6406       1412.16       1463.80    
  39  0.213778      -1.54282      -102.437       102.437       1437.49       1539.93    
  40  0.983077     -0.170677E-01  -1.13323       1.13323       1436.49       1437.62    
  41  0.719533     -0.329153      -21.8545       21.8545       1450.94       1472.79    
  42  0.317292      -1.14793      -76.2186       76.2186       1439.42       1515.64    
  43  0.300670      -1.20174      -79.7913       79.7913       1407.76       1487.56    
  44  0.486388     -0.720748      -47.8550       47.8550       1463.91       1511.76    
  45  0.309580      -1.17254      -77.8522       77.8522       1448.61       1526.47    
  46  0.111802      -2.19103      -145.476       145.476       1447.80       1593.28    
  47  0.913484     -0.904897E-01  -6.00818       6.00818       1519.51       1525.51    
  48  0.438377     -0.824676      -54.7555       54.7555       1453.26       1508.01    
  49  0.773114     -0.257329      -17.0857       17.0857       1506.58       1523.67    
  50  0.248259      -1.39328      -92.5090       92.5090       1549.69       1642.20    
  51  0.502855     -0.687454      -45.6444       45.6444       1576.82       1622.47    
  52  0.827610E-01  -2.49180      -165.446       165.446       1560.83       1726.28    
  53  0.528759     -0.637222      -42.3092       42.3092       1428.62       1470.93    
  54  0.711957     -0.339738      -22.5574       22.5574       1545.03       1567.59    
  55  0.703963     -0.351029      -23.3070       23.3070       1569.79       1593.09    
  56  0.419247     -0.869295      -57.7180       57.7180       1445.71       1503.43    
  57  0.939830     -0.620566E-01  -4.12033       4.12033       1561.33       1565.45    
  58  0.401337     -0.912955      -60.6169       60.6169       1555.06       1615.68    
  59  0.547477     -0.602435      -39.9995       39.9995       1527.51       1567.51    
  60  0.237364      -1.43816      -95.4887       95.4887       1418.12       1513.61    
  61  0.619970E-01  -2.78067      -184.626       184.626       1637.85       1822.47    
  62  0.662658     -0.411496      -27.3218       27.3218       1581.32       1608.64    
  63  0.891998     -0.114291      -7.58850       7.58850       1619.56       1627.15    
  64  0.830370     -0.185883      -12.3420       12.3420       1582.86       1595.20    
  65  0.900614     -0.104678      -6.95026       6.95026       1552.59       1559.54    
  66  0.258356      -1.35342      -89.8619       89.8619       1699.88       1789.74    
  67  0.946683E-01  -2.35738      -156.521       156.521       1705.34       1861.86    
  68  0.763751     -0.269514      -17.8947       17.8947       1738.05       1755.94    
  69  0.161805      -1.82136      -120.932       120.932       1735.45       1856.38    
  70  0.571882     -0.558823      -37.1038       37.1038       1614.33       1651.44    
  71  0.421732     -0.863386      -57.3257       57.3257       1669.70       1727.03    
  72  0.877271     -0.130939      -8.69390       8.69390       1684.80       1693.49    
  73  0.186780      -1.67783      -111.401       111.401       1683.61       1795.01    
  74  0.530698     -0.633563      -42.0662       42.0662       1057.86       1099.93    
loop,thermsimp(1:2)       68   34.4656       105.450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313       1005.15        129.84          0.68         30.42          0.71          0.03        161.68
Just calling func    0   0        161.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    314       1367.00        128.42          0.63         29.89          2.25          0.03        161.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1005.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       68
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       69
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      313     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -54.4157       54.4157       984.147       1038.56    
   2  0.752309     -0.284608      -18.8969       18.8969       1042.84       1061.73    
   3  0.209108      -1.56490      -103.904       103.904       1057.86       1161.77    
   4  0.842922     -0.170881      -11.3459       11.3459       1030.06       1041.41    
   5  0.161148      -1.82543      -121.202       121.202       1119.26       1240.46    
   6  0.601748     -0.507917      -33.7238       33.7238       1039.39       1073.11    
   7  0.890912     -0.115510      -7.66943       7.66943       1061.57       1069.24    
   8  0.631939     -0.458963      -30.4735       30.4735       1136.23       1166.70    
   9  0.144759E-01  -4.23527      -281.206       281.206       1145.34       1426.54    
  10  0.653698     -0.425110      -28.2257       28.2257       1157.00       1185.22    
  11  0.401463     -0.912639      -60.5959       60.5959       1115.73       1176.32    
  12  0.906126     -0.985765E-01  -6.54512       6.54512       1172.60       1179.15    
  13  0.480601E-01  -3.03530      -201.533       201.533       1147.76       1349.30    
  14  0.264260      -1.33082      -88.3616       88.3616       1076.81       1165.17    
  15  0.586033     -0.534379      -35.4808       35.4808       1207.13       1242.61    
  16  0.323072      -1.12988      -75.0198       75.0198       1240.71       1315.73    
  17  0.785147     -0.241884      -16.0602       16.0602       1082.37       1098.43    
  18  0.139165      -1.97210      -130.940       130.940       1238.38       1369.32    
  19  0.105818E-01  -4.54862      -302.011       302.011       1226.27       1528.28    
  20  0.896943     -0.108763      -7.22149       7.22149       1186.97       1194.19    
  21  0.854239     -0.157544      -10.4603       10.4603       1193.97       1204.43    
  22  0.566003     -0.569157      -37.7899       37.7899       1228.83       1266.62    
  23  0.566387     -0.568477      -37.7448       37.7448       1281.30       1319.04    
  24  0.414905     -0.879707      -58.4093       58.4093       1244.63       1303.04    
  25  0.173772      -1.75001      -116.194       116.194       1286.40       1402.60    
  26  0.884308E-01  -2.42554      -161.047       161.047       1189.08       1350.13    
  27  0.417457     -0.873573      -58.0020       58.0020       1241.02       1299.02    
  28  0.334615      -1.09477      -72.6890       72.6890       1300.22       1372.91    
  29  0.706024E-01  -2.65069      -175.996       175.996       1250.82       1426.82    
  30  0.996422     -0.358418E-02 -0.237976      0.237976       1356.13       1356.37    
  31  0.894500     -0.111491      -7.40258       7.40258       1389.10       1396.51    
  32  0.827855     -0.188917      -12.5434       12.5434       1331.35       1343.89    
  33  0.434964     -0.832492      -55.2744       55.2744       1405.23       1460.50    
  34  0.121450      -2.10825      -139.980       139.980       1347.44       1487.42    
  35  0.498977     -0.695195      -46.1584       46.1584       1407.45       1453.61    
  36  0.117961      -2.13740      -141.916       141.916       1436.49       1578.41    
  37  0.309211      -1.17373      -77.9314       77.9314       1412.16       1490.10    
  38  0.786265     -0.240461      -15.9658       15.9658       1428.62       1444.59    
  39  0.614330     -0.487222      -32.3498       32.3498       1450.94       1483.29    
  40  0.820857     -0.197407      -13.1071       13.1071       1407.55       1420.65    
  41  0.670448     -0.399809      -26.5458       26.5458       1407.76       1434.31    
  42  0.742403     -0.297863      -19.7770       19.7770       1217.14       1236.92    
  43  0.760912E-01  -2.57582      -171.025       171.025       1445.71       1616.74    
  44  0.709677     -0.342945      -22.7703       22.7703       1453.26       1476.03    
  45  0.943449     -0.582133E-01  -3.86515       3.86515       1463.91       1467.77    
  46  0.176370      -1.73517      -115.209       115.209       1418.12       1533.33    
  47  0.866890     -0.142843      -9.48427       9.48427       1439.42       1448.91    
  48  0.711056     -0.341004      -22.6414       22.6414       1506.58       1529.22    
  49  0.929667E-01  -2.37551      -157.725       157.725       1519.51       1677.23    
  50  0.960091     -0.407270E-01  -2.70412       2.70412       1448.61       1451.32    
  51  0.948380     -0.530000E-01  -3.51900       3.51900       1437.49       1441.01    
  52  0.257449      -1.35693      -90.0953       90.0953       1552.59       1642.69    
  53  0.117236      -2.14357      -142.325       142.325       1561.33       1703.65    
  54  0.218340E-01  -3.82429      -253.919       253.919       1527.51       1781.43    
  55  0.523421     -0.647370      -42.9830       42.9830       1545.03       1588.01    
  56  0.577211     -0.549547      -36.4879       36.4879       1332.88       1369.36    
  57  0.288682      -1.24243      -82.4928       82.4928       1569.79       1652.28    
  58  0.672927E-01  -2.69870      -179.184       179.184       1447.80       1626.98    
  59  0.530586     -0.633774      -42.0803       42.0803       1582.86       1624.94    
  60  0.511831     -0.669760      -44.4696       44.4696       1581.32       1625.79    
  61  0.658851     -0.417258      -27.7044       27.7044       1555.06       1582.76    
  62  0.108719E-01  -4.52157      -300.216       300.216       1576.82       1877.04    
  63  0.252985      -1.37443      -91.2568       91.2568       1619.56       1710.82    
  64  0.741974     -0.298440      -19.8153       19.8153       1549.69       1569.51    
  65  0.978889     -0.213374E-01  -1.41673       1.41673       1614.33       1615.75    
  66  0.482845     -0.728059      -48.3404       48.3404       1684.80       1733.14    
  67  0.701589     -0.354408      -23.5314       23.5314       1560.83       1584.36    
  68  0.323083      -1.12985      -75.0177       75.0177       1669.70       1744.72    
  69  0.960426     -0.403786E-01  -2.68099       2.68099       1738.05       1740.73    
  70  0.803478     -0.218806      -14.5279       14.5279       1699.88       1714.41    
  71  0.927800     -0.749395E-01  -4.97570       4.97570       1683.61       1688.59    
  72  0.414115     -0.881611      -58.5357       58.5357       1637.85       1696.38    
  73  0.510824     -0.671729      -44.6004       44.6004       1735.45       1780.05    
  74  0.687172     -0.375171      -24.9100       24.9100       1005.15       1030.06    
loop,thermsimp(1:2)       69   54.4157       18.8969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315       1013.25        129.95          0.69         30.25          0.59          0.04        161.51
Just calling func    0   0        161.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    316       1114.75        130.09          0.69         30.19          0.38          0.04        161.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1013.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       69
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       70
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      315     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.775385      0.775385       1005.15       1005.92    
   2  0.482301     -0.729186      -48.4153       48.4153       984.147       1032.56    
   3  0.546964     -0.603372      -40.0617       40.0617       1030.06       1070.13    
   4  0.543918     -0.608957      -40.4325       40.4325       1042.84       1083.27    
   5  0.427641     -0.849472      -56.4018       56.4018       1061.57       1117.97    
   6  0.498345     -0.696462      -46.2425       46.2425       1039.39       1085.63    
   7  0.989308     -0.107494E-01 -0.713718      0.713718       1082.37       1083.08    
   8  0.658822     -0.417302      -27.7073       27.7073       1057.86       1085.57    
   9  0.917808     -0.857673E-01  -5.69463       5.69463       1076.81       1082.50    
  10  0.914490E-04  -9.29973      -617.468       617.468       1136.23       1753.69    
  11  0.989901     -0.101499E-01 -0.673916      0.673916       1115.73       1116.40    
  12  0.558183     -0.583069      -38.7137       38.7137       1172.60       1211.32    
  13  0.706994     -0.346733      -23.0218       23.0218       1157.00       1180.02    
  14  0.599152     -0.512240      -34.0109       34.0109       1186.97       1220.98    
  15  0.845909     -0.167343      -11.1110       11.1110       1193.97       1205.08    
  16  0.655384     -0.422534      -28.0547       28.0547       1217.14       1245.20    
  17  0.412232E-01  -3.18875      -211.721       211.721       1119.26       1330.98    
  18  0.495401     -0.702387      -46.6359       46.6359       1207.13       1253.77    
  19  0.378829     -0.970671      -64.4490       64.4490       1228.83       1293.27    
  20  0.653665E-02  -5.03033      -333.995       333.995       1241.02       1575.02    
  21  0.782670     -0.245045      -16.2701       16.2701       1244.63       1260.90    
  22  0.945547     -0.559921E-01  -3.71767       3.71767       1240.71       1244.43    
  23  0.969857     -0.306063E-01  -2.03215       2.03215       1281.30       1283.33    
  24  0.822249     -0.195712      -12.9945       12.9945       1331.35       1344.34    
  25  0.265012E-01  -3.63056      -241.056       241.056       1147.76       1388.82    
  26  0.360432E-01  -3.32304      -220.637       220.637       1189.08       1409.72    
  27  0.796418     -0.227631      -15.1138       15.1138       1356.13       1371.25    
  28  0.292313E-01  -3.53252      -234.546       234.546       1238.38       1472.93    
  29  0.227321      -1.48139      -98.3590       98.3590       1332.88       1431.23    
  30  0.812637     -0.207471      -13.7753       13.7753       1300.22       1314.00    
  31  0.930544     -0.719857E-01  -4.77959       4.77959       1389.10       1393.88    
  32  0.674873     -0.393231      -26.1091       26.1091       1286.40       1312.51    
  33  0.264030      -1.33169      -88.4194       88.4194       1407.55       1495.97    
  34  0.807464     -0.213856      -14.1993       14.1993       1145.34       1159.54    
  35  0.653731     -0.425060      -28.2224       28.2224       1250.82       1279.05    
  36  0.858536     -0.152527      -10.1272       10.1272       1407.76       1417.89    
  37  0.538887     -0.618250      -41.0495       41.0495       1437.49       1478.54    
  38  0.468049     -0.759182      -50.4069       50.4069       1428.62       1479.03    
  39  0.401324     -0.912987      -60.6189       60.6189       1439.42       1500.04    
  40  0.363356      -1.01237      -67.2178       67.2178       1448.61       1515.83    
  41  0.924933     -0.780342E-01  -5.18118       5.18118       1407.45       1412.63    
  42  0.797289     -0.226538      -15.0413       15.0413       1405.23       1420.27    
  43  0.200097      -1.60895      -106.828       106.828       1463.91       1570.73    
  44  0.686219     -0.376559      -25.0021       25.0021       1453.26       1478.26    
  45  0.895629     -0.110230      -7.31883       7.31883       1450.94       1458.26    
  46  0.331830      -1.10313      -73.2439       73.2439       1347.44       1420.68    
  47  0.967018     -0.335379E-01  -2.22679       2.22679       1412.16       1414.39    
  48  0.268282      -1.31572      -87.3588       87.3588       1226.27       1313.63    
  49  0.472399     -0.749931      -49.7927       49.7927       1506.58       1556.37    
  50  0.399276E-01  -3.22069      -213.842       213.842       1418.12       1631.96    
  51  0.956493     -0.444820E-01  -2.95344       2.95344       1549.69       1552.65    
  52  0.444161     -0.811569      -53.8852       53.8852       1436.49       1490.38    
  53  0.308942      -1.17460      -77.9893       77.9893       1555.06       1633.05    
  54  0.602319     -0.506968      -33.6608       33.6608       1560.83       1594.49    
  55  0.533797     -0.627740      -41.6796       41.6796       1545.03       1586.71    
  56  0.990519     -0.952607E-02 -0.632496      0.632496       1614.33       1614.97    
  57  0.931261     -0.712158E-01  -4.72847       4.72847       1445.71       1450.44    
  58  0.185125      -1.68672      -111.992       111.992       1582.86       1694.85    
  59  0.251659E-02  -5.98485      -397.372       397.372       1581.32       1978.69    
  60  0.706458     -0.347491      -23.0721       23.0721       1447.80       1470.87    
  61  0.555619     -0.587673      -39.0193       39.0193       1552.59       1591.61    
  62  0.798153     -0.225455      -14.9694       14.9694       1569.79       1584.76    
  63  0.951290     -0.499358E-01  -3.31556       3.31556       1519.51       1522.82    
  64  0.247755      -1.39532      -92.6439       92.6439       1683.61       1776.26    
  65  0.867838     -0.141750      -9.41169       9.41169       1637.85       1647.26    
  66  0.164123E-01  -4.10972      -272.871       272.871       1561.33       1834.20    
  67  0.443305     -0.813497      -54.0132       54.0132       1619.56       1673.57    
  68  0.390544     -0.940215      -62.4268       62.4268       1699.88       1762.31    
  69  0.854116     -0.157688      -10.4699       10.4699       1684.80       1695.27    
  70  0.873727     -0.134987      -8.96267       8.96267       1738.05       1747.01    
  71  0.656755E-01  -2.72303      -180.799       180.799       1669.70       1850.50    
  72  0.742002     -0.298403      -19.8128       19.8128       1735.45       1755.26    
  73  0.753201E-01  -2.58601      -171.701       171.701       1527.51       1699.22    
  74  0.804282     -0.217805      -14.4615       14.4615       1013.25       1027.71    
loop,thermsimp(1:2)       70  0.775385       48.4153    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       1009.14        129.90          0.68         30.03          1.74          0.03        162.37
Just calling func    0   0        162.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    318        992.39        129.87          0.68         29.98          1.21          0.04        161.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    992.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       70
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       71
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      317     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -9.99765       9.99765       1005.15       1015.15    
   2  0.573661     -0.555717      -36.8976       36.8976       1013.25       1050.14    
   3  0.499290     -0.694569      -46.1168       46.1168       984.147       1030.26    
   4  0.677563     -0.389253      -25.8450       25.8450       1030.06       1055.91    
   5  0.476566     -0.741149      -49.2096       49.2096       1076.81       1126.02    
   6  0.153036      -1.87708      -124.631       124.631       1082.37       1207.00    
   7  0.626270     -0.467973      -31.0717       31.0717       1042.84       1073.91    
   8  0.794744     -0.229735      -15.2536       15.2536       1057.86       1073.12    
   9  0.111868E-01  -4.49302      -298.320       298.320       1039.39       1337.71    
  10  0.643880     -0.440243      -29.2305       29.2305       1115.73       1144.96    
  11  0.634705     -0.454595      -30.1834       30.1834       1061.57       1091.75    
  12  0.653568     -0.425308      -28.2389       28.2389       1145.34       1173.58    
  13  0.888231     -0.118524      -7.86955       7.86955       1157.00       1164.87    
  14  0.681775E-01  -2.68564      -178.317       178.317       1193.97       1372.29    
  15  0.241248      -1.42193      -94.4109       94.4109       1172.60       1267.02    
  16  0.208857      -1.56610      -103.984       103.984       1186.97       1290.96    
  17  0.652439     -0.427038      -28.3537       28.3537       1240.71       1269.06    
  18  0.489833     -0.713691      -47.3864       47.3864       1217.14       1264.53    
  19  0.719225     -0.329581      -21.8829       21.8829       1207.13       1229.02    
  20  0.924762     -0.782189E-01  -5.19345       5.19345       1244.63       1249.82    
  21  0.845502     -0.167825      -11.1430       11.1430       1250.82       1261.97    
  22  0.665989     -0.406482      -26.9889       26.9889       1281.30       1308.29    
  23  0.378562     -0.971376      -64.4958       64.4958       1228.83       1293.32    
  24  0.396889     -0.924098      -61.3567       61.3567       1286.40       1347.76    
  25  0.158089      -1.84460      -122.475       122.475       1226.27       1348.75    
  26  0.590577     -0.526655      -34.9680       34.9680       1300.22       1335.19    
  27  0.949513     -0.518061E-01  -3.43973       3.43973       1119.26       1122.70    
  28  0.518198     -0.657398      -43.6488       43.6488       1331.35       1375.00    
  29  0.551080     -0.595875      -39.5639       39.5639       1356.13       1395.70    
  30  0.986285     -0.138097E-01 -0.916916      0.916916       1147.76       1148.68    
  31  0.920142     -0.832276E-01  -5.52601       5.52601       1389.10       1394.63    
  32  0.133201      -2.01590      -133.848       133.848       1189.08       1322.93    
  33  0.584507     -0.536987      -35.6539       35.6539       1407.45       1443.10    
  34  0.790583     -0.234984      -15.6021       15.6021       1412.16       1427.77    
  35  0.702664     -0.352876      -23.4297       23.4297       1407.76       1431.19    
  36  0.148885      -1.90458      -126.457       126.457       1405.23       1531.69    
  37  0.290436      -1.23637      -82.0905       82.0905       1347.44       1429.53    
  38  0.638249     -0.449027      -29.8138       29.8138       1332.88       1362.69    
  39  0.381605     -0.963369      -63.9642       63.9642       1445.71       1509.68    
  40  0.823069     -0.194716      -12.9284       12.9284       1450.94       1463.87    
  41  0.492318     -0.708630      -47.0504       47.0504       1447.80       1494.85    
  42  0.773199     -0.257218      -17.0784       17.0784       1238.38       1255.46    
  43  0.289475E-01  -3.54227      -235.194       235.194       1453.26       1688.45    
  44  0.355683      -1.03371      -68.6348       68.6348       1437.49       1506.12    
  45  0.160396      -1.83011      -121.513       121.513       1428.62       1550.14    
  46  0.972861     -0.275140E-01  -1.82683       1.82683       1436.49       1438.32    
  47  0.781938E-02  -4.85115      -322.098       322.098       1407.55       1729.64    
  48  0.225299      -1.49033      -98.9524       98.9524       1439.42       1538.37    
  49  0.631686     -0.459363      -30.5000       30.5000       1448.61       1479.11    
  50  0.212316      -1.54968      -102.893       102.893       1519.51       1622.40    
  51  0.673664     -0.395024      -26.2282       26.2282       1549.69       1575.92    
  52  0.728322     -0.317012      -21.0484       21.0484       1506.58       1527.63    
  53  0.368576     -0.998108      -66.2707       66.2707       1463.91       1530.18    
  54  0.381088     -0.964725      -64.0542       64.0542       1241.02       1305.08    
  55  0.481283     -0.731301      -48.5557       48.5557       1569.79       1618.34    
  56  0.801664     -0.221066      -14.6779       14.6779       1545.03       1559.71    
  57  0.285936      -1.25199      -83.1274       83.1274       1552.59       1635.72    
  58  0.412374     -0.885823      -58.8154       58.8154       1560.83       1619.65    
  59  0.815685     -0.203727      -13.5267       13.5267       1614.33       1627.86    
  60  0.251414      -1.38065      -91.6703       91.6703       1418.12       1509.79    
  61  0.598278     -0.513699      -34.1078       34.1078       1555.06       1589.17    
  62  0.750137     -0.287499      -19.0889       19.0889       1637.85       1656.93    
  63  0.412907     -0.884533      -58.7297       58.7297       1619.56       1678.29    
  64  0.318297      -1.14477      -76.0086       76.0086       1582.86       1658.87    
  65  0.520766     -0.652454      -43.3206       43.3206       1684.80       1728.12    
  66  0.983801     -0.163320E-01  -1.08439       1.08439       1527.51       1528.60    
  67  0.897709     -0.107909      -7.16477       7.16477       1738.05       1745.21    
  68  0.645455     -0.437800      -29.0683       29.0683       1136.23       1165.29    
  69  0.995902     -0.410634E-02 -0.272646      0.272646       1735.45       1735.72    
  70  0.333624      -1.09774      -72.8859       72.8859       1699.88       1772.76    
  71  0.651980     -0.427742      -28.4005       28.4005       1683.61       1712.01    
  72  0.355582      -1.03400      -68.6537       68.6537       1561.33       1629.98    
  73  0.181298E-01  -4.01020      -266.262       266.262       1669.70       1935.97    
  74  0.259420      -1.34931      -89.5889       89.5889       992.393       1081.98    
loop,thermsimp(1:2)       71   9.99765       36.8976    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319       1658.95        129.79          0.68         30.30          0.68          0.04        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1658.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       71
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       72
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      318     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -54.3940       54.3940       1005.15       1059.54    
   2  0.202294      -1.59803      -106.103       106.103       984.147       1090.25    
   3  0.873786     -0.134920      -8.95821       8.95821       1013.25       1022.20    
   4  0.262141      -1.33887      -88.8963       88.8963       1030.06       1118.96    
   5  0.342005      -1.07293      -71.2385       71.2385       1057.86       1129.10    
   6  0.421217     -0.864607      -57.4067       57.4067       1042.84       1100.24    
   7  0.618489     -0.480477      -31.9019       31.9019       992.393       1024.30    
   8  0.412552     -0.885393      -58.7868       58.7868       1061.57       1120.36    
   9  0.951192     -0.500396E-01  -3.32244       3.32244       1119.26       1122.59    
  10  0.298546      -1.20883      -80.2620       80.2620       1076.81       1157.07    
  11  0.805120     -0.216763      -14.3923       14.3923       1115.73       1130.12    
  12  0.208146      -1.56951      -104.210       104.210       1147.76       1251.97    
  13  0.924021     -0.790209E-01  -5.24670       5.24670       1157.00       1162.24    
  14  0.447624     -0.803802      -53.3695       53.3695       1136.23       1189.60    
  15  0.667709     -0.403903      -26.8177       26.8177       1145.34       1172.15    
  16  0.767295E-01  -2.56747      -170.471       170.471       1082.37       1252.84    
  17  0.301582      -1.19871      -79.5901       79.5901       1207.13       1286.72    
  18  0.788580     -0.237522      -15.7706       15.7706       1244.63       1260.40    
  19  0.887020     -0.119888      -7.96010       7.96010       1238.38       1246.34    
  20  0.233035E-01  -3.75915      -249.594       249.594       1250.82       1500.42    
  21  0.899320     -0.106116      -7.04574       7.04574       1217.14       1224.19    
  22  0.144480      -1.93461      -128.451       128.451       1172.60       1301.06    
  23  0.274629      -1.29233      -85.8062       85.8062       1240.71       1326.52    
  24  0.831597     -0.184407      -12.2439       12.2439       1186.97       1199.22    
  25  0.388827     -0.944620      -62.7193       62.7193       1228.83       1291.54    
  26  0.257578      -1.35643      -90.0622       90.0622       1241.02       1331.08    
  27  0.427791     -0.849120      -56.3784       56.3784       1281.30       1337.68    
  28  0.837664E-01  -2.47972      -164.644       164.644       1189.08       1353.72    
  29  0.782727     -0.244972      -16.2652       16.2652       1300.22       1316.49    
  30  0.259676E-01  -3.65091      -242.407       242.407       1039.39       1281.80    
  31  0.166181      -1.79468      -119.160       119.160       1286.40       1405.56    
  32  0.360749      -1.01957      -67.6958       67.6958       1226.27       1293.97    
  33  0.369697     -0.995071      -66.0691       66.0691       1332.88       1398.94    
  34  0.959392     -0.414553E-01  -2.75248       2.75248       1193.97       1196.72    
  35  0.449170     -0.800353      -53.1405       53.1405       1331.35       1384.49    
  36  0.655790E-02  -5.02708      -333.780       333.780       1389.10       1722.88    
  37  0.133569      -2.01313      -133.665       133.665       1356.13       1489.80    
  38  0.282061      -1.26563      -84.0333       84.0333       1412.16       1496.20    
  39  0.431813     -0.839762      -55.7571       55.7571       1347.44       1403.19    
  40  0.713174     -0.338031      -22.4440       22.4440       1407.76       1430.21    
  41  0.511305     -0.670790      -44.5380       44.5380       1436.49       1481.03    
  42  0.264485      -1.32997      -88.3052       88.3052       1407.45       1495.75    
  43  0.779298     -0.249362      -16.5567       16.5567       1450.94       1467.50    
  44  0.709352E-02  -4.94857      -328.567       328.567       1448.61       1777.18    
  45  0.770402     -0.260843      -17.3190       17.3190       1447.80       1465.12    
  46  0.694393     -0.364718      -24.2159       24.2159       1437.49       1461.71    
  47  0.589268E-01  -2.83146      -187.999       187.999       1445.71       1633.71    
  48  0.817644     -0.201328      -13.3674       13.3674       1418.12       1431.49    
  49  0.990168     -0.988073E-02 -0.656044      0.656044       1506.58       1507.24    
  50  0.733536E-01  -2.61246      -173.458       173.458       1527.51       1700.97    
  51  0.781472     -0.246575      -16.3717       16.3717       1463.91       1480.28    
  52  0.582548     -0.540344      -35.8769       35.8769       1405.23       1441.10    
  53  0.644915     -0.438636      -29.1238       29.1238       1439.42       1468.54    
  54  0.726975     -0.318863      -21.1714       21.1714       1428.62       1449.80    
  55  0.562265     -0.575782      -38.2298       38.2298       1545.03       1583.26    
  56  0.166410      -1.79330      -119.068       119.068       1549.69       1668.76    
  57  0.847052     -0.165994      -11.0214       11.0214       1555.06       1566.08    
  58  0.437688     -0.826250      -54.8599       54.8599       1569.79       1624.65    
  59  0.408722     -0.894719      -59.4061       59.4061       1560.83       1620.24    
  60  0.794023     -0.230643      -15.3139       15.3139       1519.51       1534.82    
  61  0.259946      -1.34728      -89.4544       89.4544       1614.33       1703.79    
  62  0.700123     -0.356499      -23.6702       23.6702       1561.33       1585.00    
  63  0.564078E-01  -2.87515      -190.899       190.899       1552.59       1743.49    
  64  0.999061     -0.939094E-03 -0.623524E-01  0.623524E-01   1637.85       1637.91    
  65  0.555696     -0.587534      -39.0101       39.0101       1582.86       1621.87    
  66  0.103792      -2.26537      -150.412       150.412       1619.56       1769.97    
  67  0.318583      -1.14387      -75.9489       75.9489       1453.26       1529.20    
  68  0.321355      -1.13521      -75.3736       75.3736       1683.61       1758.99    
  69  0.350004      -1.04981      -69.7036       69.7036       1684.80       1754.50    
  70  0.786507     -0.240153      -15.9453       15.9453       1407.55       1423.49    
  71  0.267605E-01  -3.62083      -240.410       240.410       1735.45       1975.86    
  72  0.104251      -2.26095      -150.119       150.119       1738.05       1888.17    
  73  0.188491      -1.66871      -110.796       110.796       1699.88       1810.67    
  74  0.379358     -0.969275      -64.3563       64.3563       1658.95       1723.31    
loop,thermsimp(1:2)       72   54.3940       106.103    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320       1068.11        129.81          0.68         30.17          0.92          0.04        161.62
Just calling func    0   0        161.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321       1484.25        128.36          0.63         29.65          2.97          0.04        161.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    1484.2        3.521     -1.341      4.603     -100.0      1.610    
                     -0.9422      3.760     -100.0      3.590      1.751    
                      0.8599     0.8252      2.009      0.000     0.7629    
                     -0.9941     -20.00      0.000      0.000      2.364    

                      -2.940      4280.     0.1103E+05 -880.8     -1451.    
                      -2.973     -8.028     -6.526     -15.33     -5.168    
                      -10.97     -3.556      458.4      0.000      564.1    

                      -1624.      5724.      4230.      4447.      4615.    
                      -6173.    -0.3661    -0.6891      0.000    -0.3206    
                     -0.3578    -0.6777    -0.4174    -0.4318    -0.4815    

                     -0.6646     -1.668      1.382    -0.2551     0.2711E-01
                      0.8541E-01 0.1452E-01-0.1784    -0.3255     0.7694E-01
                     -0.3100    -0.1676    -0.5444     -2.113      1.382    

                      -1.726     -1.793     0.1500E+05 0.1500E+05  0.000    
                       0.000      9.089      8.798      0.000    -0.6390E-03
                      0.2453     0.7013      9.221      9.090    -0.3400E+05

                      0.1921E-03 -1.340     0.5630      9.635      9.215    
                     -0.1511E+05-0.6814E-03 -1.646     0.4946      9.425    
                       9.341     -3286.     0.1335E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1068.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       72
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       73
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      320     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -14.1641       14.1641       1013.25       1027.41    
   2  0.554495     -0.589697      -39.1537       39.1537       992.393       1031.55    
   3  0.997056     -0.294851E-02 -0.195770      0.195770       1005.15       1005.34    
   4  0.901183E-01  -2.40663      -159.792       159.792       984.147       1143.94    
   5  0.296736      -1.21491      -80.6658       80.6658       1042.84       1123.50    
   6  0.907820     -0.967094E-01  -6.42115       6.42115       1030.06       1036.49    
   7  0.325542      -1.12226      -74.5141       74.5141       1061.57       1136.09    
   8  0.947537     -0.538896E-01  -3.57807       3.57807       1119.26       1122.84    
   9  0.378276     -0.972130      -64.5459       64.5459       1057.86       1122.41    
  10  0.985613     -0.144920E-01 -0.962212      0.962212       1115.73       1116.69    
  11  0.167434      -1.78717      -118.661       118.661       1076.81       1195.47    
  12  0.693849E-01  -2.66809      -177.151       177.151       1157.00       1334.15    
  13  0.434983     -0.832447      -55.2714       55.2714       1145.34       1200.61    
  14  0.998656     -0.134491E-02 -0.892971E-01  0.892971E-01   1136.23       1136.32    
  15  0.650302     -0.430318      -28.5715       28.5715       1193.97       1222.54    
  16  0.152610      -1.87987      -124.817       124.817       1186.97       1311.79    
  17  0.273947      -1.29482      -85.9713       85.9713       1217.14       1303.11    
  18  0.990471     -0.957469E-02 -0.635724      0.635724       1238.38       1239.02    
  19  0.684493     -0.379077      -25.1693       25.1693       1147.76       1172.93    
  20  0.864467E-01  -2.44823      -162.553       162.553       1082.37       1244.92    
  21  0.546085     -0.604980      -40.1685       40.1685       1244.63       1284.80    
  22  0.246642      -1.39982      -92.9426       92.9426       1039.39       1132.33    
  23  0.484505     -0.724627      -48.1126       48.1126       1207.13       1255.25    
  24  0.567359     -0.566763      -37.6310       37.6310       1228.83       1266.46    
  25  0.564371     -0.572043      -37.9816       37.9816       1226.27       1264.25    
  26  0.825604     -0.191640      -12.7242       12.7242       1172.60       1185.33    
  27  0.302493      -1.19570      -79.3900       79.3900       1300.22       1379.61    
  28  0.630396     -0.461407      -30.6357       30.6357       1240.71       1271.35    
  29  0.886734     -0.120210      -7.98153       7.98153       1241.02       1249.00    
  30  0.389345     -0.943288      -62.6309       62.6309       1281.30       1343.93    
  31  0.181391      -1.70710      -113.345       113.345       1189.08       1302.42    
  32  0.933221     -0.691132E-01  -4.58886       4.58886       1331.35       1335.94    
  33  0.169237E-01  -4.07904      -270.833       270.833       1332.88       1603.71    
  34  0.757788     -0.277351      -18.4151       18.4151       1347.44       1365.85    
  35  0.300993E-01  -3.50325      -232.603       232.603       1286.40       1519.01    
  36  0.395621     -0.927300      -61.5693       61.5693       1407.55       1469.12    
  37  0.459505     -0.777605      -51.6301       51.6301       1407.76       1459.39    
  38  0.733176     -0.310370      -20.6074       20.6074       1418.12       1438.73    
  39  0.575459     -0.552587      -36.6898       36.6898       1405.23       1441.92    
  40  0.560889     -0.578233      -38.3925       38.3925       1428.62       1467.02    
  41  0.428351     -0.847812      -56.2916       56.2916       1437.49       1493.78    
  42  0.553832     -0.590895      -39.2332       39.2332       1447.80       1487.03    
  43  0.581118     -0.542801      -36.0400       36.0400       1450.94       1486.98    
  44  0.319195E-01  -3.44454      -228.705       228.705       1439.42       1668.13    
  45  0.224512E-01  -3.79641      -252.068       252.068       1463.91       1715.97    
  46  0.113637E-01  -4.47733      -297.278       297.278       1436.49       1733.77    
  47  0.889134     -0.117508      -7.80209       7.80209       1356.13       1363.94    
  48  0.422937     -0.860531      -57.1361       57.1361       1407.45       1464.58    
  49  0.479928     -0.734119      -48.7428       48.7428       1412.16       1460.91    
  50  0.813133     -0.206861      -13.7348       13.7348       1250.82       1264.56    
  51  0.544683     -0.607551      -40.3391       40.3391       1506.58       1546.92    
  52  0.694184E-01  -2.66760      -177.119       177.119       1453.26       1630.37    
  53  0.656508     -0.420820      -27.9409       27.9409       1519.51       1547.45    
  54  0.532118     -0.630889      -41.8887       41.8887       1555.06       1596.95    
  55  0.485731E-01  -3.02468      -200.828       200.828       1545.03       1745.86    
  56  0.525424     -0.643549      -42.7293       42.7293       1561.33       1604.06    
  57  0.773368E-01  -2.55959      -169.947       169.947       1560.83       1730.78    
  58  0.741245     -0.299424      -19.8807       19.8807       1582.86       1602.74    
  59  0.286066      -1.25153      -83.0973       83.0973       1569.79       1652.89    
  60  0.327223      -1.11711      -74.1722       74.1722       1445.71       1519.88    
  61  0.124235      -2.08558      -138.475       138.475       1637.85       1776.32    
  62  0.599337     -0.511931      -33.9903       33.9903       1549.69       1583.68    
  63  0.666632     -0.405518      -26.9249       26.9249       1527.51       1554.44    
  64  0.810607     -0.209973      -13.9414       13.9414       1614.33       1628.27    
  65  0.104486      -2.25870      -149.969       149.969       1389.10       1539.07    
  66  0.516216     -0.661229      -43.9032       43.9032       1658.95       1702.86    
  67  0.671995     -0.397504      -26.3928       26.3928       1552.59       1578.99    
  68  0.343614      -1.06824      -70.9270       70.9270       1684.80       1755.73    
  69  0.423208     -0.859892      -57.0936       57.0936       1683.61       1740.71    
  70  0.301080E-01  -3.50297      -232.584       232.584       1619.56       1852.14    
  71  0.364244      -1.00993      -67.0557       67.0557       1448.61       1515.67    
  72  0.333024      -1.09954      -73.0054       73.0054       1699.88       1772.88    
  73  0.239626      -1.42868      -94.8590       94.8590       1738.05       1832.91    
  74  0.462380     -0.771368      -51.2160       51.2160       1068.11       1119.33    
loop,thermsimp(1:2)       73   14.1641       39.1537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       1627.70        128.61          0.63         29.44          2.86          0.05        161.58
Just calling func    0   0        161.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1627.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       73
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       74
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      321     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -7.76101       7.76101       1005.15       1012.91    
   2  0.480213     -0.733525      -48.7034       48.7034       1013.25       1061.95    
   3  0.226156      -1.48653      -98.7002       98.7002       992.393       1091.09    
   4  0.633402     -0.456651      -30.3199       30.3199       1030.06       1060.38    
   5  0.925311     -0.776258E-01  -5.15407       5.15407       1115.73       1120.88    
   6  0.498405     -0.696343      -46.2346       46.2346       1068.11       1114.35    
   7  0.133283      -2.01528      -133.807       133.807       1057.86       1191.67    
   8  0.657074E-01  -2.72254      -180.767       180.767       1119.26       1300.03    
   9  0.726758     -0.319162      -21.1912       21.1912       1042.84       1064.03    
  10  0.398365     -0.920388      -61.1104       61.1104       1039.39       1100.50    
  11  0.321047E-01  -3.43875      -228.320       228.320       1061.57       1289.89    
  12  0.276307      -1.28624      -85.4018       85.4018       1136.23       1221.63    
  13  0.483740     -0.726208      -48.2176       48.2176       984.147       1032.36    
  14  0.224589      -1.49348      -99.1617       99.1617       1147.76       1246.92    
  15  0.832041     -0.183874      -12.2085       12.2085       1172.60       1184.81    
  16  0.939301     -0.626192E-01  -4.15769       4.15769       1076.81       1080.96    
  17  0.624052     -0.471522      -31.3073       31.3073       1145.34       1176.64    
  18  0.172753      -1.75589      -116.585       116.585       1193.97       1310.56    
  19  0.468323     -0.758597      -50.3680       50.3680       1238.38       1288.75    
  20  0.963461     -0.372229E-01  -2.47146       2.47146       1082.37       1084.84    
  21  0.812092     -0.208142      -13.8199       13.8199       1241.02       1254.84    
  22  0.376764     -0.976137      -64.8119       64.8119       1207.13       1271.94    
  23  0.791872E-01  -2.53594      -168.377       168.377       1226.27       1394.65    
  24  0.237003      -1.43968      -95.5897       95.5897       1250.82       1346.41    
  25  0.320094      -1.13914      -75.6347       75.6347       1228.83       1304.46    
  26  0.821410E-01  -2.49932      -165.946       165.946       1240.71       1406.66    
  27  0.789147     -0.236802      -15.7228       15.7228       1244.63       1260.35    
  28  0.734353E-01  -2.61135      -173.384       173.384       1189.08       1362.46    
  29  0.226401      -1.48545      -98.6282       98.6282       1217.14       1315.77    
  30  0.380831     -0.965399      -64.0989       64.0989       1186.97       1251.07    
  31  0.264857      -1.32857      -88.2119       88.2119       1157.00       1245.21    
  32  0.246167      -1.40174      -93.0707       93.0707       1331.35       1424.42    
  33  0.142133      -1.95099      -129.539       129.539       1281.30       1410.84    
  34  0.123438E-01  -4.39460      -291.785       291.785       1356.13       1647.92    
  35  0.853289     -0.158657      -10.5342       10.5342       1347.44       1357.97    
  36  0.418603     -0.870831      -57.8200       57.8200       1300.22       1358.04    
  37  0.235242      -1.44714      -96.0849       96.0849       1418.12       1514.21    
  38  0.841712     -0.172317      -11.4412       11.4412       1405.23       1416.67    
  39  0.113373      -2.17707      -144.550       144.550       1407.76       1552.31    
  40  0.617966     -0.481322      -31.9580       31.9580       1412.16       1444.12    
  41  0.149268      -1.90202      -126.287       126.287       1407.45       1533.73    
  42  0.811010     -0.209475      -13.9084       13.9084       1428.62       1442.53    
  43  0.571477     -0.559531      -37.1508       37.1508       1407.55       1444.70    
  44  0.105494      -2.24911      -149.332       149.332       1450.94       1600.27    
  45  0.709548     -0.343127      -22.7823       22.7823       1447.80       1470.58    
  46  0.535895     -0.623816      -41.4191       41.4191       1437.49       1478.91    
  47  0.137736      -1.98242      -131.625       131.625       1448.61       1580.24    
  48  0.666779     -0.405297      -26.9102       26.9102       1286.40       1313.31    
  49  0.326487      -1.11936      -74.3216       74.3216       1445.71       1520.03    
  50  0.461090     -0.774162      -51.4015       51.4015       1389.10       1440.51    
  51  0.246088      -1.40207      -93.0921       93.0921       1506.58       1599.67    
  52  0.308348      -1.17653      -78.1170       78.1170       1519.51       1597.62    
  53  0.921161     -0.821209E-01  -5.45253       5.45253       1527.51       1532.97    
  54  0.361112      -1.01857      -67.6291       67.6291       1552.59       1620.22    
  55  0.853246     -0.158708      -10.5376       10.5376       1549.69       1560.23    
  56  0.535783     -0.624027      -41.4331       41.4331       1555.06       1596.49    
  57  0.347437      -1.05717      -70.1923       70.1923       1582.86       1653.05    
  58  0.722381     -0.325203      -21.5922       21.5922       1332.88       1354.47    
  59  0.134598      -2.00546      -133.155       133.155       1561.33       1694.48    
  60  0.521537     -0.650975      -43.2223       43.2223       1614.33       1657.56    
  61  0.713987     -0.336890      -22.3683       22.3683       1453.26       1475.62    
  62  0.202889      -1.59510      -105.909       105.909       1569.79       1675.70    
  63  0.973267     -0.270971E-01  -1.79915       1.79915       1439.42       1441.22    
  64  0.396441     -0.925228      -61.4317       61.4317       1658.95       1720.38    
  65  0.482421     -0.728937      -48.3988       48.3988       1463.91       1512.30    
  66  0.622991     -0.473223      -31.4203       31.4203       1560.83       1592.25    
  67  0.474966     -0.744512      -49.4329       49.4329       1436.49       1485.92    
  68  0.741916     -0.298520      -19.8206       19.8206       1683.61       1703.43    
  69  0.717884     -0.331448      -22.0069       22.0069       1545.03       1567.04    
  70  0.537648     -0.620551      -41.2023       41.2023       1684.80       1726.00    
  71  0.144246      -1.93623      -128.559       128.559       1699.88       1828.44    
  72  0.643241     -0.441236      -29.2965       29.2965       1637.85       1667.14    
  73  0.730372     -0.314201      -20.8618       20.8618       1738.05       1758.91    
  74  0.173998      -1.74871      -116.108       116.108       1627.70       1743.81    
loop,thermsimp(1:2)       74   7.76101       48.7034    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323       1485.87        129.74          0.64         29.82          1.97          0.05        162.22
Just calling func    0   0        162.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1485.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       74
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       75
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      322     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -29.0327       29.0327       1005.15       1034.18    
   2  0.108032      -2.22533      -147.753       147.753       984.147       1131.90    
   3  0.908790     -0.956413E-01  -6.35023       6.35023       1030.06       1036.41    
   4  0.987883     -0.121914E-01 -0.809461      0.809461       1013.25       1014.06    
   5  0.318380      -1.14451      -75.9912       75.9912       1042.84       1118.83    
   6  0.924426     -0.785824E-01  -5.21758       5.21758       1076.81       1082.02    
   7  0.965220     -0.353996E-01  -2.35040       2.35040       1082.37       1084.72    
   8  0.852248     -0.159878      -10.6153       10.6153       992.393       1003.01    
   9  0.329186      -1.11113      -73.7752       73.7752       1039.39       1113.16    
  10  0.282479      -1.26415      -83.9350       83.9350       1068.11       1152.05    
  11  0.818943     -0.199740      -13.2620       13.2620       1115.73       1128.99    
  12  0.842569     -0.171300      -11.3737       11.3737       1145.34       1156.71    
  13  0.370966     -0.991644      -65.8415       65.8415       1172.60       1238.45    
  14  0.362233      -1.01547      -67.4232       67.4232       1057.86       1125.29    
  15  0.356944E-01  -3.33276      -221.283       221.283       1136.23       1357.51    
  16  0.149119      -1.90301      -126.353       126.353       1157.00       1283.35    
  17  0.127170      -2.06223      -136.925       136.925       1147.76       1284.69    
  18  0.589256     -0.528895      -35.1167       35.1167       1186.97       1222.09    
  19  0.702139     -0.353624      -23.4793       23.4793       1241.02       1264.50    
  20  0.713819     -0.337127      -22.3840       22.3840       1244.63       1267.02    
  21  0.121783      -2.10552      -139.799       139.799       1207.13       1346.93    
  22  0.992321     -0.770837E-02 -0.511807      0.511807       1238.38       1238.90    
  23  0.622746     -0.473616      -31.4464       31.4464       1061.57       1093.02    
  24  0.388486     -0.945499      -62.7776       62.7776       1119.26       1182.04    
  25  0.365204      -1.00730      -66.8810       66.8810       1228.83       1295.71    
  26  0.416566     -0.875710      -58.1439       58.1439       1193.97       1252.11    
  27  0.250735      -1.38336      -91.8498       91.8498       1286.40       1378.25    
  28  0.243824      -1.41131      -93.7058       93.7058       1217.14       1310.85    
  29  0.177195      -1.73050      -114.899       114.899       1250.82       1365.72    
  30  0.723685     -0.323399      -21.4725       21.4725       1332.88       1354.35    
  31  0.157256      -1.84988      -122.825       122.825       1347.44       1470.26    
  32  0.941988     -0.597623E-01  -3.96800       3.96800       1300.22       1304.19    
  33  0.110785      -2.20016      -146.083       146.083       1189.08       1335.16    
  34  0.200758      -1.60566      -106.610       106.610       1226.27       1332.88    
  35  0.873323     -0.135450      -8.99338       8.99338       1240.71       1249.70    
  36  0.842283     -0.171639      -11.3962       11.3962       1281.30       1292.70    
  37  0.326633      -1.11892      -74.2920       74.2920       1405.23       1479.52    
  38  0.648559     -0.433003      -28.7498       28.7498       1331.35       1360.10    
  39  0.460689E-01  -3.07762      -204.342       204.342       1389.10       1593.45    
  40  0.676614     -0.390654      -25.9380       25.9380       1439.42       1465.36    
  41  0.863029     -0.147307      -9.78064       9.78064       1428.62       1438.40    
  42  0.646727     -0.435831      -28.9376       28.9376       1412.16       1441.10    
  43  0.310616      -1.16920      -77.6304       77.6304       1407.55       1485.18    
  44  0.521840     -0.650394      -43.1838       43.1838       1447.80       1490.98    
  45  0.381245     -0.964312      -64.0268       64.0268       1453.26       1517.28    
  46  0.815908     -0.203453      -13.5086       13.5086       1437.49       1451.00    
  47  0.209395E-01  -3.86612      -256.696       256.696       1436.49       1693.19    
  48  0.800991E-01  -2.52449      -167.617       167.617       1463.91       1631.52    
  49  0.824204     -0.193337      -12.8369       12.8369       1418.12       1430.96    
  50  0.828636     -0.187975      -12.4808       12.4808       1445.71       1458.19    
  51  0.609810     -0.494608      -32.8401       32.8401       1527.51       1560.35    
  52  0.793631     -0.231137      -15.3467       15.3467       1407.45       1422.79    
  53  0.450040E-01  -3.10100      -205.895       205.895       1407.76       1613.66    
  54  0.758261     -0.276727      -18.3737       18.3737       1549.69       1568.07    
  55  0.450025     -0.798453      -53.0143       53.0143       1545.03       1598.04    
  56  0.687694     -0.374411      -24.8595       24.8595       1448.61       1473.47    
  57  0.851665     -0.160562      -10.6607       10.6607       1560.83       1571.49    
  58  0.964091     -0.365694E-01  -2.42807       2.42807       1555.06       1557.49    
  59  0.717554     -0.331907      -22.0374       22.0374       1519.51       1541.54    
  60  0.726427     -0.319617      -21.2214       21.2214       1506.58       1527.80    
  61  0.646354     -0.436408      -28.9759       28.9759       1450.94       1479.91    
  62  0.841481     -0.172592      -11.4595       11.4595       1552.59       1564.05    
  63  0.635881     -0.452744      -30.0605       30.0605       1356.13       1386.20    
  64  0.753792     -0.282639      -18.7662       18.7662       1582.86       1601.62    
  65  0.568235     -0.565221      -37.5286       37.5286       1614.33       1651.86    
  66  0.607832     -0.497856      -33.0558       33.0558       1637.85       1670.90    
  67  0.918682     -0.848156E-01  -5.63144       5.63144       1569.79       1575.42    
  68  0.783545     -0.243927      -16.1958       16.1958       1561.33       1577.52    
  69  0.741290     -0.299363      -19.8766       19.8766       1683.61       1703.49    
  70  0.965965     -0.346273E-01  -2.29913       2.29913       1658.95       1661.25    
  71  0.962055     -0.386840E-01  -2.56848       2.56848       1684.80       1687.37    
  72  0.820105     -0.198323      -13.1679       13.1679       1627.70       1640.87    
  73  0.379310     -0.969402      -64.3648       64.3648       1738.05       1802.41    
  74  0.283697      -1.25985      -83.6493       83.6493       1485.87       1569.52    
loop,thermsimp(1:2)       75   29.0327       147.753    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324       1727.73        129.73          0.64         29.54          1.89          0.04        161.84
Just calling func    0   0        161.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1727.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       75
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       76
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      323     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -106.057       106.057       992.393       1098.45    
   2  0.337724      -1.08553      -72.0750       72.0750       1013.25       1085.32    
   3  0.870295     -0.138923      -9.22400       9.22400       1005.15       1014.37    
   4  0.837087     -0.177827      -11.8071       11.8071       1030.06       1041.87    
   5  0.512110     -0.669215      -44.4334       44.4334       1076.81       1121.24    
   6  0.998742     -0.125879E-02 -0.835791E-01  0.835791E-01   1082.37       1082.45    
   7  0.203490      -1.59214      -105.712       105.712       1061.57       1167.28    
   8  0.525951E-01  -2.94513      -195.546       195.546       1039.39       1234.93    
   9  0.474810     -0.744841      -49.4547       49.4547       1042.84       1092.29    
  10  0.440755     -0.819266      -54.3963       54.3963       1057.86       1112.26    
  11  0.225689      -1.48860      -98.8375       98.8375       1115.73       1214.56    
  12  0.902704     -0.102360      -6.79634       6.79634       984.147       990.943    
  13  0.663331     -0.410481      -27.2544       27.2544       1068.11       1095.37    
  14  0.511480     -0.670447      -44.5152       44.5152       1145.34       1189.85    
  15  0.625297     -0.469528      -31.1750       31.1750       1119.26       1150.44    
  16  0.812907     -0.207139      -13.7533       13.7533       1186.97       1200.72    
  17  0.979453     -0.207607E-01  -1.37843       1.37843       1172.60       1173.98    
  18  0.255329      -1.36520      -90.6445       90.6445       1238.38       1329.03    
  19  0.856654     -0.154722      -10.2729       10.2729       1240.71       1250.98    
  20  0.610394     -0.493650      -32.7766       32.7766       1193.97       1226.75    
  21  0.703614     -0.351525      -23.3400       23.3400       1241.02       1264.36    
  22  0.623403     -0.472562      -31.3764       31.3764       1244.63       1276.01    
  23  0.375727     -0.978893      -64.9949       64.9949       1157.00       1221.99    
  24  0.870528     -0.138656      -9.20622       9.20622       1147.76       1156.97    
  25  0.175838E-01  -4.04078      -268.293       268.293       1281.30       1549.59    
  26  0.237914      -1.43585      -95.3348       95.3348       1228.83       1324.16    
  27  0.464352     -0.767112      -50.9334       50.9334       1300.22       1351.16    
  28  0.776873     -0.252478      -16.7636       16.7636       1217.14       1233.91    
  29  0.380679     -0.965800      -64.1255       64.1255       1226.27       1290.40    
  30  0.391295     -0.938295      -62.2993       62.2993       1189.08       1251.38    
  31  0.369488     -0.995636      -66.1066       66.1066       1207.13       1273.24    
  32  0.302398      -1.19601      -79.4106       79.4106       1332.88       1412.29    
  33  0.809138     -0.211786      -14.0618       14.0618       1136.23       1150.29    
  34  0.675473     -0.392342      -26.0501       26.0501       1331.35       1357.40    
  35  0.486217     -0.721100      -47.8784       47.8784       1250.82       1298.70    
  36  0.937468     -0.645730E-01  -4.28741       4.28741       1286.40       1290.69    
  37  0.741025     -0.299721      -19.9004       19.9004       1356.13       1376.03    
  38  0.155236      -1.86281      -123.684       123.684       1407.45       1531.13    
  39  0.407249     -0.898331      -59.6459       59.6459       1418.12       1477.77    
  40  0.348550E-01  -3.35656      -222.863       222.863       1428.62       1651.49    
  41  0.178548      -1.72290      -114.394       114.394       1412.16       1526.56    
  42  0.127429      -2.06020      -136.789       136.789       1437.49       1574.28    
  43  0.919888     -0.835037E-01  -5.54434       5.54434       1445.71       1451.26    
  44  0.520080     -0.653772      -43.4081       43.4081       1439.42       1482.83    
  45  0.574092     -0.554965      -36.8477       36.8477       1347.44       1384.29    
  46  0.893427     -0.112690      -7.48223       7.48223       1448.61       1456.10    
  47  0.658991     -0.417045      -27.6903       27.6903       1405.23       1432.92    
  48  0.803744     -0.218475      -14.5059       14.5059       1450.94       1465.44    
  49  0.499877     -0.693392      -46.0387       46.0387       1407.55       1453.59    
  50  0.723109     -0.324195      -21.5253       21.5253       1447.80       1469.33    
  51  0.477842     -0.738475      -49.0320       49.0320       1453.26       1502.29    
  52  0.946108     -0.553980E-01  -3.67823       3.67823       1506.58       1510.26    
  53  0.296943      -1.21422      -80.6195       80.6195       1519.51       1600.12    
  54  0.702733     -0.352778      -23.4232       23.4232       1555.06       1578.48    
  55  0.644709     -0.438956      -29.1451       29.1451       1527.51       1556.66    
  56  0.687506     -0.374685      -24.8777       24.8777       1552.59       1577.47    
  57  0.682968     -0.381308      -25.3174       25.3174       1549.69       1575.01    
  58  0.695030     -0.363801      -24.1550       24.1550       1485.87       1510.02    
  59  0.134664      -2.00497      -133.123       133.123       1560.83       1693.95    
  60  0.789098     -0.236865      -15.7270       15.7270       1569.79       1585.51    
  61  0.495959     -0.701262      -46.5612       46.5612       1561.33       1607.89    
  62  0.932440     -0.699500E-01  -4.64442       4.64442       1389.10       1393.75    
  63  0.390950     -0.939176      -62.3579       62.3579       1545.03       1607.39    
  64  0.209807      -1.56156      -103.682       103.682       1582.86       1686.54    
  65  0.727082     -0.318716      -21.1616       21.1616       1407.76       1428.93    
  66  0.622701     -0.473688      -31.4511       31.4511       1463.91       1495.36    
  67  0.468739     -0.757708      -50.3090       50.3090       1627.70       1678.01    
  68  0.253730      -1.37148      -91.0615       91.0615       1614.33       1705.39    
  69  0.200081      -1.60903      -106.834       106.834       1658.95       1765.79    
  70  0.737960     -0.303866      -20.1756       20.1756       1637.85       1658.02    
  71  0.466976     -0.761477      -50.5593       50.5593       1684.80       1735.36    
  72  0.396485     -0.925118      -61.4244       61.4244       1436.49       1497.92    
  73  0.141388      -1.95625      -129.888       129.888       1683.61       1813.50    
  74  0.262925      -1.33589      -88.6980       88.6980       1727.73       1816.43    
loop,thermsimp(1:2)       76   106.057       72.0750    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325       1738.05        129.86          0.66         30.35          0.96          0.05        161.88
Just calling func    0   0        161.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1738.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       76
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       77
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      324     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -32.9446       32.9446       984.147       1017.09    
   2  0.437836     -0.825911      -54.8375       54.8375       1005.15       1059.99    
   3  0.123560      -2.09103      -138.837       138.837       1030.06       1168.90    
   4  0.943438     -0.582242E-01  -3.86587       3.86587       1082.37       1086.24    
   5  0.215054      -1.53686      -102.042       102.042       1013.25       1115.29    
   6  0.984763     -0.153546E-01  -1.01949       1.01949       1042.84       1043.86    
   7  0.154160E-01  -4.17235      -277.029       277.029       1068.11       1345.14    
   8  0.231957      -1.46120      -97.0185       97.0185       992.393       1089.41    
   9  0.476349     -0.741605      -49.2398       49.2398       1057.86       1107.10    
  10  0.620436     -0.477333      -31.6932       31.6932       1076.81       1108.50    
  11  0.456145     -0.784945      -52.1175       52.1175       1136.23       1188.34    
  12  0.507296     -0.678660      -45.0605       45.0605       1119.26       1164.32    
  13  0.910123     -0.941755E-01  -6.25290       6.25290       1147.76       1154.02    
  14  0.323556      -1.12838      -74.9205       74.9205       1061.57       1136.49    
  15  0.666279     -0.406046      -26.9600       26.9600       1172.60       1199.56    
  16  0.781920     -0.246002      -16.3336       16.3336       1145.34       1161.67    
  17  0.921689     -0.815478E-01  -5.41447       5.41447       1186.97       1192.39    
  18  0.152544      -1.88030      -124.845       124.845       1115.73       1240.57    
  19  0.265926      -1.32454      -87.9445       87.9445       1157.00       1244.94    
  20  0.812409     -0.207751      -13.7939       13.7939       1193.97       1207.76    
  21  0.517560E-01  -2.96121      -196.614       196.614       1217.14       1413.76    
  22  0.559187     -0.581271      -38.5943       38.5943       1039.39       1077.98    
  23  0.708792     -0.344194      -22.8532       22.8532       1240.71       1263.56    
  24  0.287762      -1.24562      -82.7047       82.7047       1189.08       1271.78    
  25  0.896953     -0.108752      -7.22076       7.22076       1241.02       1248.24    
  26  0.305048      -1.18729      -78.8315       78.8315       1207.13       1285.96    
  27  0.752428     -0.284450      -18.8864       18.8864       1244.63       1263.52    
  28  0.248159      -1.39369      -92.5356       92.5356       1226.27       1318.81    
  29  0.997822     -0.217989E-02 -0.144737      0.144737       1286.40       1286.55    
  30  0.706427     -0.347535      -23.0750       23.0750       1250.82       1273.90    
  31  0.885217     -0.121923      -8.09522       8.09522       1228.83       1236.92    
  32  0.448301     -0.802290      -53.2691       53.2691       1238.38       1291.65    
  33  0.316275      -1.15114      -76.4317       76.4317       1300.22       1376.66    
  34  0.682241     -0.382372      -25.3881       25.3881       1331.35       1356.74    
  35  0.655896     -0.421752      -28.0028       28.0028       1356.13       1384.14    
  36  0.129575      -2.04350      -135.681       135.681       1347.44       1483.12    
  37  0.236133      -1.44336      -95.8339       95.8339       1389.10       1484.94    
  38  0.481338     -0.731186      -48.5481       48.5481       1332.88       1381.42    
  39  0.825902     -0.191279      -12.7002       12.7002       1407.76       1420.46    
  40  0.818029     -0.200857      -13.3362       13.3362       1405.23       1418.56    
  41  0.135951E-01  -4.29805      -285.374       285.374       1445.71       1731.09    
  42  0.535484     -0.624585      -41.4701       41.4701       1407.55       1449.02    
  43  0.451882     -0.794334      -52.7408       52.7408       1448.61       1501.35    
  44  0.591282     -0.525463      -34.8888       34.8888       1450.94       1485.83    
  45  0.220584      -1.51148      -100.356       100.356       1447.80       1548.16    
  46  0.217569      -1.52524      -101.270       101.270       1418.12       1519.39    
  47  0.541669     -0.613101      -40.7076       40.7076       1439.42       1480.13    
  48  0.927891     -0.748411E-01  -4.96917       4.96917       1463.91       1468.87    
  49  0.888902     -0.117768      -7.81935       7.81935       1436.49       1444.31    
  50  0.391529     -0.937694      -62.2595       62.2595       1453.26       1515.51    
  51  0.611187     -0.492353      -32.6904       32.6904       1485.87       1518.56    
  52  0.475002     -0.744437      -49.4278       49.4278       1506.58       1556.01    
  53  0.504237     -0.684709      -45.4622       45.4622       1412.16       1457.63    
  54  0.605691     -0.501385      -33.2901       33.2901       1407.45       1440.74    
  55  0.476618     -0.741039      -49.2023       49.2023       1281.30       1330.50    
  56  0.128287      -2.05348      -136.344       136.344       1527.51       1663.86    
  57  0.164258      -1.80632      -119.933       119.933       1437.49       1557.42    
  58  0.381764     -0.962954      -63.9366       63.9366       1549.69       1613.63    
  59  0.824295     -0.193227      -12.8295       12.8295       1552.59       1565.42    
  60  0.170823      -1.76713      -117.331       117.331       1555.06       1672.39    
  61  0.258309      -1.35360      -89.8740       89.8740       1569.79       1659.66    
  62  0.470573     -0.753804      -50.0498       50.0498       1519.51       1569.56    
  63  0.939649     -0.622488E-01  -4.13309       4.13309       1545.03       1549.16    
  64  0.323567      -1.12835      -74.9183       74.9183       1561.33       1636.25    
  65  0.192095      -1.64976      -109.538       109.538       1428.62       1538.16    
  66  0.739439     -0.301863      -20.0426       20.0426       1637.85       1657.89    
  67  0.259637      -1.34847      -89.5335       89.5335       1627.70       1717.24    
  68  0.478982     -0.736093      -48.8739       48.8739       1582.86       1631.73    
  69  0.980393     -0.198018E-01  -1.31477       1.31477       1560.83       1562.15    
  70  0.792065     -0.233112      -15.4778       15.4778       1614.33       1629.81    
  71  0.446480     -0.806361      -53.5394       53.5394       1684.80       1738.34    
  72  0.680447     -0.385005      -25.5629       25.5629       1658.95       1684.52    
  73  0.926728     -0.760949E-01  -5.05242       5.05242       1683.61       1688.66    
  74  0.523602     -0.647023      -42.9599       42.9599       1738.05       1781.01    
loop,thermsimp(1:2)       77   32.9446       54.8375    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326       1727.73        129.77          0.66         30.39          0.86          0.04        161.72
Just calling func    0   0        161.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1727.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       77
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       78
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      325     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -154.211       154.211       984.147       1138.36    
   2  0.700279     -0.356277      -23.6555       23.6555       1042.84       1066.49    
   3  0.681564     -0.383366      -25.4541       25.4541       1005.15       1030.60    
   4  0.838213E-01  -2.47907      -164.601       164.601       1039.39       1203.99    
   5  0.708687     -0.344341      -22.8630       22.8630       1082.37       1105.23    
   6  0.253966      -1.37055      -90.9997       90.9997       992.393       1083.39    
   7  0.210796      -1.55686      -103.370       103.370       1057.86       1161.23    
   8  0.967741     -0.327906E-01  -2.17717       2.17717       1076.81       1078.98    
   9  0.901331     -0.103882      -6.89741       6.89741       1013.25       1020.14    
  10  0.985067     -0.150452E-01 -0.998944      0.998944       1061.57       1062.57    
  11  0.153899      -1.87146      -124.258       124.258       1147.76       1272.02    
  12  0.297572      -1.21210      -80.4788       80.4788       1145.34       1225.82    
  13  0.111036      -2.19790      -145.932       145.932       1119.26       1265.20    
  14  0.489011     -0.715370      -47.4979       47.4979       1030.06       1077.56    
  15  0.970731     -0.297058E-01  -1.97236       1.97236       1136.23       1138.20    
  16  0.246322      -1.40112      -93.0289       93.0289       1186.97       1280.00    
  17  0.293332      -1.22645      -81.4317       81.4317       1172.60       1254.04    
  18  0.545752     -0.605591      -40.2090       40.2090       1193.97       1234.18    
  19  0.455999     -0.785265      -52.1387       52.1387       1228.83       1280.96    
  20  0.427211     -0.850477      -56.4685       56.4685       1115.73       1172.19    
  21  0.185046E-01  -3.98974      -264.904       264.904       1157.00       1421.90    
  22  0.768936     -0.262748      -17.4455       17.4455       1241.02       1258.47    
  23  0.870591     -0.138583      -9.20143       9.20143       1244.63       1253.83    
  24  0.563023     -0.574436      -38.1404       38.1404       1240.71       1278.85    
  25  0.132150E-01  -4.32640      -287.257       287.257       1189.08       1476.34    
  26  0.890415     -0.116068      -7.70647       7.70647       1250.82       1258.53    
  27  0.163417      -1.81145      -120.274       120.274       1207.13       1327.41    
  28  0.360288      -1.02085      -67.7808       67.7808       1286.40       1354.18    
  29  0.622131     -0.474604      -31.5120       31.5120       1238.38       1269.90    
  30  0.942630     -0.590811E-01  -3.92277       3.92277       1226.27       1230.20    
  31  0.135626      -1.99785      -132.650       132.650       1281.30       1413.95    
  32  0.369646     -0.995208      -66.0782       66.0782       1068.11       1134.19    
  33  0.501457     -0.690237      -45.8292       45.8292       1331.35       1377.18    
  34  0.459762     -0.777047      -51.5931       51.5931       1300.22       1351.82    
  35  0.489970     -0.713411      -47.3679       47.3679       1332.88       1380.24    
  36  0.504194     -0.684794      -45.4678       45.4678       1356.13       1401.60    
  37  0.543102E-01  -2.91304      -193.415       193.415       1217.14       1410.56    
  38  0.873609     -0.135122      -8.97161       8.97161       1405.23       1414.20    
  39  0.425787     -0.853816      -56.6902       56.6902       1407.76       1464.45    
  40  0.792406     -0.232682      -15.4492       15.4492       1407.45       1422.90    
  41  0.691102     -0.369469      -24.5314       24.5314       1436.49       1461.02    
  42  0.752290     -0.284633      -18.8986       18.8986       1407.55       1426.45    
  43  0.279962      -1.27310      -84.5292       84.5292       1412.16       1496.69    
  44  0.315915E-01  -3.45487      -229.390       229.390       1463.91       1693.30    
  45  0.266419      -1.32269      -87.8214       87.8214       1439.42       1527.24    
  46  0.949868     -0.514319E-01  -3.41489       3.41489       1347.44       1350.85    
  47  0.520560     -0.652850      -43.3468       43.3468       1389.10       1432.45    
  48  0.805351     -0.216477      -14.3733       14.3733       1450.94       1465.31    
  49  0.281582      -1.26733      -84.1461       84.1461       1448.61       1532.76    
  50  0.365228      -1.00723      -66.8765       66.8765       1453.26       1520.13    
  51  0.961426     -0.393382E-01  -2.61191       2.61191       1485.87       1488.48    
  52  0.176024      -1.73713      -115.339       115.339       1418.12       1533.46    
  53  0.722488     -0.325055      -21.5824       21.5824       1428.62       1450.21    
  54  0.543981     -0.608841      -40.4248       40.4248       1447.80       1488.22    
  55  0.810204     -0.210469      -13.9744       13.9744       1545.03       1559.00    
  56  0.839414     -0.175052      -11.6228       11.6228       1506.58       1518.20    
  57  0.890272     -0.116228      -7.71712       7.71712       1437.49       1445.21    
  58  0.370000     -0.994252      -66.0147       66.0147       1560.83       1626.85    
  59  0.528163     -0.638351      -42.3842       42.3842       1552.59       1594.98    
  60  0.215496      -1.53481      -101.906       101.906       1519.51       1621.41    
  61  0.907335E-01  -2.39983      -159.340       159.340       1549.69       1709.03    
  62  0.853602     -0.158290      -10.5099       10.5099       1614.33       1624.84    
  63  0.625306     -0.469515      -31.1740       31.1740       1582.86       1614.03    
  64  0.267902      -1.31713      -87.4529       87.4529       1561.33       1648.78    
  65  0.932632E-01  -2.37233      -157.514       157.514       1637.85       1795.36    
  66  0.154744      -1.86598      -123.894       123.894       1569.79       1693.68    
  67  0.478208     -0.737710      -48.9813       48.9813       1527.51       1576.49    
  68  0.869735     -0.139567      -9.26675       9.26675       1555.06       1564.33    
  69  0.702209     -0.353524      -23.4727       23.4727       1658.95       1682.43    
  70  0.374797     -0.981372      -65.1595       65.1595       1683.61       1748.77    
  71  0.814761     -0.204861      -13.6020       13.6020       1627.70       1641.30    
  72  0.619425     -0.478964      -31.8014       31.8014       1445.71       1477.51    
  73  0.158848E-01  -4.14239      -275.040       275.040       1684.80       1959.84    
  74  0.309846      -1.17168      -77.7952       77.7952       1727.73       1805.52    
loop,thermsimp(1:2)       78   154.211       23.6555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327       1211.72        129.53          0.68         30.55          0.90          0.05        161.70
Just calling func    0   0        161.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1211.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       78
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       79
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      326     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -110.191       110.191       1013.25       1123.44    
   2  0.812983     -0.207045      -13.7470       13.7470       1005.15       1018.89    
   3  0.820046E-01  -2.50098      -166.056       166.056       1061.57       1227.63    
   4  0.863006     -0.147333      -9.78239       9.78239       1042.84       1052.62    
   5  0.647901     -0.434017      -28.8172       28.8172       1030.06       1058.88    
   6  0.650063E-01  -2.73327      -181.479       181.479       1076.81       1258.28    
   7  0.407685E-02  -5.50243      -365.341       365.341       992.393       1357.73    
   8  0.935930     -0.662149E-01  -4.39643       4.39643       1082.37       1086.77    
   9  0.158531      -1.84180      -122.289       122.289       1068.11       1190.40    
  10  0.846482     -0.166666      -11.0660       11.0660       1136.23       1147.29    
  11  0.252208      -1.37750      -91.4611       91.4611       984.147       1075.61    
  12  0.781651E-02  -4.85152      -322.123       322.123       1057.86       1379.99    
  13  0.990286     -0.976134E-02 -0.648117      0.648117       1115.73       1116.37    
  14  0.550116     -0.597625      -39.6801       39.6801       1039.39       1079.07    
  15  0.483066     -0.727601      -48.3100       48.3100       1145.34       1193.65    
  16  0.196160      -1.62883      -108.148       108.148       1226.27       1334.42    
  17  0.469455     -0.756184      -50.2078       50.2078       1193.97       1244.18    
  18  0.624392     -0.470977      -31.2711       31.2711       1244.63       1275.90    
  19  0.743593     -0.296262      -19.6707       19.6707       1172.60       1192.27    
  20  0.348439      -1.05429      -70.0011       70.0011       1241.02       1311.02    
  21  0.779083     -0.249637      -16.5750       16.5750       1250.82       1267.40    
  22  0.989010     -0.110506E-01 -0.733719      0.733719       1119.26       1120.00    
  23  0.655432E-01  -2.72505      -180.933       180.933       1238.38       1419.32    
  24  0.470908     -0.753092      -50.0026       50.0026       1147.76       1197.76    
  25  0.685537     -0.377553      -25.0681       25.0681       1240.71       1265.78    
  26  0.863060E-02  -4.75244      -315.545       315.545       1186.97       1502.52    
  27  0.526195     -0.642084      -42.6320       42.6320       1228.83       1271.46    
  28  0.767692     -0.264367      -17.5530       17.5530       1207.13       1224.69    
  29  0.380048     -0.967459      -64.2357       64.2357       1347.44       1411.67    
  30  0.337508E-01  -3.38875      -225.001       225.001       1300.22       1525.23    
  31  0.683667     -0.380285      -25.2495       25.2495       1286.40       1311.65    
  32  0.245511      -1.40441      -93.2480       93.2480       1331.35       1424.59    
  33  0.294388      -1.22286      -81.1931       81.1931       1332.88       1414.07    
  34  0.159040      -1.83860      -122.076       122.076       1356.13       1478.21    
  35  0.613798     -0.488089      -32.4073       32.4073       1217.14       1249.55    
  36  0.863839E-01  -2.44895      -162.601       162.601       1281.30       1443.90    
  37  0.118930      -2.12922      -141.372       141.372       1405.23       1546.60    
  38  0.961460     -0.393026E-01  -2.60955       2.60955       1157.00       1159.61    
  39  0.457884     -0.781140      -51.8648       51.8648       1407.45       1459.31    
  40  0.312963      -1.16167      -77.1306       77.1306       1407.55       1484.68    
  41  0.892553     -0.113669      -7.54720       7.54720       1389.10       1396.65    
  42  0.448774     -0.801235      -53.1990       53.1990       1437.49       1490.69    
  43  0.942987E-01  -2.36129      -156.781       156.781       1428.62       1585.40    
  44  0.848599     -0.164169      -10.9002       10.9002       1436.49       1447.39    
  45  0.665342     -0.407455      -27.0535       27.0535       1407.76       1434.82    
  46  0.894010     -0.112039      -7.43895       7.43895       1450.94       1458.38    
  47  0.403928     -0.906518      -60.1895       60.1895       1189.08       1249.27    
  48  0.612812     -0.489696      -32.5140       32.5140       1445.71       1478.23    
  49  0.726279     -0.319821      -21.2349       21.2349       1447.80       1469.04    
  50  0.694767     -0.364179      -24.1801       24.1801       1485.87       1510.05    
  51  0.849471     -0.163141      -10.8320       10.8320       1412.16       1423.00    
  52  0.615908     -0.484657      -32.1794       32.1794       1506.58       1538.76    
  53  0.256250      -1.36160      -90.4054       90.4054       1453.26       1543.66    
  54  0.124633      -2.08238      -138.262       138.262       1439.42       1577.68    
  55  0.629294E-01  -2.76574      -183.635       183.635       1448.61       1632.25    
  56  0.127527      -2.05943      -136.738       136.738       1418.12       1554.86    
  57  0.721510     -0.326409      -21.6724       21.6724       1545.03       1566.70    
  58  0.664696     -0.408425      -27.1179       27.1179       1555.06       1582.18    
  59  0.562617     -0.575156      -38.1883       38.1883       1527.51       1565.70    
  60  0.413984     -0.881928      -58.5568       58.5568       1552.59       1611.15    
  61  0.656751     -0.420450      -27.9163       27.9163       1582.86       1610.77    
  62  0.642415     -0.442520      -29.3817       29.3817       1519.51       1548.89    
  63  0.136182      -1.99376      -132.378       132.378       1614.33       1746.71    
  64  0.481125     -0.731629      -48.5775       48.5775       1560.83       1609.41    
  65  0.147280      -1.91542      -127.177       127.177       1627.70       1754.88    
  66  0.162546      -1.81680      -120.629       120.629       1561.33       1681.96    
  67  0.200903      -1.60493      -106.562       106.562       1658.95       1765.51    
  68  0.444300     -0.811254      -53.8643       53.8643       1463.91       1517.77    
  69  0.799825     -0.223363      -14.8305       14.8305       1569.79       1584.62    
  70  0.622561     -0.473914      -31.4662       31.4662       1549.69       1581.16    
  71  0.468358     -0.758522      -50.3631       50.3631       1683.61       1733.98    
  72  0.155577      -1.86061      -123.538       123.538       1637.85       1761.38    
  73  0.445431     -0.808713      -53.6955       53.6955       1727.73       1781.42    
  74  0.707826     -0.345557      -22.9437       22.9437       1211.72       1234.67    
loop,thermsimp(1:2)       79   110.191       13.7470    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328       1736.20        129.71          0.66         30.50          0.90          0.05        161.82
Just calling func    0   0        161.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1736.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       79
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       80
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      327     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -72.1949       72.1949       1005.15       1077.34    
   2  0.744737     -0.294724      -19.5686       19.5686       1042.84       1062.40    
   3  0.361564E-01  -3.31990      -220.429       220.429       1030.06       1250.49    
   4  0.312099      -1.16444      -77.3143       77.3143       984.147       1061.46    
   5  0.119132      -2.12752      -141.260       141.260       1039.39       1180.65    
   6  0.617735     -0.481696      -31.9828       31.9828       1082.37       1114.35    
   7  0.117626      -2.14025      -142.104       142.104       1115.73       1257.83    
   8  0.258570      -1.35259      -89.8069       89.8069       1119.26       1209.07    
   9  0.851854E-01  -2.46293      -163.529       163.529       1013.25       1176.78    
  10  0.220620      -1.51131      -100.346       100.346       1136.23       1236.57    
  11  0.648876     -0.432513      -28.7173       28.7173       1157.00       1185.71    
  12  0.958689     -0.421884E-01  -2.80116       2.80116       1068.11       1070.91    
  13  0.240652      -1.42440      -94.5751       94.5751       1172.60       1267.18    
  14  0.975871     -0.244252E-01  -1.62174       1.62174       1145.34       1146.96    
  15  0.467835     -0.759639      -50.4372       50.4372       1147.76       1198.20    
  16  0.398205     -0.920788      -61.1370       61.1370       1207.13       1268.27    
  17  0.757338E-01  -2.58053      -171.338       171.338       1061.57       1232.91    
  18  0.654643     -0.423666      -28.1298       28.1298       1211.72       1239.85    
  19  0.305298      -1.18647      -78.7770       78.7770       1193.97       1272.75    
  20  0.435768     -0.830645      -55.1517       55.1517       1189.08       1244.23    
  21  0.689410     -0.371920      -24.6941       24.6941       1217.14       1241.84    
  22  0.267500      -1.31864      -87.5525       87.5525       1076.81       1164.36    
  23  0.590747     -0.526367      -34.9489       34.9489       1240.71       1275.66    
  24  0.108947E-01  -4.51948      -300.077       300.077       1250.82       1550.90    
  25  0.236025      -1.44382      -95.8643       95.8643       1228.83       1324.69    
  26  0.590760     -0.526345      -34.9474       34.9474       1244.63       1279.58    
  27  0.782443     -0.245334      -16.2893       16.2893       1241.02       1257.31    
  28  0.702257     -0.353456      -23.4682       23.4682       1286.40       1309.87    
  29  0.764991     -0.267891      -17.7870       17.7870       1226.27       1244.06    
  30  0.753362     -0.283210      -18.8041       18.8041       992.393       1011.20    
  31  0.961949E-01  -2.34138      -155.459       155.459       1057.86       1213.32    
  32  0.541564     -0.613294      -40.7205       40.7205       1389.10       1429.82    
  33  0.474786     -0.744891      -49.4580       49.4580       1347.44       1396.90    
  34  0.242842      -1.41534      -93.9736       93.9736       1332.88       1426.85    
  35  0.495414     -0.702361      -46.6342       46.6342       1238.38       1285.02    
  36  0.636645     -0.451543      -29.9808       29.9808       1412.16       1442.15    
  37  0.758087     -0.276957      -18.3889       18.3889       1331.35       1349.74    
  38  0.209321      -1.56389      -103.836       103.836       1407.76       1511.60    
  39  0.484343     -0.724961      -48.1347       48.1347       1281.30       1329.43    
  40  0.499790     -0.693567      -46.0503       46.0503       1436.49       1482.54    
  41  0.316628      -1.15003      -76.3577       76.3577       1450.94       1527.30    
  42  0.705469     -0.348892      -23.1651       23.1651       1407.45       1430.61    
  43  0.514591     -0.664383      -44.1126       44.1126       1447.80       1491.91    
  44  0.869006     -0.140406      -9.32243       9.32243       1356.13       1365.46    
  45  0.112600      -2.18392      -145.004       145.004       1445.71       1590.72    
  46  0.511991     -0.669449      -44.4490       44.4490       1407.55       1452.00    
  47  0.477456     -0.739283      -49.0857       49.0857       1437.49       1486.58    
  48  0.494460     -0.704290      -46.7623       46.7623       1186.97       1233.73    
  49  0.698938     -0.358193      -23.7827       23.7827       1485.87       1509.65    
  50  0.430212     -0.843478      -56.0039       56.0039       1463.91       1519.91    
  51  0.474243E-01  -3.04862      -202.417       202.417       1300.22       1502.64    
  52  0.167497      -1.78679      -118.636       118.636       1506.58       1625.22    
  53  0.233811      -1.45324      -96.4900       96.4900       1453.26       1549.75    
  54  0.760101     -0.274304      -18.2128       18.2128       1405.23       1423.44    
  55  0.195143      -1.63402      -108.493       108.493       1519.51       1628.00    
  56  0.822875     -0.194951      -12.9440       12.9440       1418.12       1431.06    
  57  0.332571      -1.10090      -73.0958       73.0958       1527.51       1600.61    
  58  0.682214     -0.382412      -25.3908       25.3908       1545.03       1570.42    
  59  0.560875E-01  -2.88084      -191.277       191.277       1439.42       1630.70    
  60  0.407464     -0.897802      -59.6107       59.6107       1549.69       1609.31    
  61  0.650997     -0.429250      -28.5006       28.5006       1555.06       1583.56    
  62  0.426312E-01  -3.15517      -209.492       209.492       1569.79       1779.28    
  63  0.556139E-01  -2.88932      -191.840       191.840       1428.62       1620.46    
  64  0.837058     -0.177861      -11.8093       11.8093       1560.83       1572.64    
  65  0.655823     -0.421864      -28.0102       28.0102       1582.86       1610.87    
  66  0.846314E-02  -4.77204      -316.846       316.846       1552.59       1869.44    
  67  0.227818E-01  -3.78179      -251.097       251.097       1448.61       1699.71    
  68  0.401219     -0.913248      -60.6363       60.6363       1561.33       1621.96    
  69  0.663900     -0.409624      -27.1975       27.1975       1683.61       1710.81    
  70  0.660940     -0.414092      -27.4942       27.4942       1614.33       1641.83    
  71  0.106131      -2.24308      -148.932       148.932       1627.70       1776.64    
  72  0.609372     -0.495326      -32.8878       32.8878       1637.85       1670.73    
  73  0.705689     -0.348581      -23.1445       23.1445       1658.95       1682.10    
  74  0.612419     -0.490339      -32.5567       32.5567       1736.20       1768.76    
loop,thermsimp(1:2)       80   72.1949       19.5686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329       1536.88        129.33          0.64         30.28          1.76          0.04        162.05
Just calling func    0   0        162.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1536.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       80
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       81
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      328     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -70.8666       70.8666       992.393       1063.26    
   2  0.822787     -0.195058      -12.9511       12.9511       984.147       997.098    
   3  0.320831E-01  -3.43942      -228.365       228.365       1042.84       1271.20    
   4  0.224034      -1.49596      -99.3261       99.3261       1068.11       1167.44    
   5  0.200770      -1.60559      -106.605       106.605       1005.15       1111.75    
   6  0.983846     -0.162863E-01  -1.08135       1.08135       1082.37       1083.45    
   7  0.762274     -0.271449      -18.0232       18.0232       1145.34       1163.36    
   8  0.872649     -0.136221      -9.04460       9.04460       1076.81       1085.85    
   9  0.366891      -1.00269      -66.5749       66.5749       1013.25       1079.82    
  10  0.800852     -0.222079      -14.7453       14.7453       1039.39       1054.13    
  11  0.755695     -0.280117      -18.5987       18.5987       1157.00       1175.60    
  12  0.595174     -0.518902      -34.4532       34.4532       1147.76       1182.22    
  13  0.316509      -1.15040      -76.3826       76.3826       1119.26       1195.65    
  14  0.847901     -0.164991      -10.9548       10.9548       1057.86       1068.82    
  15  0.116195      -2.15248      -142.917       142.917       1061.57       1204.49    
  16  0.121963      -2.10403      -139.700       139.700       1186.97       1326.67    
  17  0.298485      -1.20903      -80.2754       80.2754       1136.23       1216.50    
  18  0.698751     -0.358461      -23.8005       23.8005       1211.72       1235.53    
  19  0.248186      -1.39358      -92.5283       92.5283       1217.14       1309.67    
  20  0.717251     -0.332329      -22.0654       22.0654       1226.27       1248.34    
  21  0.591856     -0.524491      -34.8243       34.8243       1189.08       1223.90    
  22  0.780177E-01  -2.55082      -169.365       169.365       1030.06       1199.43    
  23  0.314281      -1.15747      -76.8516       76.8516       1241.02       1317.87    
  24  0.565423E-01  -2.87277      -190.741       190.741       1115.73       1306.47    
  25  0.964829     -0.358044E-01  -2.37728       2.37728       1172.60       1174.98    
  26  0.900157     -0.105186      -6.98399       6.98399       1207.13       1214.12    
  27  0.656998     -0.420074      -27.8913       27.8913       1193.97       1221.86    
  28  0.888436E-01  -2.42088      -160.737       160.737       1240.71       1401.45    
  29  0.853838     -0.158014      -10.4916       10.4916       1244.63       1255.12    
  30  0.704842     -0.349782      -23.2242       23.2242       1238.38       1261.61    
  31  0.890111     -0.116409      -7.72912       7.72912       1286.40       1294.13    
  32  0.424397     -0.857087      -56.9074       56.9074       1228.83       1285.73    
  33  0.959371     -0.414778E-01  -2.75398       2.75398       1281.30       1284.05    
  34  0.323832      -1.12753      -74.8639       74.8639       1331.35       1406.21    
  35  0.943913     -0.577217E-01  -3.83251       3.83251       1356.13       1359.97    
  36  0.119048      -2.12823      -141.306       141.306       1347.44       1488.74    
  37  0.427842E-01  -3.15159      -209.254       209.254       1405.23       1614.48    
  38  0.433544     -0.835761      -55.4915       55.4915       1332.88       1388.37    
  39  0.773173     -0.257253      -17.0806       17.0806       1389.10       1406.18    
  40  0.455657     -0.786014      -52.1885       52.1885       1407.45       1459.64    
  41  0.362132      -1.01575      -67.4418       67.4418       1418.12       1485.56    
  42  0.775394     -0.254384      -16.8901       16.8901       1412.16       1429.05    
  43  0.889906     -0.116639      -7.74442       7.74442       1407.55       1415.29    
  44  0.415923     -0.877255      -58.2465       58.2465       1436.49       1494.74    
  45  0.374532E-01  -3.28466      -218.090       218.090       1437.49       1655.58    
  46  0.904805     -0.100036      -6.64202       6.64202       1447.80       1454.44    
  47  0.130905      -2.03328      -135.002       135.002       1300.22       1435.23    
  48  0.951733     -0.494710E-01  -3.28469       3.28469       1485.87       1489.15    
  49  0.720673     -0.327570      -21.7494       21.7494       1407.76       1429.51    
  50  0.425150     -0.855314      -56.7897       56.7897       1463.91       1520.70    
  51  0.464059     -0.767744      -50.9754       50.9754       1450.94       1501.91    
  52  0.822031     -0.195978      -13.0122       13.0122       1453.26       1466.27    
  53  0.325542      -1.12226      -74.5142       74.5142       1250.82       1325.34    
  54  0.701043     -0.355186      -23.5830       23.5830       1545.03       1568.61    
  55  0.135013      -2.00239      -132.951       132.951       1560.83       1693.78    
  56  0.911632     -0.925193E-01  -6.14294       6.14294       1555.06       1561.20    
  57  0.172993      -1.75450      -116.493       116.493       1445.71       1562.20    
  58  0.401556     -0.912409      -60.5806       60.5806       1527.51       1588.09    
  59  0.906091     -0.986152E-01  -6.54768       6.54768       1549.69       1556.24    
  60  0.322588      -1.13138      -75.1194       75.1194       1582.86       1657.98    
  61  0.779620     -0.248949      -16.5293       16.5293       1428.62       1445.15    
  62  0.886087     -0.120940      -8.02998       8.02998       1561.33       1569.36    
  63  0.841445     -0.172634      -11.4623       11.4623       1506.58       1518.04    
  64  0.960060E-01  -2.34334      -155.589       155.589       1519.51       1675.09    
  65  0.198159      -1.61868      -107.475       107.475       1439.42       1546.90    
  66  0.762088E-01  -2.57428      -170.923       170.923       1614.33       1785.26    
  67  0.829173     -0.187327      -12.4378       12.4378       1637.85       1650.28    
  68  0.725953     -0.320270      -21.2647       21.2647       1658.95       1680.22    
  69  0.881009     -0.126687      -8.41158       8.41158       1448.61       1457.03    
  70  0.964096     -0.365643E-01  -2.42773       2.42773       1683.61       1686.04    
  71  0.602895     -0.506013      -33.5974       33.5974       1736.20       1769.80    
  72  0.402816     -0.909276      -60.3726       60.3726       1627.70       1688.08    
  73  0.114891      -2.16377      -143.666       143.666       1569.79       1713.45    
  74  0.501101     -0.690948      -45.8764       45.8764       1536.88       1582.76    
loop,thermsimp(1:2)       81   70.8666       12.9511    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330       1303.01        129.77          0.67         30.32          1.56          0.04        162.36
Just calling func    0   0        162.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1303.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       81
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       82
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      329     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -38.9205       38.9205       984.147       1023.07    
   2  0.926592     -0.762421E-01  -5.06219       5.06219       1039.39       1044.45    
   3  0.766762     -0.265579      -17.6335       17.6335       992.393       1010.03    
   4  0.627980     -0.465247      -30.8907       30.8907       1057.86       1088.75    
   5  0.647527     -0.434594      -28.8555       28.8555       1013.25       1042.10    
   6  0.639464     -0.447125      -29.6874       29.6874       1082.37       1112.06    
   7  0.168437      -1.78119      -118.265       118.265       1076.81       1195.07    
   8  0.725133     -0.321400      -21.3398       21.3398       1005.15       1026.49    
   9  0.620073     -0.477917      -31.7320       31.7320       1145.34       1177.07    
  10  0.837394     -0.177461      -11.7827       11.7827       1068.11       1079.89    
  11  0.763326     -0.270070      -17.9316       17.9316       1172.60       1190.54    
  12  0.216703      -1.52923      -101.535       101.535       1157.00       1258.53    
  13  0.846730     -0.166373      -11.0466       11.0466       1147.76       1158.81    
  14  0.712127     -0.339499      -22.5415       22.5415       1119.26       1141.80    
  15  0.731222     -0.313039      -20.7846       20.7846       1030.06       1050.85    
  16  0.131329      -2.03005      -134.788       134.788       1061.57       1196.36    
  17  0.946517     -0.549662E-01  -3.64956       3.64956       1207.13       1210.78    
  18  0.303743      -1.19157      -79.1161       79.1161       1136.23       1215.34    
  19  0.452199     -0.793633      -52.6943       52.6943       1193.97       1246.67    
  20  0.176302      -1.73556      -115.235       115.235       1189.08       1304.31    
  21  0.569871     -0.562345      -37.3376       37.3376       1211.72       1249.06    
  22  0.267873      -1.31724      -87.4601       87.4601       1226.27       1313.73    
  23  0.295877      -1.21781      -80.8581       80.8581       1244.63       1325.49    
  24  0.658567     -0.417689      -27.7330       27.7330       1238.38       1266.12    
  25  0.633120     -0.457096      -30.3495       30.3495       1042.84       1073.19    
  26  0.655522     -0.422324      -28.0408       28.0408       1281.30       1309.34    
  27  0.532295     -0.630558      -41.8667       41.8667       1228.83       1270.69    
  28  0.611209     -0.492317      -32.6880       32.6880       1286.40       1319.09    
  29  0.768812E-01  -2.56549      -170.339       170.339       1115.73       1286.07    
  30  0.845132     -0.168262      -11.1720       11.1720       1217.14       1228.31    
  31  0.133696      -2.01219      -133.602       133.602       1241.02       1374.62    
  32  0.850522E-01  -2.46449      -163.633       163.633       1250.82       1414.46    
  33  0.901960     -0.103185      -6.85109       6.85109       1186.97       1193.82    
  34  0.394454E-01  -3.23284      -214.649       214.649       1356.13       1570.78    
  35  0.152819      -1.87850      -124.725       124.725       1332.88       1457.60    
  36  0.951369     -0.498538E-01  -3.31011       3.31011       1240.71       1244.02    
  37  0.909075     -0.953273E-01  -6.32939       6.32939       1389.10       1395.43    
  38  0.552964     -0.592462      -39.3373       39.3373       1331.35       1370.68    
  39  0.904748     -0.100099      -6.64621       6.64621       1407.55       1414.19    
  40  0.434860     -0.832731      -55.2903       55.2903       1412.16       1467.45    
  41  0.807557E-01  -2.51633      -167.075       167.075       1407.76       1574.84    
  42  0.245089      -1.40614      -93.3622       93.3622       1300.22       1393.59    
  43  0.566857     -0.567648      -37.6897       37.6897       1428.62       1466.31    
  44  0.154441      -1.86794      -124.024       124.024       1447.80       1571.82    
  45  0.961849     -0.388974E-01  -2.58265       2.58265       1448.61       1451.20    
  46  0.267234      -1.31963      -87.6187       87.6187       1407.45       1495.07    
  47  0.170042      -1.77171      -117.635       117.635       1453.26       1570.89    
  48  0.796608     -0.227393      -15.0981       15.0981       1418.12       1433.22    
  49  0.474137     -0.746260      -49.5489       49.5489       1347.44       1396.99    
  50  0.164737      -1.80340      -119.739       119.739       1485.87       1605.61    
  51  0.728428     -0.316867      -21.0388       21.0388       1436.49       1457.53    
  52  0.259284      -1.34983      -89.6239       89.6239       1450.94       1540.56    
  53  0.932415     -0.699773E-01  -4.64623       4.64623       1506.58       1511.23    
  54  0.905731     -0.990126E-01  -6.57407       6.57407       1463.91       1470.48    
  55  0.975166     -0.251472E-01  -1.66968       1.66968       1439.42       1441.09    
  56  0.312519      -1.16309      -77.2249       77.2249       1549.69       1626.92    
  57  0.363326      -1.01246      -67.2233       67.2233       1555.06       1622.28    
  58  0.633693     -0.456191      -30.2894       30.2894       1445.71       1476.00    
  59  0.765432     -0.267315      -17.7487       17.7487       1545.03       1562.78    
  60  0.197736      -1.62082      -107.617       107.617       1561.33       1668.94    
  61  0.825376     -0.191916      -12.7425       12.7425       1536.88       1549.63    
  62  0.401700     -0.912049      -60.5567       60.5567       1527.51       1588.07    
  63  0.637472     -0.450245      -29.8946       29.8946       1405.23       1435.12    
  64  0.989702     -0.103516E-01 -0.687309      0.687309       1637.85       1638.53    
  65  0.980344     -0.198515E-01  -1.31807       1.31807       1437.49       1438.81    
  66  0.719848     -0.328715      -21.8254       21.8254       1582.86       1604.68    
  67  0.779598     -0.248976      -16.5311       16.5311       1519.51       1536.04    
  68  0.979665     -0.205443E-01  -1.36406       1.36406       1658.95       1660.32    
  69  0.904051E-01  -2.40345      -159.581       159.581       1683.61       1843.19    
  70  0.484052     -0.725563      -48.1747       48.1747       1627.70       1675.88    
  71  0.487443     -0.718583      -47.7112       47.7112       1560.83       1608.54    
  72  0.132340      -2.02238      -134.279       134.279       1569.79       1704.07    
  73  0.629957E-01  -2.76469      -183.565       183.565       1736.20       1919.77    
  74  0.841050     -0.173104      -11.4934       11.4934       1303.01       1314.50    
loop,thermsimp(1:2)       82   38.9205       5.06219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331       1733.28        129.60          0.69         30.50          1.27          0.04        162.11
Just calling func    0   0        162.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1733.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       82
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       83
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      330     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -31.6796       31.6796       992.393       1024.07    
   2  0.835522     -0.179699      -11.9313       11.9313       984.147       996.078    
   3  0.626661     -0.467350      -31.0303       31.0303       1005.15       1036.18    
   4  0.197939      -1.61980      -107.548       107.548       1013.25       1120.79    
   5  0.842637     -0.171219      -11.3683       11.3683       1039.39       1050.76    
   6  0.873669     -0.135053      -8.96706       8.96706       1030.06       1039.03    
   7  0.298180E-01  -3.51264      -233.227       233.227       1042.84       1276.06    
   8  0.548374     -0.600797      -39.8907       39.8907       1068.11       1108.00    
   9  0.407469E-01  -3.20037      -212.493       212.493       1057.86       1270.36    
  10  0.210105E-02  -6.16532      -409.354       409.354       1082.37       1491.72    
  11  0.631577     -0.459536      -30.5115       30.5115       1119.26       1149.77    
  12  0.944026     -0.576013E-01  -3.82451       3.82451       1147.76       1151.59    
  13  0.492775     -0.707703      -46.9889       46.9889       1145.34       1192.33    
  14  0.195107      -1.63421      -108.505       108.505       1172.60       1281.11    
  15  0.775688     -0.254005      -16.8650       16.8650       1186.97       1203.84    
  16  0.763907     -0.269310      -17.8812       17.8812       1076.81       1094.69    
  17  0.797499     -0.226275      -15.0238       15.0238       1061.57       1076.59    
  18  0.639217     -0.447511      -29.7131       29.7131       1207.13       1236.85    
  19  0.775225     -0.254602      -16.9046       16.9046       1136.23       1153.13    
  20  0.680633     -0.384733      -25.5448       25.5448       1217.14       1242.69    
  21  0.532184     -0.630766      -41.8806       41.8806       1240.71       1282.59    
  22  0.843009     -0.170778      -11.3390       11.3390       1193.97       1205.31    
  23  0.943186     -0.584913E-01  -3.88361       3.88361       1211.72       1215.61    
  24  0.601611     -0.508143      -33.7389       33.7389       1157.00       1190.74    
  25  0.259021      -1.35084      -89.6911       89.6911       1238.38       1328.08    
  26  0.855132     -0.156500      -10.3910       10.3910       1228.83       1239.22    
  27  0.351229      -1.04632      -69.4716       69.4716       1115.73       1185.20    
  28  0.950362     -0.509122E-01  -3.38038       3.38038       1189.08       1192.46    
  29  0.447301     -0.804524      -53.4175       53.4175       1281.30       1334.72    
  30  0.325509      -1.12237      -74.5210       74.5210       1226.27       1300.79    
  31  0.717010     -0.332666      -22.0878       22.0878       1303.01       1325.10    
  32  0.676718     -0.390500      -25.9278       25.9278       1286.40       1312.33    
  33  0.493623     -0.705983      -46.8747       46.8747       1244.63       1291.51    
  34  0.155805E-01  -4.16174      -276.324       276.324       1331.35       1607.67    
  35  0.417708     -0.872973      -57.9622       57.9622       1241.02       1298.98    
  36  0.395067     -0.928699      -61.6622       61.6622       1300.22       1361.89    
  37  0.977835     -0.224139E-01  -1.48820       1.48820       1389.10       1390.59    
  38  0.603414     -0.505151      -33.5402       33.5402       1347.44       1380.98    
  39  0.173810      -1.74979      -116.180       116.180       1407.55       1523.73    
  40  0.979719     -0.204895E-01  -1.36043       1.36043       1250.82       1252.19    
  41  0.234071      -1.45213      -96.4161       96.4161       1418.12       1514.54    
  42  0.264051      -1.33161      -88.4143       88.4143       1405.23       1493.64    
  43  0.756353     -0.279247      -18.5410       18.5410       1437.49       1456.03    
  44  0.980782     -0.194046E-01  -1.28839       1.28839       1439.42       1440.71    
  45  0.444591E-01  -3.11319      -206.704       206.704       1448.61       1655.32    
  46  0.276895      -1.28412      -85.2607       85.2607       1436.49       1521.75    
  47  0.754338     -0.281915      -18.7181       18.7181       1332.88       1351.59    
  48  0.288496      -1.24308      -82.5356       82.5356       1428.62       1511.16    
  49  0.945547     -0.559915E-01  -3.71763       3.71763       1412.16       1415.88    
  50  0.698722     -0.358502      -23.8032       23.8032       1463.91       1487.71    
  51  0.586821     -0.533035      -35.3916       35.3916       1445.71       1481.10    
  52  0.173241      -1.75307      -116.398       116.398       1407.45       1523.84    
  53  0.157974      -1.84532      -122.523       122.523       1506.58       1629.10    
  54  0.789304     -0.236604      -15.7096       15.7096       1519.51       1535.21    
  55  0.351815      -1.04465      -69.3608       69.3608       1450.94       1520.30    
  56  0.109517      -2.21167      -146.847       146.847       1536.88       1683.73    
  57  0.884115     -0.123168      -8.17791       8.17791       1545.03       1553.21    
  58  0.590256     -0.527198      -35.0040       35.0040       1356.13       1391.14    
  59  0.720991     -0.327128      -21.7201       21.7201       1453.26       1474.98    
  60  0.584697     -0.536661      -35.6323       35.6323       1447.80       1483.43    
  61  0.798909E-01  -2.52709      -167.790       167.790       1407.76       1575.55    
  62  0.476858     -0.740537      -49.1690       49.1690       1527.51       1576.68    
  63  0.366415      -1.00399      -66.6612       66.6612       1582.86       1649.52    
  64  0.579292     -0.545948      -36.2489       36.2489       1485.87       1522.12    
  65  0.859086     -0.151886      -10.0846       10.0846       1560.83       1570.92    
  66  0.178211      -1.72479      -114.520       114.520       1555.06       1669.58    
  67  0.372347     -0.987929      -65.5949       65.5949       1549.69       1615.29    
  68  0.132090      -2.02427      -134.404       134.404       1637.85       1772.25    
  69  0.292834      -1.22815      -81.5447       81.5447       1658.95       1740.50    
  70  0.788579     -0.237522      -15.7706       15.7706       1561.33       1577.10    
  71  0.555831     -0.587292      -38.9940       38.9940       1627.70       1666.70    
  72  0.621814     -0.475115      -31.5459       31.5459       1569.79       1601.33    
  73  0.801237     -0.221598      -14.7133       14.7133       1683.61       1698.33    
  74  0.570173     -0.561816      -37.3025       37.3025       1733.28       1770.58    
loop,thermsimp(1:2)       83   31.6796       11.9313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332       1031.58        130.11          0.66         30.04          1.38          0.05        162.24
Just calling func    0   0        162.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1031.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       83
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       84
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      331     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -36.8880       36.8880       984.147       1021.03    
   2  0.583943E-01  -2.84054      -188.601       188.601       992.393       1180.99    
   3  0.377108     -0.975224      -64.7513       64.7513       1005.15       1069.90    
   4  0.117758      -2.13912      -142.030       142.030       1030.06       1172.09    
   5  0.531627     -0.631812      -41.9500       41.9500       1039.39       1081.34    
   6  0.348101      -1.05526      -70.0655       70.0655       1061.57       1131.64    
   7  0.713050     -0.338204      -22.4555       22.4555       1076.81       1099.26    
   8  0.895286     -0.110612      -7.34424       7.34424       1068.11       1075.45    
   9  0.873863     -0.134831      -8.95229       8.95229       1013.25       1022.20    
  10  0.225074      -1.49132      -99.0185       99.0185       1119.26       1218.28    
  11  0.542220     -0.612083      -40.6400       40.6400       1147.76       1188.40    
  12  0.262707      -1.33672      -88.7531       88.7531       1136.23       1224.98    
  13  0.864358E-01  -2.44835      -162.562       162.562       1115.73       1278.29    
  14  0.468331     -0.758581      -50.3670       50.3670       1157.00       1207.36    
  15  0.896509     -0.109247      -7.25361       7.25361       1145.34       1152.59    
  16  0.169842E-01  -4.07547      -270.596       270.596       1189.08       1459.68    
  17  0.980158     -0.200410E-01  -1.33065       1.33065       1186.97       1188.30    
  18  0.252821      -1.37507      -91.2998       91.2998       1193.97       1285.27    
  19  0.556823     -0.585507      -38.8755       38.8755       1211.72       1250.60    
  20  0.520304     -0.653342      -43.3795       43.3795       1207.13       1250.51    
  21  0.956705E-01  -2.34685      -155.822       155.822       1228.83       1384.65    
  22  0.458762     -0.779224      -51.7376       51.7376       1217.14       1268.88    
  23  0.684654     -0.378842      -25.1537       25.1537       1250.82       1275.98    
  24  0.749393     -0.288492      -19.1548       19.1548       1057.86       1077.02    
  25  0.112724      -2.18282      -144.931       144.931       1042.84       1187.77    
  26  0.642114     -0.442989      -29.4129       29.4129       1172.60       1202.02    
  27  0.881888     -0.125691      -8.34539       8.34539       1240.71       1249.06    
  28  0.933845     -0.684452E-01  -4.54451       4.54451       1244.63       1249.18    
  29  0.124482      -2.08359      -138.343       138.343       1241.02       1379.36    
  30  0.189487      -1.66344      -110.446       110.446       1226.27       1336.72    
  31  0.526869     -0.640804      -42.5470       42.5470       1286.40       1328.95    
  32  0.490162     -0.713020      -47.3419       47.3419       1303.01       1350.35    
  33  0.292049      -1.23083      -81.7229       81.7229       1238.38       1320.11    
  34  0.646685     -0.435896      -28.9419       28.9419       1281.30       1310.24    
  35  0.738289     -0.303420      -20.1460       20.1460       1332.88       1353.02    
  36  0.379268     -0.969513      -64.3721       64.3721       1300.22       1364.60    
  37  0.691037     -0.369562      -24.5376       24.5376       1347.44       1371.97    
  38  0.566288     -0.568653      -37.7565       37.7565       1389.10       1426.86    
  39  0.130734      -2.03459      -135.089       135.089       1356.13       1491.22    
  40  0.298876      -1.20773      -80.1885       80.1885       1412.16       1492.35    
  41  0.369194     -0.996434      -66.1596       66.1596       1439.42       1505.58    
  42  0.291325      -1.23331      -81.8876       81.8876       1437.49       1519.38    
  43  0.828296     -0.188384      -12.5080       12.5080       1453.26       1465.76    
  44  0.540492E-01  -2.91786      -193.735       193.735       1445.71       1639.45    
  45  0.979889     -0.203162E-01  -1.34892       1.34892       1447.80       1449.15    
  46  0.411533     -0.887866      -58.9510       58.9510       1463.91       1522.86    
  47  0.430635     -0.842495      -55.9386       55.9386       1082.37       1138.31    
  48  0.948338     -0.530447E-01  -3.52197       3.52197       1405.23       1408.75    
  49  0.400713E-02  -5.51968      -366.486       366.486       1428.62       1795.11    
  50  0.963092     -0.376065E-01  -2.49693       2.49693       1418.12       1420.62    
  51  0.101802      -2.28472      -151.697       151.697       1450.94       1602.64    
  52  0.161305      -1.82446      -121.137       121.137       1436.49       1557.63    
  53  0.579295     -0.545944      -36.2487       36.2487       1485.87       1522.12    
  54  0.246178      -1.40170      -93.0679       93.0679       1407.55       1500.61    
  55  0.783155     -0.244425      -16.2289       16.2289       1407.45       1423.68    
  56  0.643375     -0.441028      -29.2826       29.2826       1519.51       1548.79    
  57  0.440007     -0.820964      -54.5090       54.5090       1545.03       1599.54    
  58  0.478097     -0.737941      -48.9966       48.9966       1560.83       1609.83    
  59  0.174252      -1.74725      -116.011       116.011       1407.76       1523.77    
  60  0.947266E-01  -2.35676      -156.480       156.480       1527.51       1683.99    
  61  0.115878      -2.15522      -143.099       143.099       1561.33       1704.43    
  62  0.523006     -0.648162      -43.0356       43.0356       1569.79       1612.82    
  63  0.114447      -2.16765      -143.924       143.924       1331.35       1475.27    
  64  0.694365     -0.364757      -24.2185       24.2185       1549.69       1573.91    
  65  0.551880     -0.594425      -39.4676       39.4676       1506.58       1546.05    
  66  0.558116     -0.583189      -38.7216       38.7216       1582.86       1621.58    
  67  0.160284      -1.83081      -121.559       121.559       1448.61       1570.17    
  68  0.786878     -0.239682      -15.9140       15.9140       1627.70       1643.62    
  69  0.450862     -0.796593      -52.8909       52.8909       1555.06       1607.95    
  70  0.857757     -0.153434      -10.1875       10.1875       1536.88       1547.07    
  71  0.789461     -0.236405      -15.6964       15.6964       1683.61       1699.31    
  72  0.507184     -0.678881      -45.0752       45.0752       1658.95       1704.03    
  73  0.853230     -0.158726      -10.5388       10.5388       1733.28       1743.82    
  74  0.879150     -0.128800      -8.55185       8.55185       1031.58       1040.13    
loop,thermsimp(1:2)       84   36.8880       188.601    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        976.91        129.98          0.68         30.05          1.54          0.05        162.31
Just calling func    0   0        162.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        919.16        129.84          0.68         29.86          1.61          0.05        162.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    919.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       84
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       85
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      333     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01  -4.34176       4.34176       984.147       988.488    
   2  0.765516     -0.267206      -17.7415       17.7415       1013.25       1030.99    
   3  0.899266     -0.106176      -7.04969       7.04969       1031.58       1038.63    
   4  0.953341     -0.477822E-01  -3.17256       3.17256       1005.15       1008.32    
   5  0.642356     -0.442612      -29.3878       29.3878       1068.11       1097.50    
   6  0.265713      -1.32534      -87.9977       87.9977       1057.86       1145.86    
   7  0.379937     -0.967749      -64.2550       64.2550       1039.39       1103.64    
   8  0.449606     -0.799384      -53.0762       53.0762       1076.81       1129.88    
   9  0.810725     -0.209826      -13.9317       13.9317       1061.57       1075.50    
  10  0.218977      -1.51879      -100.842       100.842       1082.37       1183.21    
  11  0.456613     -0.783919      -52.0493       52.0493       1145.34       1197.39    
  12  0.439289E-02  -5.42777      -360.384       360.384       1030.06       1390.45    
  13  0.710409     -0.341914      -22.7019       22.7019       992.393       1015.10    
  14  0.385315     -0.953695      -63.3219       63.3219       1042.84       1106.16    
  15  0.116701      -2.14814      -142.629       142.629       1186.97       1329.60    
  16  0.985237     -0.148728E-01 -0.987496      0.987496       1147.76       1148.75    
  17  0.856588     -0.154798      -10.2780       10.2780       1172.60       1182.88    
  18  0.155419      -1.86163      -123.605       123.605       1157.00       1280.60    
  19  0.257525      -1.35664      -90.0759       90.0759       1119.26       1209.34    
  20  0.548716     -0.600174      -39.8494       39.8494       1136.23       1176.08    
  21  0.589698     -0.528145      -35.0669       35.0669       1240.71       1275.78    
  22  0.884364     -0.122887      -8.15921       8.15921       1244.63       1252.79    
  23  0.871018E-01  -2.44068      -162.052       162.052       1207.13       1369.18    
  24  0.486795     -0.719912      -47.7995       47.7995       1211.72       1259.52    
  25  0.161417      -1.82376      -121.091       121.091       1217.14       1338.23    
  26  0.598774     -0.512871      -34.0527       34.0527       1250.82       1284.88    
  27  0.483527     -0.726647      -48.2467       48.2467       1115.73       1163.97    
  28  0.715961     -0.334130      -22.1850       22.1850       1193.97       1216.16    
  29  0.771801     -0.259029      -17.1985       17.1985       1281.30       1298.50    
  30  0.458713     -0.779330      -51.7446       51.7446       1238.38       1290.13    
  31  0.235181      -1.44740      -96.1021       96.1021       1286.40       1382.50    
  32  0.488220     -0.716988      -47.6054       47.6054       1226.27       1273.88    
  33  0.365473      -1.00656      -66.8321       66.8321       1303.01       1369.84    
  34  0.191311      -1.65386      -109.810       109.810       1332.88       1442.69    
  35  0.484999     -0.723609      -48.0450       48.0450       1300.22       1348.27    
  36  0.799086     -0.224286      -14.8918       14.8918       1347.44       1362.33    
  37  0.811458     -0.208923      -13.8717       13.8717       1241.02       1254.89    
  38  0.829885E-01  -2.48905      -165.264       165.264       1228.83       1394.09    
  39  0.731085     -0.313226      -20.7971       20.7971       1405.23       1426.03    
  40  0.854012     -0.157810      -10.4780       10.4780       1418.12       1428.60    
  41  0.699629     -0.357205      -23.7171       23.7171       1407.45       1431.16    
  42  0.918965     -0.845069E-01  -5.61094       5.61094       1389.10       1394.72    
  43  0.463498     -0.768952      -51.0556       51.0556       1447.80       1498.86    
  44  0.758690E-01  -2.57875      -171.219       171.219       1189.08       1360.30    
  45  0.577757     -0.548602      -36.4251       36.4251       1453.26       1489.68    
  46  0.897332     -0.108329      -7.19265       7.19265       1331.35       1338.54    
  47  0.522547     -0.649040      -43.0939       43.0939       1356.13       1399.23    
  48  0.408730E-01  -3.19729      -212.288       212.288       1412.16       1624.45    
  49  0.244793      -1.40734      -93.4423       93.4423       1407.55       1500.99    
  50  0.503867     -0.685443      -45.5109       45.5109       1439.42       1484.93    
  51  0.268075      -1.31649      -87.4100       87.4100       1437.49       1524.90    
  52  0.502965     -0.687236      -45.6299       45.6299       1485.87       1531.50    
  53  0.204120      -1.58905      -105.507       105.507       1463.91       1569.41    
  54  0.815323     -0.204171      -13.5562       13.5562       1407.76       1421.32    
  55  0.197358      -1.62274      -107.744       107.744       1506.58       1614.32    
  56  0.754254     -0.282026      -18.7255       18.7255       1536.88       1555.61    
  57  0.693043E-01  -2.66925      -177.228       177.228       1519.51       1696.73    
  58  0.913327     -0.906616E-01  -6.01960       6.01960       1436.49       1442.51    
  59  0.921558     -0.816897E-01  -5.42390       5.42390       1448.61       1454.04    
  60  0.383396     -0.958686      -63.6532       63.6532       1549.69       1613.35    
  61  0.641735     -0.443580      -29.4521       29.4521       1545.03       1574.48    
  62  0.380707     -0.965725      -64.1206       64.1206       1450.94       1515.06    
  63  0.877180E-01  -2.43363      -161.584       161.584       1555.06       1716.64    
  64  0.768830     -0.262886      -17.4547       17.4547       1560.83       1578.29    
  65  0.998270     -0.173121E-02 -0.114946      0.114946       1569.79       1569.90    
  66  0.504375     -0.684435      -45.4440       45.4440       1582.86       1628.30    
  67  0.789522     -0.236327      -15.6913       15.6913       1445.71       1461.40    
  68  0.182758E-01  -4.00218      -265.730       265.730       1627.70       1893.43    
  69  0.828868     -0.187695      -12.4622       12.4622       1527.51       1539.98    
  70  0.147499      -1.91393      -127.078       127.078       1683.61       1810.69    
  71  0.928056     -0.746629E-01  -4.95734       4.95734       1658.95       1663.91    
  72  0.575315     -0.552838      -36.7064       36.7064       1561.33       1598.03    
  73  0.634329     -0.455188      -30.2228       30.2228       1733.28       1763.50    
  74  0.245936      -1.40268      -93.1330       93.1330       919.160       1012.29    
loop,thermsimp(1:2)       85   4.34176       17.7415    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335       1437.32        129.66          0.69         30.55          0.72          0.05        161.66
Just calling func    0   0        161.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1437.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       85
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       86
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      334     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -72.7319       72.7319       984.147       1056.88    
   2  0.140144      -1.96508      -130.474       130.474       1005.15       1135.62    
   3  0.520913     -0.652172      -43.3018       43.3018       919.160       962.462    
   4  0.628337     -0.464678      -30.8529       30.8529       992.393       1023.25    
   5  0.203324      -1.59296      -105.766       105.766       1013.25       1119.01    
   6  0.481205     -0.731462      -48.5664       48.5664       1031.58       1080.15    
   7  0.948759     -0.526009E-01  -3.49251       3.49251       1061.57       1065.06    
   8  0.251825      -1.37902      -91.5618       91.5618       1068.11       1159.67    
   9  0.363806      -1.01114      -67.1356       67.1356       1039.39       1106.52    
  10  0.465077     -0.765552      -50.8298       50.8298       1042.84       1093.67    
  11  0.580920     -0.543143      -36.0627       36.0627       1076.81       1112.87    
  12  0.957129     -0.438167E-01  -2.90927       2.90927       1057.86       1060.77    
  13  0.345007      -1.06419      -70.6583       70.6583       1147.76       1218.42    
  14  0.177852E-01  -4.02939      -267.537       267.537       1115.73       1383.26    
  15  0.843779     -0.169864      -11.2784       11.2784       1136.23       1147.50    
  16  0.765452     -0.267288      -17.7470       17.7470       1172.60       1190.35    
  17  0.453925     -0.789824      -52.4414       52.4414       1082.37       1134.81    
  18  0.378234     -0.972243      -64.5533       64.5533       1145.34       1209.89    
  19  0.167312      -1.78790      -118.710       118.710       1119.26       1237.97    
  20  0.240345      -1.42568      -94.6598       94.6598       1193.97       1288.63    
  21  0.868226     -0.141303      -9.38201       9.38201       1244.63       1254.01    
  22  0.907002     -0.976102E-01  -6.48096       6.48096       1241.02       1247.50    
  23  0.433040     -0.836925      -55.5687       55.5687       1211.72       1267.29    
  24  0.291080      -1.23416      -81.9435       81.9435       1226.27       1308.22    
  25  0.391091     -0.938815      -62.3338       62.3338       1240.71       1303.04    
  26  0.541803     -0.612853      -40.6912       40.6912       1157.00       1197.69    
  27  0.494251     -0.704711      -46.7902       46.7902       1250.82       1297.61    
  28  0.617376     -0.482277      -32.0214       32.0214       1238.38       1270.41    
  29  0.919515     -0.839094E-01  -5.57128       5.57128       1281.30       1286.87    
  30  0.836216     -0.178868      -11.8762       11.8762       1186.97       1198.85    
  31  0.436173     -0.829716      -55.0901       55.0901       1217.14       1272.23    
  32  0.175211      -1.74176      -115.647       115.647       1331.35       1446.99    
  33  0.304297      -1.18975      -78.9951       78.9951       1300.22       1379.22    
  34  0.996125     -0.388259E-02 -0.257790      0.257790       1189.08       1189.34    
  35  0.146253      -1.92242      -127.641       127.641       1347.44       1475.08    
  36  0.110666      -2.20124      -146.154       146.154       1207.13       1353.29    
  37  0.481190E-01  -3.03408      -201.452       201.452       1303.01       1504.46    
  38  0.342728      -1.07082      -71.0983       71.0983       1286.40       1357.50    
  39  0.998409E-01  -2.30418      -152.989       152.989       1030.06       1183.05    
  40  0.509248     -0.674821      -44.8056       44.8056       1228.83       1273.63    
  41  0.974159     -0.261804E-01  -1.73829       1.73829       1389.10       1390.84    
  42  0.950347     -0.509279E-01  -3.38143       3.38143       1356.13       1359.52    
  43  0.333494      -1.09813      -72.9118       72.9118       1407.76       1480.68    
  44  0.914660     -0.892024E-01  -5.92271       5.92271       1405.23       1411.15    
  45  0.249678      -1.38758      -92.1305       92.1305       1418.12       1510.25    
  46  0.512508     -0.668440      -44.3819       44.3819       1407.45       1451.83    
  47  0.592185     -0.523937      -34.7875       34.7875       1436.49       1471.28    
  48  0.931089     -0.714008E-01  -4.74075       4.74075       1332.88       1337.62    
  49  0.638700     -0.448321      -29.7668       29.7668       1448.61       1478.38    
  50  0.563786     -0.573081      -38.0505       38.0505       1445.71       1483.76    
  51  0.136824      -1.98906      -132.066       132.066       1439.42       1571.49    
  52  0.806361     -0.215224      -14.2901       14.2901       1453.26       1467.55    
  53  0.106433      -2.24024      -148.744       148.744       1447.80       1596.54    
  54  0.637638     -0.449985      -29.8774       29.8774       1407.55       1437.42    
  55  0.677480     -0.389375      -25.8530       25.8530       1450.94       1476.79    
  56  0.533764     -0.627801      -41.6837       41.6837       1437.49       1479.17    
  57  0.879213     -0.128728      -8.54709       8.54709       1485.87       1494.42    
  58  0.260545E-01  -3.64756      -242.185       242.185       1527.51       1769.70    
  59  0.249338      -1.38895      -92.2210       92.2210       1536.88       1629.10    
  60  0.101288      -2.28979      -152.033       152.033       1463.91       1615.94    
  61  0.563390     -0.573782      -38.0970       38.0970       1569.79       1607.88    
  62  0.735149     -0.307682      -20.4290       20.4290       1545.03       1565.46    
  63  0.720819     -0.327367      -21.7359       21.7359       1560.83       1582.57    
  64  0.493868     -0.705487      -46.8418       46.8418       1561.33       1608.17    
  65  0.417909     -0.872492      -57.9303       57.9303       1549.69       1607.62    
  66  0.529854     -0.635153      -42.1718       42.1718       1506.58       1548.75    
  67  0.732047     -0.311910      -20.7097       20.7097       1412.16       1432.87    
  68  0.926465     -0.763785E-01  -5.07125       5.07125       1582.86       1587.93    
  69  0.948726     -0.526350E-01  -3.49477       3.49477       1658.95       1662.45    
  70  0.433699     -0.835404      -55.4677       55.4677       1519.51       1574.97    
  71  0.901840     -0.103319      -6.85998       6.85998       1555.06       1561.92    
  72  0.804136     -0.217987      -14.4736       14.4736       1733.28       1747.76    
  73  0.347489      -1.05702      -70.1824       70.1824       1683.61       1753.79    
  74  0.971723     -0.286843E-01  -1.90453       1.90453       1437.32       1439.23    
loop,thermsimp(1:2)       86   72.7319       130.474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336       1065.84        130.11          0.68         29.93          1.74          0.05        162.51
Just calling func    0   0        162.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1065.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       86
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       87
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      335     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -206.326       206.326       919.160       1125.49    
   2  0.682805     -0.381545      -25.3332       25.3332       992.393       1017.73    
   3  0.699780     -0.356989      -23.7028       23.7028       984.147       1007.85    
   4  0.515086     -0.663422      -44.0488       44.0488       1057.86       1101.91    
   5  0.402461     -0.910157      -60.4311       60.4311       1061.57       1122.00    
   6  0.652803     -0.426480      -28.3167       28.3167       1031.58       1059.90    
   7  0.483213     -0.727297      -48.2899       48.2899       1042.84       1091.13    
   8  0.873684     -0.135037      -8.96594       8.96594       1039.39       1048.35    
   9  0.142648      -1.94738      -129.299       129.299       1076.81       1206.10    
  10  0.844357     -0.169180      -11.2330       11.2330       1013.25       1024.48    
  11  0.154187      -1.86959      -124.134       124.134       1082.37       1206.50    
  12  0.437314E-01  -3.12969      -207.800       207.800       1005.15       1212.95    
  13  0.455393E-02  -5.39176      -357.993       357.993       1136.23       1494.22    
  14  0.236800      -1.44054      -95.6465       95.6465       1068.11       1163.76    
  15  0.660181     -0.415241      -27.5705       27.5705       1030.06       1057.63    
  16  0.652586     -0.426813      -28.3388       28.3388       1189.08       1217.42    
  17  0.153101      -1.87666      -124.603       124.603       1172.60       1297.21    
  18  0.753412     -0.283143      -18.7996       18.7996       1157.00       1175.80    
  19  0.240839      -1.42363      -94.5235       94.5235       1186.97       1281.50    
  20  0.684622     -0.378888      -25.1568       25.1568       1145.34       1170.49    
  21  0.243018      -1.41462      -93.9256       93.9256       1147.76       1241.69    
  22  0.815539     -0.203906      -13.5386       13.5386       1119.26       1132.80    
  23  0.589355     -0.528726      -35.1055       35.1055       1241.02       1276.13    
  24  0.243009      -1.41466      -93.9280       93.9280       1244.63       1338.56    
  25  0.821886     -0.196154      -13.0239       13.0239       1211.72       1224.75    
  26  0.261401      -1.34170      -89.0840       89.0840       1238.38       1327.47    
  27  0.571134     -0.560131      -37.1907       37.1907       1217.14       1254.33    
  28  0.406429E-01  -3.20293      -212.663       212.663       1228.83       1441.49    
  29  0.341463      -1.07451      -71.3438       71.3438       1281.30       1352.64    
  30  0.252643      -1.37578      -91.3467       91.3467       1193.97       1285.32    
  31  0.503366     -0.686439      -45.5770       45.5770       1250.82       1296.40    
  32  0.247804      -1.39512      -92.6306       92.6306       1240.71       1333.34    
  33  0.902392     -0.102706      -6.81929       6.81929       1226.27       1233.09    
  34  0.198330E-01  -3.92041      -260.301       260.301       1332.88       1593.18    
  35  0.695627     -0.362942      -24.0980       24.0980       1207.13       1231.23    
  36  0.833441     -0.182192      -12.0969       12.0969       1286.40       1298.50    
  37  0.720954     -0.327181      -21.7236       21.7236       1356.13       1377.86    
  38  0.155604      -1.86044      -123.527       123.527       1300.22       1423.75    
  39  0.496580E-01  -3.00260      -199.361       199.361       1115.73       1315.09    
  40  0.804644     -0.217356      -14.4316       14.4316       1389.10       1403.54    
  41  0.329241      -1.11097      -73.7640       73.7640       1405.23       1478.99    
  42  0.889596     -0.116988      -7.76758       7.76758       1412.16       1419.93    
  43  0.857341     -0.153920      -10.2197       10.2197       1407.55       1417.77    
  44  0.238258      -1.43440      -95.2389       95.2389       1437.32       1532.56    
  45  0.998437     -0.156448E-02 -0.103876      0.103876       1331.35       1331.45    
  46  0.280889      -1.26979      -84.3097       84.3097       1407.45       1491.76    
  47  0.518450     -0.656912      -43.6166       43.6166       1453.26       1496.87    
  48  0.348786      -1.05330      -69.9350       69.9350       1436.49       1506.43    
  49  0.250207      -1.38547      -91.9899       91.9899       1347.44       1439.43    
  50  0.442136     -0.816138      -54.1885       54.1885       1450.94       1505.13    
  51  0.881002     -0.126696      -8.41213       8.41213       1448.61       1457.03    
  52  0.903963     -0.100967      -6.70383       6.70383       1437.49       1444.19    
  53  0.227541      -1.48043      -98.2948       98.2948       1407.76       1506.06    
  54  0.468734     -0.757719      -50.3098       50.3098       1445.71       1496.02    
  55  0.622565E-01  -2.77649      -184.349       184.349       1485.87       1670.22    
  56  0.650607     -0.429850      -28.5405       28.5405       1303.01       1331.55    
  57  0.947139     -0.543094E-01  -3.60594       3.60594       1418.12       1421.73    
  58  0.942852     -0.588460E-01  -3.90716       3.90716       1506.58       1510.49    
  59  0.204603      -1.58668      -105.350       105.350       1555.06       1660.41    
  60  0.781809     -0.246145      -16.3431       16.3431       1545.03       1561.37    
  61  0.543108     -0.610447      -40.5314       40.5314       1439.42       1479.95    
  62  0.199157E-02  -6.21883      -412.908       412.908       1519.51       1932.41    
  63  0.867255     -0.142422      -9.45632       9.45632       1560.83       1570.29    
  64  0.846580     -0.166550      -11.0583       11.0583       1582.86       1593.92    
  65  0.267681      -1.31796      -87.5075       87.5075       1447.80       1535.31    
  66  0.656550E-01  -2.72334      -180.820       180.820       1549.69       1730.51    
  67  0.914706     -0.891526E-01  -5.91940       5.91940       1569.79       1575.71    
  68  0.177217      -1.73038      -114.891       114.891       1561.33       1676.22    
  69  0.973717     -0.266348E-01  -1.76845       1.76845       1463.91       1465.67    
  70  0.329699E-01  -3.41216      -226.555       226.555       1536.88       1763.44    
  71  0.242441E-01  -3.71958      -246.967       246.967       1658.95       1905.92    
  72  0.884493     -0.122740      -8.14949       8.14949       1733.28       1741.43    
  73  0.927939     -0.747892E-01  -4.96573       4.96573       1683.61       1688.58    
  74  0.378336E-01  -3.27456      -217.419       217.419       1065.84       1283.26    
loop,thermsimp(1:2)       87   206.326       25.3332    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        974.42        130.06          0.69         30.11          1.37          0.05        162.28
Just calling func    0   0        162.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    338       1228.88        129.91          0.68         29.72          1.23          0.04        161.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    974.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       87
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       88
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      337     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -49.9800       49.9800       984.147       1034.13    
   2  0.531040     -0.632917      -42.0234       42.0234       992.393       1034.42    
   3  0.592986E-01  -2.82517      -187.581       187.581       1013.25       1200.83    
   4  0.247694      -1.39556      -92.6602       92.6602       1039.39       1132.05    
   5  0.131832      -2.02623      -134.534       134.534       1030.06       1164.60    
   6  0.928797E-01  -2.37645      -157.788       157.788       1031.58       1189.37    
   7  0.638590     -0.448492      -29.7782       29.7782       1042.84       1072.61    
   8  0.220145      -1.51347      -100.489       100.489       1057.86       1158.35    
   9  0.764323     -0.268765      -17.8450       17.8450       1061.57       1079.42    
  10  0.223429      -1.49866      -99.5055       99.5055       919.160       1018.67    
  11  0.705665     -0.348615      -23.1467       23.1467       1119.26       1142.41    
  12  0.812667     -0.207434      -13.7729       13.7729       1068.11       1081.88    
  13  0.344167      -1.06663      -70.8202       70.8202       1145.34       1216.16    
  14  0.691720     -0.368573      -24.4719       24.4719       1157.00       1181.47    
  15  0.601584     -0.508189      -33.7419       33.7419       1076.81       1110.55    
  16  0.323598      -1.12825      -74.9118       74.9118       1082.37       1157.28    
  17  0.536181     -0.623284      -41.3838       41.3838       1005.15       1046.53    
  18  0.224445      -1.49412      -99.2043       99.2043       1189.08       1288.28    
  19  0.967837     -0.326916E-01  -2.17060       2.17060       1211.72       1213.90    
  20  0.982234     -0.179257E-01  -1.19020       1.19020       1207.13       1208.32    
  21  0.656459     -0.420894      -27.9458       27.9458       1226.27       1254.22    
  22  0.138036      -1.98024      -131.481       131.481       1147.76       1279.24    
  23  0.698821     -0.358360      -23.7938       23.7938       1217.14       1240.94    
  24  0.603237     -0.505446      -33.5598       33.5598       1241.02       1274.58    
  25  0.253585      -1.37205      -91.0994       91.0994       1186.97       1278.07    
  26  0.404885     -0.904153      -60.0324       60.0324       1065.84       1125.87    
  27  0.802083     -0.220543      -14.6432       14.6432       1193.97       1208.61    
  28  0.756447     -0.279123      -18.5327       18.5327       1250.82       1269.36    
  29  0.390929     -0.939231      -62.3614       62.3614       1172.60       1234.97    
  30  0.260757      -1.34417      -89.2478       89.2478       1286.40       1375.65    
  31  0.177681      -1.72776      -114.717       114.717       1115.73       1230.44    
  32  0.806362     -0.215223      -14.2900       14.2900       1238.38       1252.67    
  33  0.222380      -1.50337      -99.8179       99.8179       1331.35       1431.16    
  34  0.969986     -0.304736E-01  -2.02333       2.02333       1303.01       1305.03    
  35  0.417166     -0.874272      -58.0484       58.0484       1240.71       1298.76    
  36  0.212672      -1.54800      -102.782       102.782       1244.63       1347.41    
  37  0.141187      -1.95767      -129.982       129.982       1281.30       1411.28    
  38  0.750343     -0.287224      -19.0706       19.0706       1356.13       1375.21    
  39  0.628172     -0.464941      -30.8704       30.8704       1389.10       1419.97    
  40  0.466629     -0.762221      -50.6087       50.6087       1407.55       1458.16    
  41  0.120425      -2.11672      -140.543       140.543       1412.16       1552.71    
  42  0.179567      -1.71721      -114.016       114.016       1418.12       1532.14    
  43  0.209268      -1.56414      -103.853       103.853       1300.22       1404.08    
  44  0.730304E-01  -2.61688      -173.751       173.751       1347.44       1521.19    
  45  0.985392     -0.147157E-01 -0.977070      0.977070       1228.83       1229.80    
  46  0.726759E-01  -2.62175      -174.074       174.074       1437.49       1611.56    
  47  0.205943      -1.58016      -104.917       104.917       1448.61       1553.53    
  48  0.198791      -1.61550      -107.263       107.263       1463.91       1571.17    
  49  0.320500      -1.13787      -75.5507       75.5507       1405.23       1480.78    
  50  0.911267     -0.929191E-01  -6.16949       6.16949       1439.42       1445.59    
  51  0.153842      -1.87183      -124.283       124.283       1407.45       1531.73    
  52  0.152265      -1.88213      -124.967       124.967       1136.23       1261.19    
  53  0.396303     -0.925575      -61.4548       61.4548       1445.71       1507.17    
  54  0.964537     -0.361075E-01  -2.39740       2.39740       1453.26       1455.65    
  55  0.259986      -1.34713      -89.4442       89.4442       1450.94       1540.38    
  56  0.710828     -0.341325      -22.6627       22.6627       1407.76       1430.43    
  57  0.189878E-01  -3.96396      -263.192       263.192       1436.49       1699.68    
  58  0.960744     -0.400468E-01  -2.65896       2.65896       1506.58       1509.24    
  59  0.514017     -0.665499      -44.1867       44.1867       1437.32       1481.51    
  60  0.507688     -0.677888      -45.0093       45.0093       1447.80       1492.81    
  61  0.915765     -0.879957E-01  -5.84259       5.84259       1545.03       1550.87    
  62  0.648043     -0.433798      -28.8026       28.8026       1560.83       1589.63    
  63  0.395249     -0.928240      -61.6317       61.6317       1569.79       1631.42    
  64  0.604600     -0.503188      -33.4098       33.4098       1332.88       1366.29    
  65  0.348789      -1.05329      -69.9344       69.9344       1582.86       1652.79    
  66  0.497548     -0.698064      -46.3489       46.3489       1555.06       1601.41    
  67  0.240711E-01  -3.72675      -247.442       247.442       1485.87       1733.31    
  68  0.745753     -0.293361      -19.4781       19.4781       1561.33       1580.81    
  69  0.195047      -1.63452      -108.526       108.526       1683.61       1792.14    
  70  0.792585     -0.232456      -15.4342       15.4342       1549.69       1565.13    
  71  0.411313     -0.888400      -58.9865       58.9865       1733.28       1792.27    
  72  0.574995     -0.553393      -36.7433       36.7433       1536.88       1573.63    
  73  0.631639     -0.459437      -30.5049       30.5049       1658.95       1689.46    
  74  0.528323     -0.638048      -42.3640       42.3640       974.423       1016.79    
loop,thermsimp(1:2)       88   49.9800       42.0234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339       1676.46        129.68          0.68         30.19          1.72          0.04        162.32
Just calling func    0   0        162.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1676.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       88
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       89
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      338     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -69.6344       69.6344       974.423       1044.06    
   2  0.650675     -0.429745      -28.5335       28.5335       919.160       947.693    
   3  0.849247     -0.163405      -10.8495       10.8495       984.147       994.996    
   4  0.910703     -0.935381E-01  -6.21059       6.21059       992.393       998.604    
   5  0.188892      -1.66658      -110.655       110.655       1005.15       1115.80    
   6  0.256564      -1.36038      -90.3240       90.3240       1042.84       1133.16    
   7  0.465488E-01  -3.06725      -203.654       203.654       1061.57       1265.23    
   8  0.824855     -0.192548      -12.7845       12.7845       1068.11       1080.90    
   9  0.730565     -0.313937      -20.8442       20.8442       1076.81       1097.65    
  10  0.888077     -0.118697      -7.88103       7.88103       1065.84       1073.72    
  11  0.898172     -0.107394      -7.13057       7.13057       1039.39       1046.52    
  12  0.314974      -1.15527      -76.7054       76.7054       1119.26       1195.97    
  13  0.247979      -1.39441      -92.5837       92.5837       1082.37       1174.95    
  14  0.330032E-01  -3.41115      -226.488       226.488       1057.86       1284.35    
  15  0.570783E-01  -2.86333      -190.115       190.115       1030.06       1220.18    
  16  0.694187     -0.365014      -24.2356       24.2356       1157.00       1181.23    
  17  0.314834      -1.15571      -76.7348       76.7348       1031.58       1108.31    
  18  0.917621     -0.859711E-01  -5.70816       5.70816       1013.25       1018.95    
  19  0.613858     -0.487991      -32.4008       32.4008       1207.13       1239.53    
  20  0.744084E-01  -2.59819      -172.510       172.510       1193.97       1366.48    
  21  0.454198     -0.789221      -52.4014       52.4014       1211.72       1264.13    
  22  0.118203E-01  -4.43793      -294.662       294.662       1145.34       1440.00    
  23  0.746996     -0.291695      -19.3675       19.3675       1228.83       1248.19    
  24  0.416160     -0.876686      -58.2087       58.2087       1115.73       1173.94    
  25  0.339178E-01  -3.38381      -224.673       224.673       1172.60       1397.28    
  26  0.824080     -0.193487      -12.8468       12.8468       1217.14       1229.99    
  27  0.589652     -0.528223      -35.0721       35.0721       1238.38       1273.46    
  28  0.680293     -0.385231      -25.5779       25.5779       1226.27       1251.85    
  29  0.864872E-01  -2.44776      -162.522       162.522       1136.23       1298.75    
  30  0.672988     -0.396027      -26.2948       26.2948       1250.82       1277.12    
  31  0.797049E-01  -2.52942      -167.944       167.944       1241.02       1408.97    
  32  0.831708     -0.184273      -12.2351       12.2351       1186.97       1199.21    
  33  0.280253E-01  -3.57465      -237.343       237.343       1147.76       1385.11    
  34  0.131717      -2.02710      -134.592       134.592       1189.08       1323.67    
  35  0.343675      -1.06806      -70.9152       70.9152       1240.71       1311.63    
  36  0.280745      -1.27031      -84.3439       84.3439       1303.01       1387.35    
  37  0.322275      -1.13235      -75.1839       75.1839       1244.63       1319.82    
  38  0.769830E-01  -2.56417      -170.252       170.252       1332.88       1503.13    
  39  0.851798     -0.160406      -10.6503       10.6503       1356.13       1366.78    
  40  0.864683     -0.145392      -9.65348       9.65348       1286.40       1296.06    
  41  0.157880      -1.84592      -122.562       122.562       1300.22       1422.79    
  42  0.371895     -0.989143      -65.6754       65.6754       1281.30       1346.97    
  43  0.861425     -0.149167      -9.90415       9.90415       1389.10       1399.01    
  44  0.778275E-01  -2.55326      -169.527       169.527       1407.76       1577.29    
  45  0.450106     -0.798272      -53.0023       53.0023       1331.35       1384.35    
  46  0.188928      -1.66639      -110.642       110.642       1439.42       1550.06    
  47  0.225391      -1.48992      -98.9251       98.9251       1453.26       1552.18    
  48  0.814689     -0.204949      -13.6078       13.6078       1407.55       1421.15    
  49  0.556109     -0.586791      -38.9607       38.9607       1405.23       1444.19    
  50  0.860351     -0.150415      -9.98702       9.98702       1437.32       1447.31    
  51  0.124594      -2.08269      -138.283       138.283       1447.80       1586.08    
  52  0.924630     -0.783615E-01  -5.20291       5.20291       1445.71       1450.91    
  53  0.463685     -0.768549      -51.0289       51.0289       1506.58       1557.61    
  54  0.719654     -0.328985      -21.8434       21.8434       1347.44       1369.28    
  55  0.740445     -0.300503      -19.9523       19.9523       1407.45       1427.40    
  56  0.948188     -0.532020E-01  -3.53242       3.53242       1418.12       1421.65    
  57  0.174315      -1.74689      -115.987       115.987       1450.94       1566.93    
  58  0.436138     -0.829795      -55.0954       55.0954       1545.03       1600.12    
  59  0.442627     -0.815027      -54.1148       54.1148       1412.16       1466.28    
  60  0.781531     -0.246500      -16.3667       16.3667       1448.61       1464.98    
  61  0.233219E-01  -3.75836      -249.541       249.541       1549.69       1799.24    
  62  0.529855     -0.635152      -42.1717       42.1717       1463.91       1506.08    
  63  0.415693     -0.877807      -58.2832       58.2832       1536.88       1595.17    
  64  0.655864     -0.421801      -28.0061       28.0061       1561.33       1589.33    
  65  0.932327     -0.700720E-01  -4.65252       4.65252       1560.83       1565.48    
  66  0.570322     -0.561554      -37.2851       37.2851       1555.06       1592.35    
  67  0.969693     -0.307757E-01  -2.04340       2.04340       1437.49       1439.53    
  68  0.707842     -0.345534      -22.9422       22.9422       1569.79       1592.73    
  69  0.971476E-01  -2.33152      -154.805       154.805       1582.86       1737.66    
  70  0.807879     -0.213342      -14.1652       14.1652       1658.95       1673.12    
  71  0.261134      -1.34272      -89.1518       89.1518       1436.49       1525.64    
  72  0.395767     -0.926929      -61.5447       61.5447       1485.87       1547.41    
  73  0.641665     -0.443688      -29.4593       29.4593       1683.61       1713.07    
  74  0.581613     -0.541950      -35.9835       35.9835       1676.46       1712.45    
loop,thermsimp(1:2)       89   69.6344       28.5335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340       1044.86        129.80          0.65         29.66          2.32          0.04        162.46
Just calling func    0   0        162.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1044.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       89
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       90
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      339     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -134.642       134.642       919.160       1053.80    
   2  0.314760      -1.15594      -76.7504       76.7504       984.147       1060.90    
   3  0.748375     -0.289851      -19.2450       19.2450       992.393       1011.64    
   4  0.632472     -0.458119      -30.4174       30.4174       1013.25       1043.66    
   5  0.677472     -0.389387      -25.8538       25.8538       974.423       1000.28    
   6  0.433475     -0.835921      -55.5020       55.5020       1039.39       1094.89    
   7  0.458976     -0.778758      -51.7066       51.7066       1065.84       1117.54    
   8  0.411427E-02  -5.49329      -364.734       364.734       1068.11       1432.85    
   9  0.904989     -0.998322E-01  -6.62849       6.62849       1076.81       1083.43    
  10  0.480311     -0.733322      -48.6899       48.6899       1031.58       1080.27    
  11  0.277870      -1.28060      -85.0272       85.0272       1005.15       1090.17    
  12  0.958372     -0.425196E-01  -2.82315       2.82315       1042.84       1045.66    
  13  0.321639      -1.13432      -75.3149       75.3149       1115.73       1191.04    
  14  0.562333     -0.575660      -38.2217       38.2217       1082.37       1120.59    
  15  0.665565     -0.407119      -27.0312       27.0312       1157.00       1184.03    
  16  0.307614      -1.17891      -78.2753       78.2753       1119.26       1197.54    
  17  0.504790E-01  -2.98620      -198.273       198.273       1186.97       1385.24    
  18  0.361959      -1.01622      -67.4736       67.4736       1030.06       1097.54    
  19  0.470787     -0.753350      -50.0197       50.0197       1217.14       1267.16    
  20  0.312221      -1.16404      -77.2881       77.2881       1207.13       1284.42    
  21  0.156792      -1.85283      -123.021       123.021       1228.83       1351.85    
  22  0.445216     -0.809196      -53.7276       53.7276       1226.27       1280.00    
  23  0.999492     -0.508321E-03 -0.337507E-01  0.337507E-01   1211.72       1211.76    
  24  0.167067      -1.78936      -118.807       118.807       1061.57       1180.38    
  25  0.435083     -0.832219      -55.2563       55.2563       1238.38       1293.64    
  26  0.110403      -2.20362      -146.312       146.312       1250.82       1397.14    
  27  0.704194     -0.350701      -23.2853       23.2853       1057.86       1081.15    
  28  0.767816     -0.264205      -17.5423       17.5423       1286.40       1303.94    
  29  0.231293      -1.46407      -97.2088       97.2088       1136.23       1233.44    
  30  0.965513     -0.350953E-01  -2.33020       2.33020       1240.71       1243.04    
  31  0.674440     -0.393873      -26.1517       26.1517       1244.63       1270.78    
  32  0.248626      -1.39181      -92.4109       92.4109       1189.08       1281.49    
  33  0.461218     -0.773884      -51.3831       51.3831       1281.30       1332.68    
  34  0.778910     -0.249859      -16.5897       16.5897       1193.97       1210.56    
  35  0.665530     -0.407172      -27.0347       27.0347       1356.13       1383.17    
  36  0.383296     -0.958947      -63.6705       63.6705       1347.44       1411.11    
  37  0.492311     -0.708645      -47.0514       47.0514       1331.35       1378.40    
  38  0.631911     -0.459006      -30.4763       30.4763       1147.76       1178.24    
  39  0.150454E-01  -4.19668      -278.644       278.644       1303.01       1581.65    
  40  0.958677     -0.422006E-01  -2.80196       2.80196       1172.60       1175.41    
  41  0.411899     -0.886977      -58.8920       58.8920       1389.10       1448.00    
  42  0.466999     -0.761428      -50.5560       50.5560       1241.02       1291.58    
  43  0.622674     -0.473731      -31.4540       31.4540       1407.55       1439.00    
  44  0.497710     -0.697737      -46.3272       46.3272       1418.12       1464.45    
  45  0.763352E-01  -2.57262      -170.813       170.813       1300.22       1471.04    
  46  0.192360      -1.64839      -109.447       109.447       1407.45       1516.89    
  47  0.444368     -0.811101      -53.8541       53.8541       1437.49       1491.34    
  48  0.617268     -0.482452      -32.0331       32.0331       1145.34       1177.37    
  49  0.898554     -0.106968      -7.10228       7.10228       1405.23       1412.33    
  50  0.382850     -0.960111      -63.7479       63.7479       1437.32       1501.07    
  51  0.769319     -0.262250      -17.4124       17.4124       1445.71       1463.12    
  52  0.356805      -1.03057      -68.4258       68.4258       1448.61       1517.04    
  53  0.159449E-01  -4.13862      -274.789       274.789       1412.16       1686.95    
  54  0.879661     -0.128218      -8.51323       8.51323       1332.88       1341.39    
  55  0.413677     -0.882671      -58.6061       58.6061       1463.91       1522.51    
  56  0.332125      -1.10224      -73.1850       73.1850       1436.49       1509.68    
  57  0.963873     -0.367956E-01  -2.44309       2.44309       1485.87       1488.31    
  58  0.440660     -0.819481      -54.4105       54.4105       1439.42       1493.83    
  59  0.968287     -0.322271E-01  -2.13976       2.13976       1453.26       1455.39    
  60  0.174603      -1.74524      -115.878       115.878       1506.58       1622.46    
  61  0.915676E-01  -2.39068      -158.732       158.732       1560.83       1719.56    
  62  0.882563     -0.124926      -8.29460       8.29460       1450.94       1459.23    
  63  0.504296     -0.684592      -45.4544       45.4544       1407.76       1453.22    
  64  0.877119     -0.131112      -8.70536       8.70536       1447.80       1456.51    
  65  0.703997     -0.350981      -23.3039       23.3039       1561.33       1584.63    
  66  0.349323      -1.05176      -69.8329       69.8329       1555.06       1624.89    
  67  0.417707     -0.872976      -57.9624       57.9624       1569.79       1627.75    
  68  0.442862E-01  -3.11708      -206.963       206.963       1536.88       1743.85    
  69  0.135627      -1.99785      -132.650       132.650       1545.03       1677.68    
  70  0.684853     -0.378551      -25.1344       25.1344       1658.95       1684.09    
  71  0.191848      -1.65105      -109.624       109.624       1676.46       1786.09    
  72  0.273174      -1.29765      -86.1589       86.1589       1683.61       1769.77    
  73  0.153744      -1.87246      -124.325       124.325       1582.86       1707.18    
  74  0.204708      -1.58617      -105.316       105.316       1044.86       1150.17    
loop,thermsimp(1:2)       90   134.642       76.7504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341       1695.47        129.50          0.64         30.03          2.09          0.04        162.29
Just calling func    0   0        162.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    1695.5        2.556     -1.187      3.769     -100.0     0.8867    
                      -1.119      2.088     -100.0      2.839      1.576    
                     -0.2288E-01 0.4083      2.009      0.000     0.7496    
                      -1.135     -20.00      0.000      0.000    -0.4347E-01

                      -2.761      5617.     0.1119E+05 -647.2     -1451.    
                      -3.651     -6.495     -5.183     -15.33     -5.168    
                      -12.53     -3.073     -1786.      0.000     -647.6    

                      -1057.      4385.      1962.      2195.      3422.    
                      -3519.    -0.1685    -0.3339      0.000    -0.2330    
                     -0.2429    -0.3973    -0.2743    -0.2996    -0.2745    

                     -0.7139     -1.743      1.382    -0.2072E-01-0.9659E-02
                      0.8541E-01-0.1572E-01-0.1017    -0.1336    -0.4646E-02
                     -0.2517    -0.8272E-01-0.4070     -2.162      1.382    

                      -1.718    -0.6127     0.1500E+05 0.1500E+05  0.000    
                       0.000      8.994      8.857      0.000    -0.2449E-04
                      0.2449     0.3881      9.181      8.953    -0.1869E+05

                      0.3290E-03 0.4009     0.3581      9.721      9.158    
                      -9553.    -0.1575E-03 -1.116     0.2944      9.414    
                       9.271     -4051.     0.1172E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1695.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       90
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       91
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      340     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01  -5.50902       5.50902       974.423       979.932    
   2  0.393393     -0.932946      -61.9442       61.9442       992.393       1054.34    
   3  0.317218      -1.14817      -76.2340       76.2340       1013.25       1089.48    
   4  0.324247      -1.12625      -74.7788       74.7788       1042.84       1117.62    
   5  0.515746E-01  -2.96473      -196.847       196.847       919.160       1116.01    
   6  0.143224      -1.94335      -129.031       129.031       984.147       1113.18    
   7  0.512136     -0.669164      -44.4300       44.4300       1031.58       1076.01    
   8  0.993896     -0.612239E-02 -0.406504      0.406504       1057.86       1058.27    
   9  0.440900     -0.818937      -54.3744       54.3744       1076.81       1131.18    
  10  0.861233     -0.149390      -9.91897       9.91897       1005.15       1015.07    
  11  0.690005     -0.371056      -24.6368       24.6368       1039.39       1064.03    
  12  0.192792      -1.64614      -109.298       109.298       1030.06       1139.36    
  13  0.975175     -0.251388E-01  -1.66912       1.66912       1065.84       1067.51    
  14  0.595327E-01  -2.82123      -187.319       187.319       1082.37       1269.69    
  15  0.142661      -1.94729      -129.293       129.293       1044.86       1174.15    
  16  0.141610      -1.95468      -129.783       129.783       1172.60       1302.39    
  17  0.976591     -0.236872E-01  -1.57275       1.57275       1145.34       1146.91    
  18  0.894748     -0.111213      -7.38417       7.38417       1147.76       1155.15    
  19  0.747310     -0.291275      -19.3396       19.3396       1061.57       1080.91    
  20  0.434887     -0.832670      -55.2862       55.2862       1157.00       1212.28    
  21  0.673581     -0.395146      -26.2363       26.2363       1115.73       1141.96    
  22  0.624944     -0.470094      -31.2125       31.2125       1119.26       1150.48    
  23  0.617967     -0.481321      -31.9579       31.9579       1193.97       1225.93    
  24  0.659853     -0.415739      -27.6035       27.6035       1211.72       1239.33    
  25  0.963159E-01  -2.34012      -155.376       155.376       1136.23       1291.60    
  26  0.179190      -1.71931      -114.156       114.156       1240.71       1354.87    
  27  0.251042      -1.38213      -91.7686       91.7686       1217.14       1308.91    
  28  0.116711      -2.14806      -142.623       142.623       1244.63       1387.25    
  29  0.890376     -0.116112      -7.70939       7.70939       1226.27       1233.98    
  30  0.880065E-02  -4.73293      -314.249       314.249       1189.08       1503.33    
  31  0.613810     -0.488070      -32.4061       32.4061       1207.13       1239.54    
  32  0.960436E-01  -2.34295      -155.563       155.563       1241.02       1396.59    
  33  0.768907E-02  -4.86796      -323.214       323.214       1238.38       1561.60    
  34  0.316163      -1.15150      -76.4551       76.4551       1286.40       1362.86    
  35  0.195769      -1.63082      -108.280       108.280       1281.30       1389.58    
  36  0.813020     -0.207000      -13.7440       13.7440       1332.88       1346.62    
  37  0.578245     -0.547758      -36.3691       36.3691       1228.83       1265.19    
  38  0.711511     -0.340365      -22.5990       22.5990       1331.35       1353.95    
  39  0.565886     -0.569362      -37.8035       37.8035       1356.13       1393.94    
  40  0.874556     -0.134039      -8.89970       8.89970       1186.97       1195.87    
  41  0.335685      -1.09158      -72.4769       72.4769       1250.82       1323.30    
  42  0.861776     -0.148759      -9.87708       9.87708       1347.44       1357.31    
  43  0.634500     -0.454918      -30.2049       30.2049       1405.23       1435.43    
  44  0.211879      -1.55174      -103.030       103.030       1068.11       1171.14    
  45  0.789454     -0.236414      -15.6970       15.6970       1407.55       1423.24    
  46  0.726316E-01  -2.62235      -174.115       174.115       1389.10       1563.22    
  47  0.344022      -1.06705      -70.8482       70.8482       1407.76       1478.61    
  48  0.367544      -1.00091      -66.4569       66.4569       1453.26       1519.71    
  49  0.634223     -0.455355      -30.2339       30.2339       1447.80       1478.03    
  50  0.462643     -0.770799      -51.1782       51.1782       1450.94       1502.12    
  51  0.904061     -0.100859      -6.69664       6.69664       1445.71       1452.41    
  52  0.183754      -1.69416      -112.486       112.486       1418.12       1530.61    
  53  0.214369      -1.54005      -102.254       102.254       1300.22       1402.48    
  54  0.515075     -0.663442      -44.0501       44.0501       1485.87       1529.92    
  55  0.173268      -1.75291      -116.387       116.387       1437.49       1553.88    
  56  0.788225     -0.237971      -15.8004       15.8004       1439.42       1455.22    
  57  0.657874     -0.418741      -27.8029       27.8029       1437.32       1465.13    
  58  0.262790      -1.33640      -88.7319       88.7319       1436.49       1525.22    
  59  0.806843     -0.214626      -14.2504       14.2504       1407.45       1421.70    
  60  0.121073      -2.11136      -140.187       140.187       1448.61       1588.80    
  61  0.928422     -0.742690E-01  -4.93119       4.93119       1463.91       1468.84    
  62  0.971911     -0.284914E-01  -1.89173       1.89173       1303.01       1304.90    
  63  0.167455      -1.78704      -118.653       118.653       1561.33       1679.98    
  64  0.280629E-01  -3.57331      -237.255       237.255       1506.58       1743.84    
  65  0.668523E-01  -2.70527      -179.620       179.620       1555.06       1734.68    
  66  0.714939     -0.335559      -22.2799       22.2799       1569.79       1592.07    
  67  0.990226     -0.982180E-02 -0.652131      0.652131       1545.03       1545.68    
  68  0.229020      -1.47395      -97.8646       97.8646       1658.95       1756.82    
  69  0.130543      -2.03605      -135.186       135.186       1412.16       1547.35    
  70  0.520653     -0.652672      -43.3350       43.3350       1582.86       1626.19    
  71  0.338340      -1.08370      -71.9539       71.9539       1560.83       1632.79    
  72  0.518446     -0.656920      -43.6171       43.6171       1536.88       1580.50    
  73  0.307066      -1.18069      -78.3936       78.3936       1683.61       1762.01    
  74  0.724459     -0.322330      -21.4016       21.4016       1695.47       1716.87    
loop,thermsimp(1:2)       91   5.50902       61.9442    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342       1279.80        129.29          0.67         30.27          1.25          0.04        161.51
Just calling func    0   0        161.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1279.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       91
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       92
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      341     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -76.9253       76.9253       974.423       1051.35    
   2  0.484866     -0.723883      -48.0631       48.0631       1005.15       1053.21    
   3  0.743257     -0.296713      -19.7007       19.7007       992.393       1012.09    
   4  0.476659     -0.740953      -49.1966       49.1966       1057.86       1107.06    
   5  0.895662E-01  -2.41278      -160.200       160.200       1039.39       1199.59    
   6  0.100541      -2.29719      -152.525       152.525       1065.84       1218.36    
   7  0.394309     -0.930621      -61.7898       61.7898       1031.58       1093.37    
   8  0.856201     -0.155250      -10.3080       10.3080       1061.57       1071.88    
   9  0.903325     -0.101673      -6.75072       6.75072       1013.25       1020.00    
  10  0.849389     -0.163238      -10.8384       10.8384       984.147       994.985    
  11  0.245876      -1.40293      -93.1494       93.1494       919.160       1012.31    
  12  0.535664     -0.624247      -41.4477       41.4477       1042.84       1084.28    
  13  0.509317     -0.674685      -44.7966       44.7966       1076.81       1121.60    
  14  0.103141      -2.27166      -150.830       150.830       1030.06       1180.89    
  15  0.822327     -0.195617      -12.9882       12.9882       1115.73       1128.71    
  16  0.293454      -1.22603      -81.4041       81.4041       1145.34       1226.74    
  17  0.610098E-01  -2.79672      -185.692       185.692       1119.26       1304.95    
  18  0.467864E-01  -3.06216      -203.316       203.316       1147.76       1351.08    
  19  0.888641     -0.118062      -7.83886       7.83886       1068.11       1075.95    
  20  0.371769     -0.989482      -65.6980       65.6980       1044.86       1110.55    
  21  0.770202     -0.261103      -17.3362       17.3362       1186.97       1204.31    
  22  0.752967E-01  -2.58632      -171.722       171.722       1157.00       1328.72    
  23  0.787365E-01  -2.54165      -168.756       168.756       1193.97       1362.73    
  24  0.516026     -0.661597      -43.9276       43.9276       1226.27       1270.20    
  25  0.133613      -2.01281      -133.643       133.643       1211.72       1345.37    
  26  0.705575     -0.348742      -23.1552       23.1552       1207.13       1230.29    
  27  0.747326     -0.291254      -19.3382       19.3382       1228.83       1248.16    
  28  0.941066E-01  -2.36333      -156.916       156.916       1082.37       1239.29    
  29  0.243001      -1.41469      -93.9302       93.9302       1136.23       1230.16    
  30  0.186020      -1.68190      -111.672       111.672       1172.60       1284.28    
  31  0.707073     -0.346621      -23.0144       23.0144       1303.01       1326.02    
  32  0.820399     -0.197964      -13.1441       13.1441       1217.14       1230.29    
  33  0.169787E-01  -4.07580      -270.618       270.618       1250.82       1521.44    
  34  0.196118      -1.62904      -108.162       108.162       1332.88       1441.04    
  35  0.910420E-01  -2.39643      -159.114       159.114       1331.35       1490.46    
  36  0.101963      -2.28314      -151.592       151.592       1240.71       1392.30    
  37  0.816143     -0.203166      -13.4894       13.4894       1347.44       1360.93    
  38  0.921931     -0.812847E-01  -5.39700       5.39700       1286.40       1291.80    
  39  0.867385     -0.142273      -9.44638       9.44638       1244.63       1254.08    
  40  0.534867     -0.625737      -41.5467       41.5467       1281.30       1322.85    
  41  0.354961      -1.03575      -68.7699       68.7699       1356.13       1424.90    
  42  0.707205     -0.346435      -23.0020       23.0020       1241.02       1264.02    
  43  0.341296      -1.07501      -71.3764       71.3764       1300.22       1371.60    
  44  0.615332     -0.485594      -32.2417       32.2417       1407.45       1439.69    
  45  0.100325      -2.29934      -152.668       152.668       1407.55       1560.21    
  46  0.218012      -1.52321      -101.135       101.135       1405.23       1506.36    
  47  0.346044      -1.06119      -70.4590       70.4590       1445.71       1516.17    
  48  0.313706      -1.15930      -76.9732       76.9732       1439.42       1516.39    
  49  0.884226     -0.123043      -8.16959       8.16959       1437.32       1445.49    
  50  0.562231     -0.575842      -38.2338       38.2338       1463.91       1502.14    
  51  0.208749      -1.56662      -104.018       104.018       1447.80       1551.82    
  52  0.553752     -0.591038      -39.2428       39.2428       1407.76       1447.01    
  53  0.389358     -0.943257      -62.6288       62.6288       1450.94       1513.57    
  54  0.290822      -1.23504      -82.0023       82.0023       1189.08       1271.08    
  55  0.592574     -0.523280      -34.7439       34.7439       1453.26       1488.00    
  56  0.816972     -0.202151      -13.4221       13.4221       1436.49       1449.91    
  57  0.674491     -0.393797      -26.1467       26.1467       1485.87       1512.02    
  58  0.136892      -1.98856      -132.033       132.033       1418.12       1550.15    
  59  0.783273     -0.244273      -16.2189       16.2189       1545.03       1561.25    
  60  0.896165     -0.109631      -7.27907       7.27907       1412.16       1419.44    
  61  0.268163      -1.31616      -87.3882       87.3882       1437.49       1524.88    
  62  0.773898     -0.256315      -17.0184       17.0184       1238.38       1255.40    
  63  0.929489     -0.731207E-01  -4.85495       4.85495       1389.10       1393.96    
  64  0.588680     -0.529872      -35.1815       35.1815       1536.88       1572.07    
  65  0.234390      -1.45077      -96.3256       96.3256       1448.61       1544.94    
  66  0.471928     -0.750929      -49.8589       49.8589       1569.79       1619.65    
  67  0.487657     -0.718143      -47.6820       47.6820       1582.86       1630.54    
  68  0.669180     -0.401702      -26.6715       26.6715       1560.83       1587.50    
  69  0.781256     -0.246852      -16.3901       16.3901       1561.33       1577.72    
  70  0.781840     -0.246106      -16.3405       16.3405       1695.47       1711.81    
  71  0.688901     -0.372658      -24.7431       24.7431       1555.06       1579.80    
  72  0.204580      -1.58679      -105.357       105.357       1506.58       1611.94    
  73  0.384240     -0.956488      -63.5073       63.5073       1658.95       1722.46    
  74  0.583463     -0.538775      -35.7727       35.7727       1279.80       1315.57    
loop,thermsimp(1:2)       92   76.9253       48.0631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343       1394.24        129.68          0.66         29.93          1.39          0.05        161.71
Just calling func    0   0        161.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1394.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       92
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       93
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      342     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -335.162       335.162       984.147       1319.31    
   2  0.977343     -0.229176E-01  -1.52165       1.52165       992.393       993.915    
   3  0.515611     -0.662402      -43.9811       43.9811       919.160       963.141    
   4  0.985018     -0.150949E-01  -1.00225       1.00225       1013.25       1014.25    
   5  0.909744E-01  -2.39718      -159.164       159.164       974.423       1133.59    
   6  0.163485      -1.81103      -120.246       120.246       1005.15       1125.39    
   7  0.709610     -0.343039      -22.7765       22.7765       1061.57       1084.35    
   8  0.639309     -0.447368      -29.7036       29.7036       1068.11       1097.81    
   9  0.500633     -0.691882      -45.9384       45.9384       1042.84       1088.77    
  10  0.623218     -0.472859      -31.3961       31.3961       1031.58       1062.98    
  11  0.974620     -0.257075E-01  -1.70688       1.70688       1057.86       1059.57    
  12  0.940866     -0.609540E-01  -4.04712       4.04712       1044.86       1048.90    
  13  0.268848      -1.31361      -87.2187       87.2187       1076.81       1164.02    
  14  0.131404      -2.02948      -134.750       134.750       1115.73       1250.48    
  15  0.242045      -1.41863      -94.1920       94.1920       1030.06       1124.26    
  16  0.333489      -1.09815      -72.9129       72.9129       1039.39       1112.30    
  17  0.540917     -0.614489      -40.7998       40.7998       1186.97       1227.77    
  18  0.935945     -0.661981E-01  -4.39531       4.39531       1065.84       1070.23    
  19  0.948265     -0.531218E-01  -3.52709       3.52709       1145.34       1148.86    
  20  0.306672      -1.18198      -78.4790       78.4790       1136.23       1214.71    
  21  0.674766E-01  -2.69597      -179.003       179.003       1217.14       1396.15    
  22  0.304885      -1.18782      -78.8670       78.8670       1207.13       1286.00    
  23  0.987276     -0.128055E-01 -0.850235      0.850235       1082.37       1083.22    
  24  0.866309     -0.143514      -9.52880       9.52880       1228.83       1238.35    
  25  0.325072      -1.12371      -74.6100       74.6100       1244.63       1319.24    
  26  0.882651     -0.124826      -8.28797       8.28797       1238.38       1246.67    
  27  0.608994E-02  -5.10112      -338.695       338.695       1241.02       1579.72    
  28  0.956776     -0.441859E-01  -2.93378       2.93378       1226.27       1229.21    
  29  0.680690E-01  -2.68723      -178.422       178.422       1189.08       1367.50    
  30  0.870194     -0.139039      -9.23167       9.23167       1172.60       1181.84    
  31  0.154954      -1.86463      -123.804       123.804       1286.40       1410.21    
  32  0.533144     -0.628963      -41.7608       41.7608       1119.26       1161.02    
  33  0.848128     -0.164724      -10.9371       10.9371       1279.80       1290.74    
  34  0.302343E-01  -3.49878      -232.306       232.306       1281.30       1513.60    
  35  0.670768     -0.399332      -26.5142       26.5142       1303.01       1329.52    
  36  0.575709     -0.552152      -36.6609       36.6609       1157.00       1193.66    
  37  0.961243     -0.395278E-01  -2.62450       2.62450       1211.72       1214.35    
  38  0.174287      -1.74705      -115.998       115.998       1147.76       1263.76    
  39  0.450902     -0.796506      -52.8851       52.8851       1347.44       1400.32    
  40  0.807155     -0.214240      -14.2247       14.2247       1193.97       1208.20    
  41  0.245094E-01  -3.70870      -246.244       246.244       1300.22       1546.47    
  42  0.840819     -0.173379      -11.5117       11.5117       1240.71       1252.22    
  43  0.418157     -0.871899      -57.8909       57.8909       1389.10       1447.00    
  44  0.795491     -0.228796      -15.1912       15.1912       1412.16       1427.36    
  45  0.675445E-01  -2.69497      -178.936       178.936       1356.13       1535.07    
  46  0.158617      -1.84126      -122.253       122.253       1407.45       1529.70    
  47  0.538475     -0.619015      -41.1003       41.1003       1332.88       1373.98    
  48  0.318292      -1.14479      -76.0097       76.0097       1437.32       1513.33    
  49  0.427160     -0.850596      -56.4765       56.4765       1407.76       1464.24    
  50  0.485422     -0.722737      -47.9871       47.9871       1436.49       1484.48    
  51  0.603579     -0.504879      -33.5221       33.5221       1453.26       1486.78    
  52  0.151674      -1.88602      -125.225       125.225       1331.35       1456.57    
  53  0.216599      -1.52971      -101.567       101.567       1463.91       1565.47    
  54  0.838062     -0.176664      -11.7298       11.7298       1405.23       1416.96    
  55  0.728698     -0.316496      -21.0142       21.0142       1485.87       1506.88    
  56  0.866837     -0.142904      -9.48832       9.48832       1450.94       1460.43    
  57  0.921748     -0.814837E-01  -5.41022       5.41022       1445.71       1451.12    
  58  0.325236      -1.12320      -74.5766       74.5766       1439.42       1514.00    
  59  0.316044      -1.15187      -76.4802       76.4802       1250.82       1327.30    
  60  0.163050      -1.81370      -120.423       120.423       1437.49       1557.91    
  61  0.940520     -0.613225E-01  -4.07159       4.07159       1448.61       1452.69    
  62  0.439004     -0.823246      -54.6605       54.6605       1418.12       1472.78    
  63  0.209586      -1.56262      -103.752       103.752       1447.80       1551.55    
  64  0.521405     -0.651229      -43.2392       43.2392       1407.55       1450.79    
  65  0.397376     -0.922872      -61.2753       61.2753       1545.03       1606.30    
  66  0.398167     -0.920883      -61.1432       61.1432       1536.88       1598.03    
  67  0.821539     -0.196576      -13.0519       13.0519       1561.33       1574.38    
  68  0.652451     -0.427020      -28.3526       28.3526       1555.06       1583.41    
  69  0.412127     -0.886423      -58.8552       58.8552       1560.83       1619.69    
  70  0.748303E-02  -4.89512      -325.018       325.018       1506.58       1831.60    
  71  0.287259      -1.24737      -82.8207       82.8207       1569.79       1652.61    
  72  0.813902     -0.205915      -13.6720       13.6720       1582.86       1596.53    
  73  0.173180      -1.75343      -116.421       116.421       1695.47       1811.89    
  74  0.424113     -0.857755      -56.9518       56.9518       1394.24       1451.19    
loop,thermsimp(1:2)       93   335.162       1.52165    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344        928.40        129.73          0.66         29.82          1.91          0.05        162.18
Just calling func    0   0        162.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    345       1042.87        129.77          0.65         29.38          1.66          0.05        161.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    928.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       93
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       94
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      344     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -58.2848       58.2848       919.160       977.445    
   2  0.262668E-01  -3.63945      -241.646       241.646       992.393       1234.04    
   3  0.620248     -0.477636      -31.7133       31.7133       1013.25       1044.96    
   4  0.249183      -1.38957      -92.2621       92.2621       1044.86       1137.12    
   5  0.999872     -0.128438E-03 -0.852779E-02  0.852779E-02   1057.86       1057.87    
   6  0.933252     -0.690802E-01  -4.58667       4.58667       1031.58       1036.17    
   7  0.857047     -0.154263      -10.2425       10.2425       1065.84       1076.08    
   8  0.365787      -1.00570      -66.7750       66.7750       1082.37       1149.14    
   9  0.499682     -0.693784      -46.0647       46.0647       1061.57       1107.64    
  10  0.761560     -0.272387      -18.0855       18.0855       1042.84       1060.92    
  11  0.793904E-01  -2.53338      -168.207       168.207       1068.11       1236.32    
  12  0.514449     -0.664659      -44.1309       44.1309       1039.39       1083.52    
  13  0.678176     -0.388349      -25.7849       25.7849       1030.06       1055.85    
  14  0.257558      -1.35651      -90.0673       90.0673       1005.15       1095.21    
  15  0.832067E-01  -2.48643      -165.090       165.090       974.423       1139.51    
  16  0.272851      -1.29883      -86.2376       86.2376       1145.34       1231.57    
  17  0.255245      -1.36553      -90.6663       90.6663       1119.26       1209.93    
  18  0.419883     -0.867779      -57.6173       57.6173       1076.81       1134.42    
  19  0.870346     -0.138865      -9.22011       9.22011       1172.60       1181.82    
  20  0.814510E-01  -2.50775      -166.506       166.506       1157.00       1323.50    
  21  0.560000     -0.579819      -38.4979       38.4979       1193.97       1232.47    
  22  0.860285     -0.150492      -9.99210       9.99210       1211.72       1221.72    
  23  0.538601     -0.618780      -41.0847       41.0847       1136.23       1177.31    
  24  0.542321     -0.611898      -40.6278       40.6278       1186.97       1227.60    
  25  0.836575     -0.178440      -11.8477       11.8477       1226.27       1238.12    
  26  0.705694     -0.348574      -23.1440       23.1440       1228.83       1251.97    
  27  0.301063      -1.20043      -79.7045       79.7045       1238.38       1318.09    
  28  0.125899      -2.07227      -137.591       137.591       1115.73       1253.32    
  29  0.476747     -0.740770      -49.1844       49.1844       1240.71       1289.90    
  30  0.676103     -0.391410      -25.9882       25.9882       1147.76       1173.75    
  31  0.385349     -0.953606      -63.3159       63.3159       1207.13       1270.45    
  32  0.141470      -1.95567      -129.849       129.849       1279.80       1409.65    
  33  0.146971      -1.91752      -127.316       127.316       1244.63       1371.95    
  34  0.616396     -0.483866      -32.1269       32.1269       984.147       1016.27    
  35  0.962361     -0.383659E-01  -2.54736       2.54736       1250.82       1253.37    
  36  0.618266     -0.480836      -31.9257       31.9257       1303.01       1334.93    
  37  0.369072     -0.996763      -66.1814       66.1814       1189.08       1255.26    
  38  0.312675      -1.16259      -77.1917       77.1917       1332.88       1410.07    
  39  0.367326      -1.00150      -66.4962       66.4962       1217.14       1283.64    
  40  0.184422      -1.69053      -112.245       112.245       1347.44       1459.68    
  41  0.113088      -2.17959      -144.717       144.717       1286.40       1431.12    
  42  0.333487      -1.09815      -72.9133       72.9133       1405.23       1478.14    
  43  0.407562     -0.897562      -59.5948       59.5948       1412.16       1471.76    
  44  0.443434     -0.813206      -53.9939       53.9939       1389.10       1443.10    
  45  0.265046      -1.32785      -88.1645       88.1645       1407.55       1495.71    
  46  0.444603     -0.810573      -53.8190       53.8190       1445.71       1499.53    
  47  0.689395E-01  -2.67453      -177.579       177.579       1394.24       1571.82    
  48  0.862417     -0.148017      -9.82776       9.82776       1448.61       1458.44    
  49  0.541063     -0.614219      -40.7819       40.7819       1331.35       1372.13    
  50  0.885208     -0.121933      -8.09589       8.09589       1450.94       1459.03    
  51  0.808718     -0.212305      -14.0963       14.0963       1407.76       1421.86    
  52  0.238877E-01  -3.73439      -247.950       247.950       1418.12       1666.07    
  53  0.428951     -0.846414      -56.1987       56.1987       1436.49       1492.69    
  54  0.860433     -0.150319      -9.98066       9.98066       1453.26       1463.24    
  55  0.367713      -1.00045      -66.4264       66.4264       1485.87       1552.30    
  56  0.782210     -0.245632      -16.3091       16.3091       1437.32       1453.63    
  57  0.916512E-01  -2.38976      -158.672       158.672       1281.30       1439.97    
  58  0.230050      -1.46946      -97.5667       97.5667       1439.42       1536.99    
  59  0.715909     -0.334202      -22.1898       22.1898       1407.45       1429.64    
  60  0.992857E-01  -2.30975      -153.359       153.359       1356.13       1509.49    
  61  0.697124     -0.360791      -23.9552       23.9552       1300.22       1324.18    
  62  0.232699      -1.45801      -96.8066       96.8066       1447.80       1544.61    
  63  0.134492      -2.00625      -133.208       133.208       1437.49       1570.70    
  64  0.778931     -0.249833      -16.5880       16.5880       1463.91       1480.49    
  65  0.248765      -1.39125      -92.3736       92.3736       1561.33       1653.70    
  66  0.317309      -1.14788      -76.2150       76.2150       1241.02       1317.24    
  67  0.555562     -0.587775      -39.0261       39.0261       1555.06       1594.09    
  68  0.924692     -0.782950E-01  -5.19850       5.19850       1582.86       1588.06    
  69  0.930266     -0.722849E-01  -4.79945       4.79945       1536.88       1541.68    
  70  0.839348     -0.175130      -11.6280       11.6280       1545.03       1556.66    
  71  0.555632     -0.587650      -39.0178       39.0178       1560.83       1599.85    
  72  0.717506     -0.331974      -22.0419       22.0419       1569.79       1591.83    
  73  0.526364     -0.641761      -42.6106       42.6106       1695.47       1738.08    
  74  0.978948E-01  -2.32386      -154.296       154.296       928.402       1082.70    
loop,thermsimp(1:2)       94   58.2848       241.646    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346       1649.92        129.79          0.67         29.84          1.80          0.05        162.14
Just calling func    0   0        162.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1649.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       94
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       95
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      345     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -81.5327       81.5327       919.160       1000.69    
   2  0.225242      -1.49058      -98.9690       98.9690       984.147       1083.12    
   3  0.946430E-01  -2.35764      -156.539       156.539       1031.58       1188.12    
   4  0.371694     -0.989684      -65.7114       65.7114       1013.25       1078.96    
   5  0.933291     -0.690381E-01  -4.58388       4.58388       1030.06       1034.65    
   6  0.926571     -0.762651E-01  -5.06372       5.06372       1057.86       1062.93    
   7  0.138048      -1.98015      -131.475       131.475       1042.84       1174.31    
   8  0.113008E-01  -4.48288      -297.647       297.647       1065.84       1363.48    
   9  0.405736     -0.902053      -59.8930       59.8930       928.402       988.295    
  10  0.390885     -0.939341      -62.3688       62.3688       1039.39       1101.76    
  11  0.873008     -0.135810      -9.01729       9.01729       1005.15       1014.16    
  12  0.945037     -0.565316E-01  -3.75349       3.75349       1061.57       1065.32    
  13  0.642194E-01  -2.74545      -182.288       182.288       1076.81       1259.09    
  14  0.322052E-01  -3.43563      -228.113       228.113       1044.86       1272.97    
  15  0.521559     -0.650933      -43.2195       43.2195       974.423       1017.64    
  16  0.271788      -1.30273      -86.4968       86.4968       1082.37       1168.87    
  17  0.153503      -1.87403      -124.429       124.429       1147.76       1272.19    
  18  0.219303      -1.51730      -100.743       100.743       1136.23       1236.97    
  19  0.476616     -0.741044      -49.2026       49.2026       1172.60       1221.81    
  20  0.510024     -0.673297      -44.7044       44.7044       1119.26       1163.97    
  21  0.393388     -0.932959      -61.9450       61.9450       1211.72       1273.67    
  22  0.947927     -0.534776E-01  -3.55072       3.55072       1186.97       1190.52    
  23  0.472009     -0.750758      -49.8475       49.8475       1145.34       1195.18    
  24  0.678717     -0.387551      -25.7319       25.7319       1193.97       1219.70    
  25  0.617620     -0.481882      -31.9952       31.9952       992.393       1024.39    
  26  0.138594E-01  -4.27879      -284.096       284.096       1068.11       1352.21    
  27  0.588445     -0.530273      -35.2081       35.2081       1226.27       1261.48    
  28  0.950805     -0.504465E-01  -3.34946       3.34946       1228.83       1232.18    
  29  0.444108     -0.811687      -53.8930       53.8930       1115.73       1169.62    
  30  0.299195      -1.20666      -80.1178       80.1178       1250.82       1330.94    
  31  0.808517E-01  -2.51514      -166.996       166.996       1189.08       1356.07    
  32  0.493903     -0.705415      -46.8370       46.8370       1207.13       1253.97    
  33  0.973584     -0.267710E-01  -1.77749       1.77749       1217.14       1218.92    
  34  0.219889      -1.51463      -100.566       100.566       1240.71       1341.28    
  35  0.872114     -0.136835      -9.08537       9.08537       1241.02       1250.11    
  36  0.413991     -0.881912      -58.5557       58.5557       1238.38       1296.94    
  37  0.155656      -1.86011      -123.504       123.504       1157.00       1280.50    
  38  0.744603     -0.294905      -19.5806       19.5806       1300.22       1319.81    
  39  0.627736     -0.465635      -30.9164       30.9164       1303.01       1333.93    
  40  0.137880      -1.98137      -131.556       131.556       1244.63       1376.19    
  41  0.270817      -1.30631      -86.7343       86.7343       1331.35       1418.08    
  42  0.271872      -1.30243      -86.4762       86.4762       1279.80       1366.28    
  43  0.988104     -0.119670E-01 -0.794563      0.794563       1332.88       1333.67    
  44  0.837729E-01  -2.47965      -164.639       164.639       1407.76       1572.40    
  45  0.731806     -0.312240      -20.7316       20.7316       1407.45       1428.18    
  46  0.520356     -0.653242      -43.3728       43.3728       1286.40       1329.78    
  47  0.158934      -1.83927      -122.121       122.121       1281.30       1403.42    
  48  0.724534     -0.322226      -21.3946       21.3946       1389.10       1410.50    
  49  0.895315     -0.110580      -7.34208       7.34208       1437.32       1444.67    
  50  0.850194     -0.162291      -10.7755       10.7755       1448.61       1459.39    
  51  0.428755     -0.846869      -56.2290       56.2290       1450.94       1507.17    
  52  0.523907     -0.646440      -42.9213       42.9213       1347.44       1390.36    
  53  0.358551      -1.02568      -68.1017       68.1017       1453.26       1521.36    
  54  0.680509     -0.384914      -25.5569       25.5569       1412.16       1437.72    
  55  0.607274     -0.498775      -33.1168       33.1168       1405.23       1438.34    
  56  0.591502     -0.525090      -34.8641       34.8641       1463.91       1498.77    
  57  0.121812      -2.10527      -139.782       139.782       1436.49       1576.27    
  58  0.812950     -0.207086      -13.7497       13.7497       1407.55       1421.30    
  59  0.915745     -0.880175E-01  -5.84404       5.84404       1445.71       1451.56    
  60  0.596748     -0.516260      -34.2778       34.2778       1356.13       1390.41    
  61  0.229246      -1.47296      -97.7992       97.7992       1439.42       1537.22    
  62  0.706979     -0.346754      -23.0232       23.0232       1536.88       1559.91    
  63  0.879114     -0.128841      -8.55454       8.55454       1447.80       1456.35    
  64  0.529368     -0.636072      -42.2329       42.2329       1485.87       1528.10    
  65  0.193084      -1.64463      -109.197       109.197       1545.03       1654.23    
  66  0.179439      -1.71792      -114.063       114.063       1437.49       1551.55    
  67  0.945530     -0.560096E-01  -3.71883       3.71883       1394.24       1397.96    
  68  0.486508     -0.720502      -47.8387       47.8387       1582.86       1630.70    
  69  0.131906      -2.02566      -134.497       134.497       1569.79       1704.28    
  70  0.203721      -1.59100      -105.637       105.637       1555.06       1660.70    
  71  0.493535     -0.706161      -46.8865       46.8865       1560.83       1607.72    
  72  0.501297     -0.690556      -45.8503       45.8503       1561.33       1607.18    
  73  0.507567E-01  -2.98071      -197.908       197.908       1418.12       1616.03    
  74  0.981329     -0.188472E-01  -1.25139       1.25139       1649.92       1651.17    
loop,thermsimp(1:2)       95   81.5327       98.9690    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347       1013.96        129.98          0.65         29.65          1.50          0.04        161.83
Just calling func    0   0        161.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1013.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       95
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   184.396    

hmean,hstd :    1260.83       184.396    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1260.83       184.396    
h(1),h(best1),h(np1) :    928.402       919.160       1013.96    
htherm(1),htherm(best1),htherm(np1) :    988.295       1000.69       1704.28    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        1
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      346     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -108.375       108.375       928.402       1036.78    
   2  0.313379      -1.16034      -77.0425       77.0425       919.160       996.202    
   3  0.769177     -0.262434      -17.4247       17.4247       1005.15       1022.57    
   4  0.884560E-01  -2.42525      -161.028       161.028       974.423       1135.45    
   5  0.890596     -0.115865      -7.69301       7.69301       992.393       1000.09    
   6  0.657268     -0.419664      -27.8641       27.8641       1030.06       1057.93    
   7  0.960898     -0.398874E-01  -2.64838       2.64838       1057.86       1060.51    
   8  0.613422E-01  -2.79129      -185.331       185.331       1061.57       1246.90    
   9  0.264483E-01  -3.63256      -241.189       241.189       1013.25       1254.43    
  10  0.304822      -1.18803      -78.8807       78.8807       984.147       1063.03    
  11  0.977907     -0.223409E-01  -1.48335       1.48335       1039.39       1040.87    
  12  0.746737     -0.292042      -19.3905       19.3905       1119.26       1138.65    
  13  0.450918E-01  -3.09905      -205.766       205.766       1082.37       1288.14    
  14  0.625433     -0.469311      -31.1605       31.1605       1115.73       1146.89    
  15  0.990029     -0.100208E-01 -0.665342      0.665342       1042.84       1043.50    
  16  0.985060     -0.150527E-01 -0.999444      0.999444       1031.58       1032.58    
  17  0.691362     -0.369092      -24.5064       24.5064       1186.97       1211.48    
  18  0.864323E-02  -4.75098      -315.448       315.448       1145.34       1460.78    
  19  0.908027E-01  -2.39907      -159.289       159.289       1217.14       1376.43    
  20  0.500093     -0.692962      -46.0101       46.0101       1193.97       1239.98    
  21  0.806913     -0.214539      -14.2446       14.2446       1172.60       1186.85    
  22  0.317749      -1.14649      -76.1229       76.1229       1228.83       1304.95    
  23  0.753050     -0.283623      -18.8315       18.8315       1136.23       1155.06    
  24  0.850048     -0.162463      -10.7869       10.7869       1241.02       1251.81    
  25  0.346718      -1.05924      -70.3298       70.3298       1207.13       1277.46    
  26  0.731558     -0.312579      -20.7541       20.7541       1076.81       1097.56    
  27  0.226645      -1.48437      -98.5568       98.5568       1226.27       1324.83    
  28  0.887805     -0.119003      -7.90134       7.90134       1147.76       1155.66    
  29  0.277731      -1.28110      -85.0606       85.0606       1044.86       1129.92    
  30  0.914814     -0.890349E-01  -5.91159       5.91159       1211.72       1217.64    
  31  0.298911      -1.20761      -80.1809       80.1809       1157.00       1237.18    
  32  0.469757     -0.755540      -50.1651       50.1651       1238.38       1288.55    
  33  0.217087      -1.52746      -101.418       101.418       1300.22       1401.64    
  34  0.143996      -1.93797      -128.674       128.674       1286.40       1415.08    
  35  0.873815     -0.134887      -8.95597       8.95597       1250.82       1259.78    
  36  0.102289      -2.27995      -151.380       151.380       1332.88       1484.26    
  37  0.583483     -0.538740      -35.7703       35.7703       1303.01       1338.78    
  38  0.308185      -1.17705      -78.1521       78.1521       1240.71       1318.86    
  39  0.129509      -2.04400      -135.714       135.714       1068.11       1203.83    
  40  0.858329     -0.152767      -10.1432       10.1432       1189.08       1199.22    
  41  0.247121      -1.39788      -92.8138       92.8138       1065.84       1158.65    
  42  0.672462     -0.396810      -26.3467       26.3467       1279.80       1306.15    
  43  0.978226     -0.220145E-01  -1.46168       1.46168       1244.63       1246.09    
  44  0.571205     -0.560006      -37.1824       37.1824       1347.44       1384.62    
  45  0.390724E-01  -3.24234      -215.279       215.279       1356.13       1571.41    
  46  0.773307     -0.257080      -17.0691       17.0691       1394.24       1411.31    
  47  0.860034     -0.150783      -10.0114       10.0114       1281.30       1291.31    
  48  0.521048     -0.651913      -43.2846       43.2846       1389.10       1432.39    
  49  0.577715     -0.548675      -36.4300       36.4300       1331.35       1367.78    
  50  0.449025     -0.800676      -53.1619       53.1619       1407.55       1460.71    
  51  0.879701     -0.128173      -8.51023       8.51023       1407.45       1415.96    
  52  0.553161     -0.592107      -39.3137       39.3137       1412.16       1451.48    
  53  0.501250E-01  -2.99324      -198.740       198.740       1405.23       1603.97    
  54  0.600542     -0.509923      -33.8570       33.8570       1437.32       1471.18    
  55  0.268895      -1.31343      -87.2072       87.2072       1445.71       1532.92    
  56  0.966550     -0.340228E-01  -2.25899       2.25899       1447.80       1450.06    
  57  0.223816      -1.49693      -99.3906       99.3906       1448.61       1548.00    
  58  0.422624     -0.861271      -57.1852       57.1852       1463.91       1521.09    
  59  0.664887     -0.408138      -27.0988       27.0988       1450.94       1478.04    
  60  0.710934     -0.341176      -22.6528       22.6528       1453.26       1475.91    
  61  0.476264     -0.741782      -49.2516       49.2516       1485.87       1535.12    
  62  0.736919     -0.305278      -20.2693       20.2693       1439.42       1459.69    
  63  0.124855      -2.08060      -138.144       138.144       1437.49       1575.63    
  64  0.440629     -0.819552      -54.4152       54.4152       1536.88       1591.30    
  65  0.901765E-01  -2.40599      -159.749       159.749       1407.76       1567.51    
  66  0.344754      -1.06492      -70.7070       70.7070       1436.49       1507.20    
  67  0.618647     -0.480221      -31.8849       31.8849       1561.33       1593.21    
  68  0.550827     -0.596334      -39.5944       39.5944       1560.83       1600.43    
  69  0.555162     -0.588495      -39.0739       39.0739       1418.12       1457.19    
  70  0.295668      -1.21852      -80.9052       80.9052       1582.86       1663.76    
  71  0.901940     -0.103207      -6.85255       6.85255       1649.92       1656.77    
  72  0.497126     -0.698911      -46.4051       46.4051       1545.03       1591.43    
  73  0.550369     -0.597167      -39.6497       39.6497       1555.06       1594.71    
  74  0.209155      -1.56468      -103.889       103.889       1013.96       1117.85    
loop,thermsimp(1:2)        1   108.375       77.0425    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348        931.13        129.75          0.67         29.93          1.09          0.05        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    349       1752.00        128.79          0.65         30.18          1.37          0.04        161.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    931.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        1
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        2
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      348     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -96.5657       96.5657       919.160       1015.73    
   2  0.293881      -1.22458      -81.3076       81.3076       992.393       1073.70    
   3  0.833435     -0.182199      -12.0974       12.0974       1005.15       1017.25    
   4  0.931284     -0.711905E-01  -4.72679       4.72679       1031.58       1036.31    
   5  0.965536     -0.350722E-01  -2.32867       2.32867       928.402       930.731    
   6  0.534034     -0.627296      -41.6501       41.6501       1039.39       1081.04    
   7  0.975689     -0.246118E-01  -1.63413       1.63413       1042.84       1044.47    
   8  0.958131     -0.427704E-01  -2.83980       2.83980       1030.06       1032.90    
   9  0.487835     -0.717779      -47.6579       47.6579       1057.86       1105.52    
  10  0.941751     -0.600144E-01  -3.98473       3.98473       984.147       988.131    
  11  0.764698     -0.268274      -17.8124       17.8124       1076.81       1094.62    
  12  0.282403      -1.26442      -83.9528       83.9528       1013.96       1097.91    
  13  0.694349     -0.364781      -24.2201       24.2201       1044.86       1069.08    
  14  0.257622      -1.35626      -90.0507       90.0507       974.423       1064.47    
  15  0.401572     -0.912369      -60.5780       60.5780       1119.26       1179.84    
  16  0.828654     -0.187952      -12.4793       12.4793       1115.73       1128.21    
  17  0.113844      -2.17292      -144.274       144.274       1136.23       1280.50    
  18  0.383967     -0.957199      -63.5545       63.5545       1147.76       1211.32    
  19  0.767294     -0.264886      -17.5874       17.5874       1065.84       1083.42    
  20  0.230085      -1.46930      -97.5564       97.5564       1172.60       1270.16    
  21  0.248551      -1.39211      -92.4308       92.4308       1189.08       1281.51    
  22  0.739043     -0.302399      -20.0781       20.0781       1068.11       1088.19    
  23  0.427702     -0.849328      -56.3922       56.3922       1186.97       1243.36    
  24  0.217549      -1.52533      -101.276       101.276       1211.72       1313.00    
  25  0.126759      -2.06546      -137.139       137.139       1157.00       1294.14    
  26  0.278624      -1.27789      -84.8474       84.8474       1193.97       1278.82    
  27  0.736668     -0.305618      -20.2919       20.2919       1244.63       1264.92    
  28  0.183809      -1.69386      -112.466       112.466       1061.57       1174.04    
  29  0.915242     -0.885666E-01  -5.88050       5.88050       1241.02       1246.90    
  30  0.864610     -0.145477      -9.65912       9.65912       1013.25       1022.90    
  31  0.996457     -0.354911E-02 -0.235648      0.235648       1250.82       1251.06    
  32  0.937047     -0.650222E-01  -4.31724       4.31724       1207.13       1211.45    
  33  0.664908     -0.408106      -27.0968       27.0968       1082.37       1109.47    
  34  0.409422     -0.893009      -59.2925       59.2925       1238.38       1297.68    
  35  0.293825E-01  -3.52736      -234.203       234.203       1281.30       1515.50    
  36  0.528099     -0.638471      -42.3922       42.3922       1228.83       1271.22    
  37  0.582244E-01  -2.84345      -188.795       188.795       1279.80       1468.60    
  38  0.394879     -0.929175      -61.6938       61.6938       1240.71       1302.40    
  39  0.619316     -0.479139      -31.8131       31.8131       1226.27       1258.09    
  40  0.760056     -0.274363      -18.2167       18.2167       1303.01       1321.23    
  41  0.322606      -1.13132      -75.1158       75.1158       1331.35       1406.46    
  42  0.806034     -0.215629      -14.3170       14.3170       1217.14       1231.46    
  43  0.158197      -1.84391      -122.429       122.429       1347.44       1469.87    
  44  0.964399     -0.362497E-01  -2.40685       2.40685       1300.22       1302.63    
  45  0.891984     -0.114307      -7.58955       7.58955       1394.24       1401.83    
  46  0.896576E-01  -2.41176      -160.132       160.132       1286.40       1446.53    
  47  0.976522     -0.237576E-01  -1.57741       1.57741       1407.45       1409.02    
  48  0.145640      -1.92662      -127.920       127.920       1389.10       1517.02    
  49  0.580689E-01  -2.84612      -188.972       188.972       1447.80       1636.77    
  50  0.154224      -1.86935      -124.118       124.118       1412.16       1536.28    
  51  0.623776     -0.471964      -31.3367       31.3367       1418.12       1449.46    
  52  0.949887     -0.514119E-01  -3.41356       3.41356       1439.42       1442.83    
  53  0.681810     -0.383005      -25.4301       25.4301       1407.55       1432.98    
  54  0.377382     -0.974497      -64.7030       64.7030       1145.34       1210.04    
  55  0.928894     -0.737604E-01  -4.89742       4.89742       1437.32       1442.22    
  56  0.484665     -0.724298      -48.0907       48.0907       1453.26       1501.35    
  57  0.499587     -0.693974      -46.0774       46.0774       1450.94       1497.02    
  58  0.478934     -0.736193      -48.8805       48.8805       1332.88       1381.76    
  59  0.520581     -0.652809      -43.3441       43.3441       1436.49       1479.84    
  60  0.320323E-01  -3.44101      -228.470       228.470       1463.91       1692.38    
  61  0.157322      -1.84946      -122.798       122.798       1445.71       1568.51    
  62  0.590227     -0.527248      -35.0073       35.0073       1485.87       1520.88    
  63  0.686824     -0.375677      -24.9436       24.9436       1448.61       1473.56    
  64  0.423825     -0.858435      -56.9969       56.9969       1407.76       1464.76    
  65  0.503291     -0.686586      -45.5868       45.5868       1356.13       1401.72    
  66  0.902595E-01  -2.40507      -159.688       159.688       1437.49       1597.18    
  67  0.952906     -0.482388E-01  -3.20288       3.20288       1536.88       1540.09    
  68  0.798848     -0.224585      -14.9116       14.9116       1545.03       1559.94    
  69  0.403317     -0.908033      -60.2900       60.2900       1561.33       1621.62    
  70  0.988352     -0.117167E-01 -0.777944      0.777944       1555.06       1555.84    
  71  0.360626      -1.01992      -67.7186       67.7186       1560.83       1628.55    
  72  0.885151     -0.121997      -8.10013       8.10013       1405.23       1413.33    
  73  0.130879      -2.03348      -135.016       135.016       1649.92       1784.94    
  74  0.133436E-01  -4.31672      -286.614       286.614       931.134       1217.75    
loop,thermsimp(1:2)        2   96.5657       81.3076    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350       1637.54        129.57          0.66         29.98          1.12          0.04        161.38
Just calling func    0   0        161.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1637.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        2
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        3
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      349     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -60.3502       60.3502       928.402       988.752    
   2  0.995767     -0.424237E-02 -0.281678      0.281678       984.147       984.428    
   3  0.232708      -1.45797      -96.8039       96.8039       919.160       1015.96    
   4  0.844104     -0.169480      -11.2528       11.2528       1005.15       1016.40    
   5  0.835080     -0.180228      -11.9665       11.9665       1013.25       1025.21    
   6  0.492927     -0.707395      -46.9684       46.9684       1030.06       1077.03    
   7  0.669838     -0.400719      -26.6062       26.6062       1031.58       1058.19    
   8  0.161727      -1.82184      -120.964       120.964       1042.84       1163.80    
   9  0.712877     -0.338447      -22.4716       22.4716       974.423       996.894    
  10  0.187101      -1.67610      -111.287       111.287       1044.86       1156.14    
  11  0.152475      -1.88075      -124.875       124.875       992.393       1117.27    
  12  0.299805      -1.20462      -79.9824       79.9824       1039.39       1119.37    
  13  0.388928     -0.944360      -62.7020       62.7020       1065.84       1128.54    
  14  0.396030     -0.926264      -61.5005       61.5005       1068.11       1129.61    
  15  0.795332     -0.228996      -15.2045       15.2045       1076.81       1092.01    
  16  0.209301      -1.56398      -103.843       103.843       1013.96       1117.80    
  17  0.292717      -1.22855      -81.5712       81.5712       1057.86       1139.44    
  18  0.128603E-01  -4.35361      -289.064       289.064       1082.37       1371.43    
  19  0.386579E-01  -3.25301      -215.988       215.988       1115.73       1331.71    
  20  0.284417      -1.25731      -83.4811       83.4811       1061.57       1145.05    
  21  0.962037     -0.387027E-01  -2.56971       2.56971       1119.26       1121.83    
  22  0.340824      -1.07639      -71.4682       71.4682       1145.34       1216.81    
  23  0.463892     -0.768103      -50.9992       50.9992       1147.76       1198.76    
  24  0.772349     -0.258319      -17.1514       17.1514       1207.13       1224.28    
  25  0.580884     -0.543204      -36.0667       36.0667       931.134       967.201    
  26  0.519264     -0.655343      -43.5124       43.5124       1217.14       1260.66    
  27  0.336321      -1.08969      -72.3514       72.3514       1186.97       1259.32    
  28  0.975360     -0.249491E-01  -1.65653       1.65653       1241.02       1242.68    
  29  0.768530     -0.263276      -17.4806       17.4806       1250.82       1268.31    
  30  0.536540     -0.622614      -41.3393       41.3393       1226.27       1267.61    
  31  0.922732     -0.804161E-01  -5.33933       5.33933       1244.63       1249.97    
  32  0.603353     -0.505252      -33.5469       33.5469       1172.60       1206.15    
  33  0.927279E-01  -2.37809      -157.896       157.896       1228.83       1386.72    
  34  0.180890      -1.70987      -113.529       113.529       1193.97       1307.50    
  35  0.933825E-01  -2.37105      -157.429       157.429       1136.23       1293.66    
  36  0.343444      -1.06873      -70.9598       70.9598       1189.08       1260.04    
  37  0.102193      -2.28089      -151.443       151.443       1157.00       1308.44    
  38  0.397576     -0.922370      -61.2420       61.2420       1238.38       1299.63    
  39  0.455007     -0.787443      -52.2833       52.2833       1240.71       1292.99    
  40  0.559910     -0.579979      -38.5085       38.5085       1300.22       1338.73    
  41  0.901058     -0.104186      -6.91756       6.91756       1211.72       1218.64    
  42  0.849435     -0.163184      -10.8348       10.8348       1303.01       1313.84    
  43  0.231812      -1.46183      -97.0599       97.0599       1332.88       1429.94    
  44  0.119620      -2.12344      -140.988       140.988       1356.13       1497.12    
  45  0.885994     -0.121045      -8.03693       8.03693       1394.24       1402.28    
  46  0.166933      -1.79016      -118.860       118.860       1331.35       1450.21    
  47  0.284605      -1.25665      -83.4371       83.4371       1407.45       1490.88    
  48  0.392630     -0.934887      -62.0731       62.0731       1405.23       1467.30    
  49  0.275341      -1.28974      -85.6342       85.6342       1407.55       1493.18    
  50  0.808723     -0.212299      -14.0959       14.0959       1437.32       1451.42    
  51  0.544552     -0.607792      -40.3551       40.3551       1439.42       1479.78    
  52  0.729547     -0.315331      -20.9368       20.9368       1286.40       1307.34    
  53  0.986801     -0.132865E-01 -0.882176      0.882176       1418.12       1419.00    
  54  0.814160     -0.205599      -13.6510       13.6510       1407.76       1421.41    
  55  0.847794     -0.165117      -10.9632       10.9632       1279.80       1290.76    
  56  0.248789      -1.39115      -92.3673       92.3673       1347.44       1439.80    
  57  0.294277      -1.22323      -81.2183       81.2183       1448.61       1529.83    
  58  0.747234     -0.291377      -19.3464       19.3464       1436.49       1455.84    
  59  0.517211     -0.659304      -43.7753       43.7753       1450.94       1494.71    
  60  0.362192      -1.01558      -67.4309       67.4309       1453.26       1520.69    
  61  0.495572     -0.702043      -46.6131       46.6131       1281.30       1327.91    
  62  0.742180     -0.298163      -19.7970       19.7970       1389.10       1408.90    
  63  0.464476     -0.766845      -50.9157       50.9157       1485.87       1536.79    
  64  0.179754      -1.71616      -113.947       113.947       1412.16       1526.11    
  65  0.696938     -0.361059      -23.9730       23.9730       1536.88       1560.86    
  66  0.688154E-01  -2.67633      -177.698       177.698       1555.06       1732.76    
  67  0.592601     -0.523233      -34.7408       34.7408       1545.03       1579.77    
  68  0.399987E-01  -3.21891      -213.724       213.724       1445.71       1659.43    
  69  0.425783     -0.853826      -56.6909       56.6909       1437.49       1494.18    
  70  0.843399     -0.170315      -11.3083       11.3083       1561.33       1572.64    
  71  0.114575      -2.16653      -143.850       143.850       1560.83       1704.68    
  72  0.666802     -0.405262      -26.9079       26.9079       1447.80       1474.71    
  73  0.650497     -0.430018      -28.5516       28.5516       1463.91       1492.46    
  74  0.906339     -0.983422E-01  -6.52956       6.52956       1637.54       1644.07    
loop,thermsimp(1:2)        3   60.3502      0.281678    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351        979.00        129.82          0.66         29.84          1.11          0.05        161.48
Just calling func    0   0        161.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    979.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        3
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        4
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      350     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -70.7144       70.7144       931.134       1001.85    
   2  0.337825      -1.08523      -72.0551       72.0551       984.147       1056.20    
   3  0.129257      -2.04595      -135.844       135.844       928.402       1064.25    
   4  0.218013      -1.52320      -101.135       101.135       974.423       1075.56    
   5  0.764988     -0.267896      -17.7873       17.7873       919.160       936.947    
   6  0.134235      -2.00816      -133.334       133.334       1005.15       1138.48    
   7  0.921891     -0.813288E-01  -5.39993       5.39993       1013.25       1018.65    
   8  0.879140E-01  -2.43140      -161.436       161.436       1031.58       1193.01    
   9  0.853506     -0.158403      -10.5173       10.5173       1030.06       1040.58    
  10  0.781888     -0.246043      -16.3364       16.3364       1076.81       1093.14    
  11  0.572060     -0.558512      -37.0832       37.0832       992.393       1029.48    
  12  0.370929     -0.991745      -65.8483       65.8483       1013.96       1079.81    
  13  0.659208     -0.416716      -27.6684       27.6684       1039.39       1067.06    
  14  0.192080      -1.64984      -109.543       109.543       1119.26       1228.81    
  15  0.834249     -0.181224      -12.0326       12.0326       1065.84       1077.87    
  16  0.275735      -1.28831      -85.5393       85.5393       1068.11       1153.65    
  17  0.899896     -0.105476      -7.00320       7.00320       1057.86       1064.87    
  18  0.263842      -1.33241      -88.4668       88.4668       1061.57       1150.04    
  19  0.542051     -0.612396      -40.6608       40.6608       1044.86       1085.52    
  20  0.883103     -0.124314      -8.25397       8.25397       1042.84       1051.09    
  21  0.603547     -0.504931      -33.5256       33.5256       1147.76       1181.29    
  22  0.461006     -0.774344      -51.4136       51.4136       1172.60       1224.02    
  23  0.640920     -0.444850      -29.5364       29.5364       1145.34       1174.87    
  24  0.787319     -0.239122      -15.8768       15.8768       1211.72       1227.60    
  25  0.258775E-01  -3.65438      -242.638       242.638       1207.13       1449.77    
  26  0.838926     -0.175633      -11.6614       11.6614       1241.02       1252.68    
  27  0.184807      -1.68845      -112.107       112.107       1244.63       1356.74    
  28  0.642750     -0.441999      -29.3471       29.3471       1186.97       1216.32    
  29  0.962815     -0.378938E-01  -2.51601       2.51601       1189.08       1191.59    
  30  0.866393     -0.143417      -9.52233       9.52233       1217.14       1226.67    
  31  0.652626     -0.426751      -28.3347       28.3347       1226.27       1254.61    
  32  0.170956      -1.76635      -117.279       117.279       1250.82       1368.10    
  33  0.769008     -0.262654      -17.4393       17.4393       1279.80       1297.24    
  34  0.156770      -1.85298      -123.031       123.031       1240.71       1363.74    
  35  0.256549E-01  -3.66302      -243.211       243.211       1136.23       1379.44    
  36  0.726661     -0.319295      -21.2000       21.2000       1238.38       1259.58    
  37  0.556665     -0.585792      -38.8944       38.8944       1286.40       1325.30    
  38  0.381201     -0.964427      -64.0344       64.0344       1193.97       1258.01    
  39  0.312648      -1.16268      -77.1974       77.1974       1157.00       1234.20    
  40  0.523641     -0.646949      -42.9551       42.9551       1303.01       1345.96    
  41  0.525107     -0.644154      -42.7695       42.7695       1281.30       1324.07    
  42  0.577096     -0.549746      -36.5011       36.5011       1115.73       1152.23    
  43  0.218919      -1.51905      -100.860       100.860       1300.22       1401.08    
  44  0.406968     -0.899021      -59.6917       59.6917       1082.37       1142.06    
  45  0.269244      -1.31214      -87.1210       87.1210       1228.83       1315.95    
  46  0.150666      -1.89269      -125.667       125.667       1394.24       1519.91    
  47  0.619490     -0.478859      -31.7945       31.7945       1389.10       1420.90    
  48  0.204317      -1.58808      -105.443       105.443       1418.12       1523.56    
  49  0.924766     -0.782150E-01  -5.19319       5.19319       1407.76       1412.96    
  50  0.897527E-01  -2.41070      -160.061       160.061       1332.88       1492.94    
  51  0.938635     -0.633286E-01  -4.20479       4.20479       1347.44       1351.64    
  52  0.265009      -1.32799      -88.1738       88.1738       1331.35       1419.52    
  53  0.914538     -0.893366E-01  -5.93162       5.93162       1437.32       1443.26    
  54  0.369988     -0.994284      -66.0168       66.0168       1436.49       1502.51    
  55  0.670325     -0.399992      -26.5580       26.5580       1405.23       1431.79    
  56  0.580716     -0.543494      -36.0860       36.0860       1447.80       1483.89    
  57  0.640472     -0.445550      -29.5829       29.5829       1439.42       1469.00    
  58  0.711348E-01  -2.64318      -175.497       175.497       1407.45       1582.94    
  59  0.377254E-01  -3.27742      -217.609       217.609       1463.91       1681.51    
  60  0.712296     -0.339261      -22.5257       22.5257       1407.55       1430.07    
  61  0.628609     -0.464246      -30.8242       30.8242       1437.49       1468.31    
  62  0.729486     -0.315415      -20.9424       20.9424       1450.94       1471.88    
  63  0.851489     -0.160769      -10.6745       10.6745       1356.13       1366.81    
  64  0.728439     -0.316851      -21.0377       21.0377       1453.26       1474.29    
  65  0.813668     -0.206203      -13.6911       13.6911       1412.16       1425.86    
  66  0.176154      -1.73639      -115.290       115.290       1448.61       1563.90    
  67  0.803356     -0.218957      -14.5379       14.5379       1485.87       1500.41    
  68  0.842930     -0.170871      -11.3452       11.3452       1536.88       1548.23    
  69  0.585957     -0.534508      -35.4894       35.4894       1561.33       1596.82    
  70  0.108696      -2.21920      -147.347       147.347       1545.03       1692.38    
  71  0.440194     -0.820540      -54.4808       54.4808       1637.54       1692.02    
  72  0.425757     -0.853886      -56.6949       56.6949       1445.71       1502.41    
  73  0.627385     -0.466195      -30.9536       30.9536       1560.83       1591.79    
  74  0.298261      -1.20979      -80.3255       80.3255       978.997       1059.32    
loop,thermsimp(1:2)        4   70.7144       72.0551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352        927.37        130.00          0.67         29.97          0.86          0.05        161.55
Just calling func    0   0        161.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    353       1355.51        129.26          0.67         29.97          0.86          0.04        160.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    927.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        4
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        5
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      352     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.407574      0.407574       919.160       919.567    
   2  0.544036     -0.608740      -40.4181       40.4181       931.134       971.553    
   3  0.752151     -0.284818      -18.9109       18.9109       1013.25       1032.16    
   4  0.128894      -2.04876      -136.030       136.030       992.393       1128.42    
   5  0.954586     -0.464781E-01  -3.08597       3.08597       1030.06       1033.15    
   6  0.699109     -0.357949      -23.7665       23.7665       1042.84       1066.60    
   7  0.158831      -1.83992      -122.164       122.164       984.147       1106.31    
   8  0.317803      -1.14632      -76.1117       76.1117       978.997       1055.11    
   9  0.533633     -0.628047      -41.7000       41.7000       928.402       970.102    
  10  0.232061      -1.46076      -96.9889       96.9889       1057.86       1154.85    
  11  0.798671     -0.224806      -14.9263       14.9263       1039.39       1054.32    
  12  0.629719     -0.462482      -30.7071       30.7071       974.423       1005.13    
  13  0.285415      -1.25381      -83.2484       83.2484       1065.84       1149.09    
  14  0.101345      -2.28923      -151.996       151.996       1013.96       1165.96    
  15  0.523846     -0.646557      -42.9290       42.9290       1044.86       1087.79    
  16  0.570798     -0.560721      -37.2298       37.2298       1076.81       1114.04    
  17  0.471006     -0.752884      -49.9887       49.9887       1005.15       1055.14    
  18  0.439034     -0.823179      -54.6561       54.6561       1082.37       1137.03    
  19  0.755118     -0.280881      -18.6495       18.6495       1061.57       1080.22    
  20  0.987033     -0.130515E-01 -0.866571      0.866571       1115.73       1116.59    
  21  0.800390E-01  -2.52524      -167.667       167.667       1068.11       1235.78    
  22  0.739282     -0.302075      -20.0567       20.0567       1145.34       1165.39    
  23  0.367536      -1.00093      -66.4583       66.4583       1147.76       1214.22    
  24  0.397431     -0.922735      -61.2662       61.2662       1189.08       1250.35    
  25  0.338773      -1.08242      -71.8689       71.8689       1031.58       1103.45    
  26  0.388721     -0.944893      -62.7374       62.7374       1186.97       1249.71    
  27  0.298998      -1.20732      -80.1614       80.1614       1172.60       1252.77    
  28  0.668470     -0.402763      -26.7420       26.7420       1217.14       1243.88    
  29  0.604587     -0.503210      -33.4113       33.4113       1211.72       1245.14    
  30  0.455577     -0.786190      -52.2001       52.2001       1119.26       1171.46    
  31  0.842360     -0.171548      -11.3902       11.3902       1157.00       1168.39    
  32  0.452047     -0.793969      -52.7166       52.7166       1241.02       1293.74    
  33  0.994488     -0.552709E-02 -0.366979      0.366979       1226.27       1226.64    
  34  0.309000E-02  -5.77958      -383.743       383.743       1193.97       1577.71    
  35  0.171789      -1.76149      -116.956       116.956       1238.38       1355.34    
  36  0.567417     -0.566661      -37.6242       37.6242       1279.80       1317.43    
  37  0.885121     -0.122031      -8.10241       8.10241       1228.83       1236.93    
  38  0.342608      -1.07117      -71.1216       71.1216       1281.30       1352.42    
  39  0.954017     -0.470733E-01  -3.12550       3.12550       1286.40       1289.53    
  40  0.439346     -0.822467      -54.6088       54.6088       1303.01       1357.62    
  41  0.237365E-01  -3.74074      -248.372       248.372       1347.44       1595.81    
  42  0.100236      -2.30023      -152.727       152.727       1244.63       1397.36    
  43  0.539338     -0.617412      -40.9939       40.9939       1240.71       1281.70    
  44  0.825393     -0.191896      -12.7412       12.7412       1356.13       1368.88    
  45  0.252744      -1.37538      -91.3199       91.3199       1250.82       1342.14    
  46  0.676050     -0.391488      -25.9933       25.9933       1136.23       1162.22    
  47  0.621378     -0.475815      -31.5924       31.5924       1300.22       1331.82    
  48  0.375614     -0.979194      -65.0149       65.0149       1407.76       1472.78    
  49  0.638637     -0.448418      -29.7733       29.7733       1331.35       1361.12    
  50  0.540154     -0.615902      -40.8936       40.8936       1389.10       1430.00    
  51  0.295099      -1.22045      -81.0331       81.0331       1412.16       1493.20    
  52  0.195781      -1.63076      -108.276       108.276       1407.55       1515.82    
  53  0.430058     -0.843836      -56.0276       56.0276       1405.23       1461.26    
  54  0.686512E-01  -2.67872      -177.857       177.857       1437.32       1615.18    
  55  0.689090     -0.372384      -24.7249       24.7249       1207.13       1231.86    
  56  0.737045     -0.305106      -20.2579       20.2579       1437.49       1457.75    
  57  0.303800      -1.19139      -79.1037       79.1037       1439.42       1518.52    
  58  0.709025     -0.343864      -22.8313       22.8313       1450.94       1473.77    
  59  0.754321     -0.281937      -18.7196       18.7196       1453.26       1471.97    
  60  0.917745E-01  -2.38842      -158.582       158.582       1447.80       1606.38    
  61  0.600903     -0.509321      -33.8171       33.8171       1332.88       1366.69    
  62  0.880182     -0.127627      -8.47393       8.47393       1485.87       1494.34    
  63  0.318171      -1.14517      -76.0349       76.0349       1445.71       1521.75    
  64  0.625153     -0.469759      -31.1903       31.1903       1436.49       1467.68    
  65  0.956330     -0.446527E-01  -2.96478       2.96478       1394.24       1397.21    
  66  0.152880      -1.87810      -124.699       124.699       1418.12       1542.82    
  67  0.933903     -0.683823E-01  -4.54033       4.54033       1536.88       1541.42    
  68  0.875511     -0.132948      -8.82723       8.82723       1448.61       1457.44    
  69  0.929728E-02  -4.67803      -310.604       310.604       1407.45       1718.05    
  70  0.554939     -0.588896      -39.1006       39.1006       1560.83       1599.93    
  71  0.630856     -0.460677      -30.5873       30.5873       1561.33       1591.91    
  72  0.152909      -1.87791      -124.687       124.687       1463.91       1588.59    
  73  0.197011      -1.62450      -107.861       107.861       1637.54       1745.40    
  74  0.166504      -1.79274      -119.031       119.031       927.369       1046.40    
loop,thermsimp(1:2)        5  0.407574       40.4181    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354       1562.04        129.71          0.68         30.01          1.05          0.04        161.49
Just calling func    0   0        161.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1562.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        5
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        6
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      353     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -71.1474       71.1474       919.160       990.307    
   2  0.738210     -0.303527      -20.1531       20.1531       928.402       948.555    
   3  0.254388      -1.36889      -90.8896       90.8896       931.134       1022.02    
   4  0.184184      -1.69182      -112.330       112.330       974.423       1086.75    
   5  0.467311     -0.760760      -50.5116       50.5116       1013.25       1063.76    
   6  0.718957     -0.329953      -21.9077       21.9077       1030.06       1051.97    
   7  0.233172      -1.45598      -96.6715       96.6715       927.369       1024.04    
   8  0.855319     -0.156281      -10.3765       10.3765       1039.39       1049.77    
   9  0.331323      -1.10466      -73.3455       73.3455       978.997       1052.34    
  10  0.737635E-01  -2.60689      -173.088       173.088       1005.15       1178.24    
  11  0.960656     -0.401393E-01  -2.66510       2.66510       1042.84       1045.50    
  12  0.312287      -1.16383      -77.2742       77.2742       1061.57       1138.85    
  13  0.252190      -1.37757      -91.4656       91.4656       1044.86       1136.32    
  14  0.775876     -0.253763      -16.8489       16.8489       1031.58       1048.43    
  15  0.397248     -0.923194      -61.2967       61.2967       984.147       1045.44    
  16  0.587084E-01  -2.83517      -188.245       188.245       1076.81       1265.05    
  17  0.923214     -0.798941E-01  -5.30467       5.30467       1115.73       1121.03    
  18  0.147001      -1.91731      -127.303       127.303       992.393       1119.70    
  19  0.275551      -1.28898      -85.5838       85.5838       1082.37       1167.95    
  20  0.157032      -1.85131      -122.920       122.920       1065.84       1188.76    
  21  0.468534     -0.758146      -50.3381       50.3381       1057.86       1108.20    
  22  0.101055      -2.29209      -152.186       152.186       1136.23       1288.41    
  23  0.891765     -0.114553      -7.60587       7.60587       1145.34       1152.94    
  24  0.756241     -0.279395      -18.5508       18.5508       1013.96       1032.51    
  25  0.212181E-01  -3.85290      -255.818       255.818       1157.00       1412.82    
  26  0.807607     -0.213679      -14.1875       14.1875       1119.26       1133.45    
  27  0.233854      -1.45306      -96.4777       96.4777       1147.76       1244.24    
  28  0.622600     -0.473852      -31.4620       31.4620       1226.27       1257.73    
  29  0.188561      -1.66833      -110.771       110.771       1207.13       1317.90    
  30  0.938432E-01  -2.36613      -157.102       157.102       1068.11       1225.21    
  31  0.846333     -0.166843      -11.0777       11.0777       1228.83       1239.90    
  32  0.258796      -1.35172      -89.7490       89.7490       1217.14       1306.89    
  33  0.503854     -0.685469      -45.5126       45.5126       1211.72       1257.24    
  34  0.577410     -0.549202      -36.4650       36.4650       1186.97       1223.44    
  35  0.282259E-01  -3.56751      -236.870       236.870       1189.08       1425.95    
  36  0.618901     -0.479811      -31.8577       31.8577       1172.60       1204.46    
  37  0.563982     -0.572733      -38.0274       38.0274       1240.71       1278.74    
  38  0.290650      -1.23563      -82.0416       82.0416       1286.40       1368.44    
  39  0.165662      -1.79781      -119.368       119.368       1241.02       1360.39    
  40  0.871949E-01  -2.43961      -161.981       161.981       1279.80       1441.78    
  41  0.494744     -0.703714      -46.7240       46.7240       1300.22       1346.95    
  42  0.156326      -1.85581      -123.219       123.219       1250.82       1374.04    
  43  0.558357     -0.582757      -38.6929       38.6929       1281.30       1319.99    
  44  0.974745     -0.255792E-01  -1.69836       1.69836       1238.38       1240.08    
  45  0.399321     -0.917991      -60.9512       60.9512       1303.01       1363.96    
  46  0.649792     -0.431103      -28.6237       28.6237       1331.35       1359.97    
  47  0.210634      -1.55763      -103.421       103.421       1332.88       1436.30    
  48  0.939937     -0.619427E-01  -4.11277       4.11277       1356.13       1360.25    
  49  0.617394     -0.482248      -32.0195       32.0195       1394.24       1426.26    
  50  0.435355     -0.831593      -55.2147       55.2147       1244.63       1299.85    
  51  0.423449     -0.859323      -57.0559       57.0559       1389.10       1446.16    
  52  0.922974     -0.801543E-01  -5.32195       5.32195       1448.61       1453.94    
  53  0.877321     -0.130883      -8.69013       8.69013       1437.49       1446.18    
  54  0.757805     -0.277329      -18.4136       18.4136       1405.23       1423.64    
  55  0.972356     -0.280336E-01  -1.86132       1.86132       1436.49       1438.35    
  56  0.535145     -0.625217      -41.5121       41.5121       1453.26       1494.77    
  57  0.654598     -0.423734      -28.1344       28.1344       1407.76       1435.90    
  58  0.131676E-01  -4.32999      -287.496       287.496       1450.94       1738.43    
  59  0.835144     -0.180151      -11.9613       11.9613       1412.16       1424.13    
  60  0.965311E-01  -2.33789      -155.227       155.227       1485.87       1641.10    
  61  0.955098     -0.459413E-01  -3.05034       3.05034       1407.55       1410.60    
  62  0.807730     -0.213527      -14.1774       14.1774       1439.42       1453.60    
  63  0.312538      -1.16303      -77.2209       77.2209       1445.71       1522.93    
  64  0.757580     -0.277626      -18.4333       18.4333       1536.88       1555.32    
  65  0.852108     -0.160043      -10.6262       10.6262       1418.12       1428.75    
  66  0.893102E-01  -2.41564      -160.390       160.390       1193.97       1354.36    
  67  0.973210     -0.271549E-01  -1.80299       1.80299       1463.91       1465.71    
  68  0.126785      -2.06527      -137.126       137.126       1561.33       1698.45    
  69  0.765960     -0.266625      -17.7029       17.7029       1347.44       1365.14    
  70  0.768352     -0.263507      -17.4959       17.4959       1560.83       1578.33    
  71  0.771160     -0.259860      -17.2537       17.2537       1447.80       1465.05    
  72  0.771741     -0.259106      -17.2037       17.2037       1437.32       1454.53    
  73  0.234032      -1.45230      -96.4272       96.4272       1407.45       1503.87    
  74  0.868804     -0.140638      -9.33783       9.33783       1562.04       1571.38    
loop,thermsimp(1:2)        6   71.1474       20.1531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355       1033.01        129.82          0.66         29.82          1.32          0.05        161.68
Just calling func    0   0        161.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1033.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        6
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        7
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      354     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -26.8468       26.8468       928.402       955.249    
   2  0.361364E-01  -3.32046      -220.466       220.466       919.160       1139.63    
   3  0.167171      -1.78874      -118.765       118.765       931.134       1049.90    
   4  0.268590E-01  -3.61716      -240.166       240.166       927.369       1167.54    
   5  0.979339     -0.208774E-01  -1.38618       1.38618       1013.96       1015.35    
   6  0.285956E-01  -3.55450      -236.006       236.006       984.147       1220.15    
   7  0.614036     -0.487701      -32.3816       32.3816       1042.84       1075.22    
   8  0.291622      -1.23230      -81.8199       81.8199       1031.58       1113.40    
   9  0.495778     -0.701626      -46.5854       46.5854       1039.39       1085.97    
  10  0.289385      -1.24000      -82.3313       82.3313       1030.06       1112.40    
  11  0.601390     -0.508511      -33.7633       33.7633       978.997       1012.76    
  12  0.868837     -0.140599      -9.33527       9.33527       1013.25       1022.58    
  13  0.289097E-01  -3.54358      -235.281       235.281       974.423       1209.70    
  14  0.999895     -0.104574E-03 -0.694335E-02  0.694335E-02   1057.86       1057.87    
  15  0.547924     -0.601620      -39.9453       39.9453       992.393       1032.34    
  16  0.562607     -0.575175      -38.1895       38.1895       1115.73       1153.92    
  17  0.422387     -0.861832      -57.2225       57.2225       1119.26       1176.49    
  18  0.934703     -0.675264E-01  -4.48351       4.48351       1044.86       1049.34    
  19  0.484044     -0.725579      -48.1758       48.1758       1061.57       1109.75    
  20  0.362136      -1.01574      -67.4411       67.4411       1145.34       1212.78    
  21  0.826677     -0.190341      -12.6379       12.6379       1082.37       1095.01    
  22  0.383965     -0.957204      -63.5548       63.5548       1005.15       1068.70    
  23  0.403854     -0.906702      -60.2017       60.2017       1065.84       1126.04    
  24  0.375365     -0.979857      -65.0589       65.0589       1172.60       1237.66    
  25  0.335540      -1.09201      -72.5057       72.5057       1186.97       1259.48    
  26  0.744256     -0.295370      -19.6115       19.6115       1068.11       1087.72    
  27  0.611040     -0.492593      -32.7064       32.7064       1228.83       1261.53    
  28  0.361728      -1.01686      -67.5159       67.5159       1238.38       1305.90    
  29  0.381582     -0.963430      -63.9682       63.9682       1147.76       1211.73    
  30  0.738884E-01  -2.60520      -172.976       172.976       1211.72       1384.70    
  31  0.185722E-01  -3.98609      -264.662       264.662       1226.27       1490.93    
  32  0.470279     -0.754429      -50.0913       50.0913       1076.81       1126.90    
  33  0.499505     -0.694139      -46.0883       46.0883       1240.71       1286.80    
  34  0.641578     -0.443824      -29.4683       29.4683       1136.23       1165.69    
  35  0.462400     -0.771325      -51.2132       51.2132       1244.63       1295.84    
  36  0.953656     -0.474527E-01  -3.15068       3.15068       1217.14       1220.29    
  37  0.305321E-01  -3.48898      -231.655       231.655       1207.13       1438.79    
  38  0.281396      -1.26799      -84.1901       84.1901       1281.30       1365.49    
  39  0.642231     -0.442807      -29.4008       29.4008       1300.22       1329.63    
  40  0.506226     -0.680772      -45.2008       45.2008       1193.97       1239.17    
  41  0.152451      -1.88091      -124.886       124.886       1331.35       1456.23    
  42  0.825356     -0.191941      -12.7441       12.7441       1356.13       1368.88    
  43  0.895901     -0.109926      -7.29866       7.29866       1241.02       1248.32    
  44  0.706880     -0.346894      -23.0325       23.0325       1303.01       1326.04    
  45  0.810453     -0.210162      -13.9540       13.9540       1347.44       1361.39    
  46  0.463153     -0.769698      -51.1051       51.1051       1286.40       1337.51    
  47  0.333587      -1.09785      -72.8932       72.8932       1250.82       1323.72    
  48  0.588678     -0.529875      -35.1818       35.1818       1407.55       1442.73    
  49  0.724542E-01  -2.62480      -174.277       174.277       1157.00       1331.27    
  50  0.550549     -0.596839      -39.6279       39.6279       1405.23       1444.86    
  51  0.945764     -0.557622E-01  -3.70241       3.70241       1412.16       1415.87    
  52  0.903703E-01  -2.40384      -159.606       159.606       1189.08       1348.68    
  53  0.435583     -0.831070      -55.1800       55.1800       1394.24       1449.42    
  54  0.364079E-01  -3.31297      -219.969       219.969       1418.12       1638.09    
  55  0.801026     -0.221862      -14.7308       14.7308       1407.76       1422.49    
  56  0.440703     -0.819384      -54.4041       54.4041       1332.88       1387.28    
  57  0.585820     -0.534743      -35.5050       35.5050       1436.49       1472.00    
  58  0.874676     -0.133902      -8.89060       8.89060       1279.80       1288.69    
  59  0.709061     -0.343814      -22.8280       22.8280       1389.10       1411.93    
  60  0.937361     -0.646865E-01  -4.29494       4.29494       1437.49       1441.78    
  61  0.775497     -0.254252      -16.8814       16.8814       1439.42       1456.30    
  62  0.966192     -0.343929E-01  -2.28356       2.28356       1448.61       1450.90    
  63  0.521378     -0.651281      -43.2426       43.2426       1437.32       1480.57    
  64  0.162994      -1.81404      -120.446       120.446       1447.80       1568.25    
  65  0.732373     -0.311466      -20.6802       20.6802       1463.91       1484.59    
  66  0.845693     -0.167599      -11.1279       11.1279       1453.26       1464.38    
  67  0.227566      -1.48031      -98.2873       98.2873       1407.45       1505.73    
  68  0.985726     -0.143764E-01 -0.954542      0.954542       1445.71       1446.67    
  69  0.841574     -0.172481      -11.4521       11.4521       1536.88       1548.34    
  70  0.408663     -0.894863      -59.4156       59.4156       1562.04       1621.45    
  71  0.740436     -0.300516      -19.9531       19.9531       1560.83       1580.79    
  72  0.969580     -0.308926E-01  -2.05115       2.05115       1485.87       1487.92    
  73  0.345718      -1.06213      -70.5217       70.5217       1561.33       1631.85    
  74  0.145004      -1.93099      -128.211       128.211       1033.01       1161.22    
loop,thermsimp(1:2)        7   26.8468       220.466    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356       1051.56        129.44          0.65         30.09          1.68          0.05        161.91
Just calling func    0   0        161.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        7
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        8
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      355     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -12.1433       12.1433       928.402       940.546    
   2  0.610299     -0.493806      -32.7869       32.7869       978.997       1011.78    
   3  0.652915     -0.426308      -28.3053       28.3053       1013.96       1042.27    
   4  0.273016      -1.29823      -86.1974       86.1974       1013.25       1099.44    
   5  0.570853     -0.560623      -37.2233       37.2233       992.393       1029.62    
   6  0.107477E-01  -4.53306      -300.979       300.979       1044.86       1345.84    
   7  0.651717     -0.428145      -28.4272       28.4272       931.134       959.562    
   8  0.214404      -1.53989      -102.243       102.243       1057.86       1160.11    
   9  0.132680      -2.01982      -134.108       134.108       1005.15       1139.26    
  10  0.370727     -0.992290      -65.8844       65.8844       1042.84       1108.72    
  11  0.330444      -1.10732      -73.5218       73.5218       1039.39       1112.91    
  12  0.462713     -0.770647      -51.1682       51.1682       1068.11       1119.28    
  13  0.514022     -0.665489      -44.1860       44.1860       1082.37       1126.56    
  14  0.644984     -0.438530      -29.1168       29.1168       1061.57       1090.69    
  15  0.813975     -0.205826      -13.6661       13.6661       1030.06       1043.73    
  16  0.434803     -0.832863      -55.2990       55.2990       1031.58       1086.88    
  17  0.212985      -1.54653      -102.684       102.684       1065.84       1168.52    
  18  0.796179     -0.227931      -15.1338       15.1338       1076.81       1091.94    
  19  0.259948      -1.34727      -89.4540       89.4540       919.160       1008.61    
  20  0.526723     -0.641081      -42.5654       42.5654       1115.73       1158.29    
  21  0.392691     -0.934731      -62.0627       62.0627       1033.01       1095.08    
  22  0.949472     -0.518494E-01  -3.44261       3.44261       1136.23       1139.67    
  23  0.665479E-01  -2.70983      -179.923       179.923       927.369       1107.29    
  24  0.927466E-01  -2.37788      -157.883       157.883       1119.26       1277.15    
  25  0.630503     -0.461237      -30.6244       30.6244       974.423       1005.05    
  26  0.714749     -0.335823      -22.2974       22.2974       1147.76       1170.06    
  27  0.450999     -0.796290      -52.8707       52.8707       1145.34       1198.21    
  28  0.184997      -1.68742      -112.038       112.038       984.147       1096.18    
  29  0.989607     -0.104473E-01 -0.693664      0.693664       1217.14       1217.84    
  30  0.530766     -0.633434      -42.0577       42.0577       1172.60       1214.66    
  31  0.495227     -0.702738      -46.6592       46.6592       1193.97       1240.63    
  32  0.787696     -0.238642      -15.8450       15.8450       1241.02       1256.87    
  33  0.168123      -1.78306      -118.389       118.389       1186.97       1305.36    
  34  0.205580      -1.58192      -105.034       105.034       1228.83       1333.86    
  35  0.182087      -1.70327      -113.091       113.091       1240.71       1353.80    
  36  0.320489      -1.13791      -75.5529       75.5529       1279.80       1355.35    
  37  0.591526     -0.525050      -34.8614       34.8614       1244.63       1279.49    
  38  0.374258     -0.982811      -65.2550       65.2550       1238.38       1303.64    
  39  0.578871     -0.546675      -36.2972       36.2972       1250.82       1287.12    
  40  0.542113     -0.612280      -40.6532       40.6532       1303.01       1343.66    
  41  0.123399      -2.09233      -138.923       138.923       1300.22       1439.15    
  42  0.874747     -0.133820      -8.88518       8.88518       1157.00       1165.88    
  43  0.521146     -0.651725      -43.2722       43.2722       1286.40       1329.67    
  44  0.160493      -1.82950      -121.472       121.472       1189.08       1310.55    
  45  0.606451     -0.500131      -33.2068       33.2068       1347.44       1380.64    
  46  0.947463     -0.539676E-01  -3.58325       3.58325       1281.30       1284.88    
  47  0.187698      -1.67292      -111.076       111.076       1356.13       1467.21    
  48  0.157453      -1.84863      -122.742       122.742       1211.72       1334.47    
  49  0.411413     -0.888157      -58.9703       58.9703       1332.88       1391.85    
  50  0.399256     -0.918152      -60.9619       60.9619       1389.10       1450.07    
  51  0.629238     -0.463246      -30.7579       30.7579       1412.16       1442.92    
  52  0.831952     -0.183980      -12.2156       12.2156       1407.76       1419.98    
  53  0.677270     -0.389686      -25.8737       25.8737       1207.13       1233.01    
  54  0.937557     -0.644782E-01  -4.28112       4.28112       1437.49       1441.77    
  55  0.410617     -0.890095      -59.0991       59.0991       1407.55       1466.65    
  56  0.896761E-01  -2.41155      -160.118       160.118       1405.23       1565.35    
  57  0.757537     -0.277683      -18.4371       18.4371       1445.71       1464.15    
  58  0.893032     -0.113133      -7.51159       7.51159       1394.24       1401.75    
  59  0.689367E-02  -4.97715      -330.465       330.465       1448.61       1779.08    
  60  0.315133      -1.15476      -76.6720       76.6720       1331.35       1408.02    
  61  0.206555      -1.57719      -104.719       104.719       1439.42       1544.14    
  62  0.577131     -0.549685      -36.4971       36.4971       1453.26       1489.75    
  63  0.796209     -0.227894      -15.1313       15.1313       1436.49       1451.62    
  64  0.519424     -0.655035      -43.4919       43.4919       1437.32       1480.82    
  65  0.906043     -0.986690E-01  -6.55126       6.55126       1463.91       1470.46    
  66  0.112560      -2.18427      -145.028       145.028       1485.87       1630.90    
  67  0.104180      -2.26164      -150.164       150.164       1226.27       1376.44    
  68  0.972264     -0.281281E-01  -1.86760       1.86760       1407.45       1409.31    
  69  0.824404     -0.193095      -12.8208       12.8208       1536.88       1549.70    
  70  0.337178      -1.08714      -72.1823       72.1823       1447.80       1519.98    
  71  0.283334      -1.26113      -83.7344       83.7344       1560.83       1644.57    
  72  0.837969     -0.176774      -11.7371       11.7371       1562.04       1573.78    
  73  0.320393      -1.13821      -75.5727       75.5727       1561.33       1636.90    
  74  0.268462      -1.31505      -87.3142       87.3142       1051.56       1138.88    
loop,thermsimp(1:2)        8   12.1433       32.7869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357       1032.83        129.82          0.65         29.22          2.42          0.05        162.16
Just calling func    0   0        162.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1032.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        8
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:        9
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      356     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -109.199       109.199       928.402       1037.60    
   2  0.822950     -0.194860      -12.9380       12.9380       931.134       944.072    
   3  0.396787     -0.924357      -61.3739       61.3739       974.423       1035.80    
   4  0.141060      -1.95857      -130.042       130.042       919.160       1049.20    
   5  0.673747     -0.394901      -26.2200       26.2200       978.997       1005.22    
   6  0.142835      -1.94606      -129.211       129.211       992.393       1121.60    
   7  0.707555     -0.345940      -22.9691       22.9691       1013.96       1036.93    
   8  0.957483     -0.434474E-01  -2.88475       2.88475       1030.06       1032.95    
   9  0.524586     -0.645145      -42.8353       42.8353       1031.58       1074.41    
  10  0.692024     -0.368135      -24.4428       24.4428       1061.57       1086.01    
  11  0.936675E-01  -2.36800      -157.227       157.227       1076.81       1234.03    
  12  0.216270      -1.53123      -101.668       101.668       1033.01       1134.68    
  13  0.329369      -1.11058      -73.7383       73.7383       984.147       1057.88    
  14  0.670774     -0.399323      -26.5136       26.5136       1013.25       1039.76    
  15  0.263445      -1.33391      -88.5667       88.5667       927.369       1015.94    
  16  0.150248      -1.89547      -125.852       125.852       1042.84       1168.69    
  17  0.357034      -1.02992      -68.3832       68.3832       1039.39       1107.77    
  18  0.833286E-01  -2.48496      -164.992       164.992       1068.11       1233.10    
  19  0.431395     -0.840731      -55.8215       55.8215       1082.37       1138.19    
  20  0.304550      -1.18892      -78.9400       78.9400       1051.56       1130.50    
  21  0.930203     -0.723520E-01  -4.80391       4.80391       1005.15       1009.95    
  22  0.443091     -0.813979      -54.0452       54.0452       1136.23       1190.27    
  23  0.361548      -1.01736      -67.5490       67.5490       1115.73       1183.28    
  24  0.603851     -0.504427      -33.4921       33.4921       1057.86       1091.36    
  25  0.825014     -0.192355      -12.7716       12.7716       1157.00       1169.77    
  26  0.658742     -0.417424      -27.7154       27.7154       1065.84       1093.55    
  27  0.938632     -0.633319E-01  -4.20500       4.20500       1147.76       1151.97    
  28  0.264383E-01  -3.63294      -241.214       241.214       1145.34       1386.55    
  29  0.770543     -0.260660      -17.3069       17.3069       1172.60       1189.91    
  30  0.536385     -0.622903      -41.3585       41.3585       1217.14       1258.50    
  31  0.173997      -1.74872      -116.108       116.108       1207.13       1323.24    
  32  0.876286     -0.132063      -8.76849       8.76849       1193.97       1202.74    
  33  0.447573     -0.803915      -53.3770       53.3770       1241.02       1294.40    
  34  0.521740E-01  -2.95317      -196.080       196.080       1119.26       1315.34    
  35  0.509285     -0.674747      -44.8007       44.8007       1244.63       1289.43    
  36  0.135259      -2.00056      -132.830       132.830       1281.30       1414.13    
  37  0.238321      -1.43414      -95.2214       95.2214       1250.82       1346.05    
  38  0.146995      -1.91735      -127.305       127.305       1238.38       1365.69    
  39  0.166047      -1.79549      -119.214       119.214       1186.97       1306.19    
  40  0.830113     -0.186194      -12.3626       12.3626       1189.08       1201.44    
  41  0.638960     -0.447914      -29.7398       29.7398       1286.40       1316.14    
  42  0.156696      -1.85345      -123.062       123.062       1228.83       1351.89    
  43  0.956507     -0.444668E-01  -2.95243       2.95243       1211.72       1214.68    
  44  0.313979      -1.15843      -76.9155       76.9155       1303.01       1379.92    
  45  0.185265      -1.68597      -111.942       111.942       1044.86       1156.80    
  46  0.952300     -0.488757E-01  -3.24517       3.24517       1240.71       1243.96    
  47  0.181060      -1.70892      -113.466       113.466       1279.80       1393.27    
  48  0.969330     -0.311499E-01  -2.06824       2.06824       1226.27       1228.34    
  49  0.832772     -0.182996      -12.1502       12.1502       1347.44       1359.59    
  50  0.733500     -0.309927      -20.5780       20.5780       1332.88       1353.45    
  51  0.901211     -0.104016      -6.90626       6.90626       1394.24       1401.15    
  52  0.598700     -0.512995      -34.0610       34.0610       1331.35       1365.41    
  53  0.982368     -0.177897E-01  -1.18117       1.18117       1407.45       1408.63    
  54  0.244719      -1.40764      -93.4623       93.4623       1407.76       1501.23    
  55  0.824383     -0.193120      -12.8224       12.8224       1300.22       1313.05    
  56  0.755417     -0.280485      -18.6232       18.6232       1437.49       1456.11    
  57  0.548139     -0.601226      -39.9192       39.9192       1412.16       1452.08    
  58  0.886061     -0.120970      -8.03196       8.03196       1389.10       1397.14    
  59  0.678820     -0.387400      -25.7219       25.7219       1436.49       1462.21    
  60  0.435343     -0.831622      -55.2166       55.2166       1445.71       1500.93    
  61  0.917598     -0.859955E-01  -5.70979       5.70979       1407.55       1413.26    
  62  0.356725      -1.03079      -68.4408       68.4408       1356.13       1424.58    
  63  0.731877     -0.312142      -20.7251       20.7251       1463.91       1484.63    
  64  0.509090     -0.675130      -44.8262       44.8262       1437.32       1482.15    
  65  0.576928     -0.550038      -36.5205       36.5205       1453.26       1489.78    
  66  0.854239     -0.157545      -10.4604       10.4604       1447.80       1458.26    
  67  0.572427E-01  -2.86046      -189.924       189.924       1439.42       1629.34    
  68  0.975343     -0.249660E-01  -1.65765       1.65765       1536.88       1538.54    
  69  0.671870E-01  -2.70028      -179.288       179.288       1405.23       1584.52    
  70  0.154919      -1.86485      -123.819       123.819       1562.04       1685.86    
  71  0.805966     -0.215714      -14.3226       14.3226       1485.87       1500.19    
  72  0.906586     -0.980697E-01  -6.51147       6.51147       1561.33       1567.84    
  73  0.497247E-01  -3.00125      -199.272       199.272       1560.83       1760.10    
  74  0.366111      -1.00482      -66.7162       66.7162       1032.83       1099.54    
loop,thermsimp(1:2)        9   109.199       12.9380    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358        994.68        129.52          0.64         29.31          2.30          0.05        161.81
Just calling func    0   0        161.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    994.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:        9
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       10
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      357     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -43.9152       43.9152       931.134       975.050    
   2  0.677402     -0.389491      -25.8607       25.8607       978.997       1004.86    
   3  0.899541     -0.105871      -7.02943       7.02943       1005.15       1012.18    
   4  0.235706      -1.44517      -95.9539       95.9539       927.369       1023.32    
   5  0.194769      -1.63594      -108.621       108.621       1030.06       1138.68    
   6  0.814930     -0.204653      -13.5882       13.5882       974.423       988.011    
   7  0.727423E-01  -2.62083      -174.014       174.014       1013.96       1187.97    
   8  0.126759      -2.06547      -137.140       137.140       928.402       1065.54    
   9  0.592876     -0.522770      -34.7100       34.7100       1013.25       1047.96    
  10  0.131380      -2.02966      -134.762       134.762       919.160       1053.92    
  11  0.394760E-01  -3.23206      -214.597       214.597       984.147       1198.74    
  12  0.539964     -0.616252      -40.9169       40.9169       1031.58       1072.50    
  13  0.127256      -2.06155      -136.880       136.880       1061.57       1198.45    
  14  0.245583      -1.40412      -93.2283       93.2283       1057.86       1151.09    
  15  0.236145E-01  -3.74590      -248.714       248.714       1065.84       1314.55    
  16  0.791943     -0.233266      -15.4880       15.4880       1032.83       1048.32    
  17  0.223014      -1.50052      -99.6291       99.6291       1039.39       1139.02    
  18  0.943370     -0.582970E-01  -3.87070       3.87070       992.393       996.264    
  19  0.844237     -0.169322      -11.2424       11.2424       1051.56       1062.81    
  20  0.600301     -0.510323      -33.8836       33.8836       1033.01       1066.90    
  21  0.742625E-01  -2.60015      -172.640       172.640       1082.37       1255.01    
  22  0.288925E-01  -3.54417      -235.320       235.320       1147.76       1383.08    
  23  0.325834      -1.12137      -74.4547       74.4547       1044.86       1119.31    
  24  0.317147      -1.14839      -76.2488       76.2488       1042.84       1119.09    
  25  0.655873     -0.421788      -28.0052       28.0052       1157.00       1185.00    
  26  0.259034      -1.35080      -89.6878       89.6878       1115.73       1205.41    
  27  0.639742E-01  -2.74927      -182.542       182.542       1172.60       1355.15    
  28  0.110416E-01  -4.50609      -299.187       299.187       1136.23       1435.41    
  29  0.768965E-01  -2.56529      -170.326       170.326       1189.08       1359.40    
  30  0.757182     -0.278151      -18.4682       18.4682       1193.97       1212.44    
  31  0.788615     -0.237477      -15.7676       15.7676       1211.72       1227.49    
  32  0.724297     -0.322554      -21.4164       21.4164       1226.27       1247.69    
  33  0.807261     -0.214109      -14.2160       14.2160       1068.11       1082.33    
  34  0.356497      -1.03143      -68.4830       68.4830       1076.81       1145.29    
  35  0.685602     -0.377458      -25.0618       25.0618       1240.71       1265.77    
  36  0.681617     -0.383288      -25.4489       25.4489       1217.14       1242.59    
  37  0.323748      -1.12779      -74.8811       74.8811       1244.63       1319.51    
  38  0.622817     -0.473503      -31.4389       31.4389       1241.02       1272.46    
  39  0.534584     -0.626266      -41.5818       41.5818       1186.97       1228.55    
  40  0.130255E-02  -6.64343      -441.099       441.099       1300.22       1741.32    
  41  0.357398      -1.02891      -68.3155       68.3155       1119.26       1187.58    
  42  0.290986      -1.23448      -81.9650       81.9650       1286.40       1368.37    
  43  0.182566      -1.70064      -112.917       112.917       1207.13       1320.05    
  44  0.695597     -0.362984      -24.1008       24.1008       1250.82       1274.93    
  45  0.612287     -0.490555      -32.5710       32.5710       1228.83       1261.40    
  46  0.845780     -0.167496      -11.1211       11.1211       1332.88       1344.00    
  47  0.628042     -0.465149      -30.8842       30.8842       1347.44       1378.32    
  48  0.830233     -0.186049      -12.3530       12.3530       1331.35       1343.70    
  49  0.373260     -0.985481      -65.4323       65.4323       1238.38       1303.82    
  50  0.711640     -0.340183      -22.5869       22.5869       1303.01       1325.60    
  51  0.449400     -0.799842      -53.1065       53.1065       1145.34       1198.44    
  52  0.253029      -1.37425      -91.2451       91.2451       1279.80       1371.05    
  53  0.956034     -0.449619E-01  -2.98531       2.98531       1389.10       1392.09    
  54  0.544467     -0.607949      -40.3656       40.3656       1394.24       1434.61    
  55  0.419963     -0.867588      -57.6046       57.6046       1407.45       1465.05    
  56  0.372696E-02  -5.59216      -371.299       371.299       1407.55       1778.85    
  57  0.519921     -0.654079      -43.4284       43.4284       1281.30       1324.73    
  58  0.563761     -0.573124      -38.0533       38.0533       1356.13       1394.19    
  59  0.231567      -1.46289      -97.1303       97.1303       1412.16       1509.29    
  60  0.736257     -0.306176      -20.3289       20.3289       1437.49       1457.82    
  61  0.408436E-01  -3.19801      -212.336       212.336       1447.80       1660.14    
  62  0.111120      -2.19714      -145.882       145.882       1436.49       1582.37    
  63  0.988251     -0.118183E-01 -0.784693      0.784693       1437.32       1438.11    
  64  0.107317E-01  -4.53455      -301.078       301.078       1463.91       1764.98    
  65  0.896884E-01  -2.41141      -160.109       160.109       1453.26       1613.36    
  66  0.190396      -1.65865      -110.128       110.128       1485.87       1596.00    
  67  0.978391     -0.218460E-01  -1.45049       1.45049       1445.71       1447.16    
  68  0.471431     -0.751983      -49.9289       49.9289       1407.76       1457.69    
  69  0.642804     -0.441915      -29.3415       29.3415       1536.88       1566.23    
  70  0.227213      -1.48187      -98.3905       98.3905       1561.33       1659.72    
  71  0.348332      -1.05460      -70.0215       70.0215       1405.23       1475.25    
  72  0.793152E-01  -2.53433      -168.270       168.270       1439.42       1607.69    
  73  0.602438E-01  -2.80936      -186.531       186.531       1562.04       1748.57    
  74  0.865494E-01  -2.44704      -162.474       162.474       994.676       1157.15    
loop,thermsimp(1:2)       10   43.9152       25.8607    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359       3083.00        128.52          0.62         27.20          5.05          0.02        161.42
Just calling func    0   0        161.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    360       1375.13        129.21          0.68         30.36          1.05          0.04        161.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1375.13
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       10
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       11
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      359     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -20.2383       20.2383       931.134       951.373    
   2  0.372515     -0.987477      -65.5649       65.5649       974.423       1039.99    
   3  0.197611E-01  -3.92404      -260.542       260.542       992.393       1252.94    
   4  0.939239     -0.626858E-01  -4.16211       4.16211       978.997       983.159    
   5  0.212506      -1.54879      -102.834       102.834       1005.15       1107.98    
   6  0.141762      -1.95360      -129.712       129.712       927.369       1057.08    
   7  0.183632      -1.69482      -112.530       112.530       1013.25       1125.78    
   8  0.479067     -0.735915      -48.8620       48.8620       1032.83       1081.69    
   9  0.113189      -2.17870      -144.658       144.658       919.160       1063.82    
  10  0.314091      -1.15807      -76.8917       76.8917       1051.56       1128.46    
  11  0.457761     -0.781409      -51.8827       51.8827       928.402       980.285    
  12  0.923744     -0.793200E-01  -5.26656       5.26656       1033.01       1038.28    
  13  0.805387     -0.216433      -14.3703       14.3703       1031.58       1045.95    
  14  0.979257     -0.209609E-01  -1.39172       1.39172       1068.11       1069.50    
  15  0.634716E-01  -2.75716      -183.065       183.065       1042.84       1225.90    
  16  0.502866     -0.687432      -45.6430       45.6430       1044.86       1090.50    
  17  0.844986     -0.168435      -11.1835       11.1835       1030.06       1041.25    
  18  0.548347     -0.600848      -39.8941       39.8941       1039.39       1079.28    
  19  0.825472     -0.191800      -12.7348       12.7348       1076.81       1089.54    
  20  0.806424     -0.215145      -14.2848       14.2848       1057.86       1072.15    
  21  0.497450E-01  -3.00085      -199.245       199.245       994.676       1193.92    
  22  0.407289     -0.898233      -59.6394       59.6394       1157.00       1216.64    
  23  0.522833     -0.648493      -43.0575       43.0575       1119.26       1162.32    
  24  0.763038     -0.270448      -17.9568       17.9568       1013.96       1031.92    
  25  0.706120     -0.347970      -23.1040       23.1040       1145.34       1168.44    
  26  0.540862     -0.614591      -40.8066       40.8066       1061.57       1102.38    
  27  0.807340E-01  -2.51660      -167.093       167.093       984.147       1151.24    
  28  0.310756      -1.16875      -77.6005       77.6005       1115.73       1193.33    
  29  0.689192     -0.372235      -24.7151       24.7151       1193.97       1218.69    
  30  0.634973     -0.454174      -30.1555       30.1555       1211.72       1241.88    
  31  0.598432     -0.513442      -34.0906       34.0906       1186.97       1221.06    
  32  0.393639     -0.932321      -61.9027       61.9027       1217.14       1279.05    
  33  0.369460     -0.995714      -66.1118       66.1118       1226.27       1292.38    
  34  0.129274      -2.04582      -135.835       135.835       1082.37       1218.20    
  35  0.250376      -1.38479      -91.9451       91.9451       1228.83       1320.77    
  36  0.536641     -0.622425      -41.3267       41.3267       1240.71       1282.04    
  37  0.495942     -0.701296      -46.5635       46.5635       1241.02       1287.59    
  38  0.650684     -0.429731      -28.5326       28.5326       1250.82       1279.36    
  39  0.889212     -0.117420      -7.79625       7.79625       1238.38       1246.18    
  40  0.314936      -1.15539      -76.7134       76.7134       1065.84       1142.55    
  41  0.943567     -0.580875E-01  -3.85680       3.85680       1244.63       1248.49    
  42  0.672016     -0.397473      -26.3907       26.3907       1207.13       1233.52    
  43  0.133907      -2.01061      -133.497       133.497       1281.30       1414.80    
  44  0.259017      -1.35086      -89.6921       89.6921       1303.01       1392.70    
  45  0.112444      -2.18530      -145.096       145.096       1331.35       1476.44    
  46  0.235994      -1.44395      -95.8728       95.8728       1332.88       1428.75    
  47  0.879651     -0.128231      -8.51403       8.51403       1172.60       1181.12    
  48  0.750555     -0.286942      -19.0519       19.0519       1189.08       1208.13    
  49  0.996491E-01  -2.30610      -153.117       153.117       1286.40       1439.52    
  50  0.100853      -2.29409      -152.319       152.319       1279.80       1432.12    
  51  0.520543     -0.652882      -43.3490       43.3490       1347.44       1390.79    
  52  0.886361E-01  -2.42322      -160.893       160.893       1147.76       1308.65    
  53  0.152463      -1.88083      -124.880       124.880       1389.10       1513.98    
  54  0.286446E-03  -8.15796      -541.659       541.659       1356.13       1897.79    
  55  0.472863     -0.748950      -49.7275       49.7275       1394.24       1443.97    
  56  0.907202     -0.973898E-01  -6.46632       6.46632       1136.23       1142.69    
  57  0.194253      -1.63859      -108.797       108.797       1437.32       1546.12    
  58  0.560994     -0.578045      -38.3801       38.3801       1445.71       1484.09    
  59  0.316514      -1.15039      -76.3814       76.3814       1407.76       1484.15    
  60  0.538541E-02  -5.22406      -346.858       346.858       1437.49       1784.35    
  61  0.414112     -0.881619      -58.5363       58.5363       1407.45       1465.98    
  62  0.281101      -1.26904      -84.2596       84.2596       1405.23       1489.49    
  63  0.550613     -0.596724      -39.6203       39.6203       1412.16       1451.78    
  64  0.236016      -1.44386      -95.8668       95.8668       1536.88       1632.75    
  65  0.330497E-01  -3.40974      -226.394       226.394       1436.49       1662.89    
  66  0.353510      -1.03984      -69.0418       69.0418       1485.87       1554.91    
  67  0.379763E-01  -3.27079      -217.169       217.169       1439.42       1656.59    
  68  0.431178     -0.841233      -55.8548       55.8548       1453.26       1509.11    
  69  0.345799      -1.06190      -70.5061       70.5061       1561.33       1631.83    
  70  0.244727      -1.40761      -93.4603       93.4603       1447.80       1541.26    
  71  0.755301     -0.280639      -18.6334       18.6334       1300.22       1318.86    
  72  0.229081      -1.47368      -97.8470       97.8470       1562.04       1659.89    
  73  0.697452     -0.360322      -23.9240       23.9240       1463.91       1487.83    
  74  0.948225     -0.531635E-01  -3.52986       3.52986       1375.13       1378.66    
loop,thermsimp(1:2)       11   20.2383       65.5649    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361       1022.04        129.68          0.65         30.32          1.06          0.04        161.75
Just calling func    0   0        161.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    1022.0        2.512     -1.133      4.174     -100.0     0.6710    
                     -0.9690      2.335     -100.0      2.693      1.440    
                     -0.1165     0.1192      2.009      0.000     0.5920    
                      -1.231     -20.00      0.000      0.000     0.7658    

                      -2.714      5519.      9689.     -560.9     -1451.    
                      -3.708     -6.397     -4.782     -15.33     -5.168    
                      -13.16     -3.008     -2009.      0.000     -317.6    

                      -2560.      3724.      1779.      1979.      2774.    
                      -4232.    -0.1615    -0.3516      0.000    -0.1563    
                     -0.3139    -0.4849    -0.1962    -0.2224    -0.1975    

                     -0.7060     -1.757      1.382    -0.1829E-03 0.4669E-01
                      0.8541E-01-0.7261E-01-0.1359    -0.1115    -0.3146E-01
                     -0.2638    -0.8674E-01-0.3877     -2.173      1.382    

                      -1.671     -1.562     0.1500E+05 0.1500E+05  0.000    
                       0.000      9.021      8.884      0.000     0.7231E-04
                      0.1220E-01 0.3561      9.114      9.003    -0.1826E+05

                      0.8356E-04 0.3760     0.2588      9.731      8.600    
                      -8947.    -0.1448E-03 -1.013     0.2098      9.469    
                       9.299     -4278.     0.1163E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1022.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       11
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       12
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      360     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -16.2004       16.2004       931.134       947.335    
   2  0.973841     -0.265069E-01  -1.75996       1.75996       928.402       930.162    
   3  0.294662      -1.22193      -81.1313       81.1313       978.997       1060.13    
   4  0.702628     -0.352928      -23.4331       23.4331       1013.96       1037.39    
   5  0.763280     -0.270131      -17.9357       17.9357       1033.01       1050.95    
   6  0.578080E-01  -2.85063      -189.271       189.271       974.423       1163.69    
   7  0.834037     -0.181478      -12.0495       12.0495       1030.06       1042.11    
   8  0.976312     -0.239730E-01  -1.59172       1.59172       1031.58       1033.17    
   9  0.603670     -0.504728      -33.5121       33.5121       927.369       960.881    
  10  0.458546     -0.779695      -51.7689       51.7689       919.160       970.929    
  11  0.201917      -1.59990      -106.227       106.227       1068.11       1174.34    
  12  0.362727      -1.01411      -67.3328       67.3328       1057.86       1125.20    
  13  0.466909E-01  -3.06421      -203.452       203.452       1039.39       1242.84    
  14  0.602192     -0.507180      -33.6749       33.6749       1032.83       1066.50    
  15  0.332545      -1.10098      -73.1011       73.1011       1076.81       1149.91    
  16  0.758378     -0.276574      -18.3635       18.3635       1044.86       1063.22    
  17  0.834950     -0.180384      -11.9768       11.9768       1061.57       1073.55    
  18  0.910410     -0.938599E-01  -6.23195       6.23195       1005.15       1011.38    
  19  0.825418E-01  -2.49445      -165.622       165.622       1013.25       1178.87    
  20  0.639611     -0.446894      -29.6721       29.6721       1051.56       1081.24    
  21  0.345418      -1.06300      -70.5793       70.5793       1065.84       1136.42    
  22  0.961674     -0.390802E-01  -2.59478       2.59478       1136.23       1138.82    
  23  0.274135      -1.29413      -85.9258       85.9258       984.147       1070.07    
  24  0.275236      -1.29013      -85.6596       85.6596       1119.26       1204.92    
  25  0.373550     -0.984704      -65.3807       65.3807       1145.34       1210.72    
  26  0.407178     -0.898505      -59.6574       59.6574       1172.60       1232.26    
  27  0.908773     -0.956602E-01  -6.35149       6.35149       1115.73       1122.08    
  28  0.578518     -0.547286      -36.3378       36.3378       994.676       1031.01    
  29  0.674288     -0.394098      -26.1667       26.1667       1189.08       1215.25    
  30  0.758166     -0.276853      -18.3820       18.3820       1157.00       1175.38    
  31  0.764349E-01  -2.57132      -170.726       170.726       1082.37       1253.10    
  32  0.962342     -0.383853E-01  -2.54864       2.54864       1193.97       1196.52    
  33  0.918960     -0.845125E-01  -5.61132       5.61132       1186.97       1192.58    
  34  0.617888     -0.481448      -31.9664       31.9664       1042.84       1074.80    
  35  0.227646      -1.47996      -98.2641       98.2641       1207.13       1305.40    
  36  0.262001      -1.33941      -88.9316       88.9316       1211.72       1300.66    
  37  0.589438     -0.528586      -35.0962       35.0962       1238.38       1273.48    
  38  0.201352      -1.60270      -106.413       106.413       1244.63       1351.04    
  39  0.350279      -1.04903      -69.6515       69.6515       992.393       1062.04    
  40  0.647374     -0.434831      -28.8712       28.8712       1217.14       1246.01    
  41  0.604508     -0.503341      -33.4200       33.4200       1250.82       1284.24    
  42  0.700946     -0.355325      -23.5923       23.5923       1240.71       1264.30    
  43  0.575270     -0.552915      -36.7115       36.7115       1241.02       1277.73    
  44  0.554419     -0.589835      -39.1629       39.1629       1226.27       1265.44    
  45  0.375300     -0.980029      -65.0703       65.0703       1147.76       1212.83    
  46  0.605541     -0.501632      -33.3065       33.3065       1300.22       1333.53    
  47  0.109847      -2.20867      -146.647       146.647       1228.83       1375.47    
  48  0.553505     -0.591485      -39.2724       39.2724       1375.13       1414.40    
  49  0.412268     -0.886082      -58.8326       58.8326       1347.44       1406.27    
  50  0.664246     -0.409102      -27.1629       27.1629       1303.01       1330.17    
  51  0.707719     -0.345708      -22.9537       22.9537       1281.30       1304.25    
  52  0.750886     -0.286501      -19.0226       19.0226       1332.88       1351.90    
  53  0.339698      -1.07970      -71.6879       71.6879       1279.80       1351.49    
  54  0.849457     -0.163157      -10.8331       10.8331       1286.40       1297.24    
  55  0.206681E-02  -6.18175      -410.445       410.445       1394.24       1804.69    
  56  0.251051      -1.38210      -91.7662       91.7662       1412.16       1503.93    
  57  0.224827      -1.49242      -99.0915       99.0915       1407.45       1506.54    
  58  0.335724      -1.09147      -72.4694       72.4694       1331.35       1403.82    
  59  0.157522      -1.84819      -122.713       122.713       1445.71       1568.42    
  60  0.630796E-01  -2.76336      -183.477       183.477       1407.76       1591.24    
  61  0.383657     -0.958005      -63.6080       63.6080       1463.91       1527.51    
  62  0.777557     -0.251598      -16.7052       16.7052       1405.23       1421.93    
  63  0.370382     -0.993221      -65.9462       65.9462       1453.26       1519.20    
  64  0.459130     -0.778421      -51.6843       51.6843       1389.10       1440.79    
  65  0.763871     -0.269356      -17.8843       17.8843       1447.80       1465.68    
  66  0.649642     -0.431333      -28.6389       28.6389       1437.32       1465.96    
  67  0.834635     -0.180761      -12.0018       12.0018       1485.87       1497.87    
  68  0.119884      -2.12123      -140.842       140.842       1561.33       1702.17    
  69  0.434414     -0.833757      -55.3584       55.3584       1536.88       1592.24    
  70  0.237182      -1.43893      -95.5395       95.5395       1439.42       1534.96    
  71  0.926856     -0.759573E-01  -5.04329       5.04329       1562.04       1567.08    
  72  0.857919     -0.153246      -10.1750       10.1750       1436.49       1446.67    
  73  0.274941      -1.29120      -85.7309       85.7309       1437.49       1523.22    
  74  0.858875     -0.152131      -10.1010       10.1010       1022.04       1032.14    
loop,thermsimp(1:2)       12   16.2004       1.75996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362       1449.84        129.70          0.66         30.25          0.90          0.05        161.57
Just calling func    0   0        161.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1449.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       12
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       13
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      361     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01  -2.41381       2.41381       928.402       930.816    
   2  0.963371     -0.373169E-01  -2.47770       2.47770       931.134       933.612    
   3  0.851172E-02  -4.76631      -316.466       316.466       927.369       1243.83    
   4  0.731929E-01  -2.61466      -173.604       173.604       919.160       1092.76    
   5  0.491869     -0.709543      -47.1111       47.1111       1005.15       1052.26    
   6  0.625436     -0.469306      -31.1602       31.1602       994.676       1025.84    
   7  0.139469      -1.96991      -130.795       130.795       1022.04       1152.84    
   8  0.464987     -0.765746      -50.8427       50.8427       1031.58       1082.42    
   9  0.192956      -1.64529      -109.241       109.241       1013.96       1123.20    
  10  0.184589E-01  -3.99221      -265.068       265.068       1030.06       1295.13    
  11  0.327387      -1.11661      -74.1389       74.1389       1033.01       1107.15    
  12  0.447570     -0.803921      -53.3774       53.3774       978.997       1032.37    
  13  0.282132      -1.26538      -84.0166       84.0166       992.393       1076.41    
  14  0.991234     -0.880510E-02 -0.584626      0.584626       1044.86       1045.44    
  15  0.574009     -0.555110      -36.8573       36.8573       1032.83       1069.68    
  16  0.884017     -0.123279      -8.18525       8.18525       984.147       992.332    
  17  0.332578      -1.10088      -73.0945       73.0945       1061.57       1134.67    
  18  0.294524      -1.22240      -81.1626       81.1626       1042.84       1124.00    
  19  0.865605     -0.144326      -9.58274       9.58274       1051.56       1061.15    
  20  0.441883E-01  -3.11930      -207.110       207.110       1115.73       1322.84    
  21  0.652915     -0.426309      -28.3053       28.3053       1057.86       1086.17    
  22  0.712636E-01  -2.64137      -175.377       175.377       1065.84       1241.21    
  23  0.211397      -1.55402      -103.181       103.181       1136.23       1239.41    
  24  0.836672E-01  -2.48091      -164.723       164.723       1076.81       1241.53    
  25  0.397953     -0.921422      -61.1790       61.1790       974.423       1035.60    
  26  0.545442     -0.606159      -40.2468       40.2468       1068.11       1108.36    
  27  0.628874     -0.463825      -30.7963       30.7963       1157.00       1187.79    
  28  0.243035      -1.41455      -93.9210       93.9210       1013.25       1107.17    
  29  0.700237     -0.356336      -23.6594       23.6594       1186.97       1210.63    
  30  0.887974     -0.118813      -7.88875       7.88875       1193.97       1201.86    
  31  0.354481      -1.03710      -68.8596       68.8596       1119.26       1188.12    
  32  0.579479     -0.545626      -36.2276       36.2276       1145.34       1181.56    
  33  0.873601E-01  -2.43772      -161.855       161.855       1147.76       1309.62    
  34  0.414510     -0.880658      -58.4725       58.4725       1189.08       1247.55    
  35  0.263485      -1.33376      -88.5567       88.5567       1172.60       1261.16    
  36  0.174560E-01  -4.04807      -268.777       268.777       1039.39       1308.17    
  37  0.461287     -0.773735      -51.3732       51.3732       1217.14       1268.52    
  38  0.914554     -0.893185E-01  -5.93042       5.93042       1082.37       1088.30    
  39  0.551497     -0.595119      -39.5137       39.5137       1240.71       1280.22    
  40  0.751145     -0.286157      -18.9998       18.9998       1226.27       1245.27    
  41  0.838814     -0.175766      -11.6702       11.6702       1238.38       1250.05    
  42  0.494321     -0.704571      -46.7809       46.7809       1241.02       1287.80    
  43  0.878137     -0.129953      -8.62837       8.62837       1250.82       1259.45    
  44  0.249667      -1.38763      -92.1334       92.1334       1286.40       1378.54    
  45  0.569995     -0.562128      -37.3232       37.3232       1211.72       1249.05    
  46  0.338221      -1.08406      -71.9774       71.9774       1281.30       1353.28    
  47  0.536421     -0.622836      -41.3540       41.3540       1207.13       1248.49    
  48  0.482027     -0.729755      -48.4530       48.4530       1303.01       1351.46    
  49  0.436505     -0.828955      -55.0395       55.0395       1300.22       1355.26    
  50  0.225116      -1.49114      -99.0063       99.0063       1244.63       1343.64    
  51  0.126546      -2.06715      -137.251       137.251       1279.80       1417.05    
  52  0.182898      -1.69882      -112.796       112.796       1332.88       1445.67    
  53  0.114159      -2.17017      -144.091       144.091       1228.83       1372.92    
  54  0.582926     -0.539695      -35.8337       35.8337       1331.35       1367.18    
  55  0.583079     -0.539432      -35.8163       35.8163       1347.44       1383.25    
  56  0.430119     -0.843693      -56.0181       56.0181       1375.13       1431.15    
  57  0.468275     -0.758699      -50.3748       50.3748       1405.23       1455.60    
  58  0.323186      -1.12953      -74.9964       74.9964       1389.10       1464.10    
  59  0.999190E-01  -2.30340      -152.937       152.937       1436.49       1589.43    
  60  0.710279     -0.342098      -22.7140       22.7140       1447.80       1470.51    
  61  0.316311      -1.15103      -76.4242       76.4242       1437.32       1513.75    
  62  0.972639     -0.277425E-01  -1.84200       1.84200       1485.87       1487.71    
  63  0.547984E-01  -2.90409      -192.821       192.821       1412.16       1604.99    
  64  0.658251     -0.418168      -27.7648       27.7648       1407.45       1435.21    
  65  0.364963      -1.00796      -66.9248       66.9248       1453.26       1520.18    
  66  0.517613     -0.658528      -43.7239       43.7239       1437.49       1481.21    
  67  0.888720     -0.117973      -7.83300       7.83300       1463.91       1471.74    
  68  0.957228     -0.437139E-01  -2.90244       2.90244       1439.42       1442.32    
  69  0.307204E-01  -3.48283      -231.247       231.247       1562.04       1793.29    
  70  0.800807     -0.222136      -14.7490       14.7490       1445.71       1460.46    
  71  0.167412      -1.78730      -118.670       118.670       1407.76       1526.43    
  72  0.128048      -2.05535      -136.468       136.468       1536.88       1673.35    
  73  0.122242      -2.10175      -139.549       139.549       1561.33       1700.88    
  74  0.701370     -0.354720      -23.5521       23.5521       1449.84       1473.40    
loop,thermsimp(1:2)       13   2.41381       2.47770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363       1584.87        129.37          0.65         30.21          1.50          0.05        161.78
Just calling func    0   0        161.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1584.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       13
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       14
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      362     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -41.3910       41.3910       928.402       969.793    
   2  0.902010     -0.103129      -6.84741       6.84741       931.134       937.982    
   3  0.918906     -0.845717E-01  -5.61525       5.61525       984.147       989.762    
   4  0.300977E-01  -3.50330      -232.607       232.607       994.676       1227.28    
   5  0.180939      -1.70960      -113.511       113.511       978.997       1092.51    
   6  0.996736     -0.326981E-02 -0.217103      0.217103       974.423       974.640    
   7  0.974749     -0.255749E-01  -1.69808       1.69808       1044.86       1046.55    
   8  0.259085      -1.35060      -89.6748       89.6748       1005.15       1094.82    
   9  0.237439      -1.43784      -95.4676       95.4676       1051.56       1147.03    
  10  0.733816     -0.309497      -20.5495       20.5495       1032.83       1053.38    
  11  0.458028     -0.780824      -51.8439       51.8439       992.393       1044.24    
  12  0.623300     -0.472727      -31.3873       31.3873       1031.58       1062.97    
  13  0.789074     -0.236895      -15.7290       15.7290       1057.86       1073.59    
  14  0.718847     -0.330107      -21.9179       21.9179       1082.37       1104.29    
  15  0.414258     -0.881266      -58.5128       58.5128       919.160       977.673    
  16  0.121880E-01  -4.40730      -292.629       292.629       1033.01       1325.64    
  17  0.976927     -0.233433E-01  -1.54991       1.54991       1013.25       1014.80    
  18  0.998133     -0.186873E-02 -0.124077      0.124077       1068.11       1068.23    
  19  0.582806     -0.539901      -35.8474       35.8474       1013.96       1049.81    
  20  0.461010     -0.774335      -51.4130       51.4130       1042.84       1094.25    
  21  0.748404     -0.289812      -19.2424       19.2424       1061.57       1080.81    
  22  0.627394     -0.466180      -30.9526       30.9526       1022.04       1052.99    
  23  0.823247     -0.194499      -12.9140       12.9140       1145.34       1158.25    
  24  0.696302     -0.361971      -24.0336       24.0336       1157.00       1181.03    
  25  0.571207     -0.560004      -37.1822       37.1822       1119.26       1156.44    
  26  0.189272      -1.66457      -110.521       110.521       1193.97       1304.49    
  27  0.534816     -0.625833      -41.5530       41.5530       1186.97       1228.52    
  28  0.846241     -0.166951      -11.0849       11.0849       1136.23       1147.31    
  29  0.157466      -1.84855      -122.737       122.737       1065.84       1188.57    
  30  0.123756      -2.08945      -138.731       138.731       1076.81       1215.54    
  31  0.458067     -0.780739      -51.8382       51.8382       927.369       979.207    
  32  0.989772     -0.102804E-01 -0.682579      0.682579       1226.27       1226.96    
  33  0.292614      -1.22890      -81.5944       81.5944       1189.08       1270.67    
  34  0.707885     -0.345474      -22.9382       22.9382       1207.13       1230.07    
  35  0.686290     -0.376455      -24.9952       24.9952       1211.72       1236.72    
  36  0.752747     -0.284026      -18.8583       18.8583       1238.38       1257.24    
  37  0.577950E-01  -2.85085      -189.286       189.286       1250.82       1440.11    
  38  0.496568E-02  -5.30521      -352.246       352.246       1172.60       1524.85    
  39  0.632817     -0.457575      -30.3813       30.3813       1217.14       1247.52    
  40  0.306568      -1.18232      -78.5014       78.5014       1240.71       1319.21    
  41  0.800757     -0.222198      -14.7531       14.7531       1241.02       1255.77    
  42  0.754206     -0.282090      -18.7297       18.7297       1030.06       1048.79    
  43  0.875958     -0.132437      -8.79336       8.79336       1039.39       1048.18    
  44  0.411581     -0.887750      -58.9434       58.9434       1147.76       1206.71    
  45  0.784837     -0.242279      -16.0865       16.0865       1115.73       1131.81    
  46  0.615964     -0.484567      -32.1735       32.1735       1244.63       1276.80    
  47  0.427318     -0.850227      -56.4520       56.4520       1303.01       1359.46    
  48  0.373288     -0.985405      -65.4273       65.4273       1281.30       1346.73    
  49  0.118712      -2.13106      -141.494       141.494       1300.22       1441.72    
  50  0.465204     -0.765279      -50.8117       50.8117       1331.35       1382.16    
  51  0.361628      -1.01714      -67.5343       67.5343       1228.83       1296.36    
  52  0.625886     -0.468587      -31.1125       31.1125       1286.40       1317.52    
  53  0.164441      -1.80521      -119.859       119.859       1347.44       1467.30    
  54  0.311940      -1.16494      -77.3480       77.3480       1279.80       1357.15    
  55  0.269725E-01  -3.61294      -239.886       239.886       1375.13       1615.01    
  56  0.242465      -1.41690      -94.0769       94.0769       1407.45       1501.52    
  57  0.263333      -1.33434      -88.5951       88.5951       1439.42       1528.02    
  58  0.214624E-02  -6.14404      -407.941       407.941       1332.88       1740.82    
  59  0.932315     -0.700843E-01  -4.65334       4.65334       1405.23       1409.88    
  60  0.622961     -0.473272      -31.4235       31.4235       1445.71       1477.13    
  61  0.269930      -1.30959      -86.9522       86.9522       1389.10       1476.06    
  62  0.298039      -1.21053      -80.3748       80.3748       1447.80       1528.17    
  63  0.327337      -1.11676      -74.1490       74.1490       1463.91       1538.05    
  64  0.789470     -0.236394      -15.6957       15.6957       1449.84       1465.54    
  65  0.239818      -1.42788      -94.8057       94.8057       1437.49       1532.30    
  66  0.753924     -0.282464      -18.7546       18.7546       1485.87       1504.62    
  67  0.407638     -0.897375      -59.5824       59.5824       1437.32       1496.91    
  68  0.465961     -0.763653      -50.7038       50.7038       1453.26       1503.96    
  69  0.191020      -1.65538      -109.911       109.911       1407.76       1517.67    
  70  0.586001     -0.534433      -35.4844       35.4844       1436.49       1471.98    
  71  0.255262      -1.36546      -90.6617       90.6617       1412.16       1502.83    
  72  0.944354     -0.572545E-01  -3.80149       3.80149       1536.88       1540.69    
  73  0.911456     -0.927122E-01  -6.15575       6.15575       1561.33       1567.48    
  74  0.579605     -0.545408      -36.2131       36.2131       1584.87       1621.08    
loop,thermsimp(1:2)       14   41.3910       6.84741    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364       1101.44        129.85          0.66         29.98          1.51          0.05        162.04
Just calling func    0   0        162.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1101.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       14
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       15
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      363     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -103.594       103.594       931.134       1034.73    
   2  0.682169     -0.382478      -25.3951       25.3951       928.402       953.797    
   3  0.831163     -0.184930      -12.2787       12.2787       974.423       986.701    
   4  0.625179     -0.469718      -31.1875       31.1875       919.160       950.347    
   5  0.907522     -0.970376E-01  -6.44294       6.44294       927.369       933.812    
   6  0.406703     -0.899672      -59.7349       59.7349       984.147       1043.88    
   7  0.463060     -0.769899      -51.1184       51.1184       1013.25       1064.36    
   8  0.206056      -1.57961      -104.880       104.880       992.393       1097.27    
   9  0.303716      -1.19166      -79.1220       79.1220       1044.86       1123.98    
  10  0.843889     -0.169734      -11.2697       11.2697       1039.39       1050.66    
  11  0.273678      -1.29580      -86.0365       86.0365       1030.06       1116.10    
  12  0.571842     -0.558892      -37.1084       37.1084       1013.96       1051.07    
  13  0.803131     -0.219238      -14.5566       14.5566       1022.04       1036.60    
  14  0.330375      -1.10753      -73.5357       73.5357       1032.83       1106.36    
  15  0.155557      -1.86074      -123.547       123.547       1031.58       1155.13    
  16  0.878823     -0.129172      -8.57654       8.57654       1068.11       1076.69    
  17  0.781654     -0.246343      -16.3563       16.3563       1057.86       1074.22    
  18  0.782655     -0.245064      -16.2713       16.2713       1061.57       1077.84    
  19  0.682155     -0.382499      -25.3965       25.3965       978.997       1004.39    
  20  0.899702     -0.105691      -7.01752       7.01752       1042.84       1049.85    
  21  0.444808     -0.810113      -53.7885       53.7885       1005.15       1058.94    
  22  0.495252     -0.702688      -46.6559       46.6559       1082.37       1129.03    
  23  0.640834     -0.444984      -29.5453       29.5453       1115.73       1145.27    
  24  0.314465      -1.15688      -76.8128       76.8128       1051.56       1128.38    
  25  0.368564     -0.998140      -66.2728       66.2728       1136.23       1202.50    
  26  0.572254E-02  -5.16334      -342.827       342.827       1119.26       1462.09    
  27  0.468080E-01  -3.06170      -203.286       203.286       1145.34       1348.62    
  28  0.598693E-01  -2.81559      -186.945       186.945       1157.00       1343.94    
  29  0.658687     -0.417508      -27.7210       27.7210       1065.84       1093.56    
  30  0.449565     -0.799475      -53.0822       53.0822       1147.76       1200.84    
  31  0.799405     -0.223887      -14.8653       14.8653       1076.81       1091.67    
  32  0.414416     -0.880885      -58.4875       58.4875       1226.27       1284.76    
  33  0.395703E-01  -3.22968      -214.439       214.439       994.676       1209.11    
  34  0.704129E-01  -2.65338      -176.175       176.175       1186.97       1363.15    
  35  0.336217      -1.09000      -72.3720       72.3720       1207.13       1279.50    
  36  0.169926      -1.77239      -117.680       117.680       1211.72       1329.41    
  37  0.846601E-01  -2.46911      -163.940       163.940       1217.14       1381.08    
  38  0.798628     -0.224860      -14.9299       14.9299       1241.02       1255.95    
  39  0.377891     -0.973150      -64.6136       64.6136       1238.38       1303.00    
  40  0.183739      -1.69424      -112.491       112.491       1189.08       1301.57    
  41  0.930280     -0.722695E-01  -4.79843       4.79843       1244.63       1249.43    
  42  0.280682      -1.27053      -84.3587       84.3587       1228.83       1313.18    
  43  0.475397     -0.743606      -49.3727       49.3727       1193.97       1243.34    
  44  0.705714     -0.348545      -23.1421       23.1421       1286.40       1309.54    
  45  0.307479      -1.17935      -78.3045       78.3045       1240.71       1319.02    
  46  0.408291     -0.895776      -59.4762       59.4762       1033.01       1092.49    
  47  0.174897      -1.74356      -115.766       115.766       1281.30       1397.06    
  48  0.462267     -0.771612      -51.2322       51.2322       1279.80       1331.03    
  49  0.805682E-01  -2.51865      -167.229       167.229       1303.01       1470.24    
  50  0.276714      -1.28477      -85.3041       85.3041       1331.35       1416.65    
  51  0.914639     -0.892253E-01  -5.92423       5.92423       1405.23       1411.15    
  52  0.575354     -0.552769      -36.7018       36.7018       1250.82       1287.53    
  53  0.537577     -0.620684      -41.2111       41.2111       1300.22       1341.44    
  54  0.209256      -1.56420      -103.857       103.857       1449.84       1553.70    
  55  0.778351     -0.250578      -16.6374       16.6374       1347.44       1364.07    
  56  0.903762E-01  -2.40377      -159.602       159.602       1436.49       1596.09    
  57  0.758334E-01  -2.57922      -171.250       171.250       1389.10       1560.35    
  58  0.588112     -0.530837      -35.2456       35.2456       1445.71       1480.96    
  59  0.846166     -0.167040      -11.0908       11.0908       1437.32       1448.42    
  60  0.275383      -1.28959      -85.6242       85.6242       1407.45       1493.07    
  61  0.949019     -0.523265E-01  -3.47429       3.47429       1412.16       1415.64    
  62  0.207077      -1.57466      -104.552       104.552       1453.26       1557.81    
  63  0.623950     -0.471685      -31.3181       31.3181       1485.87       1517.19    
  64  0.681742E-01  -2.68569      -178.320       178.320       1407.76       1586.08    
  65  0.157941      -1.84553      -122.537       122.537       1172.60       1295.14    
  66  0.460122     -0.776264      -51.5411       51.5411       1439.42       1490.96    
  67  0.861850     -0.148675      -9.87145       9.87145       1447.80       1457.67    
  68  0.933782     -0.685126E-01  -4.54899       4.54899       1437.49       1442.04    
  69  0.238289      -1.43427      -95.2302       95.2302       1463.91       1559.14    
  70  0.206985      -1.57511      -104.582       104.582       1536.88       1641.47    
  71  0.921058E-01  -2.38482      -158.343       158.343       1561.33       1719.67    
  72  0.912587     -0.914718E-01  -6.07339       6.07339       1375.13       1381.20    
  73  0.763509     -0.269830      -17.9158       17.9158       1584.87       1602.79    
  74  0.167122      -1.78903      -118.785       118.785       1101.44       1220.23    
loop,thermsimp(1:2)       15   103.594       25.3951    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365        997.06        129.93          0.67         30.07          1.14          0.05        161.86
Just calling func    0   0        161.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    366       1650.92        128.45          0.67         30.23          1.89          0.05        161.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    997.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       15
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       16
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      365     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -181.197       181.197       927.369       1108.57    
   2  0.388935     -0.944342      -62.7008       62.7008       919.160       981.861    
   3  0.716732     -0.333053      -22.1135       22.1135       928.402       950.516    
   4  0.375936     -0.978336      -64.9579       64.9579       974.423       1039.38    
   5  0.518505E-01  -2.95939      -196.493       196.493       978.997       1175.49    
   6  0.892279     -0.113976      -7.56759       7.56759       931.134       938.702    
   7  0.145412      -1.92818      -128.024       128.024       1022.04       1150.06    
   8  0.759376E-01  -2.57784      -171.159       171.159       984.147       1155.31    
   9  0.799111     -0.224255      -14.8897       14.8897       1042.84       1057.73    
  10  0.566636     -0.568038      -37.7156       37.7156       1039.39       1077.10    
  11  0.957834     -0.430803E-01  -2.86038       2.86038       1013.96       1016.82    
  12  0.421133     -0.864808      -57.4200       57.4200       1005.15       1062.57    
  13  0.965171     -0.354495E-01  -2.35372       2.35372       1013.25       1015.60    
  14  0.527073     -0.640416      -42.5212       42.5212       1057.86       1100.39    
  15  0.221584      -1.50695      -100.056       100.056       1068.11       1168.17    
  16  0.675180     -0.392776      -26.0789       26.0789       1061.57       1087.65    
  17  0.462159     -0.771846      -51.2477       51.2477       1076.81       1128.05    
  18  0.134826      -2.00377      -133.043       133.043       1033.01       1166.06    
  19  0.869165     -0.140222      -9.31023       9.31023       1065.84       1075.15    
  20  0.898965     -0.106511      -7.07192       7.07192       992.393       999.465    
  21  0.174160      -1.74778      -116.046       116.046       1032.83       1148.87    
  22  0.463810     -0.768281      -51.0110       51.0110       1030.06       1081.08    
  23  0.145870      -1.92504      -127.815       127.815       1044.86       1172.67    
  24  0.525172     -0.644029      -42.7612       42.7612       1051.56       1094.33    
  25  0.667609     -0.404052      -26.8276       26.8276       1082.37       1109.20    
  26  0.964408     -0.362405E-01  -2.40624       2.40624       1115.73       1118.13    
  27  0.981636     -0.185350E-01  -1.23065       1.23065       1031.58       1032.81    
  28  0.585742     -0.534875      -35.5137       35.5137       1147.76       1183.28    
  29  0.956106     -0.448864E-01  -2.98029       2.98029       1136.23       1139.21    
  30  0.153686      -1.87284      -124.350       124.350       994.676       1119.03    
  31  0.937356     -0.646920E-01  -4.29531       4.29531       1101.44       1105.74    
  32  0.821414     -0.196728      -13.0620       13.0620       1193.97       1207.03    
  33  0.901583     -0.103603      -6.87887       6.87887       1244.63       1251.51    
  34  0.145469      -1.92779      -127.998       127.998       1241.02       1369.02    
  35  0.944310     -0.573011E-01  -3.80458       3.80458       1207.13       1210.94    
  36  0.639748     -0.446680      -29.6579       29.6579       1226.27       1255.93    
  37  0.533071     -0.629101      -41.7700       41.7700       1250.82       1292.59    
  38  0.708805     -0.344175      -22.8520       22.8520       1172.60       1195.46    
  39  0.953023     -0.481167E-01  -3.19477       3.19477       1189.08       1192.27    
  40  0.606832     -0.499502      -33.1651       33.1651       1238.38       1271.55    
  41  0.791257     -0.234132      -15.5455       15.5455       1286.40       1301.95    
  42  0.203064      -1.59423      -105.851       105.851       1228.83       1334.68    
  43  0.168642      -1.77998      -118.184       118.184       1240.71       1358.89    
  44  0.718173     -0.331045      -21.9802       21.9802       1211.72       1233.71    
  45  0.976939E-02  -4.62850      -307.315       307.315       1279.80       1587.12    
  46  0.211685      -1.55265      -103.091       103.091       1300.22       1403.32    
  47  0.624191     -0.471298      -31.2925       31.2925       1157.00       1188.29    
  48  0.749801     -0.287948      -19.1187       19.1187       1145.34       1164.46    
  49  0.710340     -0.342011      -22.7083       22.7083       1186.97       1209.68    
  50  0.447179     -0.804797      -53.4355       53.4355       1347.44       1400.87    
  51  0.567779     -0.566023      -37.5818       37.5818       1217.14       1254.72    
  52  0.262390      -1.33792      -88.8333       88.8333       1375.13       1463.96    
  53  0.907024     -0.975861E-01  -6.47936       6.47936       1281.30       1287.78    
  54  0.621682E-01  -2.77791      -184.443       184.443       1405.23       1589.67    
  55  0.667173     -0.404707      -26.8710       26.8710       1412.16       1439.04    
  56  0.429586     -0.844932      -56.1004       56.1004       1331.35       1387.45    
  57  0.758744     -0.276091      -18.3314       18.3314       1437.49       1455.82    
  58  0.890716     -0.115730      -7.68404       7.68404       1437.32       1445.01    
  59  0.101520E-01  -4.59008      -304.764       304.764       1447.80       1752.56    
  60  0.302396      -1.19602      -79.4111       79.4111       1119.26       1198.67    
  61  0.618723     -0.480097      -31.8767       31.8767       1303.01       1334.89    
  62  0.323728      -1.12785      -74.8852       74.8852       1445.71       1520.60    
  63  0.667954     -0.403536      -26.7933       26.7933       1439.42       1466.21    
  64  0.870722     -0.138433      -9.19143       9.19143       1407.45       1416.64    
  65  0.471572     -0.751683      -49.9090       49.9090       1485.87       1535.78    
  66  0.139523      -1.96953      -130.769       130.769       1449.84       1580.61    
  67  0.322617      -1.13129      -75.1134       75.1134       1453.26       1528.37    
  68  0.916959     -0.866922E-01  -5.75604       5.75604       1463.91       1469.66    
  69  0.598403E-02  -5.11866      -339.860       339.860       1389.10       1728.96    
  70  0.869598     -0.139724      -9.27717       9.27717       1407.76       1417.04    
  71  0.151888      -1.88461      -125.131       125.131       1436.49       1561.62    
  72  0.642634     -0.442179      -29.3591       29.3591       1584.87       1614.23    
  73  0.974865E-01  -2.32804      -154.573       154.573       1536.88       1691.46    
  74  0.194827      -1.63564      -108.601       108.601       997.061       1105.66    
loop,thermsimp(1:2)       16   181.197       62.7008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367       1594.25        129.85          0.68         29.97          0.84          0.05        161.38
Just calling func    0   0        161.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1594.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       16
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       17
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      366
neval,tstepnext:      366     366

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -47.5033       47.5033       931.134       978.638    
   2  0.243137      -1.41413      -93.8930       93.8930       928.402       1022.30    
   3  0.530653     -0.633646      -42.0718       42.0718       919.160       961.232    
   4  0.926282     -0.765763E-01  -5.08438       5.08438       992.393       997.478    
   5  0.374288     -0.982729      -65.2496       65.2496       1013.25       1078.50    
   6  0.675293     -0.392608      -26.0677       26.0677       1013.96       1040.03    
   7  0.605942     -0.500970      -33.2626       33.2626       1031.58       1064.84    
   8  0.280229      -1.27215      -84.4659       84.4659       974.423       1058.89    
   9  0.297259      -1.21315      -80.5488       80.5488       1042.84       1123.39    
  10  0.697504E-01  -2.66283      -176.802       176.802       1005.15       1181.95    
  11  0.824348     -0.193163      -12.8253       12.8253       1065.84       1078.66    
  12  0.750452     -0.287080      -19.0610       19.0610       1039.39       1058.45    
  13  0.120595      -2.11532      -140.449       140.449       1030.06       1170.51    
  14  0.935324     -0.668625E-01  -4.43942       4.43942       1061.57       1066.01    
  15  0.215551      -1.53456      -101.889       101.889       1051.56       1153.45    
  16  0.708821     -0.344153      -22.8505       22.8505       1057.86       1080.71    
  17  0.402499     -0.910063      -60.4248       60.4248       997.061       1057.49    
  18  0.836443     -0.178597      -11.8582       11.8582       1101.44       1113.30    
  19  0.969979E-01  -2.33307      -154.907       154.907       927.369       1082.28    
  20  0.178795      -1.72152      -114.302       114.302       1082.37       1196.67    
  21  0.140077      -1.96556      -130.506       130.506       1115.73       1246.23    
  22  0.375507     -0.979479      -65.0338       65.0338       994.676       1059.71    
  23  0.831487     -0.184540      -12.2528       12.2528       1076.81       1089.06    
  24  0.815951     -0.203401      -13.5051       13.5051       1136.23       1149.73    
  25  0.468603     -0.757998      -50.3283       50.3283       1032.83       1083.16    
  26  0.677551     -0.389270      -25.8461       25.8461       1022.04       1047.89    
  27  0.169538      -1.77468      -117.832       117.832       984.147       1101.98    
  28  0.950448     -0.508223E-01  -3.37441       3.37441       1145.34       1148.71    
  29  0.981726     -0.184427E-01  -1.22453       1.22453       1033.01       1034.24    
  30  0.442406     -0.815527      -54.1480       54.1480       1068.11       1122.26    
  31  0.531953     -0.631200      -41.9094       41.9094       1044.86       1086.77    
  32  0.363692      -1.01145      -67.1565       67.1565       978.997       1046.15    
  33  0.144511E-01  -4.23698      -281.320       281.320       1147.76       1429.08    
  34  0.748780     -0.289310      -19.2091       19.2091       1157.00       1176.21    
  35  0.195075      -1.63437      -108.516       108.516       1189.08       1297.60    
  36  0.440325     -0.820241      -54.4610       54.4610       1172.60       1227.07    
  37  0.805864     -0.215841      -14.3310       14.3310       1119.26       1133.59    
  38  0.921415     -0.818451E-01  -5.43421       5.43421       1193.97       1199.40    
  39  0.296293      -1.21641      -80.7648       80.7648       1186.97       1267.74    
  40  0.645874E-01  -2.73974      -181.908       181.908       1207.13       1389.04    
  41  0.488279     -0.716868      -47.5974       47.5974       1211.72       1259.32    
  42  0.573105     -0.556686      -36.9619       36.9619       1244.63       1281.59    
  43  0.967891     -0.326356E-01  -2.16688       2.16688       1217.14       1219.31    
  44  0.780434E-01  -2.55049      -169.343       169.343       1226.27       1395.62    
  45  0.968859     -0.316363E-01  -2.10054       2.10054       1238.38       1240.49    
  46  0.858835     -0.152178      -10.1041       10.1041       1281.30       1291.40    
  47  0.968806     -0.316911E-01  -2.10417       2.10417       1250.82       1252.93    
  48  0.134500      -2.00619      -133.203       133.203       1286.40       1419.61    
  49  0.993707     -0.631323E-02 -0.419175      0.419175       1228.83       1229.24    
  50  0.300401      -1.20264      -79.8507       79.8507       1303.01       1382.86    
  51  0.166933      -1.79016      -118.860       118.860       1240.71       1359.57    
  52  0.917937     -0.856264E-01  -5.68528       5.68528       1241.02       1246.71    
  53  0.587259     -0.532289      -35.3421       35.3421       1331.35       1366.69    
  54  0.470076     -0.754861      -50.1200       50.1200       1347.44       1397.56    
  55  0.256936      -1.35893      -90.2278       90.2278       1300.22       1390.45    
  56  0.723917     -0.323079      -21.4513       21.4513       1407.45       1428.90    
  57  0.294593      -1.22216      -81.1469       81.1469       1407.76       1488.91    
  58  0.700842     -0.355473      -23.6021       23.6021       1412.16       1435.77    
  59  0.845975     -0.167265      -11.1058       11.1058       1437.32       1448.43    
  60  0.690580     -0.370224      -24.5815       24.5815       1437.49       1462.07    
  61  0.413361     -0.883435      -58.6568       58.6568       1375.13       1433.79    
  62  0.950705     -0.505510E-01  -3.35640       3.35640       1439.42       1442.78    
  63  0.455802     -0.785697      -52.1674       52.1674       1463.91       1516.07    
  64  0.937099     -0.649663E-01  -4.31352       4.31352       1445.71       1450.02    
  65  0.872489     -0.136405      -9.05678       9.05678       1453.26       1462.31    
  66  0.159694      -1.83449      -121.804       121.804       1485.87       1607.67    
  67  0.518082E-01  -2.96021      -196.547       196.547       1436.49       1633.04    
  68  0.786285     -0.240436      -15.9641       15.9641       1449.84       1465.81    
  69  0.564461     -0.571885      -37.9710       37.9710       1279.80       1317.77    
  70  0.593490     -0.521735      -34.6413       34.6413       1405.23       1439.87    
  71  0.627696     -0.465699      -30.9207       30.9207       1584.87       1615.79    
  72  0.333151      -1.09916      -72.9802       72.9802       1536.88       1609.86    
  73  0.448676     -0.801454      -53.2136       53.2136       1389.10       1442.32    
  74  0.628673     -0.464143      -30.8174       30.8174       1594.25       1625.06    
loop,thermsimp(1:2)       17   47.5033       93.8930    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368       1196.76        129.13          0.68         30.49          1.45          0.04        161.79
Just calling func    0   0        161.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1196.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    66.3963               366
loop is:       17
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    66.3963               366
loop is:       18
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    33.1982               439

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      367     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -23.6401       23.6401       919.160       942.800    
   2  0.486668     -0.720173      -23.9084       23.9084       931.134       955.043    
   3  0.319995E-01  -3.44203      -114.269       114.269       992.393       1106.66    
   4  0.957863     -0.430503E-01  -1.42919       1.42919       928.402       929.831    
   5  0.713202E-01  -2.64058      -87.6622       87.6622       1033.01       1120.67    
   6  0.677570     -0.389242      -12.9221       12.9221       1013.96       1026.88    
   7  0.533853     -0.627634      -20.8363       20.8363       978.997       999.833    
   8  0.963967     -0.366984E-01  -1.21832       1.21832       1022.04       1023.26    
   9  0.590118     -0.527432      -17.5098       17.5098       997.061       1014.57    
  10  0.102350      -2.27936      -75.6704       75.6704       1039.39       1115.06    
  11  0.313487      -1.16000      -38.5098       38.5098       974.423       1012.93    
  12  0.876181     -0.132183      -4.38822       4.38822       994.676       999.065    
  13  0.780541     -0.247768      -8.22544       8.22544       1031.58       1039.80    
  14  0.222922      -1.50093      -49.8282       49.8282       1061.57       1111.40    
  15  0.913991     -0.899351E-01  -2.98568       2.98568       1013.25       1016.23    
  16  0.493176     -0.706888      -23.4674       23.4674       1065.84       1089.30    
  17  0.884766     -0.122432      -4.06451       4.06451       1057.86       1061.93    
  18  0.576549E-01  -2.85328      -94.7237       94.7237       927.369       1022.09    
  19  0.398597     -0.919804      -30.5358       30.5358       1032.83       1063.36    
  20  0.980633     -0.195573E-01 -0.649266      0.649266       1044.86       1045.51    
  21  0.304985      -1.18749      -39.4225       39.4225       1076.81       1116.23    
  22  0.628666     -0.464156      -15.4091       15.4091       984.147       999.556    
  23  0.367895     -0.999957      -33.1967       33.1967       1101.44       1134.64    
  24  0.442302     -0.815762      -27.0818       27.0818       1068.11       1095.19    
  25  0.656121     -0.421410      -13.9900       13.9900       1042.84       1056.83    
  26  0.229893      -1.47014      -48.8059       48.8059       1119.26       1168.07    
  27  0.475469     -0.743453      -24.6813       24.6813       1145.34       1170.02    
  28  0.801985     -0.220665      -7.32568       7.32568       1136.23       1143.55    
  29  0.454630     -0.788272      -26.1692       26.1692       1051.56       1077.73    
  30  0.858022     -0.153126      -5.08349       5.08349       1030.06       1035.15    
  31  0.692704     -0.367153      -12.1888       12.1888       1157.00       1169.19    
  32  0.466274     -0.762981      -25.3296       25.3296       1005.15       1030.48    
  33  0.682446     -0.382072      -12.6841       12.6841       1082.37       1095.05    
  34  0.660760     -0.414365      -13.7561       13.7561       1193.97       1207.73    
  35  0.957519     -0.434092E-01  -1.44111       1.44111       1217.14       1218.58    
  36  0.108167      -2.22408      -73.8353       73.8353       1172.60       1246.44    
  37  0.846378     -0.166789      -5.53710       5.53710       1228.83       1234.36    
  38  0.621158E-01  -2.77876      -92.2496       92.2496       1238.38       1330.63    
  39  0.988945E-01  -2.31370      -76.8106       76.8106       1115.73       1192.54    
  40  0.253472      -1.37250      -45.5645       45.5645       1241.02       1286.59    
  41  0.915015     -0.888152E-01  -2.94850       2.94850       1250.82       1253.77    
  42  0.662342     -0.411973      -13.6767       13.6767       1211.72       1225.40    
  43  0.210223      -1.55959      -51.7755       51.7755       1186.97       1238.75    
  44  0.141043      -1.95869      -65.0250       65.0250       1244.63       1309.66    
  45  0.839834     -0.174551      -5.79478       5.79478       1281.30       1287.09    
  46  0.132358      -2.02225      -67.1348       67.1348       1189.08       1256.21    
  47  0.129895E-01  -4.34361      -144.200       144.200       1279.80       1424.00    
  48  0.795497     -0.228788      -7.59533       7.59533       1240.71       1248.31    
  49  0.547485     -0.602421      -19.9993       19.9993       1331.35       1351.35    
  50  0.137643      -1.98309      -65.8349       65.8349       1303.01       1368.84    
  51  0.603188     -0.505526      -16.7825       16.7825       1207.13       1223.91    
  52  0.394039     -0.931305      -30.9176       30.9176       1300.22       1331.14    
  53  0.777307     -0.251920      -8.36328       8.36328       1226.27       1234.64    
  54  0.946969     -0.544893E-01  -1.80894       1.80894       1347.44       1349.25    
  55  0.137504      -1.98410      -65.8684       65.8684       1286.40       1352.27    
  56  0.712611     -0.338820      -11.2482       11.2482       1407.45       1418.70    
  57  0.274991      -1.29102      -42.8593       42.8593       1147.76       1190.62    
  58  0.847791     -0.165121      -5.48173       5.48173       1375.13       1380.61    
  59  0.107545      -2.22984      -74.0267       74.0267       1412.16       1486.19    
  60  0.224670      -1.49312      -49.5689       49.5689       1405.23       1454.80    
  61  0.827554E-01  -2.49187      -82.7254       82.7254       1389.10       1471.83    
  62  0.467473     -0.760413      -25.2443       25.2443       1439.42       1464.67    
  63  0.746927     -0.291788      -9.68682       9.68682       1437.32       1447.01    
  64  0.346805E-01  -3.36158      -111.598       111.598       1445.71       1557.31    
  65  0.900153     -0.105190      -3.49211       3.49211       1437.49       1440.98    
  66  0.136291      -1.99296      -66.1627       66.1627       1453.26       1519.42    
  67  0.971712     -0.286957E-01 -0.952643      0.952643       1449.84       1450.80    
  68  0.116648      -2.14860      -71.3295       71.3295       1407.76       1479.09    
  69  0.675516E-01  -2.69486      -89.4645       89.4645       1463.91       1553.37    
  70  0.354044      -1.03833      -34.4708       34.4708       1485.87       1520.34    
  71  0.480723     -0.732464      -24.3165       24.3165       1536.88       1561.20    
  72  0.814966     -0.204609      -6.79265       6.79265       1584.87       1591.66    
  73  0.716699     -0.333099      -11.0583       11.0583       1594.25       1605.31    
  74  0.136292      -1.99295      -66.1624       66.1624       1196.76       1262.92    
loop,thermsimp(1:2)       18   23.6401       23.9084    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369       1429.18        129.01          0.69         30.65          1.34          0.04        161.72
Just calling func    0   0        161.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1429.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       18
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       19
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      368     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -61.8621       61.8621       928.402       990.264    
   2  0.881882     -0.125697      -4.17292       4.17292       919.160       923.333    
   3  0.908319     -0.961592E-01  -3.19231       3.19231       931.134       934.327    
   4  0.732380     -0.311455      -10.3397       10.3397       994.676       1005.02    
   5  0.367412      -1.00127      -33.2404       33.2404       984.147       1017.39    
   6  0.624330     -0.471077      -15.6389       15.6389       978.997       994.635    
   7  0.833858     -0.181693      -6.03186       6.03186       974.423       980.454    
   8  0.194603E-02  -6.24197      -207.222       207.222       997.061       1204.28    
   9  0.995416     -0.459497E-02 -0.152545      0.152545       1013.25       1013.40    
  10  0.665599     -0.407068      -13.5139       13.5139       927.369       940.883    
  11  0.747574     -0.290922      -9.65808       9.65808       1022.04       1031.70    
  12  0.539692     -0.616756      -20.4752       20.4752       1013.96       1034.44    
  13  0.958323     -0.425700E-01  -1.41325       1.41325       1005.15       1006.56    
  14  0.111027      -2.19798      -72.9691       72.9691       1030.06       1103.03    
  15  0.520965     -0.652072      -21.6476       21.6476       1031.58       1053.23    
  16  0.177207E-01  -4.03302      -133.889       133.889       1044.86       1178.75    
  17  0.860365     -0.150398      -4.99295       4.99295       1042.84       1047.83    
  18  0.383700     -0.957895      -31.8004       31.8004       1057.86       1089.66    
  19  0.524904     -0.644539      -21.3975       21.3975       1032.83       1054.22    
  20  0.589629     -0.528262      -17.5373       17.5373       1051.56       1069.10    
  21  0.125125      -2.07844      -69.0005       69.0005       1065.84       1134.84    
  22  0.154207      -1.86946      -62.0626       62.0626       1082.37       1144.43    
  23  0.752747     -0.284026      -9.42915       9.42915       1068.11       1077.54    
  24  0.551286     -0.595501      -19.7695       19.7695       992.393       1012.16    
  25  0.733343     -0.310142      -10.2961       10.2961       1061.57       1071.87    
  26  0.904985     -0.998368E-01  -3.31440       3.31440       1039.39       1042.70    
  27  0.987632     -0.124455E-01 -0.413169      0.413169       1076.81       1077.22    
  28  0.228587      -1.47584      -48.9951       48.9951       1033.01       1082.01    
  29  0.384883     -0.954815      -31.6981       31.6981       1101.44       1133.14    
  30  0.781910     -0.246015      -8.16726       8.16726       1136.23       1144.39    
  31  0.402051E-02  -5.51635      -183.133       183.133       1119.26       1302.40    
  32  0.880575     -0.127180      -4.22216       4.22216       1157.00       1161.22    
  33  0.427180     -0.850550      -28.2367       28.2367       1145.34       1173.57    
  34  0.613064     -0.489286      -16.2434       16.2434       1147.76       1164.01    
  35  0.529053     -0.636668      -21.1362       21.1362       1115.73       1136.86    
  36  0.973505     -0.268519E-01 -0.891435      0.891435       1193.97       1194.86    
  37  0.889868     -0.116682      -3.87363       3.87363       1217.14       1221.02    
  38  0.133989      -2.01000      -66.7282       66.7282       1207.13       1273.86    
  39  0.289828      -1.23847      -41.1148       41.1148       1211.72       1252.84    
  40  0.724995     -0.321591      -10.6762       10.6762       1228.83       1239.50    
  41  0.547932     -0.601605      -19.9722       19.9722       1226.27       1246.24    
  42  0.608240E-01  -2.79977      -92.9472       92.9472       1186.97       1279.92    
  43  0.481259E-01  -3.03393      -100.721       100.721       1172.60       1273.33    
  44  0.356843      -1.03046      -34.2093       34.2093       1240.71       1274.92    
  45  0.417411     -0.873685      -29.0047       29.0047       1250.82       1279.83    
  46  0.918903     -0.845742E-01  -2.80771       2.80771       1189.08       1191.89    
  47  0.852285     -0.159834      -5.30620       5.30620       1196.76       1202.06    
  48  0.744864     -0.294553      -9.77863       9.77863       1241.02       1250.80    
  49  0.128521      -2.05166      -68.1115       68.1115       1281.30       1349.41    
  50  0.484639     -0.724351      -24.0471       24.0471       1244.63       1268.68    
  51  0.478847     -0.736375      -24.4463       24.4463       1238.38       1262.83    
  52  0.557656     -0.584013      -19.3882       19.3882       1300.22       1319.61    
  53  0.799673     -0.223552      -7.42151       7.42151       1347.44       1354.86    
  54  0.734793     -0.308167      -10.2306       10.2306       1331.35       1341.58    
  55  0.306231      -1.18342      -39.2872       39.2872       1286.40       1325.69    
  56  0.286852      -1.24879      -41.4575       41.4575       1303.01       1344.47    
  57  0.731298     -0.312934      -10.3888       10.3888       1375.13       1385.52    
  58  0.681466     -0.383509      -12.7318       12.7318       1407.45       1420.18    
  59  0.246139      -1.40186      -46.5392       46.5392       1279.80       1326.34    
  60  0.339728      -1.07961      -35.8411       35.8411       1437.49       1473.33    
  61  0.740009     -0.301093      -9.99572       9.99572       1437.32       1447.32    
  62  0.923584     -0.794938E-01  -2.63905       2.63905       1449.84       1452.48    
  63  0.108454      -2.22143      -73.7475       73.7475       1405.23       1478.98    
  64  0.658643     -0.417574      -13.8627       13.8627       1439.42       1453.28    
  65  0.399262     -0.918138      -30.4805       30.4805       1389.10       1419.58    
  66  0.826271     -0.190833      -6.33529       6.33529       1407.76       1414.10    
  67  0.162727      -1.81568      -60.2773       60.2773       1412.16       1472.44    
  68  0.597317     -0.515307      -17.1072       17.1072       1453.26       1470.36    
  69  0.441859     -0.816765      -27.1151       27.1151       1485.87       1512.99    
  70  0.733350     -0.310132      -10.2958       10.2958       1463.91       1474.20    
  71  0.897038     -0.108657      -3.60721       3.60721       1445.71       1449.32    
  72  0.575144     -0.553135      -18.3631       18.3631       1536.88       1555.25    
  73  0.339845      -1.07927      -35.8297       35.8297       1584.87       1620.70    
  74  0.643529     -0.440788      -14.6333       14.6333       1429.18       1443.82    
loop,thermsimp(1:2)       19   61.8621       4.17292    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370       1457.25        129.65          0.66         30.48          1.30          0.04        162.14
Just calling func    0   0        162.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1457.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       19
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       20
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      369     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -43.1265       43.1265       919.160       962.286    
   2  0.284829      -1.25587      -41.6924       41.6924       931.134       972.827    
   3  0.422534E-01  -3.16407      -105.041       105.041       927.369       1032.41    
   4  0.788018E-01  -2.54082      -84.3505       84.3505       974.423       1058.77    
   5  0.396626E-01  -3.22735      -107.142       107.142       928.402       1035.54    
   6  0.412432     -0.885684      -29.4031       29.4031       978.997       1008.40    
   7  0.390866     -0.939390      -31.1860       31.1860       994.676       1025.86    
   8  0.853334     -0.158604      -5.26535       5.26535       1005.15       1010.41    
   9  0.506127     -0.680968      -22.6069       22.6069       992.393       1015.00    
  10  0.254200      -1.36963      -45.4693       45.4693       1013.25       1058.72    
  11  0.643116     -0.441430      -14.6547       14.6547       984.147       998.801    
  12  0.897721     -0.107896      -3.58196       3.58196       1022.04       1025.62    
  13  0.830899     -0.185247      -6.14987       6.14987       1013.96       1020.11    
  14  0.357312      -1.02915      -34.1658       34.1658       1039.39       1073.55    
  15  0.525942     -0.642564      -21.3319       21.3319       1042.84       1064.17    
  16  0.742929     -0.297155      -9.86499       9.86499       1031.58       1041.44    
  17  0.970959     -0.294711E-01 -0.978387      0.978387       1032.83       1033.81    
  18  0.235894      -1.44437      -47.9505       47.9505       1051.56       1099.52    
  19  0.723381E-01  -2.62640      -87.1918       87.1918       1061.57       1148.76    
  20  0.190915      -1.65593      -54.9737       54.9737       1076.81       1131.78    
  21  0.524670     -0.644986      -21.4124       21.4124       1068.11       1089.52    
  22  0.536043     -0.623540      -20.7004       20.7004       1033.01       1053.71    
  23  0.281730      -1.26681      -42.0556       42.0556       1057.86       1099.92    
  24  0.747791     -0.290632      -9.64844       9.64844       1030.06       1039.71    
  25  0.255771      -1.36347      -45.2647       45.2647       1101.44       1146.71    
  26  0.194866      -1.63544      -54.2937       54.2937       1065.84       1120.13    
  27  0.639630     -0.446865      -14.8351       14.8351       1115.73       1130.56    
  28  0.485808     -0.721941      -23.9671       23.9671       1136.23       1160.19    
  29  0.659147     -0.416809      -13.8373       13.8373       1082.37       1096.21    
  30  0.196308      -1.62807      -54.0489       54.0489       1157.00       1211.05    
  31  0.308964      -1.17453      -38.9922       38.9922       1147.76       1186.75    
  32  0.181287      -1.70768      -56.6917       56.6917       1145.34       1202.03    
  33  0.386667     -0.950191      -31.5446       31.5446       1044.86       1076.40    
  34  0.947825     -0.535853E-01  -1.77893       1.77893       1189.08       1190.86    
  35  0.699942     -0.356758      -11.8437       11.8437       1193.97       1205.81    
  36  0.208747      -1.56663      -52.0093       52.0093       1196.76       1248.77    
  37  0.717648     -0.331775      -11.0143       11.0143       997.061       1008.08    
  38  0.734922     -0.307991      -10.2247       10.2247       1217.14       1227.37    
  39  0.862816     -0.147554      -4.89852       4.89852       1228.83       1233.72    
  40  0.677494     -0.389354      -12.9258       12.9258       1226.27       1239.20    
  41  0.829375     -0.187082      -6.21079       6.21079       1241.02       1247.23    
  42  0.393856     -0.931770      -30.9330       30.9330       1211.72       1242.66    
  43  0.447370     -0.804370      -26.7036       26.7036       1238.38       1265.09    
  44  0.485389     -0.722806      -23.9958       23.9958       1244.63       1268.63    
  45  0.522363     -0.649392      -21.5586       21.5586       1172.60       1194.16    
  46  0.740056E-01  -2.60361      -86.4352       86.4352       1207.13       1293.57    
  47  0.396252     -0.925705      -30.7317       30.7317       1240.71       1271.44    
  48  0.429395     -0.845378      -28.0650       28.0650       1250.82       1278.89    
  49  0.865472     -0.144480      -4.79648       4.79648       1186.97       1191.77    
  50  0.103085      -2.27220      -75.4330       75.4330       1119.26       1194.70    
  51  0.257437      -1.35698      -45.0492       45.0492       1300.22       1345.27    
  52  0.136338      -1.99262      -66.1512       66.1512       1286.40       1352.55    
  53  0.153596      -1.87343      -62.1944       62.1944       1279.80       1342.00    
  54  0.305406      -1.18611      -39.3767       39.3767       1331.35       1370.72    
  55  0.473340     -0.747942      -24.8303       24.8303       1303.01       1327.84    
  56  0.475010     -0.744419      -24.7133       24.7133       1281.30       1306.01    
  57  0.779699     -0.248847      -8.26128       8.26128       1347.44       1355.70    
  58  0.143364      -1.94237      -64.4830       64.4830       1375.13       1439.61    
  59  0.739804     -0.301371      -10.0050       10.0050       1407.76       1417.77    
  60  0.571699     -0.559143      -18.5625       18.5625       1389.10       1407.67    
  61  0.641967     -0.443219      -14.7141       14.7141       1407.45       1422.16    
  62  0.339882      -1.07916      -35.8261       35.8261       1429.18       1465.01    
  63  0.658898E-01  -2.71977      -90.2914       90.2914       1437.32       1527.62    
  64  0.441939     -0.816583      -27.1091       27.1091       1445.71       1472.82    
  65  0.470437     -0.754093      -25.0345       25.0345       1449.84       1474.88    
  66  0.190313      -1.65908      -55.0785       55.0785       1439.42       1494.50    
  67  0.901027     -0.104220      -3.45991       3.45991       1453.26       1456.72    
  68  0.860734     -0.149970      -4.97872       4.97872       1412.16       1417.14    
  69  0.456875     -0.783344      -26.0056       26.0056       1437.49       1463.50    
  70  0.846393     -0.166772      -5.53652       5.53652       1463.91       1469.44    
  71  0.697782E-01  -2.66243      -88.3879       88.3879       1405.23       1493.62    
  72  0.304557      -1.18890      -39.4691       39.4691       1485.87       1525.34    
  73  0.892496     -0.113733      -3.77573       3.77573       1536.88       1540.66    
  74  0.589330     -0.528769      -17.5542       17.5542       1457.25       1474.80    
loop,thermsimp(1:2)       20   43.1265       41.6924    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371       1223.82        129.78          0.68         30.20          1.44          0.05        162.14
Just calling func    0   0        162.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1223.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       20
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       21
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      370     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -91.5770       91.5770       919.160       1010.74    
   2  0.713782     -0.337177      -11.1937       11.1937       931.134       942.328    
   3  0.851614     -0.160622      -5.33236       5.33236       984.147       989.479    
   4  0.721769     -0.326050      -10.8243       10.8243       997.061       1007.89    
   5  0.954937     -0.461102E-01  -1.53077       1.53077       978.997       980.527    
   6  0.302532E-01  -3.49815      -116.132       116.132       1005.15       1121.28    
   7  0.942920E-01  -2.36136      -78.3928       78.3928       992.393       1070.79    
   8  0.515750E-01  -2.96472      -98.4232       98.4232       1013.96       1112.38    
   9  0.612753     -0.489794      -16.2602       16.2602       1022.04       1038.30    
  10  0.758041     -0.277018      -9.19648       9.19648       994.676       1003.87    
  11  0.530485E-01  -2.93655      -97.4880       97.4880       927.369       1024.86    
  12  0.941175     -0.606258E-01  -2.01267       2.01267       1032.83       1034.84    
  13  0.167539      -1.78654      -59.3099       59.3099       928.402       987.712    
  14  0.738662E-01  -2.60550      -86.4978       86.4978       1030.06       1116.56    
  15  0.822155     -0.195827      -6.50109       6.50109       1031.58       1038.08    
  16  0.578765     -0.546859      -18.1547       18.1547       1033.01       1051.17    
  17  0.912739E-01  -2.39389      -79.4727       79.4727       1013.25       1092.72    
  18  0.949215     -0.521197E-01  -1.73028       1.73028       974.423       976.153    
  19  0.485124     -0.723351      -24.0139       24.0139       1042.84       1066.85    
  20  0.359009      -1.02441      -34.0085       34.0085       1039.39       1073.40    
  21  0.747559     -0.290942      -9.65875       9.65875       1044.86       1054.52    
  22  0.482847     -0.728056      -24.1701       24.1701       1068.11       1092.28    
  23  0.994301     -0.571526E-02 -0.189736      0.189736       1082.37       1082.56    
  24  0.937801     -0.642177E-01  -2.13191       2.13191       1051.56       1053.70    
  25  0.699033     -0.358058      -11.8869       11.8869       1057.86       1069.75    
  26  0.358162      -1.02677      -34.0869       34.0869       1065.84       1099.92    
  27  0.746418     -0.292470      -9.70945       9.70945       1115.73       1125.44    
  28  0.532195     -0.630744      -20.9396       20.9396       1076.81       1097.75    
  29  0.727066     -0.318738      -10.5815       10.5815       1101.44       1112.03    
  30  0.461510     -0.773252      -25.6705       25.6705       1061.57       1087.24    
  31  0.285112      -1.25487      -41.6595       41.6595       1136.23       1177.89    
  32  0.316830      -1.14939      -38.1576       38.1576       1147.76       1185.92    
  33  0.835731     -0.179448      -5.95735       5.95735       1189.08       1195.04    
  34  0.516269E-02  -5.26630      -174.831       174.831       1186.97       1361.80    
  35  0.309002      -1.17441      -38.9882       38.9882       1172.60       1211.59    
  36  0.770766     -0.260370      -8.64381       8.64381       1119.26       1127.91    
  37  0.878913     -0.129069      -4.28485       4.28485       1145.34       1149.62    
  38  0.981341E-01  -2.32142      -77.0669       77.0669       1193.97       1271.04    
  39  0.634060     -0.455612      -15.1255       15.1255       1157.00       1172.12    
  40  0.359967      -1.02174      -33.9200       33.9200       1217.14       1251.06    
  41  0.480002     -0.733964      -24.3663       24.3663       1228.83       1253.19    
  42  0.706923     -0.346834      -11.5142       11.5142       1226.27       1237.79    
  43  0.497828     -0.697501      -23.1557       23.1557       1211.72       1234.88    
  44  0.885038     -0.122125      -4.05431       4.05431       1241.02       1245.08    
  45  0.504752     -0.683689      -22.6972       22.6972       1196.76       1219.45    
  46  0.719262     -0.329529      -10.9398       10.9398       1238.38       1249.32    
  47  0.516359     -0.660954      -21.9424       21.9424       1244.63       1266.57    
  48  0.584389E-01  -2.83977      -94.2752       94.2752       1240.71       1334.99    
  49  0.768960E-01  -2.56530      -85.1633       85.1633       1250.82       1335.99    
  50  0.253658      -1.37177      -45.5401       45.5401       1207.13       1252.67    
  51  0.451822     -0.794468      -26.3749       26.3749       1281.30       1307.67    
  52  0.816822     -0.202334      -6.71711       6.71711       1303.01       1309.73    
  53  0.774668     -0.255321      -8.47619       8.47619       1279.80       1288.28    
  54  0.528070     -0.638526      -21.1979       21.1979       1300.22       1321.42    
  55  0.367170      -1.00193      -33.2622       33.2622       1286.40       1319.66    
  56  0.960919E-01  -2.34245      -77.7650       77.7650       1347.44       1425.20    
  57  0.621616     -0.475432      -15.7835       15.7835       1331.35       1347.13    
  58  0.678193     -0.388324      -12.8916       12.8916       1389.10       1402.00    
  59  0.400445E-01  -3.21776      -106.824       106.824       1412.16       1518.99    
  60  0.643930     -0.440165      -14.6127       14.6127       1407.76       1422.38    
  61  0.695390     -0.363282      -12.0603       12.0603       1407.45       1419.51    
  62  0.669334E-01  -2.70406      -89.7697       89.7697       1375.13       1464.90    
  63  0.850395E-01  -2.46464      -81.8215       81.8215       1453.26       1535.08    
  64  0.972359     -0.280307E-01 -0.930568      0.930568       1437.49       1438.42    
  65  0.994658     -0.535647E-02 -0.177825      0.177825       1429.18       1429.36    
  66  0.881217     -0.126451      -4.19795       4.19795       1463.91       1468.10    
  67  0.460812     -0.774766      -25.7208       25.7208       1445.71       1471.43    
  68  0.579353     -0.545843      -18.1210       18.1210       1457.25       1475.37    
  69  0.189905      -1.66123      -55.1499       55.1499       1449.84       1504.99    
  70  0.963487     -0.371960E-01  -1.23484       1.23484       1405.23       1406.46    
  71  0.281063      -1.26917      -42.1343       42.1343       1439.42       1481.56    
  72  0.113474      -2.17618      -72.2452       72.2452       1485.87       1558.12    
  73  0.267299      -1.31939      -43.8012       43.8012       1437.32       1481.13    
  74  0.726533E-01  -2.62206      -87.0474       87.0474       1223.82       1310.87    
loop,thermsimp(1:2)       21   91.5770       11.1937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372       1451.09        129.48          0.66         30.65          0.69          0.04        161.53
Just calling func    0   0        161.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1451.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       21
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       22
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      371     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -27.6453       27.6453       931.134       958.780    
   2  0.380177E-01  -3.26970      -108.548       108.548       974.423       1082.97    
   3  0.198795      -1.61548      -53.6310       53.6310       978.997       1032.63    
   4  0.880944E-01  -2.42935      -80.6498       80.6498       928.402       1009.05    
   5  0.279105      -1.27617      -42.3664       42.3664       984.147       1026.51    
   6  0.379482     -0.968948      -32.1673       32.1673       994.676       1026.84    
   7  0.510142     -0.673065      -22.3445       22.3445       997.061       1019.41    
   8  0.869007     -0.140404      -4.66115       4.66115       919.160       923.821    
   9  0.905256     -0.995378E-01  -3.30447       3.30447       927.369       930.674    
  10  0.587200     -0.532390      -17.6744       17.6744       1032.83       1050.50    
  11  0.309008      -1.17439      -38.9876       38.9876       1031.58       1070.57    
  12  0.210718      -1.55723      -51.6973       51.6973       1022.04       1073.74    
  13  0.362152      -1.01569      -33.7191       33.7191       1033.01       1066.73    
  14  0.465452     -0.764747      -25.3882       25.3882       1051.56       1076.95    
  15  0.155270E-01  -4.16518      -138.276       138.276       1044.86       1183.13    
  16  0.632166     -0.458603      -15.2248       15.2248       1042.84       1058.06    
  17  0.171028      -1.76593      -58.6256       58.6256       1057.86       1116.49    
  18  0.926401     -0.764482E-01  -2.53794       2.53794       992.393       994.931    
  19  0.130449      -2.03678      -67.6172       67.6172       1039.39       1107.01    
  20  0.536069     -0.623492      -20.6988       20.6988       1082.37       1103.07    
  21  0.128128      -2.05472      -68.2131       68.2131       1061.57       1129.78    
  22  0.729730     -0.315081      -10.4601       10.4601       1068.11       1078.57    
  23  0.982387     -0.177702E-01 -0.589938      0.589938       1013.25       1013.84    
  24  0.707707     -0.345726      -11.4775       11.4775       1076.81       1088.28    
  25  0.643878     -0.440245      -14.6153       14.6153       1065.84       1080.45    
  26  0.136721      -1.98982      -66.0582       66.0582       1101.44       1167.50    
  27  0.146320      -1.92196      -63.8056       63.8056       1013.96       1077.77    
  28  0.214169      -1.54099      -51.1581       51.1581       1030.06       1081.22    
  29  0.774008     -0.256172      -8.50445       8.50445       1005.15       1013.65    
  30  0.487333     -0.718808      -23.8631       23.8631       1115.73       1139.59    
  31  0.594481E-01  -2.82265      -93.7069       93.7069       1119.26       1212.97    
  32  0.305368      -1.18624      -39.3809       39.3809       1145.34       1184.72    
  33  0.206200      -1.57891      -52.4169       52.4169       1157.00       1209.41    
  34  0.185235      -1.68613      -55.9764       55.9764       1136.23       1192.20    
  35  0.945154     -0.564077E-01  -1.87263       1.87263       1147.76       1149.64    
  36  0.657328     -0.419572      -13.9290       13.9290       1189.08       1203.01    
  37  0.932191     -0.702171E-01  -2.33108       2.33108       1172.60       1174.94    
  38  0.258055      -1.35458      -44.9697       44.9697       1196.76       1241.73    
  39  0.525568E-01  -2.94586      -97.7972       97.7972       1211.72       1309.52    
  40  0.692807     -0.367004      -12.1838       12.1838       1226.27       1238.46    
  41  0.691658     -0.368664      -12.2390       12.2390       1241.02       1253.26    
  42  0.163447      -1.81127      -60.1307       60.1307       1238.38       1298.52    
  43  0.462923     -0.770194      -25.5690       25.5690       1217.14       1242.71    
  44  0.758611     -0.276266      -9.17151       9.17151       1207.13       1216.30    
  45  0.278938      -1.27677      -42.3863       42.3863       1228.83       1271.21    
  46  0.726655     -0.319304      -10.6003       10.6003       1244.63       1255.23    
  47  0.288418      -1.24334      -41.2767       41.2767       1193.97       1235.25    
  48  0.640221     -0.445941      -14.8044       14.8044       1279.80       1294.61    
  49  0.531981     -0.631147      -20.9529       20.9529       1281.30       1302.25    
  50  0.494380     -0.704450      -23.3865       23.3865       1303.01       1326.40    
  51  0.765719     -0.266940      -8.86193       8.86193       1223.82       1232.68    
  52  0.274236      -1.29377      -42.9507       42.9507       1286.40       1329.35    
  53  0.946599     -0.548792E-01  -1.82189       1.82189       1300.22       1302.05    
  54  0.264711      -1.32912      -44.1243       44.1243       1240.71       1284.83    
  55  0.129097      -2.04719      -67.9630       67.9630       1250.82       1318.79    
  56  0.217636      -1.52493      -50.6249       50.6249       1331.35       1381.97    
  57  0.430633     -0.842500      -27.9694       27.9694       1186.97       1214.94    
  58  0.307617      -1.17890      -39.1373       39.1373       1389.10       1428.24    
  59  0.137533      -1.98389      -65.8614       65.8614       1405.23       1471.09    
  60  0.560294     -0.579293      -19.2315       19.2315       1407.45       1426.68    
  61  0.531695     -0.631686      -20.9708       20.9708       1407.76       1428.73    
  62  0.259312      -1.34972      -44.8083       44.8083       1347.44       1392.25    
  63  0.928174     -0.745366E-01  -2.47448       2.47448       1429.18       1431.66    
  64  0.501730     -0.689694      -22.8966       22.8966       1437.49       1460.39    
  65  0.978765     -0.214635E-01 -0.712550      0.712550       1375.13       1375.84    
  66  0.977551     -0.227050E-01 -0.753765      0.753765       1463.91       1464.66    
  67  0.298331      -1.20955      -40.1549       40.1549       1445.71       1485.87    
  68  0.958356     -0.425363E-01  -1.41213       1.41213       1457.25       1458.66    
  69  0.140025      -1.96594      -65.2655       65.2655       1437.32       1502.59    
  70  0.204883      -1.58531      -52.6295       52.6295       1439.42       1492.05    
  71  0.408241     -0.895898      -29.7422       29.7422       1449.84       1479.59    
  72  0.552023     -0.594165      -19.7252       19.7252       1412.16       1431.89    
  73  0.123070      -2.09500      -69.5502       69.5502       1453.26       1522.81    
  74  0.509442E-01  -2.97702      -98.8317       98.8317       1451.09       1549.92    
loop,thermsimp(1:2)       22   27.6453       108.548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    373       1485.87        129.65          0.67         30.23          1.85          0.04        162.44
Just calling func    0   0        162.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1485.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       22
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       23
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      372     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -44.3586       44.3586       919.160       963.518    
   2  0.388449     -0.945595      -31.3920       31.3920       927.369       958.761    
   3  0.827051     -0.189889      -6.30397       6.30397       931.134       937.438    
   4  0.958395     -0.424951E-01  -1.41076       1.41076       992.393       993.804    
   5  0.125400      -2.07625      -68.9277       68.9277       928.402       997.330    
   6  0.524174     -0.645931      -21.4437       21.4437       1005.15       1026.59    
   7  0.783721     -0.243702      -8.09046       8.09046       1013.25       1021.34    
   8  0.183361      -1.69630      -56.3141       56.3141       997.061       1053.38    
   9  0.122208      -2.10203      -69.7835       69.7835       984.147       1053.93    
  10  0.913915     -0.900182E-01  -2.98844       2.98844       994.676       997.665    
  11  0.273776      -1.29545      -43.0064       43.0064       978.997       1022.00    
  12  0.779874     -0.248622      -8.25380       8.25380       1032.83       1041.08    
  13  0.305314      -1.18641      -39.3867       39.3867       1042.84       1082.22    
  14  0.720732     -0.327488      -10.8720       10.8720       1033.01       1043.88    
  15  0.222329      -1.50360      -49.9167       49.9167       1031.58       1081.50    
  16  0.826299     -0.190798      -6.33415       6.33415       1022.04       1028.37    
  17  0.581574     -0.542017      -17.9940       17.9940       1051.56       1069.56    
  18  0.616258     -0.484089      -16.0709       16.0709       1013.96       1030.03    
  19  0.604230     -0.503801      -16.7253       16.7253       1068.11       1084.84    
  20  0.333333      -1.09861      -36.4720       36.4720       1065.84       1102.31    
  21  0.289888E-01  -3.54085      -117.550       117.550       1030.06       1147.61    
  22  0.396892     -0.924091      -30.6781       30.6781       974.423       1005.10    
  23  0.910378     -0.938957E-01  -3.11716       3.11716       1076.81       1079.92    
  24  0.998355     -0.164683E-02 -0.546716E-01  0.546716E-01   1082.37       1082.42    
  25  0.735990     -0.306539      -10.1765       10.1765       1039.39       1049.57    
  26  0.779044     -0.249688      -8.28919       8.28919       1057.86       1066.15    
  27  0.498268     -0.696618      -23.1264       23.1264       1061.57       1084.70    
  28  0.693129     -0.366539      -12.1684       12.1684       1115.73       1127.89    
  29  0.691370     -0.369080      -12.2528       12.2528       1147.76       1160.02    
  30  0.519398     -0.655086      -21.7476       21.7476       1101.44       1123.19    
  31  0.365801      -1.00567      -33.3862       33.3862       1172.60       1205.99    
  32  0.352392      -1.04301      -34.6260       34.6260       1044.86       1079.48    
  33  0.176642      -1.73363      -57.5533       57.5533       1145.34       1202.89    
  34  0.982977     -0.171697E-01 -0.570001      0.570001       1136.23       1136.80    
  35  0.466781     -0.761894      -25.2935       25.2935       1189.08       1214.37    
  36  0.481130     -0.731617      -24.2884       24.2884       1157.00       1181.29    
  37  0.238852      -1.43191      -47.5369       47.5369       1119.26       1166.80    
  38  0.453247     -0.791318      -26.2703       26.2703       1186.97       1213.24    
  39  0.579188     -0.546129      -18.1305       18.1305       1207.13       1225.26    
  40  0.802776E-01  -2.52226      -83.7345       83.7345       1223.82       1307.56    
  41  0.819632     -0.198900      -6.60312       6.60312       1193.97       1200.57    
  42  0.917023     -0.866231E-01  -2.87573       2.87573       1226.27       1229.15    
  43  0.328296      -1.11384      -36.9775       36.9775       1196.76       1233.73    
  44  0.751681     -0.285443      -9.47618       9.47618       1217.14       1226.62    
  45  0.760454     -0.273840      -9.09098       9.09098       1241.02       1250.11    
  46  0.655053     -0.423039      -14.0441       14.0441       1244.63       1258.68    
  47  0.438192     -0.825097      -27.3917       27.3917       1228.83       1256.22    
  48  0.615984E-01  -2.78712      -92.5272       92.5272       1240.71       1333.24    
  49  0.373345     -0.985252      -32.7085       32.7085       1279.80       1312.51    
  50  0.173578      -1.75113      -58.1342       58.1342       1238.38       1296.52    
  51  0.787098     -0.239402      -7.94771       7.94771       1300.22       1308.17    
  52  0.476899     -0.740450      -24.5816       24.5816       1281.30       1305.88    
  53  0.267079      -1.32021      -43.8285       43.8285       1211.72       1255.55    
  54  0.328534E-01  -3.41570      -113.395       113.395       1250.82       1364.22    
  55  0.223376      -1.49890      -49.7607       49.7607       1303.01       1352.77    
  56  0.950133     -0.511529E-01  -1.69818       1.69818       1286.40       1288.10    
  57  0.802688     -0.219789      -7.29658       7.29658       1375.13       1382.42    
  58  0.687564     -0.374601      -12.4360       12.4360       1331.35       1343.78    
  59  0.389763     -0.942217      -31.2799       31.2799       1347.44       1378.72    
  60  0.828122     -0.188595      -6.26099       6.26099       1407.45       1413.71    
  61  0.447451     -0.804188      -26.6976       26.6976       1389.10       1415.80    
  62  0.132831      -2.01868      -67.0164       67.0164       1407.76       1474.78    
  63  0.217304E-01  -3.82904      -127.117       127.117       1429.18       1556.30    
  64  0.466508     -0.762480      -25.3129       25.3129       1412.16       1437.48    
  65  0.713806     -0.337144      -11.1926       11.1926       1457.25       1468.44    
  66  0.198949E-01  -3.91729      -130.047       130.047       1437.49       1567.54    
  67  0.532640     -0.629910      -20.9118       20.9118       1463.91       1484.82    
  68  0.788490     -0.237636      -7.88908       7.88908       1405.23       1413.12    
  69  0.603947     -0.504269      -16.7408       16.7408       1449.84       1466.59    
  70  0.150417      -1.89434      -62.8887       62.8887       1445.71       1508.60    
  71  0.504457     -0.684273      -22.7166       22.7166       1439.42       1462.14    
  72  0.893450     -0.112665      -3.74028       3.74028       1437.32       1441.06    
  73  0.245208      -1.40565      -46.6649       46.6649       1453.26       1499.92    
  74  0.648805     -0.432623      -14.3623       14.3623       1485.87       1500.23    
loop,thermsimp(1:2)       23   44.3586       31.3920    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        987.65        129.41          0.67         30.10          1.94          0.05        162.17
Just calling func    0   0        162.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    987.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       23
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       24
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      373     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -19.1042       19.1042       931.134       950.239    
   2  0.429755     -0.844539      -28.0371       28.0371       927.369       955.406    
   3  0.598807     -0.512815      -17.0245       17.0245       919.160       936.184    
   4  0.757798     -0.277339      -9.20714       9.20714       992.393       1001.60    
   5  0.954130E-01  -2.34954      -78.0004       78.0004       928.402       1006.40    
   6  0.968708E-01  -2.33438      -77.4970       77.4970       994.676       1072.17    
   7  0.196924      -1.62494      -53.9449       53.9449       974.423       1028.37    
   8  0.616654     -0.483447      -16.0495       16.0495       1013.25       1029.30    
   9  0.181969      -1.70392      -56.5670       56.5670       978.997       1035.56    
  10  0.383918     -0.957326      -31.7815       31.7815       1005.15       1036.93    
  11  0.377012     -0.975478      -32.3841       32.3841       1022.04       1054.42    
  12  0.899192     -0.106259      -3.52759       3.52759       1013.96       1017.49    
  13  0.409833     -0.892005      -29.6129       29.6129       1032.83       1062.44    
  14  0.728621     -0.316601      -10.5106       10.5106       1033.01       1043.52    
  15  0.568233     -0.565224      -18.7644       18.7644       1039.39       1058.15    
  16  0.647091     -0.435269      -14.4501       14.4501       997.061       1011.51    
  17  0.118896      -2.12951      -70.6957       70.6957       984.147       1054.84    
  18  0.910801     -0.934313E-01  -3.10175       3.10175       1057.86       1060.97    
  19  0.484176     -0.725308      -24.0789       24.0789       1051.56       1075.64    
  20  0.327343      -1.11675      -37.0740       37.0740       1044.86       1081.93    
  21  0.674995     -0.393050      -13.0485       13.0485       1076.81       1089.85    
  22  0.234857      -1.44878      -48.0968       48.0968       1031.58       1079.68    
  23  0.800837     -0.222098      -7.37324       7.37324       1042.84       1050.21    
  24  0.619975     -0.478077      -15.8713       15.8713       1082.37       1098.24    
  25  0.578519     -0.547284      -18.1688       18.1688       1061.57       1079.74    
  26  0.837214     -0.177675      -5.89850       5.89850       1068.11       1074.01    
  27  0.935915     -0.662302E-01  -2.19872       2.19872       1065.84       1068.04    
  28  0.779751     -0.248781      -8.25906       8.25906       1101.44       1109.70    
  29  0.801557     -0.221199      -7.34341       7.34341       1115.73       1123.07    
  30  0.827533E-01  -2.49189      -82.7262       82.7262       1136.23       1218.95    
  31  0.640581     -0.445379      -14.7858       14.7858       1030.06       1044.85    
  32  0.226382      -1.48553      -49.3169       49.3169       1147.76       1197.08    
  33  0.198814E-01  -3.91797      -130.069       130.069       1119.26       1249.33    
  34  0.147003      -1.91730      -63.6508       63.6508       1157.00       1220.65    
  35  0.568592     -0.564592      -18.7434       18.7434       1193.97       1212.71    
  36  0.650717     -0.429680      -14.2646       14.2646       1145.34       1159.60    
  37  0.259092      -1.35057      -44.8366       44.8366       1172.60       1217.44    
  38  0.935898     -0.662490E-01  -2.19934       2.19934       1186.97       1189.17    
  39  0.702433     -0.353205      -11.7258       11.7258       1189.08       1200.80    
  40  0.622661     -0.473753      -15.7277       15.7277       1207.13       1222.86    
  41  0.546960     -0.603380      -20.0311       20.0311       1217.14       1237.17    
  42  0.883578     -0.123775      -4.10912       4.10912       1226.27       1230.38    
  43  0.728206E-02  -4.92234      -163.413       163.413       1196.76       1360.17    
  44  0.112001      -2.18925      -72.6790       72.6790       1241.02       1313.70    
  45  0.689494     -0.371797      -12.3430       12.3430       1211.72       1224.07    
  46  0.872629     -0.136244      -4.52306       4.52306       1228.83       1233.35    
  47  0.688489     -0.373256      -12.3914       12.3914       1244.63       1257.02    
  48  0.947843     -0.535662E-01  -1.77830       1.77830       1286.40       1288.18    
  49  0.294529      -1.22238      -40.5806       40.5806       1238.38       1278.97    
  50  0.717675E-01  -2.63432      -87.4547       87.4547       1281.30       1368.75    
  51  0.738094     -0.303684      -10.0818       10.0818       1223.82       1233.90    
  52  0.237514      -1.43753      -47.7233       47.7233       1300.22       1347.95    
  53  0.932770     -0.695962E-01  -2.31047       2.31047       1279.80       1282.11    
  54  0.973437     -0.269222E-01 -0.893767      0.893767       1240.71       1241.60    
  55  0.216069      -1.53216      -50.8648       50.8648       1331.35       1382.21    
  56  0.927621     -0.751319E-01  -2.49424       2.49424       1303.01       1305.50    
  57  0.882551     -0.124939      -4.14775       4.14775       1250.82       1254.97    
  58  0.958611     -0.422698E-01  -1.40328       1.40328       1347.44       1348.84    
  59  0.174241      -1.74732      -58.0077       58.0077       1375.13       1433.14    
  60  0.165969      -1.79595      -59.6224       59.6224       1405.23       1464.85    
  61  0.449805     -0.798942      -26.5234       26.5234       1407.45       1433.97    
  62  0.749166     -0.288795      -9.58746       9.58746       1389.10       1398.69    
  63  0.564353     -0.572075      -18.9918       18.9918       1412.16       1431.16    
  64  0.721233     -0.326792      -10.8489       10.8489       1437.32       1448.17    
  65  0.160496      -1.82949      -60.7355       60.7355       1439.42       1500.16    
  66  0.951367     -0.498557E-01  -1.65512       1.65512       1449.84       1451.50    
  67  0.392818     -0.934408      -31.0206       31.0206       1457.25       1488.27    
  68  0.502077     -0.689002      -22.8736       22.8736       1407.76       1430.64    
  69  0.414837     -0.879871      -29.2101       29.2101       1463.91       1493.12    
  70  0.954606     -0.464567E-01  -1.54228       1.54228       1453.26       1454.80    
  71  0.444045     -0.811830      -26.9513       26.9513       1485.87       1512.82    
  72  0.420207     -0.867007      -28.7830       28.7830       1445.71       1474.49    
  73  0.743114     -0.296906      -9.85674       9.85674       1429.18       1439.04    
  74  0.602838     -0.506107      -16.8018       16.8018       987.655       1004.46    
loop,thermsimp(1:2)       24   19.1042       28.0371    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375       1444.28        129.60          0.67         29.91          1.75          0.05        161.98
Just calling func    0   0        161.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1444.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       24
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       25
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      374     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -9.28065       9.28065       919.160       928.440    
   2  0.693006     -0.366716      -12.1743       12.1743       931.134       943.309    
   3  0.647780     -0.434203      -14.4148       14.4148       927.369       941.784    
   4  0.895769     -0.110072      -3.65420       3.65420       992.393       996.048    
   5  0.775956     -0.253659      -8.42101       8.42101       987.655       996.076    
   6  0.891264     -0.115114      -3.82158       3.82158       928.402       932.224    
   7  0.553736     -0.591068      -19.6224       19.6224       997.061       1016.68    
   8  0.646797     -0.435723      -14.4652       14.4652       1013.96       1028.43    
   9  0.646048     -0.436881      -14.5037       14.5037       974.423       988.926    
  10  0.160937      -1.82675      -60.6446       60.6446       1013.25       1073.89    
  11  0.840732     -0.173482      -5.75928       5.75928       978.997       984.756    
  12  0.377447     -0.974325      -32.3458       32.3458       1005.15       1037.49    
  13  0.214649      -1.53875      -51.0837       51.0837       1033.01       1084.10    
  14  0.424093     -0.857804      -28.4775       28.4775       1030.06       1058.54    
  15  0.693510     -0.365990      -12.1502       12.1502       1042.84       1054.99    
  16  0.252894      -1.37478      -45.6403       45.6403       1022.04       1067.68    
  17  0.765441     -0.267303      -8.87397       8.87397       984.147       993.021    
  18  0.481029     -0.731828      -24.2953       24.2953       1039.39       1063.68    
  19  0.211808      -1.55207      -51.5260       51.5260       1057.86       1109.39    
  20  0.616599E-01  -2.78612      -92.4941       92.4941       1032.83       1125.32    
  21  0.110259      -2.20492      -73.1993       73.1993       1065.84       1139.04    
  22  0.475319     -0.743769      -24.6918       24.6918       994.676       1019.37    
  23  0.500411E-01  -2.99491      -99.4255       99.4255       1068.11       1167.54    
  24  0.126445      -2.06795      -68.6521       68.6521       1051.56       1120.22    
  25  0.693760     -0.365629      -12.1382       12.1382       1031.58       1043.72    
  26  0.876607E-01  -2.43428      -80.8137       80.8137       1061.57       1142.38    
  27  0.564718     -0.571429      -18.9704       18.9704       1044.86       1063.83    
  28  0.572706     -0.557383      -18.5041       18.5041       1076.81       1095.31    
  29  0.739618     -0.301621      -10.0133       10.0133       1082.37       1092.38    
  30  0.428028     -0.848566      -28.1708       28.1708       1101.44       1129.61    
  31  0.864224     -0.145923      -4.84438       4.84438       1115.73       1120.57    
  32  0.326884      -1.11815      -37.1205       37.1205       1145.34       1182.46    
  33  0.626295     -0.467933      -15.5345       15.5345       1186.97       1202.51    
  34  0.576680     -0.550467      -18.2745       18.2745       1147.76       1166.04    
  35  0.988375     -0.116929E-01 -0.388184      0.388184       1189.08       1189.47    
  36  0.834431     -0.181006      -6.00906       6.00906       1193.97       1199.98    
  37  0.944839     -0.567403E-01  -1.88367       1.88367       1172.60       1174.49    
  38  0.182182      -1.70275      -56.5282       56.5282       1136.23       1192.75    
  39  0.882984     -0.124449      -4.13147       4.13147       1157.00       1161.13    
  40  0.756839     -0.278604      -9.24915       9.24915       1207.13       1216.38    
  41  0.530350     -0.634218      -21.0549       21.0549       1211.72       1232.78    
  42  0.257866      -1.35531      -44.9939       44.9939       1226.27       1271.27    
  43  0.575794     -0.552006      -18.3256       18.3256       1228.83       1247.15    
  44  0.907029     -0.975811E-01  -3.23951       3.23951       1223.82       1227.06    
  45  0.385513     -0.953180      -31.6438       31.6438       1217.14       1248.79    
  46  0.352081      -1.04389      -34.6553       34.6553       1240.71       1275.37    
  47  0.587153     -0.532470      -17.6770       17.6770       1119.26       1136.94    
  48  0.748916     -0.289129      -9.59855       9.59855       1250.82       1260.42    
  49  0.152024      -1.88371      -62.5358       62.5358       1244.63       1307.17    
  50  0.501193     -0.690765      -22.9321       22.9321       1238.38       1261.32    
  51  0.743551     -0.296318      -9.83720       9.83720       1279.80       1289.64    
  52  0.336569      -1.08895      -36.1512       36.1512       1286.40       1322.55    
  53  0.523746     -0.646748      -21.4708       21.4708       1303.01       1324.48    
  54  0.471323     -0.752211      -24.9720       24.9720       1241.02       1265.99    
  55  0.131680E-01  -4.32996      -143.747       143.747       1300.22       1443.97    
  56  0.410982     -0.889205      -29.5200       29.5200       1347.44       1376.96    
  57  0.476445E-01  -3.04399      -101.055       101.055       1196.76       1297.81    
  58  0.734680     -0.308321      -10.2357       10.2357       1281.30       1291.53    
  59  0.426979     -0.851021      -28.2523       28.2523       1331.35       1359.60    
  60  0.196810      -1.62552      -53.9642       53.9642       1389.10       1443.07    
  61  0.317540      -1.14715      -38.0833       38.0833       1407.76       1445.85    
  62  0.616579     -0.483568      -16.0536       16.0536       1412.16       1428.22    
  63  0.828245     -0.188447      -6.25608       6.25608       1375.13       1381.38    
  64  0.996165     -0.384219E-02 -0.127554      0.127554       1407.45       1407.57    
  65  0.804642     -0.217357      -7.21586       7.21586       1429.18       1436.40    
  66  0.407370     -0.898034      -29.8131       29.8131       1437.32       1467.14    
  67  0.192241      -1.64900      -54.7439       54.7439       1449.84       1504.59    
  68  0.393311     -0.933154      -30.9790       30.9790       1453.26       1484.23    
  69  0.393016     -0.933905      -31.0039       31.0039       1405.23       1436.23    
  70  0.593931     -0.520992      -17.2960       17.2960       1445.71       1463.01    
  71  0.307970      -1.17775      -39.0992       39.0992       1457.25       1496.35    
  72  0.858655E-02  -4.75756      -157.942       157.942       1463.91       1621.85    
  73  0.430345     -0.843167      -27.9916       27.9916       1439.42       1467.41    
  74  0.365091      -1.00761      -33.4507       33.4507       1444.28       1477.73    
loop,thermsimp(1:2)       25   9.28065       12.1743    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376        991.60        129.97          0.66         30.11          1.68          0.05        162.47
Just calling func    0   0        162.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    991.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       25
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       26
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      375     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -29.6083       29.6083       919.160       948.768    
   2  0.389332     -0.943323      -31.3166       31.3166       928.402       959.719    
   3  0.765657     -0.267021      -8.86461       8.86461       927.369       936.234    
   4  0.505025     -0.683148      -22.6793       22.6793       931.134       953.814    
   5  0.681598     -0.383316      -12.7254       12.7254       978.997       991.722    
   6  0.895525     -0.110345      -3.66325       3.66325       974.423       978.086    
   7  0.540074     -0.616050      -20.4517       20.4517       984.147       1004.60    
   8  0.125370      -2.07648      -68.9354       68.9354       992.393       1061.33    
   9  0.306095      -1.18386      -39.3020       39.3020       987.655       1026.96    
  10  0.898677     -0.106831      -3.54661       3.54661       997.061       1000.61    
  11  0.355276      -1.03486      -34.3555       34.3555       994.676       1029.03    
  12  0.855641     -0.155905      -5.17575       5.17575       1013.96       1019.14    
  13  0.894333E-01  -2.41426      -80.1491       80.1491       1005.15       1085.30    
  14  0.291038      -1.23430      -40.9766       40.9766       1031.58       1072.56    
  15  0.848476E-01  -2.46690      -81.8965       81.8965       1042.84       1124.73    
  16  0.655469     -0.422404      -14.0230       14.0230       1030.06       1044.09    
  17  0.181028      -1.70910      -56.7391       56.7391       1039.39       1096.13    
  18  0.801189     -0.221659      -7.35867       7.35867       1044.86       1052.22    
  19  0.659702     -0.415967      -13.8093       13.8093       1022.04       1035.85    
  20  0.500397     -0.692354      -22.9849       22.9849       1013.25       1036.23    
  21  0.901964     -0.103181      -3.42542       3.42542       1033.01       1036.44    
  22  0.331186      -1.10508      -36.6865       36.6865       1082.37       1119.06    
  23  0.572805E-01  -2.85979      -94.9399       94.9399       1076.81       1171.75    
  24  0.511624     -0.670164      -22.2482       22.2482       1057.86       1080.11    
  25  0.953295     -0.478312E-01  -1.58791       1.58791       1051.56       1053.15    
  26  0.454382     -0.788818      -26.1873       26.1873       1115.73       1141.91    
  27  0.697217E-01  -2.66324      -88.4148       88.4148       1032.83       1121.24    
  28  0.269239      -1.31216      -43.5612       43.5612       1101.44       1145.00    
  29  0.855725     -0.155806      -5.17248       5.17248       1119.26       1124.44    
  30  0.408332E-02  -5.50085      -182.618       182.618       1065.84       1248.45    
  31  0.926366     -0.764862E-01  -2.53920       2.53920       1061.57       1064.11    
  32  0.356547      -1.03129      -34.2369       34.2369       1157.00       1191.23    
  33  0.550351     -0.597200      -19.8259       19.8259       1147.76       1167.59    
  34  0.475063     -0.744308      -24.7097       24.7097       1068.11       1092.82    
  35  0.420107     -0.867246      -28.7910       28.7910       1172.60       1201.40    
  36  0.521034     -0.651939      -21.6432       21.6432       1145.34       1166.98    
  37  0.979034     -0.211889E-01 -0.703433      0.703433       1189.08       1189.78    
  38  0.599858     -0.511062      -16.9663       16.9663       1136.23       1153.19    
  39  0.800850     -0.222082      -7.37271       7.37271       1193.97       1201.34    
  40  0.823189     -0.194570      -6.45936       6.45936       1186.97       1193.43    
  41  0.709226E-01  -2.64617      -87.8479       87.8479       1207.13       1294.98    
  42  0.555654     -0.587609      -19.5075       19.5075       1223.82       1243.33    
  43  0.920379     -0.829696E-01  -2.75444       2.75444       1211.72       1214.48    
  44  0.904537     -0.100332      -3.33083       3.33083       1228.83       1232.16    
  45  0.990568     -0.947695E-02 -0.314617      0.314617       1217.14       1217.46    
  46  0.647203     -0.435096      -14.4444       14.4444       1250.82       1265.27    
  47  0.634714     -0.454580      -15.0912       15.0912       1238.38       1253.48    
  48  0.771196     -0.259812      -8.62529       8.62529       1241.02       1249.65    
  49  0.857464     -0.153776      -5.10510       5.10510       1226.27       1231.38    
  50  0.816462     -0.202774      -6.73174       6.73174       1240.71       1247.44    
  51  0.233603      -1.45413      -48.2745       48.2745       1279.80       1328.08    
  52  0.554523     -0.589647      -19.5752       19.5752       1281.30       1300.87    
  53  0.217770      -1.52432      -50.6045       50.6045       1196.76       1247.36    
  54  0.795785     -0.228426      -7.58331       7.58331       1244.63       1252.21    
  55  0.458481     -0.779836      -25.8891       25.8891       1286.40       1312.29    
  56  0.725204     -0.321302      -10.6666       10.6666       1303.01       1313.68    
  57  0.962495     -0.382260E-01  -1.26903       1.26903       1331.35       1332.62    
  58  0.652668     -0.426687      -14.1652       14.1652       1347.44       1361.60    
  59  0.562055     -0.576156      -19.1273       19.1273       1375.13       1394.26    
  60  0.620063     -0.477935      -15.8665       15.8665       1407.45       1423.31    
  61  0.487741     -0.717971      -23.8353       23.8353       1412.16       1436.00    
  62  0.561234     -0.577617      -19.1758       19.1758       1405.23       1424.40    
  63  0.758662     -0.276198      -9.16928       9.16928       1429.18       1438.35    
  64  0.144869      -1.93192      -64.1363       64.1363       1389.10       1453.24    
  65  0.572142     -0.558368      -18.5368       18.5368       1300.22       1318.76    
  66  0.105888      -2.24537      -74.5423       74.5423       1407.76       1482.31    
  67  0.469880     -0.755279      -25.0739       25.0739       1445.71       1470.79    
  68  0.268533      -1.31478      -43.6483       43.6483       1437.32       1480.97    
  69  0.807102     -0.214305      -7.11454       7.11454       1439.42       1446.54    
  70  0.522324     -0.649467      -21.5611       21.5611       1444.28       1465.84    
  71  0.732040     -0.311921      -10.3552       10.3552       1453.26       1463.61    
  72  0.136731      -1.98974      -66.0556       66.0556       1457.25       1523.30    
  73  0.230040E-01  -3.77209      -125.226       125.226       1449.84       1575.07    
  74  0.928666     -0.740060E-01  -2.45686       2.45686       991.603       994.060    
loop,thermsimp(1:2)       26   29.6083       31.3166    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377       1285.00        129.82          0.65         30.16          1.88          0.05        162.55
Just calling func    0   0        162.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1285.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       26
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       27
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      376     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -24.4482       24.4482       927.369       951.817    
   2  0.431280     -0.840999      -27.9196       27.9196       919.160       947.079    
   3  0.231120      -1.46482      -48.6293       48.6293       931.134       979.764    
   4  0.306155      -1.18366      -39.2954       39.2954       928.402       967.698    
   5  0.514107     -0.665324      -22.0875       22.0875       974.423       996.510    
   6  0.784944E-01  -2.54473      -84.4803       84.4803       978.997       1063.48    
   7  0.767893     -0.264105      -8.76780       8.76780       991.603       1000.37    
   8  0.240450E-02  -6.03041      -200.199       200.199       997.061       1197.26    
   9  0.185505      -1.68467      -55.9280       55.9280       984.147       1040.07    
  10  0.405909     -0.901627      -29.9324       29.9324       1013.96       1043.89    
  11  0.681143     -0.383983      -12.7475       12.7475       987.655       1000.40    
  12  0.529175     -0.636436      -21.1285       21.1285       994.676       1015.80    
  13  0.873060     -0.135751      -4.50670       4.50670       1022.04       1026.55    
  14  0.457661     -0.781625      -25.9485       25.9485       1013.25       1039.19    
  15  0.564230     -0.572293      -18.9991       18.9991       1033.01       1052.01    
  16  0.949800     -0.515039E-01  -1.70984       1.70984       1030.06       1031.77    
  17  0.581003E-01  -2.84558      -94.4682       94.4682       1044.86       1139.32    
  18  0.180069      -1.71442      -56.9155       56.9155       1051.56       1108.48    
  19  0.222412      -1.50322      -49.9042       49.9042       992.393       1042.30    
  20  0.821703     -0.196377      -6.51935       6.51935       1061.57       1068.09    
  21  0.948363     -0.530176E-01  -1.76009       1.76009       1031.58       1033.34    
  22  0.796186     -0.227922      -7.56659       7.56659       1057.86       1065.43    
  23  0.881546     -0.126078      -4.18555       4.18555       1005.15       1009.33    
  24  0.702001     -0.353821      -11.7462       11.7462       1068.11       1079.86    
  25  0.878483     -0.129559      -4.30113       4.30113       1039.39       1043.69    
  26  0.158251      -1.84358      -61.2033       61.2033       1082.37       1143.57    
  27  0.759310E-02  -4.88052      -162.024       162.024       1032.83       1194.85    
  28  0.549090     -0.599492      -19.9020       19.9020       1119.26       1139.16    
  29  0.294083      -1.22389      -40.6310       40.6310       1042.84       1083.47    
  30  0.358851      -1.02485      -34.0230       34.0230       1115.73       1149.75    
  31  0.591031E-01  -2.82847      -93.9001       93.9001       1101.44       1195.34    
  32  0.413139     -0.883972      -29.3462       29.3462       1136.23       1165.57    
  33  0.564800     -0.571284      -18.9656       18.9656       1145.34       1164.30    
  34  0.472034     -0.750704      -24.9220       24.9220       1147.76       1172.68    
  35  0.270343      -1.30806      -43.4253       43.4253       1076.81       1120.23    
  36  0.704266     -0.350600      -11.6393       11.6393       1189.08       1200.72    
  37  0.317895E-01  -3.44862      -114.488       114.488       1157.00       1271.49    
  38  0.489641     -0.714083      -23.7063       23.7063       1186.97       1210.68    
  39  0.558309     -0.582843      -19.3493       19.3493       1193.97       1213.32    
  40  0.239099      -1.43088      -47.5025       47.5025       1172.60       1220.11    
  41  0.387399     -0.948301      -31.4818       31.4818       1211.72       1243.21    
  42  0.434686     -0.833131      -27.6584       27.6584       1217.14       1244.80    
  43  0.713921     -0.336983      -11.1872       11.1872       1226.27       1237.46    
  44  0.655374     -0.422550      -14.0279       14.0279       1228.83       1242.85    
  45  0.739749     -0.301444      -10.0074       10.0074       1223.82       1233.83    
  46  0.758411     -0.276530      -9.18028       9.18028       1196.76       1205.94    
  47  0.750796     -0.286621      -9.51529       9.51529       1240.71       1250.23    
  48  0.557150E-01  -2.88751      -95.8599       95.8599       1065.84       1161.70    
  49  0.438885     -0.823518      -27.3393       27.3393       1241.02       1268.36    
  50  0.384409     -0.956048      -31.7390       31.7390       1244.63       1276.37    
  51  0.163955E-01  -4.11075      -136.469       136.469       1238.38       1374.85    
  52  0.493958     -0.705305      -23.4148       23.4148       1250.82       1274.24    
  53  0.654549     -0.423809      -14.0697       14.0697       1207.13       1221.20    
  54  0.779913     -0.248573      -8.25217       8.25217       1281.30       1289.55    
  55  0.173265      -1.75293      -58.1941       58.1941       1286.40       1344.60    
  56  0.179445      -1.71789      -57.0307       57.0307       1303.01       1360.04    
  57  0.278651      -1.27780      -42.4205       42.4205       1300.22       1342.65    
  58  0.413230E-01  -3.18634      -105.781       105.781       1279.80       1385.58    
  59  0.406979     -0.898993      -29.8449       29.8449       1331.35       1361.19    
  60  0.860177     -0.150617      -5.00020       5.00020       1347.44       1352.44    
  61  0.199311      -1.61289      -53.5449       53.5449       1375.13       1428.67    
  62  0.896296     -0.109485      -3.63470       3.63470       1407.45       1411.08    
  63  0.893483E-01  -2.41521      -80.1806       80.1806       1405.23       1485.41    
  64  0.456564     -0.784026      -26.0282       26.0282       1412.16       1438.19    
  65  0.382288     -0.961582      -31.9227       31.9227       1429.18       1461.10    
  66  0.840946     -0.173227      -5.75083       5.75083       1439.42       1445.17    
  67  0.853937     -0.157898      -5.24192       5.24192       1389.10       1394.35    
  68  0.684923     -0.378448      -12.5638       12.5638       1453.26       1465.82    
  69  0.744622     -0.294878      -9.78942       9.78942       1444.28       1454.07    
  70  0.535942     -0.623729      -20.7066       20.7066       1445.71       1466.42    
  71  0.730934     -0.313432      -10.4054       10.4054       1437.32       1447.73    
  72  0.303021      -1.19395      -39.6371       39.6371       1407.76       1447.40    
  73  0.638654     -0.448392      -14.8858       14.8858       1457.25       1472.13    
  74  0.218314      -1.52182      -50.5216       50.5216       1285.00       1335.52    
loop,thermsimp(1:2)       27   24.4482       27.9196    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378       1069.88        130.09          0.65         29.80          2.09          0.04        162.68
Just calling func    0   0        162.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1069.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       27
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       28
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      377     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -31.8973       31.8973       919.160       951.057    
   2  0.718155     -0.331070      -10.9909       10.9909       927.369       938.360    
   3  0.581515     -0.542118      -17.9973       17.9973       928.402       946.400    
   4  0.230175E-01  -3.77150      -125.207       125.207       931.134       1056.34    
   5  0.506601     -0.680031      -22.5758       22.5758       974.423       996.998    
   6  0.209297      -1.56400      -51.9220       51.9220       991.603       1043.52    
   7  0.757725     -0.277434      -9.21031       9.21031       987.655       996.865    
   8  0.230972      -1.46546      -48.6505       48.6505       1005.15       1053.80    
   9  0.495080     -0.703037      -23.3395       23.3395       994.676       1018.02    
  10  0.947190     -0.542553E-01  -1.80118       1.80118       1022.04       1023.84    
  11  0.977432     -0.228269E-01 -0.757811      0.757811       1030.06       1030.82    
  12  0.320616      -1.13751      -37.7632       37.7632       1031.58       1069.34    
  13  0.252125      -1.37783      -45.7414       45.7414       1013.25       1058.99    
  14  0.871535     -0.137499      -4.56472       4.56472       984.147       988.711    
  15  0.856468E-02  -4.76011      -158.027       158.027       992.393       1150.42    
  16  0.352534      -1.04261      -34.6126       34.6126       1039.39       1074.00    
  17  0.750419     -0.287124      -9.53200       9.53200       1013.96       1023.49    
  18  0.215691      -1.53391      -50.9230       50.9230       1033.01       1083.94    
  19  0.833929     -0.181606      -6.02900       6.02900       978.997       985.026    
  20  0.714656E-01  -2.63854      -87.5946       87.5946       1057.86       1145.46    
  21  0.758349     -0.276612      -9.18301       9.18301       1061.57       1070.75    
  22  0.571963     -0.558680      -18.5472       18.5472       1068.11       1086.66    
  23  0.472398     -0.749934      -24.8964       24.8964       1042.84       1067.73    
  24  0.606854     -0.499467      -16.5814       16.5814       1051.56       1068.15    
  25  0.247109      -1.39793      -46.4086       46.4086       1076.81       1123.21    
  26  0.581778     -0.541666      -17.9823       17.9823       1119.26       1137.25    
  27  0.455447     -0.786476      -26.1096       26.1096       1044.86       1070.97    
  28  0.606617     -0.499857      -16.5943       16.5943       1082.37       1098.96    
  29  0.620033     -0.477983      -15.8681       15.8681       1115.73       1131.59    
  30  0.367527      -1.00096      -33.2300       33.2300       1065.84       1099.07    
  31  0.611260     -0.492233      -16.3412       16.3412       1145.34       1161.68    
  32  0.310332      -1.17011      -38.8455       38.8455       1136.23       1175.07    
  33  0.611387     -0.492025      -16.3343       16.3343       1147.76       1164.10    
  34  0.584386     -0.537193      -17.8338       17.8338       1032.83       1050.66    
  35  0.950350     -0.509246E-01  -1.69060       1.69060       1101.44       1103.13    
  36  0.228570      -1.47591      -48.9976       48.9976       997.061       1046.06    
  37  0.879867     -0.127985      -4.24885       4.24885       1189.08       1193.33    
  38  0.390808E-01  -3.24212      -107.633       107.633       1196.76       1304.39    
  39  0.104244      -2.26102      -75.0617       75.0617       1186.97       1262.03    
  40  0.922634     -0.805225E-01  -2.67320       2.67320       1193.97       1196.64    
  41  0.559015     -0.581578      -19.3073       19.3073       1172.60       1191.91    
  42  0.809074     -0.211865      -7.03354       7.03354       1207.13       1214.17    
  43  0.840951     -0.173222      -5.75065       5.75065       1223.82       1229.57    
  44  0.384796     -0.955043      -31.7057       31.7057       1226.27       1257.98    
  45  0.471744     -0.751318      -24.9424       24.9424       1228.83       1253.77    
  46  0.750950     -0.286417      -9.50850       9.50850       1211.72       1221.23    
  47  0.197617      -1.62143      -53.8284       53.8284       1217.14       1270.97    
  48  0.405005     -0.903855      -30.0063       30.0063       1240.71       1270.72    
  49  0.526481     -0.641540      -21.2980       21.2980       1241.02       1262.32    
  50  0.808042     -0.213142      -7.07591       7.07591       1157.00       1164.07    
  51  0.315225      -1.15447      -38.3263       38.3263       1250.82       1289.15    
  52  0.233772      -1.45341      -48.2505       48.2505       1244.63       1292.88    
  53  0.455864E-01  -3.08815      -102.521       102.521       1281.30       1383.82    
  54  0.748722     -0.289387      -9.60713       9.60713       1285.00       1294.61    
  55  0.237196E-01  -3.74145      -124.209       124.209       1300.22       1424.43    
  56  0.881679     -0.125927      -4.18055       4.18055       1286.40       1290.58    
  57  0.395054     -0.928733      -30.8322       30.8322       1347.44       1378.27    
  58  0.725060     -0.321501      -10.6732       10.6732       1303.01       1313.68    
  59  0.698840     -0.358333      -11.8960       11.8960       1331.35       1343.24    
  60  0.508334     -0.676617      -22.4624       22.4624       1238.38       1260.85    
  61  0.944269E-01  -2.35993      -78.3453       78.3453       1279.80       1358.15    
  62  0.604101     -0.504014      -16.7323       16.7323       1389.10       1405.84    
  63  0.662995     -0.410988      -13.6440       13.6440       1407.45       1421.09    
  64  0.715954     -0.334139      -11.0928       11.0928       1375.13       1386.22    
  65  0.528742     -0.637255      -21.1557       21.1557       1412.16       1433.32    
  66  0.971881     -0.285216E-01 -0.946865      0.946865       1439.42       1440.37    
  67  0.744068     -0.295622      -9.81412       9.81412       1407.76       1417.58    
  68  0.606637     -0.499824      -16.5932       16.5932       1437.32       1453.92    
  69  0.895363     -0.110526      -3.66925       3.66925       1444.28       1447.95    
  70  0.564713     -0.571438      -18.9707       18.9707       1429.18       1448.15    
  71  0.895199     -0.110709      -3.67535       3.67535       1453.26       1456.93    
  72  0.373078     -0.985968      -32.7323       32.7323       1445.71       1478.44    
  73  0.107160      -2.23343      -74.1458       74.1458       1457.25       1531.39    
  74  0.477028     -0.740179      -24.5726       24.5726       1069.88       1094.45    
loop,thermsimp(1:2)       28   31.8973       10.9909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379       1569.04        129.57          0.64         29.75          2.12          0.04        162.12
Just calling func    0   0        162.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    380       1048.68        129.61          0.65         29.72          2.16          0.04        162.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1048.68
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       28
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       29
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      379     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -18.5652       18.5652       927.369       945.934    
   2  0.243540      -1.41247      -46.8915       46.8915       928.402       975.294    
   3  0.374772     -0.981437      -32.5819       32.5819       919.160       951.742    
   4  0.700054     -0.356598      -11.8384       11.8384       978.997       990.835    
   5  0.301581      -1.19872      -39.7951       39.7951       984.147       1023.94    
   6  0.531818     -0.631454      -20.9631       20.9631       987.655       1008.62    
   7  0.185013      -1.68733      -56.0163       56.0163       974.423       1030.44    
   8  0.107050      -2.23446      -74.1800       74.1800       994.676       1068.86    
   9  0.979566     -0.206453E-01 -0.685385      0.685385       1013.96       1014.65    
  10  0.706074     -0.348035      -11.5541       11.5541       1022.04       1033.59    
  11  0.112110      -2.18827      -72.6466       72.6466       1030.06       1102.71    
  12  0.212442      -1.54908      -51.4268       51.4268       991.603       1043.03    
  13  0.625740     -0.468820      -15.5640       15.5640       997.061       1012.63    
  14  0.265918      -1.32457      -43.9732       43.9732       1032.83       1076.80    
  15  0.369004     -0.996947      -33.0968       33.0968       1005.15       1038.24    
  16  0.531799     -0.631491      -20.9643       20.9643       931.134       952.099    
  17  0.227318      -1.48140      -49.1799       49.1799       1013.25       1062.43    
  18  0.512871     -0.667732      -22.1675       22.1675       1042.84       1065.00    
  19  0.394785     -0.929415      -30.8549       30.8549       1051.56       1082.42    
  20  0.720084     -0.328388      -10.9019       10.9019       1031.58       1042.48    
  21  0.185505      -1.68467      -55.9280       55.9280       1061.57       1117.50    
  22  0.658242     -0.418183      -13.8829       13.8829       1044.86       1058.74    
  23  0.888593     -0.118116      -3.92123       3.92123       1039.39       1043.31    
  24  0.773453     -0.256890      -8.52827       8.52827       1033.01       1041.54    
  25  0.594480E-01  -2.82265      -93.7069       93.7069       1068.11       1161.82    
  26  0.112908      -2.18118      -72.4113       72.4113       1069.88       1142.29    
  27  0.940300     -0.615559E-01  -2.04354       2.04354       1082.37       1084.41    
  28  0.990261     -0.978663E-02 -0.324898      0.324898       1065.84       1066.16    
  29  0.686451     -0.376220      -12.4898       12.4898       1101.44       1113.93    
  30  0.558815     -0.581936      -19.3192       19.3192       1076.81       1096.12    
  31  0.574196     -0.554784      -18.4178       18.4178       1115.73       1134.14    
  32  0.678960     -0.387193      -12.8541       12.8541       1119.26       1132.12    
  33  0.306232      -1.18341      -39.2872       39.2872       1057.86       1097.15    
  34  0.969485     -0.309907E-01  -1.02883       1.02883       992.393       993.422    
  35  0.520627     -0.652722      -21.6692       21.6692       1145.34       1167.01    
  36  0.870581     -0.138594      -4.60107       4.60107       1157.00       1161.60    
  37  0.127650      -2.05846      -68.3371       68.3371       1147.76       1216.10    
  38  0.276190      -1.28667      -42.7149       42.7149       1136.23       1178.94    
  39  0.842544     -0.171330      -5.68783       5.68783       1172.60       1178.29    
  40  0.336933      -1.08787      -36.1153       36.1153       1189.08       1225.19    
  41  0.685284     -0.377921      -12.5463       12.5463       1193.97       1206.52    
  42  0.555142     -0.588531      -19.5381       19.5381       1207.13       1226.67    
  43  0.857048     -0.154261      -5.12118       5.12118       1211.72       1216.85    
  44  0.612111E-01  -2.79343      -92.7366       92.7366       1223.82       1316.56    
  45  0.672500     -0.396753      -13.1715       13.1715       1228.83       1242.00    
  46  0.820423E-01  -2.50052      -83.0127       83.0127       1226.27       1309.29    
  47  0.546679     -0.603893      -20.0481       20.0481       1238.38       1258.43    
  48  0.624723     -0.470446      -15.6180       15.6180       1186.97       1202.59    
  49  0.906365     -0.983128E-01  -3.26381       3.26381       1241.02       1244.29    
  50  0.807763     -0.213487      -7.08736       7.08736       1240.71       1247.80    
  51  0.347580      -1.05676      -35.0825       35.0825       1217.14       1252.23    
  52  0.233390      -1.45504      -48.3048       48.3048       1250.82       1299.13    
  53  0.265609      -1.32573      -44.0118       44.0118       1286.40       1330.41    
  54  0.277652      -1.28139      -42.5397       42.5397       1244.63       1287.17    
  55  0.836033     -0.179087      -5.94535       5.94535       1285.00       1290.95    
  56  0.170063      -1.77159      -58.8135       58.8135       1196.76       1255.57    
  57  0.798928     -0.224485      -7.45249       7.45249       1303.01       1310.46    
  58  0.707521E-01  -2.64857      -87.9277       87.9277       1331.35       1419.27    
  59  0.699192     -0.357830      -11.8793       11.8793       1279.80       1291.68    
  60  0.190598      -1.65759      -55.0289       55.0289       1347.44       1402.47    
  61  0.932984     -0.693669E-01  -2.30285       2.30285       1281.30       1283.60    
  62  0.626920     -0.466936      -15.5014       15.5014       1375.13       1390.63    
  63  0.849515     -0.163090      -5.41428       5.41428       1389.10       1394.52    
  64  0.405877     -0.901705      -29.9349       29.9349       1407.76       1437.70    
  65  0.375531     -0.979415      -32.5148       32.5148       1407.45       1439.96    
  66  0.726552     -0.319445      -10.6050       10.6050       1300.22       1310.83    
  67  0.964302     -0.363506E-01  -1.20677       1.20677       1412.16       1413.37    
  68  0.371995     -0.988875      -32.8288       32.8288       1439.42       1472.25    
  69  0.553003     -0.592392      -19.6663       19.6663       1444.28       1463.94    
  70  0.562065     -0.576138      -19.1267       19.1267       1429.18       1448.31    
  71  0.961597     -0.391593E-01  -1.30002       1.30002       1437.32       1438.62    
  72  0.544063     -0.608691      -20.2074       20.2074       1453.26       1473.46    
  73  0.811560     -0.208797      -6.93168       6.93168       1445.71       1452.64    
  74  0.366600      -1.00348      -33.3139       33.3139       1048.68       1081.99    
loop,thermsimp(1:2)       29   18.5652       46.8915    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381        953.77        129.68          0.66         30.03          1.16          0.05        161.59
Just calling func    0   0        161.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    382       2259.52        128.74          0.66         30.52          1.24          0.05        161.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    953.77        2.744     -1.336      4.276     -100.0      1.008    
                      -1.276      3.142     -100.0      2.870      1.375    
                      0.1123     0.5460      2.009      0.000     0.5984    
                      -1.120     -20.00      0.000      0.000      1.417    

                      -1.413      5390.      9588.     -603.7     -1451.    
                      -3.528     -6.448     -5.141     -15.33     -5.168    
                      -12.89     -3.144     -1419.      0.000     -1048.    

                      -2379.      4722.      2383.      2572.      3468.    
                      -5773.    -0.2139    -0.4802      0.000    -0.2131    
                     -0.3383    -0.4748    -0.2764    -0.2936    -0.2813    

                     -0.6695     -1.739      1.382    -0.1388    -0.9782E-01
                      0.8541E-01-0.1629    -0.1254    -0.1398    -0.5229E-01
                     -0.3690    -0.1348    -0.4650     -2.141      1.382    

                      -1.789     -1.597     0.1500E+05 0.1500E+05  0.000    
                       0.000      9.078      8.874      0.000    -0.1075E-03
                      0.1602E-01 0.4381      9.202      8.936    -0.2355E+05

                      0.1065E-03 0.4625     0.3184      9.709      9.182    
                     -0.1039E+05-0.2018E-03 -1.294     0.2980      9.442    
                       9.345     -4052.     0.1137E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    953.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       29
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       30
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      381     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -50.4937       50.4937       927.369       977.863    
   2  0.142120      -1.95108      -64.7723       64.7723       919.160       983.932    
   3  0.240947      -1.42318      -47.2468       47.2468       931.134       978.381    
   4  0.622235     -0.474438      -15.7505       15.7505       928.402       944.153    
   5  0.167679      -1.78570      -59.2820       59.2820       978.997       1038.28    
   6  0.712985E-01  -2.64088      -87.6724       87.6724       992.393       1080.07    
   7  0.861645E-02  -4.75408      -157.827       157.827       987.655       1145.48    
   8  0.820106     -0.198321      -6.58391       6.58391       997.061       1003.65    
   9  0.882469     -0.125032      -4.15082       4.15082       1013.96       1018.11    
  10  0.530124     -0.634644      -21.0690       21.0690       984.147       1005.22    
  11  0.920027E-01  -2.38594      -79.2087       79.2087       974.423       1053.63    
  12  0.669458     -0.401287      -13.3220       13.3220       1022.04       1035.36    
  13  0.348419      -1.05435      -35.0024       35.0024       1005.15       1040.15    
  14  0.979616     -0.205944E-01 -0.683697      0.683697       1033.01       1033.70    
  15  0.661083     -0.413875      -13.7399       13.7399       1031.58       1045.32    
  16  0.535120     -0.625265      -20.7576       20.7576       991.603       1012.36    
  17  0.929679E-01  -2.37550      -78.8623       78.8623       1039.39       1118.25    
  18  0.580221     -0.544346      -18.0713       18.0713       1044.86       1062.93    
  19  0.652449     -0.427023      -14.1764       14.1764       1013.25       1027.42    
  20  0.252328      -1.37703      -45.7148       45.7148       1042.84       1088.55    
  21  0.364859      -1.00824      -33.4719       33.4719       1065.84       1099.31    
  22  0.205873      -1.58049      -52.4695       52.4695       994.676       1047.15    
  23  0.404183E-01  -3.20847      -106.515       106.515       1032.83       1139.34    
  24  0.922242     -0.809474E-01  -2.68730       2.68730       1048.68       1051.36    
  25  0.164359      -1.80570      -59.9459       59.9459       1051.56       1111.51    
  26  0.606051     -0.500791      -16.6253       16.6253       1082.37       1099.00    
  27  0.461849E-01  -3.07510      -102.088       102.088       1076.81       1178.89    
  28  0.761223     -0.272829      -9.05743       9.05743       1057.86       1066.92    
  29  0.170682      -1.76796      -58.6929       58.6929       1030.06       1088.76    
  30  0.501713     -0.689726      -22.8976       22.8976       1101.44       1124.34    
  31  0.892390E-01  -2.41644      -80.2213       80.2213       1061.57       1141.79    
  32  0.281632E-01  -3.56974      -118.509       118.509       1119.26       1237.77    
  33  0.664381     -0.408899      -13.5747       13.5747       1115.73       1129.30    
  34  0.124936      -2.07995      -69.0507       69.0507       1069.88       1138.93    
  35  0.623262     -0.472788      -15.6957       15.6957       1157.00       1172.69    
  36  0.876206     -0.132154      -4.38727       4.38727       1068.11       1072.50    
  37  0.744183     -0.295469      -9.80902       9.80902       1145.34       1155.15    
  38  0.251914      -1.37867      -45.7692       45.7692       1172.60       1218.37    
  39  0.391818     -0.936959      -31.1053       31.1053       1136.23       1167.33    
  40  0.131094      -2.03184      -67.4534       67.4534       1186.97       1254.43    
  41  0.887574     -0.119263      -3.95931       3.95931       1193.97       1197.93    
  42  0.682509     -0.381980      -12.6810       12.6810       1147.76       1160.44    
  43  0.184805      -1.68846      -56.0536       56.0536       1211.72       1267.78    
  44  0.258729      -1.35197      -44.8831       44.8831       1189.08       1233.96    
  45  0.275506      -1.28915      -42.7973       42.7973       1207.13       1249.93    
  46  0.718710     -0.330297      -10.9653       10.9653       1228.83       1239.79    
  47  0.445066     -0.809533      -26.8750       26.8750       1241.02       1267.90    
  48  0.772965     -0.257522      -8.54926       8.54926       1240.71       1249.26    
  49  0.992595     -0.743255E-02 -0.246747      0.246747       1217.14       1217.39    
  50  0.847655E-01  -2.46787      -81.9286       81.9286       1196.76       1278.69    
  51  0.805100E-01  -2.51937      -83.6386       83.6386       1238.38       1322.02    
  52  0.218783      -1.51968      -50.4505       50.4505       1281.30       1331.75    
  53  0.177967      -1.72616      -57.3052       57.3052       1244.63       1301.94    
  54  0.435468E-02  -5.43650      -180.482       180.482       1285.00       1465.48    
  55  0.189855      -1.66150      -55.1586       55.1586       1279.80       1334.96    
  56  0.483774     -0.726137      -24.1064       24.1064       1250.82       1274.93    
  57  0.407968     -0.896566      -29.7643       29.7643       1226.27       1256.04    
  58  0.895063     -0.110861      -3.68039       3.68039       1303.01       1306.69    
  59  0.160465      -1.82968      -60.7419       60.7419       1300.22       1360.97    
  60  0.557179     -0.584868      -19.4165       19.4165       1223.82       1243.24    
  61  0.992824     -0.720237E-02 -0.239105      0.239105       1286.40       1286.64    
  62  0.757533     -0.277689      -9.21875       9.21875       1375.13       1384.35    
  63  0.707064     -0.346634      -11.5076       11.5076       1389.10       1400.61    
  64  0.940151     -0.617150E-01  -2.04883       2.04883       1347.44       1349.49    
  65  0.777188     -0.252074      -8.36838       8.36838       1412.16       1420.53    
  66  0.427529     -0.849732      -28.2096       28.2096       1331.35       1359.56    
  67  0.178910      -1.72087      -57.1298       57.1298       1407.76       1464.89    
  68  0.630789     -0.460784      -15.2972       15.2972       1437.32       1452.62    
  69  0.612488E-01  -2.79281      -92.7162       92.7162       1407.45       1500.16    
  70  0.708553     -0.344530      -11.4378       11.4378       1429.18       1440.62    
  71  0.829919     -0.186427      -6.18904       6.18904       1445.71       1451.90    
  72  0.829598E-03  -7.09457      -235.527       235.527       1444.28       1679.80    
  73  0.913113     -0.908956E-01  -3.01757       3.01757       1439.42       1442.44    
  74  0.104590E-01  -4.56029      -151.393       151.393       953.767       1105.16    
loop,thermsimp(1:2)       30   50.4937       64.7723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383       1378.12        129.77          0.67         29.84          2.07          0.04        162.39
Just calling func    0   0        162.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1378.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       30
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       31
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      382     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -56.9607       56.9607       928.402       985.363    
   2  0.422562     -0.861418      -28.5975       28.5975       927.369       955.967    
   3  0.186245      -1.68069      -55.7959       55.7959       931.134       986.930    
   4  0.567236     -0.566979      -18.8227       18.8227       919.160       937.982    
   5  0.464464E-01  -3.06946      -101.900       101.900       997.061       1098.96    
   6  0.349374      -1.05161      -34.9116       34.9116       984.147       1019.06    
   7  0.336208      -1.09002      -36.1868       36.1868       991.603       1027.79    
   8  0.631615     -0.459475      -15.2537       15.2537       1013.96       1029.21    
   9  0.225630E-01  -3.79144      -125.869       125.869       1013.25       1139.11    
  10  0.221391      -1.50782      -50.0570       50.0570       1033.01       1083.07    
  11  0.635199     -0.453817      -15.0659       15.0659       1022.04       1037.11    
  12  0.957727     -0.431923E-01  -1.43390       1.43390       978.997       980.430    
  13  0.284413      -1.25733      -41.7410       41.7410       1005.15       1046.89    
  14  0.814352     -0.205363      -6.81766       6.81766       1031.58       1038.40    
  15  0.699052     -0.358030      -11.8859       11.8859       994.676       1006.56    
  16  0.145269      -1.92917      -64.0449       64.0449       1048.68       1112.72    
  17  0.397569     -0.922386      -30.6215       30.6215       974.423       1005.04    
  18  0.610583     -0.493342      -16.3780       16.3780       1044.86       1061.23    
  19  0.737372     -0.304663      -10.1142       10.1142       1057.86       1067.98    
  20  0.230083      -1.46931      -48.7785       48.7785       1068.11       1116.89    
  21  0.721698     -0.326149      -10.8275       10.8275       992.393       1003.22    
  22  0.469765     -0.755524      -25.0820       25.0820       1042.84       1067.92    
  23  0.148742      -1.90554      -63.2606       63.2606       1030.06       1093.32    
  24  0.631872     -0.459069      -15.2402       15.2402       1082.37       1097.61    
  25  0.456921     -0.783245      -26.0023       26.0023       1065.84       1091.84    
  26  0.631874E-01  -2.76165      -91.6817       91.6817       953.767       1045.45    
  27  0.470948     -0.753008      -24.9985       24.9985       1051.56       1076.56    
  28  0.313695      -1.15933      -38.4878       38.4878       1039.39       1077.88    
  29  0.856516     -0.154883      -5.14182       5.14182       1101.44       1106.59    
  30  0.487159     -0.719166      -23.8750       23.8750       1115.73       1139.60    
  31  0.383726     -0.957827      -31.7981       31.7981       1069.88       1101.68    
  32  0.242248      -1.41779      -47.0682       47.0682       1032.83       1079.90    
  33  0.760305     -0.274035      -9.09746       9.09746       1061.57       1070.67    
  34  0.524314     -0.645664      -21.4349       21.4349       987.655       1009.09    
  35  0.759572     -0.275001      -9.12952       9.12952       1145.34       1154.47    
  36  0.784019     -0.243322      -8.07785       8.07785       1147.76       1155.84    
  37  0.430930     -0.841810      -27.9465       27.9465       1136.23       1164.17    
  38  0.670659     -0.399494      -13.2625       13.2625       1157.00       1170.26    
  39  0.458005     -0.780876      -25.9237       25.9237       1076.81       1102.73    
  40  0.413739     -0.882521      -29.2981       29.2981       1193.97       1223.27    
  41  0.388661     -0.945048      -31.3739       31.3739       1217.14       1248.52    
  42  0.753750     -0.282694      -9.38492       9.38492       1172.60       1181.99    
  43  0.505767     -0.681679      -22.6305       22.6305       1189.08       1211.71    
  44  0.759664     -0.274878      -9.12546       9.12546       1119.26       1128.39    
  45  0.468968     -0.757221      -25.1383       25.1383       1228.83       1253.96    
  46  0.740796     -0.300031      -9.96046       9.96046       1223.82       1233.78    
  47  0.737223     -0.304865      -10.1210       10.1210       1240.71       1250.83    
  48  0.584325     -0.537298      -17.8373       17.8373       1207.13       1224.97    
  49  0.850800     -0.161578      -5.36410       5.36410       1186.97       1192.34    
  50  0.181706      -1.70536      -56.6149       56.6149       1226.27       1282.89    
  51  0.801855E-01  -2.52341      -83.7727       83.7727       1211.72       1295.50    
  52  0.989218     -0.108406E-01 -0.359889      0.359889       1241.02       1241.38    
  53  0.214049      -1.54155      -51.1766       51.1766       1250.82       1302.00    
  54  0.522539     -0.649055      -21.5474       21.5474       1196.76       1218.30    
  55  0.964020     -0.366433E-01  -1.21649       1.21649       1286.40       1287.62    
  56  0.559622     -0.580494      -19.2713       19.2713       1244.63       1263.90    
  57  0.944229     -0.573866E-01  -1.90513       1.90513       1303.01       1304.91    
  58  0.212625      -1.54823      -51.3983       51.3983       1238.38       1289.78    
  59  0.735854     -0.306724      -10.1827       10.1827       1281.30       1291.48    
  60  0.693280E-01  -2.66891      -88.6028       88.6028       1279.80       1368.40    
  61  0.208371      -1.56843      -52.0691       52.0691       1347.44       1399.51    
  62  0.396847     -0.924205      -30.6819       30.6819       1331.35       1362.03    
  63  0.835639     -0.179558      -5.96100       5.96100       1300.22       1306.19    
  64  0.527941     -0.638770      -21.2060       21.2060       1375.13       1396.33    
  65  0.631616     -0.459473      -15.2537       15.2537       1389.10       1404.36    
  66  0.619534     -0.478788      -15.8949       15.8949       1412.16       1428.06    
  67  0.712866     -0.338461      -11.2363       11.2363       1429.18       1440.42    
  68  0.588242     -0.530616      -17.6155       17.6155       1439.42       1457.04    
  69  0.265742      -1.32523      -43.9952       43.9952       1445.71       1489.71    
  70  0.191257      -1.65414      -54.9143       54.9143       1437.32       1492.24    
  71  0.904007     -0.100919      -3.35031       3.35031       1407.76       1411.11    
  72  0.981469     -0.187047E-01 -0.620963      0.620963       1285.00       1285.62    
  73  0.848413     -0.164388      -5.45737       5.45737       1407.45       1412.90    
  74  0.800247E-01  -2.52542      -83.8393       83.8393       1378.12       1461.96    
loop,thermsimp(1:2)       31   56.9607       28.5975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    384       1638.61        128.32          0.66         29.91          3.02          0.05        161.96
Just calling func    0   0        161.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    385       1210.27        129.25          0.66         29.72          2.47          0.04        162.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1210.27
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       31
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       32
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      384     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -94.8147       94.8147       919.160       1013.97    
   2  0.695439     -0.363212      -12.0580       12.0580       927.369       939.427    
   3  0.338668      -1.08273      -35.9448       35.9448       978.997       1014.94    
   4  0.494821     -0.703559      -23.3569       23.3569       928.402       951.759    
   5  0.433638E-02  -5.44072      -180.622       180.622       931.134       1111.76    
   6  0.270974      -1.30573      -43.3479       43.3479       992.393       1035.74    
   7  0.926362E-01  -2.37907      -78.9809       78.9809       974.423       1053.40    
   8  0.437858     -0.825861      -27.4171       27.4171       994.676       1022.09    
   9  0.297746      -1.21151      -40.2200       40.2200       987.655       1027.87    
  10  0.948309     -0.530750E-01  -1.76199       1.76199       984.147       985.909    
  11  0.845139     -0.168254      -5.58573       5.58573       991.603       997.188    
  12  0.930128     -0.724325E-01  -2.40463       2.40463       1013.96       1016.37    
  13  0.921850     -0.813732E-01  -2.70144       2.70144       1022.04       1024.74    
  14  0.447950     -0.803074      -26.6606       26.6606       1031.58       1058.24    
  15  0.712740     -0.338638      -11.2422       11.2422       953.767       965.009    
  16  0.574809     -0.553717      -18.3824       18.3824       1005.15       1023.53    
  17  0.136104      -1.99433      -66.2082       66.2082       1044.86       1111.06    
  18  0.340340      -1.07781      -35.7813       35.7813       1042.84       1078.62    
  19  0.149160      -1.90274      -63.1674       63.1674       1057.86       1121.03    
  20  0.433234E-01  -3.13906      -104.211       104.211       1061.57       1165.78    
  21  0.909134     -0.952630E-01  -3.16256       3.16256       1051.56       1054.73    
  22  0.619739     -0.478456      -15.8839       15.8839       1039.39       1055.27    
  23  0.726693     -0.319251      -10.5985       10.5985       1032.83       1043.43    
  24  0.962860     -0.378471E-01  -1.25645       1.25645       1033.01       1034.27    
  25  0.615108     -0.485958      -16.1329       16.1329       1065.84       1081.97    
  26  0.500401     -0.692346      -22.9846       22.9846       1030.06       1053.05    
  27  0.402080     -0.911104      -30.2470       30.2470       1082.37       1112.62    
  28  0.749737     -0.288033      -9.56216       9.56216       997.061       1006.62    
  29  0.926553     -0.762839E-01  -2.53249       2.53249       1069.88       1072.41    
  30  0.519037     -0.655779      -21.7707       21.7707       1076.81       1098.58    
  31  0.498178E-01  -2.99938      -99.5740       99.5740       1101.44       1201.02    
  32  0.473692     -0.747197      -24.8056       24.8056       1048.68       1073.48    
  33  0.574927E-02  -5.15868      -171.259       171.259       1068.11       1239.37    
  34  0.349575      -1.05104      -34.8925       34.8925       1119.26       1154.16    
  35  0.661333     -0.413498      -13.7274       13.7274       1013.25       1026.97    
  36  0.314247E-01  -3.46016      -114.871       114.871       1115.73       1230.60    
  37  0.318841      -1.14306      -37.9476       37.9476       1145.34       1183.28    
  38  0.111349E-01  -4.49767      -149.315       149.315       1147.76       1297.08    
  39  0.845234E-02  -4.77331      -158.465       158.465       1136.23       1294.69    
  40  0.704975E-01  -2.65218      -88.0474       88.0474       1157.00       1245.05    
  41  0.126423      -2.06812      -68.6579       68.6579       1172.60       1241.26    
  42  0.120140      -2.11910      -70.3502       70.3502       1186.97       1257.32    
  43  0.664865     -0.408172      -13.5506       13.5506       1189.08       1202.63    
  44  0.829336     -0.187130      -6.21236       6.21236       1196.76       1202.97    
  45  0.656735     -0.420475      -13.9590       13.9590       1193.97       1207.93    
  46  0.955374     -0.456526E-01  -1.51558       1.51558       1207.13       1208.65    
  47  0.220157      -1.51341      -50.2425       50.2425       1223.82       1274.07    
  48  0.151230      -1.88895      -62.7097       62.7097       1241.02       1303.73    
  49  0.127393      -2.06048      -68.4041       68.4041       1217.14       1285.55    
  50  0.206727      -1.57636      -52.3321       52.3321       1240.71       1293.04    
  51  0.637521     -0.450168      -14.9447       14.9447       1228.83       1243.77    
  52  0.432940     -0.837156      -27.7920       27.7920       1244.63       1272.42    
  53  0.429465     -0.845215      -28.0596       28.0596       1226.27       1254.33    
  54  0.989331E-01  -2.31331      -76.7977       76.7977       1285.00       1361.80    
  55  0.158609      -1.84131      -61.1282       61.1282       1286.40       1347.53    
  56  0.811960     -0.208304      -6.91532       6.91532       1238.38       1245.30    
  57  0.112024      -2.18904      -72.6720       72.6720       1281.30       1353.97    
  58  0.922858     -0.802799E-01  -2.66515       2.66515       1211.72       1214.39    
  59  0.738003     -0.303807      -10.0858       10.0858       1250.82       1260.91    
  60  0.896667     -0.109070      -3.62094       3.62094       1303.01       1306.63    
  61  0.736055     -0.306450      -10.1736       10.1736       1300.22       1310.40    
  62  0.607864     -0.497804      -16.5262       16.5262       1331.35       1347.87    
  63  0.974093     -0.262480E-01 -0.871386      0.871386       1279.80       1280.67    
  64  0.624292     -0.471137      -15.6409       15.6409       1375.13       1390.77    
  65  0.190711      -1.65700      -55.0092       55.0092       1347.44       1402.45    
  66  0.655755     -0.421967      -14.0085       14.0085       1389.10       1403.11    
  67  0.678530     -0.387827      -12.8751       12.8751       1407.76       1420.64    
  68  0.725997     -0.320210      -10.6304       10.6304       1407.45       1418.08    
  69  0.797831     -0.225858      -7.49808       7.49808       1412.16       1419.66    
  70  0.354092      -1.03820      -34.4663       34.4663       1429.18       1463.65    
  71  0.687487     -0.374712      -12.4397       12.4397       1439.42       1451.86    
  72  0.670718     -0.399406      -13.2595       13.2595       1378.12       1391.38    
  73  0.466189     -0.763164      -25.3356       25.3356       1445.71       1471.05    
  74  0.931268     -0.712079E-01  -2.36397       2.36397       1210.27       1212.64    
loop,thermsimp(1:2)       32   94.8147       12.0580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386       5597.68        128.56          0.68         30.39          0.79          0.05        160.47
Just calling func    0   0        160.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    387       1245.40        129.09          0.66         29.93          1.75          0.05        161.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1245.40
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       32
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       33
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      386     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739      -7.12894       7.12894       927.369       934.498    
   2  0.549594     -0.598576      -19.8716       19.8716       928.402       948.274    
   3  0.631143     -0.460223      -15.2786       15.2786       953.767       969.046    
   4  0.268455      -1.31507      -43.6580       43.6580       984.147       1027.80    
   5  0.513519     -0.666468      -22.1255       22.1255       991.603       1013.73    
   6  0.886725     -0.120220      -3.99108       3.99108       997.061       1001.05    
   7  0.568618     -0.564546      -18.7419       18.7419       919.160       937.902    
   8  0.443178     -0.813783      -27.0161       27.0161       978.997       1006.01    
   9  0.898491     -0.107039      -3.55349       3.55349       1013.96       1017.51    
  10  0.235118      -1.44767      -48.0599       48.0599       994.676       1042.74    
  11  0.509444     -0.674434      -22.3900       22.3900       1005.15       1027.54    
  12  0.223921      -1.49646      -49.6797       49.6797       1022.04       1071.72    
  13  0.188995      -1.66603      -55.3092       55.3092       1013.25       1068.56    
  14  0.969568     -0.309049E-01  -1.02598       1.02598       987.655       988.681    
  15  0.287265      -1.24735      -41.4097       41.4097       1033.01       1074.42    
  16  0.559573E-01  -2.88317      -95.7158       95.7158       992.393       1088.11    
  17  0.668393     -0.402878      -13.3748       13.3748       1032.83       1046.20    
  18  0.488393     -0.716635      -23.7910       23.7910       1030.06       1053.86    
  19  0.605591     -0.501551      -16.6506       16.6506       974.423       991.073    
  20  0.490783     -0.711753      -23.6289       23.6289       1051.56       1075.19    
  21  0.313180      -1.16098      -38.5423       38.5423       1039.39       1077.93    
  22  0.200234      -1.60827      -53.3915       53.3915       1031.58       1084.97    
  23  0.575811     -0.551975      -18.3246       18.3246       1069.88       1088.21    
  24  0.856965     -0.154358      -5.12439       5.12439       1048.68       1053.80    
  25  0.310774      -1.16869      -38.7983       38.7983       1042.84       1081.63    
  26  0.836513     -0.178513      -5.92631       5.92631       1065.84       1071.76    
  27  0.286335      -1.25059      -41.5174       41.5174       1076.81       1118.32    
  28  0.240507      -1.42500      -47.3075       47.3075       1044.86       1092.16    
  29  0.103511E-01  -4.57066      -151.737       151.737       931.134       1082.87    
  30  0.516897     -0.659912      -21.9079       21.9079       1082.37       1104.28    
  31  0.237615      -1.43710      -47.7092       47.7092       1057.86       1105.57    
  32  0.602330     -0.506950      -16.8298       16.8298       1119.26       1136.09    
  33  0.677792     -0.388915      -12.9113       12.9113       1061.57       1074.48    
  34  0.965031     -0.355954E-01  -1.18170       1.18170       1145.34       1146.52    
  35  0.851769     -0.160440      -5.32632       5.32632       1101.44       1106.77    
  36  0.998637     -0.136415E-02 -0.452872E-01  0.452872E-01   1189.08       1189.12    
  37  0.690071E-01  -2.67355      -88.7568       88.7568       1196.76       1285.51    
  38  0.865316E-02  -4.74983      -157.686       157.686       1193.97       1351.66    
  39  0.657551     -0.419234      -13.9178       13.9178       1207.13       1221.05    
  40  0.249918      -1.38662      -46.0333       46.0333       1210.27       1256.31    
  41  0.762839     -0.270708      -8.98701       8.98701       1211.72       1220.71    
  42  0.875176     -0.133331      -4.42634       4.42634       1115.73       1120.15    
  43  0.805569     -0.216207      -7.17767       7.17767       1068.11       1075.29    
  44  0.308797      -1.17507      -39.0102       39.0102       1172.60       1211.61    
  45  0.255763      -1.36350      -45.2658       45.2658       1228.83       1274.09    
  46  0.218508      -1.52093      -50.4922       50.4922       1157.00       1207.49    
  47  0.518593     -0.656637      -21.7991       21.7991       1238.38       1260.18    
  48  0.856838     -0.154506      -5.12932       5.12932       1226.27       1231.40    
  49  0.300810      -1.20128      -39.8802       39.8802       1186.97       1226.85    
  50  0.310312      -1.17018      -38.8478       38.8478       1250.82       1289.67    
  51  0.503825     -0.685526      -22.7582       22.7582       1244.63       1267.39    
  52  0.940514     -0.613291E-01  -2.03601       2.03601       1223.82       1225.86    
  53  0.778953     -0.249804      -8.29304       8.29304       1279.80       1288.09    
  54  0.586433     -0.533697      -17.7177       17.7177       1217.14       1234.86    
  55  0.866496     -0.143298      -4.75722       4.75722       1240.71       1245.47    
  56  0.371870E-01  -3.29180      -109.282       109.282       1136.23       1245.51    
  57  0.592656     -0.523141      -17.3673       17.3673       1147.76       1165.13    
  58  0.337285      -1.08683      -36.0806       36.0806       1241.02       1277.10    
  59  0.277582      -1.28164      -42.5480       42.5480       1303.01       1345.56    
  60  0.690983E-01  -2.67223      -88.7130       88.7130       1300.22       1388.94    
  61  0.688060     -0.373879      -12.4121       12.4121       1286.40       1298.81    
  62  0.279054      -1.27635      -42.3725       42.3725       1331.35       1373.72    
  63  0.927849     -0.748862E-01  -2.48608       2.48608       1281.30       1283.79    
  64  0.360885      -1.01920      -33.8354       33.8354       1285.00       1318.84    
  65  0.301914      -1.19761      -39.7586       39.7586       1375.13       1414.89    
  66  0.732817     -0.310859      -10.3200       10.3200       1378.12       1388.44    
  67  0.366767      -1.00303      -33.2987       33.2987       1347.44       1380.74    
  68  0.255505      -1.36451      -45.2993       45.2993       1389.10       1434.40    
  69  0.117155      -2.14426      -71.1855       71.1855       1407.45       1478.63    
  70  0.716329     -0.333616      -11.0754       11.0754       1412.16       1423.24    
  71  0.209869      -1.56127      -51.8314       51.8314       1407.76       1459.60    
  72  0.716721     -0.333069      -11.0573       11.0573       1439.42       1450.48    
  73  0.637555     -0.450114      -14.9430       14.9430       1429.18       1444.13    
  74  0.930680E-01  -2.37443      -78.8266       78.8266       1245.40       1324.23    
loop,thermsimp(1:2)       33   7.12894       19.8716    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388       1087.31        128.83          0.69         30.23          2.21          0.04        162.00
Just calling func    0   0        162.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1087.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       33
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       34
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      387     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -32.4828       32.4828       927.369       959.852    
   2  0.356800      -1.03058      -34.2134       34.2134       919.160       953.373    
   3  0.686180     -0.376616      -12.5030       12.5030       928.402       940.905    
   4  0.443986     -0.811963      -26.9557       26.9557       953.767       980.723    
   5  0.837544     -0.177281      -5.88541       5.88541       987.655       993.540    
   6  0.902394     -0.102704      -3.40958       3.40958       974.423       977.832    
   7  0.509658E-01  -2.97660      -98.8177       98.8177       997.061       1095.88    
   8  0.662569     -0.411631      -13.6654       13.6654       978.997       992.662    
   9  0.226311      -1.48585      -49.3274       49.3274       991.603       1040.93    
  10  0.336196      -1.09006      -36.1880       36.1880       1013.96       1050.15    
  11  0.122038      -2.10342      -69.8297       69.8297       1005.15       1074.98    
  12  0.323275      -1.12925      -37.4891       37.4891       984.147       1021.64    
  13  0.326513      -1.11929      -37.1582       37.1582       994.676       1031.83    
  14  0.904434     -0.100446      -3.33461       3.33461       1032.83       1036.16    
  15  0.856476     -0.154928      -5.14334       5.14334       1048.68       1053.82    
  16  0.873700     -0.135019      -4.48237       4.48237       1030.06       1034.55    
  17  0.989627     -0.104267E-01 -0.346148      0.346148       1013.25       1013.59    
  18  0.546745     -0.603772      -20.0441       20.0441       1022.04       1042.08    
  19  0.731718     -0.312360      -10.3698       10.3698       1065.84       1076.21    
  20  0.859154     -0.151807      -5.03971       5.03971       1033.01       1038.05    
  21  0.419381     -0.868976      -28.8484       28.8484       1061.57       1090.42    
  22  0.587067     -0.532617      -17.6819       17.6819       1051.56       1069.25    
  23  0.460289E-01  -3.07849      -102.200       102.200       1068.11       1170.31    
  24  0.522902     -0.648362      -21.5244       21.5244       1039.39       1060.91    
  25  0.398671     -0.919618      -30.5296       30.5296       1042.84       1073.37    
  26  0.881302     -0.126355      -4.19474       4.19474       931.134       935.329    
  27  0.226039      -1.48705      -49.3672       49.3672       1031.58       1080.95    
  28  0.124144      -2.08631      -69.2617       69.2617       992.393       1061.66    
  29  0.542680     -0.611235      -20.2919       20.2919       1069.88       1090.17    
  30  0.167496      -1.78679      -59.3182       59.3182       1044.86       1104.18    
  31  0.619825     -0.478318      -15.8793       15.8793       1082.37       1098.25    
  32  0.169564      -1.77452      -58.9110       58.9110       1057.86       1116.78    
  33  0.781291     -0.246807      -8.19354       8.19354       1101.44       1109.64    
  34  0.486264     -0.721004      -23.9360       23.9360       1076.81       1100.74    
  35  0.895366     -0.110522      -3.66913       3.66913       1115.73       1119.40    
  36  0.321503      -1.13475      -37.6716       37.6716       1119.26       1156.93    
  37  0.607862E-01  -2.80039      -92.9679       92.9679       1145.34       1238.31    
  38  0.365124      -1.00752      -33.4477       33.4477       1147.76       1181.21    
  39  0.110107      -2.20630      -73.2452       73.2452       1189.08       1262.32    
  40  0.905082     -0.997294E-01  -3.31083       3.31083       1157.00       1160.31    
  41  0.960140     -0.406759E-01  -1.35037       1.35037       1172.60       1173.95    
  42  0.320200      -1.13881      -37.8063       37.8063       1211.72       1249.53    
  43  0.396920     -0.924021      -30.6758       30.6758       1207.13       1237.81    
  44  0.674668     -0.393534      -13.0646       13.0646       1223.82       1236.89    
  45  0.894300     -0.111715      -3.70872       3.70872       1186.97       1190.68    
  46  0.875669     -0.132767      -4.40763       4.40763       1226.27       1230.68    
  47  0.881286     -0.126374      -4.19537       4.19537       1217.14       1221.34    
  48  0.779885     -0.248609      -8.25336       8.25336       1240.71       1248.96    
  49  0.691264     -0.369233      -12.2579       12.2579       1136.23       1148.48    
  50  0.406618     -0.899882      -29.8744       29.8744       1210.27       1240.15    
  51  0.225318      -1.49024      -49.4732       49.4732       1238.38       1287.86    
  52  0.172220      -1.75898      -58.3950       58.3950       1244.63       1303.03    
  53  0.479523     -0.734964      -24.3995       24.3995       1228.83       1253.23    
  54  0.313312      -1.16056      -38.5283       38.5283       1241.02       1279.55    
  55  0.389868     -0.941947      -31.2709       31.2709       1281.30       1312.57    
  56  0.510295     -0.672766      -22.3346       22.3346       1196.76       1219.09    
  57  0.782049     -0.245838      -8.16136       8.16136       1279.80       1287.96    
  58  0.193896      -1.64043      -54.4593       54.4593       1250.82       1305.28    
  59  0.560612     -0.578727      -19.2127       19.2127       1286.40       1305.62    
  60  0.127407      -2.06037      -68.4005       68.4005       1285.00       1353.40    
  61  0.898287     -0.107266      -3.56102       3.56102       1245.40       1248.96    
  62  0.680859     -0.384400      -12.7614       12.7614       1303.01       1315.77    
  63  0.535951     -0.623712      -20.7061       20.7061       1193.97       1214.68    
  64  0.109035      -2.21609      -73.5700       73.5700       1331.35       1404.92    
  65  0.696476     -0.361721      -12.0085       12.0085       1347.44       1359.45    
  66  0.336539      -1.08904      -36.1542       36.1542       1378.12       1414.27    
  67  0.115832      -2.15562      -71.5625       71.5625       1300.22       1371.79    
  68  0.179134      -1.71962      -57.0883       57.0883       1375.13       1432.22    
  69  0.435434     -0.831411      -27.6013       27.6013       1412.16       1439.77    
  70  0.330463      -1.10726      -36.7591       36.7591       1389.10       1425.86    
  71  0.209525      -1.56291      -51.8858       51.8858       1429.18       1481.07    
  72  0.354998      -1.03564      -34.3814       34.3814       1439.42       1473.80    
  73  0.985658     -0.144461E-01 -0.479584      0.479584       1407.76       1408.24    
  74  0.331643      -1.10370      -36.6407       36.6407       1087.31       1123.95    
loop,thermsimp(1:2)       34   32.4828       34.2134    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389       1553.73        129.72          0.64         29.56          1.54          0.05        161.51
Just calling func    0   0        161.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    390       1245.01        129.70          0.63         29.63          1.45          0.05        161.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1245.01
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       34
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       35
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      389     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -24.4765       24.4765       931.134       955.611    
   2  0.380700     -0.965745      -32.0610       32.0610       928.402       960.463    
   3  0.821138     -0.197064      -6.54216       6.54216       919.160       925.702    
   4  0.728654     -0.316557      -10.5091       10.5091       927.369       937.878    
   5  0.670900     -0.399135      -13.2506       13.2506       974.423       987.673    
   6  0.175262      -1.74147      -57.8137       57.8137       953.767       1011.58    
   7  0.709150     -0.343688      -11.4098       11.4098       978.997       990.406    
   8  0.247481      -1.39642      -46.3586       46.3586       987.655       1034.01    
   9  0.231597      -1.46276      -48.5609       48.5609       1013.25       1061.81    
  10  0.764757     -0.268198      -8.90367       8.90367       984.147       993.050    
  11  0.798540     -0.224970      -7.46858       7.46858       994.676       1002.14    
  12  0.903782     -0.101167      -3.35857       3.35857       1030.06       1033.42    
  13  0.136634      -1.99045      -66.0793       66.0793       1032.83       1098.91    
  14  0.141955      -1.95225      -64.8110       64.8110       1033.01       1097.82    
  15  0.658650     -0.417563      -13.8623       13.8623       991.603       1005.46    
  16  0.265370      -1.32663      -44.0417       44.0417       1022.04       1066.08    
  17  0.439277E-01  -3.12521      -103.751       103.751       1013.96       1117.71    
  18  0.451732     -0.794667      -26.3815       26.3815       1048.68       1075.06    
  19  0.475868     -0.742615      -24.6535       24.6535       1039.39       1064.04    
  20  0.336185      -1.09009      -36.1891       36.1891       992.393       1028.58    
  21  0.519277     -0.655317      -21.7553       21.7553       1051.56       1073.32    
  22  0.455030     -0.787393      -26.1400       26.1400       1042.84       1068.98    
  23  0.272148E-01  -3.60399      -119.646       119.646       1005.15       1124.79    
  24  0.125510      -2.07537      -68.8985       68.8985       1065.84       1134.74    
  25  0.687868     -0.374159      -12.4214       12.4214       1031.58       1044.00    
  26  0.271894      -1.30234      -43.2354       43.2354       1069.88       1113.12    
  27  0.641335     -0.444204      -14.7468       14.7468       1061.57       1076.32    
  28  0.858838E-01  -2.45476      -81.4935       81.4935       997.061       1078.55    
  29  0.579605     -0.545408      -18.1066       18.1066       1082.37       1100.48    
  30  0.249942      -1.38653      -46.0302       46.0302       1076.81       1122.84    
  31  0.938016     -0.639885E-01  -2.12430       2.12430       1044.86       1046.98    
  32  0.453695     -0.790330      -26.2375       26.2375       1101.44       1127.68    
  33  0.319751      -1.14021      -37.8530       37.8530       1057.86       1095.72    
  34  0.346149      -1.06089      -35.2195       35.2195       1115.73       1150.95    
  35  0.870951     -0.138169      -4.58697       4.58697       1087.31       1091.90    
  36  0.187313      -1.67497      -55.6060       55.6060       1136.23       1191.83    
  37  0.984950     -0.151645E-01 -0.503435      0.503435       1119.26       1119.77    
  38  0.524062     -0.646145      -21.4508       21.4508       1157.00       1178.45    
  39  0.432392     -0.838423      -27.8341       27.8341       1068.11       1095.94    
  40  0.687254     -0.375052      -12.4510       12.4510       1172.60       1185.06    
  41  0.869131     -0.140262      -4.65643       4.65643       1147.76       1152.42    
  42  0.350749      -1.04769      -34.7812       34.7812       1186.97       1221.75    
  43  0.663152E-01  -2.71334      -90.0778       90.0778       1193.97       1284.05    
  44  0.306857      -1.18137      -39.2194       39.2194       1196.76       1235.98    
  45  0.925728     -0.771751E-01  -2.56207       2.56207       1217.14       1219.70    
  46  0.649899     -0.430939      -14.3064       14.3064       1226.27       1240.58    
  47  0.492368     -0.708529      -23.5219       23.5219       1223.82       1247.34    
  48  0.104223      -2.26122      -75.0684       75.0684       1207.13       1282.20    
  49  0.345103      -1.06391      -35.3199       35.3199       1145.34       1180.66    
  50  0.425380     -0.854773      -28.3769       28.3769       1210.27       1238.65    
  51  0.922590     -0.805699E-01  -2.67477       2.67477       1245.40       1248.08    
  52  0.209663      -1.56226      -51.8640       51.8640       1240.71       1292.57    
  53  0.402772     -0.909384      -30.1899       30.1899       1211.72       1241.91    
  54  0.246006      -1.40240      -46.5571       46.5571       1228.83       1275.38    
  55  0.811871     -0.208414      -6.91895       6.91895       1189.08       1196.00    
  56  0.929927     -0.726495E-01  -2.41183       2.41183       1241.02       1243.43    
  57  0.407345     -0.898096      -29.8151       29.8151       1238.38       1268.20    
  58  0.870102     -0.139145      -4.61936       4.61936       1279.80       1284.42    
  59  0.987510     -0.125691E-01 -0.417269      0.417269       1244.63       1245.05    
  60  0.263762E-01  -3.63529      -120.685       120.685       1250.82       1371.51    
  61  0.303836      -1.19127      -39.5479       39.5479       1286.40       1325.95    
  62  0.494574     -0.704059      -23.3735       23.3735       1281.30       1304.67    
  63  0.940738     -0.610903E-01  -2.02809       2.02809       1303.01       1305.04    
  64  0.234997      -1.44818      -48.0770       48.0770       1285.00       1333.08    
  65  0.694757     -0.364193      -12.0905       12.0905       1347.44       1359.53    
  66  0.301995      -1.19734      -39.7496       39.7496       1300.22       1339.97    
  67  0.336046E-01  -3.39309      -112.644       112.644       1331.35       1443.99    
  68  0.380975     -0.965022      -32.0369       32.0369       1407.76       1439.80    
  69  0.147703      -1.91255      -63.4931       63.4931       1378.12       1441.61    
  70  0.688734     -0.372900      -12.3796       12.3796       1389.10       1401.48    
  71  0.588097     -0.530864      -17.6237       17.6237       1375.13       1392.75    
  72  0.988588     -0.114775E-01 -0.381033      0.381033       1412.16       1412.55    
  73  0.867288     -0.142384      -4.72689       4.72689       1439.42       1444.15    
  74  0.848212     -0.164625      -5.46524       5.46524       1245.01       1250.48    
loop,thermsimp(1:2)       35   24.4765       32.0610    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391       2129.24        129.23          0.67         30.16          1.53          0.05        161.64
Just calling func    0   0        161.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    392       1313.44        129.50          0.67         29.89          1.67          0.05        161.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1313.44
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       35
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       36
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      391     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01  -1.92357       1.92357       919.160       921.083    
   2  0.628336     -0.464680      -15.4265       15.4265       927.369       942.796    
   3  0.261321      -1.34200      -44.5521       44.5521       931.134       975.687    
   4  0.256100      -1.36219      -45.2221       45.2221       928.402       973.624    
   5  0.318070      -1.14548      -38.0280       38.0280       974.423       1012.45    
   6  0.895943     -0.109878      -3.64776       3.64776       978.997       982.644    
   7  0.856491     -0.154912      -5.14279       5.14279       984.147       989.289    
   8  0.269953      -1.30951      -43.4733       43.4733       994.676       1038.15    
   9  0.663616     -0.410051      -13.6129       13.6129       991.603       1005.22    
  10  0.249338E-01  -3.69153      -122.552       122.552       953.767       1076.32    
  11  0.362852      -1.01376      -33.6550       33.6550       992.393       1026.05    
  12  0.868529E-02  -4.74612      -157.563       157.563       1030.06       1187.63    
  13  0.705785     -0.348444      -11.5677       11.5677       987.655       999.222    
  14  0.527358     -0.639875      -21.2427       21.2427       1031.58       1052.82    
  15  0.831399     -0.184645      -6.12987       6.12987       1044.86       1050.99    
  16  0.594963     -0.519255      -17.2383       17.2383       1013.25       1030.48    
  17  0.501981     -0.689193      -22.8799       22.8799       1039.39       1062.27    
  18  0.594311     -0.520353      -17.2748       17.2748       1022.04       1039.31    
  19  0.618124     -0.481066      -15.9705       15.9705       1042.84       1058.81    
  20  0.959578E-01  -2.34385      -77.8114       77.8114       1051.56       1129.38    
  21  0.776845     -0.252514      -8.38301       8.38301       1048.68       1057.06    
  22  0.458742     -0.779266      -25.8702       25.8702       1061.57       1087.44    
  23  0.645084     -0.438374      -14.5532       14.5532       997.061       1011.61    
  24  0.545194     -0.606614      -20.1385       20.1385       1087.31       1107.45    
  25  0.618072     -0.481151      -15.9733       15.9733       1057.86       1073.84    
  26  0.390168     -0.941179      -31.2454       31.2454       1068.11       1099.36    
  27  0.122318      -2.10113      -69.7537       69.7537       1033.01       1102.77    
  28  0.823049     -0.194740      -6.46499       6.46499       1032.83       1039.29    
  29  0.817844E-01  -2.50367      -83.1172       83.1172       1082.37       1165.49    
  30  0.189400      -1.66389      -55.2381       55.2381       1069.88       1125.12    
  31  0.257378      -1.35721      -45.0569       45.0569       1013.96       1059.02    
  32  0.854384     -0.157375      -5.22456       5.22456       1119.26       1124.49    
  33  0.128350      -2.05300      -68.1557       68.1557       1076.81       1144.96    
  34  0.410790     -0.889673      -29.5355       29.5355       1005.15       1034.68    
  35  0.645584     -0.437599      -14.5275       14.5275       1101.44       1115.97    
  36  0.309517      -1.17274      -38.9329       38.9329       1065.84       1104.77    
  37  0.568550     -0.564667      -18.7459       18.7459       1115.73       1134.47    
  38  0.702184     -0.353560      -11.7376       11.7376       1147.76       1159.50    
  39  0.939991     -0.618850E-01  -2.05447       2.05447       1157.00       1159.05    
  40  0.944105     -0.575180E-01  -1.90949       1.90949       1145.34       1147.25    
  41  0.202943      -1.59483      -52.9455       52.9455       1172.60       1225.55    
  42  0.948631E-02  -4.65791      -154.634       154.634       1136.23       1290.86    
  43  0.568674     -0.564449      -18.7387       18.7387       1189.08       1207.82    
  44  0.216733      -1.52909      -50.7629       50.7629       1217.14       1267.91    
  45  0.385755     -0.952553      -31.6230       31.6230       1186.97       1218.59    
  46  0.894850E-01  -2.41368      -80.1299       80.1299       1196.76       1276.89    
  47  0.136648      -1.99035      -66.0759       66.0759       1210.27       1276.35    
  48  0.473765     -0.747044      -24.8005       24.8005       1226.27       1251.07    
  49  0.208114E-01  -3.87225      -128.552       128.552       1211.72       1340.28    
  50  0.158159      -1.84415      -61.2224       61.2224       1241.02       1302.24    
  51  0.112432      -2.18541      -72.5514       72.5514       1244.63       1317.18    
  52  0.135630      -1.99782      -66.3241       66.3241       1223.82       1290.15    
  53  0.976001E-01  -2.32688      -77.2480       77.2480       1245.40       1322.65    
  54  0.914947     -0.888887E-01  -2.95094       2.95094       1245.01       1247.96    
  55  0.832290     -0.183575      -6.09435       6.09435       1238.38       1244.48    
  56  0.592436     -0.523513      -17.3797       17.3797       1228.83       1246.21    
  57  0.938858     -0.630909E-01  -2.09450       2.09450       1207.13       1209.23    
  58  0.390466     -0.940415      -31.2201       31.2201       1193.97       1225.19    
  59  0.599449     -0.511744      -16.9890       16.9890       1279.80       1296.79    
  60  0.225097      -1.49123      -49.5060       49.5060       1240.71       1290.22    
  61  0.178203      -1.72483      -57.2612       57.2612       1281.30       1338.56    
  62  0.634237     -0.455332      -15.1162       15.1162       1303.01       1318.12    
  63  0.740506     -0.300422      -9.97344       9.97344       1286.40       1296.38    
  64  0.619863E-01  -2.78084      -92.3189       92.3189       1285.00       1377.32    
  65  0.184904      -1.68792      -56.0357       56.0357       1300.22       1356.26    
  66  0.127308      -2.06115      -68.4263       68.4263       1347.44       1415.86    
  67  0.112882      -2.18141      -72.4189       72.4189       1250.82       1323.24    
  68  0.830124     -0.186180      -6.18084       6.18084       1375.13       1381.31    
  69  0.810936     -0.209567      -6.95722       6.95722       1389.10       1396.06    
  70  0.547031     -0.603250      -20.0268       20.0268       1412.16       1432.19    
  71  0.933356     -0.689686E-01  -2.28963       2.28963       1407.76       1410.05    
  72  0.260857      -1.34378      -44.6111       44.6111       1378.12       1422.73    
  73  0.325236E-01  -3.42579      -113.730       113.730       1331.35       1445.08    
  74  0.976543     -0.237361E-01 -0.787995      0.787995       1313.44       1314.23    
loop,thermsimp(1:2)       36   1.92357       15.4265    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393       1043.50        129.70          0.65         29.55          2.16          0.05        162.10
Just calling func    0   0        162.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1043.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       36
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       37
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      392     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -18.2186       18.2186       919.160       937.378    
   2  0.954687     -0.463716E-01  -1.53945       1.53945       927.369       928.909    
   3  0.530232     -0.634441      -21.0623       21.0623       928.402       949.465    
   4  0.762581     -0.271046      -8.99823       8.99823       931.134       940.133    
   5  0.261488      -1.34137      -44.5309       44.5309       978.997       1023.53    
   6  0.639820     -0.446569      -14.8253       14.8253       984.147       998.972    
   7  0.527286     -0.640012      -21.2472       21.2472       987.655       1008.90    
   8  0.819676     -0.198846      -6.60132       6.60132       991.603       998.204    
   9  0.564974     -0.570976      -18.9554       18.9554       997.061       1016.02    
  10  0.313261      -1.16072      -38.5337       38.5337       974.423       1012.96    
  11  0.741013     -0.299737      -9.95073       9.95073       992.393       1002.34    
  12  0.286155      -1.25122      -41.5382       41.5382       1013.25       1054.78    
  13  0.145515      -1.92747      -63.9886       63.9886       1005.15       1069.14    
  14  0.417445     -0.873602      -29.0020       29.0020       994.676       1023.68    
  15  0.110117      -2.20621      -73.2421       73.2421       1032.83       1106.07    
  16  0.798228     -0.225361      -7.48157       7.48157       1022.04       1029.52    
  17  0.981317     -0.188596E-01 -0.626104      0.626104       1044.86       1045.48    
  18  0.947313     -0.541256E-01  -1.79687       1.79687       1031.58       1033.38    
  19  0.979175     -0.210453E-01 -0.698664      0.698664       1048.68       1049.37    
  20  0.507968     -0.677337      -22.4863       22.4863       1042.84       1065.32    
  21  0.313327      -1.16051      -38.5267       38.5267       1013.96       1052.49    
  22  0.174912      -1.74347      -57.8801       57.8801       1039.39       1097.27    
  23  0.278222      -1.27933      -42.4715       42.4715       1057.86       1100.34    
  24  0.551320     -0.595439      -19.7675       19.7675       953.767       973.534    
  25  0.509281     -0.674756      -22.4006       22.4006       1061.57       1083.97    
  26  0.202795E-01  -3.89814      -129.411       129.411       1068.11       1197.52    
  27  0.394215     -0.930860      -30.9028       30.9028       1033.01       1063.92    
  28  0.463302     -0.769377      -25.5419       25.5419       1065.84       1091.38    
  29  0.132020      -2.02480      -67.2197       67.2197       1087.31       1154.53    
  30  0.330810      -1.10621      -36.7242       36.7242       1101.44       1138.17    
  31  0.415110     -0.879212      -29.1882       29.1882       1119.26       1148.45    
  32  0.381803     -0.962850      -31.9648       31.9648       1069.88       1101.85    
  33  0.209798E-01  -3.86420      -128.284       128.284       1051.56       1179.85    
  34  0.906539     -0.981217E-01  -3.25746       3.25746       1115.73       1118.98    
  35  0.507460     -0.678337      -22.5195       22.5195       1076.81       1099.32    
  36  0.694619     -0.364392      -12.0971       12.0971       1145.34       1157.43    
  37  0.704259     -0.350610      -11.6396       11.6396       1157.00       1168.64    
  38  0.953152     -0.479806E-01  -1.59287       1.59287       1147.76       1149.36    
  39  0.393408     -0.932907      -30.9708       30.9708       1082.37       1113.34    
  40  0.361825      -1.01659      -33.7491       33.7491       1030.06       1063.81    
  41  0.420592     -0.866091      -28.7526       28.7526       1189.08       1217.83    
  42  0.474514     -0.745463      -24.7480       24.7480       1207.13       1231.88    
  43  0.769306     -0.262267      -8.70677       8.70677       1186.97       1195.68    
  44  0.881065     -0.126624      -4.20367       4.20367       1193.97       1198.17    
  45  0.298206      -1.20997      -40.1688       40.1688       1172.60       1212.77    
  46  0.364982E-01  -3.31049      -109.902       109.902       1238.38       1348.29    
  47  0.835758     -0.179417      -5.95630       5.95630       1228.83       1234.78    
  48  0.936392     -0.657215E-01  -2.18183       2.18183       1245.01       1247.19    
  49  0.213316      -1.54498      -51.2905       51.2905       1226.27       1277.56    
  50  0.942026     -0.597221E-01  -1.98266       1.98266       1217.14       1219.13    
  51  0.130068      -2.03970      -67.7141       67.7141       1210.27       1277.99    
  52  0.115047      -2.16241      -71.7881       71.7881       1196.76       1268.54    
  53  0.320926      -1.13654      -37.7312       37.7312       1223.82       1261.55    
  54  0.256901      -1.35906      -45.1184       45.1184       1240.71       1285.83    
  55  0.712293E-02  -4.94444      -164.146       164.146       1136.23       1300.37    
  56  0.470217     -0.754561      -25.0500       25.0500       1286.40       1311.45    
  57  0.934029     -0.682473E-01  -2.26568       2.26568       1279.80       1282.07    
  58  0.312307      -1.16377      -38.6349       38.6349       1241.02       1279.66    
  59  0.292579      -1.22902      -40.8012       40.8012       1313.44       1354.24    
  60  0.811492     -0.208881      -6.93448       6.93448       1244.63       1251.57    
  61  0.424749     -0.856258      -28.4262       28.4262       1303.01       1331.43    
  62  0.574444     -0.554353      -18.4035       18.4035       1245.40       1263.80    
  63  0.884133     -0.123147      -4.08826       4.08826       1250.82       1254.91    
  64  0.515226     -0.663150      -22.0153       22.0153       1281.30       1303.31    
  65  0.129966      -2.04049      -67.7404       67.7404       1211.72       1279.47    
  66  0.769822     -0.261596      -8.68452       8.68452       1300.22       1308.91    
  67  0.987280     -0.128019E-01 -0.425001      0.425001       1285.00       1285.43    
  68  0.424664     -0.856458      -28.4328       28.4328       1375.13       1403.56    
  69  0.663727     -0.409884      -13.6074       13.6074       1389.10       1402.71    
  70  0.281797      -1.26657      -42.0478       42.0478       1407.76       1449.81    
  71  0.949094     -0.522477E-01  -1.73453       1.73453       1347.44       1349.17    
  72  0.642131E-01  -2.74555      -91.1471       91.1471       1378.12       1469.27    
  73  0.522979     -0.648214      -21.5195       21.5195       1412.16       1433.68    
  74  0.670426     -0.399842      -13.2740       13.2740       1043.50       1056.77    
loop,thermsimp(1:2)       37   18.2186       1.53945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394       1508.74        129.44          0.65         29.72          1.99          0.04        161.84
Just calling func    0   0        161.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    395        948.30        129.54          0.64         29.58          2.16          0.05        161.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    948.30
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       37
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       38
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      394     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -11.4543       11.4543       927.369       938.824    
   2  0.656861     -0.420283      -13.9526       13.9526       919.160       933.112    
   3  0.531016     -0.632963      -21.0132       21.0132       931.134       952.148    
   4  0.259645      -1.34844      -44.7658       44.7658       928.402       973.168    
   5  0.509285E-01  -2.97733      -98.8420       98.8420       953.767       1052.61    
   6  0.222403      -1.50327      -49.9056       49.9056       991.603       1041.51    
   7  0.883122E-01  -2.42688      -80.5678       80.5678       984.147       1064.71    
   8  0.689941     -0.371150      -12.3215       12.3215       992.393       1004.71    
   9  0.811351     -0.209054      -6.94022       6.94022       987.655       994.595    
  10  0.252526      -1.37624      -45.6887       45.6887       974.423       1020.11    
  11  0.229840      -1.47037      -48.8137       48.8137       997.061       1045.87    
  12  0.108257      -2.22324      -73.8076       73.8076       978.997       1052.80    
  13  0.933379E-02  -4.67411      -155.172       155.172       994.676       1149.85    
  14  0.685050E-01  -2.68085      -88.9992       88.9992       1022.04       1111.04    
  15  0.875782     -0.132638      -4.40335       4.40335       1031.58       1035.98    
  16  0.592250     -0.523826      -17.3901       17.3901       1044.86       1062.25    
  17  0.259190E-01  -3.65278      -121.266       121.266       1048.68       1169.94    
  18  0.411624     -0.887646      -29.4682       29.4682       1013.96       1043.43    
  19  0.215731      -1.53372      -50.9168       50.9168       1013.25       1064.16    
  20  0.104157      -2.26185      -75.0893       75.0893       1043.50       1118.59    
  21  0.796475     -0.227560      -7.55457       7.55457       1030.06       1037.62    
  22  0.316732      -1.14970      -38.1679       38.1679       1033.01       1071.18    
  23  0.868566     -0.140911      -4.67799       4.67799       1042.84       1047.51    
  24  0.932817     -0.695461E-01  -2.30880       2.30880       1005.15       1007.46    
  25  0.704796E-01  -2.65243      -88.0559       88.0559       1061.57       1149.63    
  26  0.584289     -0.537360      -17.8394       17.8394       1065.84       1083.68    
  27  0.345306      -1.06332      -35.3004       35.3004       1039.39       1074.69    
  28  0.367589E-01  -3.30338      -109.666       109.666       1076.81       1186.47    
  29  0.470285     -0.754417      -25.0453       25.0453       1057.86       1082.91    
  30  0.303718      -1.19165      -39.5607       39.5607       1069.88       1109.44    
  31  0.298675      -1.20840      -40.1166       40.1166       1032.83       1072.94    
  32  0.506100     -0.681022      -22.6087       22.6087       1082.37       1104.98    
  33  0.240488      -1.42508      -47.3102       47.3102       1115.73       1163.04    
  34  0.673726     -0.394932      -13.1110       13.1110       1101.44       1114.55    
  35  0.303531      -1.19227      -39.5812       39.5812       1119.26       1158.84    
  36  0.450278     -0.797890      -26.4885       26.4885       1147.76       1174.25    
  37  0.850970     -0.161378      -5.35745       5.35745       1087.31       1092.67    
  38  0.370442     -0.993060      -32.9678       32.9678       1145.34       1178.30    
  39  0.328520      -1.11316      -36.9548       36.9548       1157.00       1193.95    
  40  0.194991      -1.63480      -54.2724       54.2724       1051.56       1105.84    
  41  0.547740     -0.601955      -19.9838       19.9838       1186.97       1206.96    
  42  0.574734     -0.553847      -18.3867       18.3867       1068.11       1086.50    
  43  0.900615     -0.104678      -3.47511       3.47511       1193.97       1197.45    
  44  0.316870      -1.14926      -38.1534       38.1534       1172.60       1210.76    
  45  0.961546     -0.392133E-01  -1.30181       1.30181       1189.08       1190.38    
  46  0.714054     -0.336796      -11.1810       11.1810       1217.14       1228.32    
  47  0.325407E-01  -3.42526      -113.712       113.712       1207.13       1320.84    
  48  0.264027      -1.33170      -44.2101       44.2101       1228.83       1273.04    
  49  0.139486      -1.96979      -65.3935       65.3935       1245.01       1310.41    
  50  0.568563     -0.564643      -18.7451       18.7451       1244.63       1263.38    
  51  0.691470     -0.368936      -12.2480       12.2480       1250.82       1263.07    
  52  0.214963      -1.53729      -51.0352       51.0352       1223.82       1274.86    
  53  0.515636     -0.662353      -21.9889       21.9889       1245.40       1267.39    
  54  0.803808     -0.218395      -7.25032       7.25032       1196.76       1204.01    
  55  0.930258     -0.722938E-01  -2.40002       2.40002       1226.27       1228.67    
  56  0.121241      -2.10998      -70.0474       70.0474       1210.27       1280.32    
  57  0.510661     -0.672049      -22.3108       22.3108       1211.72       1234.04    
  58  0.689134     -0.372319      -12.3603       12.3603       1241.02       1253.38    
  59  0.716530     -0.333335      -11.0661       11.0661       1279.80       1290.87    
  60  0.502196E-01  -2.99135      -99.3073       99.3073       1285.00       1384.31    
  61  0.901495     -0.103701      -3.44268       3.44268       1240.71       1244.15    
  62  0.933572     -0.687370E-01  -2.28194       2.28194       1136.23       1138.51    
  63  0.385092E-02  -5.55944      -184.563       184.563       1281.30       1465.86    
  64  0.965118     -0.355051E-01  -1.17870       1.17870       1300.22       1301.40    
  65  0.112744E-01  -4.48522      -148.901       148.901       1286.40       1435.30    
  66  0.836992     -0.177941      -5.90730       5.90730       1303.01       1308.92    
  67  0.993563     -0.645748E-02 -0.214377      0.214377       1238.38       1238.60    
  68  0.873807     -0.134896      -4.47828       4.47828       1347.44       1351.92    
  69  0.915114E-01  -2.39129      -79.3865       79.3865       1313.44       1392.83    
  70  0.198055      -1.61921      -53.7547       53.7547       1389.10       1442.86    
  71  0.480641     -0.732636      -24.3222       24.3222       1375.13       1399.45    
  72  0.678735     -0.387524      -12.8651       12.8651       1412.16       1425.03    
  73  0.424350     -0.857197      -28.4574       28.4574       1407.76       1436.22    
  74  0.869202E-01  -2.44276      -81.0953       81.0953       948.302       1029.40    
loop,thermsimp(1:2)       38   11.4543       13.9526    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    396        943.31        129.78          0.65         29.88          1.89          0.05        162.24
Just calling func    0   0        162.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    397       1424.47        129.75          0.68         29.67          2.17          0.03        162.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    943.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       38
neval is:      396
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       39
neval is:      396


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      396     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912      -7.56625       7.56625       919.160       926.726    
   2  0.306803      -1.18155      -39.2252       39.2252       927.369       966.594    
   3  0.857946     -0.153214      -5.08643       5.08643       931.134       936.221    
   4  0.363815      -1.01111      -33.5670       33.5670       928.402       961.969    
   5  0.755322E-01  -2.58320      -85.7573       85.7573       987.655       1073.41    
   6  0.345998E-01  -3.36391      -111.675       111.675       992.393       1104.07    
   7  0.280587      -1.27087      -42.1906       42.1906       1005.15       1047.34    
   8  0.907418     -0.971519E-01  -3.22526       3.22526       974.423       977.648    
   9  0.696180     -0.362147      -12.0226       12.0226       948.302       960.324    
  10  0.640049     -0.446211      -14.8134       14.8134       1031.58       1046.39    
  11  0.620842     -0.476679      -15.8249       15.8249       1030.06       1045.89    
  12  0.850691     -0.161706      -5.36835       5.36835       991.603       996.971    
  13  0.308317      -1.17663      -39.0618       39.0618       1013.96       1053.02    
  14  0.198496      -1.61698      -53.6809       53.6809       997.061       1050.74    
  15  0.119809      -2.12186      -70.4418       70.4418       1042.84       1113.28    
  16  0.905871     -0.988582E-01  -3.28191       3.28191       953.767       957.049    
  17  0.386344     -0.951028      -31.5724       31.5724       978.997       1010.57    
  18  0.112809      -2.18206      -72.4402       72.4402       1044.86       1117.30    
  19  0.682866     -0.381457      -12.6637       12.6637       1013.25       1025.91    
  20  0.819362     -0.199230      -6.61407       6.61407       984.147       990.761    
  21  0.412742     -0.884933      -29.3782       29.3782       1033.01       1062.39    
  22  0.211811E-01  -3.85464      -127.967       127.967       1032.83       1160.79    
  23  0.422800     -0.860857      -28.5789       28.5789       1039.39       1067.97    
  24  0.826028     -0.191126      -6.34504       6.34504       1057.86       1064.21    
  25  0.457858     -0.781197      -25.9343       25.9343       1065.84       1091.77    
  26  0.551067     -0.595900      -19.7828       19.7828       1068.11       1087.89    
  27  0.160440      -1.82984      -60.7472       60.7472       1087.31       1148.06    
  28  0.240310      -1.42582      -47.3347       47.3347       1082.37       1129.70    
  29  0.614859     -0.486362      -16.1463       16.1463       1051.56       1067.71    
  30  0.489204     -0.714976      -23.7359       23.7359       1069.88       1093.62    
  31  0.151691      -1.88591      -62.6087       62.6087       1022.04       1084.65    
  32  0.221776      -1.50609      -49.9993       49.9993       1101.44       1151.44    
  33  0.333050      -1.09946      -36.5001       36.5001       1043.50       1080.00    
  34  0.905001     -0.998190E-01  -3.31381       3.31381       1136.23       1139.54    
  35  0.598599     -0.513164      -17.0361       17.0361       1061.57       1078.61    
  36  0.603742     -0.504608      -16.7520       16.7520       994.676       1011.43    
  37  0.989214     -0.108448E-01 -0.360027      0.360027       1119.26       1119.62    
  38  0.175887      -1.73792      -57.6956       57.6956       1115.73       1173.42    
  39  0.708621     -0.344434      -11.4346       11.4346       1048.68       1060.11    
  40  0.940581     -0.612570E-01  -2.03362       2.03362       1147.76       1149.80    
  41  0.870068     -0.139184      -4.62064       4.62064       1145.34       1149.96    
  42  0.260264      -1.34606      -44.6867       44.6867       1076.81       1121.49    
  43  0.216654      -1.52946      -50.7751       50.7751       1189.08       1239.85    
  44  0.553762     -0.591020      -19.6208       19.6208       1157.00       1176.62    
  45  0.891465     -0.114889      -3.81411       3.81411       1193.97       1197.78    
  46  0.320048      -1.13928      -37.8222       37.8222       1196.76       1234.58    
  47  0.163518      -1.81083      -60.1163       60.1163       1186.97       1247.09    
  48  0.652431     -0.427050      -14.1773       14.1773       1172.60       1186.78    
  49  0.317737      -1.14653      -38.0628       38.0628       1217.14       1255.21    
  50  0.321191      -1.13572      -37.7037       37.7037       1226.27       1263.98    
  51  0.750162     -0.287466      -9.54335       9.54335       1211.72       1221.27    
  52  0.172611      -1.75672      -58.3198       58.3198       1238.38       1296.70    
  53  0.413556     -0.882963      -29.3127       29.3127       1240.71       1270.02    
  54  0.277750      -1.28103      -42.5280       42.5280       1241.02       1283.55    
  55  0.326826      -1.11833      -37.1264       37.1264       1250.82       1287.95    
  56  0.922327     -0.808557E-01  -2.68426       2.68426       1244.63       1247.32    
  57  0.572255     -0.558170      -18.5302       18.5302       1245.40       1263.93    
  58  0.149549      -1.90013      -63.0808       63.0808       1228.83       1291.91    
  59  0.266959      -1.32066      -43.8435       43.8435       1223.82       1267.67    
  60  0.636795     -0.451307      -14.9826       14.9826       1210.27       1225.25    
  61  0.868293     -0.141226      -4.68846       4.68846       1279.80       1284.49    
  62  0.597909     -0.514316      -17.0743       17.0743       1300.22       1317.30    
  63  0.121507      -2.10778      -69.9745       69.9745       1303.01       1372.98    
  64  0.606075     -0.500751      -16.6240       16.6240       1245.01       1261.64    
  65  0.390347     -0.940720      -31.2302       31.2302       1207.13       1238.36    
  66  0.175787      -1.73849      -57.7145       57.7145       1347.44       1405.15    
  67  0.756550     -0.278986      -9.26183       9.26183       1285.00       1294.26    
  68  0.753054     -0.283618      -9.41560       9.41560       1313.44       1322.85    
  69  0.451941     -0.794203      -26.3661       26.3661       1375.13       1401.49    
  70  0.637492     -0.450214      -14.9463       14.9463       1412.16       1427.11    
  71  0.462733     -0.770606      -25.5827       25.5827       1286.40       1311.99    
  72  0.785570E-02  -4.84652      -160.895       160.895       1407.76       1568.66    
  73  0.870075     -0.139176      -4.62037       4.62037       1389.10       1393.72    
  74  0.524119     -0.646036      -21.4472       21.4472       943.308       964.755    
loop,thermsimp(1:2)       39   7.56625       39.2252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    398       1719.44        129.51          0.66         30.12          1.58          0.05        161.91
Just calling func    0   0        161.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    399        985.17        129.73          0.67         30.05          1.59          0.03        162.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    985.17
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       39
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       40
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      398     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159      -8.10563       8.10563       919.160       927.265    
   2  0.179321      -1.71858      -57.0536       57.0536       931.134       988.188    
   3  0.331080      -1.10539      -36.6971       36.6971       953.767       990.464    
   4  0.130870      -2.03355      -67.5102       67.5102       948.302       1015.81    
   5  0.604904     -0.502686      -16.6882       16.6882       928.402       945.090    
   6  0.140568      -1.96207      -65.1370       65.1370       943.308       1008.45    
   7  0.127414      -2.06031      -68.3986       68.3986       927.369       995.768    
   8  0.389565     -0.942725      -31.2967       31.2967       974.423       1005.72    
   9  0.835608     -0.179595      -5.96224       5.96224       984.147       990.109    
  10  0.934873     -0.673445E-01  -2.23571       2.23571       991.603       993.838    
  11  0.639074     -0.447735      -14.8640       14.8640       978.997       993.861    
  12  0.349757      -1.05052      -34.8752       34.8752       994.676       1029.55    
  13  0.175521      -1.74000      -57.7647       57.7647       1013.25       1071.01    
  14  0.761611     -0.272320      -9.04052       9.04052       1030.06       1039.10    
  15  0.162952      -1.81430      -60.2313       60.2313       1031.58       1091.81    
  16  0.542858     -0.610907      -20.2810       20.2810       1005.15       1025.43    
  17  0.715099     -0.335334      -11.1325       11.1325       997.061       1008.19    
  18  0.996052     -0.395608E-02 -0.131334      0.131334       1013.96       1014.09    
  19  0.668265     -0.403070      -13.3812       13.3812       1048.68       1062.06    
  20  0.294619      -1.22207      -40.5706       40.5706       1033.01       1073.58    
  21  0.721551     -0.326352      -10.8343       10.8343       1057.86       1068.70    
  22  0.216610      -1.52966      -50.7818       50.7818       1051.56       1102.35    
  23  0.649086     -0.432191      -14.3479       14.3479       1039.39       1053.74    
  24  0.692922E-01  -2.66942      -88.6200       88.6200       987.655       1076.27    
  25  0.271271      -1.30464      -43.3115       43.3115       1061.57       1104.88    
  26  0.407239     -0.898355      -29.8237       29.8237       1043.50       1073.32    
  27  0.435034     -0.832331      -27.6319       27.6319       1022.04       1049.67    
  28  0.638725     -0.448281      -14.8821       14.8821       1068.11       1082.99    
  29  0.932325     -0.700735E-01  -2.32631       2.32631       1065.84       1068.16    
  30  0.958672     -0.422065E-01  -1.40118       1.40118       1069.88       1071.28    
  31  0.336870      -1.08806      -36.1215       36.1215       992.393       1028.51    
  32  0.453036     -0.791783      -26.2857       26.2857       1042.84       1069.12    
  33  0.422569     -0.861402      -28.5970       28.5970       1044.86       1073.45    
  34  0.596674     -0.516385      -17.1430       17.1430       1119.26       1136.41    
  35  0.586088     -0.534286      -17.7373       17.7373       1076.81       1094.54    
  36  0.174805      -1.74409      -57.9004       57.9004       1082.37       1140.27    
  37  0.854432     -0.157318      -5.22268       5.22268       1136.23       1141.45    
  38  0.754323     -0.281935      -9.35973       9.35973       1087.31       1096.67    
  39  0.956897     -0.440598E-01  -1.46271       1.46271       1147.76       1149.23    
  40  0.334431      -1.09533      -36.3628       36.3628       1145.34       1181.70    
  41  0.750609     -0.286871      -9.52358       9.52358       1101.44       1110.97    
  42  0.778602     -0.250255      -8.30799       8.30799       1032.83       1041.14    
  43  0.330765      -1.10635      -36.7287       36.7287       1115.73       1152.46    
  44  0.601104     -0.508987      -16.8974       16.8974       1157.00       1173.90    
  45  0.578570     -0.547197      -18.1659       18.1659       1172.60       1190.77    
  46  0.381025     -0.964891      -32.0326       32.0326       1193.97       1226.00    
  47  0.764260     -0.268847      -8.92522       8.92522       1211.72       1220.65    
  48  0.194556      -1.63704      -54.3466       54.3466       1210.27       1264.62    
  49  0.785702E-01  -2.54376      -84.4482       84.4482       1196.76       1281.20    
  50  0.253837E-01  -3.67365      -121.958       121.958       1207.13       1329.09    
  51  0.149049      -1.90348      -63.1920       63.1920       1189.08       1252.27    
  52  0.591675     -0.524797      -17.4223       17.4223       1186.97       1204.39    
  53  0.471206     -0.752459      -24.9803       24.9803       1244.63       1269.61    
  54  0.734409     -0.308689      -10.2479       10.2479       1217.14       1227.39    
  55  0.183368      -1.69626      -56.3128       56.3128       1245.01       1301.33    
  56  0.296126      -1.21697      -40.4012       40.4012       1245.40       1285.80    
  57  0.664218     -0.409144      -13.5828       13.5828       1226.27       1239.86    
  58  0.863102     -0.147223      -4.88753       4.88753       1223.82       1228.71    
  59  0.142776      -1.94648      -64.6195       64.6195       1240.71       1305.33    
  60  0.995423     -0.458719E-02 -0.152286      0.152286       1241.02       1241.17    
  61  0.721084     -0.327000      -10.8558       10.8558       1279.80       1290.66    
  62  0.336569      -1.08895      -36.1512       36.1512       1250.82       1286.98    
  63  0.785569     -0.241347      -8.01227       8.01227       1228.83       1236.84    
  64  0.518120     -0.657548      -21.8294       21.8294       1285.00       1306.83    
  65  0.988600     -0.114656E-01 -0.380637      0.380637       1238.38       1238.77    
  66  0.584794     -0.536495      -17.8107       17.8107       1286.40       1304.21    
  67  0.724983     -0.321607      -10.6768       10.6768       1300.22       1310.90    
  68  0.386472E-01  -3.25328      -108.003       108.003       1313.44       1421.44    
  69  0.313021      -1.16149      -38.5592       38.5592       1303.01       1341.57    
  70  0.234708      -1.44941      -48.1179       48.1179       1389.10       1437.22    
  71  0.744664     -0.294822      -9.78755       9.78755       1375.13       1384.92    
  72  0.514978     -0.663630      -22.0313       22.0313       1347.44       1369.47    
  73  0.771007     -0.260058      -8.63343       8.63343       1412.16       1420.80    
  74  0.880944     -0.126762      -4.20826       4.20826       985.165       989.373    
loop,thermsimp(1:2)       40   8.10563       57.0536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400       1693.17        128.94          0.65         30.23          1.98          0.05        161.84
Just calling func    0   0        161.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    401        933.39        129.64          0.66         30.01          1.42          0.05        161.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    933.39        2.701     -1.127      4.229     -100.0     0.8805    
                      -1.015      2.479     -100.0      2.851      1.405    
                      0.7276E-01 0.4257      2.009      0.000     0.6756    
                      -1.122     -20.00      0.000      0.000      1.100    

                      -2.741      5260.     0.1036E+05 -605.3     -1451.    
                      -3.561     -6.530     -5.204     -15.33     -5.168    
                      -12.87     -3.193     -1524.      0.000     -463.5    

                      -2263.      4440.      2271.      2465.      3441.    
                       2679.    -0.2012    -0.4558      0.000    -0.2080    
                     -0.3356    -0.4680    -0.2722    -0.2914    -0.2724    

                     -0.6846     -1.741      1.382    -0.6011E-01 0.2926E-01
                      0.8541E-01-0.7501E-01-0.1349    -0.1131    -0.4375E-01
                     -0.2621    -0.1093    -0.4136     -2.153      1.382    

                      -1.676     -1.569     0.1500E+05 0.1500E+05  0.000    
                       0.000      9.041      8.873      0.000    -0.6120E-04
                      0.4195E-01 0.4235      9.156      8.982    -0.2123E+05

                      0.1379E-03 0.4461     0.3138      9.713      9.174    
                     -0.1014E+05-0.1397E-03 -1.107     0.2950      9.456    
                       9.331     -4135.     0.1148E-01
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    933.39
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       40
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       41
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      400     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091      -8.99973       8.99973       919.160       928.160    
   2  0.700395     -0.356110      -11.8222       11.8222       928.402       940.224    
   3  0.110610      -2.20174      -73.0938       73.0938       931.134       1004.23    
   4  0.542261     -0.612007      -20.3175       20.3175       985.165       1005.48    
   5  0.993402     -0.662023E-02 -0.219779      0.219779       984.147       984.366    
   6  0.370923     -0.991761      -32.9246       32.9246       953.767       986.692    
   7  0.311008      -1.16794      -38.7734       38.7734       991.603       1030.38    
   8  0.120775      -2.11383      -70.1752       70.1752       978.997       1049.17    
   9  0.496739     -0.699690      -23.2284       23.2284       927.369       950.598    
  10  0.823539     -0.194144      -6.44523       6.44523       974.423       980.868    
  11  0.401420     -0.912746      -30.3015       30.3015       997.061       1027.36    
  12  0.467810E-01  -3.06228      -101.662       101.662       943.308       1044.97    
  13  0.104633      -2.25729      -74.9380       74.9380       1013.96       1088.90    
  14  0.233534      -1.45443      -48.2844       48.2844       948.302       996.586    
  15  0.959269     -0.415834E-01  -1.38049       1.38049       1005.15       1006.53    
  16  0.359845      -1.02208      -33.9312       33.9312       992.393       1026.32    
  17  0.141753E-01  -4.25626      -141.300       141.300       994.676       1135.98    
  18  0.566935     -0.567510      -18.8403       18.8403       1030.06       1048.90    
  19  0.901077     -0.104164      -3.45806       3.45806       1032.83       1036.29    
  20  0.465285     -0.765104      -25.4001       25.4001       1022.04       1047.44    
  21  0.315152      -1.15470      -38.3340       38.3340       1039.39       1077.72    
  22  0.954826     -0.462256E-01  -1.53461       1.53461       1048.68       1050.21    
  23  0.110663      -2.20127      -73.0780       73.0780       1065.84       1138.91    
  24  0.851067     -0.161264      -5.35367       5.35367       1057.86       1063.22    
  25  0.768372     -0.263481      -8.74708       8.74708       1042.84       1051.58    
  26  0.243081      -1.41436      -46.9541       46.9541       1013.25       1060.20    
  27  0.434279     -0.834069      -27.6896       27.6896       1069.88       1097.57    
  28  0.855138     -0.156492      -5.19525       5.19525       1043.50       1048.69    
  29  0.238302      -1.43422      -47.6134       47.6134       1044.86       1092.47    
  30  0.445547     -0.808452      -26.8391       26.8391       1033.01       1059.85    
  31  0.290285      -1.23689      -41.0625       41.0625       987.655       1028.72    
  32  0.479492     -0.735029      -24.4016       24.4016       1068.11       1092.51    
  33  0.359712      -1.02245      -33.9435       33.9435       1031.58       1065.52    
  34  0.429040     -0.846204      -28.0924       28.0924       1076.81       1104.90    
  35  0.570900     -0.560541      -18.6089       18.6089       1087.31       1105.92    
  36  0.151312      -1.88841      -62.6918       62.6918       1051.56       1114.26    
  37  0.671837     -0.397739      -13.2042       13.2042       1061.57       1074.78    
  38  0.699384     -0.357556      -11.8702       11.8702       1101.44       1113.31    
  39  0.337756      -1.08543      -36.0343       36.0343       1119.26       1155.30    
  40  0.508282     -0.676718      -22.4658       22.4658       1082.37       1104.84    
  41  0.153085      -1.87676      -62.3051       62.3051       1136.23       1198.53    
  42  0.859571     -0.151322      -5.02362       5.02362       1147.76       1152.79    
  43  0.240559      -1.42479      -47.3004       47.3004       1115.73       1163.03    
  44  0.956907     -0.440496E-01  -1.46237       1.46237       1157.00       1158.46    
  45  0.695010     -0.363829      -12.0785       12.0785       1145.34       1157.42    
  46  0.258459      -1.35302      -44.9178       44.9178       1172.60       1217.52    
  47  0.851968     -0.160207      -5.31857       5.31857       1186.97       1192.29    
  48  0.755235     -0.280726      -9.31959       9.31959       1211.72       1221.04    
  49  0.618135     -0.481049      -15.9699       15.9699       1193.97       1209.94    
  50  0.366071      -1.00493      -33.3617       33.3617       1217.14       1250.50    
  51  0.768800     -0.262924      -8.72861       8.72861       1223.82       1232.55    
  52  0.704229     -0.350652      -11.6410       11.6410       1228.83       1240.47    
  53  0.900469     -0.104839      -3.48047       3.48047       1238.38       1241.86    
  54  0.175085      -1.74249      -57.8473       57.8473       1226.27       1284.12    
  55  0.905870     -0.988595E-01  -3.28195       3.28195       1241.02       1244.30    
  56  0.107963E-01  -4.52856      -150.340       150.340       1189.08       1339.42    
  57  0.493411     -0.706413      -23.4516       23.4516       1210.27       1233.72    
  58  0.538221     -0.619486      -20.5658       20.5658       1244.63       1265.20    
  59  0.626575     -0.467488      -15.5197       15.5197       1196.76       1212.28    
  60  0.904814     -0.100026      -3.32066       3.32066       1245.40       1248.72    
  61  0.266015      -1.32420      -43.9610       43.9610       1250.82       1294.79    
  62  0.328156      -1.11427      -36.9916       36.9916       1279.80       1316.79    
  63  0.664881     -0.408147      -13.5497       13.5497       1245.01       1258.56    
  64  0.858127     -0.153003      -5.07943       5.07943       1286.40       1291.48    
  65  0.299604      -1.20529      -40.0136       40.0136       1240.71       1280.72    
  66  0.220344E-01  -3.81515      -126.656       126.656       1285.00       1411.66    
  67  0.671608     -0.398081      -13.2156       13.2156       1300.22       1313.44    
  68  0.576408E-01  -2.85353      -94.7318       94.7318       1207.13       1301.86    
  69  0.905087     -0.997240E-01  -3.31065       3.31065       1303.01       1306.32    
  70  0.830967     -0.185166      -6.14716       6.14716       1347.44       1353.58    
  71  0.810927     -0.209577      -6.95758       6.95758       1375.13       1382.09    
  72  0.374578     -0.981955      -32.5991       32.5991       1412.16       1444.76    
  73  0.852638     -0.159420      -5.29245       5.29245       1313.44       1318.73    
  74  0.435106     -0.832165      -27.6263       27.6263       933.395       961.021    
loop,thermsimp(1:2)       41   8.99973       11.8222    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402       1095.87        129.50          0.67         29.91          1.59          0.04        161.70
Just calling func    0   0        161.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1095.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       41
neval is:      401
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       42
neval is:      401


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      401     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -15.1782       15.1782       919.160       934.338    
   2  0.416661     -0.875483      -29.0644       29.0644       928.402       957.467    
   3  0.671058E-01  -2.70149      -89.6843       89.6843       927.369       1017.05    
   4  0.701446     -0.354612      -11.7725       11.7725       933.395       945.167    
   5  0.176715      -1.73321      -57.5395       57.5395       974.423       1031.96    
   6  0.223035      -1.50042      -49.8113       49.8113       984.147       1033.96    
   7  0.907694E-01  -2.39943      -79.6568       79.6568       953.767       1033.42    
   8  0.113202      -2.17858      -72.3248       72.3248       948.302       1020.63    
   9  0.443192     -0.813753      -27.0151       27.0151       931.134       958.150    
  10  0.999048     -0.952172E-03 -0.316104E-01  0.316104E-01   985.165       985.197    
  11  0.606200     -0.500546      -16.6172       16.6172       1005.15       1021.76    
  12  0.120370      -2.11718      -70.2865       70.2865       992.393       1062.68    
  13  0.448885     -0.800988      -26.5913       26.5913       997.061       1023.65    
  14  0.531880     -0.631338      -20.9593       20.9593       987.655       1008.61    
  15  0.804789     -0.217176      -7.20983       7.20983       991.603       998.812    
  16  0.427230     -0.850433      -28.2328       28.2328       1032.83       1061.06    
  17  0.222958      -1.50077      -49.8228       49.8228       943.308       993.131    
  18  0.850765     -0.161619      -5.36545       5.36545       1022.04       1027.41    
  19  0.926988     -0.758150E-01  -2.51692       2.51692       1043.50       1046.02    
  20  0.729073     -0.315981      -10.4900       10.4900       1030.06       1040.55    
  21  0.411512     -0.887916      -29.4772       29.4772       978.997       1008.47    
  22  0.692157     -0.367942      -12.2150       12.2150       1048.68       1060.89    
  23  0.917319     -0.862998E-01  -2.86499       2.86499       1042.84       1045.70    
  24  0.376398     -0.977107      -32.4382       32.4382       1033.01       1065.45    
  25  0.276694      -1.28484      -42.6544       42.6544       1013.25       1055.90    
  26  0.296319      -1.21632      -40.3796       40.3796       1057.86       1098.24    
  27  0.395623     -0.927294      -30.7845       30.7845       1031.58       1062.36    
  28  0.397122     -0.923511      -30.6589       30.6589       1061.57       1092.23    
  29  0.414944     -0.879612      -29.2015       29.2015       1039.39       1068.59    
  30  0.249325      -1.38900      -46.1121       46.1121       1013.96       1060.07    
  31  0.668798     -0.402273      -13.3547       13.3547       1044.86       1058.21    
  32  0.765717     -0.266942      -8.86200       8.86200       1068.11       1076.97    
  33  0.420183     -0.867066      -28.7850       28.7850       1069.88       1098.67    
  34  0.851189     -0.161121      -5.34892       5.34892       1082.37       1087.72    
  35  0.733154     -0.310400      -10.3047       10.3047       1076.81       1087.11    
  36  0.721185E-01  -2.62944      -87.2927       87.2927       1087.31       1174.60    
  37  0.356766      -1.03068      -34.2166       34.2166       1101.44       1135.66    
  38  0.654280     -0.424220      -14.0833       14.0833       1051.56       1065.65    
  39  0.662515     -0.411712      -13.6681       13.6681       994.676       1008.34    
  40  0.164156      -1.80694      -59.9870       59.9870       1065.84       1125.82    
  41  0.116179      -2.15263      -71.4632       71.4632       1147.76       1219.23    
  42  0.134772      -2.00417      -66.5349       66.5349       1119.26       1185.80    
  43  0.298842      -1.20784      -40.0980       40.0980       1145.34       1185.44    
  44  0.583690     -0.538385      -17.8734       17.8734       1157.00       1174.87    
  45  0.894896     -0.111047      -3.68657       3.68657       1115.73       1119.41    
  46  0.148951      -1.90414      -63.2139       63.2139       1186.97       1250.19    
  47  0.315615      -1.15323      -38.2852       38.2852       1136.23       1174.51    
  48  0.810942     -0.209558      -6.95695       6.95695       1193.97       1200.93    
  49  0.697490     -0.360268      -11.9602       11.9602       1196.76       1208.72    
  50  0.440376     -0.820127      -27.2267       27.2267       1172.60       1199.83    
  51  0.987477     -0.126020E-01 -0.418362      0.418362       1211.72       1212.14    
  52  0.788027     -0.238223      -7.90856       7.90856       1223.82       1231.73    
  53  0.304959      -1.18758      -39.4255       39.4255       1210.27       1249.70    
  54  0.918046     -0.855075E-01  -2.83869       2.83869       1228.83       1231.66    
  55  0.436819     -0.828237      -27.4959       27.4959       1238.38       1265.88    
  56  0.983182     -0.169609E-01 -0.563072      0.563072       1241.02       1241.58    
  57  0.635334     -0.453604      -15.0588       15.0588       1245.40       1260.46    
  58  0.331329      -1.10464      -36.6721       36.6721       1217.14       1253.81    
  59  0.410737     -0.889801      -29.5398       29.5398       1245.01       1274.55    
  60  0.351373      -1.04591      -34.7222       34.7222       1244.63       1279.35    
  61  0.340199      -1.07823      -35.7951       35.7951       1240.71       1276.51    
  62  0.510393     -0.672575      -22.3283       22.3283       1226.27       1248.60    
  63  0.249777      -1.38719      -46.0520       46.0520       1286.40       1332.45    
  64  0.432656     -0.837813      -27.8139       27.8139       1250.82       1278.64    
  65  0.323628      -1.12816      -37.4529       37.4529       1207.13       1244.59    
  66  0.179237      -1.71905      -57.0692       57.0692       1303.01       1360.08    
  67  0.836000     -0.179126      -5.94666       5.94666       1300.22       1306.17    
  68  0.438142     -0.825211      -27.3955       27.3955       1279.80       1307.20    
  69  0.398911     -0.919018      -30.5097       30.5097       1313.44       1343.95    
  70  0.700182     -0.356415      -11.8323       11.8323       1189.08       1200.91    
  71  0.792556     -0.232492      -7.71832       7.71832       1347.44       1355.16    
  72  0.156512      -1.85462      -61.5700       61.5700       1375.13       1436.70    
  73  0.762370     -0.271323      -9.00741       9.00741       1285.00       1294.01    
  74  0.746261     -0.292680      -9.71645       9.71645       1095.87       1105.59    
loop,thermsimp(1:2)       42   15.1782       29.0644    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    403       1009.34        129.94          0.67         30.16          0.66          0.04        161.48
Just calling func    0   0        161.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1009.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       42
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       43
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      402     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -59.7127       59.7127       919.160       978.873    
   2  0.737067     -0.305077      -10.1280       10.1280       933.395       943.523    
   3  0.332012      -1.10258      -36.6038       36.6038       928.402       965.006    
   4  0.756847     -0.278594      -9.24881       9.24881       931.134       940.383    
   5  0.168413      -1.78134      -59.1371       59.1371       985.165       1044.30    
   6  0.422244     -0.862172      -28.6225       28.6225       943.308       971.931    
   7  0.865590     -0.144344      -4.79196       4.79196       991.603       996.395    
   8  0.820021     -0.198425      -6.58734       6.58734       994.676       1001.26    
   9  0.681904     -0.382867      -12.7105       12.7105       978.997       991.707    
  10  0.476378E-02  -5.34671      -177.501       177.501       987.655       1165.16    
  11  0.891588     -0.114751      -3.80951       3.80951       927.369       931.179    
  12  0.583910     -0.538008      -17.8609       17.8609       948.302       966.163    
  13  0.224086      -1.49572      -49.6553       49.6553       1005.15       1054.80    
  14  0.550831     -0.596327      -19.7970       19.7970       997.061       1016.86    
  15  0.109755      -2.20951      -73.3515       73.3515       1022.04       1095.39    
  16  0.173189      -1.75337      -58.2088       58.2088       974.423       1032.63    
  17  0.822854     -0.194976      -6.47286       6.47286       953.767       960.240    
  18  0.792562     -0.232484      -7.71804       7.71804       984.147       991.865    
  19  0.383253     -0.959060      -31.8390       31.8390       1030.06       1061.90    
  20  0.422533     -0.861488      -28.5998       28.5998       1042.84       1071.44    
  21  0.811047     -0.209429      -6.95265       6.95265       1043.50       1050.45    
  22  0.860783     -0.149912      -4.97681       4.97681       1013.25       1018.22    
  23  0.751011     -0.286335      -9.50579       9.50579       1044.86       1054.36    
  24  0.358967      -1.02452      -34.0123       34.0123       1013.96       1047.97    
  25  0.877019     -0.131227      -4.35649       4.35649       1048.68       1053.03    
  26  0.441658     -0.817220      -27.1302       27.1302       1032.83       1059.96    
  27  0.259650      -1.34842      -44.7651       44.7651       1031.58       1076.34    
  28  0.106035      -2.24398      -74.4961       74.4961       992.393       1066.89    
  29  0.608421     -0.496887      -16.4957       16.4957       1033.01       1049.51    
  30  0.143099      -1.94422      -64.5445       64.5445       1051.56       1116.11    
  31  0.242177      -1.41809      -47.0779       47.0779       1039.39       1086.47    
  32  0.517081     -0.659556      -21.8961       21.8961       1068.11       1090.01    
  33  0.492461     -0.708339      -23.5156       23.5156       1076.81       1100.32    
  34  0.839297     -0.175190      -5.81600       5.81600       1082.37       1088.19    
  35  0.824305     -0.193215      -6.41439       6.41439       1061.57       1067.99    
  36  0.742325     -0.297968      -9.89200       9.89200       1057.86       1067.76    
  37  0.158654      -1.84103      -61.1189       61.1189       1069.88       1131.00    
  38  0.702604     -0.352962      -11.7177       11.7177       1095.87       1107.59    
  39  0.324396      -1.12579      -37.3741       37.3741       1115.73       1153.10    
  40  0.628286     -0.464760      -15.4292       15.4292       1065.84       1081.27    
  41  0.896889     -0.108823      -3.61272       3.61272       1101.44       1105.06    
  42  0.325633      -1.12199      -37.2479       37.2479       1136.23       1173.47    
  43  0.833588     -0.182016      -6.04259       6.04259       1087.31       1093.35    
  44  0.292459      -1.22943      -40.8149       40.8149       1157.00       1197.81    
  45  0.625236     -0.469626      -15.5907       15.5907       1145.34       1160.93    
  46  0.613119     -0.489197      -16.2404       16.2404       1119.26       1135.50    
  47  0.521950     -0.650183      -21.5849       21.5849       1172.60       1194.19    
  48  0.999935     -0.646019E-04 -0.214466E-02  0.214466E-02   1189.08       1189.08    
  49  0.971287E-01  -2.33172      -77.4088       77.4088       1193.97       1271.38    
  50  0.982535     -0.176198E-01 -0.584943      0.584943       1196.76       1197.34    
  51  0.930778     -0.717347E-01  -2.38146       2.38146       1211.72       1214.11    
  52  0.566446     -0.568373      -18.8689       18.8689       1147.76       1166.63    
  53  0.671812     -0.397777      -13.2055       13.2055       1228.83       1242.03    
  54  0.814331     -0.205388      -6.81851       6.81851       1223.82       1230.64    
  55  0.593504     -0.521712      -17.3199       17.3199       1241.02       1258.34    
  56  0.338750      -1.08249      -35.9368       35.9368       1207.13       1243.07    
  57  0.584939     -0.536248      -17.8025       17.8025       1226.27       1244.08    
  58  0.576637     -0.550541      -18.2770       18.2770       1210.27       1228.55    
  59  0.324991      -1.12396      -37.3134       37.3134       1186.97       1224.29    
  60  0.320844E-01  -3.43939      -114.181       114.181       1217.14       1331.32    
  61  0.711764     -0.340009      -11.2877       11.2877       1245.40       1256.69    
  62  0.340665      -1.07686      -35.7497       35.7497       1238.38       1274.13    
  63  0.423626E-01  -3.16149      -104.956       104.956       1245.01       1349.97    
  64  0.672710     -0.396440      -13.1611       13.1611       1240.71       1253.87    
  65  0.654240     -0.424282      -14.0854       14.0854       1250.82       1264.91    
  66  0.548342     -0.600856      -19.9473       19.9473       1244.63       1264.58    
  67  0.305403      -1.18612      -39.3771       39.3771       1285.00       1324.38    
  68  0.449145     -0.800410      -26.5721       26.5721       1300.22       1326.80    
  69  0.889699     -0.116872      -3.87993       3.87993       1279.80       1283.68    
  70  0.474782     -0.744900      -24.7293       24.7293       1286.40       1311.13    
  71  0.779181     -0.249512      -8.28334       8.28334       1313.44       1321.72    
  72  0.382818     -0.960196      -31.8767       31.8767       1347.44       1379.31    
  73  0.269854      -1.30988      -43.4855       43.4855       1303.01       1346.49    
  74  0.302587      -1.19539      -39.6847       39.6847       1009.34       1049.03    
loop,thermsimp(1:2)       43   59.7127       10.1280    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404        935.62        129.89          0.69         30.19          0.67          0.05        161.49
Just calling func    0   0        161.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    405       1418.12        129.51          0.66         30.08          0.80          0.05        161.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    935.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       43
neval is:      404
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       44
neval is:      404


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      404     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -77.7868       77.7868       927.369       1005.16    
   2  0.509377     -0.674566      -22.3944       22.3944       931.134       953.529    
   3  0.960906     -0.398785E-01  -1.32389       1.32389       933.395       934.719    
   4  0.145058      -1.93062      -64.0930       64.0930       953.767       1017.86    
   5  0.584668     -0.536711      -17.8178       17.8178       928.402       946.220    
   6  0.137819      -1.98182      -65.7927       65.7927       948.302       1014.09    
   7  0.829899     -0.186451      -6.18983       6.18983       943.308       949.498    
   8  0.249142      -1.38973      -46.1365       46.1365       919.160       965.296    
   9  0.471049     -0.752793      -24.9913       24.9913       978.997       1003.99    
  10  0.744784E-01  -2.59725      -86.2238       86.2238       984.147       1070.37    
  11  0.233158      -1.45604      -48.3379       48.3379       991.603       1039.94    
  12  0.714243E-01  -2.63912      -87.6138       87.6138       994.676       1082.29    
  13  0.749743     -0.288025      -9.56192       9.56192       997.061       1006.62    
  14  0.873534     -0.135209      -4.48868       4.48868       1013.25       1017.73    
  15  0.265951      -1.32444      -43.9690       43.9690       974.423       1018.39    
  16  0.328438      -1.11341      -36.9630       36.9630       985.165       1022.13    
  17  0.988010     -0.120622E-01 -0.400443      0.400443       1013.96       1014.36    
  18  0.737788     -0.304099      -10.0955       10.0955       1009.34       1019.44    
  19  0.171086E-01  -4.06818      -135.056       135.056       1033.01       1168.07    
  20  0.452693     -0.792540      -26.3109       26.3109       1043.50       1069.81    
  21  0.922976     -0.801523E-01  -2.66091       2.66091       1048.68       1051.34    
  22  0.323108      -1.12977      -37.5063       37.5063       1044.86       1082.36    
  23  0.740032     -0.301062      -9.99469       9.99469       1005.15       1015.14    
  24  0.606229     -0.500498      -16.6156       16.6156       1032.83       1049.44    
  25  0.813501     -0.206408      -6.85237       6.85237       1030.06       1036.92    
  26  0.457664     -0.781621      -25.9484       25.9484       992.393       1018.34    
  27  0.848286     -0.164537      -5.46233       5.46233       1057.86       1063.33    
  28  0.430827E-01  -3.14463      -104.396       104.396       1061.57       1165.97    
  29  0.215038      -1.53694      -51.0236       51.0236       1042.84       1093.86    
  30  0.955068     -0.459730E-01  -1.52622       1.52622       1031.58       1033.11    
  31  0.100248      -2.30011      -76.3594       76.3594       1065.84       1142.20    
  32  0.272794      -1.29904      -43.1257       43.1257       1039.39       1082.51    
  33  0.796201E-01  -2.53049      -84.0075       84.0075       1082.37       1166.38    
  34  0.143803      -1.93931      -64.3816       64.3816       1068.11       1132.49    
  35  0.151473      -1.88734      -62.6564       62.6564       1087.31       1149.97    
  36  0.212508      -1.54878      -51.4166       51.4166       1022.04       1073.46    
  37  0.570089     -0.561962      -18.6561       18.6561       1076.81       1095.46    
  38  0.811663     -0.208669      -6.92744       6.92744       1101.44       1108.37    
  39  0.652193E-01  -2.73000      -90.6310       90.6310       1095.87       1186.50    
  40  0.753919     -0.282470      -9.37748       9.37748       1051.56       1060.94    
  41  0.915721     -0.880434E-01  -2.92288       2.92288       1069.88       1072.80    
  42  0.689805     -0.371347      -12.3280       12.3280       1119.26       1131.59    
  43  0.296032      -1.21729      -40.4117       40.4117       1115.73       1156.14    
  44  0.685645     -0.377395      -12.5288       12.5288       1145.34       1157.87    
  45  0.931075     -0.714153E-01  -2.37086       2.37086       987.655       990.025    
  46  0.273544      -1.29629      -43.0345       43.0345       1147.76       1190.80    
  47  0.269804E-01  -3.61265      -119.933       119.933       1136.23       1256.16    
  48  0.684598     -0.378923      -12.5795       12.5795       1189.08       1201.66    
  49  0.724056     -0.322886      -10.7192       10.7192       1172.60       1183.32    
  50  0.655515     -0.422333      -14.0207       14.0207       1196.76       1210.78    
  51  0.338921E-01  -3.38457      -112.362       112.362       1157.00       1269.36    
  52  0.503484     -0.686204      -22.7807       22.7807       1211.72       1234.51    
  53  0.283419      -1.26083      -41.8573       41.8573       1186.97       1228.83    
  54  0.495421     -0.702347      -23.3166       23.3166       1210.27       1233.59    
  55  0.966701     -0.338659E-01  -1.12428       1.12428       1223.82       1224.95    
  56  0.491710     -0.709867      -23.5663       23.5663       1228.83       1252.39    
  57  0.456917     -0.783254      -26.0026       26.0026       1207.13       1233.14    
  58  0.970984E-01  -2.33203      -77.4191       77.4191       1226.27       1303.69    
  59  0.713520     -0.337545      -11.2059       11.2059       1240.71       1251.92    
  60  0.611795E-01  -2.79394      -92.7538       92.7538       1245.40       1338.15    
  61  0.122834      -2.09692      -69.6140       69.6140       1241.02       1310.64    
  62  0.686483     -0.376174      -12.4883       12.4883       1244.63       1257.12    
  63  0.525237     -0.643905      -21.3765       21.3765       1250.82       1272.20    
  64  0.365531      -1.00640      -33.4108       33.4108       1193.97       1227.38    
  65  0.647121     -0.435221      -14.4485       14.4485       1238.38       1252.83    
  66  0.284779      -1.25604      -41.6983       41.6983       1279.80       1321.50    
  67  0.871365     -0.137695      -4.57122       4.57122       1286.40       1290.97    
  68  0.901193     -0.104035      -3.45378       3.45378       1313.44       1316.89    
  69  0.405524     -0.902575      -29.9638       29.9638       1285.00       1314.97    
  70  0.392729     -0.934635      -31.0282       31.0282       1300.22       1331.25    
  71  0.526508     -0.641489      -21.2963       21.2963       1217.14       1238.44    
  72  0.562155     -0.575977      -19.1214       19.1214       1303.01       1322.13    
  73  0.819390     -0.199195      -6.61289       6.61289       1245.01       1251.63    
  74  0.810601     -0.209980      -6.97094       6.97094       935.621       942.591    
loop,thermsimp(1:2)       44   77.7868       22.3944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    406       1083.01        129.98          0.69         30.35          0.47          0.05        161.54
Just calling func    0   0        161.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1083.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.1982               439
loop is:       44
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    531.171      0.500000    
T0,tstep,tfreq (these do not change):             73
current SAtemp,tstepnext are:    33.1982               439
loop is:       45
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      439
neval,tstepnext:      405     439

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01  -1.34634       1.34634       933.395       934.741    
   2  0.700631     -0.355774      -11.8111       11.8111       935.621       947.432    
   3  0.900697     -0.104586      -3.47207       3.47207       928.402       931.874    
   4  0.217613      -1.52504      -50.6285       50.6285       943.308       993.937    
   5  0.247850      -1.39493      -46.3092       46.3092       931.134       977.444    
   6  0.910358     -0.939170E-01  -3.11787       3.11787       919.160       922.278    
   7  0.983752     -0.163817E-01 -0.543843      0.543843       987.655       988.198    
   8  0.161223      -1.82497      -60.5855       60.5855       978.997       1039.58    
   9  0.527720     -0.639190      -21.2199       21.2199       927.369       948.589    
  10  0.733734     -0.309609      -10.2785       10.2785       997.061       1007.34    
  11  0.406982     -0.898986      -29.8447       29.8447       948.302       978.146    
  12  0.731735     -0.312337      -10.3690       10.3690       1013.96       1024.33    
  13  0.840576E-01  -2.47625      -82.2070       82.2070       1005.15       1087.35    
  14  0.505764     -0.681685      -22.6307       22.6307       1013.25       1035.88    
  15  0.130210      -2.03861      -67.6781       67.6781       953.767       1021.45    
  16  0.565496     -0.570053      -18.9247       18.9247       992.393       1011.32    
  17  0.944307     -0.573044E-01  -1.90240       1.90240       974.423       976.325    
  18  0.131761      -2.02676      -67.2848       67.2848       1009.34       1076.63    
  19  0.133275      -2.01534      -66.9055       66.9055       985.165       1052.07    
  20  0.890936     -0.115482      -3.83379       3.83379       1031.58       1035.41    
  21  0.650633     -0.429809      -14.2689       14.2689       1030.06       1044.33    
  22  0.132428      -2.02172      -67.1173       67.1173       991.603       1058.72    
  23  0.731494     -0.312666      -10.3799       10.3799       1032.83       1043.21    
  24  0.171092      -1.76556      -58.6132       58.6132       1048.68       1107.29    
  25  0.257579      -1.35643      -45.0309       45.0309       1051.56       1096.60    
  26  0.324882      -1.12429      -37.3245       37.3245       1057.86       1095.19    
  27  0.526591     -0.641331      -21.2910       21.2910       1043.50       1064.79    
  28  0.282402E-01  -3.56701      -118.418       118.418       984.147       1102.56    
  29  0.983943     -0.161877E-01 -0.537401      0.537401       1069.88       1070.42    
  30  0.629559     -0.462735      -15.3620       15.3620       1022.04       1037.40    
  31  0.202469      -1.59717      -53.0231       53.0231       994.676       1047.70    
  32  0.737565     -0.304401      -10.1055       10.1055       1044.86       1054.96    
  33  0.388307     -0.945960      -31.4041       31.4041       1039.39       1070.79    
  34  0.585207E-01  -2.83837      -94.2288       94.2288       1042.84       1137.07    
  35  0.900578     -0.104719      -3.47648       3.47648       1076.81       1080.28    
  36  0.420335     -0.866702      -28.7729       28.7729       1101.44       1130.22    
  37  0.730143     -0.314515      -10.4413       10.4413       1119.26       1129.70    
  38  0.448331     -0.802224      -26.6324       26.6324       1068.11       1094.74    
  39  0.344846      -1.06466      -35.3447       35.3447       1065.84       1101.18    
  40  0.854608     -0.157113      -5.21586       5.21586       1087.31       1092.53    
  41  0.537300     -0.621198      -20.6226       20.6226       1115.73       1136.35    
  42  0.164937      -1.80219      -59.8294       59.8294       1145.34       1205.17    
  43  0.595120E-01  -2.82158      -93.6712       93.6712       1061.57       1155.24    
  44  0.398267E-01  -3.22322      -107.005       107.005       1082.37       1189.37    
  45  0.183210      -1.69712      -56.3413       56.3413       1033.01       1089.35    
  46  0.184498      -1.69011      -56.1087       56.1087       1172.60       1228.71    
  47  0.306635      -1.18210      -39.2434       39.2434       1095.87       1135.12    
  48  0.868924     -0.140500      -4.66435       4.66435       1147.76       1152.43    
  49  0.841633     -0.172412      -5.72375       5.72375       1189.08       1194.80    
  50  0.988826     -0.112370E-01 -0.373047      0.373047       1196.76       1197.13    
  51  0.244835      -1.40717      -46.7155       46.7155       1223.82       1270.54    
  52  0.338105      -1.08440      -36.0001       36.0001       1193.97       1229.97    
  53  0.609151     -0.495689      -16.4560       16.4560       1186.97       1203.43    
  54  0.529733E-01  -2.93797      -97.5351       97.5351       1207.13       1304.67    
  55  0.319654      -1.14052      -37.8631       37.8631       1210.27       1248.14    
  56  0.997722     -0.228025E-02 -0.757000E-01  0.757000E-01   1211.72       1211.80    
  57  0.703037     -0.352346      -11.6972       11.6972       1217.14       1228.84    
  58  0.794182E-01  -2.53303      -84.0919       84.0919       1245.01       1329.10    
  59  0.286060      -1.25155      -41.5492       41.5492       1240.71       1282.26    
  60  0.416234     -0.876507      -29.0984       29.0984       1228.83       1257.92    
  61  0.645642     -0.437510      -14.5245       14.5245       1238.38       1252.91    
  62  0.125731      -2.07361      -68.8400       68.8400       1136.23       1205.07    
  63  0.929125     -0.735122E-01  -2.44047       2.44047       1244.63       1247.07    
  64  0.281203E-01  -3.57126      -118.559       118.559       1157.00       1275.56    
  65  0.726728     -0.319203      -10.5969       10.5969       1250.82       1261.42    
  66  0.983013     -0.171328E-01 -0.568779      0.568779       1286.40       1286.97    
  67  0.469835     -0.755373      -25.0770       25.0770       1226.27       1251.35    
  68  0.292002      -1.23099      -40.8667       40.8667       1241.02       1281.89    
  69  0.866442     -0.143360      -4.75928       4.75928       1285.00       1289.76    
  70  0.507493     -0.678272      -22.5174       22.5174       1313.44       1335.96    
  71  0.132034      -2.02470      -67.2162       67.2162       1279.80       1347.02    
  72  0.614319     -0.487242      -16.1755       16.1755       1303.01       1319.18    
  73  0.461601     -0.773054      -25.6640       25.6640       1300.22       1325.89    
