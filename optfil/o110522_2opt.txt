nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    3211.28      0.500000    
Tfreq:   63
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    3211.28      0.500000    
Tfreq:   63
 Estimating   63 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2      10704.28          4.24          1.09         22.93          0.48          0.03         28.78
iter,obj,time:      3      10689.65          0.88          1.10         22.98          0.30          0.04         25.31
iter,obj,time:      4      10689.15          0.90          1.11         22.95          0.52          0.04         25.52
iter,obj,time:      5      11175.04          0.89          1.11         23.07          0.50          0.04         25.61
iter,obj,time:      6      10864.85          0.90          1.11         22.96          0.31          0.04         25.32
iter,obj,time:      7      10492.02          0.89          1.11         22.98          0.44          0.04         25.46
iter,obj,time:      8      10586.11          0.89          1.10         22.95          0.38          0.04         25.36
iter,obj,time:      9      10758.18          0.89          1.11         22.98          0.36          0.05         25.38
iter,obj,time:     10      10625.72          0.88          1.10         22.95          0.38          0.04         25.35
iter,obj,time:     11      10933.46          0.89          1.10         23.02          0.31          0.04         25.36
iter,obj,time:     12      10526.90          0.90          1.10         22.95          0.41          0.04         25.40
iter,obj,time:     13      10730.95          0.90          1.11         22.94          0.35          0.03         25.33
iter,obj,time:     14       9962.25          0.88          1.11         22.94          0.48          0.04         25.45
iter,obj,time:     15      10656.37          0.90          1.11         22.96          0.34          0.04         25.35
iter,obj,time:     16      10526.73          0.89          1.11         22.97          0.45          0.04         25.45
iter,obj,time:     17      10150.27          0.88          1.10         22.98          0.45          0.03         25.45
iter,obj,time:     18      10669.96          0.89          1.10         23.02          0.33          0.04         25.38
iter,obj,time:     19      10751.46          0.91          1.10         23.04          0.30          0.04         25.39
iter,obj,time:     20      10691.83          0.90          1.11         23.04          0.28          0.04         25.37
iter,obj,time:     21      10667.88          0.89          1.10         23.09          0.34          0.04         25.46
iter,obj,time:     22      10704.28          0.89          1.10         23.05          0.62          0.04         25.71
iter,obj,time:     23      10694.23          0.89          1.11         23.03          0.30          0.05         25.38
iter,obj,time:     24      10743.65          0.89          1.11         23.04          0.31          0.04         25.39
iter,obj,time:     25       9982.79          0.89          1.11         23.02          0.25          0.03         25.30
iter,obj,time:     26      14204.34          0.90          1.11         23.02          0.46          0.04         25.52
iter,obj,time:     27       9848.91          0.89          1.11         23.00          0.30          0.04         25.34
iter,obj,time:     28      11057.71          0.91          1.10         23.06          0.40          0.04         25.51
iter,obj,time:     29      12448.43          0.90          1.10         23.01          0.61          0.04         25.66
iter,obj,time:     30      10368.77          0.87          1.10         23.03          0.39          0.04         25.43
iter,obj,time:     31      14984.75          0.89          1.11         23.05          0.41          0.04         25.50
iter,obj,time:     32      10804.93          0.89          1.10         23.04          0.30          0.03         25.37
iter,obj,time:     33      10991.21          0.90          1.11         23.05          0.29          0.04         25.38
iter,obj,time:     34      10421.91          0.89          1.11         23.02          0.33          0.04         25.38
iter,obj,time:     35      10584.00          0.90          1.11         23.01          0.38          0.04         25.44
iter,obj,time:     36      11294.82          0.89          1.10         23.01          0.34          0.04         25.38
iter,obj,time:     37      10377.10          0.89          1.11         23.00          0.36          0.04         25.40
iter,obj,time:     38      10566.30          0.90          1.10         23.01          0.42          0.04         25.47
iter,obj,time:     39      10790.73          0.90          1.12         23.02          0.25          0.04         25.32
iter,obj,time:     40      10644.35          0.89          1.10         23.05          0.38          0.04         25.46
iter,obj,time:     41      11384.31          0.89          1.10         23.01          0.30          0.05         25.34
iter,obj,time:     42      10728.02          0.89          1.10         23.04          0.34          0.04         25.41
iter,obj,time:     43      10745.13          0.89          1.10         23.02          0.27          0.04         25.31
iter,obj,time:     44      11009.22          0.89          1.10         23.06          0.51          0.04         25.60
iter,obj,time:     45      10936.33          0.89          1.11         23.05          0.50          0.04         25.59
iter,obj,time:     46      10000.22          0.90          1.10         23.04          0.29          0.04         25.37
iter,obj,time:     47      11056.28          0.89          1.12         23.02          0.36          0.04         25.42
iter,obj,time:     48      10934.33          0.89          1.11         23.02          0.26          0.04         25.32
iter,obj,time:     49      10759.69          0.89          1.11         23.04          0.34          0.04         25.42
iter,obj,time:     50      10952.80          0.89          1.11         23.02          0.33          0.04         25.38
iter,obj,time:     51      10596.75          0.89          1.09         23.09          0.36          0.04         25.48
iter,obj,time:     52      10632.77          0.90          1.09         23.06          0.30          0.04         25.39
iter,obj,time:     53      10945.30          0.89          1.11         23.03          0.59          0.04         25.66
iter,obj,time:     54      10748.38          0.89          1.11         23.01          0.49          0.04         25.54
iter,obj,time:     55      10999.66          0.89          1.11         23.05          0.24          0.05         25.34
iter,obj,time:     56      10683.43          0.89          1.09         23.09          0.23          0.03         25.34
iter,obj,time:     57      10673.52          0.90          1.09         23.06          0.20          0.04         25.30
iter,obj,time:     58      10888.50          0.90          1.10         23.01          0.38          0.04         25.43
iter,obj,time:     59      10722.72          0.90          1.11         22.99          0.36          0.04         25.40
iter,obj,time:     60      11008.76          0.90          1.10         22.96          0.39          0.04         25.39
iter,obj,time:     61      10780.54          0.89          1.09         23.04          0.41          0.04         25.47
iter,obj,time:     62      10771.98          0.88          1.09         22.93          0.47          0.05         25.42
iter,obj,time:     63      10785.92          0.89          1.11         23.00          0.34          0.04         25.38
iter,obj,time:     64      10723.18          0.89          1.10         23.00          0.37          0.04         25.40
iter,obj,time:     65      10976.80          0.90          1.10         22.97          0.30          0.03         25.30

    1    10704.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    2    10690.        2.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    3    10689.        3.842     -1.948      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    4    11175.        3.842    -0.9479      2.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    5    10865.        3.842    -0.9479      3.341     -100.0    -0.7376    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    6    10492.        3.842    -0.9479      3.341     -100.0     0.2624    
                      -1.788      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    7    10586.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      1.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    8    10758.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      1.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    9    10626.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      0.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   10    10933.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       0.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   11    10527.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000    -0.9000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   12    10731.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                     -0.5000      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   13    9962.2        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500     0.1298E+05 0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   14    10656.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1877E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   15    10527.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -1694.     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   16    10150.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -5080.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   17    10670.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -1.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   18    10751.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000      0.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   19    10692.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -2.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   20    10668.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -1.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   21    10704.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -9.595     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   22    10694.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -1.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   23    10744.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.4951    -0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   24    9982.8        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02 0.4069      0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   25    14204.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000     0.4485    
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   26    9848.9        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                      0.4166    -0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   27    11058.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01 0.3552     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   28    12448.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.5367    -0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   29    10369.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01 0.3090     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   30    14985.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5575    

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   31    10805.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                      0.2461     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   32    10991.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539      0.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   33    10422.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.6780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   34    10584.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.5362    
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   35    11295.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01 0.4702    -0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   36    10377.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01 0.4276    -0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   37    10566.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01 0.4763    -0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   38    10791.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01 0.4348    
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   39    10644.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                      0.4280     0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   40    11384.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.5785    -0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   41    10728.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01 0.7372     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   42    10745.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628      0.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   43    11009.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                      0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   44    10936.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000      0.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   45    10000.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      0.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   46    11056.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000      0.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   47    10934.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.600      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   48    10760.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.700     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   49    10953.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200      0.000     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   50    10597.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       1.500      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   51    10633.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      1.500      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   52    10945.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.500      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   53    10748.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      9.400     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   54    11000.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900      0.000    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   55    10683.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      1.500      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   56    10674.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      1.500      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   57    10888.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.700      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   58    10723.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.500    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   59    11009.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                       0.000     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   60    10781.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      1.500      0.000      9.400    
                       8.800     -5000.     -2.000    

   61    10772.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      1.500      9.400    
                       8.800     -5000.     -2.000    

   62    10786.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.900    
                       8.800     -5000.     -2.000    

   63    10723.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       9.300     -5000.     -2.000    

   64    10977.        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800      0.000     -2.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          64          64

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        1
neval is:       64


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       64     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -4739.58       4739.58       10704.3       15443.9    
   2  0.709707     -0.342904      -1101.16       1101.16       10689.6       11790.8    
   3  0.151889      -1.88460      -6051.99       6051.99       10689.1       16741.1    
   4  0.456170E-01  -3.08747      -9914.76       9914.76       11175.0       21089.8    
   5  0.882557     -0.124932      -401.191       401.191       10864.8       11266.0    
   6  0.711292     -0.340672      -1093.99       1093.99       10492.0       11586.0    
   7  0.241669      -1.42019      -4560.63       4560.63       10586.1       15146.7    
   8  0.682871     -0.381450      -1224.94       1224.94       10758.2       11983.1    
   9  0.500657     -0.691834      -2221.68       2221.68       10625.7       12847.4    
  10  0.494633     -0.703939      -2260.55       2260.55       10933.5       13194.0    
  11  0.437126     -0.827535      -2657.45       2657.45       10526.9       13184.3    
  12  0.462981     -0.770069      -2472.91       2472.91       10731.0       13203.9    
  13  0.988878     -0.111840E-01  -35.9150       35.9150       9962.25       9998.16    
  14  0.878158     -0.129929      -417.239       417.239       10656.4       11073.6    
  15  0.825605     -0.191638      -615.405       615.405       10526.7       11142.1    
  16  0.966665     -0.339033E-01  -108.873       108.873       10150.3       10259.1    
  17  0.340930      -1.07608      -3455.59       3455.59       10670.0       14125.5    
  18  0.288920      -1.24161      -3987.15       3987.15       10751.5       14738.6    
  19  0.442843     -0.814539      -2615.72       2615.72       10691.8       13307.5    
  20  0.878635     -0.129386      -415.494       415.494       10667.9       11083.4    
  21  0.198777E-01  -3.91816      -12582.3       12582.3       10704.3       23286.6    
  22  0.315829      -1.15255      -3701.17       3701.17       10694.2       14395.4    
  23  0.208690      -1.56690      -5031.78       5031.78       10743.7       15775.4    
  24  0.849393     -0.163234      -524.190       524.190       9982.79       10507.0    
  25  0.945818     -0.557056E-01  -178.886       178.886       14204.3       14383.2    
  26  0.567839     -0.565917      -1817.32       1817.32       9848.91       11666.2    
  27  0.718388     -0.330745      -1062.12       1062.12       11057.7       12119.8    
  28  0.115406      -2.15930      -6934.12       6934.12       12448.4       19382.5    
  29  0.659869E-01  -2.71830      -8729.23       8729.23       10368.8       19098.0    
  30  0.171393      -1.76380      -5664.05       5664.05       14984.7       20648.8    
  31  0.161953      -1.82045      -5845.99       5845.99       10804.9       16650.9    
  32  0.455406     -0.786566      -2525.89       2525.89       10991.2       13517.1    
  33  0.788693     -0.237378      -762.287       762.287       10421.9       11184.2    
  34  0.157754      -1.84672      -5930.34       5930.34       10584.0       16514.3    
  35  0.126279      -2.06926      -6644.98       6644.98       11294.8       17939.8    
  36  0.646962     -0.435467      -1398.41       1398.41       10377.1       11775.5    
  37  0.730769     -0.313658      -1007.24       1007.24       10566.3       11573.5    
  38  0.443446E-01  -3.11577      -10005.6       10005.6       10790.7       20796.3    
  39  0.219048      -1.51847      -4876.22       4876.22       10644.3       15520.6    
  40  0.311223E-01  -3.46983      -11142.6       11142.6       11384.3       22526.9    
  41  0.864417     -0.145700      -467.885       467.885       10728.0       11195.9    
  42  0.372606     -0.987233      -3170.28       3170.28       10745.1       13915.4    
  43  0.599250E-01  -2.81466      -9038.68       9038.68       11009.2       20047.9    
  44  0.250528      -1.38418      -4445.00       4445.00       10936.3       15381.3    
  45  0.404968E-01  -3.20653      -10297.1       10297.1       10000.2       20297.3    
  46  0.792822     -0.232156      -745.519       745.519       11056.3       11801.8    
  47  0.826691     -0.190324      -611.184       611.184       10934.3       11545.5    
  48  0.258424      -1.35316      -4345.37       4345.37       10759.7       15105.1    
  49  0.713620     -0.337405      -1083.50       1083.50       10952.8       12036.3    
  50  0.936186     -0.659413E-01  -211.756       211.756       10596.7       10808.5    
  51  0.655367E-01  -2.72514      -8751.21       8751.21       10632.8       19384.0    
  52  0.178790      -1.72154      -5528.37       5528.37       10945.3       16473.7    
  53  0.110644E-01  -4.50403      -14463.7       14463.7       10748.4       25212.1    
  54  0.459577     -0.777448      -2496.61       2496.61       10999.7       13496.3    
  55  0.210706      -1.55729      -5000.91       5000.91       10683.4       15684.3    
  56  0.667378     -0.404399      -1298.64       1298.64       10673.5       11972.2    
  57  0.787749     -0.238575      -766.133       766.133       10888.5       11654.6    
  58  0.774339E-01  -2.55833      -8215.52       8215.52       10722.7       18938.2    
  59  0.154999      -1.86434      -5986.92       5986.92       11008.8       16995.7    
  60  0.510712     -0.671950      -2157.82       2157.82       10780.5       12938.4    
  61  0.628107     -0.465044      -1493.39       1493.39       10772.0       12265.4    
  62  0.850273     -0.162197      -520.862       520.862       10785.9       11306.8    
  63  0.355976      -1.03289      -3316.91       3316.91       10723.2       14040.1    
  64  0.531318     -0.632394      -2030.80       2030.80       10976.8       13007.6    
loop,thermsimp(1:2)        1   4739.58       1101.16    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     66      10881.41          0.88          1.11         23.00          0.52          0.04         25.55
Just calling func    0   0         25.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  10881.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        1
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        2
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       65     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -3346.30       3346.30       9962.25       13308.5    
   2  0.440787     -0.819193      -2630.66       2630.66       10150.3       12780.9    
   3  0.685789     -0.377185      -1211.25       1211.25       9982.79       11194.0    
   4  0.673104     -0.395856      -1271.21       1271.21       10596.7       11868.0    
   5  0.655536     -0.422301      -1356.13       1356.13       10656.4       12012.5    
   6  0.422838     -0.860766      -2764.16       2764.16       10667.9       13432.0    
   7  0.300870      -1.20108      -3857.00       3857.00       10526.7       14383.7    
   8  0.776987     -0.252331      -810.307       810.307       10421.9       11232.2    
   9  0.170551      -1.76872      -5679.86       5679.86       10728.0       16407.9    
  10  0.587497     -0.531884      -1708.03       1708.03       10864.8       12572.9    
  11  0.250425      -1.38459      -4446.33       4446.33       10785.9       15232.2    
  12  0.776362E-01  -2.55572      -8207.15       8207.15       10934.3       19141.5    
  13  0.766647     -0.265729      -853.331       853.331       10566.3       11419.6    
  14  0.480193     -0.733568      -2355.70       2355.70       10492.0       12847.7    
  15  0.434643     -0.833231      -2675.74       2675.74       10888.5       13564.2    
  16  0.815924E-01  -2.50602      -8047.54       8047.54       9848.91       17896.5    
  17  0.724257E-01  -2.62519      -8430.24       8430.24       10377.1       18807.3    
  18  0.573795     -0.555483      -1783.81       1783.81       10689.6       12473.5    
  19  0.196096      -1.62915      -5231.66       5231.66       11056.3       16287.9    
  20  0.240673      -1.42432      -4573.88       4573.88       10673.5       15247.4    
  21  0.194228      -1.63872      -5262.41       5262.41       10758.2       16020.6    
  22  0.236387      -1.44229      -4631.59       4631.59       10952.8       15584.4    
  23  0.261662      -1.34070      -4305.37       4305.37       11057.7       15363.1    
  24  0.146321      -1.92195      -6171.94       6171.94       10772.0       16943.9    
  25  0.169637      -1.77410      -5697.13       5697.13       10625.7       16322.9    
  26  0.886717     -0.120229      -386.090       386.090       10780.5       11166.6    
  27  0.253412      -1.37274      -4408.26       4408.26       10976.8       15385.1    
  28  0.470820     -0.753279      -2418.99       2418.99       10526.9       12945.9    
  29  0.329871      -1.10905      -3561.49       3561.49       10933.5       14495.0    
  30  0.726784     -0.319126      -1024.80       1024.80       10731.0       11755.8    
  31  0.612351     -0.490450      -1574.98       1574.98       10691.8       12266.8    
  32  0.146573      -1.92023      -6166.41       6166.41       10999.7       17166.1    
  33  0.812633     -0.207476      -666.263       666.263       10991.2       11657.5    
  34  0.486789     -0.719925      -2311.88       2311.88       10745.1       13057.0    
  35  0.653508     -0.425400      -1366.08       1366.08       10723.2       12089.3    
  36  0.180127      -1.71409      -5504.44       5504.44       10670.0       16174.4    
  37  0.155218      -1.86292      -5982.38       5982.38       14204.3       20186.7    
  38  0.830615     -0.185589      -595.978       595.978       10694.2       11290.2    
  39  0.728345     -0.316980      -1017.91       1017.91       10751.5       11769.4    
  40  0.262318      -1.33820      -4297.33       4297.33       10759.7       15057.0    
  41  0.234222      -1.45148      -4661.13       4661.13       10586.1       15247.2    
  42  0.250201      -1.38549      -4449.21       4449.21       10936.3       15385.5    
  43  0.898433     -0.107103      -343.939       343.939       10704.3       11048.2    
  44  0.580277     -0.544250      -1747.74       1747.74       10644.3       12392.1    
  45  0.823617     -0.194050      -623.148       623.148       10683.4       11306.6    
  46  0.820676     -0.197627      -634.636       634.636       10743.7       11378.3    
  47  0.502494     -0.688171      -2209.91       2209.91       10945.3       13155.2    
  48  0.751016     -0.286329      -919.483       919.483       10584.0       11503.5    
  49  0.360461      -1.02037      -3276.70       3276.70       10804.9       14081.6    
  50  0.948712     -0.526497E-01  -169.073       169.073       10689.1       10858.2    
  51  0.452918     -0.792045      -2543.48       2543.48       11008.8       13552.2    
  52  0.182886      -1.69889      -5455.63       5455.63       11294.8       16750.5    
  53  0.986780     -0.133085E-01  -42.7375       42.7375       10722.7       10765.5    
  54  0.720276     -0.328121      -1053.69       1053.69       10368.8       11422.5    
  55  0.999574     -0.426396E-03  -1.36928       1.36928       12448.4       12449.8    
  56  0.573447     -0.556089      -1785.76       1785.76       10632.8       12418.5    
  57  0.441160E-01  -3.12093      -10022.2       10022.2       11009.2       21031.4    
  58  0.596470     -0.516726      -1659.35       1659.35       10000.2       11659.6    
  59  0.561679E-01  -2.87941      -9246.60       9246.60       14984.7       24231.3    
  60  0.664610     -0.408554      -1311.98       1311.98       10790.7       12102.7    
  61  0.875363     -0.133117      -427.475       427.475       11175.0       11602.5    
  62  0.969943     -0.305184E-01  -98.0031       98.0031       11384.3       11482.3    
  63  0.692714     -0.367138      -1178.98       1178.98       10704.3       11883.3    
  64  0.107969      -2.22591      -7148.03       7148.03       10881.4       18029.4    
loop,thermsimp(1:2)        2   3346.30       2630.66    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       9716.00          0.88          1.10         23.06          0.46          0.05         25.55
Just calling func    0   0         25.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68      11019.33          0.89          1.10         22.96          0.41          0.04         25.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9716.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        2
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        3
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       67     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -5730.21       5730.21       10722.7       16452.9    
   2  0.274399      -1.29317      -4152.74       4152.74       10689.1       14841.9    
   3  0.597410E-01  -2.81774      -9048.55       9048.55       10704.3       19752.8    
   4  0.283115E-01  -3.56449      -11446.6       11446.6       10780.5       22227.1    
   5  0.901069     -0.104174      -334.532       334.532       9982.79       10317.3    
   6  0.717939     -0.331371      -1064.13       1064.13       10421.9       11486.0    
   7  0.294866      -1.22123      -3921.73       3921.73       10694.2       14616.0    
   8  0.935651     -0.665127E-01  -213.591       213.591       10683.4       10897.0    
   9  0.314362      -1.15721      -3716.13       3716.13       10743.7       14459.8    
  10  0.807729     -0.213529      -685.702       685.702       10566.3       11252.0    
  11  0.757191     -0.278140      -893.186       893.186       10368.8       11262.0    
  12  0.508654     -0.675987      -2170.79       2170.79       11384.3       13555.1    
  13  0.722060     -0.325647      -1045.74       1045.74       10584.0       11629.7    
  14  0.424032     -0.857947      -2755.11       2755.11       11175.0       13930.2    
  15  0.786154     -0.240602      -772.643       772.643       10991.2       11763.9    
  16  0.399894     -0.916557      -2943.32       2943.32       10000.2       12943.5    
  17  0.757416     -0.277843      -892.234       892.234       10731.0       11623.2    
  18  0.637270     -0.450563      -1446.88       1446.88       10751.5       12198.3    
  19  0.586055     -0.534342      -1715.92       1715.92       10596.7       12312.7    
  20  0.821724     -0.196351      -630.539       630.539       10704.3       11334.8    
  21  0.921558     -0.816897E-01  -262.329       262.329       10656.4       10918.7    
  22  0.985596     -0.145083E-01  -46.5904       46.5904       10723.2       10769.8    
  23  0.257194      -1.35793      -4360.68       4360.68       10790.7       15151.4    
  24  0.921438E-01  -2.38440      -7657.00       7657.00       10691.8       18348.8    
  25  0.114653      -2.16584      -6955.14       6955.14       10644.3       17599.5    
  26  0.379827     -0.968040      -3108.65       3108.65       10632.8       13741.4    
  27  0.541451     -0.613503      -1970.13       1970.13       12448.4       14418.6    
  28  0.544274     -0.608302      -1953.43       1953.43       10689.6       12643.1    
  29  0.934365     -0.678883E-01  -218.009       218.009       10864.8       11082.9    
  30  0.266419E-01  -3.62527      -11641.8       11641.8       10150.3       21792.0    
  31  0.919572     -0.838466E-01  -269.255       269.255       10492.0       10761.3    
  32  0.864639     -0.145444      -467.061       467.061       10526.9       10994.0    
  33  0.341156      -1.07542      -3453.47       3453.47       10745.1       14198.6    
  34  0.803175     -0.219182      -703.857       703.857       10945.3       11649.2    
  35  0.699424     -0.357498      -1148.03       1148.03       9962.25       11110.3    
  36  0.223868E-01  -3.79928      -12200.6       12200.6       10667.9       22868.5    
  37  0.605689     -0.501389      -1610.10       1610.10       11008.8       12618.9    
  38  0.312349      -1.16363      -3736.76       3736.76       10888.5       14625.3    
  39  0.437501     -0.826675      -2654.69       2654.69       10804.9       13459.6    
  40  0.303330      -1.19293      -3830.85       3830.85       10526.7       14357.6    
  41  0.129735      -2.04226      -6558.27       6558.27       10933.5       17491.7    
  42  0.954352     -0.467224E-01  -150.039       150.039       10759.7       10909.7    
  43  0.519807     -0.654297      -2101.13       2101.13       10785.9       12887.1    
  44  0.950560     -0.507036E-01  -162.824       162.824       10586.1       10748.9    
  45  0.443941     -0.812064      -2607.77       2607.77       10673.5       13281.3    
  46  0.911446     -0.927229E-01  -297.760       297.760       11057.7       11355.5    
  47  0.782475     -0.245293      -787.705       787.705       10976.8       11764.5    
  48  0.412534     -0.885438      -2843.39       2843.39       10936.3       13779.7    
  49  0.843850     -0.169780      -545.213       545.213       10952.8       11498.0    
  50  0.149432      -1.90091      -6104.38       6104.38       10758.2       16862.6    
  51  0.292747      -1.22845      -3944.89       3944.89       10670.0       14614.8    
  52  0.579908E-02  -5.15006      -16538.3       16538.3       11056.3       27594.6    
  53  0.164431      -1.80526      -5797.21       5797.21       10625.7       16422.9    
  54  0.963795     -0.368765E-01  -118.421       118.421       10728.0       10846.4    
  55  0.536638     -0.622432      -1998.80       1998.80       11294.8       13293.6    
  56  0.231620      -1.46266      -4697.01       4697.01       10772.0       15469.0    
  57  0.452632E-01  -3.09526      -9939.76       9939.76       10999.7       20939.4    
  58  0.241294      -1.42174      -4565.61       4565.61       9848.91       14414.5    
  59  0.757653     -0.277529      -891.225       891.225       10881.4       11772.6    
  60  0.504715     -0.683762      -2195.75       2195.75       10377.1       12572.9    
  61  0.878562     -0.129469      -415.763       415.763       10934.3       11350.1    
  62  0.874452     -0.134158      -430.820       430.820       14204.3       14635.2    
  63  0.370953     -0.991680      -3184.57       3184.57       11009.2       14193.8    
  64  0.757717     -0.277446      -890.956       890.956       9716.00       10607.0    
loop,thermsimp(1:2)        3   5730.21       4152.74    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69      10382.11          0.89          1.09         23.04          0.28          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70      10208.41          0.91          1.09         22.99          0.46          0.04         25.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10208.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        3
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        4
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       69     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -398.719       398.719       9982.79       10381.5    
   2  0.114178      -2.16999      -6968.47       6968.47       9716.00       16684.5    
   3  0.217017      -1.52778      -4906.13       4906.13       10586.1       15492.2    
   4  0.138317      -1.97821      -6352.58       6352.58       10492.0       16844.6    
   5  0.832728     -0.183048      -587.819       587.819       10723.2       11311.0    
   6  0.390825     -0.939496      -3016.99       3016.99       10728.0       13745.0    
   7  0.283633      -1.26007      -4046.46       4046.46       10683.4       14729.9    
   8  0.725809     -0.320468      -1029.11       1029.11       10759.7       11788.8    
   9  0.506121     -0.680979      -2186.82       2186.82       10656.4       12843.2    
  10  0.216234      -1.53139      -4917.74       4917.74       10526.9       15444.6    
  11  0.637942     -0.449509      -1443.50       1443.50       10864.8       12308.3    
  12  0.536707     -0.622302      -1998.39       1998.39       9962.25       11960.6    
  13  0.231844      -1.46169      -4693.91       4693.91       10566.3       15260.2    
  14  0.491379     -0.710540      -2281.75       2281.75       10368.8       12650.5    
  15  0.825774     -0.191434      -614.750       614.750       10704.3       11319.0    
  16  0.671593     -0.398102      -1278.42       1278.42       10934.3       12212.7    
  17  0.549103     -0.599470      -1925.07       1925.07       11057.7       12982.8    
  18  0.659287     -0.416597      -1337.81       1337.81       10421.9       11759.7    
  19  0.205012      -1.58469      -5088.88       5088.88       10952.8       16041.7    
  20  0.400541E-02  -5.52011      -17726.6       17726.6       10731.0       28457.6    
  21  0.750831     -0.286575      -920.273       920.273       10584.0       11504.3    
  22  0.619921     -0.478162      -1535.52       1535.52       10945.3       12480.8    
  23  0.435226     -0.831889      -2671.43       2671.43       10991.2       13662.6    
  24  0.460974     -0.774414      -2486.86       2486.86       10976.8       13463.7    
  25  0.891582E-01  -2.41734      -7762.77       7762.77       10881.4       18644.2    
  26  0.589618E-01  -2.83087      -9090.71       9090.71       10751.5       19842.2    
  27  0.541391     -0.613613      -1970.49       1970.49       10596.7       12567.2    
  28  0.545108E-01  -2.90936      -9342.77       9342.77       10377.1       19719.9    
  29  0.744722     -0.294744      -946.507       946.507       11008.8       11955.3    
  30  0.712477     -0.339008      -1088.65       1088.65       10689.6       11778.3    
  31  0.563836     -0.572992      -1840.04       1840.04       10785.9       12626.0    
  32  0.161455      -1.82353      -5855.86       5855.86       10000.2       15856.1    
  33  0.640738     -0.445135      -1429.46       1429.46       10673.5       12103.0    
  34  0.157494      -1.84837      -5935.63       5935.63       11294.8       17230.5    
  35  0.695323     -0.363378      -1166.91       1166.91       10804.9       11971.8    
  36  0.792798     -0.232186      -745.616       745.616       11384.3       12129.9    
  37  0.940634     -0.612017E-01  -196.536       196.536       10632.8       10829.3    
  38  0.750008     -0.287672      -923.796       923.796       10936.3       11860.1    
  39  0.298939E-01  -3.51010      -11271.9       11271.9       11175.0       22447.0    
  40  0.633510     -0.456480      -1465.89       1465.89       11009.2       12475.1    
  41  0.465723     -0.764164      -2453.95       2453.95       10745.1       13199.1    
  42  0.916259     -0.874560E-01  -280.846       280.846       10526.7       10807.6    
  43  0.451376     -0.795456      -2554.43       2554.43       9848.91       12403.3    
  44  0.414090     -0.881672      -2831.30       2831.30       12448.4       15279.7    
  45  0.273092      -1.29795      -4168.08       4168.08       10743.7       14911.7    
  46  0.361379      -1.01783      -3268.53       3268.53       10670.0       13938.5    
  47  0.548848     -0.599934      -1926.56       1926.56       10694.2       12620.8    
  48  0.832309     -0.183552      -589.438       589.438       10888.5       11477.9    
  49  0.673017     -0.395985      -1271.62       1271.62       14204.3       15476.0    
  50  0.692516     -0.367425      -1179.90       1179.90       10689.1       11869.1    
  51  0.354468E-01  -3.33972      -10724.8       10724.8       10790.7       21515.5    
  52  0.987850     -0.122240E-01  -39.2546       39.2546       10772.0       10811.2    
  53  0.659676     -0.416007      -1335.92       1335.92       10625.7       11961.6    
  54  0.276145      -1.28683      -4132.38       4132.38       10722.7       14855.1    
  55  0.426927     -0.851141      -2733.26       2733.26       10758.2       13491.4    
  56  0.221817      -1.50590      -4835.87       4835.87       10933.5       15769.3    
  57  0.911956     -0.921634E-01  -295.963       295.963       10644.3       10940.3    
  58  0.791973     -0.233228      -748.960       748.960       10691.8       11440.8    
  59  0.805447     -0.216358      -694.786       694.786       10704.3       11399.1    
  60  0.887840     -0.118963      -382.025       382.025       10999.7       11381.7    
  61  0.978176     -0.220657E-01  -70.8591       70.8591       10150.3       10221.1    
  62  0.539899     -0.616372      -1979.35       1979.35       10780.5       12759.9    
  63  0.313742      -1.15918      -3722.47       3722.47       10667.9       14390.4    
  64  0.355768      -1.03348      -3318.78       3318.78       10208.4       13527.2    
loop,thermsimp(1:2)        4   398.719       6968.47    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71      10568.95          0.88          1.10         23.02          0.31          0.04         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72      10259.51          0.90          1.10         23.01          0.27          0.05         25.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10259.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        4
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        5
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       71     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -103.814       103.814       10150.3       10254.1    
   2  0.384676     -0.955353      -3067.91       3067.91       9982.79       13050.7    
   3  0.472770     -0.749146      -2405.72       2405.72       10526.7       12932.4    
   4  0.131186      -2.03114      -6522.55       6522.55       10772.0       17294.5    
   5  0.387497     -0.948046      -3044.45       3044.45       10632.8       13677.2    
   6  0.474858     -0.744739      -2391.57       2391.57       10644.3       13035.9    
   7  0.654056     -0.424563      -1363.39       1363.39       10723.2       12086.6    
   8  0.375266     -0.980119      -3147.44       3147.44       10704.3       13851.7    
   9  0.605577     -0.501574      -1610.70       1610.70       10999.7       12610.4    
  10  0.485605     -0.722360      -2319.70       2319.70       10704.3       13024.0    
  11  0.503843     -0.685490      -2201.30       2201.30       10691.8       12893.1    
  12  0.374521     -0.982108      -3153.83       3153.83       10888.5       14042.3    
  13  0.955542E-01  -2.34806      -7540.29       7540.29       10584.0       18124.3    
  14  0.902567     -0.102512      -329.195       329.195       10421.9       10751.1    
  15  0.347215      -1.05781      -3396.93       3396.93       10689.6       14086.6    
  16  0.893138     -0.113014      -362.921       362.921       10759.7       11122.6    
  17  0.561145     -0.577776      -1855.40       1855.40       10936.3       12791.7    
  18  0.667287     -0.404536      -1299.08       1299.08       10689.1       11988.2    
  19  0.601102     -0.508991      -1634.51       1634.51       11008.8       12643.3    
  20  0.569928     -0.562245      -1805.53       1805.53       9962.25       11767.8    
  21  0.655926     -0.421708      -1354.22       1354.22       10625.7       11979.9    
  22  0.355892      -1.03313      -3317.66       3317.66       10804.9       14122.6    
  23  0.208013      -1.57015      -5042.21       5042.21       10673.5       15715.7    
  24  0.879772     -0.128093      -411.342       411.342       11384.3       11795.7    
  25  0.114206E-01  -4.47233      -14361.9       14361.9       10934.3       25296.3    
  26  0.950245     -0.510357E-01  -163.890       163.890       10864.8       11028.7    
  27  0.321268      -1.13548      -3646.35       3646.35       9848.91       13495.3    
  28  0.379005     -0.970207      -3115.61       3115.61       11009.2       14124.8    
  29  0.117960      -2.13741      -6863.84       6863.84       10945.3       17809.1    
  30  0.822558     -0.195337      -627.282       627.282       10596.7       11224.0    
  31  0.671085     -0.398860      -1280.85       1280.85       10694.2       11975.1    
  32  0.220279      -1.51286      -4858.22       4858.22       10785.9       15644.1    
  33  0.836335     -0.178727      -573.942       573.942       10368.8       10942.7    
  34  0.982442E-01  -2.32030      -7451.14       7451.14       10780.5       18231.7    
  35  0.912526     -0.915389E-01  -293.957       293.957       10656.4       10950.3    
  36  0.758802     -0.276015      -886.361       886.361       11057.7       11944.1    
  37  0.562651     -0.575096      -1846.80       1846.80       10745.1       12591.9    
  38  0.248142      -1.39375      -4475.74       4475.74       10976.8       15452.5    
  39  0.864881     -0.145163      -466.160       466.160       10758.2       11224.3    
  40  0.495151     -0.702893      -2257.19       2257.19       10208.4       12465.6    
  41  0.112352E-01  -4.48870      -14414.5       14414.5       10991.2       25405.7    
  42  0.745500     -0.293700      -943.153       943.153       10728.0       11671.2    
  43  0.405071     -0.903693      -2902.01       2902.01       10670.0       13572.0    
  44  0.617259     -0.482466      -1549.34       1549.34       10667.9       12217.2    
  45  0.992755     -0.727089E-02  -23.3489       23.3489       10683.4       10706.8    
  46  0.888739     -0.117952      -378.778       378.778       10722.7       11101.5    
  47  0.976701     -0.235748E-01  -75.7053       75.7053       10743.7       10819.4    
  48  0.461976     -0.772242      -2479.89       2479.89       10566.3       13046.2    
  49  0.150581      -1.89325      -6079.77       6079.77       12448.4       18528.2    
  50  0.726286E-01  -2.62240      -8421.26       8421.26       10526.9       18948.2    
  51  0.280837      -1.26998      -4078.27       4078.27       14204.3       18282.6    
  52  0.727959     -0.317510      -1019.61       1019.61       10586.1       11605.7    
  53  0.565225     -0.570532      -1832.14       1832.14       10933.5       12765.6    
  54  0.884775     -0.122422      -393.133       393.133       10000.2       10393.4    
  55  0.289837      -1.23844      -3976.98       3976.98       10952.8       14929.8    
  56  0.282389      -1.26447      -4060.57       4060.57       9716.00       13776.6    
  57  0.737455     -0.304550      -977.996       977.996       10492.0       11470.0    
  58  0.436668E-02  -5.43375      -17449.3       17449.3       11294.8       28744.1    
  59  0.809492     -0.211348      -678.699       678.699       10881.4       11560.1    
  60  0.957786E-01  -2.34572      -7532.76       7532.76       10377.1       17909.9    
  61  0.335750      -1.09139      -3504.76       3504.76       10751.5       14256.2    
  62  0.687327     -0.374945      -1204.05       1204.05       10790.7       11994.8    
  63  0.340103      -1.07851      -3463.39       3463.39       11175.0       14638.4    
  64  0.902520     -0.102564      -329.362       329.362       10259.5       10588.9    
loop,thermsimp(1:2)        5   103.814       3067.91    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73      10409.10          0.88          1.09         23.02          0.49          0.04         25.52
Just calling func    0   0         25.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74      10157.05          0.90          1.10         23.06          0.49          0.04         25.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10157.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        5
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        6
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       73     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -691.652       691.652       10150.3       10841.9    
   2  0.337878      -1.08507      -3484.47       3484.47       10000.2       13484.7    
   3  0.930612     -0.719127E-01  -230.932       230.932       10259.5       10490.4    
   4  0.843645     -0.170024      -545.995       545.995       10683.4       11229.4    
   5  0.757799     -0.277337      -890.607       890.607       10421.9       11312.5    
   6  0.627925     -0.465335      -1494.32       1494.32       10743.7       12238.0    
   7  0.412314     -0.885971      -2845.10       2845.10       10368.8       13213.9    
   8  0.282274      -1.26488      -4061.88       4061.88       10656.4       14718.2    
   9  0.426609E-01  -3.15447      -10129.9       10129.9       10864.8       20994.8    
  10  0.484876     -0.723862      -2324.53       2324.53       10722.7       13047.2    
  11  0.372210     -0.988296      -3173.70       3173.70       10759.7       13933.4    
  12  0.740507     -0.300421      -964.737       964.737       10596.7       11561.5    
  13  0.361519      -1.01744      -3267.29       3267.29       10758.2       14025.5    
  14  0.421034     -0.865042      -2777.90       2777.90       10492.0       13269.9    
  15  0.780595     -0.247699      -795.433       795.433       10881.4       11676.8    
  16  0.758410     -0.276531      -888.019       888.019       10586.1       11474.1    
  17  0.522921E-01  -2.95091      -9476.21       9476.21       10728.0       20204.2    
  18  0.609673     -0.494833      -1589.05       1589.05       9962.25       11551.3    
  19  0.204029      -1.58949      -5104.31       5104.31       11384.3       16488.6    
  20  0.516385     -0.660902      -2122.34       2122.34       11057.7       13180.1    
  21  0.323918      -1.12726      -3619.96       3619.96       10694.2       14314.2    
  22  0.671820     -0.397765      -1277.34       1277.34       10625.7       11903.1    
  23  0.850344     -0.162114      -520.593       520.593       10689.1       11209.7    
  24  0.515631     -0.662364      -2127.04       2127.04       10790.7       12917.8    
  25  0.919408     -0.840249E-01  -269.828       269.828       10723.2       10993.0    
  26  0.516519     -0.660643      -2121.51       2121.51       10667.9       12789.4    
  27  0.986900     -0.131869E-01  -42.3468       42.3468       10208.4       10250.8    
  28  0.127351      -2.06081      -6617.84       6617.84       10745.1       17363.0    
  29  0.775028E-01  -2.55744      -8212.67       8212.67       10999.7       19212.3    
  30  0.778307     -0.250634      -804.857       804.857       11008.8       11813.6    
  31  0.548570     -0.600441      -1928.19       1928.19       10933.5       12861.6    
  32  0.191672      -1.65197      -5304.94       5304.94       10936.3       16241.3    
  33  0.593733     -0.521326      -1674.13       1674.13       10691.8       12366.0    
  34  0.612853     -0.489631      -1572.34       1572.34       10526.7       12099.1    
  35  0.872749     -0.136107      -437.078       437.078       10704.3       11141.4    
  36  0.291105E-01  -3.53666      -11357.2       11357.2       10644.3       22001.6    
  37  0.310804      -1.16859      -3752.68       3752.68       10566.3       14319.0    
  38  0.238051      -1.43527      -4609.06       4609.06       9982.79       14591.9    
  39  0.600295     -0.510334      -1638.83       1638.83       9848.91       11487.7    
  40  0.856575     -0.154813      -497.149       497.149       10670.0       11167.1    
  41  0.127990      -2.05580      -6601.77       6601.77       10632.8       17234.5    
  42  0.390396E-01  -3.24318      -10414.8       10414.8       9716.00       20130.8    
  43  0.469298E-01  -3.05910      -9823.65       9823.65       10704.3       20527.9    
  44  0.170208      -1.77073      -5686.33       5686.33       10888.5       16574.8    
  45  0.457801     -0.781320      -2509.04       2509.04       10689.6       13198.7    
  46  0.451589     -0.794982      -2552.91       2552.91       10804.9       13357.8    
  47  0.601844     -0.507757      -1630.55       1630.55       11009.2       12639.8    
  48  0.923684     -0.793857E-01  -254.930       254.930       10751.5       11006.4    
  49  0.113154      -2.17901      -6997.40       6997.40       11175.0       18172.4    
  50  0.652894     -0.426340      -1369.10       1369.10       10952.8       12321.9    
  51  0.600010     -0.510809      -1640.35       1640.35       10976.8       12617.2    
  52  0.768679     -0.263082      -844.831       844.831       10785.9       11630.8    
  53  0.999310     -0.690144E-03  -2.21625       2.21625       10673.5       10675.7    
  54  0.798907     -0.224511      -720.968       720.968       10772.0       11492.9    
  55  0.246243      -1.40144      -4500.41       4500.41       10945.3       15445.7    
  56  0.798424     -0.225115      -722.910       722.910       10377.1       11100.0    
  57  0.120926      -2.11257      -6784.07       6784.07       10584.0       17368.1    
  58  0.771675     -0.259192      -832.339       832.339       10780.5       11612.9    
  59  0.670629     -0.399540      -1283.04       1283.04       14204.3       15487.4    
  60  0.127505      -2.05960      -6613.95       6613.95       12448.4       19062.4    
  61  0.375387     -0.979799      -3146.41       3146.41       10526.9       13673.3    
  62  0.572534E-01  -2.86027      -9185.13       9185.13       10934.3       20119.5    
  63  0.358654      -1.02540      -3292.84       3292.84       10991.2       14284.0    
  64  0.903087     -0.101937      -327.348       327.348       10157.0       10484.4    
loop,thermsimp(1:2)        6   691.652       3484.47    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75      10571.10          0.88          1.10         23.03          0.45          0.04         25.50
Just calling func    0   0         25.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     76      10756.17          0.89          1.10         23.03          0.27          0.04         25.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10571.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        6
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        7
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       75     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -6870.52       6870.52       10208.4       17078.9    
   2  0.421875     -0.863045      -2771.48       2771.48       10157.0       12928.5    
   3  0.700103     -0.356528      -1144.91       1144.91       10259.5       11404.4    
   4  0.209367      -1.56367      -5021.38       5021.38       10673.5       15694.9    
   5  0.117251      -2.14344      -6883.18       6883.18       10150.3       17033.5    
   6  0.898330     -0.107218      -344.306       344.306       10723.2       11067.5    
   7  0.209806      -1.56157      -5014.65       5014.65       10751.5       15766.1    
   8  0.917155     -0.864790E-01  -277.709       277.709       10377.1       10654.8    
   9  0.120514E-01  -4.41857      -14189.3       14189.3       10704.3       24893.6    
  10  0.189983      -1.66082      -5333.37       5333.37       10670.0       16003.3    
  11  0.257131      -1.35817      -4361.46       4361.46       10689.1       15050.6    
  12  0.913158E-01  -2.39343      -7685.99       7685.99       10683.4       18369.4    
  13  0.336531      -1.08906      -3497.29       3497.29       10421.9       13919.2    
  14  0.318351      -1.14460      -3675.64       3675.64       10586.1       14261.7    
  15  0.919606     -0.838101E-01  -269.138       269.138       9848.91       10118.1    
  16  0.719771E-01  -2.63141      -8450.20       8450.20       10772.0       19222.2    
  17  0.788730E-01  -2.53992      -8156.39       8156.39       9962.25       18118.6    
  18  0.905929     -0.987941E-01  -317.256       317.256       10596.7       10914.0    
  19  0.665501     -0.407215      -1307.68       1307.68       10780.5       12088.2    
  20  0.812159     -0.208059      -668.138       668.138       10785.9       11454.1    
  21  0.412726E-01  -3.18756      -10236.2       10236.2       10881.4       21117.6    
  22  0.256064      -1.36233      -4374.82       4374.82       11008.8       15383.6    
  23  0.277519      -1.28187      -4116.44       4116.44       10625.7       14742.2    
  24  0.279550      -1.27457      -4093.02       4093.02       10526.7       14619.7    
  25  0.857884     -0.153286      -492.246       492.246       10743.7       11235.9    
  26  0.205158      -1.58398      -5086.59       5086.59       10952.8       16039.4    
  27  0.482085     -0.729635      -2343.07       2343.07       10691.8       13034.9    
  28  0.494966E-01  -3.00585      -9652.64       9652.64       10976.8       20629.4    
  29  0.338791      -1.08237      -3475.81       3475.81       11009.2       14485.0    
  30  0.249491E-01  -3.69092      -11852.6       11852.6       10667.9       22520.5    
  31  0.480710     -0.732491      -2352.24       2352.24       10933.5       13285.7    
  32  0.908951E-01  -2.39805      -7700.82       7700.82       10790.7       18491.5    
  33  0.283223      -1.26152      -4051.11       4051.11       10722.7       14773.8    
  34  0.277734      -1.28109      -4113.95       4113.95       11057.7       15171.7    
  35  0.504407     -0.684372      -2197.71       2197.71       10689.6       12887.4    
  36  0.251881      -1.37880      -4427.71       4427.71       10368.8       14796.5    
  37  0.568193     -0.565294      -1815.32       1815.32       10492.0       12307.3    
  38  0.186135      -1.68128      -5399.07       5399.07       10804.9       16204.0    
  39  0.964582     -0.360604E-01  -115.800       115.800       10000.2       10116.0    
  40  0.493045     -0.707155      -2270.87       2270.87       10526.9       12797.8    
  41  0.477950     -0.738248      -2370.73       2370.73       10759.7       13130.4    
  42  0.114879      -2.16388      -6948.82       6948.82       10758.2       17707.0    
  43  0.324003      -1.12700      -3619.12       3619.12       10991.2       14610.3    
  44  0.720573     -0.327708      -1052.36       1052.36       10694.2       11746.6    
  45  0.934913     -0.673019E-01  -216.126       216.126       10566.3       10782.4    
  46  0.516467     -0.660745      -2121.84       2121.84       9982.79       12104.6    
  47  0.351513      -1.04551      -3357.42       3357.42       10656.4       14013.8    
  48  0.310221      -1.17047      -3758.72       3758.72       10945.3       14704.0    
  49  0.467571     -0.760204      -2441.23       2441.23       14204.3       16645.6    
  50  0.700644     -0.355756      -1142.43       1142.43       10936.3       12078.8    
  51  0.608579E-01  -2.79921      -8989.07       8989.07       11384.3       20373.4    
  52  0.360106      -1.02136      -3279.87       3279.87       10888.5       14168.4    
  53  0.355744      -1.03354      -3319.01       3319.01       10632.8       13951.8    
  54  0.356778      -1.03064      -3309.68       3309.68       10745.1       14054.8    
  55  0.209214      -1.56440      -5023.73       5023.73       10584.0       15607.7    
  56  0.513034     -0.667413      -2143.25       2143.25       11175.0       13318.3    
  57  0.131750      -2.02685      -6508.78       6508.78       12448.4       18957.2    
  58  0.860948     -0.149721      -480.796       480.796       10999.7       11480.5    
  59  0.245301      -1.40527      -4512.71       4512.71       10934.3       15447.0    
  60  0.411604     -0.887695      -2850.64       2850.64       9716.00       12566.6    
  61  0.444838     -0.810046      -2601.29       2601.29       10728.0       13329.3    
  62  0.173997      -1.74872      -5615.63       5615.63       10704.3       16319.9    
  63  0.616177     -0.484222      -1554.97       1554.97       10864.8       12419.8    
  64  0.794601     -0.229915      -738.323       738.323       10571.1       11309.4    
loop,thermsimp(1:2)        7   6870.52       2771.48    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77      10553.03          0.90          1.10         22.99          0.31          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78      10400.65          0.90          1.10         22.99          0.36          0.04         25.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10400.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        7
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        8
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       77     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -2307.85       2307.85       10000.2       12308.1    
   2  0.568497     -0.564760      -1813.61       1813.61       9848.91       11662.5    
   3  0.632037E-01  -2.76139      -8867.62       8867.62       10377.1       19244.7    
   4  0.184325      -1.69105      -5430.45       5430.45       10566.3       15996.8    
   5  0.949772     -0.515332E-01  -165.488       165.488       10596.7       10762.2    
   6  0.512179     -0.669081      -2148.61       2148.61       10723.2       12871.8    
   7  0.573767     -0.555532      -1783.97       1783.97       10743.7       12527.6    
   8  0.590189     -0.527312      -1693.35       1693.35       10571.1       12264.5    
   9  0.323917      -1.12727      -3619.98       3619.98       10259.5       13879.5    
  10  0.246420E-01  -3.70330      -11892.4       11892.4       10785.9       22678.3    
  11  0.923153E-01  -2.38255      -7651.03       7651.03       10999.7       18650.7    
  12  0.236043      -1.44374      -4636.27       4636.27       10694.2       15330.5    
  13  0.885388     -0.121730      -390.908       390.908       10936.3       11327.2    
  14  0.617726     -0.481710      -1546.91       1546.91       10780.5       12327.4    
  15  0.349992      -1.04985      -3371.35       3371.35       9982.79       13354.1    
  16  0.892028     -0.114257      -366.913       366.913       10492.0       10858.9    
  17  0.382423     -0.961227      -3086.77       3086.77       10864.8       13951.6    
  18  0.850527     -0.161899      -519.905       519.905       9716.00       10235.9    
  19  0.653461     -0.425472      -1366.31       1366.31       10526.9       11893.2    
  20  0.413959     -0.881988      -2832.31       2832.31       10689.6       13522.0    
  21  0.807813     -0.213424      -685.366       685.366       10157.0       10842.4    
  22  0.348045      -1.05542      -3389.27       3389.27       10691.8       14081.1    
  23  0.435267     -0.831795      -2671.13       2671.13       10759.7       13430.8    
  24  0.434284     -0.834056      -2678.39       2678.39       10933.5       13611.9    
  25  0.983564     -0.165728E-01  -53.2201       53.2201       11175.0       11228.3    
  26  0.545923     -0.605277      -1943.72       1943.72       10728.0       12671.7    
  27  0.227140      -1.48219      -4759.72       4759.72       10421.9       15181.6    
  28  0.965085     -0.355395E-01  -114.128       114.128       10632.8       10746.9    
  29  0.183882      -1.69346      -5438.18       5438.18       10656.4       16094.5    
  30  0.187300E-02  -6.28022      -20167.6       20167.6       10745.1       30912.7    
  31  0.428736     -0.846914      -2719.68       2719.68       10888.5       13608.2    
  32  0.459764     -0.777041      -2495.30       2495.30       10586.1       13081.4    
  33  0.914786     -0.890649E-01  -286.013       286.013       11009.2       11295.2    
  34  0.872236     -0.136696      -438.968       438.968       10991.2       11430.2    
  35  0.789367     -0.236524      -759.545       759.545       10526.7       11286.3    
  36  0.619233E-01  -2.78186      -8933.34       8933.34       10945.3       19878.6    
  37  0.138004E-01  -4.28306      -13754.1       13754.1       10625.7       24379.8    
  38  0.287035      -1.24815      -4008.16       4008.16       10722.7       14730.9    
  39  0.138758E-01  -4.27761      -13736.6       13736.6       10368.8       24105.4    
  40  0.593330     -0.522005      -1676.31       1676.31       10689.1       12365.5    
  41  0.399445     -0.917679      -2946.93       2946.93       11057.7       14004.6    
  42  0.982947     -0.172001E-01  -55.2346       55.2346       11008.8       11064.0    
  43  0.259534      -1.34887      -4331.59       4331.59       10934.3       15265.9    
  44  0.816592E-01  -2.50520      -8044.91       8044.91       10584.0       18628.9    
  45  0.166083      -1.79527      -5765.11       5765.11       10673.5       16438.6    
  46  0.967370     -0.331741E-01  -106.532       106.532       10751.5       10858.0    
  47  0.371024     -0.991488      -3183.95       3183.95       10670.0       13853.9    
  48  0.941964     -0.597885E-01  -191.998       191.998       10952.8       11144.8    
  49  0.130219      -2.03854      -6546.31       6546.31       10804.9       17351.2    
  50  0.599455     -0.511734      -1643.32       1643.32       10704.3       12347.6    
  51  0.519323     -0.655230      -2104.13       2104.13       14204.3       16308.5    
  52  0.829175     -0.187324      -601.552       601.552       10150.3       10751.8    
  53  0.341525      -1.07433      -3449.99       3449.99       10208.4       13658.4    
  54  0.686480     -0.376178      -1208.01       1208.01       10758.2       11966.2    
  55  0.273157      -1.29771      -4167.32       4167.32       9962.25       14129.6    
  56  0.472999     -0.748662      -2404.17       2404.17       10683.4       13087.6    
  57  0.591611     -0.524905      -1685.62       1685.62       10790.7       12476.3    
  58  0.253673      -1.37171      -4404.95       4404.95       12448.4       16853.4    
  59  0.522398     -0.649326      -2085.17       2085.17       10772.0       12857.1    
  60  0.927744     -0.749995E-01  -240.845       240.845       11384.3       11625.2    
  61  0.470581     -0.753787      -2420.62       2420.62       10976.8       13397.4    
  62  0.365015      -1.00782      -3236.38       3236.38       10881.4       14117.8    
  63  0.732288     -0.311582      -1000.58       1000.58       10667.9       11668.5    
  64  0.536772E-01  -2.92477      -9392.26       9392.26       10400.6       19792.9    
loop,thermsimp(1:2)        8   2307.85       1813.61    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79      10523.06          0.88          1.11         23.05          0.21          0.05         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80      10358.87          0.88          1.10         23.03          0.33          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10358.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        8
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:        9
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       79     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -7811.02       7811.02       9716.00       17527.0    
   2  0.192227      -1.64908      -5295.66       5295.66       10632.8       15928.4    
   3  0.872733     -0.136126      -437.139       437.139       10150.3       10587.4    
   4  0.444113     -0.811675      -2606.52       2606.52       10596.7       13203.3    
   5  0.194382      -1.63793      -5259.86       5259.86       10157.0       15416.9    
   6  0.358074      -1.02702      -3298.04       3298.04       10751.5       14049.5    
   7  0.461693     -0.772855      -2481.86       2481.86       10492.0       12973.9    
   8  0.180202      -1.71368      -5503.11       5503.11       11008.8       16511.9    
   9  0.944954     -0.566187E-01  -181.819       181.819       10952.8       11134.6    
  10  0.738770     -0.302769      -972.276       972.276       11175.0       12147.3    
  11  0.822491E-01  -2.49800      -8021.80       8021.80       10526.7       18548.5    
  12  0.313602      -1.15963      -3723.90       3723.90       11009.2       14733.1    
  13  0.978185     -0.220567E-01  -70.8303       70.8303       10936.3       11007.2    
  14  0.540591E-01  -2.91768      -9369.49       9369.49       10991.2       20360.7    
  15  0.872885     -0.135951      -436.577       436.577       11384.3       11820.9    
  16  0.209079      -1.56504      -5025.79       5025.79       9848.91       14874.7    
  17  0.789205E-01  -2.53931      -8154.46       8154.46       10667.9       18822.3    
  18  0.746404     -0.292489      -939.264       939.264       10526.9       11466.2    
  19  0.110219      -2.20529      -7081.81       7081.81       10758.2       17840.0    
  20  0.656016     -0.421570      -1353.78       1353.78       10571.1       11924.9    
  21  0.665675     -0.406953      -1306.84       1306.84       10000.2       11307.1    
  22  0.563292     -0.573957      -1843.14       1843.14       10780.5       12623.7    
  23  0.615044     -0.486062      -1560.88       1560.88       10704.3       12265.2    
  24  0.128081      -2.05509      -6599.48       6599.48       10689.1       17288.6    
  25  0.459916     -0.776711      -2494.24       2494.24       10790.7       13285.0    
  26  0.433297     -0.836332      -2685.70       2685.70       10743.7       13429.4    
  27  0.225675      -1.48866      -4780.51       4780.51       10728.0       15508.5    
  28  0.808805     -0.212197      -681.426       681.426       10772.0       11453.4    
  29  0.578238     -0.547770      -1759.04       1759.04       10723.2       12482.2    
  30  0.569572     -0.562871      -1807.54       1807.54       10586.1       12393.6    
  31  0.291272      -1.23350      -3961.11       3961.11       10683.4       14644.5    
  32  0.144426      -1.93499      -6213.79       6213.79       9982.79       16196.6    
  33  0.908321     -0.961572E-01  -308.788       308.788       10976.8       11285.6    
  34  0.593166     -0.522281      -1677.19       1677.19       10759.7       12436.9    
  35  0.327630      -1.11587      -3583.38       3583.38       10689.6       14273.0    
  36  0.823214E-01  -2.49712      -8018.97       8018.97       10888.5       18907.5    
  37  0.742531     -0.297691      -955.970       955.970       10933.5       11889.4    
  38  0.476201E-01  -3.04450      -9776.75       9776.75       10208.4       19985.2    
  39  0.183829      -1.69375      -5439.11       5439.11       10670.0       16109.1    
  40  0.417257     -0.874053      -2806.83       2806.83       10259.5       13066.3    
  41  0.647723E-01  -2.73688      -8788.89       8788.89       10864.8       19653.7    
  42  0.123950E-01  -4.39046      -14099.0       14099.0       11057.7       25156.7    
  43  0.281372E-01  -3.57066      -11466.4       11466.4       10691.8       22158.2    
  44  0.883044     -0.124380      -399.420       399.420       10881.4       11280.8    
  45  0.445413     -0.808754      -2597.14       2597.14       9962.25       12559.4    
  46  0.418101     -0.872031      -2800.34       2800.34       10722.7       13523.1    
  47  0.301534      -1.19887      -3849.92       3849.92       10421.9       14271.8    
  48  0.674500     -0.393783      -1264.55       1264.55       10934.3       12198.9    
  49  0.732783     -0.310905      -998.405       998.405       10694.2       11692.6    
  50  0.970355     -0.300929E-01  -96.6370       96.6370       10566.3       10662.9    
  51  0.981589     -0.185824E-01  -59.6734       59.6734       10656.4       10716.0    
  52  0.677253     -0.389711      -1251.47       1251.47       14204.3       15455.8    
  53  0.800731     -0.222230      -713.644       713.644       10673.5       11387.2    
  54  0.529544     -0.635738      -2041.54       2041.54       12448.4       14490.0    
  55  0.814619     -0.205035      -658.424       658.424       10804.9       11463.4    
  56  0.909218     -0.951702E-01  -305.618       305.618       10584.0       10889.6    
  57  0.269472      -1.31129      -4210.93       4210.93       10999.7       15210.6    
  58  0.166504      -1.79274      -5756.98       5756.98       10377.1       16134.1    
  59  0.328775      -1.11238      -3572.17       3572.17       10400.6       13972.8    
  60  0.333602      -1.09781      -3525.37       3525.37       10945.3       14470.7    
  61  0.213893      -1.54228      -4952.69       4952.69       10785.9       15738.6    
  62  0.401720     -0.911999      -2928.69       2928.69       10368.8       13297.5    
  63  0.453769     -0.790168      -2537.45       2537.45       10625.7       13163.2    
  64  0.649690E-01  -2.73384      -8779.15       8779.15       10358.9       19138.0    
loop,thermsimp(1:2)        9   7811.02       5295.66    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81      10940.54          0.89          1.10         23.01          0.30          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82      11174.08          0.90          1.09         23.00          0.34          0.04         25.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    10941.        3.794    -0.9954      3.294     -100.0     0.2150    
                     -0.8358      2.427     -100.0      2.209     0.9526    
                      0.9526     0.5257E-01  2.400      0.000      0.000    
                      -1.613      0.000      0.000      0.000     -1.221    

                      -2.500      8859.     0.1281E+05 -541.3     -1624.    
                      -2.000     -3.858     -2.858     -5.158     -3.858    
                      -13.41     -2.627      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1882E-01-0.6943E-01  0.000    -0.2778E-01
                     -0.5964E-01-0.6370     0.6037E-01-0.1673     0.3599E-01

                     -0.7065    -0.9526      0.000     0.2017     0.5991E-01
                      0.8541E-01-0.8140E-01-0.4865E-01 0.5542E-04-0.4150E-01
                     -0.8474E-01 0.1022    -0.2154     -1.082      0.000    

                     -0.4526    -0.9526      2.858     -1.123      0.000    
                       0.000      9.124      9.224     -4763.     -4.000    
                      0.7115E-01 0.7115E-01  9.024      8.877     -4763.    

                      -4.000     0.7115E-01 0.7115E-01  9.224      9.024    
                      -4763.     -4.000     0.7115E-01 0.7115E-01  9.424    
                       8.824     -4763.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10940.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:        9
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       10
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       81     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -1577.83       1577.83       10150.3       11728.1    
   2  0.877337     -0.130865      -420.244       420.244       10566.3       10986.5    
   3  0.821280     -0.196891      -632.274       632.274       10656.4       11288.6    
   4  0.989636     -0.104181E-01  -33.4555       33.4555       10584.0       10617.5    
   5  0.492813     -0.707625      -2272.38       2272.38       10936.3       13208.7    
   6  0.904083     -0.100835      -323.809       323.809       10952.8       11276.6    
   7  0.490620     -0.712086      -2286.71       2286.71       10881.4       13168.1    
   8  0.572439     -0.557850      -1791.41       1791.41       10976.8       12768.2    
   9  0.588753     -0.529749      -1701.18       1701.18       10000.2       11701.4    
  10  0.341799      -1.07353      -3447.41       3447.41       10673.5       14120.9    
  11  0.449605     -0.799385      -2567.05       2567.05       10772.0       13339.0    
  12  0.740720     -0.300132      -963.810       963.810       10804.9       11768.7    
  13  0.173164E-01  -4.05610      -13025.3       13025.3       10526.9       23552.2    
  14  0.828389     -0.188272      -604.595       604.595       10694.2       11298.8    
  15  0.110451      -2.20318      -7075.05       7075.05       11384.3       18459.4    
  16  0.646816     -0.435693      -1399.14       1399.14       10933.5       12332.6    
  17  0.857676     -0.153529      -493.024       493.024       10571.1       11064.1    
  18  0.691202E-02  -4.97449      -15974.5       15974.5       11175.0       27149.6    
  19  0.530885     -0.633210      -2033.42       2033.42       10934.3       12967.7    
  20  0.742957     -0.297117      -954.129       954.129       10704.3       11658.4    
  21  0.883526E-01  -2.42642      -7791.92       7791.92       10586.1       18378.0    
  22  0.599138     -0.512263      -1645.02       1645.02       10759.7       12404.7    
  23  0.476407     -0.741482      -2381.11       2381.11       10723.2       13104.3    
  24  0.509994E-01  -2.97594      -9556.59       9556.59       9962.25       19518.8    
  25  0.669768     -0.400824      -1287.16       1287.16       10780.5       12067.7    
  26  0.874430     -0.134183      -430.899       430.899       10492.0       10922.9    
  27  0.830739     -0.185440      -595.499       595.499       10259.5       10855.0    
  28  0.166673      -1.79172      -5753.73       5753.73       10625.7       16379.5    
  29  0.578742     -0.546898      -1756.24       1756.24       10596.7       12353.0    
  30  0.433531     -0.835791      -2683.96       2683.96       10790.7       13474.7    
  31  0.979127     -0.210935E-01  -67.7372       67.7372       10368.8       10436.5    
  32  0.310252      -1.17037      -3758.39       3758.39       10743.7       14502.0    
  33  0.686879     -0.375597      -1206.15       1206.15       10722.7       11928.9    
  34  0.243104      -1.41427      -4541.61       4541.61       10400.6       14942.3    
  35  0.459407     -0.777818      -2497.79       2497.79       10751.5       13249.3    
  36  0.332163      -1.10213      -3539.25       3539.25       10421.9       13961.2    
  37  0.512243     -0.668956      -2148.21       2148.21       10689.6       12837.9    
  38  0.323240      -1.12936      -3626.70       3626.70       10945.3       14572.0    
  39  0.667455     -0.404284      -1298.27       1298.27       12448.4       13746.7    
  40  0.460037     -0.776449      -2493.40       2493.40       10683.4       13176.8    
  41  0.227415      -1.48098      -4755.84       4755.84       11009.2       15765.1    
  42  0.636494     -0.451780      -1450.79       1450.79       9848.91       11299.7    
  43  0.432078     -0.839149      -2694.75       2694.75       10999.7       13694.4    
  44  0.609015     -0.495913      -1592.52       1592.52       10157.0       11749.6    
  45  0.427755     -0.849205      -2727.04       2727.04       14204.3       16931.4    
  46  0.496712     -0.699745      -2247.08       2247.08       10728.0       12975.1    
  47  0.295308      -1.21974      -3916.92       3916.92       10785.9       14702.8    
  48  0.928979     -0.736692E-01  -236.573       236.573       10632.8       10869.3    
  49  0.245696E-01  -3.70625      -11901.8       11901.8       10670.0       22571.8    
  50  0.833617E-01  -2.48457      -7978.65       7978.65       10377.1       18355.8    
  51  0.499690     -0.693767      -2227.88       2227.88       9982.79       12210.7    
  52  0.320552      -1.13771      -3653.51       3653.51       11008.8       14662.3    
  53  0.151030E-01  -4.19286      -13464.5       13464.5       10689.1       24153.6    
  54  0.551054     -0.595922      -1913.67       1913.67       9716.00       11629.7    
  55  0.786630     -0.239997      -770.698       770.698       10758.2       11528.9    
  56  0.793760E-01  -2.53356      -8135.98       8135.98       10526.7       18662.7    
  57  0.456771     -0.783574      -2516.28       2516.28       10667.9       13184.2    
  58  0.613263     -0.488962      -1570.19       1570.19       10888.5       12458.7    
  59  0.407581     -0.897515      -2882.18       2882.18       10358.9       13241.0    
  60  0.214329      -1.54024      -4946.15       4946.15       10864.8       15811.0    
  61  0.543052     -0.610551      -1960.65       1960.65       10208.4       12169.1    
  62  0.861407     -0.149188      -479.085       479.085       10991.2       11470.3    
  63  0.727563     -0.318055      -1021.36       1021.36       10691.8       11713.2    
  64  0.954867     -0.461830E-01  -148.307       148.307       10940.5       11088.8    
loop,thermsimp(1:2)       10   1577.83       420.244    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83      10266.74          0.88          1.10         23.04          0.43          0.04         25.49
Just calling func    0   0         25.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84       9749.08          0.91          1.10         23.02          0.50          0.05         25.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9749.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       10
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       11
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       83     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -3309.67       3309.67       10368.8       13678.4    
   2  0.318207      -1.14505      -3677.10       3677.10       10584.0       14261.1    
   3  0.410972E-01  -3.19181      -10249.8       10249.8       10259.5       20509.3    
   4  0.217948      -1.52350      -4892.38       4892.38       10632.8       15525.2    
   5  0.460755     -0.774888      -2488.39       2488.39       10492.0       12980.4    
   6  0.694214     -0.364975      -1172.04       1172.04       10566.3       11738.3    
   7  0.237764      -1.43648      -4612.93       4612.93       10571.1       15184.0    
   8  0.635477     -0.453379      -1455.93       1455.93       10940.5       12396.5    
   9  0.882831E-01  -2.42721      -7794.45       7794.45       10952.8       18747.2    
  10  0.889613     -0.116969      -375.620       375.620       10656.4       11032.0    
  11  0.236395      -1.44225      -4631.48       4631.48       10694.2       15325.7    
  12  0.785560     -0.241359      -775.071       775.071       9848.91       10624.0    
  13  0.253594      -1.37202      -4405.95       4405.95       10991.2       15397.2    
  14  0.767743     -0.264300      -848.744       848.744       10758.2       11606.9    
  15  0.425111     -0.855405      -2746.95       2746.95       9716.00       12462.9    
  16  0.334680E-01  -3.39717      -10909.3       10909.3       10704.3       21613.5    
  17  0.737903     -0.303943      -976.047       976.047       10000.2       10976.3    
  18  0.530906     -0.633170      -2033.29       2033.29       10691.8       12725.1    
  19  0.811772     -0.208536      -669.669       669.669       10150.3       10819.9    
  20  0.781494     -0.246548      -791.736       791.736       10157.0       10948.8    
  21  0.668871     -0.402164      -1291.46       1291.46       10804.9       12096.4    
  22  0.609633     -0.494898      -1589.26       1589.26       10722.7       12312.0    
  23  0.732795E-01  -2.61347      -8392.61       8392.61       10780.5       19173.1    
  24  0.999755     -0.244962E-03 -0.786643      0.786643       10208.4       10209.2    
  25  0.556911     -0.585350      -1879.73       1879.73       9982.79       11862.5    
  26  0.381942     -0.962485      -3090.81       3090.81       10933.5       14024.3    
  27  0.230973      -1.46546      -4705.99       4705.99       10596.7       15302.7    
  28  0.791084     -0.234351      -752.569       752.569       10759.7       11512.3    
  29  0.122039      -2.10341      -6754.66       6754.66       10888.5       17643.2    
  30  0.411383     -0.888231      -2852.36       2852.36       10976.8       13829.2    
  31  0.753656     -0.282819      -908.213       908.213       10689.6       11597.9    
  32  0.846821     -0.166266      -533.928       533.928       10934.3       11468.3    
  33  0.577745     -0.548622      -1761.78       1761.78       10728.0       12489.8    
  34  0.859903     -0.150936      -484.698       484.698       10723.2       11207.9    
  35  0.915816     -0.879395E-01  -282.399       282.399       10881.4       11163.8    
  36  0.220499      -1.51186      -4855.01       4855.01       10683.4       15538.4    
  37  0.539962     -0.616256      -1978.97       1978.97       10667.9       12646.9    
  38  0.810725     -0.209827      -673.813       673.813       10936.3       11610.1    
  39  0.901567     -0.103621      -332.755       332.755       10358.9       10691.6    
  40  0.196148      -1.62888      -5230.81       5230.81       10751.5       15982.3    
  41  0.413437     -0.883250      -2836.37       2836.37       10772.0       13608.3    
  42  0.192892      -1.64562      -5284.56       5284.56       10790.7       16075.3    
  43  0.194290      -1.63840      -5261.38       5261.38       10999.7       16261.0    
  44  0.988313     -0.117563E-01  -37.7528       37.7528       12448.4       12486.2    
  45  0.917980     -0.855792E-01  -274.819       274.819       10421.9       10696.7    
  46  0.136083      -1.99449      -6404.87       6404.87       10673.5       17078.4    
  47  0.847126     -0.165905      -532.770       532.770       10743.7       11276.4    
  48  0.513003     -0.667474      -2143.45       2143.45       10945.3       13088.8    
  49  0.562161     -0.575967      -1849.59       1849.59       11008.8       12858.4    
  50  0.926079     -0.767957E-01  -246.613       246.613       10785.9       11032.5    
  51  0.890313     -0.116182      -373.093       373.093       10400.6       10773.7    
  52  0.857665     -0.153542      -493.065       493.065       11009.2       11502.3    
  53  0.599877     -0.511031      -1641.07       1641.07       10864.8       12505.9    
  54  0.835330     -0.179929      -577.802       577.802       10625.7       11203.5    
  55  0.323336      -1.12906      -3625.75       3625.75       14204.3       17830.1    
  56  0.305042      -1.18731      -3812.78       3812.78       10377.1       14189.9    
  57  0.980883     -0.193016E-01  -61.9829       61.9829       10586.1       10648.1    
  58  0.129682      -2.04267      -6559.59       6559.59       11384.3       17943.9    
  59  0.738352     -0.303335      -974.094       974.094       10526.7       11500.8    
  60  0.383117     -0.959416      -3080.96       3080.96       9962.25       13043.2    
  61  0.524900     -0.644547      -2069.82       2069.82       10670.0       12739.8    
  62  0.594829     -0.519481      -1668.20       1668.20       10526.9       12195.1    
  63  0.596925     -0.515963      -1656.90       1656.90       10689.1       12346.1    
  64  0.462523     -0.771060      -2476.09       2476.09       9749.08       12225.2    
loop,thermsimp(1:2)       11   3309.67       3677.10    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85      10457.42          0.88          1.09         23.03          0.37          0.04         25.41
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  10457.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       11
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       12
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       84     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -8276.43       8276.43       10208.4       18484.8    
   2  0.804470     -0.217571      -698.682       698.682       9848.91       10547.6    
   3  0.984017     -0.161120E-01  -51.7402       51.7402       10586.1       10637.8    
   4  0.587639     -0.531643      -1707.26       1707.26       10358.9       12066.1    
   5  0.523810     -0.646626      -2076.50       2076.50       10421.9       12498.4    
   6  0.930607     -0.719181E-01  -230.949       230.949       10400.6       10631.6    
   7  0.360114E-01  -3.32392      -10674.1       10674.1       10150.3       20824.3    
   8  0.963815     -0.368556E-01  -118.354       118.354       10157.0       10275.4    
   9  0.201264E-01  -3.90572      -12542.4       12542.4       10000.2       22542.6    
  10  0.954897     -0.461522E-01  -148.208       148.208       10656.4       10804.6    
  11  0.374160     -0.983071      -3156.92       3156.92       10785.9       13942.8    
  12  0.174967      -1.74316      -5597.77       5597.77       10881.4       16479.2    
  13  0.381618     -0.963335      -3093.54       3093.54       10625.7       13719.3    
  14  0.191097      -1.65498      -5314.60       5314.60       10723.2       16037.8    
  15  0.425287     -0.854991      -2745.62       2745.62       10743.7       13489.3    
  16  0.426180     -0.852893      -2738.88       2738.88       10934.3       13673.2    
  17  0.615671     -0.485042      -1557.61       1557.61       10526.7       12084.3    
  18  0.787264     -0.239192      -768.113       768.113       11009.2       11777.3    
  19  0.812636     -0.207472      -666.252       666.252       10759.7       11425.9    
  20  0.917241E-01  -2.38897      -7671.66       7671.66       10689.6       18361.3    
  21  0.671310     -0.398525      -1279.78       1279.78       10758.2       12038.0    
  22  0.548174     -0.601162      -1930.50       1930.50       10936.3       12866.8    
  23  0.134851      -2.00359      -6434.08       6434.08       10566.3       17000.4    
  24  0.373236     -0.985545      -3164.87       3164.87       9982.79       13147.7    
  25  0.578774     -0.546843      -1756.07       1756.07       10804.9       12561.0    
  26  0.910021     -0.942872E-01  -302.783       302.783       10526.9       10829.7    
  27  0.192323      -1.64858      -5294.05       5294.05       9749.08       15043.1    
  28  0.366342      -1.00419      -3224.73       3224.73       10722.7       13947.5    
  29  0.686994     -0.375430      -1205.61       1205.61       10689.1       11894.8    
  30  0.486551     -0.720414      -2313.46       2313.46       10940.5       13254.0    
  31  0.256801      -1.35945      -4365.59       4365.59       9716.00       14081.6    
  32  0.284977      -1.25535      -4031.28       4031.28       12448.4       16479.7    
  33  0.903072     -0.101953      -327.399       327.399       10728.0       11055.4    
  34  0.226450      -1.48523      -4769.50       4769.50       10864.8       15634.3    
  35  0.446078     -0.807261      -2592.34       2592.34       10667.9       13260.2    
  36  0.152634      -1.87971      -6036.29       6036.29       10691.8       16728.1    
  37  0.511955     -0.669518      -2150.01       2150.01       10670.0       12820.0    
  38  0.513138     -0.667210      -2142.60       2142.60       11008.8       13151.4    
  39  0.637309     -0.450501      -1446.69       1446.69       10492.0       11938.7    
  40  0.861477     -0.149107      -478.825       478.825       9962.25       10441.1    
  41  0.817364     -0.201671      -647.622       647.622       10945.3       11592.9    
  42  0.793820     -0.230898      -741.479       741.479       10772.0       11513.5    
  43  0.253309      -1.37315      -4409.56       4409.56       10368.8       14778.3    
  44  0.702532     -0.353065      -1133.79       1133.79       10976.8       12110.6    
  45  0.822324     -0.195620      -628.192       628.192       10933.5       11561.7    
  46  0.720485     -0.327831      -1052.76       1052.76       10377.1       11429.9    
  47  0.881589     -0.126029      -404.716       404.716       10584.0       10988.7    
  48  0.584479     -0.537035      -1724.57       1724.57       10571.1       12295.7    
  49  0.697197     -0.360688      -1158.27       1158.27       10596.7       11755.0    
  50  0.320931      -1.13653      -3649.72       3649.72       10694.2       14344.0    
  51  0.780071     -0.248371      -797.588       797.588       10991.2       11788.8    
  52  0.318322E-01  -3.44728      -11070.2       11070.2       10632.8       21703.0    
  53  0.693387     -0.366167      -1175.87       1175.87       10683.4       11859.3    
  54  0.332128      -1.10223      -3539.59       3539.59       10751.5       14291.0    
  55  0.891883E-01  -2.41701      -7761.69       7761.69       10790.7       18552.4    
  56  0.960735     -0.400567E-01  -128.634       128.634       10999.7       11128.3    
  57  0.726634     -0.319332      -1025.47       1025.47       10673.5       11699.0    
  58  0.867850     -0.141737      -455.157       455.157       10888.5       11343.7    
  59  0.960075     -0.407444E-01  -130.842       130.842       14204.3       14335.2    
  60  0.303374E-01  -3.49537      -11224.6       11224.6       11384.3       22609.0    
  61  0.159557      -1.83535      -5893.84       5893.84       10952.8       16846.6    
  62  0.487506     -0.718453      -2307.15       2307.15       10780.5       13087.7    
  63  0.978612E-01  -2.32420      -7463.68       7463.68       10259.5       17723.2    
  64  0.405010     -0.903843      -2902.50       2902.50       10457.4       13359.9    
loop,thermsimp(1:2)       12   8276.43       698.682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86      10200.70          0.88          1.09         23.01          0.33          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87      10392.41          0.90          1.09         23.05          0.39          0.04         25.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10200.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       12
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       13
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       86     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -438.233       438.233       10157.0       10595.3    
   2  0.311340      -1.16687      -3747.15       3747.15       9962.25       13709.4    
   3  0.293828      -1.22476      -3933.05       3933.05       9848.91       13782.0    
   4  0.586668     -0.533296      -1712.57       1712.57       10400.6       12113.2    
   5  0.360311      -1.02079      -3278.04       3278.04       10586.1       13864.1    
   6  0.315643      -1.15314      -3703.07       3703.07       10656.4       14359.4    
   7  0.481464     -0.730923      -2347.20       2347.20       10526.9       12874.1    
   8  0.720279     -0.328116      -1053.67       1053.67       10584.0       11637.7    
   9  0.551471     -0.595166      -1911.25       1911.25       10728.0       12639.3    
  10  0.524434     -0.645435      -2072.68       2072.68       10999.7       13072.3    
  11  0.781600     -0.246412      -791.299       791.299       10888.5       11679.8    
  12  0.353648      -1.03945      -3337.98       3337.98       10759.7       14097.7    
  13  0.451044     -0.796190      -2556.79       2556.79       10377.1       12933.9    
  14  0.325353      -1.12284      -3605.77       3605.77       10772.0       14377.7    
  15  0.312157      -1.16425      -3738.73       3738.73       10933.5       14672.2    
  16  0.432418     -0.838362      -2692.22       2692.22       10945.3       13637.5    
  17  0.296543      -1.21556      -3903.52       3903.52       10673.5       14577.0    
  18  0.705416     -0.348967      -1120.63       1120.63       10596.7       11717.4    
  19  0.146505      -1.92069      -6167.89       6167.89       11009.2       17177.1    
  20  0.471608     -0.751607      -2413.62       2413.62       10991.2       13404.8    
  21  0.633095     -0.457134      -1467.99       1467.99       10683.4       12151.4    
  22  0.754855     -0.281230      -903.110       903.110       10689.1       11592.3    
  23  0.444501E-01  -3.11339      -9997.97       9997.97       10492.0       20490.0    
  24  0.160973      -1.82652      -5865.46       5865.46       10758.2       16623.6    
  25  0.943694     -0.579536E-01  -186.105       186.105       10358.9       10545.0    
  26  0.187304      -1.67502      -5378.98       5378.98       10526.7       15905.7    
  27  0.840922     -0.173257      -556.376       556.376       10976.8       11533.2    
  28  0.888648     -0.118054      -379.104       379.104       10571.1       10950.2    
  29  0.920614E-01  -2.38530      -7659.87       7659.87       10421.9       18081.8    
  30  0.906493     -0.981722E-01  -315.259       315.259       10804.9       11120.2    
  31  0.221761      -1.50616      -4836.70       4836.70       10670.0       15506.7    
  32  0.248725      -1.39141      -4468.20       4468.20       10936.3       15404.5    
  33  0.315928      -1.15224      -3700.18       3700.18       10780.5       14480.7    
  34  0.949967     -0.513283E-01  -164.830       164.830       9982.79       10147.6    
  35  0.802748     -0.219715      -705.567       705.567       11008.8       11714.3    
  36  0.558987     -0.581628      -1867.77       1867.77       10940.5       12808.3    
  37  0.638133     -0.449209      -1442.54       1442.54       10667.9       12110.4    
  38  0.637852     -0.449648      -1443.95       1443.95       10457.4       11901.4    
  39  0.382908     -0.959961      -3082.71       3082.71       10743.7       13826.4    
  40  0.982834     -0.173149E-01  -55.6032       55.6032       10934.3       10989.9    
  41  0.497022     -0.699120      -2245.07       2245.07       10625.7       12870.8    
  42  0.263620      -1.33325      -4281.43       4281.43       10785.9       15067.4    
  43  0.296939      -1.21423      -3899.24       3899.24       10722.7       14622.0    
  44  0.784161     -0.243141      -780.795       780.795       9716.00       10496.8    
  45  0.545321     -0.606380      -1947.26       1947.26       10751.5       12698.7    
  46  0.770080     -0.261260      -838.981       838.981       14204.3       15043.3    
  47  0.358755      -1.02511      -3291.93       3291.93       10694.2       13986.2    
  48  0.325126      -1.12354      -3608.01       3608.01       10368.8       13976.8    
  49  0.599396     -0.511832      -1643.64       1643.64       9749.08       11392.7    
  50  0.323708      -1.12791      -3622.05       3622.05       10864.8       14486.9    
  51  0.329142      -1.11127      -3568.59       3568.59       10723.2       14291.8    
  52  0.685661     -0.377371      -1211.85       1211.85       10881.4       12093.3    
  53  0.360361      -1.02065      -3277.59       3277.59       12448.4       15726.0    
  54  0.665281     -0.407545      -1308.74       1308.74       10691.8       12000.6    
  55  0.983321     -0.168196E-01  -54.0126       54.0126       10952.8       11006.8    
  56  0.644247     -0.439672      -1411.91       1411.91       10566.3       11978.2    
  57  0.735645     -0.307008      -985.890       985.890       10259.5       11245.4    
  58  0.680276     -0.385257      -1237.17       1237.17       10689.6       11926.8    
  59  0.864073     -0.146098      -469.162       469.162       10208.4       10677.6    
  60  0.788785     -0.237262      -761.915       761.915       10790.7       11552.6    
  61  0.429383     -0.845405      -2714.84       2714.84       10150.3       12865.1    
  62  0.798857     -0.224573      -721.168       721.168       10632.8       11353.9    
  63  0.946983     -0.544737E-01  -174.930       174.930       10000.2       10175.1    
  64  0.229664      -1.47114      -4724.24       4724.24       10200.7       14924.9    
loop,thermsimp(1:2)       13   438.233       3747.15    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88      10663.74          0.88          1.10         23.09          0.23          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89      10614.63          0.89          1.09         23.07          0.41          0.04         25.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10614.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       13
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       14
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       88     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -3421.24       3421.24       9982.79       13404.0    
   2  0.267720      -1.31781      -4231.88       4231.88       10000.2       14232.1    
   3  0.279825      -1.27359      -4089.86       4089.86       9716.00       13805.9    
   4  0.281095      -1.26906      -4075.32       4075.32       10358.9       14434.2    
   5  0.245867      -1.40297      -4505.32       4505.32       10157.0       14662.4    
   6  0.914239     -0.896636E-01  -287.935       287.935       10208.4       10496.3    
   7  0.180116      -1.71415      -5504.64       5504.64       10571.1       16075.7    
   8  0.567917     -0.565780      -1816.88       1816.88       10934.3       12751.2    
   9  0.431941     -0.839465      -2695.76       2695.76       10952.8       13648.6    
  10  0.877920     -0.130199      -418.107       418.107       10804.9       11223.0    
  11  0.280355      -1.27170      -4083.78       4083.78       10259.5       14343.3    
  12  0.486947     -0.719601      -2310.84       2310.84       10632.8       12943.6    
  13  0.216546      -1.52995      -4913.11       4913.11       9749.08       14662.2    
  14  0.483718E-02  -5.33142      -17120.7       17120.7       10976.8       28097.5    
  15  0.785152E-03  -7.14963      -22959.5       22959.5       10790.7       33750.2    
  16  0.300781      -1.20137      -3857.95       3857.95       10689.1       14547.1    
  17  0.869691     -0.139618      -448.352       448.352       10584.0       11032.4    
  18  0.694261E-01  -2.66749      -8566.07       8566.07       10888.5       19454.6    
  19  0.635475     -0.453382      -1455.94       1455.94       11008.8       12464.7    
  20  0.894977     -0.110958      -356.316       356.316       10596.7       10953.1    
  21  0.442267     -0.815841      -2619.90       2619.90       10457.4       13077.3    
  22  0.283362      -1.26103      -4049.52       4049.52       10689.6       14739.2    
  23  0.518611     -0.656601      -2108.53       2108.53       10566.3       12674.8    
  24  0.858122E-01  -2.45559      -7885.61       7885.61       10691.8       18577.4    
  25  0.461153     -0.774026      -2485.62       2485.62       10881.4       13367.0    
  26  0.180026      -1.71465      -5506.24       5506.24       10667.9       16174.1    
  27  0.446938E-01  -3.10792      -9980.41       9980.41       10400.6       20381.1    
  28  0.152352      -1.88156      -6042.22       6042.22       10683.4       16725.7    
  29  0.163937E-01  -4.11086      -13201.1       13201.1       10728.0       23929.2    
  30  0.721347     -0.326635      -1048.92       1048.92       10751.5       11800.4    
  31  0.813323     -0.206626      -663.536       663.536       10940.5       11604.1    
  32  0.569343     -0.563273      -1808.83       1808.83       10150.3       11959.1    
  33  0.275899      -1.28772      -4135.23       4135.23       10625.7       14761.0    
  34  0.933187     -0.691492E-01  -222.058       222.058       10526.9       10749.0    
  35  0.716570     -0.333279      -1070.25       1070.25       10377.1       11447.4    
  36  0.405413     -0.902848      -2899.30       2899.30       10999.7       13899.0    
  37  0.907528     -0.970314E-01  -311.595       311.595       10991.2       11302.8    
  38  0.554651     -0.589416      -1892.78       1892.78       10945.3       12838.1    
  39  0.419962     -0.867592      -2786.08       2786.08       9962.25       12748.3    
  40  0.824173     -0.193375      -620.982       620.982       9848.91       10469.9    
  41  0.865647     -0.144278      -463.319       463.319       10743.7       11207.0    
  42  0.300944      -1.20083      -3856.21       3856.21       10586.1       14442.3    
  43  0.339688      -1.07973      -3467.31       3467.31       10368.8       13836.1    
  44  0.217032      -1.52771      -4905.92       4905.92       10694.2       15600.2    
  45  0.792618E-01  -2.53500      -8140.60       8140.60       10759.7       18900.3    
  46  0.997677     -0.232582E-02  -7.46887       7.46887       10723.2       10730.6    
  47  0.174239      -1.74733      -5611.16       5611.16       10656.4       16267.5    
  48  0.834084     -0.181422      -582.596       582.596       10772.0       11354.6    
  49  0.324404      -1.12577      -3615.15       3615.15       10780.5       14395.7    
  50  0.927598     -0.751564E-01  -241.349       241.349       10864.8       11106.2    
  51  0.981384     -0.187911E-01  -60.3436       60.3436       10673.5       10733.9    
  52  0.849105     -0.163572      -525.276       525.276       10722.7       11248.0    
  53  0.148698      -1.90584      -6120.19       6120.19       10933.5       17053.7    
  54  0.389930     -0.941789      -3024.35       3024.35       10200.7       13225.0    
  55  0.183568      -1.69517      -5443.67       5443.67       14204.3       19648.0    
  56  0.661220     -0.413669      -1328.41       1328.41       10785.9       12114.3    
  57  0.242183      -1.41806      -4553.79       4553.79       10936.3       15490.1    
  58  0.182262      -1.70231      -5466.61       5466.61       10670.0       16136.6    
  59  0.299801      -1.20464      -3868.43       3868.43       12448.4       16316.9    
  60  0.950117     -0.511698E-01  -164.321       164.321       10526.7       10691.0    
  61  0.184593      -1.68960      -5425.79       5425.79       10758.2       16184.0    
  62  0.730970     -0.313382      -1006.36       1006.36       11009.2       12015.6    
  63  0.753232E-01  -2.58597      -8304.27       8304.27       10421.9       18726.2    
  64  0.501460     -0.690231      -2216.53       2216.53       10614.6       12831.2    
loop,thermsimp(1:2)       14   3421.24       4231.88    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90      10364.45          0.88          1.09         23.02          0.55          0.04         25.59
Just calling func    0   0         25.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       9778.80          0.90          1.09         22.97          0.34          0.05         25.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9778.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       14
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       15
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       90     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -4720.26       4720.26       9848.91       14569.2    
   2  0.322822      -1.13066      -3630.86       3630.86       10208.4       13839.3    
   3  0.327586      -1.11601      -3583.81       3583.81       10526.7       14110.5    
   4  0.799078     -0.224296      -720.279       720.279       10723.2       11443.5    
   5  0.698072     -0.359433      -1154.24       1154.24       10673.5       11827.8    
   6  0.733871     -0.309421      -993.640       993.640       10526.9       11520.5    
   7  0.823872     -0.193740      -622.155       622.155       10596.7       11218.9    
   8  0.800045     -0.223087      -716.396       716.396       10584.0       11300.4    
   9  0.162010      -1.82010      -5844.84       5844.84       10864.8       16709.7    
  10  0.113138      -2.17915      -6997.86       6997.86       10743.7       17741.5    
  11  0.973966     -0.263784E-01  -84.7084       84.7084       10804.9       10889.6    
  12  0.998107     -0.189521E-02  -6.08604       6.08604       10722.7       10728.8    
  13  0.631351     -0.459893      -1476.85       1476.85       10991.2       12468.1    
  14  0.698229     -0.359208      -1153.52       1153.52       10772.0       11925.5    
  15  0.359252      -1.02373      -3287.49       3287.49       10377.1       13664.6    
  16  0.936266     -0.658562E-01  -211.483       211.483       10940.5       11152.0    
  17  0.843107     -0.170662      -548.043       548.043       10751.5       11299.5    
  18  0.181284      -1.70769      -5483.88       5483.88       10150.3       15634.2    
  19  0.354246      -1.03777      -3332.56       3332.56       11009.2       14341.8    
  20  0.981540     -0.186324E-01  -59.8339       59.8339       10785.9       10845.8    
  21  0.582284E-01  -2.84338      -9130.91       9130.91       11008.8       20139.7    
  22  0.935088     -0.671143E-01  -215.523       215.523       10566.3       10781.8    
  23  0.682144     -0.382515      -1228.36       1228.36       9962.25       11190.6    
  24  0.441439     -0.817715      -2625.91       2625.91       10934.3       13560.2    
  25  0.325829      -1.12138      -3601.08       3601.08       10614.6       14215.7    
  26  0.956968E-01  -2.34657      -7535.50       7535.50       10945.3       18480.8    
  27  0.465124E-01  -3.06804      -9852.33       9852.33       10632.8       20485.1    
  28  0.645503     -0.437726      -1405.66       1405.66       10457.4       11863.1    
  29  0.184751      -1.68875      -5423.04       5423.04       10200.7       15623.7    
  30  0.676303     -0.391115      -1255.98       1255.98       10881.4       12137.4    
  31  0.408248     -0.895880      -2876.93       2876.93       9982.79       12859.7    
  32  0.215511      -1.53474      -4928.50       4928.50       10952.8       15881.3    
  33  0.762109     -0.271666      -872.397       872.397       9716.00       10588.4    
  34  0.445022     -0.809632      -2599.96       2599.96       10368.8       12968.7    
  35  0.667113     -0.404797      -1299.92       1299.92       10999.7       12299.6    
  36  0.995785     -0.422376E-02  -13.5637       13.5637       10000.2       10013.8    
  37  0.278840      -1.27712      -4101.19       4101.19       10259.5       14360.7    
  38  0.624255     -0.471196      -1513.14       1513.14       10780.5       12293.7    
  39  0.368212     -0.999097      -3208.39       3208.39       10358.9       13567.3    
  40  0.330266      -1.10786      -3557.65       3557.65       10586.1       14143.8    
  41  0.969155     -0.313304E-01  -100.611       100.611       10689.1       10789.8    
  42  0.686816     -0.375688      -1206.44       1206.44       9749.08       10955.5    
  43  0.201053      -1.60419      -5151.49       5151.49       10157.0       15308.5    
  44  0.481166     -0.731544      -2349.19       2349.19       10689.6       13038.8    
  45  0.992829     -0.719725E-02  -23.1124       23.1124       10625.7       10648.8    
  46  0.665697     -0.406921      -1306.74       1306.74       10936.3       12243.1    
  47  0.991934E-02  -4.61327      -14814.5       14814.5       10694.2       25508.7    
  48  0.211644      -1.55285      -4986.64       4986.64       10571.1       15557.7    
  49  0.908243E-01  -2.39883      -7703.32       7703.32       10670.0       18373.3    
  50  0.643762     -0.440426      -1414.33       1414.33       10667.9       12082.2    
  51  0.568794E-01  -2.86682      -9206.18       9206.18       10758.2       19964.4    
  52  0.159466      -1.83592      -5895.67       5895.67       10656.4       16552.0    
  53  0.918851     -0.846310E-01  -271.774       271.774       12448.4       12720.2    
  54  0.865178     -0.144820      -465.058       465.058       10683.4       11148.5    
  55  0.826009     -0.191150      -613.837       613.837       10933.5       11547.3    
  56  0.665816E-02  -5.01191      -16094.7       16094.7       10691.8       26786.5    
  57  0.998155     -0.184716E-02  -5.93175       5.93175       10421.9       10427.8    
  58  0.875957E-01  -2.43502      -7819.55       7819.55       10759.7       18579.2    
  59  0.546955     -0.603388      -1937.65       1937.65       10888.5       12826.1    
  60  0.953933     -0.471617E-01  -151.450       151.450       14204.3       14355.8    
  61  0.131488      -2.02884      -6515.18       6515.18       10400.6       16915.8    
  62  0.415197     -0.879003      -2822.73       2822.73       10728.0       13550.8    
  63  0.543800E-02  -5.21434      -16744.7       16744.7       10976.8       27721.5    
  64  0.821907     -0.196128      -629.822       629.822       9778.80       10408.6    
loop,thermsimp(1:2)       15   4720.26       3630.86    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92      10166.03          0.88          1.10         23.02          0.34          0.04         25.38
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93       9218.69          0.90          1.09         23.00          0.27          0.03         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9218.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       15
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       16
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       92     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -1874.58       1874.58       10000.2       11874.8    
   2  0.850944     -0.161409      -518.330       518.330       9778.80       10297.1    
   3  0.343999      -1.06712      -3426.81       3426.81       10421.9       13848.7    
   4  0.481777E-02  -5.33544      -17133.6       17133.6       9716.00       26849.6    
   5  0.146991      -1.91738      -6157.26       6157.26       10625.7       16783.0    
   6  0.545677     -0.605728      -1945.16       1945.16       10722.7       12667.9    
   7  0.761940     -0.271888      -873.109       873.109       10566.3       11439.4    
   8  0.944477     -0.571238E-01  -183.441       183.441       10689.1       10872.6    
   9  0.965249     -0.353688E-01  -113.579       113.579       10785.9       10899.5    
  10  0.634176     -0.455429      -1462.51       1462.51       10804.9       12267.4    
  11  0.793205     -0.231673      -743.969       743.969       9749.08       10493.0    
  12  0.743605     -0.296246      -951.329       951.329       10683.4       11634.8    
  13  0.983069E-01  -2.31966      -7449.09       7449.09       10940.5       18389.6    
  14  0.618437     -0.480560      -1543.21       1543.21       9962.25       11505.5    
  15  0.429182     -0.845875      -2716.34       2716.34       10596.7       13313.1    
  16  0.771528     -0.259382      -832.949       832.949       10751.5       11584.4    
  17  0.218286      -1.52195      -4887.40       4887.40       10584.0       15471.4    
  18  0.556408     -0.586254      -1882.63       1882.63       10723.2       12605.8    
  19  0.526292     -0.641899      -2061.32       2061.32       10526.9       12588.2    
  20  0.665532     -0.407169      -1307.54       1307.54       10933.5       12241.0    
  21  0.261756      -1.34034      -4304.23       4304.23       10673.5       14977.7    
  22  0.975508     -0.247971E-01  -79.6305       79.6305       10457.4       10537.0    
  23  0.257613      -1.35630      -4355.45       4355.45       10772.0       15127.4    
  24  0.981555E-01  -2.32120      -7454.04       7454.04       10667.9       18121.9    
  25  0.955054     -0.459870E-01  -147.677       147.677       10881.4       11029.1    
  26  0.887906     -0.118890      -381.789       381.789       10936.3       11318.1    
  27  0.407043     -0.898837      -2886.42       2886.42       10780.5       13667.0    
  28  0.876870     -0.131396      -421.951       421.951       10999.7       11421.6    
  29  0.957152     -0.437935E-01  -140.633       140.633       10991.2       11131.8    
  30  0.827730     -0.189068      -607.150       607.150       12448.4       13055.6    
  31  0.289027      -1.24124      -3985.96       3985.96       10888.5       14874.5    
  32  0.125230      -2.07760      -6671.77       6671.77       9982.79       16654.6    
  33  0.242443      -1.41699      -4550.35       4550.35       10368.8       14919.1    
  34  0.654103     -0.424490      -1363.16       1363.16       10689.6       12052.8    
  35  0.811871     -0.208414      -669.275       669.275       10728.0       11397.3    
  36  0.145201E-01  -4.23222      -13590.9       13590.9       10934.3       24525.2    
  37  0.344449      -1.06581      -3422.61       3422.61       10358.9       13781.5    
  38  0.265532      -1.32602      -4258.22       4258.22       10377.1       14635.3    
  39  0.811851     -0.208438      -669.354       669.354       10208.4       10877.8    
  40  0.983290E-01  -2.31944      -7448.37       7448.37       10526.7       17975.1    
  41  0.347314      -1.05753      -3396.02       3396.02       10586.1       13982.1    
  42  0.923773     -0.792888E-01  -254.619       254.619       10614.6       10869.2    
  43  0.690375     -0.370520      -1189.85       1189.85       11009.2       12199.1    
  44  0.227523      -1.48051      -4754.32       4754.32       14204.3       18958.7    
  45  0.652275     -0.427289      -1372.15       1372.15       10259.5       11631.7    
  46  0.669640     -0.401014      -1287.77       1287.77       9848.91       11136.7    
  47  0.288804      -1.24201      -3988.44       3988.44       10157.0       14145.5    
  48  0.404648     -0.904738      -2905.37       2905.37       10571.1       13476.5    
  49  0.371042     -0.991440      -3183.79       3183.79       10200.7       13384.5    
  50  0.308424      -1.17628      -3777.37       3777.37       10150.3       13927.6    
  51  0.911221     -0.929703E-01  -298.554       298.554       10952.8       11251.4    
  52  0.615436     -0.485425      -1558.84       1558.84       10656.4       12215.2    
  53  0.780328     -0.248041      -796.529       796.529       10864.8       11661.4    
  54  0.127539      -2.05933      -6613.09       6613.09       10400.6       17013.7    
  55  0.709081     -0.343786      -1103.99       1103.99       10743.7       11847.6    
  56  0.974925     -0.253942E-01  -81.5481       81.5481       10670.0       10751.5    
  57  0.834943     -0.180392      -579.288       579.288       10945.3       11524.6    
  58  0.696274     -0.362013      -1162.52       1162.52       10759.7       11922.2    
  59  0.623965     -0.471660      -1514.64       1514.64       10758.2       12272.8    
  60  0.620467     -0.477282      -1532.69       1532.69       11008.8       12541.4    
  61  0.983840E-01  -2.31888      -7446.57       7446.57       10632.8       18079.3    
  62  0.452904     -0.792074      -2543.57       2543.57       10694.2       13237.8    
  63  0.731276     -0.312965      -1005.02       1005.02       10691.8       11696.8    
  64  0.136630      -1.99048      -6391.98       6391.98       9218.69       15610.7    
loop,thermsimp(1:2)       16   1874.58       518.330    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94      14654.09          0.88          1.10         23.02          0.38          0.04         25.42
Just calling func    0   0         25.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  14654.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       16
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       17
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       93     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -967.838       967.838       9778.80       10746.6    
   2  0.527958     -0.638738      -2051.17       2051.17       9749.08       11800.2    
   3  0.326119      -1.12049      -3598.22       3598.22       10457.4       14055.6    
   4  0.647061     -0.435314      -1397.92       1397.92       10670.0       12067.9    
   5  0.419805     -0.867966      -2787.29       2787.29       10614.6       13401.9    
   6  0.218417      -1.52135      -4885.48       4885.48       10689.1       15574.6    
   7  0.168864      -1.77866      -5711.79       5711.79       10208.4       15920.2    
   8  0.761417     -0.272575      -875.314       875.314       10785.9       11661.2    
   9  0.383989     -0.957143      -3073.66       3073.66       10881.4       13955.1    
  10  0.104774      -2.25595      -7244.50       7244.50       10991.2       18235.7    
  11  0.167912      -1.78432      -5729.95       5729.95       9848.91       15578.9    
  12  0.997930     -0.207190E-02  -6.65346       6.65346       10952.8       10959.5    
  13  0.493294     -0.706650      -2269.25       2269.25       10936.3       13205.6    
  14  0.483048     -0.727639      -2336.66       2336.66       10728.0       13064.7    
  15  0.715967     -0.334121      -1072.96       1072.96       10999.7       12072.6    
  16  0.595423E-01  -2.82107      -9059.25       9059.25       10566.3       19625.5    
  17  0.636569     -0.451662      -1450.41       1450.41       9962.25       11412.7    
  18  0.482980     -0.727779      -2337.11       2337.11       10945.3       13282.4    
  19  0.500121     -0.692905      -2225.12       2225.12       10751.5       12976.6    
  20  0.426980     -0.851018      -2732.86       2732.86       10259.5       12992.4    
  21  0.546576     -0.604082      -1939.88       1939.88       10683.4       12623.3    
  22  0.142720      -1.94687      -6251.96       6251.96       10864.8       17116.8    
  23  0.473622     -0.747346      -2399.94       2399.94       10691.8       13091.8    
  24  0.892718E-01  -2.41607      -7758.68       7758.68       10743.7       18502.3    
  25  0.660659     -0.414518      -1331.13       1331.13       10000.2       11331.4    
  26  0.328755      -1.11244      -3572.37       3572.37       10759.7       14332.1    
  27  0.544150     -0.608530      -1954.16       1954.16       10689.6       12643.8    
  28  0.199068      -1.61411      -5183.37       5183.37       11009.2       16192.6    
  29  0.685070     -0.378234      -1214.62       1214.62       10656.4       11871.0    
  30  0.500258     -0.692632      -2224.24       2224.24       10933.5       13157.7    
  31  0.130607      -2.03556      -6536.77       6536.77       10804.9       17341.7    
  32  0.982013E-01  -2.32074      -7452.54       7452.54       10758.2       18210.7    
  33  0.581494E-01  -2.84474      -9135.27       9135.27       11008.8       20144.0    
  34  0.841391     -0.172699      -554.586       554.586       10526.9       11081.5    
  35  0.838937E-01  -2.47820      -7958.22       7958.22       10723.2       18681.4    
  36  0.729848     -0.314919      -1011.29       1011.29       10722.7       11734.0    
  37  0.748292     -0.289962      -931.150       931.150       12448.4       13379.6    
  38  0.229216      -1.47309      -4730.51       4730.51       10694.2       15424.7    
  39  0.710713     -0.341487      -1096.61       1096.61       10596.7       11693.4    
  40  0.511506     -0.670395      -2152.83       2152.83       10200.7       12353.5    
  41  0.106756      -2.23721      -7184.30       7184.30       10571.1       17755.4    
  42  0.583466     -0.538770      -1730.14       1730.14       10780.5       12510.7    
  43  0.993140E-01  -2.30947      -7416.36       7416.36       10358.9       17775.2    
  44  0.461224     -0.773871      -2485.12       2485.12       10421.9       12907.0    
  45  0.574465     -0.554316      -1780.06       1780.06       10150.3       11930.3    
  46  0.715977     -0.334107      -1072.91       1072.91       10586.1       11659.0    
  47  0.877584     -0.130583      -419.339       419.339       10157.0       10576.4    
  48  0.492354     -0.708558      -2275.38       2275.38       10377.1       12652.5    
  49  0.874926     -0.133616      -429.080       429.080       10888.5       11317.6    
  50  0.800367     -0.222685      -715.104       715.104       10368.8       11083.9    
  51  0.507308     -0.678636      -2179.29       2179.29       10673.5       12852.8    
  52  0.727831     -0.317686      -1020.18       1020.18       10772.0       11792.2    
  53  0.899777E-01  -2.40819      -7733.39       7733.39       10584.0       18317.4    
  54  0.392780     -0.934505      -3000.96       3000.96       9218.69       12219.7    
  55  0.585301     -0.535629      -1720.06       1720.06       9982.79       11702.8    
  56  0.522884     -0.648395      -2082.18       2082.18       10625.7       12707.9    
  57  0.559213     -0.581225      -1866.48       1866.48       10400.6       12267.1    
  58  0.116989      -2.14568      -6890.38       6890.38       10526.7       17417.1    
  59  0.411020     -0.889113      -2855.19       2855.19       10632.8       13488.0    
  60  0.484202     -0.725253      -2328.99       2328.99       10667.9       12996.9    
  61  0.771761     -0.259080      -831.979       831.979       10940.5       11772.5    
  62  0.908486     -0.959755E-01  -308.204       308.204       14204.3       14512.5    
  63  0.340814      -1.07642      -3456.68       3456.68       10934.3       14391.0    
  64  0.519873     -0.654172      -2100.73       2100.73       14654.1       16754.8    
loop,thermsimp(1:2)       17   967.838       2051.17    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95      10327.71          0.88          1.10         23.02          0.25          0.04         25.29
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96       9565.36          0.90          1.09         22.98          0.38          0.04         25.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9565.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       17
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       18
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       95     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -3083.11       3083.11       10157.0       13240.2    
   2  0.293468      -1.22599      -3937.00       3937.00       9778.80       13715.8    
   3  0.954036     -0.470539E-01  -151.103       151.103       10952.8       11103.9    
   4  0.452934     -0.792010      -2543.37       2543.37       10526.9       13070.3    
   5  0.251692      -1.37955      -4430.12       4430.12       10368.8       14798.9    
   6  0.881081     -0.126605      -406.566       406.566       10888.5       11295.1    
   7  0.855311     -0.156290      -501.891       501.891       10000.2       10502.1    
   8  0.576474     -0.550824      -1768.85       1768.85       9962.25       11731.1    
   9  0.433835     -0.835090      -2681.71       2681.71       10586.1       13267.8    
  10  0.298626      -1.20856      -3881.04       3881.04       10785.9       14667.0    
  11  0.269991      -1.30937      -4204.75       4204.75       10596.7       14801.5    
  12  0.884826     -0.122364      -392.946       392.946       9982.79       10375.7    
  13  0.664124     -0.409287      -1314.34       1314.34       10722.7       12037.1    
  14  0.580836     -0.543287      -1744.65       1744.65       10940.5       12685.2    
  15  0.285501      -1.25351      -4025.37       4025.37       10772.0       14797.4    
  16  0.690757     -0.369967      -1188.07       1188.07       9749.08       10937.2    
  17  0.578320     -0.547628      -1758.59       1758.59       10656.4       12415.0    
  18  0.563230     -0.574067      -1843.49       1843.49       10150.3       11993.8    
  19  0.681565     -0.383363      -1231.09       1231.09       10670.0       11901.0    
  20  0.453362     -0.791065      -2540.33       2540.33       10999.7       13540.0    
  21  0.645457     -0.437797      -1405.89       1405.89       9218.69       10624.6    
  22  0.982222E-01  -2.32052      -7451.86       7451.86       10400.6       17852.5    
  23  0.843064     -0.170712      -548.206       548.206       10200.7       10748.9    
  24  0.505683     -0.681845      -2189.60       2189.60       10780.5       12970.1    
  25  0.350376      -1.04875      -3367.83       3367.83       10683.4       14051.3    
  26  0.367167      -1.00194      -3217.51       3217.51       10689.6       13907.2    
  27  0.268175      -1.31611      -4226.41       4226.41       10377.1       14603.5    
  28  0.989085E-01  -2.31356      -7429.50       7429.50       10625.7       18055.2    
  29  0.349392      -1.05156      -3376.86       3376.86       10673.5       14050.4    
  30  0.945468     -0.560755E-01  -180.074       180.074       10421.9       10602.0    
  31  0.305400      -1.18613      -3809.00       3809.00       10751.5       14560.5    
  32  0.942706     -0.590006E-01  -189.468       189.468       10259.5       10449.0    
  33  0.778346     -0.250584      -804.696       804.696       10667.9       11472.6    
  34  0.256449      -1.36083      -4370.00       4370.00       10728.0       15098.0    
  35  0.338120      -1.08436      -3482.17       3482.17       10691.8       14174.0    
  36  0.644609     -0.439112      -1410.11       1410.11       10933.5       12343.6    
  37  0.420837     -0.865509      -2779.39       2779.39       10936.3       13715.7    
  38  0.793406     -0.231421      -743.157       743.157       10945.3       11688.5    
  39  0.685561     -0.377517      -1212.32       1212.32       12448.4       13660.7    
  40  0.278740      -1.27748      -4102.34       4102.34       10614.6       14717.0    
  41  0.414078     -0.881700      -2831.39       2831.39       10632.8       13464.2    
  42  0.999720     -0.280334E-03 -0.900231      0.900231       10881.4       10882.3    
  43  0.714259     -0.336509      -1080.63       1080.63       10457.4       11538.0    
  44  0.713371     -0.337753      -1084.62       1084.62       10759.7       11844.3    
  45  0.451360     -0.795490      -2554.55       2554.55       10934.3       13488.9    
  46  0.887280     -0.119595      -384.054       384.054       14204.3       14588.4    
  47  0.234319      -1.45107      -4659.81       4659.81       10694.2       15354.0    
  48  0.277567E-01  -3.58428      -11510.1       11510.1       10689.1       22199.3    
  49  0.582411     -0.540579      -1735.95       1735.95       9848.91       11584.9    
  50  0.969019     -0.314707E-01  -101.061       101.061       10208.4       10309.5    
  51  0.441889     -0.816696      -2622.64       2622.64       11009.2       13631.9    
  52  0.150247      -1.89548      -6086.91       6086.91       14654.1       20741.0    
  53  0.901555E-01  -2.40622      -7727.05       7727.05       10864.8       18591.9    
  54  0.274120      -1.29419      -4156.01       4156.01       10804.9       14960.9    
  55  0.166801      -1.79095      -5751.26       5751.26       10526.7       16278.0    
  56  0.783053     -0.244555      -785.336       785.336       10571.1       11356.4    
  57  0.541655     -0.613126      -1968.92       1968.92       10358.9       12327.8    
  58  0.113786      -2.17344      -6979.52       6979.52       10758.2       17737.7    
  59  0.794080     -0.230571      -740.428       740.428       10991.2       11731.6    
  60  0.266758      -1.32141      -4243.43       4243.43       10584.0       14827.4    
  61  0.637690     -0.449903      -1444.77       1444.77       10743.7       12188.4    
  62  0.912681     -0.913685E-01  -293.410       293.410       10723.2       11016.6    
  63  0.303728      -1.19162      -3826.64       3826.64       10566.3       14392.9    
  64  0.318303      -1.14475      -3676.12       3676.12       9565.36       13241.5    
loop,thermsimp(1:2)       18   3083.11       3937.00    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97      10455.94          0.88          1.10         22.97          0.36          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98      10297.79          0.89          1.09         23.02          0.37          0.04         25.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10297.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       18
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       19
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       97     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -3343.94       3343.94       10208.4       13552.4    
   2  0.270835E-01  -3.60883      -11589.0       11589.0       9982.79       21571.8    
   3  0.923755     -0.793087E-01  -254.683       254.683       10259.5       10514.2    
   4  0.535520     -0.624517      -2005.50       2005.50       10000.2       12005.7    
   5  0.629344     -0.463078      -1487.07       1487.07       10421.9       11909.0    
   6  0.572648E-01  -2.86007      -9184.49       9184.49       9218.69       18403.2    
   7  0.353113E-01  -3.34355      -10737.1       10737.1       10200.7       20937.8    
   8  0.580838     -0.543283      -1744.63       1744.63       10881.4       12626.0    
   9  0.370403     -0.993164      -3189.33       3189.33       9749.08       12938.4    
  10  0.443010     -0.814162      -2614.50       2614.50       10723.2       13337.7    
  11  0.188704      -1.66757      -5355.05       5355.05       10952.8       16307.9    
  12  0.177608      -1.72818      -5549.67       5549.67       10888.5       16438.2    
  13  0.694998     -0.363847      -1168.41       1168.41       10571.1       11739.5    
  14  0.160742      -1.82796      -5870.09       5870.09       10667.9       16538.0    
  15  0.290050      -1.23770      -3974.61       3974.61       10457.4       14432.0    
  16  0.441138E-01  -3.12098      -10022.4       10022.4       9848.91       19871.3    
  17  0.372461     -0.987622      -3171.54       3171.54       10945.3       14116.8    
  18  0.652779     -0.426517      -1369.67       1369.67       9962.25       11331.9    
  19  0.998108     -0.189387E-02  -6.08177       6.08177       10991.2       10997.3    
  20  0.741140     -0.299566      -961.992       961.992       10759.7       11721.7    
  21  0.623042     -0.473141      -1519.39       1519.39       10670.0       12189.3    
  22  0.504617     -0.683955      -2196.37       2196.37       10150.3       12346.6    
  23  0.872499     -0.136394      -438.000       438.000       10722.7       11160.7    
  24  0.142620      -1.94757      -6254.20       6254.20       10743.7       16997.9    
  25  0.580285     -0.544236      -1747.70       1747.70       10358.9       12106.6    
  26  0.860063E-01  -2.45334      -7878.36       7878.36       10933.5       18811.8    
  27  0.401846     -0.911687      -2927.69       2927.69       10656.4       13584.1    
  28  0.161242      -1.82485      -5860.12       5860.12       10940.5       16800.7    
  29  0.550753     -0.596469      -1915.43       1915.43       10780.5       12696.0    
  30  0.815012     -0.204553      -656.876       656.876       10526.9       11183.8    
  31  0.438663     -0.824024      -2646.17       2646.17       10157.0       12803.2    
  32  0.542283     -0.611968      -1965.20       1965.20       9565.36       11530.6    
  33  0.943132E-01  -2.36113      -7582.27       7582.27       10586.1       18168.4    
  34  0.236587      -1.44144      -4628.87       4628.87       10632.8       15261.6    
  35  0.283068      -1.26207      -4052.86       4052.86       10934.3       14987.2    
  36  0.973178     -0.271886E-01  -87.3103       87.3103       10999.7       11087.0    
  37  0.596723     -0.516302      -1657.99       1657.99       11009.2       12667.2    
  38  0.595114     -0.519003      -1666.66       1666.66       12448.4       14115.1    
  39  0.948736     -0.526250E-01  -168.994       168.994       10936.3       11105.3    
  40  0.216072E-01  -3.83473      -12314.4       12314.4       9778.80       22093.2    
  41  0.440213     -0.820496      -2634.85       2634.85       10689.6       13324.5    
  42  0.905197     -0.996023E-01  -319.851       319.851       10673.5       10993.4    
  43  0.158396      -1.84266      -5917.30       5917.30       10683.4       16600.7    
  44  0.287789      -1.24553      -3999.74       3999.74       10691.8       14691.6    
  45  0.238244      -1.43446      -4606.46       4606.46       10566.3       15172.8    
  46  0.363881      -1.01093      -3246.38       3246.38       10751.5       13997.8    
  47  0.828805     -0.187771      -602.986       602.986       14204.3       14807.3    
  48  0.587140     -0.532492      -1709.98       1709.98       10377.1       12087.1    
  49  0.141687      -1.95414      -6275.29       6275.29       10785.9       17061.2    
  50  0.879115     -0.128839      -413.739       413.739       10614.6       11028.4    
  51  0.742190     -0.298150      -957.446       957.446       10772.0       11729.4    
  52  0.218958      -1.51887      -4877.53       4877.53       10368.8       15246.3    
  53  0.333192      -1.09904      -3529.32       3529.32       10596.7       14126.1    
  54  0.356774      -1.03065      -3309.72       3309.72       10584.0       13893.7    
  55  0.739597     -0.301650      -968.685       968.685       10804.9       11773.6    
  56  0.224658E-01  -3.79576      -12189.3       12189.3       10728.0       22917.3    
  57  0.338214      -1.08408      -3481.27       3481.27       10694.2       14175.5    
  58  0.227014      -1.48275      -4761.52       4761.52       10526.7       15288.2    
  59  0.289792E-01  -3.54118      -11371.7       11371.7       10758.2       22129.9    
  60  0.871226     -0.137854      -442.689       442.689       10400.6       10843.3    
  61  0.159622      -1.83495      -5892.54       5892.54       10625.7       16518.3    
  62  0.581826     -0.541584      -1739.18       1739.18       10864.8       12604.0    
  63  0.733467E-02  -4.91514      -15783.9       15783.9       14654.1       30438.0    
  64  0.646078     -0.436835      -1402.80       1402.80       10297.8       11700.6    
loop,thermsimp(1:2)       19   3343.94       11589.0    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99       9645.91          0.88          1.11         23.02          0.34          0.05         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    100      11161.04          0.89          1.12         22.98          0.30          0.04         25.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9645.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       19
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       20
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       99     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -2010.14       2010.14       10259.5       12269.7    
   2  0.288348      -1.24359      -3993.52       3993.52       10400.6       14394.2    
   3  0.910112E-01  -2.39677      -7696.72       7696.72       10673.5       18370.2    
   4  0.213812      -1.54266      -4953.91       4953.91       10991.2       15945.1    
   5  0.575222     -0.552999      -1775.84       1775.84       10614.6       12390.5    
   6  0.855707     -0.155827      -500.405       500.405       10999.7       11500.1    
   7  0.818692     -0.200047      -642.409       642.409       10936.3       11578.7    
   8  0.309911      -1.17147      -3761.93       3761.93       10722.7       14484.6    
   9  0.773438     -0.256910      -825.010       825.010       10526.9       11351.9    
  10  0.440502E-01  -3.12243      -10027.0       10027.0       9962.25       19989.2    
  11  0.211655      -1.55280      -4986.47       4986.47       9565.36       14551.8    
  12  0.713577     -0.337465      -1083.70       1083.70       10297.8       11381.5    
  13  0.927405     -0.753650E-01  -242.019       242.019       10759.7       11001.7    
  14  0.360229      -1.02101      -3278.77       3278.77       10772.0       14050.7    
  15  0.911872     -0.922553E-01  -296.258       296.258       10571.1       10867.4    
  16  0.800691     -0.222280      -713.805       713.805       10804.9       11518.7    
  17  0.169830      -1.77296      -5693.48       5693.48       10421.9       16115.4    
  18  0.581014     -0.542980      -1743.66       1743.66       10000.2       11743.9    
  19  0.869395     -0.139958      -449.444       449.444       10377.1       10826.5    
  20  0.773880     -0.256338      -823.175       823.175       10358.9       11182.0    
  21  0.496085     -0.701008      -2251.14       2251.14       10670.0       12921.1    
  22  0.530037     -0.634809      -2038.55       2038.55       10150.3       12188.8    
  23  0.239414      -1.42956      -4590.73       4590.73       10864.8       15455.6    
  24  0.595728     -0.517972      -1663.35       1663.35       10881.4       12544.8    
  25  0.170793      -1.76730      -5675.32       5675.32       11009.2       16684.5    
  26  0.983027     -0.171183E-01  -54.9717       54.9717       10780.5       10835.5    
  27  0.608714     -0.496407      -1594.10       1594.10       10157.0       11751.2    
  28  0.518727     -0.656378      -2107.82       2107.82       9749.08       11856.9    
  29  0.887918     -0.118876      -381.744       381.744       10689.6       11071.4    
  30  0.140498      -1.96256      -6302.34       6302.34       10723.2       17025.5    
  31  0.256308      -1.36138      -4371.76       4371.76       10208.4       14580.2    
  32  0.887238     -0.119642      -384.203       384.203       10656.4       11040.6    
  33  0.306042      -1.18403      -3802.27       3802.27       10584.0       14386.3    
  34  0.993873     -0.614632E-02  -19.7376       19.7376       10751.5       10771.2    
  35  0.275412E-01  -3.59207      -11535.2       11535.2       12448.4       23983.6    
  36  0.698960     -0.358161      -1150.16       1150.16       10945.3       12095.5    
  37  0.268424      -1.31519      -4223.43       4223.43       10596.7       14820.2    
  38  0.580935E-01  -2.84570      -9138.35       9138.35       10694.2       19832.6    
  39  0.242705      -1.41591      -4546.89       4546.89       10457.4       15004.3    
  40  0.443517     -0.813019      -2610.84       2610.84       10691.8       13302.7    
  41  0.904179     -0.100728      -323.465       323.465       14204.3       14527.8    
  42  0.454025     -0.789603      -2535.64       2535.64       10934.3       13470.0    
  43  0.592994     -0.522572      -1678.13       1678.13       10566.3       12244.4    
  44  0.401796     -0.911812      -2928.09       2928.09       10368.8       13296.9    
  45  0.130776      -2.03427      -6532.62       6532.62       10632.8       17165.4    
  46  0.709753     -0.342839      -1100.95       1100.95       10526.7       11627.7    
  47  0.388071     -0.946568      -3039.70       3039.70       10952.8       13992.5    
  48  0.362521      -1.01467      -3258.40       3258.40       10888.5       14146.9    
  49  0.285379      -1.25394      -4026.75       4026.75       10625.7       14652.5    
  50  0.286508      -1.24999      -4014.07       4014.07       10667.9       14681.9    
  51  0.951542     -0.496714E-01  -159.509       159.509       10683.4       10842.9    
  52  0.122933      -2.09612      -6731.23       6731.23       10940.5       17671.8    
  53  0.210928      -1.55624      -4997.52       4997.52       10743.7       15741.2    
  54  0.860093     -0.150715      -483.989       483.989       10785.9       11269.9    
  55  0.997563     -0.243951E-02  -7.83396       7.83396       10586.1       10593.9    
  56  0.750720     -0.286722      -920.746       920.746       9218.69       10139.4    
  57  0.667101     -0.404814      -1299.97       1299.97       10933.5       12233.4    
  58  0.508750E-01  -2.97838      -9564.43       9564.43       9848.91       19413.3    
  59  0.552474     -0.593349      -1905.41       1905.41       10200.7       12106.1    
  60  0.514478     -0.664602      -2134.23       2134.23       9982.79       12117.0    
  61  0.539834     -0.616494      -1979.74       1979.74       9778.80       11758.5    
  62  0.610888     -0.492841      -1582.65       1582.65       10758.2       12340.8    
  63  0.328075      -1.11451      -3579.02       3579.02       10728.0       14307.0    
  64  0.894692     -0.111276      -357.340       357.340       9645.91       10003.3    
loop,thermsimp(1:2)       20   2010.14       3993.52    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101      10473.97          0.88          1.10         23.07          0.34          0.04         25.43
Just calling func    0   0         25.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102      10570.46          0.89          1.10         23.05          0.20          0.04         25.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    10474.        3.766    -0.8905      3.454     -100.0     0.1868    
                     -0.6978      2.398     -100.0      2.181     0.9244    
                      0.9244     0.2435E-01  2.400      0.000      0.000    
                      -1.681      0.000      0.000      0.000     -1.221    

                      -2.500      8981.     0.1299E+05 -575.4     -1726.    
                      -2.000     -3.773     -2.773     -5.073     -3.773    
                      -13.66     -2.599      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.3293E-01-0.5532E-01  0.000    -0.1367E-01
                     -0.4553E-01-0.1570    -0.4414    -0.1532     0.2739E-01

                     -0.6783    -0.9244      0.000     0.2158     0.7401E-01
                      0.8541E-01-0.1125    -0.3454E-01 0.1416E-01-0.1056    
                     -0.9255E-01 0.7211E-01-0.1872     -1.131      0.000    

                     -0.4244    -0.9244      2.773     -1.197      0.000    
                       0.000      9.138      9.238     -4622.     -4.000    
                      0.1135     0.1135      9.038      8.863     -4622.    

                      -4.000     0.1135     0.1135      9.238      9.038    
                      -5329.     -4.000     0.1135     0.1135      9.438    
                       8.838     -5357.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10473.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       20
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       21
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      101     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -3894.02       3894.02       9645.91       13539.9    
   2  0.663536     -0.410173      -1317.18       1317.18       9218.69       10535.9    
   3  0.263982      -1.33188      -4277.03       4277.03       10586.1       14863.1    
   4  0.792402     -0.232686      -747.222       747.222       10751.5       11498.7    
   5  0.624731     -0.470434      -1510.70       1510.70       10377.1       11887.8    
   6  0.170977      -1.76622      -5671.85       5671.85       10780.5       16452.4    
   7  0.362487      -1.01477      -3258.71       3258.71       10683.4       13942.1    
   8  0.659245     -0.416659      -1338.01       1338.01       10571.1       11909.1    
   9  0.746481E-03  -7.20014      -23121.7       23121.7       10759.7       33881.4    
  10  0.690046     -0.370998      -1191.38       1191.38       10656.4       11847.7    
  11  0.905636     -0.991173E-01  -318.294       318.294       10689.6       11007.9    
  12  0.317643      -1.14683      -3682.79       3682.79       10358.9       14041.7    
  13  0.321948      -1.13336      -3639.56       3639.56       10785.9       14425.5    
  14  0.293974      -1.22426      -3931.46       3931.46       10526.9       14458.4    
  15  0.679275     -0.386729      -1241.90       1241.90       10297.8       11539.7    
  16  0.180340      -1.71291      -5500.65       5500.65       10999.7       16500.3    
  17  0.539600     -0.616927      -1981.13       1981.13       10804.9       12786.1    
  18  0.260315      -1.34586      -4321.94       4321.94       10936.3       15258.3    
  19  0.256777      -1.35955      -4365.89       4365.89       10526.7       14892.6    
  20  0.518851     -0.656138      -2107.05       2107.05       10000.2       12107.3    
  21  0.485887     -0.721780      -2317.84       2317.84       10157.0       12474.9    
  22  0.562814     -0.574805      -1845.86       1845.86       9778.80       11624.7    
  23  0.906369     -0.983082E-01  -315.696       315.696       9749.08       10064.8    
  24  0.332143      -1.10219      -3539.44       3539.44       10945.3       14484.7    
  25  0.912001E-01  -2.39470      -7690.06       7690.06       10200.7       17890.8    
  26  0.302569      -1.19545      -3838.91       3838.91       9982.79       13821.7    
  27  0.362040      -1.01600      -3262.67       3262.67       10150.3       13412.9    
  28  0.630870     -0.460656      -1479.30       1479.30       10933.5       12412.8    
  29  0.685312     -0.377881      -1213.48       1213.48       10566.3       11779.8    
  30  0.329910      -1.10894      -3561.11       3561.11       10259.5       13820.6    
  31  0.906630E-01  -2.40061      -7709.03       7709.03       10758.2       18467.2    
  32  0.339749      -1.07955      -3466.74       3466.74       10614.6       14081.4    
  33  0.783039     -0.244573      -785.392       785.392       10881.4       11666.8    
  34  0.322673      -1.13112      -3632.34       3632.34       10670.0       14302.3    
  35  0.255311      -1.36527      -4384.27       4384.27       10368.8       14753.0    
  36  0.645921     -0.437078      -1403.58       1403.58       10691.8       12095.4    
  37  0.240122      -1.42661      -4581.24       4581.24       10934.3       15515.6    
  38  0.224638      -1.49326      -4795.29       4795.29       10952.8       15748.1    
  39  0.682659     -0.381760      -1225.94       1225.94       10772.0       11997.9    
  40  0.533856     -0.627629      -2015.49       2015.49       10888.5       12904.0    
  41  0.439620E-02  -5.42701      -17427.7       17427.7       10728.0       28155.7    
  42  0.409891     -0.891863      -2864.02       2864.02       10584.0       13448.0    
  43  0.379406     -0.969149      -3112.21       3112.21       10400.6       13512.9    
  44  0.982111     -0.180514E-01  -57.9682       57.9682       10722.7       10780.7    
  45  0.243530      -1.41251      -4535.98       4535.98       14204.3       18740.3    
  46  0.709323     -0.343445      -1102.90       1102.90       9565.36       10668.3    
  47  0.212014      -1.55110      -4981.03       4981.03       10208.4       15189.4    
  48  0.530919     -0.633146      -2033.21       2033.21       10625.7       12658.9    
  49  0.439600     -0.821890      -2639.32       2639.32       10667.9       13307.2    
  50  0.304385      -1.18946      -3819.70       3819.70       10596.7       14416.4    
  51  0.850253     -0.162221      -520.938       520.938       10457.4       10978.4    
  52  0.686564     -0.376055      -1207.62       1207.62       10864.8       12072.5    
  53  0.894299     -0.111715      -358.748       358.748       10743.7       11102.4    
  54  0.724097E-02  -4.92800      -15825.2       15825.2       10991.2       26816.4    
  55  0.666382     -0.405892      -1303.43       1303.43       10421.9       11725.3    
  56  0.216072      -1.53214      -4920.15       4920.15       11009.2       15929.4    
  57  0.481454     -0.730944      -2347.27       2347.27       10723.2       13070.4    
  58  0.107413      -2.23107      -7164.60       7164.60       10632.8       17797.4    
  59  0.943557     -0.580990E-01  -186.572       186.572       10940.5       11127.1    
  60  0.259811      -1.34780      -4328.17       4328.17       10673.5       15001.7    
  61  0.526852     -0.640836      -2057.91       2057.91       9848.91       11906.8    
  62  0.306319E-01  -3.48571      -11193.6       11193.6       10694.2       21887.8    
  63  0.180513      -1.71195      -5497.57       5497.57       9962.25       15459.8    
  64  0.901495     -0.103701      -333.013       333.013       10474.0       10807.0    
loop,thermsimp(1:2)       21   3894.02       1317.18    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103      10217.28          0.88          1.10         23.09          0.46          0.04         25.57
Just calling func    0   0         25.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104       9790.36          0.90          1.09         23.00          0.51          0.05         25.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9790.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       21
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       22
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      103     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -3076.31       3076.31       9749.08       12825.4    
   2  0.741480     -0.299107      -960.516       960.516       9218.69       10179.2    
   3  0.138898      -1.97401      -6339.12       6339.12       9565.36       15904.5    
   4  0.751974E-01  -2.58764      -8309.64       8309.64       10722.7       19032.4    
   5  0.824485     -0.192996      -619.765       619.765       10474.0       11093.7    
   6  0.982900     -0.172482E-01  -55.3890       55.3890       10457.4       10512.8    
   7  0.693409     -0.366136      -1175.77       1175.77       10689.6       11865.4    
   8  0.941572     -0.602045E-01  -193.334       193.334       10743.7       10937.0    
   9  0.812713     -0.207378      -665.949       665.949       10940.5       11606.5    
  10  0.879507     -0.128393      -412.307       412.307       10751.5       11163.8    
  11  0.418958     -0.869984      -2793.76       2793.76       10297.8       13091.6    
  12  0.314952      -1.15533      -3710.10       3710.10       9778.80       13488.9    
  13  0.812426     -0.207731      -667.083       667.083       10881.4       11548.5    
  14  0.213788      -1.54277      -4954.27       4954.27       10421.9       15376.2    
  15  0.521629     -0.650798      -2089.90       2089.90       10566.3       12656.2    
  16  0.287143      -1.24777      -4006.96       4006.96       10656.4       14663.3    
  17  0.518340     -0.657125      -2110.21       2110.21       10377.1       12487.3    
  18  0.712802E-02  -4.94372      -15875.7       15875.7       9848.91       25724.6    
  19  0.579935     -0.544838      -1749.63       1749.63       10571.1       12320.7    
  20  0.508101E-02  -5.28224      -16962.8       16962.8       10772.0       27734.8    
  21  0.984466     -0.156557E-01  -50.2750       50.2750       10864.8       10915.1    
  22  0.394325     -0.930579      -2988.35       2988.35       10691.8       13680.2    
  23  0.837309     -0.177562      -570.202       570.202       10000.2       10570.4    
  24  0.683519     -0.380501      -1221.90       1221.90       10933.5       12155.4    
  25  0.892337     -0.113912      -365.803       365.803       10157.0       10522.9    
  26  0.297675      -1.21175      -3891.28       3891.28       10625.7       14517.0    
  27  0.566054     -0.569065      -1827.43       1827.43       10804.9       12632.4    
  28  0.325499E-01  -3.42498      -10998.6       10998.6       10888.5       21887.1    
  29  0.721169     -0.326882      -1049.71       1049.71       10723.2       11772.9    
  30  0.370449     -0.993040      -3188.93       3188.93       10667.9       13856.8    
  31  0.398952     -0.918913      -2950.89       2950.89       10150.3       13101.2    
  32  0.942469     -0.592518E-01  -190.274       190.274       10584.0       10774.3    
  33  0.379045     -0.970101      -3115.27       3115.27       10400.6       13515.9    
  34  0.218373      -1.52155      -4886.13       4886.13       9645.91       14532.0    
  35  0.413944     -0.882024      -2832.43       2832.43       10259.5       13091.9    
  36  0.452532     -0.792896      -2546.21       2546.21       9982.79       12529.0    
  37  0.938896     -0.630505E-01  -202.473       202.473       10683.4       10885.9    
  38  0.389299     -0.943409      -3029.55       3029.55       10358.9       13388.4    
  39  0.943794     -0.578471E-01  -185.764       185.764       10614.6       10800.4    
  40  0.706887     -0.346884      -1113.94       1113.94       10670.0       11783.9    
  41  0.274873      -1.29145      -4147.20       4147.20       10596.7       14743.9    
  42  0.343864      -1.06751      -3428.07       3428.07       10785.9       14214.0    
  43  0.869527E-01  -2.44239      -7843.21       7843.21       10526.9       18370.1    
  44  0.859615     -0.151271      -485.773       485.773       10945.3       11431.1    
  45  0.264079      -1.33151      -4275.85       4275.85       10368.8       14644.6    
  46  0.494871     -0.703457      -2259.00       2259.00       10586.1       12845.1    
  47  0.112943      -2.18087      -7003.41       7003.41       10526.7       17530.1    
  48  0.358273      -1.02646      -3296.26       3296.26       10673.5       13969.8    
  49  0.215257      -1.53592      -4932.28       4932.28       10208.4       15140.7    
  50  0.441681     -0.817166      -2624.15       2624.15       10936.3       13560.5    
  51  0.888276     -0.118473      -380.451       380.451       9962.25       10342.7    
  52  0.780286     -0.248095      -796.704       796.704       10934.3       11731.0    
  53  0.488747     -0.715911      -2298.99       2298.99       10952.8       13251.8    
  54  0.683795     -0.380097      -1220.60       1220.60       11009.2       12229.8    
  55  0.466986     -0.761456      -2445.25       2445.25       10780.5       13225.8    
  56  0.900497     -0.104809      -336.570       336.570       10999.7       11336.2    
  57  0.876058     -0.132323      -424.925       424.925       10632.8       11057.7    
  58  0.413808     -0.882354      -2833.49       2833.49       10200.7       13034.2    
  59  0.268165      -1.31615      -4226.54       4226.54       10758.2       14984.7    
  60  0.637465     -0.450255      -1445.90       1445.90       14204.3       15650.2    
  61  0.476344     -0.741616      -2381.54       2381.54       10694.2       13075.8    
  62  0.878474     -0.129569      -416.083       416.083       10991.2       11407.3    
  63  0.185973      -1.68216      -5401.88       5401.88       10728.0       16129.9    
  64  0.802667E-03  -7.12757      -22888.7       22888.7       9790.36       32679.0    
loop,thermsimp(1:2)       22   3076.31       960.516    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105      11954.12          0.88          1.11         23.02          0.24          0.04         25.28
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  11954.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       22
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       23
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      104     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -3583.12       3583.12       9218.69       12801.8    
   2  0.736029     -0.306486      -984.213       984.213       9962.25       10946.5    
   3  0.608436     -0.496864      -1595.57       1595.57       10457.4       12053.0    
   4  0.584882     -0.536346      -1722.36       1722.36       10157.0       11879.4    
   5  0.617514     -0.482053      -1548.01       1548.01       10000.2       11548.2    
   6  0.376473     -0.976909      -3137.13       3137.13       10584.0       13721.1    
   7  0.535145     -0.625218      -2007.75       2007.75       10614.6       12622.4    
   8  0.341783      -1.07358      -3447.57       3447.57       10683.4       14131.0    
   9  0.804208E-01  -2.52048      -8093.98       8093.98       10864.8       18958.8    
  10  0.660499     -0.414760      -1331.91       1331.91       10743.7       12075.6    
  11  0.739860E-01  -2.60388      -8361.79       8361.79       10632.8       18994.6    
  12  0.203251      -1.59331      -5116.58       5116.58       10474.0       15590.5    
  13  0.637025     -0.450946      -1448.12       1448.12       10751.5       12199.6    
  14  0.687460     -0.374752      -1203.43       1203.43       10999.7       12203.1    
  15  0.663581     -0.410105      -1316.96       1316.96       10991.2       12308.2    
  16  0.579690     -0.545263      -1750.99       1750.99       10945.3       12696.3    
  17  0.775653     -0.254050      -815.828       815.828       10881.4       11697.2    
  18  0.284124      -1.25834      -4040.90       4040.90       10940.5       14981.4    
  19  0.317710      -1.14662      -3682.11       3682.11       10934.3       14616.4    
  20  0.958871     -0.419990E-01  -134.871       134.871       10723.2       10858.1    
  21  0.582932     -0.539685      -1733.08       1733.08       10670.0       12403.0    
  22  0.905476     -0.992942E-01  -318.862       318.862       10689.6       11008.5    
  23  0.225214      -1.49070      -4787.07       4787.07       10933.5       15720.5    
  24  0.618260     -0.480846      -1544.13       1544.13       11009.2       12553.4    
  25  0.608706     -0.496420      -1594.15       1594.15       10571.1       12165.3    
  26  0.651052     -0.429165      -1378.17       1378.17       10377.1       11755.3    
  27  0.138439E-02  -6.58249      -21138.3       21138.3       9982.79       31121.0    
  28  0.157375      -1.84913      -5938.07       5938.07       10804.9       16743.0    
  29  0.168063      -1.78342      -5727.06       5727.06       10566.3       16293.4    
  30  0.924354     -0.786598E-01  -252.599       252.599       9749.08       10001.7    
  31  0.985585     -0.145204E-01  -46.6292       46.6292       10586.1       10632.7    
  32  0.540844E-01  -2.91721      -9367.99       9367.99       10200.7       19568.7    
  33  0.535345     -0.624843      -2006.55       2006.55       10694.2       12700.8    
  34  0.736351     -0.306048      -982.808       982.808       10297.8       11280.6    
  35  0.283062E-01  -3.56467      -11447.2       11447.2       10259.5       21706.7    
  36  0.690743     -0.369987      -1188.13       1188.13       10150.3       11338.4    
  37  0.260994      -1.34326      -4313.58       4313.58       10780.5       15094.1    
  38  0.243637      -1.41208      -4534.58       4534.58       10952.8       15487.4    
  39  0.850226     -0.162253      -521.041       521.041       10358.9       10879.9    
  40  0.589307     -0.528809      -1698.15       1698.15       9778.80       11477.0    
  41  0.515087     -0.663420      -2130.43       2130.43       10400.6       12531.1    
  42  0.348855      -1.05310      -3381.80       3381.80       10936.3       14318.1    
  43  0.791407     -0.233943      -751.258       751.258       10691.8       11443.1    
  44  0.370775     -0.992160      -3186.11       3186.11       10667.9       13854.0    
  45  0.676021     -0.391531      -1257.32       1257.32       10673.5       11930.8    
  46  0.125601      -2.07465      -6662.28       6662.28       10785.9       17448.2    
  47  0.582904     -0.539733      -1733.24       1733.24       10625.7       12359.0    
  48  0.818994     -0.199679      -641.225       641.225       9645.91       10287.1    
  49  0.291406      -1.23304      -3959.63       3959.63       10368.8       14328.4    
  50  0.887104     -0.119794      -384.691       384.691       10656.4       11041.1    
  51  0.666242     -0.406102      -1304.11       1304.11       10596.7       11900.9    
  52  0.931047     -0.714460E-01  -229.434       229.434       10758.2       10987.6    
  53  0.169651      -1.77401      -5696.85       5696.85       10208.4       15905.3    
  54  0.228429      -1.47653      -4741.56       4741.56       10421.9       15163.5    
  55  0.453181     -0.791463      -2541.61       2541.61       14204.3       16746.0    
  56  0.376518     -0.976789      -3136.75       3136.75       9565.36       12702.1    
  57  0.551543     -0.595035      -1910.83       1910.83       10728.0       12638.9    
  58  0.837469     -0.177371      -569.590       569.590       10526.7       11096.3    
  59  0.436148     -0.829773      -2664.64       2664.64       10526.9       13191.5    
  60  0.245765      -1.40338      -4506.65       4506.65       10722.7       15229.4    
  61  0.727782     -0.317754      -1020.40       1020.40       10888.5       11908.9    
  62  0.677441     -0.389433      -1250.58       1250.58       9848.91       11099.5    
  63  0.835222     -0.180057      -578.216       578.216       10772.0       11350.2    
  64  0.964839     -0.357941E-01  -114.945       114.945       11954.1       12069.1    
loop,thermsimp(1:2)       23   3583.12       984.213    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106      11273.71          0.88          1.10         23.03          0.35          0.04         25.41
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    107      11354.13          0.89          1.10         22.98          0.27          0.04         25.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  11273.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       23
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       24
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      106     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -3958.57       3958.57       9749.08       13707.7    
   2  0.991852     -0.818183E-02  -26.2742       26.2742       9645.91       9672.19    
   3  0.317368      -1.14769      -3685.57       3685.57       10586.1       14271.7    
   4  0.737330     -0.304720      -978.542       978.542       10723.2       11701.7    
   5  0.834641     -0.180753      -580.449       580.449       10358.9       10939.3    
   6  0.464401     -0.767007      -2463.08       2463.08       9962.25       12425.3    
   7  0.592116     -0.524053      -1682.88       1682.88       10758.2       12441.1    
   8  0.464372     -0.767069      -2463.27       2463.27       10689.6       13152.9    
   9  0.636055E-01  -2.75505      -8847.26       8847.26       10656.4       19503.6    
  10  0.712927     -0.338376      -1086.62       1086.62       10526.7       11613.3    
  11  0.265597      -1.32578      -4257.44       4257.44       9848.91       14106.4    
  12  0.152318      -1.88178      -6042.94       6042.94       10297.8       16340.7    
  13  0.629580     -0.462703      -1485.87       1485.87       10150.3       11636.1    
  14  0.849464     -0.163150      -523.919       523.919       10772.0       11295.9    
  15  0.487816     -0.717817      -2305.11       2305.11       10691.8       12996.9    
  16  0.374667     -0.981718      -3152.58       3152.58       9778.80       12931.4    
  17  0.657383     -0.419488      -1347.09       1347.09       10000.2       11347.3    
  18  0.846901     -0.166172      -533.624       533.624       10881.4       11415.0    
  19  0.201185      -1.60353      -5149.39       5149.39       10377.1       15526.5    
  20  0.771980     -0.258797      -831.071       831.071       10157.0       10988.1    
  21  0.507739     -0.677788      -2176.57       2176.57       10596.7       12773.3    
  22  0.280262      -1.27203      -4084.86       4084.86       10888.5       14973.4    
  23  0.285359      -1.25401      -4026.97       4026.97       10673.5       14700.5    
  24  0.246191      -1.40165      -4501.08       4501.08       10457.4       14958.5    
  25  0.559989E-01  -2.88242      -9256.28       9256.28       11954.1       21210.4    
  26  0.330462      -1.10726      -3555.74       3555.74       10743.7       14299.4    
  27  0.899405     -0.106022      -340.467       340.467       10571.1       10911.6    
  28  0.637003     -0.450981      -1448.23       1448.23       10751.5       12199.7    
  29  0.699726E-01  -2.65965      -8540.90       8540.90       10999.7       19540.6    
  30  0.677191     -0.389802      -1251.76       1251.76       10991.2       12243.0    
  31  0.649507     -0.431542      -1385.80       1385.80       10625.7       12011.5    
  32  0.527986     -0.638685      -2051.00       2051.00       10670.0       12721.0    
  33  0.374870E-01  -3.28376      -10545.1       10545.1       10400.6       20945.7    
  34  0.448697     -0.801407      -2573.55       2573.55       11009.2       13582.8    
  35  0.809612     -0.211200      -678.223       678.223       10614.6       11292.8    
  36  0.836235     -0.178846      -574.325       574.325       10728.0       11302.3    
  37  0.198161      -1.61867      -5198.02       5198.02       10945.3       16143.3    
  38  0.222702      -1.50192      -4823.09       4823.09       10694.2       15517.3    
  39  0.888863     -0.117812      -378.327       378.327       9565.36       9943.69    
  40  0.868267     -0.141256      -453.612       453.612       9218.69       9672.30    
  41  0.164066      -1.80749      -5804.35       5804.35       10526.9       16331.2    
  42  0.163797      -1.80912      -5809.61       5809.61       10584.0       16393.6    
  43  0.883498     -0.123867      -397.771       397.771       10667.9       11065.7    
  44  0.749983     -0.287705      -923.902       923.902       10683.4       11607.3    
  45  0.666691     -0.405428      -1301.94       1301.94       10936.3       12238.3    
  46  0.978530     -0.217038E-01  -69.6970       69.6970       10368.8       10438.5    
  47  0.442024     -0.816391      -2621.66       2621.66       10934.3       13556.0    
  48  0.228080      -1.47806      -4746.47       4746.47       10940.5       15687.0    
  49  0.226174      -1.48645      -4773.41       4773.41       10780.5       15554.0    
  50  0.388394     -0.945736      -3037.03       3037.03       10421.9       13458.9    
  51  0.257425      -1.35703      -4357.79       4357.79       10722.7       15080.5    
  52  0.707288     -0.346317      -1112.12       1112.12       10952.8       12064.9    
  53  0.518387     -0.657032      -2109.92       2109.92       10474.0       12583.9    
  54  0.628700     -0.464102      -1490.36       1490.36       10933.5       12423.8    
  55  0.981249     -0.189295E-01  -60.7880       60.7880       10208.4       10269.2    
  56  0.928260     -0.744431E-01  -239.058       239.058       10566.3       10805.4    
  57  0.752004E-02  -4.89018      -15703.8       15703.8       10804.9       26508.7    
  58  0.930611     -0.719140E-01  -230.936       230.936       14204.3       14435.3    
  59  0.552686     -0.592965      -1904.18       1904.18       10785.9       12690.1    
  60  0.695877     -0.362583      -1164.36       1164.36       10864.8       12029.2    
  61  0.432533     -0.838096      -2691.36       2691.36       10632.8       13324.1    
  62  0.127859      -2.05683      -6605.07       6605.07       10200.7       16805.8    
  63  0.304427      -1.18932      -3819.26       3819.26       10259.5       14078.8    
  64  0.938376     -0.636043E-01  -204.251       204.251       11273.7       11478.0    
loop,thermsimp(1:2)       24   3958.57       26.2742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108      10077.20          0.88          1.10         23.08          0.31          0.04         25.41
Just calling func    0   0         25.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109       9582.37          0.89          1.10         23.05          0.38          0.04         25.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9582.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       24
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       25
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      108     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -6181.15       6181.15       9645.91       15827.1    
   2  0.438196     -0.825090      -2649.60       2649.60       9218.69       11868.3    
   3  0.637359     -0.450422      -1446.43       1446.43       9565.36       11011.8    
   4  0.122813      -2.09709      -6734.35       6734.35       10208.4       16942.8    
   5  0.926899     -0.759107E-01  -243.771       243.771       10368.8       10612.5    
   6  0.456580     -0.783992      -2517.62       2517.62       10566.3       13083.9    
   7  0.988763     -0.113008E-01  -36.2902       36.2902       10571.1       10607.4    
   8  0.499609     -0.693930      -2228.41       2228.41       10358.9       12587.3    
   9  0.432617     -0.837902      -2690.74       2690.74       10157.0       12847.8    
  10  0.403570     -0.907406      -2913.94       2913.94       10667.9       13581.8    
  11  0.435824     -0.830517      -2667.03       2667.03       10614.6       13281.7    
  12  0.504807     -0.683579      -2195.17       2195.17       10772.0       12967.1    
  13  0.778763     -0.250048      -802.976       802.976       10728.0       11531.0    
  14  0.429140     -0.845972      -2716.66       2716.66       10000.2       12716.9    
  15  0.597763     -0.514562      -1652.40       1652.40       10881.4       12533.8    
  16  0.425932     -0.853476      -2740.75       2740.75       11273.7       14014.5    
  17  0.825778     -0.191430      -614.736       614.736       10683.4       11298.2    
  18  0.448772     -0.801241      -2573.01       2573.01       10526.7       13099.7    
  19  0.701335     -0.354770      -1139.27       1139.27       10150.3       11289.5    
  20  0.425857     -0.853651      -2741.32       2741.32       10723.2       13464.5    
  21  0.800815     -0.222126      -713.308       713.308       10625.7       11339.0    
  22  0.724239     -0.322634      -1036.07       1036.07       10864.8       11900.9    
  23  0.312194      -1.16413      -3738.35       3738.35       10952.8       14691.2    
  24  0.796592     -0.227412      -730.286       730.286       10751.5       11481.7    
  25  0.164146      -1.80700      -5802.79       5802.79       10936.3       16739.1    
  26  0.503041     -0.687083      -2206.42       2206.42       10991.2       13197.6    
  27  0.640838     -0.444978      -1428.95       1428.95       10933.5       12362.4    
  28  0.327752      -1.11550      -3582.18       3582.18       9962.25       13544.4    
  29  0.720325     -0.328053      -1053.47       1053.47       10758.2       11811.6    
  30  0.447570     -0.803922      -2581.62       2581.62       10474.0       13055.6    
  31  0.377461     -0.974289      -3128.72       3128.72       10785.9       13914.6    
  32  0.951264     -0.499633E-01  -160.446       160.446       10670.0       10830.4    
  33  0.610405     -0.493632      -1585.19       1585.19       10596.7       12181.9    
  34  0.564697     -0.571466      -1835.14       1835.14       9778.80       11613.9    
  35  0.993998     -0.601974E-02  -19.3311       19.3311       10691.8       10711.2    
  36  0.908032     -0.964757E-01  -309.811       309.811       10689.6       10999.5    
  37  0.731210     -0.313055      -1005.31       1005.31       10632.8       11638.1    
  38  0.818812     -0.199901      -641.939       641.939       10421.9       11063.9    
  39  0.423172     -0.859976      -2761.63       2761.63       10934.3       13696.0    
  40  0.554414     -0.589843      -1894.15       1894.15       11009.2       12903.4    
  41  0.244903E-01  -3.70948      -11912.2       11912.2       9749.08       21661.3    
  42  0.337898      -1.08501      -3484.28       3484.28       10259.5       13743.8    
  43  0.634521E-01  -2.75747      -8855.02       8855.02       9848.91       18703.9    
  44  0.824978     -0.192398      -617.845       617.845       10586.1       11204.0    
  45  0.954123     -0.469622E-01  -150.809       150.809       10743.7       10894.5    
  46  0.807852     -0.213376      -685.211       685.211       14204.3       14889.6    
  47  0.335430      -1.09234      -3507.82       3507.82       10673.5       14181.3    
  48  0.266194      -1.32353      -4250.24       4250.24       10457.4       14707.7    
  49  0.797818     -0.225874      -725.347       725.347       10888.5       11613.8    
  50  0.710601     -0.341644      -1097.11       1097.11       10722.7       11819.8    
  51  0.469059     -0.757026      -2431.03       2431.03       10694.2       13125.3    
  52  0.256457E-01  -3.66338      -11764.2       11764.2       10377.1       22141.3    
  53  0.620630     -0.477020      -1531.85       1531.85       10780.5       12312.4    
  54  0.600237     -0.510431      -1639.14       1639.14       10940.5       12579.7    
  55  0.959467     -0.413769E-01  -132.873       132.873       10945.3       11078.2    
  56  0.541492     -0.613428      -1969.89       1969.89       10526.9       12496.8    
  57  0.577789     -0.548547      -1761.54       1761.54       10297.8       12059.3    
  58  0.701570     -0.354435      -1138.19       1138.19       10584.0       11722.2    
  59  0.274557E-01  -3.59518      -11545.1       11545.1       10200.7       21745.8    
  60  0.584746     -0.536578      -1723.10       1723.10       10656.4       12379.5    
  61  0.131184      -2.03115      -6522.60       6522.60       10999.7       17522.3    
  62  0.986883     -0.132037E-01  -42.4009       42.4009       10400.6       10443.0    
  63  0.257198      -1.35791      -4360.63       4360.63       11954.1       16314.7    
  64  0.831173     -0.184917      -593.822       593.822       9582.37       10176.2    
loop,thermsimp(1:2)       25   6181.15       2649.60    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110      10350.37          0.90          1.10         23.00          0.59          0.05         25.63
Just calling func    0   0         25.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    111      10043.64          0.89          1.10         23.03          0.27          0.04         25.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10043.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       25
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       26
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      110     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -793.591       793.591       9582.37       10376.0    
   2  0.928800     -0.738619E-01  -237.192       237.192       10400.6       10637.8    
   3  0.727994     -0.317462      -1019.46       1019.46       10571.1       11590.6    
   4  0.109723E-01  -4.51238      -14490.5       14490.5       10368.8       24859.3    
   5  0.160096      -1.83198      -5883.00       5883.00       10691.8       16574.8    
   6  0.497079     -0.699006      -2244.71       2244.71       10670.0       12914.7    
   7  0.789473     -0.236389      -759.113       759.113       10743.7       11502.8    
   8  0.763780     -0.269476      -865.363       865.363       10689.6       11555.0    
   9  0.217288      -1.52653      -4902.13       4902.13       9565.36       14467.5    
  10  0.867642     -0.141976      -455.927       455.927       10421.9       10877.8    
  11  0.740966     -0.299800      -962.744       962.744       10945.3       11908.0    
  12  0.999757     -0.242662E-03 -0.779257      0.779257       10586.1       10586.9    
  13  0.587476     -0.531920      -1708.14       1708.14       10150.3       11858.4    
  14  0.703619     -0.351518      -1128.82       1128.82       10683.4       11812.3    
  15  0.740946     -0.299828      -962.832       962.832       10625.7       11588.6    
  16  0.335927      -1.09086      -3503.06       3503.06       10751.5       14254.5    
  17  0.736553     -0.305774      -981.926       981.926       10728.0       11710.0    
  18  0.597397     -0.515174      -1654.37       1654.37       10888.5       12542.9    
  19  0.126601      -2.06672      -6636.82       6636.82       9778.80       16415.6    
  20  0.990194     -0.985477E-02  -31.6465       31.6465       10632.8       10664.4    
  21  0.716453     -0.333443      -1070.78       1070.78       10584.0       11654.8    
  22  0.279233E-01  -3.57829      -11490.9       11490.9       10758.2       22249.1    
  23  0.413932     -0.882054      -2832.53       2832.53       10722.7       13555.2    
  24  0.109516      -2.21168      -7102.34       7102.34       9218.69       16321.0    
  25  0.440749     -0.819279      -2630.94       2630.94       10864.8       13495.8    
  26  0.412115     -0.886453      -2846.65       2846.65       10297.8       13144.4    
  27  0.146963      -1.91758      -6157.89       6157.89       10596.7       16754.6    
  28  0.345919      -1.06155      -3408.94       3408.94       10780.5       14189.5    
  29  0.343614      -1.06824      -3430.41       3430.41       10933.5       14363.9    
  30  0.600334E-01  -2.81285      -9032.87       9032.87       10656.4       19689.2    
  31  0.751538     -0.285634      -917.251       917.251       10526.9       11444.1    
  32  0.878119     -0.129973      -417.381       417.381       10881.4       11298.8    
  33  0.544046     -0.608721      -1954.78       1954.78       10940.5       12895.3    
  34  0.931023     -0.714714E-01  -229.515       229.515       10358.9       10588.4    
  35  0.131968      -2.02520      -6503.49       6503.49       10000.2       16503.7    
  36  0.826694E-01  -2.49291      -8005.43       8005.43       10157.0       18162.5    
  37  0.174702E-02  -6.34984      -20391.1       20391.1       11009.2       31400.4    
  38  0.233470      -1.45470      -4671.47       4671.47       10772.0       15443.4    
  39  0.232927      -1.45703      -4678.93       4678.93       10474.0       15152.9    
  40  0.958279     -0.426163E-01  -136.853       136.853       10566.3       10703.2    
  41  0.820100     -0.198330      -636.892       636.892       10526.7       11163.6    
  42  0.305797      -1.18483      -3804.84       3804.84       10694.2       14499.1    
  43  0.260853      -1.34380      -4315.32       4315.32       10991.2       15306.5    
  44  0.960408     -0.403967E-01  -129.725       129.725       10614.6       10744.4    
  45  0.318957      -1.14270      -3669.53       3669.53       10723.2       14392.7    
  46  0.146887      -1.91809      -6159.54       6159.54       9962.25       16121.8    
  47  0.787623     -0.238735      -766.647       766.647       10667.9       11434.5    
  48  0.452412     -0.793163      -2547.07       2547.07       10934.3       13481.4    
  49  0.218339      -1.52170      -4886.62       4886.62       10259.5       15146.1    
  50  0.177672      -1.72782      -5548.51       5548.51       10785.9       16334.4    
  51  0.928922     -0.737304E-01  -236.769       236.769       11273.7       11510.5    
  52  0.341447      -1.07456      -3450.72       3450.72       10673.5       14124.2    
  53  0.462674     -0.770732      -2475.04       2475.04       10952.8       13427.8    
  54  0.125513      -2.07534      -6664.52       6664.52       10457.4       17121.9    
  55  0.354899      -1.03592      -3326.64       3326.64       14204.3       17531.0    
  56  0.341830      -1.07344      -3447.13       3447.13       9645.91       13093.0    
  57  0.604983     -0.502555      -1613.85       1613.85       11954.1       13568.0    
  58  0.223932      -1.49641      -4805.40       4805.40       10936.3       15741.7    
  59  0.146473      -1.92091      -6168.59       6168.59       10208.4       16377.0    
  60  0.997224     -0.277992E-02  -8.92710       8.92710       10999.7       11008.6    
  61  0.430465     -0.842888      -2706.75       2706.75       9848.91       12555.7    
  62  0.712472     -0.339015      -1088.67       1088.67       9749.08       10837.8    
  63  0.303370      -1.19280      -3830.43       3830.43       10200.7       14031.1    
  64  0.676458E-01  -2.69347      -8649.50       8649.50       10043.6       18693.1    
loop,thermsimp(1:2)       26   793.591       237.192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    112       9381.08          0.88          1.10         22.99          0.30          0.04         25.32
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    113       8938.97          0.89          1.10         23.06          0.27          0.04         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8938.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       26
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       27
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      112     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -643.128       643.128       9582.37       10225.5    
   2  0.309452      -1.17295      -3766.69       3766.69       10586.1       14352.8    
   3  0.303638      -1.19192      -3827.59       3827.59       10358.9       14186.5    
   4  0.754457     -0.281757      -904.801       904.801       10400.6       11305.5    
   5  0.623133     -0.472996      -1518.92       1518.92       10632.8       12151.7    
   6  0.989422E-01  -2.31322      -7428.40       7428.40       10566.3       17994.7    
   7  0.695126     -0.363662      -1167.82       1167.82       10614.6       11782.4    
   8  0.832210E-01  -2.48626      -7984.07       7984.07       9749.08       17733.2    
   9  0.869521     -0.139813      -448.980       448.980       10421.9       10870.9    
  10  0.488136     -0.717160      -2303.01       2303.01       10999.7       13302.7    
  11  0.579877     -0.544940      -1749.96       1749.96       10526.7       12276.7    
  12  0.480435     -0.733064      -2354.08       2354.08       10881.4       13235.5    
  13  0.792626     -0.232404      -746.315       746.315       10667.9       11414.2    
  14  0.870230     -0.138998      -446.361       446.361       10526.9       10973.3    
  15  0.886361     -0.120631      -387.380       387.380       10743.7       11131.0    
  16  0.358181      -1.02672      -3297.08       3297.08       11273.7       14570.8    
  17  0.560125     -0.579594      -1861.24       1861.24       10689.6       12550.9    
  18  0.546151     -0.604859      -1942.37       1942.37       10625.7       12568.1    
  19  0.732086     -0.311858      -1001.46       1001.46       10571.1       11572.6    
  20  0.590102     -0.527460      -1693.82       1693.82       10584.0       12277.8    
  21  0.867355     -0.142307      -456.989       456.989       10728.0       11185.0    
  22  0.749758     -0.288005      -924.867       924.867       10683.4       11608.3    
  23  0.721970     -0.325772      -1046.15       1046.15       10150.3       11196.4    
  24  0.596865     -0.516065      -1657.23       1657.23       10945.3       12602.5    
  25  0.878161     -0.129925      -417.226       417.226       10888.5       11305.7    
  26  0.558752E-01  -2.88463      -9263.38       9263.38       9848.91       19112.3    
  27  0.555543     -0.587810      -1887.62       1887.62       10940.5       12828.2    
  28  0.597562     -0.514897      -1653.48       1653.48       10670.0       12323.4    
  29  0.995329     -0.468202E-02  -15.0353       15.0353       9645.91       9660.95    
  30  0.206787      -1.57606      -5061.19       5061.19       10297.8       15359.0    
  31  0.645457     -0.437797      -1405.89       1405.89       10952.8       12358.7    
  32  0.871352     -0.137710      -442.224       442.224       10934.3       11376.6    
  33  0.701360     -0.354733      -1139.15       1139.15       10864.8       12004.0    
  34  0.936151     -0.659784E-01  -211.875       211.875       10722.7       10934.6    
  35  0.590091     -0.527478      -1693.88       1693.88       11954.1       13648.0    
  36  0.750433     -0.287105      -921.975       921.975       10200.7       11122.7    
  37  0.326255      -1.12007      -3596.88       3596.88       10673.5       14270.4    
  38  0.873133     -0.135668      -435.668       435.668       10780.5       11216.2    
  39  0.621627     -0.475415      -1526.69       1526.69       10751.5       12278.2    
  40  0.153041      -1.87705      -6027.74       6027.74       10933.5       16961.2    
  41  0.196696      -1.62610      -5221.86       5221.86       10723.2       15945.0    
  42  0.365028      -1.00778      -3236.27       3236.27       9565.36       12801.6    
  43  0.398429     -0.920226      -2955.11       2955.11       10694.2       13649.3    
  44  0.549691     -0.598399      -1921.63       1921.63       10259.5       12181.1    
  45  0.994179     -0.583795E-02  -18.7473       18.7473       10474.0       10492.7    
  46  0.147335E-01  -4.21763      -13544.0       13544.0       10991.2       24535.2    
  47  0.224737      -1.49282      -4793.88       4793.88       10772.0       15565.9    
  48  0.182172      -1.70281      -5468.19       5468.19       10936.3       16404.5    
  49  0.230919      -1.46569      -4706.75       4706.75       9962.25       14669.0    
  50  0.491818     -0.709647      -2278.88       2278.88       9218.69       11497.6    
  51  0.370754     -0.992217      -3186.29       3186.29       10785.9       13972.2    
  52  0.785622     -0.241279      -774.816       774.816       10208.4       10983.2    
  53  0.476284     -0.741742      -2381.94       2381.94       9778.80       12160.7    
  54  0.958799     -0.420736E-01  -135.110       135.110       10000.2       10135.3    
  55  0.305133      -1.18701      -3811.82       3811.82       10691.8       14503.6    
  56  0.270329      -1.30812      -4200.73       4200.73       10596.7       14797.5    
  57  0.130426      -2.03695      -6541.22       6541.22       10457.4       16998.6    
  58  0.222171      -1.50431      -4830.76       4830.76       14204.3       19035.1    
  59  0.233872      -1.45298      -4665.94       4665.94       10157.0       14823.0    
  60  0.916355E-02  -4.69252      -15069.0       15069.0       10043.6       25112.7    
  61  0.400634     -0.914708      -2937.39       2937.39       10656.4       13593.8    
  62  0.354647E-01  -3.33922      -10723.2       10723.2       10758.2       21481.3    
  63  0.453450     -0.790870      -2539.71       2539.71       10368.8       12908.5    
  64  0.411527     -0.887880      -2851.24       2851.24       8938.97       11790.2    
loop,thermsimp(1:2)       27   643.128       3766.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114      11349.21          0.90          1.11         22.92          0.30          0.04         25.27
Just calling func    0   0         25.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115      15344.41          0.89          1.12         23.06          0.24          0.04         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  11349.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       27
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       28
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      114     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -682.014       682.014       9645.91       10327.9    
   2  0.162004E-01  -4.12272      -13239.2       13239.2       10000.2       23239.4    
   3  0.446841E-01  -3.10814      -9981.11       9981.11       9582.37       19563.5    
   4  0.757954     -0.277132      -889.951       889.951       10474.0       11363.9    
   5  0.525315     -0.643757      -2067.29       2067.29       10421.9       12489.2    
   6  0.229940      -1.46994      -4720.39       4720.39       10722.7       15443.1    
   7  0.273310E-01  -3.59973      -11559.8       11559.8       10526.9       22086.7    
   8  0.228047      -1.47820      -4746.93       4746.93       10208.4       14955.3    
   9  0.963384E-01  -2.33989      -7514.05       7514.05       10200.7       17714.7    
  10  0.495504     -0.702179      -2254.90       2254.90       10743.7       12998.5    
  11  0.930436     -0.721018E-01  -231.539       231.539       10728.0       10959.6    
  12  0.138744      -1.97513      -6342.70       6342.70       10150.3       16493.0    
  13  0.676381     -0.390999      -1255.61       1255.61       10780.5       12036.2    
  14  0.763696     -0.269586      -865.717       865.717       10400.6       11266.4    
  15  0.282468      -1.26419      -4059.67       4059.67       10888.5       14948.2    
  16  0.359172      -1.02395      -3288.20       3288.20       10934.3       14222.5    
  17  0.392258     -0.935834      -3005.23       3005.23       10667.9       13673.1    
  18  0.524686     -0.644955      -2071.13       2071.13       9218.69       11289.8    
  19  0.850465     -0.161972      -520.138       520.138       10571.1       11091.2    
  20  0.227056      -1.48256      -4760.91       4760.91       10683.4       15444.3    
  21  0.942039     -0.597082E-01  -191.740       191.740       10614.6       10806.4    
  22  0.807336     -0.214016      -687.266       687.266       8938.97       9626.24    
  23  0.345853      -1.06174      -3409.55       3409.55       10864.8       14274.4    
  24  0.762940     -0.270575      -868.895       868.895       10632.8       11501.7    
  25  0.589959     -0.527702      -1694.60       1694.60       9778.80       11473.4    
  26  0.563539     -0.573518      -1841.73       1841.73       10259.5       12101.2    
  27  0.812044     -0.208201      -668.593       668.593       10526.7       11195.3    
  28  0.735850     -0.306729      -984.995       984.995       10584.0       11569.0    
  29  0.396292     -0.925605      -2972.38       2972.38       10751.5       13723.8    
  30  0.623568     -0.472298      -1516.68       1516.68       10670.0       12186.6    
  31  0.925937     -0.769486E-01  -247.104       247.104       10952.8       11199.9    
  32  0.880074     -0.127749      -410.240       410.240       10689.6       11099.9    
  33  0.379958     -0.967693      -3107.54       3107.54       10625.7       13733.3    
  34  0.842940E-01  -2.47344      -7942.93       7942.93       10945.3       18888.2    
  35  0.199092      -1.61399      -5182.97       5182.97       9565.36       14748.3    
  36  0.625899     -0.468566      -1504.70       1504.70       10940.5       12445.2    
  37  0.888337     -0.118405      -380.231       380.231       10368.8       10749.0    
  38  0.959633     -0.412048E-01  -132.320       132.320       10881.4       11013.7    
  39  0.289813      -1.23852      -3977.23       3977.23       10999.7       14976.9    
  40  0.889440     -0.117163      -376.244       376.244       10656.4       11032.6    
  41  0.797260     -0.226575      -727.595       727.595       11954.1       12681.7    
  42  0.451097     -0.796073      -2556.42       2556.42       10694.2       13250.7    
  43  0.609578     -0.494989      -1589.55       1589.55       10785.9       12375.5    
  44  0.910850     -0.933770E-01  -299.860       299.860       10358.9       10658.7    
  45  0.448191     -0.802536      -2577.17       2577.17       10673.5       13250.7    
  46  0.831229     -0.184850      -593.604       593.604       10586.1       11179.7    
  47  0.246260      -1.40137      -4500.19       4500.19       10691.8       15192.0    
  48  0.280480      -1.27125      -4082.35       4082.35       11273.7       15356.1    
  49  0.161513      -1.82317      -5854.71       5854.71       9962.25       15817.0    
  50  0.337020      -1.08761      -3492.64       3492.64       10596.7       14089.4    
  51  0.160136      -1.83173      -5882.20       5882.20       10157.0       16039.3    
  52  0.268039      -1.31662      -4228.05       4228.05       10297.8       14525.8    
  53  0.907744     -0.967928E-01  -310.829       310.829       10772.0       11082.8    
  54  0.237998      -1.43549      -4609.78       4609.78       10723.2       15333.0    
  55  0.932063     -0.703547E-01  -225.929       225.929       10936.3       11162.3    
  56  0.304233      -1.18996      -3821.31       3821.31       10933.5       14754.8    
  57  0.471578     -0.751672      -2413.83       2413.83       10457.4       12871.2    
  58  0.985625     -0.144798E-01  -46.4987       46.4987       9749.08       9795.58    
  59  0.576194     -0.551311      -1770.42       1770.42       10566.3       12336.7    
  60  0.561463     -0.577209      -1853.58       1853.58       14204.3       16057.9    
  61  0.762775     -0.270792      -869.591       869.591       9848.91       10718.5    
  62  0.728042     -0.317397      -1019.25       1019.25       10758.2       11777.4    
  63  0.246589      -1.40003      -4495.90       4495.90       10991.2       15487.1    
  64  0.128678      -2.05044      -6584.55       6584.55       11349.2       17933.8    
loop,thermsimp(1:2)       28   682.014       13239.2    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116      10005.28          0.88          1.09         23.05          0.28          0.05         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117       9537.30          0.88          1.09         22.94          0.37          0.04         25.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9537.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       28
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       29
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      116     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -6920.80       6920.80       8938.97       15859.8    
   2  0.685048     -0.378267      -1214.72       1214.72       9749.08       10963.8    
   3  0.739526     -0.301746      -968.992       968.992       9645.91       10614.9    
   4  0.161448      -1.82357      -5856.00       5856.00       10358.9       16214.9    
   5  0.819608     -0.198929      -638.818       638.818       9848.91       10487.7    
   6  0.750679     -0.286777      -920.922       920.922       10368.8       11289.7    
   7  0.797409     -0.226388      -726.995       726.995       10614.6       11341.6    
   8  0.193123      -1.64443      -5280.73       5280.73       10728.0       16008.8    
   9  0.189346E-01  -3.96676      -12738.4       12738.4       10881.4       23619.8    
  10  0.715264     -0.335103      -1076.11       1076.11       10656.4       11732.5    
  11  0.384856     -0.954886      -3066.41       3066.41       10772.0       13838.4    
  12  0.268023      -1.31668      -4228.24       4228.24       10571.1       14799.3    
  13  0.777164     -0.252104      -809.577       809.577       10689.6       11499.2    
  14  0.707495E-01  -2.64861      -8505.44       8505.44       10936.3       19441.8    
  15  0.233610      -1.45410      -4669.53       4669.53       10586.1       15255.6    
  16  0.193057      -1.64477      -5281.83       5281.83       10526.7       15808.6    
  17  0.486879     -0.719739      -2311.29       2311.29       10952.8       13264.1    
  18  0.735370     -0.307381      -987.089       987.089       10400.6       11387.7    
  19  0.147509      -1.91387      -6145.97       6145.97       9218.69       15364.7    
  20  0.739111     -0.302308      -970.795       970.795       10474.0       11444.8    
  21  0.886241     -0.120766      -387.814       387.814       9778.80       10166.6    
  22  0.158672      -1.84092      -5911.70       5911.70       10632.8       16544.5    
  23  0.143658      -1.94032      -6230.92       6230.92       10584.0       16814.9    
  24  0.637431E-02  -5.05548      -16234.6       16234.6       10758.2       26992.8    
  25  0.753372     -0.283196      -909.424       909.424       10780.5       11690.0    
  26  0.555831     -0.587292      -1885.96       1885.96       10259.5       12145.5    
  27  0.280013      -1.27292      -4087.70       4087.70       10670.0       14757.7    
  28  0.811304     -0.209112      -671.520       671.520       10566.3       11237.8    
  29  0.972296E-02  -4.63327      -14878.7       14878.7       10785.9       25664.7    
  30  0.713459     -0.337631      -1084.23       1084.23       10940.5       12024.8    
  31  0.194621      -1.63670      -5255.90       5255.90       10421.9       15677.8    
  32  0.492587     -0.708083      -2273.86       2273.86       11954.1       14228.0    
  33  0.759094E-01  -2.57821      -8279.38       8279.38       10457.4       18736.8    
  34  0.494544     -0.704119      -2261.13       2261.13       10743.7       13004.8    
  35  0.297023      -1.21395      -3898.33       3898.33       10694.2       14592.6    
  36  0.429878E-01  -3.14684      -10105.4       10105.4       10673.5       20778.9    
  37  0.490931     -0.711452      -2284.67       2284.67       10667.9       12952.6    
  38  0.534417     -0.626578      -2012.12       2012.12       10751.5       12763.6    
  39  0.254967      -1.36662      -4388.60       4388.60       10625.7       15014.3    
  40  0.995945     -0.406335E-02  -13.0486       13.0486       10596.7       10609.8    
  41  0.428814E-01  -3.14932      -10113.3       10113.3       10934.3       21047.7    
  42  0.332915      -1.09987      -3531.99       3531.99       10864.8       14396.8    
  43  0.657266     -0.419666      -1347.67       1347.67       10297.8       11645.5    
  44  0.301071      -1.20041      -3854.85       3854.85       9565.36       13420.2    
  45  0.998178     -0.182349E-02  -5.85576       5.85576       10933.5       10939.3    
  46  0.533372     -0.628536      -2018.41       2018.41       10888.5       12906.9    
  47  0.244746      -1.40753      -4519.99       4519.99       10208.4       14728.4    
  48  0.345321      -1.06328      -3414.50       3414.50       10999.7       14414.2    
  49  0.339541      -1.08016      -3468.71       3468.71       10691.8       14160.5    
  50  0.456434     -0.784311      -2518.65       2518.65       10723.2       13241.8    
  51  0.510210     -0.672933      -2160.98       2160.98       11273.7       13434.7    
  52  0.678441     -0.387958      -1245.84       1245.84       10722.7       11968.6    
  53  0.802552     -0.219958      -706.348       706.348       10683.4       11389.8    
  54  0.542503     -0.611562      -1963.90       1963.90       10991.2       12955.1    
  55  0.887113     -0.119783      -384.658       384.658       9962.25       10346.9    
  56  0.631934     -0.458971      -1473.89       1473.89       10157.0       11630.9    
  57  0.776760     -0.252624      -811.249       811.249       14204.3       15015.6    
  58  0.764990     -0.267893      -860.280       860.280       10150.3       11010.5    
  59  0.329328      -1.11070      -3566.77       3566.77       10200.7       13767.5    
  60  0.304425      -1.18933      -3819.28       3819.28       11349.2       15168.5    
  61  0.992863     -0.716266E-02  -23.0013       23.0013       10945.3       10968.3    
  62  0.545111     -0.606767      -1948.50       1948.50       9582.37       11530.9    
  63  0.215175      -1.53630      -4933.51       4933.51       10526.9       15460.4    
  64  0.486479     -0.720562      -2313.93       2313.93       9537.30       11851.2    
loop,thermsimp(1:2)       29   6920.80       1214.72    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118       9976.57          0.89          1.09         23.08          0.34          0.04         25.44
Just calling func    0   0         25.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119       9374.39          0.89          1.09         23.05          0.20          0.04         25.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9374.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       29
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       30
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      118     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -10365.8       10365.8       9778.80       20144.7    
   2  0.712690     -0.338709      -1087.69       1087.69       9962.25       11049.9    
   3  0.284498      -1.25703      -4036.68       4036.68       9848.91       13885.6    
   4  0.132414      -2.02182      -6492.65       6492.65       10596.7       17089.4    
   5  0.868558     -0.140920      -452.535       452.535       9645.91       10098.4    
   6  0.695240     -0.363498      -1167.29       1167.29       10933.5       12100.8    
   7  0.777362     -0.251849      -808.759       808.759       9749.08       10557.8    
   8  0.302494      -1.19569      -3839.71       3839.71       10945.3       14785.0    
   9  0.710188     -0.342225      -1098.98       1098.98       10150.3       11249.3    
  10  0.884530     -0.122698      -394.019       394.019       10566.3       10960.3    
  11  0.146421E-01  -4.22386      -13564.0       13564.0       10368.8       23932.8    
  12  0.834801     -0.180562      -579.835       579.835       10614.6       11194.5    
  13  0.414011     -0.881863      -2831.91       2831.91       10400.6       13232.6    
  14  0.655777     -0.421935      -1354.95       1354.95       10683.4       12038.4    
  15  0.530106     -0.634679      -2038.13       2038.13       10474.0       12512.1    
  16  0.325231      -1.12322      -3606.98       3606.98       10689.6       14296.6    
  17  0.293550      -1.22571      -3936.10       3936.10       9582.37       13518.5    
  18  0.194161      -1.63907      -5263.52       5263.52       10157.0       15420.6    
  19  0.589029E-01  -2.83186      -9093.92       9093.92       10297.8       19391.7    
  20  0.385142     -0.954143      -3064.02       3064.02       10780.5       13844.6    
  21  0.287461      -1.24667      -4003.41       4003.41       10656.4       14659.8    
  22  0.528518     -0.637678      -2047.77       2047.77       9537.30       11585.1    
  23  0.517042     -0.659630      -2118.26       2118.26       10722.7       12841.0    
  24  0.453375     -0.791035      -2540.24       2540.24       10940.5       13480.8    
  25  0.695596     -0.362986      -1165.65       1165.65       10259.5       11425.2    
  26  0.645178     -0.438228      -1407.28       1407.28       10751.5       12158.7    
  27  0.696076     -0.362297      -1163.44       1163.44       10888.5       12051.9    
  28  0.483522     -0.726659      -2333.51       2333.51       10667.9       13001.4    
  29  0.155396E-01  -4.16436      -13372.9       13372.9       10991.2       24364.2    
  30  0.883154     -0.124256      -399.021       399.021       10743.7       11142.7    
  31  0.525944     -0.642561      -2063.45       2063.45       10723.2       12786.6    
  32  0.746799     -0.291959      -937.562       937.562       10952.8       11890.4    
  33  0.458658     -0.779449      -2503.03       2503.03       9565.36       12068.4    
  34  0.614284     -0.487298      -1564.85       1564.85       11273.7       12838.6    
  35  0.581412     -0.542295      -1741.46       1741.46       10200.7       11942.2    
  36  0.820935     -0.197312      -633.624       633.624       10772.0       11405.6    
  37  0.852366     -0.159739      -512.967       512.967       10691.8       11204.8    
  38  0.527059     -0.640443      -2056.64       2056.64       11954.1       14010.8    
  39  0.376404     -0.977092      -3137.72       3137.72       10864.8       14002.6    
  40  0.729525E-01  -2.61795      -8406.97       8406.97       10999.7       19406.6    
  41  0.342258      -1.07219      -3443.11       3443.11       10694.2       14137.3    
  42  0.955065     -0.459761E-01  -147.642       147.642       10208.4       10356.1    
  43  0.508654E-01  -2.97857      -9565.04       9565.04       10670.0       20235.0    
  44  0.471716     -0.751379      -2412.89       2412.89       10571.1       12984.0    
  45  0.137118      -1.98691      -6380.55       6380.55       10625.7       17006.3    
  46  0.844826     -0.168625      -541.501       541.501       14204.3       14745.8    
  47  0.841708     -0.172322      -553.374       553.374       11349.2       11902.6    
  48  0.360396E-01  -3.32314      -10671.5       10671.5       10586.1       21257.6    
  49  0.953282     -0.478444E-01  -153.642       153.642       9218.69       9372.33    
  50  0.503408     -0.686355      -2204.08       2204.08       10526.9       12731.0    
  51  0.593854     -0.521122      -1673.47       1673.47       10421.9       12095.4    
  52  0.524910     -0.644528      -2069.76       2069.76       10526.7       12596.5    
  53  0.730244     -0.314377      -1009.55       1009.55       8938.97       9948.52    
  54  0.828919     -0.187632      -602.541       602.541       10728.0       11330.6    
  55  0.151629      -1.88632      -6057.49       6057.49       10358.9       16416.4    
  56  0.431672     -0.840089      -2697.76       2697.76       10632.8       13330.5    
  57  0.449333     -0.799990      -2569.00       2569.00       10584.0       13153.0    
  58  0.116759      -2.14764      -6896.69       6896.69       10457.4       17354.1    
  59  0.578588     -0.547165      -1757.10       1757.10       10936.3       12693.4    
  60  0.119282      -2.12627      -6828.05       6828.05       10673.5       17501.6    
  61  0.643272E-01  -2.74377      -8811.03       8811.03       10934.3       19745.4    
  62  0.906211     -0.984834E-01  -316.258       316.258       10881.4       11197.7    
  63  0.811859     -0.208429      -669.325       669.325       10785.9       11455.2    
  64  0.119821      -2.12175      -6813.56       6813.56       9374.39       16187.9    
loop,thermsimp(1:2)       30   10365.8       1087.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       9759.65          0.88          1.09         22.96          0.45          0.04         25.43
Just calling func    0   0         25.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121       8864.90          0.88          1.09         23.01          0.28          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    8864.9        3.647    -0.8001      3.631     -100.0     0.6772E-01
                     -0.5552      2.279     -100.0      2.320     0.8053    
                      0.8053    -0.9468E-01  2.400      0.000      0.000    
                      -1.965      0.000      0.000      0.000     -1.221    

                      -2.500      9496.     0.1373E+05 -719.4     -2158.    
                      -2.000     -3.416     -2.416     -4.716     -3.416    
                      -13.76     -2.480      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.9245E-01-0.7633E-01  0.000     0.4585E-01
                      0.1399E-01-0.1763     0.5355E-01-0.9370E-01-0.2004E-01

                     -0.8621     -3.869      0.000     0.2754     0.1335    
                      0.8541E-01-0.2426     0.8837E-01 0.7368E-01-0.1690    
                     -0.1249     0.6207E-01-0.6813E-01 -1.337      0.000    

                     -0.6064    -0.8053      3.239     -1.507      0.000    
                       0.000      9.197      9.380     -4027.     -4.000    
                      0.2920     0.2920      9.097      8.806     -4027.    

                      -4.000     0.2920     0.2920      9.297      9.097    
                      -5848.     -4.000     0.2920     0.2920      9.497    
                       8.897     -5918.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8864.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       30
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       31
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      120     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -4470.07       4470.07       9218.69       13688.8    
   2  0.247647      -1.39575      -4482.15       4482.15       8938.97       13421.1    
   3  0.396263     -0.925678      -2972.62       2972.62       9645.91       12618.5    
   4  0.386461     -0.950723      -3053.04       3053.04       10208.4       13261.5    
   5  0.729285     -0.315691      -1013.77       1013.77       9749.08       10762.9    
   6  0.665866     -0.406667      -1305.92       1305.92       10566.3       11872.2    
   7  0.385122     -0.954194      -3064.19       3064.19       9962.25       13026.4    
   8  0.625701     -0.468883      -1505.72       1505.72       10743.7       12249.4    
   9  0.392668     -0.934792      -3001.88       3001.88       10614.6       13616.5    
  10  0.698356     -0.359026      -1152.94       1152.94       10881.4       12034.3    
  11  0.537534E-01  -2.92335      -9387.70       9387.70       10691.8       20079.5    
  12  0.289307      -1.24027      -3982.85       3982.85       10150.3       14133.1    
  13  0.138460E-01  -4.27976      -13743.5       13743.5       10728.0       24471.5    
  14  0.824110     -0.193451      -621.225       621.225       10772.0       11393.2    
  15  0.560983     -0.578065      -1856.33       1856.33       10259.5       12115.8    
  16  0.116087E-01  -4.45600      -14309.5       14309.5       10785.9       25095.4    
  17  0.218033      -1.52311      -4891.13       4891.13       9537.30       14428.4    
  18  0.893705E-01  -2.41497      -7755.14       7755.14       10952.8       18707.9    
  19  0.304886      -1.18782      -3814.41       3814.41       11349.2       15163.6    
  20  0.179833      -1.71573      -5509.69       5509.69       10200.7       15710.4    
  21  0.867378     -0.142281      -456.904       456.904       10683.4       11140.3    
  22  0.243287      -1.41351      -4539.19       4539.19       10888.5       15427.7    
  23  0.772489     -0.258138      -828.953       828.953       9565.36       10394.3    
  24  0.321011      -1.13628      -3648.92       3648.92       10421.9       14070.8    
  25  0.499417     -0.694314      -2229.64       2229.64       10933.5       13163.1    
  26  0.396806     -0.924307      -2968.21       2968.21       10751.5       13719.7    
  27  0.580203E-01  -2.84696      -9142.41       9142.41       10474.0       19616.4    
  28  0.854206     -0.157583      -506.043       506.043       10526.7       11032.8    
  29  0.914649     -0.892145E-01  -286.493       286.493       10936.3       11222.8    
  30  0.167601      -1.78617      -5735.90       5735.90       10526.9       16262.8    
  31  0.350137      -1.04943      -3370.02       3370.02       10723.2       14093.2    
  32  0.522932     -0.648304      -2081.89       2081.89       11273.7       13355.6    
  33  0.538779     -0.618450      -1986.02       1986.02       10722.7       12708.7    
  34  0.693066     -0.366629      -1177.35       1177.35       10571.1       11748.5    
  35  0.361961      -1.01622      -3263.37       3263.37       10667.9       13931.2    
  36  0.310665      -1.16904      -3754.12       3754.12       10584.0       14338.1    
  37  0.818669     -0.200076      -642.500       642.500       10400.6       11043.1    
  38  0.582861     -0.539807      -1733.47       1733.47       10632.8       12366.2    
  39  0.401728     -0.911979      -2928.62       2928.62       10940.5       13869.2    
  40  0.171089      -1.76557      -5669.75       5669.75       9582.37       15252.1    
  41  0.980174     -0.200248E-01  -64.3053       64.3053       10780.5       10844.8    
  42  0.495496     -0.702196      -2254.95       2254.95       9848.91       12103.9    
  43  0.436683     -0.828549      -2660.70       2660.70       10864.8       13525.6    
  44  0.910411     -0.938588E-01  -301.407       301.407       11954.1       12255.5    
  45  0.649932     -0.430887      -1383.70       1383.70       10694.2       12077.9    
  46  0.755226     -0.280738      -901.529       901.529       10689.6       11591.2    
  47  0.927352     -0.754221E-01  -242.202       242.202       10656.4       10898.6    
  48  0.848028     -0.164842      -529.354       529.354       14204.3       14733.7    
  49  0.146193      -1.92283      -6174.76       6174.76       10945.3       17120.1    
  50  0.571278     -0.559879      -1797.93       1797.93       10157.0       11955.0    
  51  0.244418      -1.40888      -4524.30       4524.30       9374.39       13898.7    
  52  0.979014     -0.212091E-01  -68.1083       68.1083       10358.9       10427.0    
  53  0.235747      -1.44500      -4640.29       4640.29       10625.7       15266.0    
  54  0.486927     -0.719642      -2310.97       2310.97       10596.7       12907.7    
  55  0.694010     -0.365269      -1172.98       1172.98       10457.4       11630.4    
  56  0.392305     -0.935716      -3004.85       3004.85       10673.5       13678.4    
  57  0.334373      -1.09550      -3517.96       3517.96       10297.8       13815.8    
  58  0.526166     -0.642138      -2062.09       2062.09       10999.7       13061.7    
  59  0.701539     -0.354479      -1138.33       1138.33       10934.3       12072.7    
  60  0.447845     -0.803307      -2579.65       2579.65       9778.80       12358.4    
  61  0.927856     -0.748784E-01  -240.456       240.456       10670.0       10910.4    
  62  0.453274     -0.791258      -2540.96       2540.96       10586.1       13127.1    
  63  0.291736      -1.23190      -3956.00       3956.00       10368.8       14324.8    
  64  0.497643E-02  -5.30304      -17029.6       17029.6       8864.90       25894.5    
loop,thermsimp(1:2)       31   4470.07       4482.15    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122      12554.64          0.89          1.12         22.96          0.48          0.04         25.49
Just calling func    0   0         25.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123      16367.96          0.90          1.12         23.04          0.54          0.04         25.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  12554.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       31
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       32
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      122     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -12.6447       12.6447       9565.36       9578.00    
   2  0.758684E-02  -4.88134      -15675.4       15675.4       10358.9       26034.2    
   3  0.404439     -0.905254      -2907.03       2907.03       9749.08       12656.1    
   4  0.947917E-01  -2.35607      -7566.02       7566.02       10780.5       18346.6    
   5  0.834417     -0.181022      -581.314       581.314       10656.4       11237.7    
   6  0.891274     -0.115104      -369.631       369.631       10670.0       11039.6    
   7  0.744451     -0.295108      -947.676       947.676       10526.7       11474.4    
   8  0.559638     -0.580466      -1864.04       1864.04       10400.6       12264.7    
   9  0.821724     -0.196351      -630.538       630.538       10683.4       11314.0    
  10  0.847292     -0.165710      -532.140       532.140       10936.3       11468.5    
  11  0.661676     -0.412979      -1326.19       1326.19       10772.0       12098.2    
  12  0.993427     -0.659478E-02  -21.1777       21.1777       10689.6       10710.8    
  13  0.425996     -0.853326      -2740.27       2740.27       10457.4       13197.7    
  14  0.673132     -0.395813      -1271.07       1271.07       10571.1       11842.2    
  15  0.234810      -1.44898      -4653.08       4653.08       10566.3       15219.4    
  16  0.122926      -2.09617      -6731.40       6731.40       10157.0       16888.5    
  17  0.523553     -0.647118      -2078.08       2078.08       10881.4       12959.5    
  18  0.959317     -0.415333E-01  -133.375       133.375       10934.3       11067.7    
  19  0.321726      -1.13406      -3641.77       3641.77       10694.2       14336.0    
  20  0.493112     -0.707018      -2270.44       2270.44       9848.91       12119.3    
  21  0.416134     -0.876748      -2815.49       2815.49       10259.5       13075.0    
  22  0.409432     -0.892985      -2867.63       2867.63       10743.7       13611.3    
  23  0.657956     -0.418617      -1344.30       1344.30       11954.1       13298.4    
  24  0.904324     -0.100567      -322.950       322.950       9778.80       10101.8    
  25  0.714426     -0.336276      -1079.88       1079.88       10632.8       11712.7    
  26  0.150521      -1.89365      -6081.05       6081.05       9645.91       15727.0    
  27  0.758740     -0.276096      -886.623       886.623       10722.7       11609.3    
  28  0.359105      -1.02414      -3288.81       3288.81       10596.7       13885.6    
  29  0.666937     -0.405060      -1300.76       1300.76       9962.25       11263.0    
  30  0.343213      -1.06940      -3434.16       3434.16       10999.7       14433.8    
  31  0.484849     -0.723918      -2324.71       2324.71       10586.1       12910.8    
  32  0.874661     -0.133919      -430.052       430.052       10933.5       11363.5    
  33  0.994710     -0.530415E-02  -17.0331       17.0331       10208.4       10225.4    
  34  0.821923     -0.196109      -629.762       629.762       11273.7       11903.5    
  35  0.954096E-02  -4.65216      -14939.4       14939.4       8938.97       23878.4    
  36  0.240030      -1.42699      -4582.47       4582.47       10864.8       15447.3    
  37  0.279003      -1.27653      -4099.31       4099.31       10614.6       14713.9    
  38  0.553830     -0.590898      -1897.54       1897.54       10673.5       12571.1    
  39  0.400809     -0.914271      -2935.99       2935.99       9218.69       12154.7    
  40  0.146125      -1.92330      -6176.25       6176.25       10751.5       16927.7    
  41  0.811879     -0.208403      -669.242       669.242       10297.8       10967.0    
  42  0.349149      -1.05226      -3379.10       3379.10       10940.5       14319.6    
  43  0.897422     -0.108229      -347.554       347.554       9374.39       9721.94    
  44  0.114492      -2.16725      -6959.66       6959.66       10667.9       17627.5    
  45  0.831901E-01  -2.48663      -7985.27       7985.27       10421.9       18407.2    
  46  0.721169     -0.326882      -1049.71       1049.71       10723.2       11772.9    
  47  0.801724     -0.220991      -709.665       709.665       10150.3       10859.9    
  48  0.466569     -0.762349      -2448.12       2448.12       10368.8       12816.9    
  49  0.103404      -2.26911      -7286.76       7286.76       10584.0       17870.8    
  50  0.417206     -0.874175      -2807.22       2807.22       9537.30       12344.5    
  51  0.267666      -1.31802      -4232.52       4232.52       14204.3       18436.9    
  52  0.670232     -0.400131      -1284.93       1284.93       11349.2       12634.1    
  53  0.161265      -1.82470      -5859.64       5859.64       9582.37       15442.0    
  54  0.414706     -0.880185      -2826.52       2826.52       10625.7       13452.2    
  55  0.501015     -0.691119      -2219.38       2219.38       10888.5       13107.9    
  56  0.516090     -0.661474      -2124.18       2124.18       10200.7       12324.9    
  57  0.424740     -0.856278      -2749.75       2749.75       10526.9       13276.6    
  58  0.303796      -1.19140      -3825.91       3825.91       10945.3       14771.2    
  59  0.803455     -0.218834      -702.739       702.739       10952.8       11655.5    
  60  0.416256     -0.876456      -2814.55       2814.55       10474.0       13288.5    
  61  0.760689     -0.273531      -878.384       878.384       10691.8       11570.2    
  62  0.995587     -0.442238E-02  -14.2015       14.2015       10728.0       10742.2    
  63  0.961804     -0.389449E-01  -125.063       125.063       10785.9       10911.0    
  64  0.321618      -1.13439      -3642.85       3642.85       12554.6       16197.5    
loop,thermsimp(1:2)       32   12.6447       15675.4    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124      10702.93          0.88          1.10         22.93          0.37          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125      11510.55          0.88          1.11         22.99          0.30          0.04         25.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10702.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       32
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       33
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      124     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -2524.58       2524.58       9565.36       12089.9    
   2  0.588265E-01  -2.83316      -9098.09       9098.09       9374.39       18472.5    
   3  0.787103E-01  -2.54198      -8163.02       8163.02       9778.80       17941.8    
   4  0.597713     -0.514644      -1652.67       1652.67       10208.4       11861.1    
   5  0.110741      -2.20056      -7066.63       7066.63       10689.6       17756.3    
   6  0.677861     -0.388813      -1248.59       1248.59       10728.0       11976.6    
   7  0.307724      -1.17855      -3784.66       3784.66       10150.3       13934.9    
   8  0.550587     -0.596770      -1916.40       1916.40       10785.9       12702.3    
   9  0.601295     -0.508669      -1633.48       1633.48       10297.8       11931.3    
  10  0.487121     -0.719243      -2309.69       2309.69       10670.0       12979.6    
  11  0.146295      -1.92213      -6172.50       6172.50       10934.3       17106.8    
  12  0.714050     -0.336802      -1081.57       1081.57       10656.4       11737.9    
  13  0.723089     -0.324223      -1041.17       1041.17       9962.25       11003.4    
  14  0.805432     -0.216376      -694.845       694.845       10683.4       11378.3    
  15  0.123280      -2.09329      -6722.16       6722.16       10933.5       17655.6    
  16  0.853039     -0.158950      -510.435       510.435       10936.3       11446.8    
  17  0.288289      -1.24379      -3994.17       3994.17       10526.7       14520.9    
  18  0.705126     -0.349379      -1121.96       1121.96       10691.8       11813.8    
  19  0.772420     -0.258227      -829.239       829.239       10722.7       11552.0    
  20  0.962845     -0.378631E-01  -121.589       121.589       10952.8       11074.4    
  21  0.245802      -1.40323      -4506.16       4506.16       10632.8       15138.9    
  22  0.752702     -0.284087      -912.282       912.282       10723.2       11635.5    
  23  0.729896     -0.314853      -1011.08       1011.08       10571.1       11582.2    
  24  0.869278     -0.140092      -449.876       449.876       11273.7       11723.6    
  25  0.597817E-01  -2.81706      -9046.37       9046.37       10772.0       19818.3    
  26  0.984108     -0.160195E-01  -51.4432       51.4432       9848.91       9900.36    
  27  0.278288      -1.27910      -4107.55       4107.55       9218.69       13326.2    
  28  0.588278     -0.530555      -1703.76       1703.76       10400.6       12104.4    
  29  0.807614     -0.213671      -686.159       686.159       10200.7       10886.9    
  30  0.428679     -0.847047      -2720.11       2720.11       9537.30       12257.4    
  31  0.452991     -0.791883      -2542.96       2542.96       10673.5       13216.5    
  32  0.678742     -0.387514      -1244.42       1244.42       11349.2       12593.6    
  33  0.504500     -0.684188      -2197.12       2197.12       9749.08       11946.2    
  34  0.894800     -0.111155      -356.950       356.950       10368.8       10725.7    
  35  0.854311     -0.157461      -505.650       505.650       10586.1       11091.8    
  36  0.756230     -0.279410      -897.264       897.264       10881.4       11778.7    
  37  0.744369     -0.295219      -948.032       948.032       10259.5       11207.5    
  38  0.435758     -0.830668      -2667.51       2667.51       10888.5       13556.0    
  39  0.677387     -0.389513      -1250.84       1250.84       10457.4       11708.3    
  40  0.504989     -0.683219      -2194.01       2194.01       10526.9       12720.9    
  41  0.325676      -1.12185      -3602.58       3602.58       10474.0       14076.6    
  42  0.147207      -1.91591      -6152.54       6152.54       11954.1       18106.7    
  43  0.432041     -0.839234      -2695.02       2695.02       10625.7       13320.7    
  44  0.615972     -0.484555      -1556.04       1556.04       10743.7       12299.7    
  45  0.150867      -1.89136      -6073.69       6073.69       10596.7       16670.4    
  46  0.464307     -0.767210      -2463.73       2463.73       10940.5       13404.3    
  47  0.379753     -0.968234      -3109.27       3109.27       10694.2       13803.5    
  48  0.886192     -0.120822      -387.993       387.993       10999.7       11387.7    
  49  0.231751E-01  -3.76468      -12089.4       12089.4       10614.6       22704.1    
  50  0.257662      -1.35611      -4354.84       4354.84       10945.3       15300.1    
  51  0.470381E-01  -3.05680      -9816.25       9816.25       10566.3       20382.5    
  52  0.972366     -0.280233E-01  -89.9909       89.9909       9582.37       9672.36    
  53  0.242054      -1.41860      -4555.51       4555.51       10864.8       15420.4    
  54  0.660577     -0.414642      -1331.53       1331.53       9645.91       10977.4    
  55  0.234396      -1.45074      -4658.74       4658.74       12554.6       17213.4    
  56  0.891547     -0.114797      -368.646       368.646       10157.0       10525.7    
  57  0.408879E-01  -3.19692      -10266.2       10266.2       10751.5       21017.7    
  58  0.577007     -0.549901      -1765.89       1765.89       10667.9       12433.8    
  59  0.851462     -0.160801      -516.377       516.377       10584.0       11100.4    
  60  0.733240     -0.310283      -996.406       996.406       10780.5       11776.9    
  61  0.219002E-01  -3.82126      -12271.1       12271.1       10421.9       22693.1    
  62  0.293643      -1.22539      -3935.08       3935.08       14204.3       18139.4    
  63  0.552105     -0.594017      -1907.56       1907.56       8938.97       10846.5    
  64  0.638007E-01  -2.75199      -8837.42       8837.42       10702.9       19540.4    
loop,thermsimp(1:2)       33   2524.58       9098.09    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126      10373.88          0.88          1.10         23.03          0.24          0.04         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127      11508.22          0.89          1.12         23.02          0.27          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10373.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       33
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       34
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      126     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -7520.02       7520.02       9582.37       17102.4    
   2  0.298819      -1.20792      -3878.97       3878.97       9848.91       13727.9    
   3  0.706385     -0.347595      -1116.23       1116.23       10157.0       11273.3    
   4  0.958764     -0.421100E-01  -135.227       135.227       10368.8       10504.0    
   5  0.306496      -1.18255      -3797.51       3797.51       8938.97       12736.5    
   6  0.905447     -0.993270E-01  -318.967       318.967       10200.7       10519.7    
   7  0.234113      -1.45195      -4662.62       4662.62       9645.91       14308.5    
   8  0.704141     -0.350777      -1126.44       1126.44       9962.25       11088.7    
   9  0.908200     -0.962902E-01  -309.215       309.215       10952.8       11262.0    
  10  0.656383     -0.421011      -1351.99       1351.99       10586.1       11938.1    
  11  0.967894     -0.326327E-01  -104.793       104.793       10584.0       10688.8    
  12  0.754670     -0.281475      -903.895       903.895       10259.5       11163.4    
  13  0.488960     -0.715475      -2297.59       2297.59       10683.4       12981.0    
  14  0.451577     -0.795009      -2553.00       2553.00       10999.7       13552.7    
  15  0.387599E-01  -3.25037      -10437.9       10437.9       10936.3       21374.2    
  16  0.210942E-02  -6.16134      -19785.8       19785.8       10722.7       30508.5    
  17  0.656530     -0.420787      -1351.27       1351.27       10571.1       11922.4    
  18  0.181246      -1.70790      -5484.55       5484.55       10723.2       16207.7    
  19  0.758879     -0.275913      -886.035       886.035       10457.4       11343.5    
  20  0.392052     -0.936362      -3006.92       3006.92       11273.7       14280.6    
  21  0.406710     -0.899654      -2889.04       2889.04       10656.4       13545.4    
  22  0.830107     -0.186201      -597.943       597.943       10780.5       11378.5    
  23  0.311833      -1.16529      -3742.07       3742.07       10881.4       14623.5    
  24  0.945407     -0.561396E-01  -180.280       180.280       10691.8       10872.1    
  25  0.303319      -1.19297      -3830.97       3830.97       10208.4       14039.4    
  26  0.284230      -1.25797      -4039.70       4039.70       10297.8       14337.5    
  27  0.292492      -1.22932      -3947.69       3947.69       9749.08       13696.8    
  28  0.401496     -0.912557      -2930.48       2930.48       10728.0       13658.5    
  29  0.379648     -0.968510      -3110.16       3110.16       9565.36       12675.5    
  30  0.723496E-01  -2.62625      -8433.62       8433.62       10400.6       18834.3    
  31  0.940338     -0.615157E-01  -197.545       197.545       9537.30       9734.85    
  32  0.766237     -0.266264      -855.048       855.048       10743.7       11598.7    
  33  0.984920     -0.151946E-01  -48.7941       48.7941       10667.9       10716.7    
  34  0.552546     -0.593218      -1904.99       1904.99       11349.2       13254.2    
  35  0.735557     -0.307128      -986.274       986.274       10785.9       11772.2    
  36  0.142195      -1.95056      -6263.79       6263.79       10526.9       16790.7    
  37  0.304783      -1.18816      -3815.50       3815.50       10670.0       14485.5    
  38  0.868582     -0.140894      -452.450       452.450       10673.5       11126.0    
  39  0.382741     -0.960397      -3084.11       3084.11       10625.7       13709.8    
  40  0.273812      -1.29531      -4159.62       4159.62       9218.69       13378.3    
  41  0.601920     -0.507631      -1630.15       1630.15       10940.5       12570.7    
  42  0.827744     -0.189051      -607.098       607.098       10888.5       11495.6    
  43  0.881186E-01  -2.42907      -7800.44       7800.44       10694.2       18494.7    
  44  0.386744     -0.949994      -3050.70       3050.70       10150.3       13201.0    
  45  0.852312     -0.159803      -513.173       513.173       10474.0       10987.1    
  46  0.830189     -0.186102      -597.628       597.628       10526.7       11124.4    
  47  0.216531      -1.53002      -4913.34       4913.34       10632.8       15546.1    
  48  0.835540     -0.179677      -576.994       576.994       10945.3       11522.3    
  49  0.962152     -0.385824E-01  -123.899       123.899       10864.8       10988.7    
  50  0.866477     -0.143320      -460.240       460.240       10596.7       11057.0    
  51  0.640111     -0.446114      -1432.60       1432.60       10934.3       12366.9    
  52  0.103467      -2.26850      -7284.81       7284.81       12554.6       19839.5    
  53  0.746080     -0.292923      -940.658       940.658       10933.5       11874.1    
  54  0.154266      -1.86908      -6002.14       6002.14       10689.6       16691.8    
  55  0.479981     -0.734008      -2357.11       2357.11       9778.80       12135.9    
  56  0.641740     -0.443572      -1424.44       1424.44       11954.1       13378.6    
  57  0.282342      -1.26463      -4061.10       4061.10       14204.3       18265.4    
  58  0.691857     -0.368376      -1182.96       1182.96       9374.39       10557.3    
  59  0.774818     -0.255127      -819.286       819.286       10702.9       11522.2    
  60  0.950647     -0.506124E-01  -162.531       162.531       10772.0       10934.5    
  61  0.946272E-01  -2.35781      -7571.60       7571.60       10566.3       18137.9    
  62  0.936976     -0.650979E-01  -209.048       209.048       10751.5       10960.5    
  63  0.339755      -1.07953      -3466.68       3466.68       10421.9       13888.6    
  64  0.781991     -0.245913      -789.695       789.695       10373.9       11163.6    
loop,thermsimp(1:2)       34   7520.02       3878.97    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128       9890.24          0.90          1.10         23.07          0.45          0.05         25.57
Just calling func    0   0         25.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129       9599.81          0.90          1.09         23.12          0.52          0.04         25.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9599.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3211.28               127
loop is:       34
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3211.28               127
loop is:       35
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1605.64               190

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      128     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -1694.40       1694.40       9537.30       11231.7    
   2  0.175000      -1.74297      -2798.59       2798.59       10368.8       13167.4    
   3  0.131587      -2.02809      -3256.39       3256.39       10200.7       13457.1    
   4  0.301717      -1.19826      -1923.98       1923.98       9374.39       11298.4    
   5  0.166877      -1.79050      -2874.90       2874.90       10584.0       13458.9    
   6  0.481073     -0.731736      -1174.91       1174.91       10667.9       11842.8    
   7  0.706381     -0.347600      -558.122       558.122       10691.8       11250.0    
   8  0.702617     -0.352943      -566.700       566.700       10772.0       11338.7    
   9  0.552795     -0.592767      -951.772       951.772       10751.5       11703.2    
  10  0.495420     -0.702349      -1127.72       1127.72       10474.0       11601.7    
  11  0.479343     -0.735339      -1180.69       1180.69       10864.8       12045.5    
  12  0.462659     -0.770765      -1237.57       1237.57       10596.7       11834.3    
  13  0.631315E-01  -2.76253      -4435.64       4435.64       9962.25       14397.9    
  14  0.785681     -0.241205      -387.289       387.289       10526.7       10914.0    
  15  0.767932     -0.264055      -423.977       423.977       10673.5       11097.5    
  16  0.262689E-01  -3.63937      -5843.52       5843.52       10259.5       16103.0    
  17  0.871353     -0.137708      -221.110       221.110       10373.9       10595.0    
  18  0.618350     -0.480701      -771.834       771.834       10952.8       11724.6    
  19  0.196090      -1.62918      -2615.89       2615.89       10157.0       12772.9    
  20  0.925050     -0.779078E-01  -125.092       125.092       10457.4       10582.5    
  21  0.903269     -0.101735      -163.350       163.350       10780.5       10943.9    
  22  0.958828     -0.420436E-01  -67.5069       67.5069       10888.5       10956.0    
  23  0.969274     -0.312081E-01  -50.1090       50.1090       10702.9       10753.0    
  24  0.313932      -1.15858      -1860.26       1860.26       10945.3       12805.6    
  25  0.106324      -2.24126      -3598.67       3598.67       10743.7       14342.3    
  26  0.718705     -0.330304      -530.350       530.350       10785.9       11316.3    
  27  0.751116     -0.286195      -459.526       459.526       10933.5       11393.0    
  28  0.996391     -0.361592E-02  -5.80587       5.80587       10571.1       10576.9    
  29  0.313387      -1.16032      -1863.06       1863.06       10586.1       12449.2    
  30  0.305057      -1.18726      -1906.31       1906.31       9778.80       11685.1    
  31  0.408833     -0.894447      -1436.16       1436.16       10934.3       12370.5    
  32  0.589856     -0.527877      -847.582       847.582       10940.5       11788.1    
  33  0.808683     -0.212349      -340.956       340.956       9565.36       9906.32    
  34  0.481635     -0.730569      -1173.03       1173.03       8938.97       10112.0    
  35  0.677481     -0.389374      -625.195       625.195       10683.4       11308.6    
  36  0.673605     -0.395111      -634.406       634.406       10150.3       10784.7    
  37  0.409374E-01  -3.19571      -5131.17       5131.17       11349.2       16480.4    
  38  0.362144      -1.01571      -1630.87       1630.87       9218.69       10849.6    
  39  0.364718E-01  -3.31122      -5316.63       5316.63       11954.1       17270.7    
  40  0.280272      -1.27199      -2042.37       2042.37       10656.4       12698.7    
  41  0.532528     -0.630120      -1011.75       1011.75       10999.7       12011.4    
  42  0.901591     -0.103595      -166.336       166.336       10728.0       10894.4    
  43  0.262858      -1.33614      -2145.36       2145.36       9749.08       11894.4    
  44  0.168755      -1.77931      -2856.93       2856.93       10625.7       13482.7    
  45  0.504619     -0.683952      -1098.18       1098.18       9848.91       10947.1    
  46  0.900650     -0.104639      -168.012       168.012       10421.9       10589.9    
  47  0.438495     -0.824406      -1323.70       1323.70       10208.4       11532.1    
  48  0.984597     -0.155233E-01  -24.9249       24.9249       11273.7       11298.6    
  49  0.469739     -0.755579      -1213.19       1213.19       9645.91       10859.1    
  50  0.252111      -1.37789      -2212.39       2212.39       10297.8       12510.2    
  51  0.764692     -0.268282      -430.765       430.765       10670.0       11100.7    
  52  0.848445     -0.164351      -263.888       263.888       10881.4       11145.3    
  53  0.705739     -0.348509      -559.581       559.581       10632.8       11192.4    
  54  0.449895     -0.798741      -1282.49       1282.49       10723.2       12005.7    
  55  0.742135     -0.298224      -478.842       478.842       10689.6       11168.5    
  56  0.305311      -1.18642      -1904.97       1904.97       10526.9       12431.9    
  57  0.798408     -0.225136      -361.488       361.488       9582.37       9943.85    
  58  0.807590     -0.213700      -343.126       343.126       10566.3       10909.4    
  59  0.768432     -0.263404      -422.932       422.932       14204.3       14627.3    
  60  0.895397     -0.110488      -177.405       177.405       10694.2       10871.6    
  61  0.585964     -0.534497      -858.211       858.211       10400.6       11258.9    
  62  0.785258     -0.241743      -388.152       388.152       12554.6       12942.8    
  63  0.311021      -1.16790      -1875.22       1875.22       10936.3       12811.6    
  64  0.803571     -0.218690      -351.138       351.138       9599.81       9950.95    
loop,thermsimp(1:2)       35   1694.40       2798.59    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130       9664.67          0.89          1.09         23.05          0.33          0.05         25.41
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131       8124.44          0.89          1.09         23.05          0.18          0.05         25.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8124.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       35
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       36
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      130     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -4142.21       4142.21       9565.36       13707.6    
   2  0.962370     -0.383559E-01  -61.5858       61.5858       9582.37       9643.95    
   3  0.356737      -1.03076      -1655.02       1655.02       9599.81       11254.8    
   4  0.884319     -0.122937      -197.393       197.393       8938.97       9136.36    
   5  0.919725E-01  -2.38627      -3831.49       3831.49       10571.1       14402.6    
   6  0.900184     -0.105156      -168.843       168.843       10457.4       10626.3    
   7  0.390055     -0.941468      -1511.66       1511.66       10421.9       11933.6    
   8  0.263976      -1.33190      -2138.55       2138.55       10373.9       12512.4    
   9  0.898455     -0.107078      -171.929       171.929       10702.9       10874.9    
  10  0.697674E-01  -2.66259      -4275.16       4275.16       10150.3       14425.4    
  11  0.888938     -0.117727      -189.028       189.028       9218.69       9407.72    
  12  0.824147     -0.193406      -310.541       310.541       9645.91       9956.45    
  13  0.941109     -0.606968E-01  -97.4574       97.4574       10694.2       10791.7    
  14  0.885654     -0.121429      -194.971       194.971       10728.0       10923.0    
  15  0.798208     -0.225386      -361.889       361.889       10566.3       10928.2    
  16  0.365331      -1.00695      -1616.81       1616.81       10526.7       12143.5    
  17  0.519490     -0.654907      -1051.55       1051.55       10780.5       11832.1    
  18  0.922741     -0.804065E-01  -129.104       129.104       9848.91       9978.02    
  19  0.877443     -0.130744      -209.927       209.927       10888.5       11098.4    
  20  0.584844     -0.536410      -861.283       861.283       10673.5       11534.8    
  21  0.671390     -0.398406      -639.697       639.697       10670.0       11309.7    
  22  0.203335      -1.59290      -2557.63       2557.63       10881.4       13439.0    
  23  0.330236E-01  -3.41053      -5476.10       5476.10       10689.6       16165.7    
  24  0.879725     -0.128146      -205.757       205.757       10632.8       10838.5    
  25  0.833976     -0.181550      -291.505       291.505       9537.30       9828.81    
  26  0.901698     -0.103475      -166.144       166.144       10691.8       10858.0    
  27  0.692847     -0.366946      -589.184       589.184       10400.6       10989.8    
  28  0.550572     -0.596797      -958.242       958.242       9374.39       10332.6    
  29  0.158383E-01  -4.14532      -6655.90       6655.90       11273.7       17929.6    
  30  0.503246     -0.686677      -1102.56       1102.56       10683.4       11786.0    
  31  0.648812     -0.432612      -694.620       694.620       10785.9       11480.5    
  32  0.306980      -1.18097      -1896.22       1896.22       10772.0       12668.2    
  33  0.205188      -1.58383      -2543.06       2543.06       10933.5       13476.5    
  34  0.265146      -1.32748      -2131.45       2131.45       10208.4       12339.9    
  35  0.272730E-01  -3.60186      -5783.30       5783.30       10474.0       16257.3    
  36  0.262990E-01  -3.63823      -5841.69       5841.69       9778.80       15620.5    
  37  0.492753     -0.707748      -1136.39       1136.39       10751.5       11887.9    
  38  0.255065      -1.36624      -2193.68       2193.68       10952.8       13146.5    
  39  0.623259     -0.472794      -759.138       759.138       10940.5       11699.7    
  40  0.949296     -0.520343E-01  -83.5485       83.5485       10596.7       10680.3    
  41  0.982394     -0.177630E-01  -28.5210       28.5210       10667.9       10696.4    
  42  0.566450     -0.568366      -912.592       912.592       9749.08       10661.7    
  43  0.557613     -0.584090      -937.840       937.840       10723.2       11661.0    
  44  0.900731     -0.104549      -167.868       167.868       10999.7       11167.5    
  45  0.671339     -0.398481      -639.817       639.817       10864.8       11504.7    
  46  0.650454     -0.430084      -690.561       690.561       10934.3       11624.9    
  47  0.749315     -0.288595      -463.381       463.381       10526.9       10990.3    
  48  0.667497     -0.404220      -649.032       649.032       10586.1       11235.1    
  49  0.132870      -2.01838      -3240.80       3240.80       10297.8       13538.6    
  50  0.964787     -0.358480E-01  -57.5590       57.5590       10656.4       10713.9    
  51  0.835780     -0.179390      -288.035       288.035       10157.0       10445.1    
  52  0.601609     -0.508148      -815.903       815.903       10945.3       11761.2    
  53  0.937321     -0.647298E-01  -103.933       103.933       10936.3       11040.3    
  54  0.467877     -0.759550      -1219.57       1219.57       12554.6       13774.2    
  55  0.953249     -0.478789E-01  -76.8764       76.8764       10368.8       10445.6    
  56  0.827724     -0.189076      -303.588       303.588       10200.7       10504.3    
  57  0.624780     -0.470355      -755.222       755.222       10584.0       11339.2    
  58  0.821535     -0.196581      -315.638       315.638       10625.7       10941.4    
  59  0.625285     -0.469548      -753.926       753.926       10743.7       11497.6    
  60  0.581213     -0.542638      -871.282       871.282       9962.25       10833.5    
  61  0.855886E-01  -2.45820      -3946.99       3946.99       14204.3       18151.3    
  62  0.262334      -1.33814      -2148.57       2148.57       10259.5       12408.1    
  63  0.978265     -0.219749E-01  -35.2838       35.2838       11349.2       11384.5    
  64  0.600842     -0.509423      -817.951       817.951       8124.44       8942.39    
loop,thermsimp(1:2)       36   4142.21       61.5858    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       9337.90          0.89          1.10         23.03          0.39          0.04         25.45
Just calling func    0   0         25.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133       8382.14          0.89          1.12         23.06          0.27          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8382.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       36
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       37
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      132     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -100.777       100.777       8124.44       8225.22    
   2  0.112532E-01  -4.48710      -7204.68       7204.68       8938.97       16143.6    
   3  0.907929     -0.965891E-01  -155.087       155.087       9218.69       9373.78    
   4  0.478640     -0.736807      -1183.05       1183.05       9582.37       10765.4    
   5  0.737686     -0.304237      -488.496       488.496       9537.30       10025.8    
   6  0.114880      -2.16387      -3474.40       3474.40       9645.91       13120.3    
   7  0.309837      -1.17171      -1881.34       1881.34       9848.91       11730.3    
   8  0.469091     -0.756958      -1215.40       1215.40       9374.39       10589.8    
   9  0.721151     -0.326907      -524.895       524.895       10157.0       10681.9    
  10  0.557251     -0.584740      -938.884       938.884       10368.8       11307.7    
  11  0.581534     -0.542085      -870.395       870.395       10200.7       11071.1    
  12  0.501412     -0.690326      -1108.42       1108.42       10457.4       11565.8    
  13  0.783062     -0.244543      -392.649       392.649       9749.08       10141.7    
  14  0.571322     -0.559803      -898.843       898.843       10596.7       11495.6    
  15  0.902729E-01  -2.40492      -3861.44       3861.44       10667.9       14529.3    
  16  0.695403E-01  -2.66585      -4280.40       4280.40       10656.4       14936.8    
  17  0.128872      -2.04894      -3289.86       3289.86       10694.2       13984.1    
  18  0.940828E-01  -2.36358      -3795.06       3795.06       9962.25       13757.3    
  19  0.326350      -1.11979      -1797.97       1797.97       10632.8       12430.7    
  20  0.102915      -2.27385      -3651.00       3651.00       10691.8       14342.8    
  21  0.324524      -1.12540      -1806.98       1806.98       10702.9       12509.9    
  22  0.259454      -1.34918      -2166.30       2166.30       10728.0       12894.3    
  23  0.782812     -0.244863      -393.162       393.162       10566.3       10959.5    
  24  0.383591     -0.958178      -1538.49       1538.49       10625.7       12164.2    
  25  0.626880     -0.466999      -749.834       749.834       10400.6       11150.5    
  26  0.292269      -1.23008      -1975.07       1975.07       10526.9       12502.0    
  27  0.448852     -0.801062      -1286.22       1286.22       10936.3       12222.6    
  28  0.685432     -0.377706      -606.461       606.461       10888.5       11495.0    
  29  0.995399     -0.461118E-02  -7.40391       7.40391       10999.7       11007.1    
  30  0.163323      -1.81203      -2909.47       2909.47       10586.1       13495.6    
  31  0.952940     -0.482038E-01  -77.3980       77.3980       9599.81       9677.21    
  32  0.861306     -0.149306      -239.732       239.732       10670.0       10909.7    
  33  0.587276     -0.532261      -854.621       854.621       10584.0       11438.6    
  34  0.908704     -0.957357E-01  -153.717       153.717       11349.2       11502.9    
  35  0.585935     -0.534546      -858.289       858.289       10785.9       11644.2    
  36  0.429836     -0.844352      -1355.73       1355.73       10743.7       12099.4    
  37  0.726203     -0.319926      -513.687       513.687       10864.8       11378.5    
  38  0.151145E-01  -4.19210      -6731.01       6731.01       10673.5       17404.5    
  39  0.927869     -0.748646E-01  -120.206       120.206       10934.3       11054.5    
  40  0.961645     -0.391099E-01  -62.7965       62.7965       10723.2       10786.0    
  41  0.253977      -1.37051      -2200.55       2200.55       10940.5       13141.1    
  42  0.768038     -0.263917      -423.755       423.755       10945.3       11369.1    
  43  0.569441E-01  -2.86569      -4601.26       4601.26       10683.4       15284.7    
  44  0.103919      -2.26415      -3635.41       3635.41       10780.5       14415.9    
  45  0.312226      -1.16403      -1869.01       1869.01       10751.5       12620.5    
  46  0.473636E-02  -5.35249      -8594.18       8594.18       10421.9       19016.1    
  47  0.192099      -1.64975      -2648.90       2648.90       10526.7       13175.6    
  48  0.799429     -0.223858      -359.436       359.436       10208.4       10567.8    
  49  0.164379      -1.80558      -2899.12       2899.12       10259.5       13158.6    
  50  0.421896     -0.862996      -1385.66       1385.66       10373.9       11759.5    
  51  0.361660      -1.01705      -1633.02       1633.02       10772.0       12405.0    
  52  0.346541      -1.05975      -1701.59       1701.59       10952.8       12654.4    
  53  0.728715     -0.316473      -508.142       508.142       10881.4       11389.5    
  54  0.305329      -1.18637      -1904.88       1904.88       10933.5       12838.3    
  55  0.547244     -0.602861      -967.979       967.979       10297.8       11265.8    
  56  0.942790     -0.589122E-01  -94.5918       94.5918       9565.36       9659.95    
  57  0.846801     -0.166290      -267.002       267.002       12554.6       12821.6    
  58  0.961806     -0.389424E-01  -62.5276       62.5276       10571.1       10633.6    
  59  0.101104      -2.29161      -3679.50       3679.50       10150.3       13829.8    
  60  0.181736      -1.70520      -2737.94       2737.94       9778.80       12516.7    
  61  0.298004      -1.21065      -1943.87       1943.87       10689.6       12633.5    
  62  0.840699E-01  -2.47611      -3975.74       3975.74       10474.0       14449.7    
  63  0.796444     -0.227598      -365.441       365.441       11273.7       11639.1    
  64  0.294043      -1.22403      -1965.35       1965.35       8382.14       10347.5    
loop,thermsimp(1:2)       37   100.777       7204.68    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       9592.65          0.90          1.09         23.02          0.31          0.04         25.37
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9592.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       37
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       38
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      133     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -1588.82       1588.82       8124.44       9713.26    
   2  0.687927     -0.374072      -600.626       600.626       9218.69       9819.31    
   3  0.288957      -1.24148      -1993.37       1993.37       9565.36       11558.7    
   4  0.192838      -1.64590      -2642.73       2642.73       9599.81       12242.5    
   5  0.369869     -0.994607      -1596.98       1596.98       9537.30       11134.3    
   6  0.735973     -0.306562      -492.229       492.229       9749.08       10241.3    
   7  0.637144     -0.450760      -723.759       723.759       8382.14       9105.90    
   8  0.703934     -0.351071      -563.694       563.694       10208.4       10772.1    
   9  0.864279     -0.145859      -234.198       234.198       9374.39       9608.59    
  10  0.473452     -0.747705      -1200.55       1200.55       10571.1       11771.6    
  11  0.242010      -1.41877      -2278.04       2278.04       10157.0       12435.1    
  12  0.510769     -0.671838      -1078.73       1078.73       9582.37       10661.1    
  13  0.829624     -0.186782      -299.906       299.906       10723.2       11023.1    
  14  0.228911      -1.47442      -2367.40       2367.40       10670.0       13037.4    
  15  0.310006      -1.17116      -1880.47       1880.47       10566.3       12446.8    
  16  0.248341      -1.39295      -2236.58       2236.58       10999.7       13236.2    
  17  0.723214     -0.324050      -520.308       520.308       10934.3       11454.6    
  18  0.420900     -0.865360      -1389.46       1389.46       10200.7       11590.2    
  19  0.133903      -2.01064      -3228.36       3228.36       10400.6       13629.0    
  20  0.571916     -0.558763      -897.174       897.174       10297.8       11195.0    
  21  0.609104     -0.495766      -796.022       796.022       10368.8       11164.8    
  22  0.582057     -0.541186      -868.951       868.951       10945.3       11814.3    
  23  0.440731     -0.819321      -1315.54       1315.54       10864.8       12180.4    
  24  0.211006      -1.55587      -2498.17       2498.17       10881.4       13379.6    
  25  0.665769     -0.406813      -653.196       653.196       10584.0       11237.2    
  26  0.766062     -0.266493      -427.892       427.892       10888.5       11316.4    
  27  0.321416E-01  -3.43760      -5519.56       5519.56       10596.7       16116.3    
  28  0.165897E-01  -4.09897      -6581.48       6581.48       11349.2       17930.7    
  29  0.634553     -0.454835      -730.302       730.302       10457.4       11187.7    
  30  0.981834     -0.183335E-01  -29.4371       29.4371       11273.7       11303.1    
  31  0.511720     -0.669978      -1075.75       1075.75       10785.9       11861.7    
  32  0.426358     -0.852477      -1368.77       1368.77       9848.91       11217.7    
  33  0.500527     -0.692094      -1111.26       1111.26       10373.9       11485.1    
  34  0.100483      -2.29777      -3689.40       3689.40       10743.7       14433.1    
  35  0.837324     -0.177545      -285.073       285.073       10625.7       10910.8    
  36  0.257741      -1.35580      -2176.93       2176.93       10936.3       13113.3    
  37  0.437184     -0.827401      -1328.51       1328.51       10772.0       12100.5    
  38  0.707529     -0.345976      -555.514       555.514       10632.8       11188.3    
  39  0.538379     -0.619193      -994.202       994.202       10526.9       11521.1    
  40  0.611820     -0.491317      -788.878       788.878       10702.9       11491.8    
  41  0.404533     -0.905022      -1453.14       1453.14       9778.80       11231.9    
  42  0.902499     -0.102588      -164.720       164.720       10751.5       10916.2    
  43  0.704299     -0.350552      -562.861       562.861       10689.6       11252.5    
  44  0.511818     -0.669786      -1075.44       1075.44       10952.8       12028.2    
  45  0.748131     -0.290178      -465.922       465.922       12554.6       13020.6    
  46  0.296598      -1.21538      -1951.46       1951.46       10933.5       12884.9    
  47  0.805122     -0.216762      -348.042       348.042       10728.0       11076.1    
  48  0.525063     -0.644236      -1034.41       1034.41       9645.91       10680.3    
  49  0.192567      -1.64731      -2644.99       2644.99       10940.5       13585.5    
  50  0.991898     -0.813527E-02  -13.0623       13.0623       10259.5       10272.6    
  51  0.238175      -1.43475      -2303.69       2303.69       10526.7       12830.4    
  52  0.627675     -0.465733      -747.800       747.800       10586.1       11333.9    
  53  0.328849      -1.11216      -1785.72       1785.72       9962.25       11748.0    
  54  0.697651     -0.360037      -578.090       578.090       10150.3       10728.4    
  55  0.154345      -1.86857      -3000.25       3000.25       10694.2       13694.5    
  56  0.196838      -1.62537      -2609.77       2609.77       10691.8       13301.6    
  57  0.397903     -0.921546      -1479.67       1479.67       10780.5       12260.2    
  58  0.746135E-01  -2.59543      -4167.34       4167.34       10474.0       14641.3    
  59  0.283843      -1.25934      -2022.04       2022.04       10667.9       12689.9    
  60  0.540853E-02  -5.21978      -8381.10       8381.10       10656.4       19037.5    
  61  0.534720     -0.626011      -1005.15       1005.15       10683.4       11688.6    
  62  0.909816     -0.945126E-01  -151.753       151.753       8938.97       9090.72    
  63  0.190142      -1.65998      -2665.34       2665.34       10673.5       13338.9    
  64  0.150854      -1.89144      -3036.98       3036.98       9592.65       12629.6    
loop,thermsimp(1:2)       38   1588.82       600.626    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135      10025.94          0.90          1.10         23.07          0.26          0.04         25.37
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136      18148.24          0.90          1.09         23.06          0.23          0.05         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  10025.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       38
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       39
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      135     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -517.979       517.979       8938.97       9456.95    
   2  0.309663      -1.17227      -1882.25       1882.25       8382.14       10264.4    
   3  0.688114     -0.373801      -600.190       600.190       9374.39       9974.58    
   4  0.677876     -0.388791      -624.259       624.259       8124.44       8748.70    
   5  0.283701      -1.25984      -2022.84       2022.84       9218.69       11241.5    
   6  0.183733      -1.69427      -2720.39       2720.39       9749.08       12469.5    
   7  0.243414      -1.41299      -2268.76       2268.76       10259.5       12528.3    
   8  0.785389     -0.241576      -387.884       387.884       9582.37       9970.25    
   9  0.258033      -1.35467      -2175.11       2175.11       9645.91       11821.0    
  10  0.137887      -1.98132      -3181.30       3181.30       10150.3       13331.6    
  11  0.386520     -0.950573      -1526.28       1526.28       10208.4       11734.7    
  12  0.882934     -0.124505      -199.911       199.911       10625.7       10825.6    
  13  0.395106     -0.928602      -1491.00       1491.00       10751.5       12242.5    
  14  0.107633      -2.22903      -3579.03       3579.03       10723.2       14302.2    
  15  0.434094     -0.834495      -1339.90       1339.90       10728.0       12067.9    
  16  0.558484     -0.582529      -935.334       935.334       9537.30       10472.6    
  17  0.102706      -2.27589      -3654.26       3654.26       10368.8       14023.0    
  18  0.325804      -1.12146      -1800.66       1800.66       10457.4       12258.1    
  19  0.693871     -0.365469      -586.812       586.812       10632.8       11219.6    
  20  0.832622     -0.183176      -294.115       294.115       10297.8       10591.9    
  21  0.691207     -0.369316      -592.989       592.989       9848.91       10441.9    
  22  0.903946     -0.100985      -162.146       162.146       9778.80       9940.95    
  23  0.258785E-01  -3.65434      -5867.56       5867.56       10584.0       16451.6    
  24  0.247338      -1.39700      -2243.08       2243.08       10689.6       12932.7    
  25  0.861464     -0.149122      -239.437       239.437       11273.7       11513.1    
  26  0.954919     -0.461290E-01  -74.0666       74.0666       10888.5       10962.6    
  27  0.579638     -0.545352      -875.640       875.640       10586.1       11461.7    
  28  0.537182     -0.621418      -997.775       997.775       10934.3       11932.1    
  29  0.407710     -0.897199      -1440.58       1440.58       10373.9       11814.5    
  30  0.958466     -0.424211E-01  -68.1131       68.1131       10702.9       10771.0    
  31  0.884674     -0.122536      -196.749       196.749       10526.9       10723.6    
  32  0.395055     -0.928731      -1491.21       1491.21       9565.36       11056.6    
  33  0.325425      -1.12262      -1802.53       1802.53       10200.7       12003.2    
  34  0.679842     -0.385895      -619.610       619.610       10683.4       11303.0    
  35  0.765292     -0.267498      -429.506       429.506       9962.25       10391.8    
  36  0.217460      -1.52574      -2449.79       2449.79       10571.1       13020.9    
  37  0.181189      -1.70822      -2742.78       2742.78       10945.3       13688.1    
  38  0.518456     -0.656899      -1054.75       1054.75       10785.9       11840.7    
  39  0.249864E-01  -3.68942      -5923.89       5923.89       10952.8       16876.7    
  40  0.336654      -1.08870      -1748.06       1748.06       10772.0       12520.0    
  41  0.873801     -0.134903      -216.606       216.606       10864.8       11081.5    
  42  0.478904     -0.736255      -1182.16       1182.16       9599.81       10782.0    
  43  0.819950     -0.198512      -318.740       318.740       10780.5       11099.3    
  44  0.966813     -0.337500E-01  -54.1905       54.1905       10157.0       10211.2    
  45  0.514109     -0.665319      -1068.26       1068.26       10566.3       11634.6    
  46  0.483734     -0.726221      -1166.05       1166.05       9592.65       10758.7    
  47  0.227743E-01  -3.78212      -6072.74       6072.74       10667.9       16740.6    
  48  0.409495     -0.892830      -1433.56       1433.56       10526.7       11960.3    
  49  0.198361      -1.61767      -2597.40       2597.40       10933.5       13530.9    
  50  0.925767     -0.771331E-01  -123.848       123.848       12554.6       12678.5    
  51  0.842113     -0.171842      -275.916       275.916       10670.0       10945.9    
  52  0.347114E-01  -3.36069      -5396.06       5396.06       10936.3       16332.4    
  53  0.215814      -1.53334      -2461.99       2461.99       10999.7       13461.7    
  54  0.219309      -1.51727      -2436.20       2436.20       10691.8       13128.0    
  55  0.940126     -0.617416E-01  -99.1348       99.1348       10673.5       10772.7    
  56  0.663408     -0.410365      -658.900       658.900       10881.4       11540.3    
  57  0.630947     -0.460533      -739.451       739.451       10940.5       11680.0    
  58  0.719671     -0.328961      -528.193       528.193       10400.6       10928.8    
  59  0.939094     -0.628392E-01  -100.897       100.897       10694.2       10795.1    
  60  0.901520     -0.103673      -166.462       166.462       10743.7       10910.1    
  61  0.771028     -0.260031      -417.516       417.516       10474.0       10891.5    
  62  0.320616      -1.13751      -1826.43       1826.43       10596.7       12423.2    
  63  0.893890     -0.112173      -180.109       180.109       11349.2       11529.3    
  64  0.874332     -0.134295      -215.630       215.630       10025.9       10241.6    
loop,thermsimp(1:2)       39   517.979       1882.25    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137       9141.95          0.89          1.09         23.10          0.38          0.05         25.51
Just calling func    0   0         25.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138       7709.94          0.88          1.09         23.05          0.48          0.04         25.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   7709.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       39
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       40
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      137     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -74.5493       74.5493       8124.44       8198.99    
   2  0.450411     -0.797594      -1280.65       1280.65       8938.97       10219.6    
   3  0.691912E-01  -2.67088      -4288.48       4288.48       9778.80       14067.3    
   4  0.740935     -0.299842      -481.439       481.439       9582.37       10063.8    
   5  0.452531     -0.792898      -1273.11       1273.11       9374.39       10647.5    
   6  0.461330     -0.773642      -1242.19       1242.19       10157.0       11399.2    
   7  0.102999      -2.27303      -3649.68       3649.68       10025.9       13675.6    
   8  0.475106     -0.744217      -1194.95       1194.95       8382.14       9577.09    
   9  0.240275      -1.42597      -2289.60       2289.60       9962.25       12251.8    
  10  0.276707E-01  -3.58738      -5760.05       5760.05       9848.91       15609.0    
  11  0.132701E-01  -4.32224      -6939.97       6939.97       9537.30       16477.3    
  12  0.997219     -0.278509E-02  -4.47185       4.47185       10297.8       10302.3    
  13  0.563305     -0.573934      -921.532       921.532       10526.9       11448.4    
  14  0.347949      -1.05570      -1695.08       1695.08       9592.65       11287.7    
  15  0.546018     -0.605103      -971.579       971.579       10702.9       11674.5    
  16  0.343968      -1.06721      -1713.55       1713.55       10673.5       12387.1    
  17  0.945234     -0.563230E-01  -90.4345       90.4345       9599.81       9690.24    
  18  0.346208      -1.06072      -1703.13       1703.13       10694.2       12397.4    
  19  0.406433     -0.900337      -1445.62       1445.62       10625.7       12071.3    
  20  0.632259     -0.458455      -736.115       736.115       10474.0       11210.1    
  21  0.983930     -0.162002E-01  -26.0117       26.0117       10743.7       10769.7    
  22  0.200798      -1.60546      -2577.79       2577.79       10400.6       12978.4    
  23  0.223962      -1.49628      -2402.49       2402.49       10670.0       13072.4    
  24  0.594322     -0.520335      -835.471       835.471       10888.5       11724.0    
  25  0.875298     -0.133191      -213.857       213.857       9565.36       9779.22    
  26  0.327822      -1.11529      -1790.75       1790.75       10864.8       12655.6    
  27  0.215105      -1.53663      -2467.27       2467.27       10780.5       13247.8    
  28  0.905181     -0.996198E-01  -159.954       159.954       10632.8       10792.7    
  29  0.699086     -0.357981      -574.790       574.790       9218.69       9793.48    
  30  0.747401     -0.291154      -467.489       467.489       10683.4       11150.9    
  31  0.699189     -0.357834      -574.553       574.553       10586.1       11160.7    
  32  0.563488     -0.573610      -921.012       921.012       11273.7       12194.7    
  33  0.155576      -1.86062      -2987.50       2987.50       11349.2       14336.7    
  34  0.380593     -0.966025      -1551.09       1551.09       10881.4       12432.5    
  35  0.626112     -0.468226      -751.803       751.803       10566.3       11318.1    
  36  0.372369     -0.987870      -1586.16       1586.16       10940.5       12526.7    
  37  0.517531     -0.658686      -1057.61       1057.61       10208.4       11266.0    
  38  0.673247     -0.395643      -635.260       635.260       10373.9       11009.1    
  39  0.741527     -0.299044      -480.158       480.158       9645.91       10126.1    
  40  0.280982      -1.26947      -2038.31       2038.31       10785.9       12824.2    
  41  0.331745      -1.10339      -1771.65       1771.65       10934.3       12706.0    
  42  0.712030     -0.339635      -545.332       545.332       10526.7       11072.1    
  43  0.200581      -1.60654      -2579.52       2579.52       10200.7       12780.2    
  44  0.989915     -0.101357E-01  -16.2743       16.2743       10728.0       10744.3    
  45  0.808031     -0.213155      -342.251       342.251       10751.5       11093.7    
  46  0.893446     -0.112670      -180.907       180.907       10457.4       10638.3    
  47  0.364885      -1.00817      -1618.76       1618.76       10596.7       12215.5    
  48  0.923731     -0.793347E-01  -127.383       127.383       9749.08       9876.46    
  49  0.504880     -0.683434      -1097.35       1097.35       10772.0       11869.3    
  50  0.724988     -0.321600      -516.375       516.375       10259.5       10775.9    
  51  0.927322     -0.754540E-01  -121.152       121.152       12554.6       12675.8    
  52  0.857721     -0.153476      -246.428       246.428       10689.6       10936.1    
  53  0.943333     -0.583361E-01  -93.6669       93.6669       10571.1       10664.8    
  54  0.794551     -0.229978      -369.262       369.262       10691.8       11061.1    
  55  0.732400     -0.311429      -500.043       500.043       10150.3       10650.3    
  56  0.143434      -1.94188      -3117.96       3117.96       10999.7       14117.6    
  57  0.859384     -0.151540      -243.318       243.318       10933.5       11176.8    
  58  0.677471     -0.389389      -625.219       625.219       10945.3       11570.5    
  59  0.258745      -1.35191      -2170.68       2170.68       10368.8       12539.5    
  60  0.380926E-01  -3.26773      -5246.81       5246.81       10723.2       15970.0    
  61  0.563373     -0.573814      -921.339       921.339       10936.3       11857.7    
  62  0.985538     -0.145678E-01  -23.3906       23.3906       10584.0       10607.4    
  63  0.647297     -0.434951      -698.375       698.375       10667.9       11366.3    
  64  0.608092     -0.497430      -798.694       798.694       7709.94       8508.63    
loop,thermsimp(1:2)       40   74.5493       1280.65    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139       8971.19          0.89          1.11         23.04          0.42          0.04         25.50
Just calling func    0   0         25.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8971.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       40
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       41
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      138     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -1649.51       1649.51       8124.44       9773.95    
   2  0.414955     -0.879585      -1412.30       1412.30       7709.94       9122.24    
   3  0.407443     -0.897854      -1441.63       1441.63       8382.14       9823.77    
   4  0.883897     -0.123414      -198.159       198.159       9599.81       9797.97    
   5  0.520045     -0.653840      -1049.83       1049.83       9565.36       10615.2    
   6  0.634521     -0.454885      -730.382       730.382       9218.69       9949.07    
   7  0.344406      -1.06594      -1711.51       1711.51       9749.08       11460.6    
   8  0.545595     -0.605879      -972.825       972.825       9582.37       10555.2    
   9  0.766876     -0.265430      -426.185       426.185       9645.91       10072.1    
  10  0.639043     -0.447783      -718.979       718.979       8938.97       9657.95    
  11  0.850701     -0.161694      -259.623       259.623       10297.8       10557.4    
  12  0.832060     -0.183851      -295.199       295.199       10584.0       10879.2    
  13  0.728209     -0.317167      -509.256       509.256       10457.4       10966.7    
  14  0.531327     -0.632378      -1015.37       1015.37       9374.39       10389.8    
  15  0.188974E-01  -3.96873      -6372.36       6372.36       10150.3       16522.6    
  16  0.246817      -1.39911      -2246.46       2246.46       10571.1       12817.6    
  17  0.935336     -0.668496E-01  -107.336       107.336       10728.0       10835.4    
  18  0.730823     -0.313585      -503.504       503.504       10743.7       11247.2    
  19  0.482288     -0.729213      -1170.86       1170.86       10259.5       11430.4    
  20  0.782974E-04  -9.45500      -15181.3       15181.3       10632.8       25814.1    
  21  0.258744      -1.35192      -2170.69       2170.69       10689.6       12860.3    
  22  0.389044     -0.944063      -1515.83       1515.83       10373.9       11889.7    
  23  0.611459E-01  -2.79449      -4486.95       4486.95       10691.8       15178.8    
  24  0.124922      -2.08006      -3339.84       3339.84       10526.7       13866.6    
  25  0.253683      -1.37167      -2202.41       2202.41       10751.5       12953.9    
  26  0.781437     -0.246621      -395.985       395.985       10683.4       11079.4    
  27  0.835634     -0.179565      -288.317       288.317       10586.1       10874.4    
  28  0.542030     -0.612434      -983.350       983.350       10933.5       11916.8    
  29  0.463443     -0.769071      -1234.85       1234.85       10474.0       11708.8    
  30  0.120587      -2.11538      -3396.55       3396.55       10208.4       13605.0    
  31  0.733316     -0.310178      -498.035       498.035       9592.65       10090.7    
  32  0.955530     -0.454889E-01  -73.0388       73.0388       10566.3       10639.3    
  33  0.419735     -0.868132      -1393.91       1393.91       10667.9       12061.8    
  34  0.284829      -1.25587      -2016.47       2016.47       10157.0       12173.5    
  35  0.924079     -0.789582E-01  -126.779       126.779       10526.9       10653.7    
  36  0.432674     -0.837770      -1345.16       1345.16       10945.3       12290.5    
  37  0.155293      -1.86244      -2990.41       2990.41       10702.9       13693.3    
  38  0.634342     -0.455168      -730.836       730.836       10888.5       11619.3    
  39  0.935635     -0.665293E-01  -106.822       106.822       10936.3       11043.2    
  40  0.931832     -0.706024E-01  -113.362       113.362       10772.0       10885.3    
  41  0.875970     -0.132424      -212.625       212.625       10625.7       10838.3    
  42  0.273544      -1.29629      -2081.38       2081.38       11273.7       13355.1    
  43  0.799596     -0.223649      -359.101       359.101       10596.7       10955.8    
  44  0.772883     -0.257628      -413.658       413.658       9962.25       10375.9    
  45  0.274276      -1.29362      -2077.09       2077.09       10673.5       12750.6    
  46  0.116034      -2.15387      -3458.35       3458.35       10694.2       14152.6    
  47  0.700214     -0.356369      -572.201       572.201       10881.4       11453.6    
  48  0.704184E-01  -2.65330      -4260.25       4260.25       10940.5       15200.8    
  49  0.699980E-01  -2.65929      -4269.87       4269.87       10368.8       14638.6    
  50  0.186964      -1.67684      -2692.40       2692.40       10864.8       13557.2    
  51  0.342641      -1.07107      -1719.76       1719.76       12554.6       14274.4    
  52  0.989806     -0.102462E-01  -16.4517       16.4517       10934.3       10950.8    
  53  0.216227      -1.53143      -2458.92       2458.92       10200.7       12659.6    
  54  0.233793      -1.45332      -2333.51       2333.51       10785.9       13119.4    
  55  0.404477     -0.905159      -1453.36       1453.36       10400.6       11854.0    
  56  0.164502      -1.80483      -2897.91       2897.91       10670.0       13567.9    
  57  0.561765E-01  -2.87926      -4623.05       4623.05       10780.5       15403.6    
  58  0.169196E-01  -4.07928      -6549.86       6549.86       10025.9       16575.8    
  59  0.486948     -0.719597      -1155.42       1155.42       9778.80       10934.2    
  60  0.640730     -0.445148      -714.748       714.748       10999.7       11714.4    
  61  0.940004     -0.618708E-01  -99.3424       99.3424       11349.2       11448.6    
  62  0.216981      -1.52795      -2453.34       2453.34       9848.91       12302.2    
  63  0.131817      -2.02634      -3253.58       3253.58       10723.2       13976.8    
  64  0.996981     -0.302401E-02  -4.85547       4.85547       8971.19       8976.05    
loop,thermsimp(1:2)       41   1649.51       1412.30    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       9238.06          0.90          1.10         23.03          0.25          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141       7920.16          0.89          1.10         23.06          0.34          0.04         25.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    7920.2        3.594    -0.6949      3.752     -100.0     0.1444E-01
                     -0.9658      2.226     -100.0      2.382     0.7520    
                      0.7520    -0.1480      2.400      0.000      0.000    
                      -2.093      0.000      0.000      0.000     -1.221    

                      -2.500      9727.     0.1318E+05 -783.9     -2351.    
                      -2.000     -3.256     -2.256     -4.556     -3.256    
                      -13.88     -2.427      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1191    -0.7658E-01  0.000    -0.7819E-01
                      0.4063E-01-0.1959     0.4299E-01-0.6706E-01-0.3922E-01

                     -0.9100    -0.5591      0.000     0.2290     0.1602    
                      0.8541E-01-0.3010     0.1362     0.1003    -0.2354    
                     -0.1395     0.4779E-01-0.1485E-01-0.9019      0.000    

                     -0.6537    -0.7520      2.263     -1.646      0.000    
                       0.000      9.224      8.949     -5091.     -4.000    
                      0.3719     -4.223      9.124      8.780     -3760.    

                      -4.000     0.3719     0.3719      9.324      8.954    
                      -6424.     -4.000     0.3719     0.3719      9.524    
                       8.924     -6526.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   7920.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       41
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       42
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      140     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -4629.79       4629.79       8971.19       13601.0    
   2  0.688513     -0.373221      -599.260       599.260       7709.94       8309.20    
   3  0.530653     -0.633647      -1017.41       1017.41       8938.97       9956.38    
   4  0.542886     -0.610856      -980.816       980.816       8124.44       9105.26    
   5  0.603382     -0.505205      -811.178       811.178       9599.81       10411.0    
   6  0.478412     -0.737283      -1183.81       1183.81       8382.14       9565.95    
   7  0.809657     -0.211144      -339.022       339.022       9218.69       9557.71    
   8  0.764585     -0.268422      -430.989       430.989       9645.91       10076.9    
   9  0.228600      -1.47578      -2369.57       2369.57       9592.65       11962.2    
  10  0.495526     -0.702136      -1127.38       1127.38       9962.25       11089.6    
  11  0.368264     -0.998954      -1603.96       1603.96       9374.39       10978.4    
  12  0.407647     -0.897355      -1440.83       1440.83       9582.37       11023.2    
  13  0.316165      -1.15149      -1848.88       1848.88       10297.8       12146.7    
  14  0.458518     -0.779756      -1252.01       1252.01       9565.36       10817.4    
  15  0.643610     -0.440663      -707.547       707.547       10566.3       11273.8    
  16  0.316553E-01  -3.45285      -5544.04       5544.04       10526.9       16070.9    
  17  0.570171     -0.561819      -902.081       902.081       10728.0       11630.1    
  18  0.448642E-01  -3.10412      -4984.10       4984.10       10625.7       15609.8    
  19  0.128957      -2.04828      -3288.80       3288.80       10586.1       13874.9    
  20  0.159422      -1.83620      -2948.28       2948.28       10584.0       13532.3    
  21  0.154083      -1.87026      -3002.97       3002.97       10772.0       13774.9    
  22  0.696997     -0.360974      -579.595       579.595       9778.80       10358.4    
  23  0.579421     -0.545727      -876.242       876.242       10934.3       11810.6    
  24  0.528206     -0.638269      -1024.83       1024.83       10596.7       11621.6    
  25  0.322914      -1.13037      -1814.97       1814.97       10457.4       12272.4    
  26  0.369562     -0.995437      -1598.32       1598.32       10936.3       12534.6    
  27  0.134248      -2.00806      -3224.23       3224.23       10683.4       13907.7    
  28  0.950150     -0.511358E-01  -82.1057       82.1057       10743.7       10825.8    
  29  0.138040      -1.98021      -3179.51       3179.51       10259.5       13439.0    
  30  0.316838      -1.14936      -1845.47       1845.47       11349.2       13194.7    
  31  0.151783      -1.88530      -3027.12       3027.12       10881.4       13908.5    
  32  0.338674      -1.08272      -1738.46       1738.46       9749.08       11487.5    
  33  0.814165     -0.205592      -330.108       330.108       10888.5       11218.6    
  34  0.578183     -0.547865      -879.674       879.674       10474.0       11353.6    
  35  0.208707      -1.56682      -2515.76       2515.76       10999.7       13515.4    
  36  0.540561     -0.615147      -987.706       987.706       10400.6       11388.4    
  37  0.910129     -0.941686E-01  -151.201       151.201       10373.9       10525.1    
  38  0.907740     -0.967972E-01  -155.422       155.422       10933.5       11088.9    
  39  0.549661     -0.598453      -960.901       960.901       10667.9       11628.8    
  40  0.193889      -1.64047      -2634.01       2634.01       10157.0       12791.1    
  41  0.807651     -0.213625      -343.006       343.006       10945.3       11288.3    
  42  0.613777     -0.488124      -783.752       783.752       9848.91       10632.7    
  43  0.664452     -0.408793      -656.375       656.375       10200.7       10857.1    
  44  0.584630     -0.536776      -861.869       861.869       10673.5       11535.4    
  45  0.618915     -0.479787      -770.367       770.367       10571.1       11341.5    
  46  0.542097     -0.612311      -983.152       983.152       10689.6       11672.8    
  47  0.133641      -2.01260      -3231.51       3231.51       10751.5       13983.0    
  48  0.479627     -0.734747      -1179.74       1179.74       10785.9       11965.7    
  49  0.225939      -1.48749      -2388.38       2388.38       11273.7       13662.1    
  50  0.324869      -1.12433      -1805.27       1805.27       10864.8       12670.1    
  51  0.669051     -0.401895      -645.300       645.300       10670.0       11315.3    
  52  0.602039     -0.507434      -814.757       814.757       10208.4       11023.2    
  53  0.143076      -1.94438      -3121.98       3121.98       10702.9       13824.9    
  54  0.897604     -0.108026      -173.451       173.451       10526.7       10700.2    
  55  0.165810      -1.79691      -2885.20       2885.20       10723.2       13608.4    
  56  0.468567     -0.758077      -1217.20       1217.20       10694.2       11911.4    
  57  0.641740     -0.443572      -712.218       712.218       12554.6       13266.9    
  58  0.904980     -0.998426E-01  -160.311       160.311       10368.8       10529.1    
  59  0.674132     -0.394330      -633.152       633.152       10691.8       11325.0    
  60  0.756363     -0.279234      -448.349       448.349       10940.5       11388.9    
  61  0.113892      -2.17251      -3488.27       3488.27       10780.5       14268.8    
  62  0.835916     -0.179227      -287.774       287.774       10150.3       10438.0    
  63  0.284183      -1.25814      -2020.12       2020.12       10025.9       12046.1    
  64  0.276674      -1.28492      -2063.11       2063.11       7920.16       9983.27    
loop,thermsimp(1:2)       42   4629.79       599.260    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       9349.71          0.90          1.09         23.02          0.30          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    143       8198.30          0.89          1.09         23.02          0.22          0.04         25.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8198.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       42
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       43
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      142     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -381.331       381.331       7709.94       8091.27    
   2  0.796559     -0.227454      -365.210       365.210       8124.44       8489.65    
   3  0.784232     -0.243051      -390.252       390.252       9218.69       9608.94    
   4  0.503549     -0.686074      -1101.59       1101.59       8382.14       9483.73    
   5  0.468337     -0.758566      -1217.99       1217.99       8938.97       10157.0    
   6  0.198518      -1.61688      -2596.13       2596.13       7920.16       10516.3    
   7  0.857529     -0.153700      -246.787       246.787       9645.91       9892.70    
   8  0.845427     -0.167913      -269.608       269.608       9778.80       10048.4    
   9  0.710919     -0.341197      -547.840       547.840       9599.81       10147.6    
  10  0.934107     -0.681640E-01  -109.447       109.447       10150.3       10259.7    
  11  0.565087     -0.570775      -916.461       916.461       10373.9       11290.3    
  12  0.147377      -1.91476      -3074.42       3074.42       10368.8       13443.2    
  13  0.471965     -0.750851      -1205.60       1205.60       9848.91       11054.5    
  14  0.287319      -1.24716      -2002.49       2002.49       10526.7       12529.2    
  15  0.526906     -0.640733      -1028.79       1028.79       9565.36       10594.1    
  16  0.176999      -1.73161      -2780.35       2780.35       10743.7       13524.0    
  17  0.868579     -0.140897      -226.229       226.229       10200.7       10426.9    
  18  0.621282     -0.475971      -764.239       764.239       9374.39       10138.6    
  19  0.181881      -1.70440      -2736.66       2736.66       10208.4       12945.1    
  20  0.565209     -0.570560      -916.115       916.115       9582.37       10498.5    
  21  0.927617     -0.751364E-01  -120.642       120.642       10933.5       11054.1    
  22  0.296120      -1.21699      -1954.05       1954.05       9962.25       11916.3    
  23  0.152389      -1.88132      -3020.72       3020.72       10888.5       13909.2    
  24  0.508731     -0.675835      -1085.15       1085.15       10566.3       11651.4    
  25  0.389654     -0.942496      -1513.31       1513.31       10945.3       12458.6    
  26  0.770754     -0.260386      -418.087       418.087       10670.0       11088.0    
  27  0.144347      -1.93554      -3107.78       3107.78       10691.8       13799.6    
  28  0.690124     -0.370884      -595.507       595.507       10571.1       11166.6    
  29  0.882429     -0.125077      -200.829       200.829       10474.0       10674.8    
  30  0.781105     -0.247045      -396.666       396.666       10400.6       10797.3    
  31  0.331946      -1.10278      -1770.67       1770.67       10940.5       12711.2    
  32  0.157011      -1.85144      -2972.74       2972.74       9749.08       12721.8    
  33  0.734200     -0.308973      -496.100       496.100       10673.5       11169.6    
  34  0.563390     -0.573784      -921.291       921.291       10596.7       11518.0    
  35  0.349498      -1.05126      -1687.94       1687.94       10667.9       12355.8    
  36  0.256822      -1.35937      -2182.66       2182.66       10728.0       12910.7    
  37  0.563556     -0.573488      -920.816       920.816       10689.6       11610.5    
  38  0.945419E-01  -2.35871      -3787.25       3787.25       10934.3       14721.6    
  39  0.571450     -0.559577      -898.481       898.481       10694.2       11592.7    
  40  0.583029E-01  -2.84210      -4563.40       4563.40       9592.65       14156.1    
  41  0.428808     -0.846746      -1359.57       1359.57       10785.9       12145.5    
  42  0.628450     -0.464499      -745.818       745.818       10025.9       10771.8    
  43  0.152789      -1.87869      -3016.51       3016.51       10297.8       13314.3    
  44  0.787004E-01  -2.54211      -4081.71       4081.71       10457.4       14539.1    
  45  0.170927E-01  -4.06911      -6533.53       6533.53       10936.3       17469.9    
  46  0.531078     -0.632847      -1016.13       1016.13       10864.8       11881.0    
  47  0.206082E-01  -3.88206      -6233.20       6233.20       10157.0       16390.3    
  48  0.909565     -0.947891E-01  -152.197       152.197       11349.2       11501.4    
  49  0.456291     -0.784625      -1259.83       1259.83       12554.6       13814.5    
  50  0.997425E-02  -4.60775      -7398.39       7398.39       10259.5       17657.9    
  51  0.251070      -1.38202      -2219.03       2219.03       10999.7       13218.7    
  52  0.548517     -0.600536      -964.246       964.246       10584.0       11548.2    
  53  0.210242      -1.55950      -2504.00       2504.00       8971.19       11475.2    
  54  0.848361     -0.164449      -264.047       264.047       10723.2       10987.2    
  55  0.160491E-01  -4.13210      -6634.68       6634.68       11273.7       17908.4    
  56  0.407967     -0.896570      -1439.57       1439.57       10772.0       12211.5    
  57  0.859929     -0.150905      -242.300       242.300       10702.9       10945.2    
  58  0.406052     -0.901274      -1447.12       1447.12       10586.1       12033.2    
  59  0.743169     -0.296832      -476.606       476.606       10683.4       11160.0    
  60  0.434823     -0.832817      -1337.21       1337.21       10881.4       12218.6    
  61  0.559897     -0.580003      -931.276       931.276       10751.5       11682.7    
  62  0.277128      -1.28328      -2060.48       2060.48       10780.5       12841.0    
  63  0.839691     -0.174721      -280.540       280.540       10625.7       10906.3    
  64  0.641867     -0.443375      -711.901       711.901       8198.30       8910.20    
loop,thermsimp(1:2)       43   381.331       365.210    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144       8867.37          0.89          1.11         23.03          0.43          0.04         25.50
Just calling func    0   0         25.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    145      11668.07          0.89          1.10         23.05          0.18          0.04         25.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8867.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       43
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       44
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      144     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -3618.99       3618.99       7709.94       11328.9    
   2  0.780131E-01  -2.55088      -4095.80       4095.80       8124.44       12220.2    
   3  0.723689     -0.323394      -519.255       519.255       8198.30       8717.55    
   4  0.439896     -0.821218      -1318.58       1318.58       8382.14       9700.72    
   5  0.967364     -0.331803E-01  -53.2757       53.2757       9218.69       9271.96    
   6  0.235884      -1.44441      -2319.21       2319.21       9645.91       11965.1    
   7  0.311956      -1.16489      -1870.40       1870.40       9778.80       11649.2    
   8  0.600573     -0.509870      -818.669       818.669       9374.39       10193.1    
   9  0.781739     -0.246234      -395.364       395.364       9599.81       9995.17    
  10  0.505036     -0.683126      -1096.85       1096.85       8938.97       10035.8    
  11  0.896130     -0.109670      -176.091       176.091       10150.3       10326.4    
  12  0.545040     -0.606897      -974.459       974.459       10200.7       11175.2    
  13  0.338019      -1.08465      -1741.57       1741.57       9582.37       11323.9    
  14  0.200467      -1.60711      -2580.44       2580.44       7920.16       10500.6    
  15  0.548763     -0.600089      -963.528       963.528       9565.36       10528.9    
  16  0.897241     -0.108431      -174.101       174.101       10474.0       10648.1    
  17  0.229905      -1.47009      -2360.44       2360.44       10025.9       12386.4    
  18  0.387828     -0.947193      -1520.85       1520.85       10400.6       11921.5    
  19  0.789400     -0.236482      -379.706       379.706       10625.7       11005.4    
  20  0.495667     -0.701851      -1126.92       1126.92       10702.9       11829.9    
  21  0.818926     -0.199761      -320.745       320.745       10723.2       11043.9    
  22  0.181319      -1.70750      -2741.63       2741.63       10933.5       13675.1    
  23  0.901986     -0.103156      -165.632       165.632       9848.91       10014.5    
  24  0.933790E-01  -2.37109      -3807.12       3807.12       10670.0       14477.1    
  25  0.171523      -1.76304      -2830.81       2830.81       10683.4       13514.2    
  26  0.648450     -0.433170      -695.516       695.516       10571.1       11266.6    
  27  0.777448     -0.251739      -404.202       404.202       10673.5       11077.7    
  28  0.777670     -0.251453      -403.743       403.743       10373.9       10777.6    
  29  0.972420     -0.279672E-01  -44.9054       44.9054       8971.19       9016.10    
  30  0.825305     -0.192002      -308.286       308.286       11349.2       11657.5    
  31  0.470649     -0.753642      -1210.08       1210.08       10596.7       11806.8    
  32  0.263953      -1.33198      -2138.69       2138.69       10584.0       12722.7    
  33  0.857551     -0.153675      -246.747       246.747       10694.2       10941.0    
  34  0.950157     -0.511279E-01  -82.0930       82.0930       10689.6       10771.7    
  35  0.866482     -0.143314      -230.111       230.111       10566.3       10796.4    
  36  0.904889     -0.999433E-01  -160.473       160.473       10751.5       10911.9    
  37  0.297565      -1.21212      -1946.23       1946.23       10864.8       12811.1    
  38  0.902696     -0.102369      -164.368       164.368       9962.25       10126.6    
  39  0.800054     -0.223076      -358.181       358.181       10586.1       10944.3    
  40  0.534162     -0.627057      -1006.83       1006.83       10785.9       11792.7    
  41  0.593018     -0.522530      -838.996       838.996       10772.0       11611.0    
  42  0.682417E-01  -2.68470      -4310.67       4310.67       10881.4       15192.1    
  43  0.336048      -1.09050      -1750.95       1750.95       10667.9       12418.8    
  44  0.576540     -0.550710      -884.243       884.243       10945.3       11829.5    
  45  0.217955      -1.52347      -2446.14       2446.14       10526.7       12972.9    
  46  0.281607      -1.26724      -2034.74       2034.74       10940.5       12975.3    
  47  0.306631      -1.18211      -1898.04       1898.04       9749.08       11647.1    
  48  0.676335E-01  -2.69365      -4325.04       4325.04       10780.5       15105.6    
  49  0.145631      -1.92668      -3093.56       3093.56       10728.0       13821.6    
  50  0.820952     -0.197291      -316.778       316.778       10208.4       10525.2    
  51  0.224137      -1.49550      -2401.23       2401.23       10999.7       13400.9    
  52  0.738282     -0.303430      -487.200       487.200       10297.8       10785.0    
  53  0.364089      -1.01036      -1622.27       1622.27       10368.8       11991.0    
  54  0.321068      -1.13610      -1824.17       1824.17       10743.7       12567.8    
  55  0.179504      -1.71756      -2757.78       2757.78       10691.8       13449.6    
  56  0.808596     -0.212456      -341.128       341.128       12554.6       12895.8    
  57  0.974692     -0.256343E-01  -41.1594       41.1594       10888.5       10929.7    
  58  0.559434     -0.580830      -932.605       932.605       9592.65       10525.3    
  59  0.443035E-01  -3.11669      -5004.29       5004.29       10457.4       15461.7    
  60  0.711672     -0.340139      -546.141       546.141       10934.3       11480.5    
  61  0.578255     -0.547741      -879.475       879.475       10157.0       11036.5    
  62  0.102770      -2.27527      -3653.26       3653.26       10936.3       14589.6    
  63  0.813100     -0.206901      -332.209       332.209       10259.5       10591.7    
  64  0.612419     -0.490339      -787.309       787.309       8867.37       9654.67    
loop,thermsimp(1:2)       44   3618.99       4095.80    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146       9263.06          0.89          1.11         23.05          0.33          0.04         25.41
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147       8603.77          0.89          1.10         23.02          0.25          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8603.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       44
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       45
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      146     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -218.787       218.787       8198.30       8417.08    
   2  0.990306     -0.974175E-02  -15.6418       15.6418       8971.19       8986.84    
   3  0.488656     -0.716096      -1149.79       1149.79       9218.69       10368.5    
   4  0.865115E-01  -2.44748      -3929.77       3929.77       8867.37       12797.1    
   5  0.234262      -1.45132      -2330.30       2330.30       8382.14       10712.4    
   6  0.906541     -0.981186E-01  -157.543       157.543       9599.81       9757.35    
   7  0.680454     -0.384995      -618.164       618.164       9848.91       10467.1    
   8  0.575574     -0.552388      -886.937       886.937       8938.97       9825.91    
   9  0.537443E-02  -5.22610      -8391.25       8391.25       9962.25       18353.5    
  10  0.421676     -0.863518      -1386.50       1386.50       9374.39       10760.9    
  11  0.297588      -1.21204      -1946.11       1946.11       10150.3       12096.4    
  12  0.119337      -2.12581      -3413.28       3413.28       7920.16       11333.4    
  13  0.958276     -0.426192E-01  -68.4312       68.4312       10208.4       10276.8    
  14  0.115549      -2.15806      -3465.07       3465.07       9592.65       13057.7    
  15  0.104220      -2.26125      -3630.76       3630.76       9565.36       13196.1    
  16  0.719503     -0.329194      -528.568       528.568       10259.5       10788.1    
  17  0.875656     -0.132782      -213.200       213.200       10474.0       10687.2    
  18  0.578760     -0.546868      -878.074       878.074       10689.6       11567.7    
  19  0.923704     -0.793639E-01  -127.430       127.430       10373.9       10501.3    
  20  0.457980     -0.780930      -1253.89       1253.89       10297.8       11551.7    
  21  0.783173     -0.244401      -392.421       392.421       10566.3       10958.7    
  22  0.764479     -0.268561      -431.213       431.213       10751.5       11182.7    
  23  0.496891     -0.699384      -1122.96       1122.96       10888.5       12011.5    
  24  0.554859     -0.589041      -945.789       945.789       10694.2       11640.0    
  25  0.734503E-02  -4.91373      -7889.69       7889.69       10586.1       18475.8    
  26  0.117643      -2.14010      -3436.24       3436.24       10625.7       14062.0    
  27  0.145440      -1.92799      -3095.66       3095.66       10157.0       13252.7    
  28  0.375449     -0.979633      -1572.94       1572.94       10723.2       12296.1    
  29  0.954324E-01  -2.34934      -3772.19       3772.19       10673.5       14445.7    
  30  0.449085     -0.800543      -1285.38       1285.38       10200.7       11486.1    
  31  0.354483      -1.03709      -1665.20       1665.20       10571.1       12236.3    
  32  0.153971      -1.87099      -3004.14       3004.14       9582.37       12586.5    
  33  0.871598     -0.137427      -220.658       220.658       7709.94       7930.59    
  34  0.633061     -0.457188      -734.080       734.080       10934.3       11668.4    
  35  0.947022E-01  -2.35702      -3784.53       3784.53       10772.0       14556.5    
  36  0.793812     -0.230909      -370.757       370.757       9749.08       10119.8    
  37  0.760585     -0.273667      -439.411       439.411       9778.80       10218.2    
  38  0.124312      -2.08496      -3347.70       3347.70       11349.2       14696.9    
  39  0.961605E-03  -6.94691      -11154.2       11154.2       10785.9       21940.2    
  40  0.672529     -0.396710      -636.974       636.974       10596.7       11233.7    
  41  0.749847E-01  -2.59047      -4159.37       4159.37       10945.3       15104.7    
  42  0.982441     -0.177147E-01  -28.4435       28.4435       10702.9       10731.4    
  43  0.340727      -1.07667      -1728.75       1728.75       10400.6       12129.4    
  44  0.915043     -0.887846E-01  -142.556       142.556       9645.91       9788.47    
  45  0.150614      -1.89303      -3039.53       3039.53       10368.8       13408.3    
  46  0.892785     -0.113409      -182.094       182.094       8124.44       8306.53    
  47  0.844073     -0.169516      -272.182       272.182       10025.9       10298.1    
  48  0.469949     -0.755131      -1212.47       1212.47       10667.9       11880.4    
  49  0.389072     -0.943991      -1515.71       1515.71       10743.7       12259.4    
  50  0.738049     -0.303745      -487.706       487.706       10584.0       11071.7    
  51  0.250173      -1.38560      -2224.78       2224.78       10864.8       13089.6    
  52  0.383245     -0.959081      -1539.94       1539.94       12554.6       14094.6    
  53  0.384434     -0.955983      -1534.97       1534.97       10526.7       12061.7    
  54  0.479018E-01  -3.03860      -4878.91       4878.91       10940.5       15819.4    
  55  0.819285     -0.199323      -320.042       320.042       10999.7       11319.7    
  56  0.568165     -0.565344      -907.739       907.739       10691.8       11599.6    
  57  0.918732     -0.847606E-01  -136.095       136.095       10683.4       10819.5    
  58  0.374258     -0.982809      -1578.04       1578.04       10933.5       12511.5    
  59  0.966524     -0.340496E-01  -54.6715       54.6715       10728.0       10782.7    
  60  0.505261     -0.682680      -1096.14       1096.14       10670.0       11766.1    
  61  0.283819      -1.25942      -2022.17       2022.17       10936.3       12958.5    
  62  0.448920     -0.800911      -1285.98       1285.98       10780.5       12066.5    
  63  0.398648     -0.919676      -1476.67       1476.67       10881.4       12358.1    
  64  0.625742     -0.468817      -752.753       752.753       8603.77       9356.52    
loop,thermsimp(1:2)       45   218.787       15.6418    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148       8759.54          0.89          1.10         22.98          0.34          0.05         25.37
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149       7293.57          0.89          1.09         22.96          0.32          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   7293.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       45
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       46
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      148     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -3901.36       3901.36       7709.94       11611.3    
   2  0.312747      -1.16236      -1866.34       1866.34       8124.44       9990.78    
   3  0.317683      -1.14670      -1841.19       1841.19       8198.30       10039.5    
   4  0.693053     -0.366649      -588.707       588.707       8971.19       9559.90    
   5  0.361881      -1.01644      -1632.04       1632.04       8603.77       10235.8    
   6  0.127478      -2.05981      -3307.32       3307.32       9599.81       12907.1    
   7  0.718706     -0.330302      -530.347       530.347       9645.91       10176.3    
   8  0.609419E-01  -2.79783      -4492.32       4492.32       8938.97       13431.3    
   9  0.320798      -1.13695      -1825.53       1825.53       9749.08       11574.6    
  10  0.343503      -1.06856      -1715.72       1715.72       9778.80       11494.5    
  11  0.671828     -0.397753      -638.649       638.649       10208.4       10847.1    
  12  0.616702     -0.483369      -776.118       776.118       10025.9       10802.1    
  13  0.806358E-01  -2.51781      -4042.70       4042.70       9218.69       13261.4    
  14  0.997284     -0.271972E-02  -4.36690       4.36690       9848.91       9853.28    
  15  0.554344     -0.589969      -947.279       947.279       10373.9       11321.2    
  16  0.411057     -0.889023      -1427.45       1427.45       10474.0       11901.4    
  17  0.846258E-01  -2.46952      -3965.16       3965.16       8382.14       12347.3    
  18  0.737439     -0.304571      -489.033       489.033       10702.9       11192.0    
  19  0.393790     -0.931939      -1496.36       1496.36       9374.39       10870.7    
  20  0.965947     -0.346467E-01  -55.6302       55.6302       10728.0       10783.7    
  21  0.150166      -1.89601      -3044.32       3044.32       10259.5       13303.8    
  22  0.212005      -1.55114      -2490.58       2490.58       10683.4       13174.0    
  23  0.615060     -0.486036      -780.400       780.400       10566.3       11346.7    
  24  0.382142     -0.961962      -1544.57       1544.57       10584.0       12128.6    
  25  0.249044      -1.39013      -2232.05       2232.05       10751.5       12983.5    
  26  0.245943      -1.40266      -2252.16       2252.16       10596.7       12848.9    
  27  0.108882      -2.21749      -3560.50       3560.50       10999.7       14560.2    
  28  0.199835      -1.61026      -2585.51       2585.51       7920.16       10505.7    
  29  0.863954     -0.146235      -234.802       234.802       10200.7       10435.5    
  30  0.392842     -0.934347      -1500.23       1500.23       10297.8       11798.0    
  31  0.770596     -0.260592      -418.417       418.417       10689.6       11108.1    
  32  0.149868      -1.89800      -3047.51       3047.51       10691.8       13739.3    
  33  0.234154      -1.45178      -2331.03       2331.03       10694.2       13025.3    
  34  0.611512     -0.491821      -789.688       789.688       10934.3       11724.0    
  35  0.518093E-01  -2.96019      -4753.00       4753.00       10670.0       15423.0    
  36  0.567953     -0.565716      -908.337       908.337       10667.9       11576.2    
  37  0.190847      -1.65628      -2659.40       2659.40       10888.5       13547.9    
  38  0.104561      -2.25798      -3625.51       3625.51       10526.7       14152.2    
  39  0.135276      -2.00044      -3211.99       3211.99       10780.5       13992.5    
  40  0.262364      -1.33802      -2148.39       2148.39       10150.3       12298.7    
  41  0.463951     -0.767976      -1233.10       1233.10       10400.6       11633.7    
  42  0.419672     -0.868282      -1394.15       1394.15       10571.1       11965.3    
  43  0.897011     -0.108687      -174.512       174.512       10743.7       10918.2    
  44  0.818933     -0.199754      -320.733       320.733       10723.2       11043.9    
  45  0.136906      -1.98846      -3192.76       3192.76       10881.4       14074.2    
  46  0.561722     -0.576748      -926.050       926.050       10933.5       11859.5    
  47  0.991681     -0.835368E-02  -13.4130       13.4130       9582.37       9595.78    
  48  0.653388     -0.425585      -683.337       683.337       8867.37       9550.70    
  49  0.578557     -0.547219      -878.637       878.637       10936.3       11815.0    
  50  0.784121     -0.243191      -390.478       390.478       9592.65       9983.13    
  51  0.827307     -0.189579      -304.396       304.396       10864.8       11169.2    
  52  0.994261     -0.575522E-02  -9.24082       9.24082       9565.36       9574.60    
  53  0.274030      -1.29452      -2078.53       2078.53       10157.0       12235.6    
  54  0.879777     -0.128087      -205.661       205.661       10368.8       10574.4    
  55  0.694576E-01  -2.66704      -4282.31       4282.31       10625.7       14908.0    
  56  0.431517E-01  -3.14303      -5046.59       5046.59       12554.6       17601.2    
  57  0.620633     -0.477015      -765.916       765.916       10673.5       11439.4    
  58  0.166702      -1.79155      -2876.59       2876.59       10772.0       13648.6    
  59  0.785136E-01  -2.54448      -4085.53       4085.53       11349.2       15434.7    
  60  0.440162     -0.820613      -1317.61       1317.61       10945.3       12262.9    
  61  0.924092     -0.789432E-01  -126.754       126.754       10940.5       11067.3    
  62  0.957397     -0.435372E-01  -69.9052       69.9052       9962.25       10032.2    
  63  0.817312     -0.201734      -323.912       323.912       10586.1       10910.0    
  64  0.345978      -1.06138      -1704.19       1704.19       7293.57       8997.76    
loop,thermsimp(1:2)       46   3901.36       1866.34    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150       7764.47          0.88          1.09         22.95          0.32          0.04         25.28
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151       5996.15          0.90          1.08         22.94          0.38          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5996.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       46
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       47
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      150     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -5093.53       5093.53       7293.57       12387.1    
   2  0.581082     -0.542864      -871.645       871.645       8867.37       9739.01    
   3  0.690143     -0.370857      -595.463       595.463       8971.19       9566.66    
   4  0.958690     -0.421877E-01  -67.7383       67.7383       9565.36       9633.10    
   5  0.947492     -0.539367E-01  -86.6031       86.6031       9582.37       9668.97    
   6  0.253816E-01  -3.67373      -5898.70       5898.70       9848.91       15747.6    
   7  0.811950     -0.208316      -334.481       334.481       9592.65       9927.13    
   8  0.448512     -0.801821      -1287.44       1287.44       8124.44       9411.88    
   9  0.625244     -0.469613      -754.031       754.031       9962.25       10716.3    
  10  0.557627     -0.584065      -937.799       937.799       8198.30       9136.10    
  11  0.762657     -0.270947      -435.044       435.044       9645.91       10081.0    
  12  0.579328     -0.545887      -876.499       876.499       8603.77       9480.27    
  13  0.168395      -1.78144      -2860.36       2860.36       10200.7       13061.1    
  14  0.993282     -0.674111E-02  -10.8238       10.8238       7920.16       7930.98    
  15  0.573458     -0.556070      -892.850       892.850       10368.8       11261.6    
  16  0.900456     -0.104854      -168.357       168.357       10728.0       10896.4    
  17  0.961937     -0.388068E-01  -62.3098       62.3098       10025.9       10088.3    
  18  0.685702     -0.377312      -605.829       605.829       10208.4       10814.2    
  19  0.335644      -1.09171      -1752.89       1752.89       9374.39       11127.3    
  20  0.726392     -0.319666      -513.269       513.269       10586.1       11099.4    
  21  0.523515     -0.647189      -1039.15       1039.15       10743.7       11782.8    
  22  0.877914     -0.130206      -209.065       209.065       10723.2       10932.2    
  23  0.893563     -0.112539      -180.697       180.697       10940.5       11121.2    
  24  0.829449     -0.186994      -300.246       300.246       10689.6       10989.9    
  25  0.454457     -0.788653      -1266.29       1266.29       10864.8       12131.1    
  26  0.261407      -1.34168      -2154.25       2154.25       10702.9       12857.2    
  27  0.144225      -1.93638      -3109.14       3109.14       10373.9       13483.0    
  28  0.963744     -0.369299E-01  -59.2961       59.2961       10566.3       10625.6    
  29  0.267843      -1.31735      -2115.20       2115.20       10673.5       12788.7    
  30  0.251943E-01  -3.68114      -5910.59       5910.59       9778.80       15689.4    
  31  0.321532      -1.13466      -1821.85       1821.85       9749.08       11570.9    
  32  0.440903     -0.818930      -1314.91       1314.91       10667.9       11982.8    
  33  0.214416      -1.53984      -2472.43       2472.43       7709.94       10182.4    
  34  0.212185      -1.55030      -2489.23       2489.23       10400.6       12889.9    
  35  0.948253E-01  -2.35572      -3782.44       3782.44       10934.3       14716.8    
  36  0.507627     -0.678008      -1088.64       1088.64       10297.8       11386.4    
  37  0.415074     -0.879299      -1411.84       1411.84       10936.3       12348.2    
  38  0.768069     -0.263876      -423.691       423.691       10933.5       11357.2    
  39  0.462999E-01  -3.07261      -4933.52       4933.52       10474.0       15407.5    
  40  0.835390     -0.179856      -288.785       288.785       10571.1       10859.9    
  41  0.678734     -0.387526      -622.229       622.229       10584.0       11206.2    
  42  0.363569      -1.01179      -1624.57       1624.57       10157.0       11781.6    
  43  0.677161     -0.389846      -625.953       625.953       10945.3       11571.3    
  44  0.506668     -0.679899      -1091.67       1091.67       10150.3       11241.9    
  45  0.875658     -0.132779      -213.196       213.196       8382.14       8595.33    
  46  0.924863     -0.781102E-01  -125.417       125.417       10596.7       10722.2    
  47  0.794570E-01  -2.53254      -4066.35       4066.35       9599.81       13666.2    
  48  0.449212     -0.800261      -1284.93       1284.93       10751.5       12036.4    
  49  0.658987     -0.417051      -669.635       669.635       10694.2       11363.9    
  50  0.674357     -0.393995      -632.615       632.615       10683.4       11316.0    
  51  0.436334     -0.829348      -1331.64       1331.64       9218.69       10550.3    
  52  0.331871      -1.10301      -1771.04       1771.04       10259.5       12030.5    
  53  0.233029      -1.45659      -2338.77       2338.77       8938.97       11277.7    
  54  0.207666      -1.57183      -2523.79       2523.79       10888.5       13412.3    
  55  0.801765     -0.220940      -354.751       354.751       10772.0       11126.7    
  56  0.614336E-01  -2.78980      -4479.42       4479.42       10691.8       15171.2    
  57  0.167288      -1.78804      -2870.95       2870.95       10780.5       13651.5    
  58  0.718808     -0.330162      -530.121       530.121       10881.4       11411.5    
  59  0.981938     -0.182272E-01  -29.2664       29.2664       10526.7       10556.0    
  60  0.759328     -0.275322      -442.069       442.069       10999.7       11441.7    
  61  0.290749      -1.23530      -1983.44       1983.44       10625.7       12609.2    
  62  0.887200     -0.119685      -192.171       192.171       10670.0       10862.1    
  63  0.186280      -1.68051      -2698.29       2698.29       11349.2       14047.5    
  64  0.427708     -0.849315      -1363.70       1363.70       5996.15       7359.84    
loop,thermsimp(1:2)       47   5093.53       871.645    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       9725.14          0.89          1.10         23.02          0.49          0.05         25.55
Just calling func    0   0         25.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9725.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       47
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       48
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      151     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -911.555       911.555       5996.15       6907.70    
   2  0.216137      -1.53184      -2459.59       2459.59       7920.16       10379.7    
   3  0.476425     -0.741444      -1190.49       1190.49       8382.14       9572.63    
   4  0.184047      -1.69256      -2717.65       2717.65       8198.30       10915.9    
   5  0.722630     -0.324858      -521.606       521.606       8124.44       8646.05    
   6  0.887750     -0.119065      -191.176       191.176       8603.77       8794.95    
   7  0.236344      -1.44247      -2316.09       2316.09       8971.19       11287.3    
   8  0.798055     -0.225578      -362.197       362.197       9565.36       9927.56    
   9  0.425454     -0.854597      -1372.18       1372.18       9582.37       10954.5    
  10  0.605701     -0.501368      -805.018       805.018       8867.37       9672.38    
  11  0.742456     -0.297792      -478.148       478.148       9592.65       10070.8    
  12  0.378462E-01  -3.27423      -5257.23       5257.23       9645.91       14903.1    
  13  0.341910      -1.07321      -1723.19       1723.19       10025.9       11749.1    
  14  0.794971E-01  -2.53203      -4065.54       4065.54       7709.94       11775.5    
  15  0.586423     -0.533715      -856.955       856.955       9218.69       10075.6    
  16  0.990523     -0.952170E-02  -15.2884       15.2884       10526.7       10542.0    
  17  0.348475      -1.05419      -1692.65       1692.65       10566.3       12258.9    
  18  0.998034     -0.196755E-02  -3.15918       3.15918       9962.25       9965.41    
  19  0.616072     -0.484391      -777.759       777.759       10596.7       11374.5    
  20  0.427239     -0.850411      -1365.46       1365.46       10208.4       11573.9    
  21  0.598160     -0.513898      -825.135       825.135       10571.1       11396.2    
  22  0.642831     -0.441873      -709.489       709.489       10670.0       11379.4    
  23  0.392766     -0.934541      -1500.54       1500.54       10728.0       12228.6    
  24  0.738407     -0.303260      -486.927       486.927       10723.2       11210.1    
  25  0.334341      -1.09559      -1759.13       1759.13       10689.6       12448.8    
  26  0.997912     -0.208996E-02  -3.35572       3.35572       10586.1       10589.5    
  27  0.492305E-01  -3.01124      -4834.98       4834.98       10940.5       15775.5    
  28  0.304734      -1.18832      -1908.01       1908.01       10772.0       12680.0    
  29  0.159886      -1.83330      -2943.62       2943.62       9374.39       12318.0    
  30  0.991331     -0.870666E-02  -13.9798       13.9798       10584.0       10598.0    
  31  0.735164     -0.307662      -493.995       493.995       10150.3       10644.3    
  32  0.279948      -1.27315      -2044.22       2044.22       10368.8       12413.0    
  33  0.457260     -0.782502      -1256.42       1256.42       8938.97       10195.4    
  34  0.678170     -0.388358      -623.563       623.563       10683.4       11307.0    
  35  0.689603     -0.371639      -596.719       596.719       10933.5       11530.2    
  36  0.468470     -0.758283      -1217.53       1217.53       10694.2       11911.8    
  37  0.937429     -0.646141E-01  -103.747       103.747       10297.8       10401.5    
  38  0.115915      -2.15490      -3460.00       3460.00       10881.4       14341.4    
  39  0.125789      -2.07315      -3328.73       3328.73       10999.7       14328.4    
  40  0.137562      -1.98368      -3185.08       3185.08       9749.08       12934.2    
  41  0.273901      -1.29499      -2079.29       2079.29       10945.3       13024.6    
  42  0.934963     -0.672484E-01  -107.977       107.977       10157.0       10265.0    
  43  0.450296     -0.797850      -1281.06       1281.06       10743.7       12024.7    
  44  0.681645     -0.383246      -615.356       615.356       10667.9       11283.2    
  45  0.282914E-01  -3.56520      -5724.43       5724.43       10259.5       15983.9    
  46  0.962226     -0.385062E-01  -61.8271       61.8271       10751.5       10813.3    
  47  0.771412     -0.259533      -416.717       416.717       10864.8       11281.6    
  48  0.778208     -0.250761      -402.633       402.633       10936.3       11339.0    
  49  0.945686     -0.558450E-01  -89.6670       89.6670       7293.57       7383.23    
  50  0.648669     -0.432833      -694.975       694.975       10625.7       11320.7    
  51  0.214283      -1.54046      -2473.42       2473.42       10673.5       13146.9    
  52  0.692999     -0.366726      -588.831       588.831       10702.9       11291.8    
  53  0.966323     -0.342573E-01  -55.0049       55.0049       10400.6       10455.7    
  54  0.975007     -0.253104E-01  -40.6395       40.6395       10200.7       10241.3    
  55  0.947991E-01  -2.35600      -3782.88       3782.88       10888.5       14671.4    
  56  0.195092      -1.63429      -2624.08       2624.08       10373.9       12998.0    
  57  0.459282     -0.778091      -1249.33       1249.33       10780.5       12029.9    
  58  0.563954     -0.572782      -919.683       919.683       9599.81       10519.5    
  59  0.482884     -0.727978      -1168.87       1168.87       11349.2       12518.1    
  60  0.270357      -1.30801      -2100.20       2100.20       10934.3       13034.5    
  61  0.184282      -1.69129      -2715.60       2715.60       10691.8       13407.4    
  62  0.486455     -0.720611      -1157.04       1157.04       10474.0       11631.0    
  63  0.348603      -1.05382      -1692.06       1692.06       9778.80       11470.9    
  64  0.556175     -0.586673      -941.986       941.986       9725.14       10667.1    
loop,thermsimp(1:2)       48   911.555       2459.59    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153       9020.91          0.89          1.10         23.06          0.59          0.04         25.68
Just calling func    0   0         25.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9020.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       48
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       49
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      152     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -2744.72       2744.72       5996.15       8740.87    
   2  0.335083      -1.09338      -1755.57       1755.57       7293.57       9049.14    
   3  0.585160     -0.535871      -860.416       860.416       8124.44       8984.86    
   4  0.445729     -0.808044      -1297.43       1297.43       8603.77       9901.20    
   5  0.963605     -0.370741E-01  -59.5277       59.5277       8382.14       8441.67    
   6  0.538074     -0.619758      -995.110       995.110       8867.37       9862.48    
   7  0.971443     -0.289729E-01  -46.5202       46.5202       9565.36       9611.88    
   8  0.817136     -0.201950      -324.259       324.259       9962.25       10286.5    
   9  0.216943      -1.52812      -2453.62       2453.62       9592.65       12046.3    
  10  0.572311     -0.558074      -896.066       896.066       9218.69       10114.8    
  11  0.511761     -0.669897      -1075.61       1075.61       8938.97       10014.6    
  12  0.331920E-01  -3.40545      -5467.93       5467.93       10200.7       15668.6    
  13  0.662680     -0.411462      -660.661       660.661       10157.0       10817.7    
  14  0.578679     -0.547007      -878.297       878.297       7920.16       8798.46    
  15  0.473979     -0.746592      -1198.76       1198.76       10297.8       11496.6    
  16  0.243750      -1.41161      -2266.54       2266.54       10400.6       12667.2    
  17  0.784227     -0.243057      -390.263       390.263       9599.81       9990.07    
  18  0.215065      -1.53682      -2467.57       2467.57       10526.7       12994.3    
  19  0.813272     -0.206689      -331.869       331.869       10586.1       10918.0    
  20  0.877336     -0.130865      -210.123       210.123       10584.0       10794.1    
  21  0.911070     -0.931357E-01  -149.543       149.543       10150.3       10299.8    
  22  0.424500     -0.856844      -1375.78       1375.78       9725.14       11100.9    
  23  0.122508      -2.09958      -3371.18       3371.18       10751.5       14122.6    
  24  0.173199      -1.75331      -2815.19       2815.19       8198.30       11013.5    
  25  0.243010      -1.41465      -2271.43       2271.43       9582.37       11853.8    
  26  0.618804     -0.479966      -770.654       770.654       10723.2       11493.8    
  27  0.365303      -1.00703      -1616.93       1616.93       10864.8       12481.8    
  28  0.178054      -1.72567      -2770.81       2770.81       10667.9       13438.7    
  29  0.416122     -0.876776      -1407.79       1407.79       8971.19       10379.0    
  30  0.789287     -0.236625      -379.936       379.936       10702.9       11082.9    
  31  0.786736     -0.239863      -385.134       385.134       10683.4       11068.6    
  32  0.295880      -1.21780      -1955.35       1955.35       10625.7       12581.1    
  33  0.418649     -0.870722      -1398.07       1398.07       10936.3       12334.4    
  34  0.706992     -0.346736      -556.734       556.734       10596.7       11153.5    
  35  0.281863      -1.26633      -2033.28       2033.28       10670.0       12703.2    
  36  0.357290      -1.02921      -1652.54       1652.54       10571.1       12223.6    
  37  0.174180      -1.74767      -2806.13       2806.13       9778.80       12584.9    
  38  0.190924      -1.65588      -2658.75       2658.75       10933.5       13592.2    
  39  0.630369     -0.461449      -740.922       740.922       10208.4       10949.3    
  40  0.252261      -1.37729      -2211.44       2211.44       10474.0       12685.4    
  41  0.359213      -1.02384      -1643.92       1643.92       10025.9       11669.9    
  42  0.740344     -0.300640      -482.721       482.721       7709.94       8192.66    
  43  0.283211      -1.26156      -2025.62       2025.62       10694.2       12719.9    
  44  0.965119     -0.355039E-01  -57.0065       57.0065       10743.7       10800.7    
  45  0.389600     -0.942634      -1513.53       1513.53       10780.5       12294.1    
  46  0.598383     -0.513525      -824.537       824.537       10728.0       11552.6    
  47  0.631795     -0.459190      -737.295       737.295       10566.3       11303.6    
  48  0.997460     -0.254363E-02  -4.08416       4.08416       9374.39       9378.47    
  49  0.192532      -1.64749      -2645.29       2645.29       10368.8       13014.1    
  50  0.769348     -0.262212      -421.018       421.018       10689.6       11110.7    
  51  0.740745     -0.300099      -481.851       481.851       11349.2       11831.1    
  52  0.590587     -0.526639      -845.594       845.594       10772.0       11617.6    
  53  0.628310E-01  -2.76731      -4443.30       4443.30       9749.08       14192.4    
  54  0.515529     -0.662562      -1063.84       1063.84       10373.9       11437.7    
  55  0.306025      -1.18409      -1901.22       1901.22       10945.3       12846.5    
  56  0.686790     -0.375726      -603.282       603.282       10934.3       11537.6    
  57  0.357910      -1.02747      -1649.76       1649.76       10673.5       12323.3    
  58  0.267469      -1.31875      -2117.44       2117.44       10691.8       12809.3    
  59  0.410193     -0.891128      -1430.83       1430.83       10999.7       12430.5    
  60  0.490314     -0.712709      -1144.36       1144.36       10881.4       12025.8    
  61  0.395217     -0.928320      -1490.55       1490.55       10888.5       12379.0    
  62  0.641491E-01  -2.74655      -4409.97       4409.97       9645.91       14055.9    
  63  0.610173     -0.494012      -793.207       793.207       10940.5       11733.7    
  64  0.657523     -0.419276      -673.207       673.207       9020.91       9694.11    
loop,thermsimp(1:2)       49   2744.72       1755.57    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       9539.85          0.89          1.10         22.97          0.33          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9539.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       49
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       50
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      153     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -5540.62       5540.62       7709.94       13250.6    
   2  0.601445     -0.508421      -816.342       816.342       8382.14       9198.48    
   3  0.651191     -0.428952      -688.743       688.743       5996.15       6684.89    
   4  0.187303      -1.67503      -2689.49       2689.49       7920.16       10609.7    
   5  0.664603     -0.408566      -656.010       656.010       8124.44       8780.45    
   6  0.945236     -0.563208E-01  -90.4310       90.4310       7293.57       7384.00    
   7  0.865870     -0.144020      -231.244       231.244       9374.39       9605.63    
   8  0.674117     -0.394351      -633.187       633.187       9565.36       10198.5    
   9  0.959689E-01  -2.34373      -3763.19       3763.19       9020.91       12784.1    
  10  0.663337     -0.410472      -659.071       659.071       8867.37       9526.44    
  11  0.384854     -0.954891      -1533.21       1533.21       8603.77       10137.0    
  12  0.892338     -0.113910      -182.899       182.899       9599.81       9782.71    
  13  0.470837     -0.753243      -1209.44       1209.44       8938.97       10148.4    
  14  0.262618      -1.33706      -2146.83       2146.83       9218.69       11365.5    
  15  0.877143     -0.131085      -210.475       210.475       9962.25       10172.7    
  16  0.262102      -1.33902      -2149.99       2149.99       10150.3       12300.3    
  17  0.306130      -1.18375      -1900.67       1900.67       8971.19       10871.9    
  18  0.251844      -1.37895      -2214.10       2214.10       10584.0       12798.1    
  19  0.371147     -0.991157      -1591.44       1591.44       10743.7       12335.1    
  20  0.244393E-01  -3.71156      -5959.44       5959.44       10157.0       16116.5    
  21  0.550903     -0.596197      -957.279       957.279       10586.1       11543.4    
  22  0.509078     -0.675154      -1084.06       1084.06       10208.4       11292.5    
  23  0.741178     -0.299515      -480.914       480.914       8198.30       8679.21    
  24  0.585965     -0.534496      -858.209       858.209       10683.4       11541.6    
  25  0.602491     -0.506683      -813.551       813.551       10702.9       11516.5    
  26  0.532366     -0.630423      -1012.23       1012.23       9725.14       10737.4    
  27  0.264247      -1.33087      -2136.90       2136.90       10689.6       12826.5    
  28  0.468512     -0.758194      -1217.39       1217.39       10596.7       11814.1    
  29  0.338122      -1.08435      -1741.08       1741.08       10566.3       12307.4    
  30  0.815455     -0.204008      -327.565       327.565       10373.9       10701.4    
  31  0.126007      -2.07142      -3325.96       3325.96       10723.2       14049.1    
  32  0.391435     -0.937937      -1505.99       1505.99       10297.8       11803.8    
  33  0.477179     -0.739864      -1187.96       1187.96       10934.3       12122.3    
  34  0.926058     -0.768180E-01  -123.342       123.342       10728.0       10851.4    
  35  0.305992E-01  -3.48678      -5598.52       5598.52       10772.0       16370.5    
  36  0.142122      -1.95107      -3132.72       3132.72       10025.9       13158.7    
  37  0.934627E-01  -2.37019      -3805.68       3805.68       10940.5       14746.2    
  38  0.933240     -0.690924E-01  -110.938       110.938       11349.2       11460.2    
  39  0.551354     -0.595378      -955.964       955.964       9582.37       10538.3    
  40  0.167646      -1.78590      -2867.52       2867.52       10881.4       13748.9    
  41  0.657770     -0.418900      -672.604       672.604       9592.65       10265.3    
  42  0.937012     -0.650587E-01  -104.461       104.461       10571.1       10675.6    
  43  0.435130     -0.832109      -1336.07       1336.07       10780.5       12116.6    
  44  0.346278E-01  -3.36310      -5399.93       5399.93       10673.5       16073.4    
  45  0.529273     -0.636251      -1021.59       1021.59       10936.3       11957.9    
  46  0.543808     -0.609159      -978.091       978.091       10888.5       11866.6    
  47  0.476993     -0.740254      -1188.58       1188.58       10999.7       12188.2    
  48  0.602365     -0.506891      -813.886       813.886       10864.8       11678.7    
  49  0.429141     -0.845970      -1358.33       1358.33       10625.7       11984.0    
  50  0.161300E-01  -4.12707      -6626.60       6626.60       9778.80       16405.4    
  51  0.806405     -0.215169      -345.485       345.485       10400.6       10746.1    
  52  0.577848E-01  -2.85103      -4577.73       4577.73       10474.0       15051.7    
  53  0.992308     -0.772154E-02  -12.3980       12.3980       10670.0       10682.4    
  54  0.130687      -2.03495      -3267.41       3267.41       10694.2       13961.6    
  55  0.844072     -0.169518      -272.185       272.185       10691.8       10964.0    
  56  0.900890     -0.104372      -167.585       167.585       10945.3       11112.9    
  57  0.886923E-01  -2.42258      -3889.80       3889.80       10526.7       14416.5    
  58  0.675479     -0.392334      -629.947       629.947       10368.8       10998.7    
  59  0.486368     -0.720791      -1157.33       1157.33       10667.9       11825.2    
  60  0.868319E-01  -2.44378      -3923.84       3923.84       10933.5       14857.3    
  61  0.536051     -0.623527      -1001.16       1001.16       9645.91       10647.1    
  62  0.916344     -0.873636E-01  -140.275       140.275       10751.5       10891.7    
  63  0.264660E-01  -3.63190      -5831.52       5831.52       9749.08       15580.6    
  64  0.765006     -0.267871      -430.105       430.105       9539.85       9969.95    
loop,thermsimp(1:2)       50   5540.62       816.342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155      14413.99          0.89          1.10         23.05          0.26          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  14413.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       50
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       51
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      154     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -117.740       117.740       5996.15       6113.89    
   2  0.669511     -0.401208      -644.197       644.197       7293.57       7937.76    
   3  0.863337E-01  -2.44954      -3933.08       3933.08       8198.30       12131.4    
   4  0.279945      -1.27316      -2044.24       2044.24       8124.44       10168.7    
   5  0.832640     -0.183154      -294.080       294.080       8382.14       8676.22    
   6  0.848933     -0.163775      -262.964       262.964       8867.37       9130.33    
   7  0.141794      -1.95338      -3136.43       3136.43       9374.39       12510.8    
   8  0.208764      -1.56655      -2515.32       2515.32       9599.81       12115.1    
   9  0.755787     -0.279996      -449.573       449.573       9539.85       9989.42    
  10  0.177416      -1.72926      -2776.57       2776.57       8603.77       11380.3    
  11  0.405148     -0.903503      -1450.70       1450.70       8938.97       10389.7    
  12  0.640380     -0.445693      -715.623       715.623       9962.25       10677.9    
  13  0.548060     -0.601370      -965.586       965.586       9565.36       10530.9    
  14  0.773287     -0.257105      -412.818       412.818       9592.65       10005.5    
  15  0.180768      -1.71054      -2746.52       2746.52       9582.37       12328.9    
  16  0.135846      -1.99624      -3205.24       3205.24       7920.16       11125.4    
  17  0.601016     -0.509133      -817.486       817.486       9645.91       10463.4    
  18  0.302263      -1.19646      -1921.08       1921.08       10571.1       12492.2    
  19  0.189428      -1.66374      -2671.38       2671.38       10670.0       13341.3    
  20  0.737158     -0.304953      -489.645       489.645       10373.9       10863.5    
  21  0.790680     -0.234862      -377.104       377.104       9725.14       10102.2    
  22  0.177192E-01  -4.03310      -6475.72       6475.72       10400.6       16876.4    
  23  0.236042      -1.44375      -2318.14       2318.14       10728.0       13046.2    
  24  0.459229     -0.778206      -1249.52       1249.52       8971.19       10220.7    
  25  0.586479E-01  -2.83620      -4553.93       4553.93       10751.5       15305.4    
  26  0.263766      -1.33269      -2139.83       2139.83       10691.8       12831.7    
  27  0.942550     -0.591663E-01  -94.9999       94.9999       10368.8       10463.8    
  28  0.106855      -2.23628      -3590.66       3590.66       10945.3       14536.0    
  29  0.710700     -0.341505      -548.334       548.334       10208.4       10756.7    
  30  0.207109E-01  -3.87709      -6225.23       6225.23       9218.69       15443.9    
  31  0.901203     -0.104025      -167.027       167.027       11349.2       11516.2    
  32  0.949751     -0.515555E-01  -82.7797       82.7797       10702.9       10785.7    
  33  0.343487      -1.06861      -1715.80       1715.80       10683.4       12399.2    
  34  0.875043     -0.133483      -214.325       214.325       10586.1       10800.4    
  35  0.122447E-01  -4.40266      -7069.10       7069.10       10864.8       17933.9    
  36  0.820650     -0.197659      -317.369       317.369       10297.8       10615.2    
  37  0.748866     -0.289195      -464.344       464.344       10596.7       11061.1    
  38  0.594525     -0.519992      -834.921       834.921       10667.9       11502.8    
  39  0.927863E-01  -2.37746      -3817.34       3817.34       10888.5       14705.8    
  40  0.631335     -0.459918      -738.464       738.464       10936.3       11674.8    
  41  0.282620      -1.26365      -2028.97       2028.97       10625.7       12654.7    
  42  0.707811     -0.345578      -554.874       554.874       10780.5       11335.4    
  43  0.930463     -0.720730E-01  -115.723       115.723       10934.3       11050.0    
  44  0.988563     -0.115032E-01  -18.4701       18.4701       10999.7       11018.1    
  45  0.869439     -0.139907      -224.641       224.641       10150.3       10374.9    
  46  0.693921     -0.365397      -586.697       586.697       10566.3       11153.0    
  47  0.731753     -0.312312      -501.462       501.462       10743.7       11245.1    
  48  0.848712     -0.164035      -263.382       263.382       9020.91       9284.29    
  49  0.174447      -1.74613      -2803.67       2803.67       10584.0       13387.7    
  50  0.313212      -1.16087      -1863.95       1863.95       10689.6       12553.6    
  51  0.880789     -0.126937      -203.815       203.815       10025.9       10229.8    
  52  0.441967     -0.816520      -1311.04       1311.04       7709.94       9020.98    
  53  0.624106     -0.471435      -756.955       756.955       10881.4       11638.4    
  54  0.447426     -0.804244      -1291.33       1291.33       10694.2       11985.6    
  55  0.681696     -0.383171      -615.236       615.236       10723.2       11338.4    
  56  0.336384      -1.08950      -1749.35       1749.35       10526.7       12276.1    
  57  0.197044      -1.62433      -2608.09       2608.09       10940.5       13548.6    
  58  0.186834E-01  -3.98012      -6390.64       6390.64       10933.5       17324.1    
  59  0.467980     -0.759329      -1219.21       1219.21       10474.0       11693.2    
  60  0.607270     -0.498782      -800.865       800.865       9749.08       10549.9    
  61  0.299128      -1.20689      -1937.83       1937.83       10673.5       12611.3    
  62  0.166354      -1.79364      -2879.94       2879.94       10157.0       13037.0    
  63  0.542834     -0.610952      -980.970       980.970       10772.0       11752.9    
  64  0.811476     -0.208901      -335.420       335.420       14414.0       14749.4    
loop,thermsimp(1:2)       51   117.740       644.197    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       8288.68          0.89          1.10         23.06          0.32          0.04         25.41
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8288.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       51
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       52
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      155     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -671.965       671.965       5996.15       6668.11    
   2  0.385391     -0.953496      -1530.97       1530.97       7293.57       8824.54    
   3  0.323679      -1.12800      -1811.17       1811.17       8382.14       10193.3    
   4  0.402516E-01  -3.21260      -5158.29       5158.29       7709.94       12868.2    
   5  0.866022     -0.143846      -230.964       230.964       8867.37       9098.33    
   6  0.560147     -0.579555      -930.558       930.558       9020.91       9951.46    
   7  0.389098     -0.943925      -1515.61       1515.61       9539.85       11055.5    
   8  0.470755     -0.753417      -1209.72       1209.72       9592.65       10802.4    
   9  0.794299     -0.230295      -369.771       369.771       9725.14       10094.9    
  10  0.897132     -0.108553      -174.297       174.297       8124.44       8298.74    
  11  0.359474      -1.02311      -1642.76       1642.76       8971.19       10613.9    
  12  0.604694     -0.503032      -807.690       807.690       10025.9       10833.6    
  13  0.101554      -2.28717      -3672.37       3672.37       10150.3       13822.6    
  14  0.274480      -1.29288      -2075.90       2075.90       8938.97       11014.9    
  15  0.916086     -0.876445E-01  -140.726       140.726       9645.91       9786.64    
  16  0.820070E-01  -2.50095      -4015.63       4015.63       10368.8       14384.4    
  17  0.975902     -0.243929E-01  -39.1663       39.1663       9565.36       9604.53    
  18  0.131665      -2.02750      -3255.43       3255.43       9749.08       13004.5    
  19  0.751313     -0.285933      -459.106       459.106       10297.8       10756.9    
  20  0.775324     -0.254475      -408.595       408.595       9962.25       10370.8    
  21  0.237000      -1.43969      -2311.63       2311.63       10208.4       12520.0    
  22  0.113641      -2.17471      -3491.80       3491.80       10702.9       14194.7    
  23  0.762281     -0.271440      -435.835       435.835       10586.1       11021.9    
  24  0.783730     -0.243690      -391.279       391.279       10373.9       10765.2    
  25  0.492891     -0.707468      -1135.94       1135.94       10999.7       12135.6    
  26  0.471904     -0.750980      -1205.81       1205.81       10934.3       12140.1    
  27  0.855781     -0.155740      -250.063       250.063       10596.7       10846.8    
  28  0.636473     -0.451814      -725.451       725.451       7920.16       8645.61    
  29  0.433340     -0.836232      -1342.69       1342.69       10566.3       11909.0    
  30  0.482236     -0.729321      -1171.03       1171.03       10743.7       11914.7    
  31  0.855143E-01  -2.45907      -3948.39       3948.39       10780.5       14728.9    
  32  0.916579     -0.871071E-01  -139.863       139.863       10723.2       10863.0    
  33  0.232519      -1.45878      -2342.28       2342.28       8603.77       10946.1    
  34  0.283977      -1.25886      -2021.28       2021.28       10667.9       12689.2    
  35  0.401228E-01  -3.21581      -5163.44       5163.44       11349.2       16512.7    
  36  0.235231      -1.44719      -2323.67       2323.67       10881.4       13205.1    
  37  0.233426      -1.45489      -2336.03       2336.03       10936.3       13272.4    
  38  0.903594     -0.101376      -162.773       162.773       10474.0       10636.7    
  39  0.857571     -0.153651      -246.708       246.708       10772.0       11018.7    
  40  0.444085     -0.811739      -1303.36       1303.36       10694.2       11997.6    
  41  0.151055      -1.89011      -3034.84       3034.84       9599.81       12634.7    
  42  0.745694     -0.293440      -471.159       471.159       8198.30       8669.46    
  43  0.470647E-01  -3.05623      -4907.21       4907.21       10526.7       15433.9    
  44  0.344459      -1.06578      -1711.26       1711.26       9582.37       11293.6    
  45  0.592738     -0.523004      -839.756       839.756       10683.4       11523.2    
  46  0.754292     -0.281975      -452.751       452.751       10571.1       11023.9    
  47  0.162950      -1.81431      -2913.14       2913.14       9374.39       12287.5    
  48  0.939100     -0.628333E-01  -100.888       100.888       10689.6       10790.5    
  49  0.966845     -0.337175E-01  -54.1383       54.1383       10673.5       10727.7    
  50  0.287323      -1.24715      -2002.47       2002.47       10625.7       12628.2    
  51  0.835081     -0.180227      -289.379       289.379       10691.8       10981.2    
  52  0.836052     -0.179064      -287.513       287.513       10157.0       10444.6    
  53  0.382321     -0.961495      -1543.82       1543.82       10728.0       12271.8    
  54  0.873869     -0.134824      -216.479       216.479       10670.0       10886.4    
  55  0.169635      -1.77411      -2848.58       2848.58       10584.0       13432.6    
  56  0.511680     -0.670055      -1075.87       1075.87       10940.5       12016.4    
  57  0.687848     -0.374188      -600.811       600.811       10945.3       11546.1    
  58  0.659885     -0.415689      -667.448       667.448       10888.5       11555.9    
  59  0.615967     -0.484562      -778.032       778.032       14414.0       15192.0    
  60  0.600029     -0.510778      -820.126       820.126       10751.5       11571.6    
  61  0.166513      -1.79268      -2878.40       2878.40       9218.69       12097.1    
  62  0.730640     -0.313835      -503.907       503.907       10400.6       10904.6    
  63  0.168194      -1.78264      -2862.28       2862.28       10933.5       13795.7    
  64  0.562652E-01  -2.87768      -4620.52       4620.52       8288.68       12909.2    
loop,thermsimp(1:2)       52   671.965       1530.97    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       8905.23          0.90          1.09         23.05          0.20          0.04         25.28
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8905.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       52
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       53
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      156     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -869.803       869.803       5996.15       6865.95    
   2  0.307993      -1.17768      -1890.93       1890.93       8124.44       10015.4    
   3  0.551684     -0.594779      -955.002       955.002       7920.16       8875.16    
   4  0.969976     -0.304835E-01  -48.9456       48.9456       8198.30       8247.24    
   5  0.401714     -0.912015      -1464.37       1464.37       7293.57       8757.94    
   6  0.336211      -1.09002      -1750.17       1750.17       8867.37       10617.5    
   7  0.649191     -0.432028      -693.682       693.682       9565.36       10259.0    
   8  0.426986     -0.851005      -1366.41       1366.41       9645.91       11012.3    
   9  0.479997     -0.733976      -1178.50       1178.50       9020.91       10199.4    
  10  0.441527     -0.817516      -1312.64       1312.64       9725.14       11037.8    
  11  0.218988      -1.51874      -2438.55       2438.55       8382.14       10820.7    
  12  0.935549     -0.666221E-01  -106.971       106.971       9962.25       10069.2    
  13  0.159996      -1.83261      -2942.51       2942.51       10157.0       13099.6    
  14  0.486870     -0.719759      -1155.67       1155.67       8971.19       10126.9    
  15  0.835520     -0.179701      -288.535       288.535       10474.0       10762.5    
  16  0.643759     -0.440431      -707.175       707.175       10673.5       11380.7    
  17  0.177188      -1.73054      -2778.63       2778.63       10297.8       13076.4    
  18  0.408356     -0.895617      -1438.04       1438.04       10373.9       11811.9    
  19  0.463768     -0.768371      -1233.73       1233.73       10689.6       11923.4    
  20  0.616820     -0.483178      -775.810       775.810       9592.65       10368.5    
  21  0.377083     -0.975289      -1565.96       1565.96       10025.9       11591.9    
  22  0.278016      -1.28008      -2055.35       2055.35       10596.7       12652.1    
  23  0.746435     -0.292446      -469.564       469.564       10723.2       11192.7    
  24  0.872234     -0.136697      -219.487       219.487       10670.0       10889.4    
  25  0.887073E-01  -2.42241      -3889.53       3889.53       10400.6       14290.2    
  26  0.124913      -2.08014      -3339.96       3339.96       8603.77       11943.7    
  27  0.918160     -0.853835E-01  -137.095       137.095       10691.8       10828.9    
  28  0.924603     -0.783912E-01  -125.868       125.868       8938.97       9064.84    
  29  0.863214     -0.147092      -236.178       236.178       10772.0       11008.2    
  30  0.823499E-02  -4.79936      -7706.06       7706.06       10586.1       18292.2    
  31  0.548113     -0.601275      -965.432       965.432       10571.1       11536.5    
  32  0.800553     -0.222452      -357.178       357.178       9539.85       9897.03    
  33  0.180829      -1.71020      -2745.97       2745.97       9582.37       12328.3    
  34  0.968975E-01  -2.33410      -3747.73       3747.73       10683.4       14431.2    
  35  0.749847     -0.287886      -462.243       462.243       10945.3       11407.5    
  36  0.902028     -0.103110      -165.558       165.558       10888.5       11054.1    
  37  0.312083      -1.16449      -1869.75       1869.75       10751.5       12621.2    
  38  0.472691     -0.749313      -1203.13       1203.13       10566.3       11769.4    
  39  0.970346     -0.301026E-01  -48.3340       48.3340       10743.7       10792.0    
  40  0.485853     -0.721850      -1159.03       1159.03       10694.2       11853.3    
  41  0.604658     -0.503092      -807.786       807.786       10940.5       11748.3    
  42  0.172238      -1.75888      -2824.13       2824.13       9218.69       12042.8    
  43  0.359079E-01  -3.32680      -5341.65       5341.65       10999.7       16341.3    
  44  0.464923     -0.765884      -1229.74       1229.74       10934.3       12164.1    
  45  0.293512      -1.22584      -1968.26       1968.26       10728.0       12696.3    
  46  0.572788     -0.557239      -894.727       894.727       9374.39       10269.1    
  47  0.931713     -0.707300E-01  -113.567       113.567       10208.4       10322.0    
  48  0.983012     -0.171340E-01  -27.5111       27.5111       10625.7       10653.2    
  49  0.572194     -0.558278      -896.394       896.394       9599.81       10496.2    
  50  0.272189      -1.30126      -2089.36       2089.36       10667.9       12757.2    
  51  0.521081     -0.651849      -1046.64       1046.64       7709.94       8756.57    
  52  0.560075     -0.579685      -930.767       930.767       8288.68       9219.45    
  53  0.442251     -0.815877      -1310.01       1310.01       9749.08       11059.1    
  54  0.541873     -0.612723      -983.814       983.814       10881.4       11865.2    
  55  0.619019     -0.479619      -770.096       770.096       10936.3       11706.4    
  56  0.554460     -0.589760      -946.944       946.944       10584.0       11530.9    
  57  0.942853     -0.588454E-01  -94.4846       94.4846       10933.5       11027.9    
  58  0.289656E-01  -3.54165      -5686.62       5686.62       10150.3       15836.9    
  59  0.420166     -0.867105      -1392.26       1392.26       10702.9       12095.2    
  60  0.304886      -1.18782      -1907.21       1907.21       10368.8       12276.0    
  61  0.799970     -0.223182      -358.350       358.350       10780.5       11138.9    
  62  0.330194      -1.10808      -1779.17       1779.17       14414.0       16193.2    
  63  0.193095      -1.64457      -2640.59       2640.59       10526.7       13167.3    
  64  0.151812      -1.88511      -3026.81       3026.81       8905.23       11932.0    
loop,thermsimp(1:2)       53   869.803       1890.93    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       8747.78          0.89          1.10         23.09          0.30          0.04         25.41
Just calling func    0   0         25.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8747.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       53
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       54
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      157     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -913.960       913.960       5996.15       6910.11    
   2  0.698829     -0.358349      -575.380       575.380       8198.30       8773.68    
   3  0.550231     -0.597418      -959.239       959.239       7709.94       8669.18    
   4  0.844966     -0.168459      -270.484       270.484       7293.57       7564.05    
   5  0.139804      -1.96751      -3159.12       3159.12       7920.16       11079.3    
   6  0.119451      -2.12485      -3411.75       3411.75       8938.97       12350.7    
   7  0.474112     -0.746312      -1198.31       1198.31       8288.68       9486.99    
   8  0.293024      -1.22750      -1970.92       1970.92       9539.85       11510.8    
   9  0.760137     -0.274256      -440.357       440.357       8124.44       8564.80    
  10  0.216376      -1.53074      -2457.82       2457.82       9962.25       12420.1    
  11  0.837069     -0.177849      -285.561       285.561       8971.19       9256.75    
  12  0.969258     -0.312245E-01  -50.1354       50.1354       9020.91       9071.04    
  13  0.335918      -1.09089      -1751.58       1751.58       9565.36       11316.9    
  14  0.966643     -0.339265E-01  -54.4738       54.4738       9374.39       9428.86    
  15  0.723887     -0.323119      -518.814       518.814       10208.4       10727.2    
  16  0.459929E-01  -3.07927      -4944.20       4944.20       9592.65       14536.9    
  17  0.536724     -0.622271      -999.145       999.145       9599.81       10599.0    
  18  0.432574     -0.838001      -1345.53       1345.53       8867.37       10212.9    
  19  0.160308      -1.83066      -2939.38       2939.38       10625.7       13565.1    
  20  0.885158     -0.121989      -195.871       195.871       10474.0       10669.8    
  21  0.753783     -0.282650      -453.835       453.835       10743.7       11197.5    
  22  0.135562      -1.99832      -3208.59       3208.59       8382.14       11590.7    
  23  0.817964     -0.200937      -322.633       322.633       10691.8       11014.5    
  24  0.286617      -1.24961      -2006.43       2006.43       10670.0       12676.4    
  25  0.319126      -1.14217      -1833.92       1833.92       10772.0       12605.9    
  26  0.104479E-01  -4.56135      -7323.90       7323.90       9645.91       16969.8    
  27  0.671407     -0.398379      -639.654       639.654       10933.5       11573.1    
  28  0.782955     -0.244680      -392.869       392.869       9725.14       10118.0    
  29  0.186689      -1.67831      -2694.77       2694.77       10888.5       13583.3    
  30  0.462519     -0.771067      -1238.06       1238.06       9749.08       10987.1    
  31  0.203171      -1.59371      -2558.92       2558.92       10780.5       13339.5    
  32  0.851762E-01  -2.46303      -3954.75       3954.75       10723.2       14677.9    
  33  0.702824     -0.352649      -566.227       566.227       10673.5       11239.7    
  34  0.747923     -0.290456      -466.368       466.368       10945.3       11411.7    
  35  0.224450      -1.49410      -2399.00       2399.00       10584.0       12983.0    
  36  0.243563E-02  -6.01755      -9662.03       9662.03       10571.1       20233.1    
  37  0.160790      -1.82766      -2934.56       2934.56       10025.9       12960.5    
  38  0.880431     -0.127343      -204.468       204.468       10936.3       11140.8    
  39  0.507306     -0.678640      -1089.65       1089.65       10940.5       12030.2    
  40  0.266019      -1.32419      -2126.17       2126.17       10566.3       12692.5    
  41  0.310751      -1.16876      -1876.62       1876.62       10373.9       12250.5    
  42  0.945006     -0.565640E-01  -90.8216       90.8216       10694.2       10785.1    
  43  0.265699E-01  -3.62797      -5825.23       5825.23       10881.4       16706.6    
  44  0.652842     -0.426420      -684.677       684.677       10689.6       11374.3    
  45  0.799409     -0.223882      -359.475       359.475       8905.23       9264.71    
  46  0.543529     -0.609672      -978.915       978.915       8603.77       9582.69    
  47  0.361947      -1.01626      -1631.75       1631.75       9218.69       10850.4    
  48  0.398721     -0.919492      -1476.38       1476.38       10702.9       12179.3    
  49  0.349489      -1.05128      -1687.98       1687.98       10934.3       12622.3    
  50  0.948739     -0.526212E-01  -84.4909       84.4909       10368.8       10453.3    
  51  0.346176      -1.06081      -1703.28       1703.28       9582.37       11285.6    
  52  0.678244     -0.388248      -623.387       623.387       10751.5       11374.8    
  53  0.858518     -0.152547      -244.937       244.937       10596.7       10841.7    
  54  0.835860E-01  -2.48188      -3985.01       3985.01       10728.0       14713.0    
  55  0.762568     -0.271063      -435.231       435.231       10667.9       11103.1    
  56  0.273927      -1.29489      -2079.13       2079.13       10297.8       12376.9    
  57  0.729557     -0.315318      -506.288       506.288       10157.0       10663.3    
  58  0.320381      -1.13825      -1827.62       1827.62       10526.7       12354.3    
  59  0.818134     -0.200729      -322.299       322.299       10400.6       10722.9    
  60  0.639548     -0.446993      -717.711       717.711       10683.4       11401.1    
  61  0.976107     -0.241828E-01  -38.8289       38.8289       10150.3       10189.1    
  62  0.232128      -1.46046      -2344.98       2344.98       14414.0       16759.0    
  63  0.215412      -1.53520      -2464.99       2464.99       10999.7       13464.7    
  64  0.770868     -0.260238      -417.850       417.850       8747.78       9165.63    
loop,thermsimp(1:2)       54   913.960       575.380    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       8533.89          0.88          1.10         23.05          0.25          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8533.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       54
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       55
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      158     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -2630.12       2630.12       5996.15       8626.26    
   2  0.875287     -0.133204      -213.877       213.877       7293.57       7507.44    
   3  0.103612      -2.26710      -3640.15       3640.15       8124.44       11764.6    
   4  0.159072      -1.83840      -2951.81       2951.81       7709.94       10661.7    
   5  0.118738      -2.13084      -3421.36       3421.36       8198.30       11619.7    
   6  0.294105      -1.22382      -1965.01       1965.01       9020.91       10985.9    
   7  0.967643     -0.328919E-01  -52.8126       52.8126       8747.78       8800.59    
   8  0.675183     -0.392772      -630.652       630.652       8971.19       9601.85    
   9  0.170112      -1.77130      -2844.07       2844.07       8905.23       11749.3    
  10  0.990992     -0.904902E-02  -14.5295       14.5295       9374.39       9388.92    
  11  0.198513      -1.61690      -2596.17       2596.17       8288.68       10884.8    
  12  0.404817E-01  -3.20690      -5149.14       5149.14       8603.77       13752.9    
  13  0.834933E-01  -2.48299      -3986.79       3986.79       9725.14       13711.9    
  14  0.458935     -0.778848      -1250.55       1250.55       10150.3       11400.8    
  15  0.929311     -0.733118E-01  -117.713       117.713       8867.37       8985.08    
  16  0.593071     -0.522440      -838.852       838.852       10368.8       11207.6    
  17  0.963359E-01  -2.33991      -3757.06       3757.06       9599.81       13356.9    
  18  0.383119E-01  -3.26200      -5237.60       5237.60       10157.0       15394.6    
  19  0.841843     -0.172161      -276.429       276.429       10474.0       10750.4    
  20  0.874261     -0.134376      -215.760       215.760       10400.6       10616.4    
  21  0.706443     -0.347513      -557.982       557.982       10208.4       10766.4    
  22  0.423649E-01  -3.16143      -5076.13       5076.13       10694.2       15770.4    
  23  0.904835     -0.100003      -160.569       160.569       10596.7       10757.3    
  24  0.728800     -0.316356      -507.955       507.955       9218.69       9726.64    
  25  0.764304     -0.268790      -431.581       431.581       9749.08       10180.7    
  26  0.578519     -0.547284      -878.742       878.742       10691.8       11570.6    
  27  0.321737      -1.13402      -1820.83       1820.83       7920.16       9740.99    
  28  0.592944     -0.522656      -839.198       839.198       10667.9       11507.1    
  29  0.159596      -1.83511      -2946.53       2946.53       10936.3       13882.9    
  30  0.797332     -0.226484      -363.652       363.652       10743.7       11107.3    
  31  0.263979      -1.33189      -2138.53       2138.53       10673.5       12812.1    
  32  0.449355     -0.799942      -1284.42       1284.42       9582.37       10866.8    
  33  0.859901     -0.150938      -242.352       242.352       9565.36       9807.71    
  34  0.730093     -0.314584      -505.109       505.109       10689.6       11194.8    
  35  0.484666     -0.724295      -1162.96       1162.96       10751.5       11914.4    
  36  0.180217      -1.71359      -2751.42       2751.42       10683.4       13434.8    
  37  0.857397     -0.153854      -247.035       247.035       10945.3       11192.3    
  38  0.502370     -0.688418      -1105.35       1105.35       9539.85       10645.2    
  39  0.245408      -1.40484      -2255.66       2255.66       10933.5       13189.1    
  40  0.134540      -2.00590      -3220.75       3220.75       8382.14       11602.9    
  41  0.468137     -0.758995      -1218.67       1218.67       10940.5       12159.2    
  42  0.864548E-01  -2.44813      -3930.83       3930.83       10702.9       14633.8    
  43  0.178791      -1.72154      -2764.18       2764.18       10373.9       13138.1    
  44  0.690351     -0.370555      -594.978       594.978       8938.97       9533.95    
  45  0.731648     -0.312455      -501.691       501.691       10526.7       11028.4    
  46  0.857623     -0.153591      -246.612       246.612       10297.8       10544.4    
  47  0.754956     -0.281095      -451.338       451.338       9962.25       10413.6    
  48  0.355557      -1.03407      -1660.35       1660.35       10772.0       12432.3    
  49  0.200964      -1.60463      -2576.46       2576.46       10934.3       13510.8    
  50  0.243499      -1.41264      -2268.20       2268.20       10670.0       12938.2    
  51  0.796288     -0.227794      -365.756       365.756       10566.3       10932.1    
  52  0.256937      -1.35892      -2181.94       2181.94       10025.9       12207.9    
  53  0.591760     -0.524655      -842.408       842.408       10584.0       11426.4    
  54  0.799227     -0.224110      -359.840       359.840       10780.5       11140.4    
  55  0.115295E-01  -4.46285      -7165.73       7165.73       10999.7       18165.4    
  56  0.559205     -0.581239      -933.262       933.262       10625.7       11559.0    
  57  0.742198     -0.298139      -478.705       478.705       10888.5       11367.2    
  58  0.543157     -0.610356      -980.014       980.014       9592.65       10572.7    
  59  0.100933      -2.29330      -3682.22       3682.22       10723.2       14405.4    
  60  0.201228      -1.60332      -2574.35       2574.35       10728.0       13302.4    
  61  0.602159E-01  -2.80982      -4511.56       4511.56       10881.4       15393.0    
  62  0.107777      -2.22769      -3576.88       3576.88       14414.0       17990.9    
  63  0.131787E-01  -4.32915      -6951.07       6951.07       9645.91       16597.0    
  64  0.756826     -0.278622      -447.367       447.367       8533.89       8981.26    
loop,thermsimp(1:2)       55   2630.12       213.877    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160       8052.93          0.89          1.10         23.07          0.30          0.04         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161       6093.62          0.88          1.09         22.88          0.43          0.04         25.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    6093.6        3.428    -0.4096      4.073     -100.0    -0.9372E-02
                      -1.051      2.194     -100.0      2.559     0.5865    
                      0.5865     0.9767E-01  2.400      0.000      0.000    
                      -2.050      0.000      0.000      0.000     -1.221    

                      -2.500     0.1044E+05 0.1350E+05 -984.1     -2952.    
                      -2.000     -2.760     -1.760     -4.060     -2.760    
                      -12.71     -2.261      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.2018     0.5033E-02  0.000    -0.1163    
                      0.4310E-01-0.2425     0.1986E-01 0.1569E-01-0.1001    

                      -1.135     -1.243      0.000     0.2531     0.2429    
                      0.8541E-01-0.5002     0.8968E-01 0.1831    -0.1935    
                     -0.1309     0.7803E-01 0.1506    -0.8106      0.000    

                     -0.8425    -0.5865      1.907     -2.078      0.000    
                       0.000      9.307      8.743     -5331.     -4.000    
                      0.6202    -0.3566E-01  9.207      8.700    -0.1825E+05

                      -4.000     0.6202     0.6202      9.407      8.900    
                      -7994.     -4.000     0.6202     0.6202      9.431    
                       9.007     -8188.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   6093.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       55
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       56
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      160     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -3142.05       3142.05       7293.57       10435.6    
   2  0.197548      -1.62177      -2603.99       2603.99       5996.15       8600.14    
   3  0.774000     -0.256183      -411.338       411.338       8747.78       9159.12    
   4  0.170284      -1.77029      -2842.45       2842.45       8533.89       11376.3    
   5  0.250636      -1.38376      -2221.82       2221.82       8867.37       11089.2    
   6  0.907951     -0.965652E-01  -155.049       155.049       9374.39       9529.44    
   7  0.611678     -0.491549      -789.252       789.252       8938.97       9728.22    
   8  0.735945E-02  -4.91177      -7886.54       7886.54       8971.19       16857.7    
   9  0.309131      -1.17399      -1885.01       1885.01       9218.69       11103.7    
  10  0.577854     -0.548434      -880.588       880.588       7920.16       8800.75    
  11  0.931529     -0.709274E-01  -113.884       113.884       9565.36       9679.24    
  12  0.665703     -0.406912      -653.355       653.355       9749.08       10402.4    
  13  0.585695     -0.534955      -858.947       858.947       9962.25       10821.2    
  14  0.295001      -1.22078      -1960.13       1960.13       10297.8       12257.9    
  15  0.317712E-01  -3.44920      -5538.17       5538.17       9592.65       15130.8    
  16  0.222963      -1.50075      -2409.67       2409.67       10400.6       12810.3    
  17  0.325931      -1.12107      -1800.04       1800.04       9539.85       11339.9    
  18  0.785098     -0.241947      -388.480       388.480       7709.94       8098.42    
  19  0.550467     -0.596988      -958.549       958.549       10474.0       11432.5    
  20  0.780222     -0.248176      -398.482       398.482       10596.7       10995.2    
  21  0.130712      -2.03476      -3267.09       3267.09       10208.4       13475.5    
  22  0.873397     -0.135365      -217.347       217.347       9582.37       9799.71    
  23  0.366975      -1.00246      -1609.59       1609.59       8288.68       9898.27    
  24  0.813244     -0.206724      -331.925       331.925       10566.3       10898.2    
  25  0.782660E-01  -2.54764      -4090.60       4090.60       9020.91       13111.5    
  26  0.700327     -0.356208      -571.942       571.942       10526.7       11098.7    
  27  0.437766     -0.826071      -1326.37       1326.37       10743.7       12070.0    
  28  0.508966E-01  -2.97796      -4781.54       4781.54       10780.5       15562.1    
  29  0.276850      -1.28428      -2062.09       2062.09       10945.3       13007.4    
  30  0.792031     -0.233154      -374.362       374.362       10689.6       11064.0    
  31  0.174747      -1.74441      -2800.91       2800.91       10368.8       13169.7    
  32  0.469718     -0.755623      -1213.26       1213.26       10888.5       12101.8    
  33  0.252316      -1.37707      -2211.08       2211.08       10150.3       12361.4    
  34  0.980061     -0.201409E-01  -32.3390       32.3390       10584.0       10616.3    
  35  0.838300     -0.176379      -283.202       283.202       10667.9       10951.1    
  36  0.369385     -0.995915      -1599.08       1599.08       10625.7       12224.8    
  37  0.923139     -0.799751E-01  -128.411       128.411       10691.8       10820.2    
  38  0.592446     -0.523496      -840.548       840.548       8382.14       9222.69    
  39  0.348787      -1.05329      -1691.21       1691.21       8198.30       9889.51    
  40  0.569584     -0.562850      -903.735       903.735       8905.23       9808.97    
  41  0.543034E-01  -2.91317      -4677.51       4677.51       8124.44       12801.9    
  42  0.582662     -0.540148      -867.284       867.284       10751.5       11618.7    
  43  0.702825     -0.352648      -566.226       566.226       10940.5       11506.8    
  44  0.941375     -0.604140E-01  -97.0033       97.0033       10025.9       10122.9    
  45  0.258857      -1.35148      -2169.99       2169.99       10772.0       12942.0    
  46  0.116535      -2.14956      -3451.43       3451.43       10673.5       14124.9    
  47  0.102671      -2.27622      -3654.80       3654.80       10670.0       14324.8    
  48  0.172023      -1.76013      -2826.13       2826.13       10373.9       13200.0    
  49  0.434982E-01  -3.13504      -5033.75       5033.75       10933.5       15967.2    
  50  0.852122     -0.160026      -256.945       256.945       10728.0       10985.0    
  51  0.583521     -0.538675      -864.919       864.919       9599.81       10464.7    
  52  0.843374     -0.170345      -273.513       273.513       10683.4       10956.9    
  53  0.194743      -1.63607      -2626.95       2626.95       10934.3       13561.3    
  54  0.191808      -1.65126      -2651.33       2651.33       9725.14       12376.5    
  55  0.656555     -0.420749      -675.571       675.571       8603.77       9279.34    
  56  0.468384E-01  -3.06105      -4914.95       4914.95       10936.3       15851.3    
  57  0.812217     -0.207988      -333.954       333.954       10723.2       11057.1    
  58  0.852265     -0.159858      -256.674       256.674       10702.9       10959.6    
  59  0.340213      -1.07818      -1731.18       1731.18       10881.4       12612.6    
  60  0.655911     -0.421730      -677.147       677.147       10157.0       10834.2    
  61  0.329724      -1.10950      -1781.46       1781.46       10694.2       12475.7    
  62  0.362242      -1.01544      -1630.44       1630.44       9645.91       11276.3    
  63  0.273539      -1.29631      -2081.41       2081.41       14414.0       16495.4    
  64  0.524351     -0.645594      -1036.59       1036.59       6093.62       7130.21    
loop,thermsimp(1:2)       56   3142.05       2603.99    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       8203.20          0.89          1.09         22.95          0.45          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8203.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       56
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       57
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      161     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -661.658       661.658       6093.62       6755.28    
   2  0.724212     -0.322671      -518.094       518.094       7709.94       8228.03    
   3  0.633711     -0.456163      -732.434       732.434       5996.15       6728.58    
   4  0.448566     -0.801700      -1287.24       1287.24       7920.16       9207.40    
   5  0.964228     -0.364273E-01  -58.4892       58.4892       8747.78       8806.27    
   6  0.714306     -0.336444      -540.209       540.209       8382.14       8922.35    
   7  0.528330     -0.638035      -1024.46       1024.46       8603.77       9628.23    
   8  0.654127     -0.424453      -681.520       681.520       9374.39       10055.9    
   9  0.368899     -0.997232      -1601.20       1601.20       9565.36       11166.6    
  10  0.227697      -1.47974      -2375.93       2375.93       8938.97       11314.9    
  11  0.612266     -0.490588      -787.708       787.708       9582.37       10370.1    
  12  0.313777      -1.15907      -1861.06       1861.06       8905.23       10766.3    
  13  0.258526      -1.35276      -2172.05       2172.05       8198.30       10370.3    
  14  0.119298      -2.12613      -3413.81       3413.81       8288.68       11702.5    
  15  0.213331      -1.54491      -2480.57       2480.57       10025.9       12506.5    
  16  0.294218      -1.22343      -1964.40       1964.40       9749.08       11713.5    
  17  0.352988      -1.04132      -1671.99       1671.99       7293.57       8965.56    
  18  0.348706      -1.05353      -1691.58       1691.58       9599.81       11291.4    
  19  0.449249     -0.800179      -1284.80       1284.80       10584.0       11868.8    
  20  0.879121     -0.128833      -206.860       206.860       10691.8       10898.7    
  21  0.464081     -0.767695      -1232.64       1232.64       9962.25       11194.9    
  22  0.497582     -0.697995      -1120.73       1120.73       10157.0       11277.8    
  23  0.920207     -0.831566E-01  -133.520       133.520       10566.3       10699.8    
  24  0.811773     -0.208535      -334.833       334.833       10667.9       11002.7    
  25  0.190651      -1.65731      -2661.05       2661.05       10683.4       13344.5    
  26  0.645174     -0.438235      -703.649       703.649       10702.9       11406.6    
  27  0.668343     -0.402954      -647.001       647.001       10728.0       11375.0    
  28  0.765111     -0.267735      -429.886       429.886       10596.7       11026.6    
  29  0.991779     -0.825499E-02  -13.2546       13.2546       10723.2       10736.4    
  30  0.136888      -1.98859      -3192.97       3192.97       10689.6       13882.6    
  31  0.645145E-01  -2.74086      -4400.85       4400.85       8867.37       13268.2    
  32  0.408515E-01  -3.19781      -5134.54       5134.54       10526.7       15661.3    
  33  0.264109      -1.33140      -2137.74       2137.74       9218.69       11356.4    
  34  0.382737     -0.960407      -1542.07       1542.07       9645.91       11188.0    
  35  0.402738E-02  -5.51464      -8854.53       8854.53       9539.85       18394.4    
  36  0.318074      -1.14547      -1839.21       1839.21       8533.89       10373.1    
  37  0.245237      -1.40553      -2256.78       2256.78       10474.0       12730.7    
  38  0.519766     -0.654377      -1050.70       1050.70       10940.5       11991.2    
  39  0.255147      -1.36592      -2193.17       2193.17       10751.5       12944.6    
  40  0.833841     -0.181712      -291.764       291.764       10743.7       11035.4    
  41  0.696242E-01  -2.66464      -4278.46       4278.46       10888.5       15167.0    
  42  0.487295     -0.718886      -1154.27       1154.27       10625.7       11780.0    
  43  0.276229E-01  -3.58911      -5762.83       5762.83       10297.8       16060.6    
  44  0.638327     -0.448905      -720.780       720.780       10150.3       10871.0    
  45  0.206684      -1.57657      -2531.40       2531.40       9725.14       12256.5    
  46  0.736003     -0.306521      -492.163       492.163       10694.2       11186.4    
  47  0.217444E-01  -3.82840      -6147.04       6147.04       10881.4       17028.4    
  48  0.956929     -0.440260E-01  -70.6900       70.6900       8124.44       8195.13    
  49  0.883561     -0.123795      -198.770       198.770       10400.6       10599.4    
  50  0.700901     -0.355388      -570.626       570.626       10772.0       11342.6    
  51  0.201997      -1.59950      -2568.23       2568.23       10945.3       13513.5    
  52  0.412152     -0.886362      -1423.18       1423.18       9020.91       10444.1    
  53  0.890450     -0.116029      -186.301       186.301       10368.8       10555.1    
  54  0.417423     -0.873654      -1402.78       1402.78       10373.9       11776.7    
  55  0.426501     -0.852140      -1368.23       1368.23       10208.4       11576.6    
  56  0.983871     -0.162605E-01  -26.1085       26.1085       10934.3       10960.4    
  57  0.384350     -0.956201      -1535.32       1535.32       10673.5       12208.8    
  58  0.155937      -1.85830      -2983.77       2983.77       10670.0       13653.7    
  59  0.361264      -1.01815      -1634.78       1634.78       9592.65       11227.4    
  60  0.538177     -0.619568      -994.804       994.804       10780.5       11775.3    
  61  0.514362E-01  -2.96741      -4764.60       4764.60       10936.3       15700.9    
  62  0.994100     -0.591759E-02  -9.50153       9.50153       10933.5       10943.0    
  63  0.622557     -0.473920      -760.946       760.946       14414.0       15174.9    
  64  0.703606     -0.351537      -564.443       564.443       8203.20       8767.64    
loop,thermsimp(1:2)       57   661.658       518.094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       9680.84          0.89          1.10         22.99          0.30          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9680.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       57
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       58
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      162     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -4558.35       4558.35       5996.15       10554.5    
   2  0.104884      -2.25490      -3620.57       3620.57       6093.62       9714.19    
   3  0.784254     -0.243023      -390.207       390.207       8124.44       8514.65    
   4  0.813133     -0.206861      -332.145       332.145       7709.94       8042.08    
   5  0.490778     -0.711764      -1142.84       1142.84       8203.20       9346.04    
   6  0.168573      -1.78039      -2858.66       2858.66       8747.78       11606.4    
   7  0.450161     -0.798149      -1281.54       1281.54       8382.14       9663.68    
   8  0.828233     -0.188461      -302.601       302.601       7293.57       7596.17    
   9  0.994731     -0.528342E-02  -8.48328       8.48328       7920.16       7928.64    
  10  0.813340     -0.206606      -331.736       331.736       8603.77       8935.51    
  11  0.776133     -0.253432      -406.921       406.921       9374.39       9781.31    
  12  0.729556     -0.315319      -506.289       506.289       9582.37       10088.7    
  13  0.530451     -0.634028      -1018.02       1018.02       8198.30       9216.32    
  14  0.752564E-01  -2.58685      -4153.56       4153.56       8533.89       12687.5    
  15  0.918457     -0.850597E-01  -136.575       136.575       9020.91       9157.48    
  16  0.162642      -1.81621      -2916.18       2916.18       10368.8       13284.9    
  17  0.725851     -0.320411      -514.465       514.465       10400.6       10915.1    
  18  0.322292      -1.13230      -1818.06       1818.06       10566.3       12384.4    
  19  0.838064     -0.176661      -283.654       283.654       10723.2       11006.8    
  20  0.346062E-01  -3.36372      -5400.93       5400.93       8905.23       14306.2    
  21  0.442915     -0.814377      -1307.60       1307.60       10150.3       11457.9    
  22  0.143708      -1.93997      -3114.90       3114.90       10691.8       13806.7    
  23  0.940845     -0.609769E-01  -97.9071       97.9071       10933.5       11031.4    
  24  0.972503     -0.278816E-01  -44.7679       44.7679       10934.3       10979.1    
  25  0.291831      -1.23158      -1977.48       1977.48       10667.9       12645.4    
  26  0.211976      -1.55128      -2490.80       2490.80       10596.7       13087.6    
  27  0.695427     -0.363229      -583.216       583.216       10743.7       11326.9    
  28  0.982540E-01  -2.32020      -3725.41       3725.41       9565.36       13290.8    
  29  0.730742     -0.313695      -503.681       503.681       10694.2       11197.9    
  30  0.417794     -0.872766      -1401.35       1401.35       9645.91       11047.3    
  31  0.868385     -0.141121      -226.589       226.589       9962.25       10188.8    
  32  0.300897      -1.20099      -1928.35       1928.35       9592.65       11521.0    
  33  0.917219     -0.864093E-01  -138.742       138.742       10157.0       10295.8    
  34  0.304394      -1.18943      -1909.80       1909.80       9599.81       11509.6    
  35  0.856500     -0.154901      -248.716       248.716       8938.97       9187.69    
  36  0.310652      -1.16908      -1877.13       1877.13       10772.0       12649.1    
  37  0.846275     -0.166911      -268.000       268.000       9218.69       9486.69    
  38  0.206825      -1.57588      -2530.30       2530.30       10728.0       13258.3    
  39  0.606376     -0.500256      -803.232       803.232       10702.9       11506.2    
  40  0.840015     -0.174336      -279.920       279.920       10208.4       10488.3    
  41  0.348835      -1.05315      -1690.99       1690.99       8288.68       9979.67    
  42  0.857325     -0.153939      -247.170       247.170       9749.08       9996.25    
  43  0.308035E-01  -3.48013      -5587.84       5587.84       10780.5       16368.4    
  44  0.400632     -0.914711      -1468.70       1468.70       10373.9       11842.6    
  45  0.242237      -1.41784      -2276.54       2276.54       10625.7       12902.3    
  46  0.407771     -0.897050      -1440.34       1440.34       10584.0       12024.3    
  47  0.430691     -0.842364      -1352.53       1352.53       10940.5       12293.1    
  48  0.415503     -0.878266      -1410.18       1410.18       10673.5       12083.7    
  49  0.593575     -0.521591      -837.488       837.488       9725.14       10562.6    
  50  0.973620     -0.267342E-01  -42.9255       42.9255       10025.9       10068.9    
  51  0.510257     -0.672840      -1080.34       1080.34       10474.0       11554.3    
  52  0.796475     -0.227560      -365.379       365.379       10751.5       11116.8    
  53  0.213576      -1.54376      -2478.73       2478.73       8867.37       11346.1    
  54  0.865534     -0.144409      -231.869       231.869       10683.4       10915.3    
  55  0.920053     -0.833240E-01  -133.788       133.788       10945.3       11079.1    
  56  0.534624     -0.626192      -1005.44       1005.44       10670.0       11675.4    
  57  0.963687     -0.369888E-01  -59.3907       59.3907       10689.6       10749.0    
  58  0.498139     -0.696877      -1118.94       1118.94       10888.5       12007.4    
  59  0.987058     -0.130264E-01  -20.9158       20.9158       14414.0       14434.9    
  60  0.488276E-01  -3.01946      -4848.17       4848.17       10526.7       15374.9    
  61  0.597381E-01  -2.81779      -4524.36       4524.36       10936.3       15460.7    
  62  0.589016     -0.529301      -849.868       849.868       10297.8       11147.7    
  63  0.680503     -0.384923      -618.049       618.049       10881.4       11499.5    
  64  0.793494     -0.231310      -371.401       371.401       9680.84       10052.2    
loop,thermsimp(1:2)       58   4558.35       3620.57    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164       8011.17          0.89          1.10         22.94          0.34          0.04         25.30
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    165       6104.52          0.89          1.10         22.99          0.38          0.04         25.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   6104.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       58
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       59
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      164     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -1779.96       1779.96       7293.57       9073.53    
   2  0.939148     -0.627826E-01  -100.806       100.806       7920.16       8020.97    
   3  0.130906      -2.03328      -3264.72       3264.72       7709.94       10974.7    
   4  0.664370     -0.408916      -656.572       656.572       8124.44       8781.01    
   5  0.490908     -0.711498      -1142.41       1142.41       8603.77       9746.18    
   6  0.711731     -0.340055      -546.007       546.007       9020.91       9566.91    
   7  0.676080     -0.391444      -628.519       628.519       8938.97       9567.49    
   8  0.611139     -0.492432      -790.669       790.669       8198.30       8988.97    
   9  0.614246     -0.487359      -782.524       782.524       8203.20       8985.72    
  10  0.988045     -0.120275E-01  -19.3119       19.3119       9218.69       9238.00    
  11  0.232883      -1.45722      -2339.77       2339.77       8382.14       10721.9    
  12  0.450825     -0.796675      -1279.17       1279.17       6093.62       7372.79    
  13  0.493319     -0.706599      -1134.54       1134.54       9374.39       10508.9    
  14  0.191184      -1.65452      -2656.57       2656.57       8288.68       10945.2    
  15  0.894136     -0.111897      -179.667       179.667       9749.08       9928.75    
  16  0.391751     -0.937128      -1504.69       1504.69       9680.84       11185.5    
  17  0.236278      -1.44275      -2316.54       2316.54       10025.9       12342.5    
  18  0.496874E-01  -3.00200      -4820.14       4820.14       9582.37       14402.5    
  19  0.784524     -0.242678      -389.655       389.655       9962.25       10351.9    
  20  0.292328      -1.22988      -1974.75       1974.75       10157.0       12131.8    
  21  0.832247E-01  -2.48621      -3991.96       3991.96       10208.4       14200.4    
  22  0.423133     -0.860069      -1380.96       1380.96       5996.15       7377.11    
  23  0.234472      -1.45042      -2328.85       2328.85       9725.14       12054.0    
  24  0.868463     -0.141031      -226.445       226.445       10689.6       10916.1    
  25  0.122969      -2.09582      -3365.14       3365.14       10400.6       13765.8    
  26  0.811771     -0.208537      -334.836       334.836       10683.4       11018.3    
  27  0.786834     -0.239738      -384.934       384.934       10934.3       11319.3    
  28  0.163144      -1.81312      -2911.22       2911.22       10723.2       13634.4    
  29  0.571103     -0.560186      -899.458       899.458       10933.5       11832.9    
  30  0.769982     -0.261388      -419.695       419.695       9645.91       10065.6    
  31  0.471769     -0.751265      -1206.26       1206.26       10945.3       12151.6    
  32  0.584935     -0.536254      -861.032       861.032       10751.5       11612.5    
  33  0.416140     -0.876734      -1407.72       1407.72       10297.8       11705.5    
  34  0.106525E-01  -4.54196      -7292.76       7292.76       10694.2       17987.0    
  35  0.595424     -0.518482      -832.496       832.496       10743.7       11576.1    
  36  0.302400      -1.19600      -1920.35       1920.35       8867.37       10787.7    
  37  0.629701     -0.462510      -742.625       742.625       10150.3       10892.9    
  38  0.939026E-01  -2.36550      -3798.14       3798.14       10881.4       14679.5    
  39  0.911727     -0.924151E-01  -148.386       148.386       10702.9       10851.3    
  40  0.289502      -1.23959      -1990.34       1990.34       9599.81       11590.2    
  41  0.326571      -1.11911      -1796.89       1796.89       9592.65       11389.5    
  42  0.972366     -0.280231E-01  -44.9950       44.9950       10474.0       10519.0    
  43  0.823413     -0.194297      -311.971       311.971       8747.78       9059.75    
  44  0.790717     -0.234815      -377.029       377.029       10670.0       11047.0    
  45  0.167922      -1.78426      -2864.88       2864.88       10373.9       13238.8    
  46  0.804665     -0.217329      -348.953       348.953       10888.5       11237.5    
  47  0.154714      -1.86617      -2996.41       2996.41       10584.0       13580.4    
  48  0.240456      -1.42522      -2288.39       2288.39       10673.5       12961.9    
  49  0.351787      -1.04473      -1677.46       1677.46       10940.5       12618.0    
  50  0.666429E-01  -2.70841      -4348.73       4348.73       10566.3       14915.0    
  51  0.484113     -0.725437      -1164.79       1164.79       10667.9       11832.7    
  52  0.298509      -1.20896      -1941.15       1941.15       10772.0       12713.1    
  53  0.982136     -0.180253E-01  -28.9421       28.9421       8533.89       8562.83    
  54  0.799723     -0.223490      -358.845       358.845       10625.7       10984.6    
  55  0.559799     -0.580177      -931.557       931.557       10596.7       11528.3    
  56  0.492929     -0.707390      -1135.82       1135.82       10728.0       11863.8    
  57  0.655290     -0.422678      -678.669       678.669       10368.8       11047.4    
  58  0.426949     -0.851091      -1366.55       1366.55       9565.36       10931.9    
  59  0.575269     -0.552918      -887.788       887.788       10691.8       11579.6    
  60  0.252283      -1.37721      -2211.30       2211.30       8905.23       11116.5    
  61  0.628464     -0.464477      -745.784       745.784       14414.0       15159.8    
  62  0.847342E-01  -2.46824      -3963.10       3963.10       10526.7       14489.8    
  63  0.701567     -0.354439      -569.102       569.102       10936.3       11505.4    
  64  0.171664      -1.76222      -2829.49       2829.49       6104.52       8934.01    
loop,thermsimp(1:2)       59   1779.96       100.806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166       7848.65          0.90          1.10         23.05          0.37          0.05         25.47
Just calling func    0   0         25.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    167       5990.60          0.90          1.08         23.05          0.56          0.05         25.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5990.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       59
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       60
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      166     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -1911.16       1911.16       6093.62       8004.78    
   2  0.843344     -0.170380      -273.569       273.569       5996.15       6269.72    
   3  0.457815     -0.781289      -1254.47       1254.47       7920.16       9174.63    
   4  0.933709     -0.685899E-01  -110.131       110.131       8533.89       8644.02    
   5  0.887159     -0.119731      -192.245       192.245       8124.44       8316.68    
   6  0.786211     -0.240530      -386.205       386.205       6104.52       6490.72    
   7  0.794803     -0.229661      -368.753       368.753       8203.20       8571.95    
   8  0.573435E-01  -2.85870      -4590.04       4590.04       8198.30       12788.3    
   9  0.647106     -0.435245      -698.847       698.847       8747.78       9446.63    
  10  0.110118      -2.20620      -3542.37       3542.37       7293.57       10835.9    
  11  0.339548      -1.08014      -1734.32       1734.32       9218.69       10953.0    
  12  0.635246     -0.453742      -728.548       728.548       9020.91       9749.45    
  13  0.488392     -0.716638      -1150.66       1150.66       8938.97       10089.6    
  14  0.602571     -0.506549      -813.336       813.336       8603.77       9417.11    
  15  0.710041     -0.342433      -549.825       549.825       9749.08       10298.9    
  16  0.585763     -0.534840      -858.762       858.762       9645.91       10504.7    
  17  0.288010      -1.24476      -1998.64       1998.64       9962.25       11960.9    
  18  0.455238     -0.786934      -1263.53       1263.53       9374.39       10637.9    
  19  0.723984     -0.322986      -518.600       518.600       10474.0       10992.6    
  20  0.554067     -0.590470      -948.084       948.084       8382.14       9330.22    
  21  0.646516     -0.436157      -700.312       700.312       8867.37       9567.68    
  22  0.271985      -1.30201      -2090.56       2090.56       10702.9       12793.5    
  23  0.901636E-02  -4.70871      -7560.51       7560.51       10150.3       17710.8    
  24  0.383616     -0.958114      -1538.39       1538.39       10689.6       12228.0    
  25  0.443516     -0.813022      -1305.42       1305.42       9565.36       10870.8    
  26  0.223023      -1.50048      -2409.24       2409.24       8288.68       10697.9    
  27  0.123255      -2.09350      -3361.41       3361.41       7709.94       11071.3    
  28  0.817485     -0.201523      -323.574       323.574       10625.7       10949.3    
  29  0.333893      -1.09693      -1761.28       1761.28       10683.4       12444.7    
  30  0.867877     -0.141706      -227.529       227.529       10670.0       10897.5    
  31  0.365747      -1.00581      -1614.98       1614.98       10368.8       11983.7    
  32  0.429445     -0.845262      -1357.19       1357.19       8905.23       10262.4    
  33  0.856620     -0.154761      -248.491       248.491       9680.84       9929.34    
  34  0.729532     -0.315352      -506.343       506.343       10888.5       11394.8    
  35  0.315845      -1.15251      -1850.51       1850.51       10934.3       12784.8    
  36  0.547596     -0.602217      -966.944       966.944       9592.65       10559.6    
  37  0.752130     -0.284846      -457.361       457.361       10936.3       11393.7    
  38  0.806451     -0.215112      -345.393       345.393       10596.7       10942.1    
  39  0.618613     -0.480275      -771.150       771.150       10743.7       11514.8    
  40  0.630350     -0.461480      -740.971       740.971       10691.8       11432.8    
  41  0.251741      -1.37935      -2214.75       2214.75       9599.81       11814.6    
  42  0.846504     -0.166640      -267.564       267.564       10751.5       11019.0    
  43  0.830791     -0.185377      -297.648       297.648       10297.8       10595.4    
  44  0.566838     -0.567681      -911.493       911.493       10667.9       11579.4    
  45  0.499450E-01  -2.99683      -4811.84       4811.84       10933.5       15745.3    
  46  0.976301     -0.239838E-01  -38.5095       38.5095       10728.0       10766.5    
  47  0.401049     -0.913672      -1467.03       1467.03       9725.14       11192.2    
  48  0.709931E-01  -2.64517      -4247.20       4247.20       10157.0       14404.2    
  49  0.920370E-02  -4.68815      -7527.49       7527.49       10945.3       18472.8    
  50  0.379723     -0.968314      -1554.77       1554.77       10025.9       11580.7    
  51  0.207569      -1.57229      -2524.54       2524.54       10940.5       13465.1    
  52  0.745673     -0.293468      -471.204       471.204       10772.0       11243.2    
  53  0.915877     -0.878737E-01  -141.094       141.094       10673.5       10814.6    
  54  0.836769     -0.178207      -286.137       286.137       10373.9       10660.0    
  55  0.769684E-01  -2.56436      -4117.44       4117.44       10584.0       14701.4    
  56  0.797754     -0.225955      -362.803       362.803       10723.2       11086.0    
  57  0.555189     -0.588446      -944.834       944.834       10400.6       11345.5    
  58  0.134224      -2.00825      -3224.53       3224.53       10208.4       13432.9    
  59  0.796234     -0.227862      -365.865       365.865       9582.37       9948.23    
  60  0.628721     -0.464068      -745.127       745.127       10526.7       11271.9    
  61  0.460391     -0.775679      -1245.46       1245.46       10881.4       12126.9    
  62  0.137302      -1.98558      -3188.12       3188.12       10566.3       13754.4    
  63  0.504249     -0.684686      -1099.36       1099.36       14414.0       15513.4    
  64  0.548486     -0.600594      -964.339       964.339       5990.60       6954.94    
loop,thermsimp(1:2)       60   1911.16       273.569    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168       7603.86          0.89          1.09         23.06          0.25          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7603.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       60
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       61
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      167     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -299.794       299.794       5996.15       6295.94    
   2  0.735850     -0.306729      -492.497       492.497       6104.52       6597.01    
   3  0.828786     -0.187793      -301.529       301.529       5990.60       6292.13    
   4  0.592078     -0.524118      -841.545       841.545       6093.62       6935.16    
   5  0.691797E-01  -2.67105      -4288.75       4288.75       8124.44       12413.2    
   6  0.772335     -0.258337      -414.797       414.797       8203.20       8617.99    
   7  0.504563     -0.684063      -1098.36       1098.36       8533.89       9632.25    
   8  0.700615     -0.355797      -571.282       571.282       7920.16       8491.44    
   9  0.764596     -0.268408      -430.967       430.967       8382.14       8813.11    
  10  0.459614     -0.777368      -1248.18       1248.18       8603.77       9851.95    
  11  0.931193     -0.712882E-01  -114.463       114.463       8747.78       8862.24    
  12  0.502482E-01  -2.99078      -4802.12       4802.12       8867.37       13669.5    
  13  0.498197     -0.696760      -1118.75       1118.75       9020.91       10139.7    
  14  0.551534E-01  -2.89764      -4652.57       4652.57       9680.84       14333.4    
  15  0.172209      -1.75905      -2824.40       2824.40       9582.37       12406.8    
  16  0.238868E-01  -3.73443      -5996.16       5996.16       8938.97       14935.1    
  17  0.699366     -0.357581      -574.147       574.147       8905.23       9479.38    
  18  0.764093     -0.269066      -432.024       432.024       9749.08       10181.1    
  19  0.465633     -0.764357      -1227.28       1227.28       9645.91       10873.2    
  20  0.209906      -1.56110      -2506.56       2506.56       9592.65       12099.2    
  21  0.216891      -1.52836      -2454.00       2454.00       10297.8       12751.8    
  22  0.795854E-01  -2.53092      -4063.76       4063.76       9374.39       13438.1    
  23  0.701683     -0.354273      -568.836       568.836       10373.9       10942.7    
  24  0.574425     -0.554385      -890.144       890.144       8288.68       9178.82    
  25  0.674968     -0.393090      -631.162       631.162       10728.0       11359.2    
  26  0.684189     -0.379521      -609.376       609.376       10673.5       11282.9    
  27  0.541862     -0.612745      -983.849       983.849       7293.57       8277.41    
  28  0.668027     -0.403426      -647.758       647.758       9565.36       10213.1    
  29  0.353251      -1.04058      -1670.79       1670.79       10670.0       12340.7    
  30  0.778708     -0.250119      -401.602       401.602       10596.7       10998.3    
  31  0.829283     -0.187194      -300.567       300.567       10625.7       10926.3    
  32  0.679297     -0.386697      -620.897       620.897       9218.69       9839.59    
  33  0.536301     -0.623060      -1000.41       1000.41       10474.0       11474.4    
  34  0.247738      -1.39538      -2240.48       2240.48       10751.5       12991.9    
  35  0.271399      -1.30416      -2094.02       2094.02       7709.94       9803.96    
  36  0.284124      -1.25835      -2020.45       2020.45       10723.2       12743.6    
  37  0.664442     -0.408808      -656.399       656.399       9725.14       10381.5    
  38  0.874508     -0.134094      -215.306       215.306       10772.0       10987.3    
  39  0.916444     -0.872538E-01  -140.098       140.098       10526.7       10666.8    
  40  0.295165      -1.22022      -1959.24       1959.24       10400.6       12359.9    
  41  0.242592      -1.41637      -2274.19       2274.19       10936.3       13210.5    
  42  0.396124     -0.926028      -1486.87       1486.87       10888.5       12375.4    
  43  0.509193E-01  -2.97751      -4780.82       4780.82       10691.8       15472.7    
  44  0.778911     -0.249858      -401.183       401.183       10743.7       11144.8    
  45  0.351009      -1.04694      -1681.02       1681.02       10667.9       12348.9    
  46  0.480934     -0.732025      -1175.37       1175.37       10025.9       11201.3    
  47  0.908579     -0.958731E-01  -153.938       153.938       9599.81       9753.75    
  48  0.898885     -0.106600      -171.161       171.161       9962.25       10133.4    
  49  0.561121     -0.577819      -927.770       927.770       10368.8       11296.5    
  50  0.851109     -0.161215      -258.854       258.854       10881.4       11140.3    
  51  0.975854     -0.244425E-01  -39.2459       39.2459       10689.6       10728.9    
  52  0.187829      -1.67223      -2685.00       2685.00       10683.4       13368.4    
  53  0.962131     -0.386049E-01  -61.9856       61.9856       10934.3       10996.3    
  54  0.823812     -0.193813      -311.194       311.194       8198.30       8509.49    
  55  0.765207     -0.267609      -429.685       429.685       10702.9       11132.6    
  56  0.207984      -1.57030      -2521.33       2521.33       10208.4       12729.7    
  57  0.675792     -0.391869      -629.202       629.202       10940.5       11569.7    
  58  0.641275     -0.444296      -713.381       713.381       10566.3       11279.7    
  59  0.621346E-01  -2.77845      -4461.20       4461.20       10157.0       14618.2    
  60  0.911977E-01  -2.39473      -3845.07       3845.07       10584.0       14429.1    
  61  0.697078     -0.360859      -579.410       579.410       14414.0       14993.4    
  62  0.760976     -0.273154      -438.587       438.587       10933.5       11372.1    
  63  0.812117     -0.208111      -334.152       334.152       10150.3       10484.4    
  64  0.654868     -0.423322      -679.704       679.704       7603.86       8283.56    
loop,thermsimp(1:2)       61   299.794       492.497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       7593.84          0.89          1.10         23.00          0.31          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7593.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       61
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       62
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      168     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -138.433       138.433       5990.60       6129.04    
   2  0.899579E-01  -2.40841      -3867.05       3867.05       5996.15       9863.20    
   3  0.997625     -0.237830E-02  -3.81870       3.81870       6104.52       6108.33    
   4  0.224083      -1.49574      -2401.62       2401.62       6093.62       8495.24    
   5  0.120769      -2.11388      -3394.13       3394.13       7293.57       10687.7    
   6  0.302676E-01  -3.49768      -5616.01       5616.01       7603.86       13219.9    
   7  0.315161      -1.15467      -1853.99       1853.99       7920.16       9774.15    
   8  0.155895      -1.85857      -2984.21       2984.21       8198.30       11182.5    
   9  0.467639     -0.760060      -1220.38       1220.38       8203.20       9423.58    
  10  0.277823      -1.28077      -2056.46       2056.46       8382.14       10438.6    
  11  0.712282     -0.339281      -544.764       544.764       8747.78       9292.55    
  12  0.929560     -0.730437E-01  -117.282       117.282       8288.68       8405.96    
  13  0.499024     -0.695101      -1116.08       1116.08       8905.23       10021.3    
  14  0.940347     -0.615066E-01  -98.7575       98.7575       8533.89       8632.65    
  15  0.714006     -0.336864      -540.883       540.883       9599.81       10140.7    
  16  0.162603      -1.81644      -2916.56       2916.56       7709.94       10626.5    
  17  0.663729     -0.409881      -658.122       658.122       9218.69       9876.81    
  18  0.314148      -1.15789      -1859.16       1859.16       8603.77       10462.9    
  19  0.497386     -0.698388      -1121.36       1121.36       9962.25       11083.6    
  20  0.368387     -0.998622      -1603.43       1603.43       9020.91       10624.3    
  21  0.326342      -1.11981      -1798.01       1798.01       9749.08       11547.1    
  22  0.442952     -0.814294      -1307.46       1307.46       9565.36       10872.8    
  23  0.929694     -0.729000E-01  -117.051       117.051       9725.14       9842.19    
  24  0.945450E-01  -2.35868      -3787.19       3787.19       10150.3       13937.5    
  25  0.407158     -0.898555      -1442.76       1442.76       10526.7       11969.5    
  26  0.706679     -0.347179      -557.446       557.446       10689.6       11247.1    
  27  0.657848     -0.418781      -672.413       672.413       9645.91       10318.3    
  28  0.968040     -0.324817E-01  -52.1540       52.1540       10625.7       10677.9    
  29  0.330387      -1.10749      -1778.23       1778.23       10373.9       12152.1    
  30  0.756161     -0.279501      -448.779       448.779       10772.0       11220.8    
  31  0.307772      -1.17840      -1892.08       1892.08       10934.3       12826.4    
  32  0.759008E-01  -2.57833      -4139.87       4139.87       10596.7       14736.6    
  33  0.615618E-01  -2.78771      -4476.07       4476.07       10702.9       15179.0    
  34  0.545984     -0.605166      -971.680       971.680       10881.4       11853.1    
  35  0.339865      -1.07921      -1732.82       1732.82       10743.7       12476.5    
  36  0.816477     -0.202757      -325.555       325.555       10025.9       10351.5    
  37  0.932889     -0.694691E-01  -111.542       111.542       10566.3       10677.8    
  38  0.667042     -0.404902      -650.128       650.128       10673.5       11323.6    
  39  0.583049     -0.539484      -866.218       866.218       10368.8       11235.0    
  40  0.210192      -1.55973      -2504.38       2504.38       10728.0       13232.4    
  41  0.158846      -1.83982      -2954.10       2954.10       10933.5       13887.6    
  42  0.360401      -1.02054      -1638.62       1638.62       10474.0       12112.6    
  43  0.508154     -0.676971      -1086.97       1086.97       10940.5       12027.5    
  44  0.873303     -0.135473      -217.521       217.521       9592.65       9810.17    
  45  0.650524     -0.429977      -690.390       690.390       10670.0       11360.3    
  46  0.805601     -0.216166      -347.085       347.085       10667.9       11015.0    
  47  0.312590E-03  -8.07062      -12958.5       12958.5       10400.6       23359.2    
  48  0.892261     -0.113997      -183.038       183.038       10888.5       11071.5    
  49  0.504672     -0.683846      -1098.01       1098.01       9582.37       10680.4    
  50  0.269834      -1.30995      -2103.31       2103.31       8124.44       10227.7    
  51  0.752889     -0.283838      -455.742       455.742       10208.4       10664.2    
  52  0.952800     -0.483498E-01  -77.6325       77.6325       10723.2       10800.8    
  53  0.147189E-01  -4.21863      -6773.60       6773.60       10297.8       17071.4    
  54  0.213392      -1.54462      -2480.11       2480.11       10751.5       13231.6    
  55  0.278061      -1.27992      -2055.09       2055.09       10936.3       12991.4    
  56  0.668800     -0.402271      -645.903       645.903       10683.4       11329.3    
  57  0.674989     -0.393058      -631.111       631.111       9374.39       10005.5    
  58  0.186370      -1.68002      -2697.51       2697.51       8867.37       11564.9    
  59  0.133078      -2.01682      -3238.28       3238.28       9680.84       12919.1    
  60  0.519821     -0.654270      -1050.52       1050.52       10584.0       11634.5    
  61  0.136847      -1.98889      -3193.45       3193.45       10157.0       13350.5    
  62  0.604880     -0.502725      -807.197       807.197       8938.97       9746.17    
  63  0.301519      -1.19892      -1925.04       1925.04       14414.0       16339.0    
  64  0.531506     -0.632040      -1014.83       1014.83       7593.84       8608.67    
loop,thermsimp(1:2)       62   138.433       3867.05    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170       7997.68          0.88          1.10         23.07          0.29          0.05         25.39
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171       6959.75          0.89          1.10         23.00          0.27          0.05         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   6959.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       62
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       63
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      170     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -774.834       774.834       6104.52       6879.35    
   2  0.828850     -0.187716      -301.404       301.404       5990.60       6292.01    
   3  0.138898      -1.97402      -3169.57       3169.57       8288.68       11458.2    
   4  0.174947      -1.74327      -2799.07       2799.07       6093.62       8892.69    
   5  0.452367E-01  -3.09585      -4970.82       4970.82       7593.84       12564.7    
   6  0.982229     -0.179305E-01  -28.7899       28.7899       8533.89       8562.68    
   7  0.855728     -0.155803      -250.164       250.164       8747.78       8997.95    
   8  0.350750      -1.04768      -1682.20       1682.20       8203.20       9885.40    
   9  0.880054     -0.127772      -205.156       205.156       8938.97       9144.13    
  10  0.106511      -2.23950      -3595.84       3595.84       7920.16       11516.0    
  11  0.336060      -1.09047      -1750.90       1750.90       9592.65       11343.6    
  12  0.904819     -0.100020      -160.597       160.597       9725.14       9885.74    
  13  0.765597     -0.267099      -428.865       428.865       5996.15       6425.01    
  14  0.551789     -0.594589      -954.697       954.697       9218.69       10173.4    
  15  0.832435     -0.183400      -294.474       294.474       9374.39       9668.86    
  16  0.353494      -1.03989      -1669.69       1669.69       8905.23       10574.9    
  17  0.510104     -0.673140      -1080.82       1080.82       9599.81       10680.6    
  18  0.523162     -0.647863      -1040.24       1040.24       8124.44       9164.68    
  19  0.953043     -0.480957E-01  -77.2245       77.2245       9645.91       9723.14    
  20  0.267001E-01  -3.62309      -5817.38       5817.38       10025.9       15843.3    
  21  0.280924      -1.26967      -2038.64       2038.64       8382.14       10420.8    
  22  0.956868     -0.440901E-01  -70.7929       70.7929       8603.77       8674.56    
  23  0.779725     -0.248814      -399.506       399.506       9020.91       9420.41    
  24  0.901061     -0.104183      -167.280       167.280       7709.94       7877.22    
  25  0.533391     -0.628501      -1009.15       1009.15       10208.4       11217.6    
  26  0.642536     -0.442333      -710.228       710.228       10566.3       11276.5    
  27  0.520565E-01  -2.95543      -4745.35       4745.35       10625.7       15371.1    
  28  0.330080      -1.10842      -1779.73       1779.73       9582.37       11362.1    
  29  0.280801      -1.27011      -2039.34       2039.34       7293.57       9332.91    
  30  0.144013      -1.93785      -3111.49       3111.49       10723.2       13834.7    
  31  0.201537      -1.60178      -2571.89       2571.89       9565.36       12137.2    
  32  0.920188     -0.831777E-01  -133.554       133.554       10667.9       10801.4    
  33  0.747222     -0.291393      -467.873       467.873       10888.5       11356.4    
  34  0.697959     -0.359595      -577.381       577.381       9962.25       10539.6    
  35  0.492949     -0.707349      -1135.75       1135.75       8198.30       9334.05    
  36  0.378001     -0.972857      -1562.06       1562.06       10772.0       12334.0    
  37  0.936484     -0.656225E-01  -105.366       105.366       10368.8       10474.1    
  38  0.458232     -0.780381      -1253.01       1253.01       10689.6       11942.7    
  39  0.286796      -1.24898      -2005.42       2005.42       10673.5       12678.9    
  40  0.524458     -0.645389      -1036.26       1036.26       10683.4       11719.7    
  41  0.126679      -2.06610      -3317.41       3317.41       10670.0       13987.4    
  42  0.645270     -0.438086      -703.409       703.409       9749.08       10452.5    
  43  0.996049     -0.395919E-02  -6.35705       6.35705       8867.37       8873.72    
  44  0.470695     -0.753545      -1209.92       1209.92       10584.0       11793.9    
  45  0.783048     -0.244561      -392.677       392.677       10881.4       11274.1    
  46  0.682425     -0.382103      -613.520       613.520       10526.7       11140.2    
  47  0.623779     -0.471960      -757.798       757.798       10940.5       11698.3    
  48  0.138146      -1.97945      -3178.28       3178.28       10474.0       13652.3    
  49  0.317697      -1.14666      -1841.12       1841.12       10373.9       12215.0    
  50  0.215616      -1.53426      -2463.47       2463.47       10743.7       13207.1    
  51  0.392653     -0.934829      -1501.00       1501.00       10934.3       12435.3    
  52  0.311957      -1.16489      -1870.40       1870.40       9680.84       11551.2    
  53  0.665567     -0.407116      -653.682       653.682       10936.3       11590.0    
  54  0.124333      -2.08479      -3347.43       3347.43       7603.86       10951.3    
  55  0.175373      -1.74084      -2795.16       2795.16       10751.5       13546.6    
  56  0.712195E-01  -2.64199      -4242.09       4242.09       10728.0       14970.1    
  57  0.626551E-01  -2.77011      -4447.81       4447.81       10157.0       14604.9    
  58  0.869671     -0.139640      -224.212       224.212       10933.5       11157.7    
  59  0.112950      -2.18081      -3501.60       3501.60       10150.3       13651.9    
  60  0.837299     -0.177574      -285.120       285.120       10596.7       10881.9    
  61  0.380546     -0.966149      -1551.29       1551.29       10702.9       12254.2    
  62  0.225371      -1.49001      -2392.42       2392.42       14414.0       16806.4    
  63  0.556139     -0.586737      -942.089       942.089       10297.8       11239.9    
  64  0.909618     -0.947309E-01  -152.104       152.104       6959.75       7111.85    
loop,thermsimp(1:2)       63   774.834       301.404    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172       9012.53          0.89          1.09         23.09          0.48          0.04         25.59
Just calling func    0   0         25.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9012.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       63
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       64
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      171     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -325.415       325.415       5990.60       6316.02    
   2  0.209930      -1.56098      -2506.38       2506.38       5996.15       8502.52    
   3  0.710991     -0.341096      -547.678       547.678       6104.52       6652.19    
   4  0.967365     -0.331789E-01  -53.2734       53.2734       6959.75       7013.02    
   5  0.650635E-01  -2.73239      -4387.24       4387.24       7709.94       12097.2    
   6  0.578340     -0.547593      -879.238       879.238       8533.89       9413.13    
   7  0.928890E-01  -2.37635      -3815.57       3815.57       8603.77       12419.3    
   8  0.486974     -0.719546      -1155.33       1155.33       8867.37       10022.7    
   9  0.560625     -0.578703      -929.189       929.189       6093.62       7022.81    
  10  0.552834     -0.592698      -951.660       951.660       8747.78       9699.44    
  11  0.744529E-01  -2.59759      -4170.80       4170.80       8938.97       13109.8    
  12  0.937600     -0.644318E-01  -103.454       103.454       8124.44       8227.89    
  13  0.154459      -1.86783      -2999.06       2999.06       7293.57       10292.6    
  14  0.186893E-02  -6.28239      -10087.3       10087.3       8198.30       18285.6    
  15  0.250797      -1.38311      -2220.78       2220.78       9020.91       11241.7    
  16  0.924847E-01  -2.38071      -3822.57       3822.57       9374.39       13197.0    
  17  0.476680     -0.740911      -1189.64       1189.64       9645.91       10835.5    
  18  0.266527      -1.32228      -2123.10       2123.10       8203.20       10326.3    
  19  0.369755     -0.994916      -1597.48       1597.48       9725.14       11322.6    
  20  0.595561     -0.518252      -832.127       832.127       9218.69       10050.8    
  21  0.636070     -0.452447      -726.469       726.469       8382.14       9108.61    
  22  0.447294     -0.804540      -1291.80       1291.80       9749.08       11040.9    
  23  0.964945     -0.356839E-01  -57.2955       57.2955       10368.8       10426.1    
  24  0.752421     -0.284460      -456.740       456.740       9962.25       10419.0    
  25  0.705556     -0.348769      -559.998       559.998       8905.23       9465.23    
  26  0.943467     -0.581939E-01  -93.4385       93.4385       9599.81       9693.25    
  27  0.272564      -1.29988      -2087.14       2087.14       10667.9       12755.0    
  28  0.215815      -1.53333      -2461.98       2461.98       10596.7       13058.7    
  29  0.756955     -0.278452      -447.094       447.094       7603.86       8050.95    
  30  0.538381     -0.619189      -994.196       994.196       10526.7       11520.9    
  31  0.182967      -1.69845      -2727.10       2727.10       10933.5       13660.6    
  32  0.644758     -0.438881      -704.685       704.685       10208.4       10913.1    
  33  0.939477     -0.624320E-01  -100.243       100.243       10297.8       10398.0    
  34  0.663186     -0.410699      -659.436       659.436       10881.4       11540.8    
  35  0.795014     -0.229396      -368.328       368.328       10566.3       10934.6    
  36  0.630792     -0.460779      -739.846       739.846       9592.65       10332.5    
  37  0.151039      -1.89022      -3035.01       3035.01       10888.5       13923.5    
  38  0.668306     -0.403009      -647.088       647.088       9582.37       10229.5    
  39  0.683820     -0.380061      -610.242       610.242       8288.68       8898.92    
  40  0.122229      -2.10186      -3374.83       3374.83       7920.16       11295.0    
  41  0.664453     -0.408791      -656.371       656.371       9680.84       10337.2    
  42  0.548687     -0.600228      -963.751       963.751       10936.3       11900.1    
  43  0.931535     -0.709210E-01  -113.874       113.874       10940.5       11054.4    
  44  0.139742      -1.96796      -3159.84       3159.84       10683.4       13843.3    
  45  0.429142     -0.845967      -1358.32       1358.32       10584.0       11942.3    
  46  0.531147     -0.632717      -1015.92       1015.92       10689.6       11705.6    
  47  0.575558     -0.552416      -886.982       886.982       9565.36       10452.3    
  48  0.336537      -1.08905      -1748.62       1748.62       10373.9       12122.5    
  49  0.324486      -1.12551      -1807.17       1807.17       10702.9       12510.1    
  50  0.652768     -0.426534      -684.860       684.860       10772.0       11456.8    
  51  0.537860     -0.620158      -995.751       995.751       10934.3       11930.1    
  52  0.415288     -0.878782      -1411.01       1411.01       7593.84       9004.85    
  53  0.771827     -0.258995      -415.854       415.854       10673.5       11089.4    
  54  0.537995     -0.619906      -995.347       995.347       10743.7       11739.0    
  55  0.438537     -0.824310      -1323.55       1323.55       10751.5       12075.0    
  56  0.872114     -0.136835      -219.708       219.708       10150.3       10370.0    
  57  0.974519E-01  -2.32840      -3738.57       3738.57       10474.0       14212.5    
  58  0.245035      -1.40635      -2258.10       2258.10       10723.2       12981.3    
  59  0.285418      -1.25380      -2013.16       2013.16       10670.0       12683.1    
  60  0.598735     -0.512936      -823.592       823.592       10157.0       10980.6    
  61  0.440039     -0.820892      -1318.06       1318.06       10728.0       12046.1    
  62  0.115587      -2.15774      -3464.55       3464.55       10625.7       14090.3    
  63  0.479716     -0.734560      -1179.44       1179.44       10025.9       11205.4    
  64  0.423297     -0.859681      -1380.34       1380.34       9012.53       10392.9    
loop,thermsimp(1:2)       64   325.415       2506.38    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       9824.70          0.90          1.11         23.05          0.54          0.04         25.63
Just calling func    0   0         25.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174      11984.95          0.90          1.12         22.95          0.39          0.04         25.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   9824.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       64
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       65
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      173     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -1607.20       1607.20       5990.60       7597.81    
   2  0.298218      -1.20993      -1942.71       1942.71       6104.52       8047.23    
   3  0.374092     -0.983254      -1578.75       1578.75       6959.75       8538.50    
   4  0.417366     -0.873791      -1403.00       1403.00       6093.62       7496.62    
   5  0.299382      -1.20604      -1936.46       1936.46       7603.86       9540.32    
   6  0.373029     -0.986099      -1583.32       1583.32       8124.44       9707.76    
   7  0.628224     -0.464858      -746.396       746.396       5996.15       6742.54    
   8  0.111397      -2.19465      -3523.83       3523.83       8288.68       11812.5    
   9  0.983555     -0.165818E-01  -26.6244       26.6244       7593.84       7620.46    
  10  0.394578     -0.929938      -1493.15       1493.15       8382.14       9875.29    
  11  0.410639     -0.890042      -1429.09       1429.09       8533.89       9962.98    
  12  0.700680     -0.355705      -571.134       571.134       8905.23       9476.37    
  13  0.223946      -1.49635      -2402.61       2402.61       9599.81       12002.4    
  14  0.651113E-01  -2.73166      -4386.06       4386.06       8747.78       13133.8    
  15  0.704010     -0.350963      -563.521       563.521       8867.37       9430.89    
  16  0.172411      -1.75787      -2822.51       2822.51       9218.69       12041.2    
  17  0.567412     -0.566670      -909.869       909.869       9582.37       10492.2    
  18  0.186334      -1.68021      -2697.82       2697.82       7293.57       9991.39    
  19  0.677524     -0.389310      -625.093       625.093       8203.20       8828.29    
  20  0.362270      -1.01537      -1630.31       1630.31       9592.65       11223.0    
  21  0.603880     -0.504381      -809.855       809.855       9680.84       10490.7    
  22  0.782208     -0.245635      -394.401       394.401       10150.3       10544.7    
  23  0.129808      -2.04170      -3278.24       3278.24       9012.53       12290.8    
  24  0.284816      -1.25591      -2016.55       2016.55       10297.8       12314.3    
  25  0.246930      -1.39865      -2245.73       2245.73       9962.25       12208.0    
  26  0.256917      -1.35900      -2182.07       2182.07       10368.8       12550.8    
  27  0.240545      -1.42485      -2287.80       2287.80       9565.36       11853.2    
  28  0.218018      -1.52318      -2445.68       2445.68       9645.91       12091.6    
  29  0.235583E-01  -3.74828      -6018.39       6018.39       10208.4       16226.8    
  30  0.114660      -2.16578      -3477.47       3477.47       10566.3       14043.8    
  31  0.119129      -2.12755      -3416.09       3416.09       10157.0       13573.1    
  32  0.471707     -0.751398      -1206.48       1206.48       9749.08       10955.6    
  33  0.607413     -0.498546      -800.486       800.486       10940.5       11741.0    
  34  0.568731     -0.564347      -906.139       906.139       10673.5       11579.7    
  35  0.587492     -0.531893      -854.030       854.030       10025.9       10880.0    
  36  0.411259     -0.888533      -1426.67       1426.67       9020.91       10447.6    
  37  0.836192     -0.178897      -287.244       287.244       7920.16       8207.40    
  38  0.152977      -1.87747      -3014.54       3014.54       9725.14       12739.7    
  39  0.941831     -0.599291E-01  -96.2247       96.2247       10772.0       10868.2    
  40  0.936595     -0.655045E-01  -105.177       105.177       10526.7       10631.9    
  41  0.856621     -0.154759      -248.488       248.488       10881.4       11129.9    
  42  0.484786     -0.724047      -1162.56       1162.56       10689.6       11852.2    
  43  0.188261      -1.66993      -2681.30       2681.30       10743.7       13425.0    
  44  0.957606     -0.433189E-01  -69.5547       69.5547       10936.3       11005.9    
  45  0.234891      -1.44863      -2325.99       2325.99       10934.3       13260.3    
  46  0.758920     -0.275858      -442.930       442.930       10584.0       11026.9    
  47  0.135340      -1.99997      -3211.23       3211.23       10728.0       13939.3    
  48  0.779121E-01  -2.55217      -4097.88       4097.88       10751.5       14849.3    
  49  0.573767     -0.555531      -891.984       891.984       7709.94       8601.92    
  50  0.982512     -0.176424E-01  -28.3274       28.3274       10373.9       10402.2    
  51  0.109579      -2.21111      -3550.25       3550.25       8603.77       12154.0    
  52  0.714543     -0.336113      -539.676       539.676       10702.9       11242.6    
  53  0.573216     -0.556492      -893.527       893.527       10670.0       11563.5    
  54  0.389116     -0.943877      -1515.53       1515.53       10667.9       12183.4    
  55  0.149817      -1.89834      -3048.06       3048.06       10723.2       13771.2    
  56  0.623269     -0.472778      -759.112       759.112       10596.7       11355.9    
  57  0.682320E-02  -4.98743      -8008.02       8008.02       8938.97       16947.0    
  58  0.641698     -0.443637      -712.322       712.322       9374.39       10086.7    
  59  0.233363      -1.45516      -2336.47       2336.47       10933.5       13269.9    
  60  0.881483     -0.126150      -202.552       202.552       10683.4       10886.0    
  61  0.264921      -1.32832      -2132.81       2132.81       10888.5       13021.3    
  62  0.941652     -0.601200E-01  -96.5312       96.5312       10625.7       10722.3    
  63  0.179971      -1.71496      -2753.61       2753.61       10474.0       13227.6    
  64  0.381207E-01  -3.26700      -5245.63       5245.63       9824.70       15070.3    
loop,thermsimp(1:2)       65   1607.20       1942.71    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175       9415.80          0.89          1.10         23.01          0.30          0.04         25.34
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   9415.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       65
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       66
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      174     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -2191.19       2191.19       5996.15       8187.34    
   2  0.513427E-01  -2.96923      -4767.52       4767.52       6093.62       10861.1    
   3  0.288453      -1.24322      -1996.17       1996.17       5990.60       7986.78    
   4  0.107044      -2.23452      -3587.83       3587.83       7593.84       11181.7    
   5  0.756779     -0.278684      -447.466       447.466       6104.52       6551.98    
   6  0.333762      -1.09733      -1761.92       1761.92       7920.16       9682.08    
   7  0.270335      -1.30809      -2100.33       2100.33       6959.75       9060.08    
   8  0.666278E-01  -2.70863      -4349.09       4349.09       7709.94       12059.0    
   9  0.517510     -0.658727      -1057.68       1057.68       8203.20       9260.88    
  10  0.719680     -0.328949      -528.174       528.174       8867.37       9395.54    
  11  0.401542     -0.912442      -1465.06       1465.06       8905.23       10370.3    
  12  0.408125     -0.896181      -1438.95       1438.95       7603.86       9042.80    
  13  0.481086     -0.731710      -1174.86       1174.86       8124.44       9299.30    
  14  0.166952E-01  -4.09263      -6571.30       6571.30       8382.14       14953.4    
  15  0.913266     -0.907286E-01  -145.678       145.678       8533.89       8679.57    
  16  0.972084     -0.283134E-01  -45.4612       45.4612       7293.57       7339.03    
  17  0.889421     -0.117184      -188.156       188.156       9374.39       9562.55    
  18  0.171754      -1.76169      -2828.65       2828.65       10373.9       13202.5    
  19  0.925876     -0.770155E-01  -123.659       123.659       9020.91       9144.57    
  20  0.992897     -0.712866E-02  -11.4461       11.4461       9680.84       9692.29    
  21  0.118575E-01  -4.43479      -7120.69       7120.69       9582.37       16703.1    
  22  0.492413     -0.708438      -1137.50       1137.50       10150.3       11287.8    
  23  0.952433     -0.487360E-01  -78.2526       78.2526       10526.7       10605.0    
  24  0.591826     -0.524543      -842.228       842.228       10625.7       11468.0    
  25  0.762199     -0.271548      -436.008       436.008       10772.0       11208.0    
  26  0.613492     -0.488588      -784.497       784.497       10025.9       10810.4    
  27  0.134863      -2.00350      -3216.90       3216.90       10683.4       13900.3    
  28  0.633670     -0.456227      -732.536       732.536       9749.08       10481.6    
  29  0.829625     -0.186782      -299.905       299.905       10936.3       11236.2    
  30  0.148219      -1.90906      -3065.27       3065.27       10584.0       13649.3    
  31  0.198093      -1.61902      -2599.56       2599.56       10881.4       13481.0    
  32  0.321318      -1.13532      -1822.92       1822.92       9592.65       11415.6    
  33  0.475408     -0.743582      -1193.93       1193.93       10702.9       11896.9    
  34  0.196520      -1.62699      -2612.37       2612.37       10596.7       13209.1    
  35  0.637413     -0.450337      -723.081       723.081       10670.0       11393.0    
  36  0.596751     -0.516255      -828.921       828.921       10673.5       11502.4    
  37  0.351361      -1.04594      -1679.41       1679.41       10940.5       12619.9    
  38  0.111764      -2.19136      -3518.54       3518.54       8288.68       11807.2    
  39  0.213579      -1.54375      -2478.71       2478.71       10689.6       13168.4    
  40  0.799647     -0.223585      -358.998       358.998       9565.36       9924.36    
  41  0.670682     -0.399460      -641.390       641.390       9599.81       10241.2    
  42  0.104235      -2.26111      -3630.53       3630.53       9218.69       12849.2    
  43  0.607160E-01  -2.80155      -4498.28       4498.28       9645.91       14144.2    
  44  0.462312     -0.771516      -1238.78       1238.78       8603.77       9842.55    
  45  0.269658      -1.31060      -2104.35       2104.35       10667.9       12772.2    
  46  0.678606     -0.387714      -622.530       622.530       9962.25       10584.8    
  47  0.669051     -0.401895      -645.299       645.299       9012.53       9657.83    
  48  0.551912     -0.594367      -954.340       954.340       10297.8       11252.1    
  49  0.116070E-01  -4.45614      -7154.97       7154.97       10368.8       17523.7    
  50  0.911337     -0.928428E-01  -149.072       149.072       9725.14       9874.22    
  51  0.302404      -1.19599      -1920.33       1920.33       10888.5       12808.8    
  52  0.527926     -0.638800      -1025.68       1025.68       8747.78       9773.46    
  53  0.204835      -1.58555      -2545.82       2545.82       10474.0       13019.8    
  54  0.761388     -0.272612      -437.717       437.717       10934.3       11372.0    
  55  0.189928      -1.66111      -2667.15       2667.15       10933.5       13600.6    
  56  0.423830     -0.858422      -1378.32       1378.32       10743.7       12122.0    
  57  0.895148     -0.110767      -177.852       177.852       10157.0       10334.9    
  58  0.109823      -2.20889      -3546.68       3546.68       10723.2       14269.9    
  59  0.960076     -0.407431E-01  -65.4189       65.4189       10728.0       10793.4    
  60  0.694180     -0.365024      -586.098       586.098       10566.3       11152.4    
  61  0.302866      -1.19446      -1917.88       1917.88       10751.5       12669.3    
  62  0.213503      -1.54410      -2479.28       2479.28       9824.70       12304.0    
  63  0.949162     -0.521754E-01  -83.7749       83.7749       10208.4       10292.2    
  64  0.912779     -0.912617E-01  -146.534       146.534       9415.80       9562.33    
loop,thermsimp(1:2)       66   2191.19       4767.52    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       8552.41          0.90          1.09         23.06          0.23          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8552.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       66
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       67
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      175     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -1944.36       1944.36       6104.52       8048.87    
   2  0.840396     -0.173882      -279.192       279.192       7293.57       7572.76    
   3  0.165782      -1.79708      -2885.47       2885.47       5990.60       8876.07    
   4  0.516202E-01  -2.96384      -4758.87       4758.87       5996.15       10755.0    
   5  0.163201      -1.81278      -2910.67       2910.67       8533.89       11444.6    
   6  0.201529      -1.60182      -2571.95       2571.95       7603.86       10175.8    
   7  0.791805     -0.233441      -374.822       374.822       6959.75       7334.57    
   8  0.306466      -1.18265      -1898.91       1898.91       9020.91       10919.8    
   9  0.625963     -0.468465      -752.187       752.187       8203.20       8955.38    
  10  0.255827      -1.36325      -2188.90       2188.90       8124.44       10313.3    
  11  0.275269      -1.29001      -2071.29       2071.29       8867.37       10938.7    
  12  0.546374     -0.604451      -970.532       970.532       9415.80       10386.3    
  13  0.738275E-01  -2.60602      -4184.34       4184.34       9374.39       13558.7    
  14  0.459460     -0.777704      -1248.71       1248.71       9012.53       10261.2    
  15  0.245891      -1.40287      -2252.50       2252.50       7920.16       10172.7    
  16  0.818144E-01  -2.50330      -4019.41       4019.41       9680.84       13700.3    
  17  0.791963     -0.233241      -374.502       374.502       8747.78       9122.28    
  18  0.652560     -0.426852      -685.372       685.372       8603.77       9289.14    
  19  0.743237     -0.296740      -476.458       476.458       9725.14       10201.6    
  20  0.146095      -1.92350      -3088.45       3088.45       9565.36       12653.8    
  21  0.747148     -0.291492      -468.032       468.032       9599.81       10067.8    
  22  0.935024E-01  -2.36977      -3805.00       3805.00       10208.4       14013.4    
  23  0.924202     -0.788243E-01  -126.564       126.564       10157.0       10283.6    
  24  0.193934      -1.64024      -2633.63       2633.63       8905.23       11538.9    
  25  0.112499      -2.18481      -3508.02       3508.02       9749.08       13257.1    
  26  0.609079     -0.495807      -796.089       796.089       9962.25       10758.3    
  27  0.387822     -0.947210      -1520.88       1520.88       10526.7       12047.6    
  28  0.151976      -1.88403      -3025.09       3025.09       10728.0       13753.1    
  29  0.820125     -0.198299      -318.397       318.397       10025.9       10344.3    
  30  0.100865      -2.29397      -3683.30       3683.30       6093.62       9776.92    
  31  0.246930      -1.39865      -2245.73       2245.73       10566.3       12812.0    
  32  0.101973      -2.28305      -3665.75       3665.75       7593.84       11259.6    
  33  0.389401     -0.943145      -1514.35       1514.35       10772.0       12286.3    
  34  0.573635     -0.555762      -892.355       892.355       10936.3       11828.7    
  35  0.730896E-01  -2.61607      -4200.47       4200.47       10297.8       14498.3    
  36  0.260104      -1.34667      -2162.27       2162.27       10150.3       12312.5    
  37  0.562102     -0.576073      -924.966       924.966       10934.3       11859.3    
  38  0.159056      -1.83850      -2951.97       2951.97       10670.0       13621.9    
  39  0.779134E-02  -4.85474      -7794.98       7794.98       9592.65       17387.6    
  40  0.693208     -0.366425      -588.348       588.348       10625.7       11214.1    
  41  0.600279     -0.510361      -819.457       819.457       10673.5       11493.0    
  42  0.419387     -0.868962      -1395.24       1395.24       8288.68       9683.92    
  43  0.952036     -0.491524E-01  -78.9211       78.9211       10702.9       10781.8    
  44  0.613955     -0.487834      -783.286       783.286       7709.94       8493.22    
  45  0.842752     -0.171082      -274.697       274.697       10743.7       11018.4    
  46  0.733219     -0.310311      -498.249       498.249       9824.70       10322.9    
  47  0.776088     -0.253489      -407.013       407.013       10940.5       11347.6    
  48  0.965215     -0.354047E-01  -56.8472       56.8472       10751.5       10808.3    
  49  0.487812     -0.717826      -1152.57       1152.57       10667.9       11820.5    
  50  0.864492     -0.145613      -233.802       233.802       10888.5       11122.3    
  51  0.334607      -1.09480      -1757.86       1757.86       9218.69       10976.5    
  52  0.267438      -1.31887      -2117.63       2117.63       10474.0       12591.6    
  53  0.333561      -1.09793      -1762.88       1762.88       10689.6       12452.5    
  54  0.593184     -0.522250      -838.547       838.547       10373.9       11212.4    
  55  0.832475     -0.183352      -294.398       294.398       10596.7       10891.1    
  56  0.642050     -0.443089      -711.443       711.443       10881.4       11592.8    
  57  0.799223     -0.224116      -359.850       359.850       10933.5       11293.3    
  58  0.184219      -1.69163      -2716.15       2716.15       10584.0       13300.2    
  59  0.478229     -0.737666      -1184.43       1184.43       10683.4       11867.9    
  60  0.604888     -0.502712      -807.175       807.175       9645.91       10453.1    
  61  0.575395     -0.552698      -887.435       887.435       10723.2       11610.6    
  62  0.325892E-01  -3.42377      -5497.35       5497.35       8382.14       13879.5    
  63  0.759877     -0.274599      -440.908       440.908       9582.37       10023.3    
  64  0.214378      -1.54002      -2472.71       2472.71       8552.41       11025.1    
loop,thermsimp(1:2)       67   1944.36       279.192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177       8424.04          0.89          1.10         23.05          0.31          0.04         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178      10859.08          0.90          1.10         23.05          0.24          0.04         25.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   8424.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       67
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       68
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      177     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -7486.28       7486.28       6959.75       14446.0    
   2  0.714357     -0.336373      -540.095       540.095       7293.57       7833.66    
   3  0.997096     -0.290808E-02  -4.66934       4.66934       6104.52       6109.19    
   4  0.905437     -0.993373E-01  -159.500       159.500       7709.94       7869.44    
   5  0.307060      -1.18071      -1895.80       1895.80       5990.60       7886.40    
   6  0.179061      -1.72003      -2761.75       2761.75       8203.20       10964.9    
   7  0.384312     -0.956301      -1535.48       1535.48       8747.78       10283.3    
   8  0.901101     -0.104138      -167.209       167.209       8603.77       8770.98    
   9  0.606170     -0.500594      -803.775       803.775       8288.68       9092.45    
  10  0.515234     -0.663133      -1064.75       1064.75       6093.62       7158.37    
  11  0.639447     -0.447152      -717.965       717.965       9582.37       10300.3    
  12  0.820429     -0.197928      -317.801       317.801       9599.81       9917.61    
  13  0.521739     -0.650587      -1044.61       1044.61       7920.16       8964.77    
  14  0.767979     -0.263993      -423.878       423.878       7603.86       8027.74    
  15  0.530366     -0.634187      -1018.28       1018.28       9725.14       10743.4    
  16  0.732471     -0.311332      -499.888       499.888       9012.53       9512.42    
  17  0.440461     -0.819933      -1316.52       1316.52       10157.0       11473.6    
  18  0.595715     -0.517993      -831.711       831.711       8124.44       8956.15    
  19  0.407958     -0.896592      -1439.61       1439.61       9824.70       11264.3    
  20  0.544683     -0.607550      -975.508       975.508       10025.9       11001.4    
  21  0.611386E-01  -2.79461      -4487.15       4487.15       9415.80       13902.9    
  22  0.135041      -2.00218      -3214.78       3214.78       9645.91       12860.7    
  23  0.547242     -0.602864      -967.984       967.984       5996.15       6964.13    
  24  0.214436      -1.53975      -2472.28       2472.28       9962.25       12434.5    
  25  0.340220      -1.07816      -1731.14       1731.14       10702.9       12434.1    
  26  0.270394      -1.30787      -2099.98       2099.98       10751.5       12851.4    
  27  0.605229     -0.502149      -806.271       806.271       10596.7       11403.0    
  28  0.630206     -0.461709      -741.339       741.339       9020.91       9762.24    
  29  0.942476     -0.592449E-01  -95.1260       95.1260       8867.37       8962.49    
  30  0.293125      -1.22716      -1970.38       1970.38       9218.69       11189.1    
  31  0.526210     -0.642056      -1030.91       1030.91       10743.7       11774.6    
  32  0.972201     -0.281927E-01  -45.2673       45.2673       8552.41       8597.68    
  33  0.570000     -0.562119      -902.561       902.561       10888.5       11791.1    
  34  0.752945     -0.283763      -455.622       455.622       10373.9       10829.5    
  35  0.333005      -1.09960      -1765.56       1765.56       10625.7       12391.3    
  36  0.430444     -0.842939      -1353.46       1353.46       7593.84       8947.30    
  37  0.106505      -2.23957      -3595.94       3595.94       10933.5       14529.4    
  38  0.327953      -1.11488      -1790.11       1790.11       10940.5       12730.6    
  39  0.586631     -0.533359      -856.384       856.384       8533.89       9390.27    
  40  0.563274     -0.573989      -921.621       921.621       10673.5       11595.1    
  41  0.802100     -0.220522      -354.079       354.079       8905.23       9259.31    
  42  0.594871     -0.519411      -833.987       833.987       10881.4       11715.4    
  43  0.816066     -0.203261      -326.364       326.364       10723.2       11049.5    
  44  0.170795E-01  -4.06987      -6534.76       6534.76       10667.9       17202.6    
  45  0.554958     -0.588864      -945.504       945.504       10936.3       11881.8    
  46  0.674023     -0.394492      -633.412       633.412       10934.3       11567.7    
  47  0.371758     -0.989512      -1588.80       1588.80       10683.4       12272.2    
  48  0.309440      -1.17299      -1883.40       1883.40       10526.7       12410.1    
  49  0.182337      -1.70190      -2732.64       2732.64       10772.0       13504.6    
  50  0.443504     -0.813049      -1305.47       1305.47       10150.3       11455.7    
  51  0.407824     -0.896918      -1440.13       1440.13       10689.6       12129.8    
  52  0.140254      -1.96430      -3153.96       3153.96       10474.0       13627.9    
  53  0.801043     -0.221840      -356.196       356.196       9565.36       9921.56    
  54  0.922923     -0.802099E-01  -128.788       128.788       10566.3       10695.1    
  55  0.982391     -0.177663E-01  -28.5263       28.5263       9749.08       9777.61    
  56  0.830509     -0.185717      -298.195       298.195       10584.0       10882.2    
  57  0.459056     -0.778583      -1250.13       1250.13       9374.39       10624.5    
  58  0.918078     -0.854734E-01  -137.240       137.240       10670.0       10807.2    
  59  0.858811E-01  -2.45479      -3941.52       3941.52       9680.84       13622.4    
  60  0.642813E-01  -2.74449      -4406.66       4406.66       10728.0       15134.7    
  61  0.328642      -1.11279      -1786.74       1786.74       8382.14       10168.9    
  62  0.238578      -1.43306      -2300.98       2300.98       10208.4       12509.4    
  63  0.183249      -1.69691      -2724.63       2724.63       10297.8       13022.4    
  64  0.575307     -0.552852      -887.682       887.682       8424.04       9311.72    
loop,thermsimp(1:2)       68   7486.28       540.095    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       7512.56          0.89          1.10         23.08          0.31          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7512.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       68
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       69
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      178     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -1046.74       1046.74       6104.52       7151.26    
   2  0.554375     -0.589913      -947.190       947.190       5996.15       6943.34    
   3  0.404373     -0.905418      -1453.78       1453.78       6093.62       7547.40    
   4  0.632877     -0.457478      -734.547       734.547       7293.57       8028.11    
   5  0.395261     -0.928209      -1490.37       1490.37       7709.94       9200.31    
   6  0.715068     -0.335378      -538.497       538.497       5990.60       6529.10    
   7  0.918313     -0.852174E-01  -136.829       136.829       7603.86       7740.69    
   8  0.529514E-01  -2.93838      -4717.99       4717.99       8552.41       13270.4    
   9  0.284219      -1.25801      -2019.91       2019.91       8603.77       10623.7    
  10  0.809402     -0.211460      -339.529       339.529       7593.84       7933.37    
  11  0.604758     -0.502928      -807.522       807.522       8124.44       8931.96    
  12  0.624772     -0.470369      -755.244       755.244       8867.37       9622.61    
  13  0.622683     -0.473718      -760.622       760.622       7920.16       8680.78    
  14  0.491656     -0.709976      -1139.97       1139.97       8288.68       9428.65    
  15  0.823484     -0.194211      -311.833       311.833       8905.23       9217.06    
  16  0.185629E-01  -3.98659      -6401.03       6401.03       8424.04       14825.1    
  17  0.911253     -0.929346E-01  -149.220       149.220       8533.89       8683.11    
  18  0.825116     -0.192231      -308.654       308.654       9012.53       9321.18    
  19  0.902913     -0.102129      -163.983       163.983       9020.91       9184.89    
  20  0.869925     -0.139348      -223.743       223.743       9749.08       9972.82    
  21  0.135445      -1.99919      -3209.98       3209.98       9599.81       12809.8    
  22  0.516840     -0.660022      -1059.76       1059.76       9565.36       10625.1    
  23  0.127583      -2.05899      -3306.00       3306.00       8382.14       11688.1    
  24  0.237062E-01  -3.74202      -6008.34       6008.34       8747.78       14756.1    
  25  0.456233     -0.784753      -1260.03       1260.03       9582.37       10842.4    
  26  0.547397     -0.602581      -967.530       967.530       9374.39       10341.9    
  27  0.231746E-02  -6.06728      -9741.88       9741.88       10566.3       20308.2    
  28  0.467213     -0.760969      -1221.84       1221.84       9725.14       10947.0    
  29  0.397333     -0.922981      -1481.98       1481.98       10670.0       12151.9    
  30  0.291343      -1.23325      -1980.16       1980.16       10373.9       12354.0    
  31  0.964262     -0.363922E-01  -58.4328       58.4328       10584.0       10642.4    
  32  0.260485      -1.34521      -2159.92       2159.92       8203.20       10363.1    
  33  0.868574     -0.140902      -226.239       226.239       10025.9       10252.2    
  34  0.832573     -0.183235      -294.209       294.209       10723.2       11017.4    
  35  0.240383      -1.42552      -2288.88       2288.88       9218.69       11507.6    
  36  0.878342     -0.129719      -208.282       208.282       9824.70       10033.0    
  37  0.168707      -1.77959      -2857.39       2857.39       10596.7       13454.1    
  38  0.348015      -1.05551      -1694.77       1694.77       10150.3       11845.0    
  39  0.846224     -0.166971      -268.096       268.096       10157.0       10425.1    
  40  0.842580     -0.171286      -275.024       275.024       10934.3       11209.4    
  41  0.230401      -1.46794      -2356.98       2356.98       10673.5       13030.5    
  42  0.441962     -0.816531      -1311.06       1311.06       10881.4       12192.5    
  43  0.772036     -0.258724      -415.418       415.418       10743.7       11159.1    
  44  0.970063     -0.303946E-01  -48.8028       48.8028       10888.5       10937.3    
  45  0.610535     -0.493419      -792.255       792.255       10936.3       11728.6    
  46  0.548201     -0.601114      -965.174       965.174       10689.6       11654.8    
  47  0.322533      -1.13155      -1816.86       1816.86       10683.4       12500.3    
  48  0.194318E-01  -3.94084      -6327.58       6327.58       10625.7       16953.3    
  49  0.219930      -1.51445      -2431.66       2431.66       10526.7       12958.4    
  50  0.538995E-01  -2.92063      -4689.49       4689.49       10702.9       15392.4    
  51  0.189941      -1.66104      -2667.03       2667.03       9962.25       12629.3    
  52  0.339787      -1.07944      -1733.19       1733.19       10208.4       11941.6    
  53  0.783417     -0.244091      -391.922       391.922       10940.5       11332.5    
  54  0.347888      -1.05587      -1695.35       1695.35       10751.5       12446.8    
  55  0.511342     -0.670716      -1076.93       1076.93       9645.91       10722.8    
  56  0.656791     -0.420389      -674.995       674.995       10297.8       10972.8    
  57  0.433072E-01  -3.13944      -5040.81       5040.81       10772.0       15812.8    
  58  0.940019     -0.618557E-01  -99.3181       99.3181       9680.84       9780.16    
  59  0.560131     -0.579584      -930.605       930.605       10474.0       11404.6    
  60  0.335604      -1.09182      -1753.08       1753.08       9415.80       11168.9    
  61  0.677192     -0.389801      -625.881       625.881       6959.75       7585.63    
  62  0.166447      -1.79308      -2879.04       2879.04       10933.5       13812.5    
  63  0.966787     -0.337766E-01  -54.2331       54.2331       10728.0       10782.3    
  64  0.501486     -0.690179      -1108.18       1108.18       7512.56       8620.74    
loop,thermsimp(1:2)       69   1046.74       947.190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180       7497.40          0.89          1.09         22.98          0.31          0.05         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181       5728.33          0.89          1.08         23.07          0.30          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    5728.3        3.248    -0.1568      4.465     -100.0    -0.8351E-01
                      -1.107      2.113     -100.0      2.693     0.4064    
                      0.4064    -0.2831      2.400      0.000      0.000    
                      -2.217      0.000      0.000      0.000     -1.221    

                      -2.500     0.1122E+05 0.1390E+05 -1202.     -3606.    
                      -2.000     -2.219     -1.219     -4.016     -2.606    
                      -12.22     -2.433      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.2919     0.5939E-01  0.000    -0.1425    
                      0.8492E-01-0.3045     0.8263E-02 0.3712E-01-0.1682    

                      -1.322     -1.518      0.000     0.3514     0.3330    
                      0.8541E-01-0.7082     0.1250     -1.259    -0.4285    
                     -0.1384    -0.2265E-01 0.3308    -0.8158      0.000    

                     -0.6061    -0.4064      3.217     -2.548      0.000    
                       0.000      9.397      8.555     -5534.     -4.000    
                      0.8905    -0.1032      9.211      8.612     -4153.    

                      -4.000     0.8905     0.8905      9.497      8.858    
                      -9395.     -4.000     0.3284     0.8905      9.415    
                       9.097     -9678.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5728.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       69
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       70
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      180     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -2276.94       2276.94       5990.60       8267.54    
   2  0.384023     -0.957054      -1536.69       1536.69       5996.15       7532.83    
   3  0.672379     -0.396933      -637.332       637.332       6104.52       6741.85    
   4  0.204591      -1.58674      -2547.74       2547.74       6093.62       8641.36    
   5  0.145151      -1.92998      -3098.85       3098.85       6959.75       10058.6    
   6  0.235757      -1.44495      -2320.08       2320.08       7603.86       9923.94    
   7  0.882595     -0.124889      -200.527       200.527       7593.84       7794.36    
   8  0.215562      -1.53451      -2463.87       2463.87       7293.57       9757.43    
   9  0.248905      -1.39068      -2232.94       2232.94       7512.56       9745.50    
  10  0.695481     -0.363152      -583.092       583.092       7920.16       8503.25    
  11  0.515786     -0.662063      -1063.04       1063.04       8533.89       9596.93    
  12  0.956817     -0.441428E-01  -70.8775       70.8775       8124.44       8195.32    
  13  0.256477      -1.36072      -2184.82       2184.82       9020.91       11205.7    
  14  0.870409     -0.138792      -222.850       222.850       7709.94       7932.79    
  15  0.296335      -1.21627      -1952.89       1952.89       8905.23       10858.1    
  16  0.563087     -0.574322      -922.155       922.155       9012.53       9934.69    
  17  0.860973     -0.149692      -240.352       240.352       8288.68       8529.03    
  18  0.336353      -1.08959      -1749.50       1749.50       8867.37       10616.9    
  19  0.432238     -0.838780      -1346.78       1346.78       9680.84       11027.6    
  20  0.411587     -0.887734      -1425.38       1425.38       9749.08       11174.5    
  21  0.685679     -0.377346      -605.882       605.882       9824.70       10430.6    
  22  0.178038E-01  -4.02835      -6468.08       6468.08       10025.9       16494.0    
  23  0.330516      -1.10710      -1777.61       1777.61       9374.39       11152.0    
  24  0.987115     -0.129685E-01  -20.8227       20.8227       8203.20       8224.02    
  25  0.702947     -0.352474      -565.947       565.947       10157.0       10723.0    
  26  0.159040      -1.83860      -2952.13       2952.13       8603.77       11555.9    
  27  0.329714      -1.10953      -1781.51       1781.51       9565.36       11346.9    
  28  0.542452     -0.611656      -982.101       982.101       10584.0       11566.1    
  29  0.484074     -0.725518      -1164.92       1164.92       9645.91       10810.8    
  30  0.574330     -0.554551      -890.410       890.410       10728.0       11618.4    
  31  0.987944     -0.121288E-01  -19.4746       19.4746       9582.37       9601.84    
  32  0.565195E-01  -2.87317      -4613.28       4613.28       10888.5       15501.8    
  33  0.662626     -0.411545      -660.794       660.794       9725.14       10385.9    
  34  0.462195     -0.771769      -1239.18       1239.18       10297.8       11537.0    
  35  0.413957     -0.881994      -1416.17       1416.17       10723.2       12139.3    
  36  0.627825     -0.465493      -747.416       747.416       10743.7       11491.1    
  37  0.373783E-01  -3.28667      -5277.21       5277.21       9415.80       14693.0    
  38  0.318481      -1.14419      -1837.16       1837.16       10934.3       12771.5    
  39  0.193037      -1.64487      -2641.08       2641.08       10940.5       13581.6    
  40  0.246573      -1.40010      -2248.06       2248.06       10474.0       12722.0    
  41  0.913643     -0.903152E-01  -145.014       145.014       9218.69       9363.70    
  42  0.593287     -0.522077      -838.268       838.268       10689.6       11527.9    
  43  0.323913      -1.12728      -1810.01       1810.01       8382.14       10192.1    
  44  0.270579E-01  -3.60978      -5796.01       5796.01       10936.3       16732.3    
  45  0.684823     -0.378595      -607.888       607.888       10150.3       10758.2    
  46  0.279340      -1.27532      -2047.71       2047.71       10208.4       12256.1    
  47  0.285511      -1.25348      -2012.63       2012.63       10670.0       12682.6    
  48  0.361874      -1.01646      -1632.07       1632.07       10881.4       12513.5    
  49  0.779291     -0.249370      -400.400       400.400       10373.9       10774.3    
  50  0.590933     -0.526053      -844.653       844.653       10751.5       11596.1    
  51  0.493821E-01  -3.00817      -4830.04       4830.04       10683.4       15513.5    
  52  0.736348     -0.306053      -491.411       491.411       9962.25       10453.7    
  53  0.300670      -1.20174      -1929.56       1929.56       9599.81       11529.4    
  54  0.329072      -1.11148      -1784.63       1784.63       10526.7       12311.4    
  55  0.238483      -1.43346      -2301.62       2301.62       10673.5       12975.1    
  56  0.296796      -1.21471      -1950.39       1950.39       8552.41       10502.8    
  57  0.878745     -0.129261      -207.547       207.547       10596.7       10804.3    
  58  0.493874     -0.705475      -1132.74       1132.74       10933.5       12066.2    
  59  0.112522      -2.18461      -3507.70       3507.70       8747.78       12255.5    
  60  0.642649     -0.442156      -709.944       709.944       8424.04       9133.98    
  61  0.688378     -0.373417      -599.575       599.575       10702.9       11302.5    
  62  0.879214     -0.128727      -206.690       206.690       10772.0       10978.7    
  63  0.621151E-01  -2.77877      -4461.70       4461.70       10625.7       15087.4    
  64  0.270748      -1.30657      -2097.88       2097.88       5728.33       7826.20    
loop,thermsimp(1:2)       70   2276.94       1536.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       6946.95          0.89          1.10         23.07          0.29          0.04         25.39
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183       5366.21          0.90          1.08         23.06          0.23          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5366.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       70
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       71
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      182     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -337.737       337.737       6104.52       6442.25    
   2  0.601567     -0.508218      -816.016       816.016       5996.15       6812.16    
   3  0.190401      -1.65862      -2663.15       2663.15       7593.84       10257.0    
   4  0.827263     -0.189632      -304.481       304.481       5728.33       6032.81    
   5  0.581677     -0.541840      -870.001       870.001       7709.94       8579.94    
   6  0.680336     -0.385169      -618.443       618.443       8124.44       8742.88    
   7  0.641383     -0.444128      -713.111       713.111       8203.20       8916.31    
   8  0.593931     -0.520992      -836.527       836.527       5990.60       6827.13    
   9  0.326400      -1.11963      -1797.73       1797.73       7920.16       9717.89    
  10  0.964323     -0.363286E-01  -58.3307       58.3307       8288.68       8347.01    
  11  0.481751     -0.730328      -1172.65       1172.65       6093.62       7266.26    
  12  0.230624E-01  -3.76955      -6052.55       6052.55       8424.04       14476.6    
  13  0.214859      -1.53777      -2469.12       2469.12       9218.69       11687.8    
  14  0.325804      -1.12146      -1800.66       1800.66       8533.89       10334.6    
  15  0.668745     -0.402353      -646.035       646.035       9582.37       10228.4    
  16  0.803263     -0.219073      -351.752       351.752       7512.56       7864.31    
  17  0.465531     -0.764577      -1227.64       1227.64       7293.57       8521.20    
  18  0.589796     -0.527978      -847.744       847.744       7603.86       8451.60    
  19  0.783335     -0.244195      -392.090       392.090       9012.53       9404.62    
  20  0.937099     -0.649659E-01  -104.312       104.312       6959.75       7064.06    
  21  0.504081     -0.685019      -1099.89       1099.89       8382.14       9482.03    
  22  0.368431E-01  -3.30109      -5300.36       5300.36       9725.14       15025.5    
  23  0.462712     -0.770651      -1237.39       1237.39       9824.70       11062.1    
  24  0.172447      -1.75767      -2822.18       2822.18       9962.25       12784.4    
  25  0.361979      -1.01617      -1631.61       1631.61       8552.41       10184.0    
  26  0.616189     -0.484202      -777.455       777.455       8867.37       9644.82    
  27  0.495582     -0.702023      -1127.20       1127.20       10157.0       11284.2    
  28  0.492859     -0.707532      -1136.04       1136.04       10150.3       11286.3    
  29  0.189027      -1.66586      -2674.78       2674.78       10373.9       13048.7    
  30  0.336237      -1.08994      -1750.05       1750.05       10596.7       12346.8    
  31  0.997382     -0.262184E-02  -4.20973       4.20973       9645.91       9650.12    
  32  0.629287     -0.463168      -743.681       743.681       8905.23       9648.91    
  33  0.226178      -1.48644      -2386.68       2386.68       10772.0       13158.7    
  34  0.522315     -0.649483      -1042.84       1042.84       9680.84       10723.7    
  35  0.238835E-02  -6.03715      -9693.51       9693.51       9374.39       19067.9    
  36  0.123092E-01  -4.39741      -7060.67       7060.67       9749.08       16809.7    
  37  0.488141     -0.717152      -1151.49       1151.49       9020.91       10172.4    
  38  0.925188     -0.777584E-01  -124.852       124.852       10702.9       10827.8    
  39  0.676413     -0.390952      -627.728       627.728       9565.36       10193.1    
  40  0.638827     -0.448121      -719.523       719.523       10743.7       11463.2    
  41  0.789998     -0.235725      -378.490       378.490       10689.6       11068.1    
  42  0.453703E-01  -3.09290      -4966.09       4966.09       9599.81       14565.9    
  43  0.866893     -0.142840      -229.350       229.350       10297.8       10527.1    
  44  0.122493E-01  -4.40228      -7068.49       7068.49       8603.77       15672.3    
  45  0.172311      -1.75846      -2823.45       2823.45       10584.0       13407.5    
  46  0.899580     -0.105827      -169.920       169.920       10751.5       10921.4    
  47  0.857845     -0.153332      -246.196       246.196       10728.0       10974.2    
  48  0.176813      -1.73266      -2782.03       2782.03       10933.5       13715.5    
  49  0.795271E-01  -2.53166      -4064.93       4064.93       10723.2       14788.1    
  50  0.461368     -0.773559      -1242.06       1242.06       8747.78       9989.84    
  51  0.727625     -0.317970      -510.546       510.546       10208.4       10719.0    
  52  0.106879      -2.23606      -3590.31       3590.31       10526.7       14117.0    
  53  0.169411      -1.77543      -2850.70       2850.70       10881.4       13732.1    
  54  0.150923      -1.89099      -3036.25       3036.25       10670.0       13706.2    
  55  0.970144     -0.303104E-01  -48.6677       48.6677       10474.0       10522.6    
  56  0.819386     -0.199200      -319.844       319.844       10934.3       11254.2    
  57  0.855509     -0.156059      -250.575       250.575       10673.5       10924.1    
  58  0.248182      -1.39359      -2237.61       2237.61       10940.5       13178.1    
  59  0.632181     -0.458580      -736.315       736.315       9415.80       10152.1    
  60  0.626090     -0.468262      -751.861       751.861       10625.7       11377.6    
  61  0.122722      -2.09783      -3368.36       3368.36       10888.5       14256.9    
  62  0.656077     -0.421477      -676.741       676.741       10683.4       11360.2    
  63  0.811645     -0.208692      -335.085       335.085       10025.9       10361.0    
  64  0.241419E-05  -12.9341      -20767.6       20767.6       5366.21       26133.8    
loop,thermsimp(1:2)       71   337.737       816.016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184      15402.54          0.88          1.12         23.02          0.32          0.04         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  15402.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       71
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       72
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      183     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -222.996       222.996       5728.33       5951.32    
   2  0.470451     -0.754063      -1210.76       1210.76       6104.52       7315.27    
   3  0.615627     -0.485114      -778.920       778.920       5996.15       6775.07    
   4  0.291899      -1.23135      -1977.10       1977.10       5990.60       7967.71    
   5  0.584822     -0.536448      -861.344       861.344       6959.75       7821.09    
   6  0.681731     -0.383120      -615.154       615.154       6093.62       6708.77    
   7  0.680149     -0.385444      -618.885       618.885       7512.56       8131.44    
   8  0.560478     -0.578966      -929.612       929.612       8288.68       9218.29    
   9  0.392299     -0.935730      -1502.45       1502.45       7603.86       9106.30    
  10  0.586793     -0.533083      -855.940       855.940       7293.57       8149.51    
  11  0.461418     -0.773452      -1241.89       1241.89       7709.94       8951.82    
  12  0.142886      -1.94571      -3124.12       3124.12       8124.44       11248.6    
  13  0.960325     -0.404831E-01  -65.0014       65.0014       8203.20       8268.20    
  14  0.547176     -0.602984      -968.176       968.176       9012.53       9980.71    
  15  0.817596     -0.201386      -323.355       323.355       8382.14       8705.49    
  16  0.184065      -1.69247      -2717.49       2717.49       8867.37       11584.9    
  17  0.763954     -0.269247      -432.315       432.315       8905.23       9337.55    
  18  0.740640     -0.300240      -482.078       482.078       9645.91       10128.0    
  19  0.257299      -1.35751      -2179.68       2179.68       7920.16       10099.8    
  20  0.274950      -1.29117      -2073.15       2073.15       8747.78       10820.9    
  21  0.850599     -0.161814      -259.816       259.816       9415.80       9675.61    
  22  0.265651      -1.32557      -2128.39       2128.39       9020.91       11149.3    
  23  0.388810     -0.944665      -1516.79       1516.79       8552.41       10069.2    
  24  0.921262     -0.820106E-01  -131.680       131.680       9565.36       9697.04    
  25  0.622168     -0.474545      -761.950       761.950       9582.37       10344.3    
  26  0.831499     -0.184526      -296.282       296.282       7593.84       7890.12    
  27  0.777776     -0.251317      -403.525       403.525       8533.89       8937.42    
  28  0.519638     -0.654624      -1051.09       1051.09       10025.9       11077.0    
  29  0.343480      -1.06863      -1715.83       1715.83       10474.0       12189.8    
  30  0.379182     -0.969738      -1557.05       1557.05       10297.8       11854.8    
  31  0.509964     -0.673415      -1081.26       1081.26       10208.4       11289.7    
  32  0.457294E-01  -3.08501      -4953.43       4953.43       9680.84       14634.3    
  33  0.952238     -0.489400E-01  -78.5801       78.5801       10702.9       10781.5    
  34  0.198116      -1.61890      -2599.38       2599.38       10751.5       13350.8    
  35  0.863922     -0.146273      -234.862       234.862       10673.5       10908.4    
  36  0.765944     -0.266646      -428.138       428.138       10728.0       11156.2    
  37  0.849389     -0.163238      -262.102       262.102       9824.70       10086.8    
  38  0.488339     -0.716745      -1150.84       1150.84       10689.6       11840.5    
  39  0.969632     -0.308388E-01  -49.5161       49.5161       10934.3       10983.8    
  40  0.971690     -0.287184E-01  -46.1114       46.1114       10157.0       10203.2    
  41  0.690522     -0.370307      -594.581       594.581       10150.3       10744.9    
  42  0.266028      -1.32415      -2126.12       2126.12       10683.4       12809.6    
  43  0.581296     -0.542495      -871.053       871.053       10625.7       11496.8    
  44  0.636654     -0.451529      -724.994       724.994       10743.7       11468.6    
  45  0.947680     -0.537383E-01  -86.2845       86.2845       9218.69       9304.97    
  46  0.792806     -0.232176      -372.792       372.792       10596.7       10969.5    
  47  0.420588     -0.866101      -1390.65       1390.65       9962.25       11352.9    
  48  0.780043     -0.248407      -398.852       398.852       10373.9       10772.7    
  49  0.834700E-01  -2.48327      -3987.24       3987.24       10772.0       14759.2    
  50  0.707823     -0.345562      -554.849       554.849       10940.5       11495.4    
  51  0.836500     -0.178529      -286.654       286.654       10584.0       10870.7    
  52  0.111614      -2.19271      -3520.70       3520.70       10670.0       14190.7    
  53  0.690314     -0.370608      -595.064       595.064       10933.5       11528.5    
  54  0.200139      -1.60874      -2583.07       2583.07       10881.4       13464.5    
  55  0.182543E-01  -4.00336      -6427.96       6427.96       10526.7       16954.7    
  56  0.248611      -1.39187      -2234.84       2234.84       10888.5       13123.3    
  57  0.951106     -0.501293E-01  -80.4897       80.4897       8424.04       8504.53    
  58  0.576942     -0.550013      -883.125       883.125       9599.81       10482.9    
  59  0.335384      -1.09248      -1754.13       1754.13       10723.2       12477.3    
  60  0.137719E-01  -4.28512      -6880.37       6880.37       9725.14       16605.5    
  61  0.839758     -0.174642      -280.413       280.413       8603.77       8884.18    
  62  0.324640      -1.12504      -1806.41       1806.41       9749.08       11555.5    
  63  0.758550     -0.276346      -443.713       443.713       9374.39       9818.10    
  64  0.704737     -0.349931      -561.864       561.864       15402.5       15964.4    
loop,thermsimp(1:2)       72   222.996       1210.76    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       7562.90          0.89          1.09         23.09          0.30          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7562.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       72
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       73
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      184     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -479.330       479.330       5728.33       6207.66    
   2  0.823468     -0.194230      -311.864       311.864       6093.62       6405.48    
   3  0.352913      -1.04153      -1672.33       1672.33       5996.15       7668.48    
   4  0.268511      -1.31486      -2111.20       2111.20       6104.52       8215.71    
   5  0.137541      -1.98383      -3185.33       3185.33       6959.75       10145.1    
   6  0.953738     -0.473661E-01  -76.0531       76.0531       7593.84       7669.89    
   7  0.366602      -1.00348      -1611.23       1611.23       5990.60       7601.83    
   8  0.861530     -0.149046      -239.314       239.314       7512.56       7751.87    
   9  0.190086      -1.66028      -2665.81       2665.81       7293.57       9959.38    
  10  0.931621     -0.708293E-01  -113.726       113.726       8203.20       8316.92    
  11  0.135562      -1.99833      -3208.60       3208.60       8424.04       11632.6    
  12  0.577052     -0.549824      -882.820       882.820       8382.14       9264.96    
  13  0.937511     -0.645266E-01  -103.607       103.607       8603.77       8707.38    
  14  0.836727     -0.178258      -286.218       286.218       8533.89       8820.11    
  15  0.124731      -2.08159      -3342.29       3342.29       7709.94       11052.2    
  16  0.830758     -0.185417      -297.714       297.714       7603.86       7901.57    
  17  0.925849     -0.770442E-01  -123.705       123.705       8288.68       8412.39    
  18  0.945668     -0.558633E-01  -89.6965       89.6965       9218.69       9308.39    
  19  0.700762     -0.355587      -570.945       570.945       8905.23       9476.18    
  20  0.585168E-01  -2.83844      -4557.52       4557.52       9415.80       13973.3    
  21  0.241985      -1.41888      -2278.21       2278.21       9565.36       11843.6    
  22  0.426115     -0.853047      -1369.69       1369.69       9374.39       10744.1    
  23  0.730656     -0.313813      -503.871       503.871       9012.53       9516.40    
  24  0.227460      -1.48078      -2377.61       2377.61       8552.41       10930.0    
  25  0.824070     -0.193500      -310.691       310.691       9824.70       10135.4    
  26  0.912829     -0.912064E-01  -146.445       146.445       7920.16       8066.60    
  27  0.130860      -2.03363      -3265.28       3265.28       9645.91       12911.2    
  28  0.126999      -2.06358      -3313.36       3313.36       10157.0       13470.4    
  29  0.394828E-01  -3.23189      -5189.26       5189.26       9582.37       14771.6    
  30  0.927793     -0.749466E-01  -120.337       120.337       9599.81       9720.15    
  31  0.161762      -1.82163      -2924.89       2924.89       10150.3       13075.2    
  32  0.510374     -0.672611      -1079.97       1079.97       10373.9       11453.9    
  33  0.930607     -0.719186E-01  -115.476       115.476       10702.9       10818.4    
  34  0.825283E-01  -2.49461      -4005.46       4005.46       8747.78       12753.2    
  35  0.569143     -0.563624      -904.978       904.978       10584.0       11489.0    
  36  0.732951     -0.310676      -498.835       498.835       10673.5       11172.4    
  37  0.554950     -0.588877      -945.526       945.526       10596.7       11542.3    
  38  0.614368     -0.487160      -782.205       782.205       10934.3       11716.5    
  39  0.127889      -2.05659      -3302.15       3302.15       10025.9       13328.1    
  40  0.510007     -0.673330      -1081.13       1081.13       9020.91       10102.0    
  41  0.206107      -1.57936      -2535.89       2535.89       10728.0       13263.9    
  42  0.812962E-01  -2.50966      -4029.61       4029.61       8124.44       12154.0    
  43  0.711913     -0.339799      -545.596       545.596       10208.4       10754.0    
  44  0.649899     -0.430939      -691.934       691.934       9962.25       10654.2    
  45  0.102708      -2.27587      -3654.23       3654.23       10743.7       14397.9    
  46  0.152702      -1.87927      -3017.43       3017.43       10940.5       13958.0    
  47  0.827734     -0.189064      -303.569       303.569       10625.7       10929.3    
  48  0.558329     -0.582808      -935.780       935.780       10933.5       11869.2    
  49  0.174746      -1.74442      -2800.92       2800.92       9749.08       12550.0    
  50  0.107247      -2.23262      -3584.80       3584.80       8867.37       12452.2    
  51  0.988891     -0.111711E-01  -17.9367       17.9367       10689.6       10707.6    
  52  0.388651     -0.945075      -1517.45       1517.45       10297.8       11815.2    
  53  0.580190     -0.544399      -874.110       874.110       10474.0       11348.1    
  54  0.519409E-01  -2.95765      -4748.92       4748.92       10723.2       15472.1    
  55  0.418368     -0.871393      -1399.15       1399.15       10683.4       12082.6    
  56  0.435950     -0.830228      -1333.05       1333.05       10888.5       12221.5    
  57  0.226091      -1.48682      -2387.30       2387.30       10751.5       13138.8    
  58  0.371316     -0.990702      -1590.71       1590.71       10881.4       12472.1    
  59  0.113770      -2.17358      -3489.99       3489.99       10670.0       14159.9    
  60  0.335886      -1.09098      -1751.73       1751.73       9680.84       11432.6    
  61  0.733883     -0.309406      -496.795       496.795       10772.0       11268.8    
  62  0.127704      -2.05804      -3304.48       3304.48       15402.5       18707.0    
  63  0.205687      -1.58140      -2539.16       2539.16       9725.14       12264.3    
  64  0.315213      -1.15451      -1853.72       1853.72       7562.90       9416.63    
loop,thermsimp(1:2)       73   479.330       311.864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186       5292.23          0.89          1.08         23.05          0.56          0.04         25.62
Just calling func    0   0         25.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    187       9317.43          0.89          1.08         23.02          0.26          0.04         25.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5292.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       73
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       74
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      186     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -287.691       287.691       5728.33       6016.02    
   2  0.439366     -0.822423      -1320.52       1320.52       6093.62       7414.14    
   3  0.603094     -0.505682      -811.944       811.944       5990.60       6802.55    
   4  0.695854E-01  -2.66520      -4279.36       4279.36       5996.15       10275.5    
   5  0.273021      -1.29821      -2084.46       2084.46       7593.84       9678.30    
   6  0.418319     -0.871511      -1399.33       1399.33       7512.56       8911.89    
   7  0.688437     -0.373331      -599.436       599.436       7603.86       8203.29    
   8  0.400930     -0.913969      -1467.51       1467.51       7920.16       9387.67    
   9  0.569492     -0.563010      -903.992       903.992       6104.52       7008.51    
  10  0.812441     -0.207712      -333.511       333.511       8203.20       8536.71    
  11  0.222094      -1.50465      -2415.93       2415.93       8288.68       10704.6    
  12  0.695761     -0.362749      -582.446       582.446       8603.77       9186.22    
  13  0.909536E-01  -2.39741      -3849.38       3849.38       8533.89       12383.3    
  14  0.297191      -1.21338      -1948.25       1948.25       8382.14       10330.4    
  15  0.806729     -0.214767      -344.839       344.839       9218.69       9563.53    
  16  0.407021     -0.898891      -1443.30       1443.30       7562.90       9006.20    
  17  0.520426     -0.653107      -1048.66       1048.66       8905.23       9953.89    
  18  0.826852     -0.190129      -305.279       305.279       9012.53       9317.81    
  19  0.729268     -0.315714      -506.924       506.924       9599.81       10106.7    
  20  0.344086      -1.06687      -1713.00       1713.00       7293.57       9006.57    
  21  0.280849      -1.26994      -2039.07       2039.07       9020.91       11060.0    
  22  0.301244E-01  -3.50242      -5623.63       5623.63       9824.70       15448.3    
  23  0.503253     -0.686663      -1102.53       1102.53       6959.75       8062.28    
  24  0.549007     -0.599644      -962.813       962.813       9962.25       10925.1    
  25  0.814230     -0.205513      -329.980       329.980       10689.6       11019.6    
  26  0.641489     -0.443963      -712.846       712.846       9374.39       10087.2    
  27  0.248696      -1.39152      -2234.29       2234.29       10208.4       12442.7    
  28  0.684472     -0.379107      -608.710       608.710       10702.9       11311.6    
  29  0.815126     -0.204413      -328.213       328.213       10625.7       10953.9    
  30  0.388210     -0.946208      -1519.27       1519.27       8552.41       10071.7    
  31  0.670538     -0.399675      -641.735       641.735       7709.94       8351.67    
  32  0.851104     -0.161221      -258.863       258.863       10673.5       10932.4    
  33  0.381078     -0.964752      -1549.05       1549.05       10772.0       12321.0    
  34  0.776256     -0.253273      -406.666       406.666       10474.0       10880.6    
  35  0.168040      -1.78355      -2863.74       2863.74       9680.84       12544.6    
  36  0.229069      -1.47373      -2366.28       2366.28       10373.9       12740.2    
  37  0.917563     -0.860337E-01  -138.139       138.139       10584.0       10722.1    
  38  0.161815      -1.82130      -2924.36       2924.36       10596.7       13521.1    
  39  0.355170      -1.03516      -1662.09       1662.09       8424.04       10086.1    
  40  0.221709      -1.50639      -2418.72       2418.72       10934.3       13353.0    
  41  0.424436     -0.856993      -1376.02       1376.02       10297.8       11673.8    
  42  0.337698      -1.08560      -1743.09       1743.09       9565.36       11308.5    
  43  0.574481     -0.554289      -889.990       889.990       10933.5       11823.5    
  44  0.614536     -0.486888      -781.767       781.767       10683.4       11465.2    
  45  0.345602      -1.06247      -1705.94       1705.94       8124.44       9830.38    
  46  0.330006      -1.10864      -1780.09       1780.09       10888.5       12668.6    
  47  0.934389     -0.678626E-01  -108.963       108.963       9725.14       9834.11    
  48  0.884466     -0.122771      -197.127       197.127       8867.37       9064.49    
  49  0.928979     -0.736686E-01  -118.285       118.285       10881.4       10999.7    
  50  0.788461     -0.237672      -381.616       381.616       9749.08       10130.7    
  51  0.963462     -0.372219E-01  -59.7650       59.7650       8747.78       8807.55    
  52  0.630201     -0.461716      -741.350       741.350       9645.91       10387.3    
  53  0.797085     -0.226794      -364.150       364.150       10150.3       10514.4    
  54  0.389249     -0.943537      -1514.98       1514.98       10751.5       12266.4    
  55  0.660522     -0.414724      -665.899       665.899       10728.0       11393.9    
  56  0.520011     -0.653905      -1049.94       1049.94       10025.9       11075.9    
  57  0.270094      -1.30899      -2101.76       2101.76       10157.0       12258.8    
  58  0.218485      -1.52104      -2442.24       2442.24       10940.5       13382.8    
  59  0.391194     -0.938551      -1506.98       1506.98       9415.80       10922.8    
  60  0.740024     -0.301073      -483.415       483.415       10670.0       11153.4    
  61  0.184403      -1.69063      -2714.55       2714.55       10743.7       13458.2    
  62  0.309007E-01  -3.47698      -5582.78       5582.78       9582.37       15165.1    
  63  0.916682     -0.869952E-01  -139.683       139.683       10723.2       10862.9    
  64  0.268894      -1.31344      -2108.91       2108.91       5292.23       7401.15    
loop,thermsimp(1:2)       74   287.691       1320.52    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       7633.52          0.89          1.09         23.06          0.29          0.05         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189       6713.21          0.90          1.08         22.91          0.41          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   6713.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       74
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       75
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      188     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -1575.82       1575.82       5728.33       7304.14    
   2  0.269095      -1.31269      -2107.71       2107.71       5990.60       8098.31    
   3  0.301960      -1.19746      -1922.69       1922.69       6104.52       8027.21    
   4  0.927593     -0.751619E-01  -120.683       120.683       5292.23       5412.92    
   5  0.783450     -0.244048      -391.853       391.853       6093.62       6485.47    
   6  0.716705     -0.333091      -534.825       534.825       6959.75       7494.57    
   7  0.728578     -0.316661      -508.444       508.444       7603.86       8112.30    
   8  0.752541     -0.284300      -456.483       456.483       7709.94       8166.42    
   9  0.111710      -2.19185      -3519.32       3519.32       8203.20       11722.5    
  10  0.202752E-01  -3.89836      -6259.37       6259.37       8747.78       15007.1    
  11  0.967738     -0.327937E-01  -52.6549       52.6549       7512.56       7565.21    
  12  0.530869     -0.633240      -1016.76       1016.76       7562.90       8579.66    
  13  0.752699E-01  -2.58668      -4153.27       4153.27       7293.57       11446.8    
  14  0.658334     -0.418043      -671.228       671.228       8867.37       9538.59    
  15  0.383542     -0.958305      -1538.69       1538.69       8603.77       10142.5    
  16  0.280803      -1.27010      -2039.33       2039.33       9012.53       11051.9    
  17  0.976909     -0.233616E-01  -37.5103       37.5103       7920.16       7957.67    
  18  0.611898     -0.491189      -788.674       788.674       9218.69       10007.4    
  19  0.860469     -0.150278      -241.293       241.293       7593.84       7835.13    
  20  0.375446     -0.979641      -1572.95       1572.95       8124.44       9697.39    
  21  0.964573     -0.360702E-01  -57.9158       57.9158       9725.14       9783.06    
  22  0.865663     -0.144259      -231.628       231.628       8905.23       9136.86    
  23  0.498009     -0.697137      -1119.35       1119.35       8552.41       9671.76    
  24  0.732547     -0.311228      -499.721       499.721       8424.04       8923.76    
  25  0.293766      -1.22497      -1966.86       1966.86       9374.39       11341.3    
  26  0.805097     -0.216793      -348.092       348.092       9599.81       9947.90    
  27  0.236791      -1.44058      -2313.05       2313.05       9749.08       12062.1    
  28  0.759809     -0.274688      -441.051       441.051       5996.15       6437.20    
  29  0.279804      -1.27367      -2045.05       2045.05       8382.14       10427.2    
  30  0.862550     -0.147862      -237.414       237.414       9645.91       9883.33    
  31  0.784800     -0.242327      -389.090       389.090       10150.3       10539.4    
  32  0.231425      -1.46350      -2349.86       2349.86       8288.68       10638.5    
  33  0.839725     -0.174681      -280.475       280.475       10584.0       10864.5    
  34  0.204862      -1.58542      -2545.61       2545.61       10723.2       13268.8    
  35  0.741170     -0.299525      -480.930       480.930       10474.0       10954.9    
  36  0.838703     -0.175898      -282.429       282.429       9415.80       9698.23    
  37  0.287711      -1.24580      -2000.30       2000.30       9962.25       11962.6    
  38  0.937479     -0.645611E-01  -103.662       103.662       10673.5       10777.2    
  39  0.188655      -1.66783      -2677.94       2677.94       10625.7       13303.7    
  40  0.818317     -0.200505      -321.940       321.940       10881.4       11203.3    
  41  0.903487     -0.101493      -162.962       162.962       10689.6       10852.6    
  42  0.148828      -1.90496      -3058.69       3058.69       9020.91       12079.6    
  43  0.573616E-01  -2.85838      -4589.53       4589.53       10025.9       14615.5    
  44  0.792726E-01  -2.53486      -4070.08       4070.08       10670.0       14740.0    
  45  0.150401      -1.89445      -3041.81       3041.81       9565.36       12607.2    
  46  0.511444     -0.670518      -1076.61       1076.61       10702.9       11779.5    
  47  0.179810      -1.71585      -2755.05       2755.05       10728.0       13483.1    
  48  0.167282      -1.78808      -2871.01       2871.01       10683.4       13554.4    
  49  0.589016     -0.529302      -849.869       849.869       10297.8       11147.7    
  50  0.974997     -0.253206E-01  -40.6559       40.6559       10933.5       10974.1    
  51  0.750240     -0.287363      -461.401       461.401       10157.0       10618.5    
  52  0.695153     -0.363624      -583.850       583.850       10751.5       11335.3    
  53  0.166976      -1.78991      -2873.95       2873.95       10772.0       13645.9    
  54  0.228686      -1.47540      -2368.97       2368.97       8533.89       10902.9    
  55  0.728220     -0.317152      -509.232       509.232       10208.4       10717.6    
  56  0.321968      -1.13330      -1819.68       1819.68       9680.84       11500.5    
  57  0.494283     -0.704647      -1131.41       1131.41       10888.5       12019.9    
  58  0.398916     -0.919004      -1475.59       1475.59       10373.9       11849.5    
  59  0.130321      -2.03776      -3271.91       3271.91       10934.3       14206.2    
  60  0.131470E-01  -4.33156      -6954.94       6954.94       10940.5       17895.5    
  61  0.868361E-03  -7.04890      -11318.0       11318.0       10743.7       22061.7    
  62  0.572113     -0.558419      -896.622       896.622       10596.7       11493.4    
  63  0.201897      -1.60000      -2569.02       2569.02       9582.37       12151.4    
  64  0.795960     -0.228206      -366.417       366.417       6713.21       7079.63    
loop,thermsimp(1:2)       75   1575.82       2107.71    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190       7510.70          0.89          1.10         23.07          0.23          0.04         25.34
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7510.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       75
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       76
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      189     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -4818.81       4818.81       5292.23       10111.0    
   2  0.604222     -0.503814      -808.945       808.945       5996.15       6805.09    
   3  0.106168      -2.24273      -3601.02       3601.02       6093.62       9694.64    
   4  0.342113      -1.07261      -1722.23       1722.23       6713.21       8435.44    
   5  0.473442     -0.747725      -1200.58       1200.58       5728.33       6928.90    
   6  0.100866E-01  -4.59655      -7380.41       7380.41       6959.75       14340.2    
   7  0.911848     -0.922817E-01  -148.171       148.171       7512.56       7660.73    
   8  0.633547     -0.456421      -732.848       732.848       7593.84       8326.69    
   9  0.729024     -0.316048      -507.460       507.460       7920.16       8427.62    
  10  0.620163     -0.477772      -767.131       767.131       6104.52       6871.65    
  11  0.867018     -0.142695      -229.117       229.117       5990.60       6219.72    
  12  0.969344E-01  -2.33372      -3747.12       3747.12       7603.86       11351.0    
  13  0.358466      -1.02592      -1647.26       1647.26       7709.94       9357.20    
  14  0.953168     -0.479638E-01  -77.0126       77.0126       7562.90       7639.91    
  15  0.684510     -0.379052      -608.621       608.621       8424.04       9032.66    
  16  0.482047     -0.729713      -1171.66       1171.66       8905.23       10076.9    
  17  0.974791     -0.255318E-01  -40.9950       40.9950       8867.37       8908.36    
  18  0.978669     -0.215619E-01  -34.6207       34.6207       8552.41       8587.03    
  19  0.929785     -0.728022E-01  -116.894       116.894       8124.44       8241.33    
  20  0.715020     -0.335444      -538.603       538.603       9415.80       9954.40    
  21  0.598247     -0.513752      -824.902       824.902       9725.14       10550.0    
  22  0.107080      -2.23418      -3587.29       3587.29       9645.91       13233.2    
  23  0.559093     -0.581439      -933.582       933.582       9599.81       10533.4    
  24  0.933094     -0.692491E-01  -111.189       111.189       9218.69       9329.88    
  25  0.470169E-01  -3.05725      -4908.85       4908.85       8603.77       13512.6    
  26  0.166768      -1.79115      -2875.95       2875.95       8382.14       11258.1    
  27  0.331277      -1.10480      -1773.91       1773.91       10150.3       11924.2    
  28  0.961755     -0.389952E-01  -62.6124       62.6124       10157.0       10219.7    
  29  0.464366E-01  -3.06967      -4928.79       4928.79       8288.68       13217.5    
  30  0.966136E-03  -6.94221      -11146.7       11146.7       10208.4       21355.1    
  31  0.941012     -0.607999E-01  -97.6229       97.6229       10673.5       10771.1    
  32  0.201947E-01  -3.90233      -6265.75       6265.75       10689.6       16955.4    
  33  0.679249     -0.386768      -621.011       621.011       10584.0       11205.0    
  34  0.318772      -1.14328      -1835.69       1835.69       8533.89       10369.6    
  35  0.388100     -0.946493      -1519.73       1519.73       10474.0       11993.7    
  36  0.658606     -0.417629      -670.563       670.563       10933.5       11604.0    
  37  0.774362     -0.255715      -410.587       410.587       9012.53       9423.12    
  38  0.704871     -0.349740      -561.557       561.557       10297.8       10859.3    
  39  0.274189      -1.29394      -2077.60       2077.60       10881.4       12959.0    
  40  0.881806     -0.125783      -201.962       201.962       10751.5       10953.4    
  41  0.198448      -1.61723      -2596.69       2596.69       9374.39       11971.1    
  42  0.342590      -1.07122      -1720.00       1720.00       7293.57       9013.56    
  43  0.603787     -0.504534      -810.101       810.101       10596.7       11406.8    
  44  0.667409     -0.404353      -649.246       649.246       9680.84       10330.1    
  45  0.317014      -1.14881      -1844.58       1844.58       8203.20       10047.8    
  46  0.368458     -0.998429      -1603.12       1603.12       10702.9       12306.0    
  47  0.139912      -1.96674      -3157.89       3157.89       10373.9       13531.8    
  48  0.537645     -0.620557      -996.393       996.393       9962.25       10958.6    
  49  0.159021      -1.83872      -2952.33       2952.33       10888.5       13840.8    
  50  0.729011     -0.316067      -507.490       507.490       9749.08       10256.6    
  51  0.802486     -0.220041      -353.308       353.308       9020.91       9374.21    
  52  0.249203      -1.38949      -2231.02       2231.02       9582.37       11813.4    
  53  0.282362      -1.26456      -2030.44       2030.44       9565.36       11595.8    
  54  0.803878     -0.218308      -350.524       350.524       10723.2       11073.7    
  55  0.183401      -1.69608      -2723.29       2723.29       10625.7       13349.0    
  56  0.144999      -1.93103      -3100.54       3100.54       10728.0       13828.6    
  57  0.821026     -0.197200      -316.633       316.633       10683.4       11000.1    
  58  0.391750     -0.937132      -1504.70       1504.70       10772.0       12276.7    
  59  0.605745     -0.501297      -804.903       804.903       10934.3       11739.2    
  60  0.759982E-01  -2.57705      -4137.81       4137.81       10025.9       14163.8    
  61  0.856619     -0.154762      -248.492       248.492       10670.0       10918.4    
  62  0.200085      -1.60901      -2583.50       2583.50       8747.78       11331.3    
  63  0.623969     -0.471654      -757.308       757.308       10940.5       11697.8    
  64  0.668527     -0.402679      -646.559       646.559       7510.70       8157.26    
loop,thermsimp(1:2)       76   4818.81       808.945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       8463.22          0.89          1.10         23.01          0.41          0.05         25.45
Just calling func    0   0         25.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192       7512.14          0.89          1.09         23.03          0.27          0.04         25.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   7512.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1605.64               190
loop is:       76
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1605.64               190
loop is:       77
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    802.821               253

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      191     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -414.447       414.447       5990.60       6405.05    
   2  0.476930     -0.740385      -594.397       594.397       5996.15       6590.54    
   3  0.845382     -0.167966      -134.847       134.847       6104.52       6239.36    
   4  0.397814     -0.921770      -740.016       740.016       5728.33       6468.34    
   5  0.249923      -1.38660      -1113.19       1113.19       7562.90       8676.10    
   6  0.591552     -0.525005      -421.485       421.485       7512.56       7934.04    
   7  0.143111      -1.94414      -1560.79       1560.79       7510.70       9071.49    
   8  0.306099      -1.18385      -950.417       950.417       8124.44       9074.86    
   9  0.441827     -0.816836      -655.773       655.773       7593.84       8249.61    
  10  0.504521     -0.684146      -549.247       549.247       7920.16       8469.41    
  11  0.127660      -2.05839      -1652.52       1652.52       6713.21       8365.72    
  12  0.333524      -1.09804      -881.530       881.530       8552.41       9433.94    
  13  0.130890      -2.03340      -1632.45       1632.45       8867.37       10499.8    
  14  0.307732      -1.17853      -946.145       946.145       7293.57       8239.71    
  15  0.154434E-01  -4.17057      -3348.22       3348.22       8424.04       11772.3    
  16  0.357863      -1.02761      -824.983       824.983       9218.69       10043.7    
  17  0.271898      -1.30233      -1045.54       1045.54       7709.94       8755.47    
  18  0.906228E-01  -2.40105      -1927.61       1927.61       9020.91       10948.5    
  19  0.344142      -1.06670      -856.369       856.369       9012.53       9868.90    
  20  0.392886     -0.934237      -750.025       750.025       6093.62       6843.64    
  21  0.454318     -0.788958      -633.392       633.392       9415.80       10049.2    
  22  0.384129     -0.956778      -768.121       768.121       8203.20       8971.32    
  23  0.354037      -1.03835      -833.612       833.612       8905.23       9738.84    
  24  0.154212      -1.86943      -1500.82       1500.82       5292.23       6793.05    
  25  0.816320     -0.202949      -162.932       162.932       10157.0       10320.0    
  26  0.994970     -0.504291E-02  -4.04855       4.04855       9749.08       9753.13    
  27  0.374719E-01  -3.28416      -2636.60       2636.60       9680.84       12317.4    
  28  0.227113      -1.48231      -1190.03       1190.03       8533.89       9723.92    
  29  0.410587     -0.890167      -714.645       714.645       9599.81       10314.5    
  30  0.104540E-01  -4.56077      -3661.48       3661.48       9725.14       13386.6    
  31  0.994826     -0.518730E-02  -4.16447       4.16447       10673.5       10677.7    
  32  0.738930     -0.302553      -242.896       242.896       10297.8       10540.7    
  33  0.715904     -0.334209      -268.310       268.310       10670.0       10938.3    
  34  0.128324      -2.05320      -1648.35       1648.35       10751.5       12399.8    
  35  0.856095     -0.155374      -124.737       124.737       9962.25       10087.0    
  36  0.423967     -0.858099      -688.900       688.900       10683.4       11372.3    
  37  0.504650     -0.683890      -549.041       549.041       10723.2       11272.2    
  38  0.347036      -1.05833      -849.648       849.648       10584.0       11433.7    
  39  0.906779     -0.978566E-01  -78.5613       78.5613       8382.14       8460.70    
  40  0.616911     -0.483030      -387.787       387.787       8747.78       9135.57    
  41  0.540209     -0.615800      -494.377       494.377       7603.86       8098.23    
  42  0.772932     -0.257564      -206.778       206.778       10596.7       10803.5    
  43  0.544989     -0.606989      -487.304       487.304       9565.36       10052.7    
  44  0.951523     -0.496917E-01  -39.8936       39.8936       10933.5       10973.4    
  45  0.172505      -1.75733      -1410.82       1410.82       10940.5       12351.4    
  46  0.871391     -0.137665      -110.520       110.520       10934.3       11044.8    
  47  0.127604      -2.05882      -1652.86       1652.86       9582.37       11235.2    
  48  0.785934     -0.240882      -193.385       193.385       10150.3       10343.7    
  49  0.815977     -0.203369      -163.269       163.269       9374.39       9537.66    
  50  0.350587      -1.04815      -841.474       841.474       10474.0       11315.4    
  51  0.739645     -0.301584      -242.118       242.118       10772.0       11014.1    
  52  0.996274     -0.373345E-02  -2.99729       2.99729       10702.9       10705.9    
  53  0.303822      -1.19131      -956.412       956.412       10881.4       11837.8    
  54  0.708260     -0.344944      -276.929       276.929       8288.68       8565.61    
  55  0.646268     -0.436541      -350.464       350.464       9645.91       9996.38    
  56  0.696585     -0.361566      -290.273       290.273       10625.7       10916.0    
  57  0.439732     -0.821591      -659.590       659.590       8603.77       9263.36    
  58  0.791452     -0.233886      -187.768       187.768       10373.9       10561.7    
  59  0.202743      -1.59581      -1281.15       1281.15       10728.0       12009.2    
  60  0.547790E-01  -2.90445      -2331.75       2331.75       10888.5       13220.3    
  61  0.663631     -0.410029      -329.180       329.180       10025.9       10355.1    
  62  0.838292     -0.176388      -141.608       141.608       6959.75       7101.36    
  63  0.450238     -0.797979      -640.634       640.634       10689.6       11330.3    
  64  0.209610      -1.56251      -1254.41       1254.41       7512.14       8766.55    
loop,thermsimp(1:2)       77   414.447       594.397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193       7892.17          0.89          1.10         23.02          0.38          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7892.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       77
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       78
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      192     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -48.0679       48.0679       6104.52       6152.58    
   2  0.368209     -0.999105      -802.103       802.103       5990.60       6792.71    
   3  0.508630     -0.676034      -542.734       542.734       5728.33       6271.06    
   4  0.744324     -0.295279      -237.056       237.056       5996.15       6233.20    
   5  0.401586     -0.912333      -732.440       732.440       5292.23       6024.67    
   6  0.712794     -0.338563      -271.806       271.806       6093.62       6365.43    
   7  0.186976      -1.67678      -1346.15       1346.15       6959.75       8305.90    
   8  0.688451     -0.373311      -299.702       299.702       7512.56       7812.26    
   9  0.668652     -0.402492      -323.129       323.129       7603.86       7926.99    
  10  0.656767     -0.420426      -337.527       337.527       7293.57       7631.09    
  11  0.853336     -0.158602      -127.329       127.329       7593.84       7721.17    
  12  0.556440     -0.586195      -470.610       470.610       6713.21       7183.82    
  13  0.258558E-01  -3.65522      -2934.49       2934.49       8382.14       11316.6    
  14  0.121003E-01  -4.41452      -3544.07       3544.07       7920.16       11464.2    
  15  0.150890      -1.89120      -1518.30       1518.30       8288.68       9806.98    
  16  0.820074     -0.198360      -159.248       159.248       7562.90       7722.15    
  17  0.151452      -1.88748      -1515.31       1515.31       7709.94       9225.25    
  18  0.305465      -1.18592      -952.083       952.083       7512.14       8464.22    
  19  0.533202     -0.628854      -504.857       504.857       8203.20       8708.06    
  20  0.143416      -1.94201      -1559.08       1559.08       7510.70       9069.78    
  21  0.687081     -0.375303      -301.301       301.301       8124.44       8425.74    
  22  0.546247     -0.604685      -485.453       485.453       8747.78       9233.23    
  23  0.356987      -1.03006      -826.951       826.951       8603.77       9430.72    
  24  0.545718     -0.605653      -486.231       486.231       8552.41       9038.64    
  25  0.789688     -0.236117      -189.560       189.560       9374.39       9563.95    
  26  0.752086     -0.284904      -228.727       228.727       8533.89       8762.62    
  27  0.388816     -0.944650      -758.384       758.384       8905.23       9663.62    
  28  0.988428     -0.116395E-01  -9.34447       9.34447       9749.08       9758.42    
  29  0.124991      -2.07952      -1669.48       1669.48       9012.53       10682.0    
  30  0.568214     -0.565257      -453.800       453.800       9645.91       10099.7    
  31  0.551032     -0.595962      -478.451       478.451       9218.69       9697.14    
  32  0.423622     -0.858913      -689.554       689.554       9415.80       10105.4    
  33  0.647554     -0.434553      -348.868       348.868       9565.36       9914.23    
  34  0.686255     -0.376506      -302.267       302.267       9962.25       10264.5    
  35  0.548072     -0.601349      -482.776       482.776       9599.81       10082.6    
  36  0.880777     -0.126951      -101.919       101.919       10157.0       10259.0    
  37  0.894918     -0.111023      -89.1314       89.1314       10150.3       10239.4    
  38  0.241077      -1.42264      -1142.12       1142.12       10025.9       11168.1    
  39  0.546141     -0.604877      -485.608       485.608       8867.37       9352.97    
  40  0.266590      -1.32204      -1061.36       1061.36       10297.8       11359.2    
  41  0.575085     -0.553238      -444.151       444.151       10373.9       10818.0    
  42  0.907139     -0.974596E-01  -78.2426       78.2426       10673.5       10751.8    
  43  0.469109     -0.756920      -607.671       607.671       10702.9       11310.6    
  44  0.738008     -0.303801      -243.898       243.898       10596.7       10840.6    
  45  0.557598     -0.584116      -468.941       468.941       10625.7       11094.7    
  46  0.305677      -1.18523      -951.524       951.524       10670.0       11621.5    
  47  0.392927     -0.934131      -749.940       749.940       9020.91       9770.85    
  48  0.121997      -2.10376      -1688.94       1688.94       10933.5       12622.4    
  49  0.712082     -0.339563      -272.608       272.608       10772.0       11044.6    
  50  0.342132      -1.07256      -861.072       861.072       10934.3       11795.4    
  51  0.288307      -1.24373      -998.492       998.492       9582.37       10580.9    
  52  0.554777     -0.589188      -473.013       473.013       10723.2       11196.2    
  53  0.116597E-01  -4.45161      -3573.85       3573.85       10474.0       14047.8    
  54  0.844148     -0.169427      -136.020       136.020       10689.6       10825.7    
  55  0.910896     -0.933267E-01  -74.9247       74.9247       10683.4       10758.4    
  56  0.257100      -1.35829      -1090.46       1090.46       10584.0       11674.5    
  57  0.340199      -1.07823      -865.622       865.622       8424.04       9289.66    
  58  0.656010     -0.421580      -338.453       338.453       10881.4       11219.9    
  59  0.894739     -0.111224      -89.2927       89.2927       10728.0       10817.3    
  60  0.226933      -1.48310      -1190.66       1190.66       9680.84       10871.5    
  61  0.478182     -0.737763      -592.292       592.292       10940.5       11532.8    
  62  0.361863      -1.01649      -816.060       816.060       10751.5       11567.5    
  63  0.415757     -0.877654      -704.599       704.599       10888.5       11593.1    
  64  0.540919     -0.614487      -493.323       493.323       7892.17       8385.49    
loop,thermsimp(1:2)       78   48.0679       802.103    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       8968.45          0.88          1.10         23.09          0.55          0.04         25.66
Just calling func    0   0         25.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8968.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       78
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       79
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      193     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -2124.85       2124.85       5292.23       7417.08    
   2  0.952063     -0.491245E-01  -39.4381       39.4381       6104.52       6143.95    
   3  0.207928      -1.57057      -1260.88       1260.88       5996.15       7257.03    
   4  0.564009     -0.572686      -459.764       459.764       5728.33       6188.09    
   5  0.461636     -0.772979      -620.563       620.563       6093.62       6714.18    
   6  0.683812     -0.380072      -305.129       305.129       5990.60       6295.73    
   7  0.153569      -1.87360      -1504.17       1504.17       6713.21       8217.37    
   8  0.605650     -0.501453      -402.577       402.577       7293.57       7696.14    
   9  0.257296      -1.35753      -1089.85       1089.85       7593.84       8683.69    
  10  0.517987     -0.657805      -528.099       528.099       7562.90       8091.00    
  11  0.571129     -0.560140      -449.693       449.693       7512.56       7962.25    
  12  0.735134     -0.307703      -247.030       247.030       7603.86       7850.89    
  13  0.766340E-02  -4.87130      -3910.78       3910.78       6959.75       10870.5    
  14  0.435932     -0.830269      -666.558       666.558       7892.17       8558.72    
  15  0.513945     -0.665639      -534.389       534.389       8124.44       8658.83    
  16  0.447046     -0.805095      -646.347       646.347       7512.14       8158.49    
  17  0.244813      -1.40726      -1129.78       1129.78       8203.20       9332.97    
  18  0.183933      -1.69318      -1359.32       1359.32       8533.89       9893.21    
  19  0.413164     -0.883910      -709.622       709.622       8552.41       9262.03    
  20  0.869613     -0.139707      -112.160       112.160       7510.70       7622.86    
  21  0.853260     -0.158691      -127.400       127.400       7709.94       7837.34    
  22  0.138067      -1.98001      -1589.60       1589.60       8747.78       10337.4    
  23  0.940528     -0.613134E-01  -49.2237       49.2237       8424.04       8473.26    
  24  0.694939     -0.363931      -292.172       292.172       8867.37       9159.54    
  25  0.962776     -0.379346E-01  -30.4547       30.4547       8603.77       8634.23    
  26  0.378266     -0.972158      -780.469       780.469       9374.39       10154.9    
  27  0.855922     -0.155576      -124.900       124.900       8905.23       9030.13    
  28  0.393452     -0.932797      -748.869       748.869       9218.69       9967.56    
  29  0.253590      -1.37204      -1101.50       1101.50       9749.08       10850.6    
  30  0.777948     -0.251096      -201.585       201.585       9020.91       9222.49    
  31  0.654890     -0.423288      -339.825       339.825       8288.68       8628.50    
  32  0.690016E-01  -2.67363      -2146.44       2146.44       9565.36       11711.8    
  33  0.101034      -2.29229      -1840.30       1840.30       9599.81       11440.1    
  34  0.684533     -0.379019      -304.284       304.284       9645.91       9950.20    
  35  0.592603     -0.523230      -420.060       420.060       9415.80       9835.86    
  36  0.904830     -0.100009      -80.2890       80.2890       10150.3       10230.6    
  37  0.400244     -0.915681      -735.128       735.128       10157.0       10892.2    
  38  0.698191     -0.359263      -288.424       288.424       9962.25       10250.7    
  39  0.551449E-01  -2.89779      -2326.41       2326.41       9582.37       11908.8    
  40  0.500493     -0.692161      -555.681       555.681       9012.53       9568.21    
  41  0.289592      -1.23928      -994.922       994.922       10673.5       11668.4    
  42  0.447163     -0.804833      -646.137       646.137       10683.4       11329.6    
  43  0.690940     -0.369702      -296.804       296.804       10728.0       11024.8    
  44  0.631068     -0.460341      -369.572       369.572       10373.9       10743.5    
  45  0.926041     -0.768363E-01  -61.6858       61.6858       10689.6       10751.3    
  46  0.436187     -0.829684      -666.088       666.088       10596.7       11262.8    
  47  0.314139      -1.15792      -929.602       929.602       9680.84       10610.4    
  48  0.363110      -1.01305      -813.297       813.297       10772.0       11585.3    
  49  0.446982     -0.805238      -646.462       646.462       10625.7       11272.2    
  50  0.541529     -0.613360      -492.418       492.418       10025.9       10518.4    
  51  0.415529     -0.878202      -705.039       705.039       10723.2       11428.2    
  52  0.559792     -0.580190      -465.789       465.789       10881.4       11347.2    
  53  0.931332     -0.711389E-01  -57.1118       57.1118       10702.9       10760.0    
  54  0.653342     -0.425655      -341.724       341.724       8382.14       8723.86    
  55  0.254324E-01  -3.67173      -2947.74       2947.74       10297.8       13245.5    
  56  0.365877      -1.00546      -807.202       807.202       7920.16       8727.36    
  57  0.187661      -1.67312      -1343.21       1343.21       10940.5       12283.8    
  58  0.592744     -0.522993      -419.870       419.870       10751.5       11171.3    
  59  0.211036      -1.55573      -1248.97       1248.97       10888.5       12137.5    
  60  0.718956     -0.329955      -264.895       264.895       10670.0       10934.9    
  61  0.170082      -1.77147      -1422.18       1422.18       10584.0       12006.2    
  62  0.190051      -1.66046      -1333.06       1333.06       10934.3       12267.4    
  63  0.275889      -1.28776      -1033.84       1033.84       10933.5       11967.3    
  64  0.670664     -0.399487      -320.717       320.717       8968.45       9289.17    
loop,thermsimp(1:2)       79   2124.85       39.4381    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195       7130.15          0.89          1.10         23.06          0.34          0.04         25.44
Just calling func    0   0         25.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7130.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       79
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       80
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      194     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -323.402       323.402       6104.52       6427.92    
   2  0.238500      -1.43339      -1150.75       1150.75       5728.33       6879.08    
   3  0.689211     -0.372208      -298.817       298.817       5990.60       6289.42    
   4  0.540774     -0.614753      -493.537       493.537       6093.62       6587.16    
   5  0.178857      -1.72117      -1381.79       1381.79       5996.15       7377.94    
   6  0.884253     -0.123012      -98.7569       98.7569       5292.23       5390.99    
   7  0.755546     -0.280314      -225.042       225.042       7510.70       7735.74    
   8  0.654086E-01  -2.72710      -2189.37       2189.37       7293.57       9482.94    
   9  0.802958     -0.219452      -176.181       176.181       7709.94       7886.12    
  10  0.840665     -0.173562      -139.339       139.339       7603.86       7743.20    
  11  0.864930     -0.145107      -116.495       116.495       7512.56       7629.05    
  12  0.728243     -0.317120      -254.591       254.591       7562.90       7817.49    
  13  0.453086     -0.791672      -635.571       635.571       7512.14       8147.71    
  14  0.702549E-01  -2.65563      -2131.99       2131.99       6713.21       8845.20    
  15  0.610595     -0.493321      -396.049       396.049       8424.04       8820.08    
  16  0.728410E-02  -4.92206      -3951.53       3951.53       7892.17       11843.7    
  17  0.913763     -0.901841E-01  -72.4017       72.4017       8288.68       8361.08    
  18  0.165001      -1.80180      -1446.53       1446.53       8603.77       10050.3    
  19  0.917747E-01  -2.38842      -1917.47       1917.47       8124.44       10041.9    
  20  0.338507      -1.08321      -869.625       869.625       7593.84       8463.46    
  21  0.357666      -1.02815      -825.424       825.424       8382.14       9207.56    
  22  0.389441     -0.943044      -757.096       757.096       7920.16       8677.25    
  23  0.879897     -0.127950      -102.721       102.721       8905.23       9007.95    
  24  0.418897     -0.870129      -698.558       698.558       8867.37       9565.92    
  25  0.838426     -0.176230      -141.481       141.481       9020.91       9162.39    
  26  0.185169      -1.68649      -1353.95       1353.95       8552.41       9906.36    
  27  0.200952      -1.60469      -1288.28       1288.28       8968.45       10256.7    
  28  0.877256     -0.130957      -105.135       105.135       8203.20       8308.33    
  29  0.386592     -0.950385      -762.989       762.989       9012.53       9775.52    
  30  0.888706     -0.117988      -94.7235       94.7235       9415.80       9510.52    
  31  0.105408      -2.24991      -1806.28       1806.28       8533.89       10340.2    
  32  0.994268     -0.574873E-02  -4.61520       4.61520       9645.91       9650.53    
  33  0.764077     -0.269087      -216.028       216.028       9218.69       9434.72    
  34  0.812108     -0.208121      -167.084       167.084       9374.39       9541.47    
  35  0.121669      -2.10645      -1691.10       1691.10       10150.3       11841.4    
  36  0.637909     -0.449559      -360.915       360.915       9962.25       10323.2    
  37  0.316007E-02  -5.75716      -4621.97       4621.97       8747.78       13369.8    
  38  0.229677      -1.47108      -1181.02       1181.02       10025.9       11207.0    
  39  0.521374     -0.651288      -522.868       522.868       9680.84       10203.7    
  40  0.391402     -0.938019      -753.061       753.061       10373.9       11126.9    
  41  0.327357      -1.11670      -896.513       896.513       10689.6       11586.2    
  42  0.963139     -0.375576E-01  -30.1521       30.1521       10702.9       10733.1    
  43  0.174261      -1.74720      -1402.69       1402.69       9749.08       11151.8    
  44  0.331602      -1.10382      -886.169       886.169       6959.75       7845.92    
  45  0.526338     -0.641812      -515.260       515.260       10157.0       10672.3    
  46  0.413265     -0.883667      -709.427       709.427       10670.0       11379.4    
  47  0.541510E-02  -5.21856      -4189.57       4189.57       10728.0       14917.6    
  48  0.781613     -0.246396      -197.812       197.812       10751.5       10949.3    
  49  0.656825     -0.420337      -337.456       337.456       10596.7       10934.2    
  50  0.584791     -0.536501      -430.715       430.715       10625.7       11056.4    
  51  0.811204     -0.209236      -167.979       167.979       10683.4       10851.4    
  52  0.421027     -0.865059      -694.487       694.487       10881.4       11575.9    
  53  0.663739     -0.409866      -329.049       329.049       10723.2       11052.2    
  54  0.164765      -1.80323      -1447.67       1447.67       9599.81       11047.5    
  55  0.883187E-01  -2.42680      -1948.29       1948.29       10772.0       12720.3    
  56  0.825424     -0.191858      -154.028       154.028       10673.5       10827.5    
  57  0.201966E-01  -3.90224      -3132.80       3132.80       9565.36       12698.2    
  58  0.174898      -1.74355      -1399.76       1399.76       9582.37       10982.1    
  59  0.477008     -0.740222      -594.266       594.266       10933.5       11527.7    
  60  0.162167E-01  -4.12171      -3309.00       3309.00       10584.0       13893.0    
  61  0.378219     -0.972282      -780.568       780.568       10888.5       11669.1    
  62  0.980713     -0.194752E-01  -15.6351       15.6351       10934.3       10950.0    
  63  0.232487      -1.45892      -1171.25       1171.25       10940.5       12111.8    
  64  0.962055     -0.386832E-01  -31.0557       31.0557       7130.15       7161.21    
loop,thermsimp(1:2)       80   323.402       1150.75    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       6639.59          0.90          1.09         23.08          0.27          0.05         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197       4343.46          0.89          1.08         23.06          0.20          0.04         25.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4343.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       80
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       81
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      196     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -1051.09       1051.09       5292.23       6343.33    
   2  0.879265     -0.128669      -103.298       103.298       5990.60       6093.90    
   3  0.684902     -0.378479      -303.851       303.851       6104.52       6408.37    
   4  0.893896     -0.112166      -90.0489       90.0489       6093.62       6183.67    
   5  0.476761     -0.740739      -594.681       594.681       5728.33       6323.01    
   6  0.755167     -0.280817      -225.445       225.445       7130.15       7355.60    
   7  0.452407     -0.793173      -636.776       636.776       5996.15       6632.92    
   8  0.723906     -0.323093      -259.386       259.386       7512.56       7771.95    
   9  0.451260     -0.795711      -638.814       638.814       7510.70       8149.51    
  10  0.668265     -0.403071      -323.594       323.594       7603.86       7927.45    
  11  0.777249     -0.251995      -202.307       202.307       7562.90       7765.21    
  12  0.342240      -1.07224      -860.820       860.820       6959.75       7820.57    
  13  0.639156     -0.447606      -359.348       359.348       7709.94       8069.28    
  14  0.166924      -1.79022      -1437.22       1437.22       7512.14       8949.37    
  15  0.375260     -0.980137      -786.875       786.875       8203.20       8990.07    
  16  0.299730      -1.20487      -967.297       967.297       8288.68       9255.98    
  17  0.407119     -0.898650      -721.455       721.455       7593.84       8315.29    
  18  0.762992E-01  -2.57309      -2065.73       2065.73       7920.16       9985.89    
  19  0.281066      -1.26917      -1018.91       1018.91       8424.04       9442.95    
  20  0.220512      -1.51180      -1213.71       1213.71       6713.21       7926.91    
  21  0.389846     -0.942004      -756.261       756.261       8905.23       9661.49    
  22  0.660048     -0.415443      -333.526       333.526       9020.91       9354.43    
  23  0.150026      -1.89695      -1522.91       1522.91       8382.14       9905.05    
  24  0.113767      -2.17360      -1745.01       1745.01       9218.69       10963.7    
  25  0.810589     -0.209994      -168.588       168.588       7293.57       7462.15    
  26  0.247911      -1.39468      -1119.68       1119.68       9415.80       10535.5    
  27  0.408875     -0.894345      -717.999       717.999       9374.39       10092.4    
  28  0.310528      -1.16948      -938.884       938.884       8867.37       9806.25    
  29  0.663027     -0.410939      -329.911       329.911       9645.91       9975.82    
  30  0.798362     -0.225193      -180.789       180.789       9012.53       9193.32    
  31  0.564885     -0.571133      -458.518       458.518       8552.41       9010.93    
  32  0.473510E-02  -5.35275      -4297.30       4297.30       8124.44       12421.7    
  33  0.933475E-01  -2.37143      -1903.83       1903.83       8603.77       10507.6    
  34  0.931702     -0.707423E-01  -56.7934       56.7934       9680.84       9737.64    
  35  0.341741      -1.07370      -861.992       861.992       8968.45       9830.44    
  36  0.171330      -1.76417      -1416.31       1416.31       9962.25       11378.6    
  37  0.355860      -1.03322      -829.489       829.489       8533.89       9363.38    
  38  0.469639     -0.755790      -606.764       606.764       10157.0       10763.8    
  39  0.805376     -0.216446      -173.767       173.767       10702.9       10876.7    
  40  0.651615     -0.428301      -343.849       343.849       10673.5       11017.4    
  41  0.126831      -2.06490      -1657.74       1657.74       10683.4       12341.2    
  42  0.715737     -0.334442      -268.497       268.497       10596.7       10865.2    
  43  0.444007     -0.811915      -651.822       651.822       10751.5       11403.3    
  44  0.887105     -0.119791      -96.1710       96.1710       10934.3       11030.5    
  45  0.492139     -0.708993      -569.195       569.195       9582.37       10151.6    
  46  0.590315     -0.527098      -423.165       423.165       9599.81       10023.0    
  47  0.313130      -1.16114      -932.184       932.184       10723.2       11655.4    
  48  0.824070     -0.193500      -155.346       155.346       10625.7       10781.1    
  49  0.785026     -0.242039      -194.314       194.314       10373.9       10568.2    
  50  0.105781      -2.24638      -1803.44       1803.44       9749.08       11552.5    
  51  0.644933     -0.438608      -352.124       352.124       10025.9       10378.1    
  52  0.656932     -0.420175      -337.326       337.326       10670.0       11007.3    
  53  0.418239     -0.871703      -699.822       699.822       10933.5       11633.3    
  54  0.191132      -1.65479      -1328.50       1328.50       10881.4       12209.9    
  55  0.493587     -0.706055      -566.836       566.836       10689.6       11256.5    
  56  0.490289     -0.712761      -572.219       572.219       10888.5       11460.7    
  57  0.703124     -0.352222      -282.771       282.771       10150.3       10433.0    
  58  0.514219E-01  -2.96769      -2382.52       2382.52       7892.17       10274.7    
  59  0.967122     -0.334307E-01  -26.8389       26.8389       10940.5       10967.4    
  60  0.164565      -1.80445      -1448.65       1448.65       9565.36       11014.0    
  61  0.787129     -0.239363      -192.166       192.166       10772.0       10964.1    
  62  0.877224     -0.130993      -105.164       105.164       8747.78       8852.95    
  63  0.826666     -0.190355      -152.821       152.821       10584.0       10736.8    
  64  0.478850     -0.736368      -591.172       591.172       4343.46       4934.63    
loop,thermsimp(1:2)       81   1051.09       103.298    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198      12146.04          0.89          1.12         23.04          0.27          0.04         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  12146.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       81
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       82
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      197     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -3486.41       3486.41       4343.46       7829.87    
   2  0.906957E-01  -2.40025      -1926.97       1926.97       5990.60       7917.57    
   3  0.973677     -0.266758E-01  -21.4159       21.4159       6093.62       6115.04    
   4  0.764409     -0.268653      -215.680       215.680       5728.33       5944.01    
   5  0.647718     -0.434300      -348.665       348.665       5292.23       5640.90    
   6  0.450945     -0.796410      -639.374       639.374       6104.52       6743.89    
   7  0.342138      -1.07254      -861.058       861.058       5996.15       6857.20    
   8  0.491560     -0.710170      -570.140       570.140       7130.15       7700.29    
   9  0.728901     -0.316218      -253.866       253.866       7293.57       7547.43    
  10  0.361124      -1.01853      -817.701       817.701       7562.90       8380.60    
  11  0.187026      -1.67651      -1345.94       1345.94       7512.56       8858.50    
  12  0.560514     -0.578901      -464.754       464.754       6959.75       7424.50    
  13  0.218776      -1.51971      -1220.05       1220.05       6713.21       7933.26    
  14  0.109271      -2.21392      -1777.38       1777.38       7603.86       9381.24    
  15  0.263420E-01  -3.63659      -2919.53       2919.53       7709.94       10629.5    
  16  0.654642     -0.423667      -340.129       340.129       7510.70       7850.83    
  17  0.975959     -0.243343E-01  -19.5361       19.5361       7593.84       7613.37    
  18  0.107212      -2.23295      -1792.66       1792.66       8747.78       10540.4    
  19  0.972340     -0.280494E-01  -22.5186       22.5186       7512.14       7534.66    
  20  0.259158      -1.35032      -1084.06       1084.06       8203.20       9287.26    
  21  0.889970     -0.116568      -93.5828       93.5828       8552.41       8645.99    
  22  0.956672     -0.442943E-01  -35.5604       35.5604       9012.53       9048.09    
  23  0.299261      -1.20644      -968.553       968.553       8288.68       9257.23    
  24  0.114836      -2.16425      -1737.50       1737.50       9020.91       10758.4    
  25  0.728848     -0.316291      -253.925       253.925       8533.89       8787.82    
  26  0.650336     -0.430267      -345.427       345.427       8424.04       8769.46    
  27  0.816983     -0.202137      -162.280       162.280       8905.23       9067.51    
  28  0.507860     -0.677550      -543.951       543.951       9680.84       10224.8    
  29  0.920661     -0.826634E-01  -66.3639       66.3639       8867.37       8933.73    
  30  0.253772      -1.37132      -1100.93       1100.93       8968.45       10069.4    
  31  0.667512     -0.404198      -324.498       324.498       8382.14       8706.64    
  32  0.772715     -0.257844      -207.003       207.003       9645.91       9852.91    
  33  0.757620     -0.277573      -222.841       222.841       7920.16       8143.00    
  34  0.776421     -0.253060      -203.162       203.162       9599.81       9802.97    
  35  0.886642     -0.120314      -96.5908       96.5908       9374.39       9470.98    
  36  0.238693E-01  -3.73516      -2998.67       2998.67       9582.37       12581.0    
  37  0.303957      -1.19087      -956.056       956.056       7892.17       8848.22    
  38  0.875267     -0.133226      -106.957       106.957       10025.9       10132.9    
  39  0.144246      -1.93624      -1554.45       1554.45       10150.3       11704.7    
  40  0.993963     -0.605564E-02  -4.86160       4.86160       8603.77       8608.63    
  41  0.172168      -1.75928      -1412.39       1412.39       9415.80       10828.2    
  42  0.979713     -0.204952E-01  -16.4540       16.4540       10373.9       10390.3    
  43  0.938694     -0.632658E-01  -50.7911       50.7911       10584.0       10634.8    
  44  0.716061     -0.333990      -268.134       268.134       10157.0       10425.2    
  45  0.764601     -0.268402      -215.479       215.479       10625.7       10841.2    
  46  0.546951     -0.603396      -484.419       484.419       10596.7       11081.2    
  47  0.104442      -2.25912      -1813.67       1813.67       10702.9       12516.6    
  48  0.669980     -0.400508      -321.536       321.536       9218.69       9540.22    
  49  0.255048      -1.36630      -1096.90       1096.90       10772.0       11868.9    
  50  0.761153     -0.272921      -219.107       219.107       10940.5       11159.6    
  51  0.273269      -1.29730      -1041.50       1041.50       10670.0       11711.5    
  52  0.789047E-01  -2.53951      -2038.78       2038.78       9565.36       11604.1    
  53  0.723703     -0.323374      -259.612       259.612       10673.5       10933.1    
  54  0.535422     -0.624699      -501.522       501.522       10934.3       11435.8    
  55  0.394266     -0.930730      -747.210       747.210       10689.6       11436.9    
  56  0.334209      -1.09599      -879.882       879.882       9962.25       10842.1    
  57  0.713084     -0.338156      -271.479       271.479       10751.5       11022.9    
  58  0.335811      -1.09121      -876.043       876.043       10888.5       11764.5    
  59  0.877329     -0.130873      -105.068       105.068       9749.08       9854.15    
  60  0.804760     -0.217212      -174.382       174.382       10933.5       11107.8    
  61  0.676806     -0.390371      -313.398       313.398       10723.2       11036.6    
  62  0.139025      -1.97310      -1584.05       1584.05       10881.4       12465.5    
  63  0.453238     -0.791339      -635.303       635.303       10683.4       11318.7    
  64  0.174629      -1.74509      -1401.00       1401.00       12146.0       13547.0    
loop,thermsimp(1:2)       82   3486.41       1926.97    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199       8124.44          0.90          1.09         23.05          0.27          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8124.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       82
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       83
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      198     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -397.972       397.972       5292.23       5690.21    
   2  0.266275      -1.32323      -1062.31       1062.31       5728.33       6790.64    
   3  0.545538     -0.605984      -486.496       486.496       6093.62       6580.12    
   4  0.196234      -1.62845      -1307.35       1307.35       6104.52       7411.87    
   5  0.786411     -0.240275      -192.898       192.898       5996.15       6189.04    
   6  0.453912     -0.789853      -634.110       634.110       6959.75       7593.86    
   7  0.900549     -0.104751      -84.0961       84.0961       7512.14       7596.24    
   8  0.339919      -1.07905      -866.281       866.281       7293.57       8159.85    
   9  0.511643     -0.670128      -537.993       537.993       7593.84       8131.83    
  10  0.628202     -0.464894      -373.226       373.226       7130.15       7503.38    
  11  0.672886E-01  -2.69876      -2166.62       2166.62       4343.46       6510.08    
  12  0.518493     -0.656829      -527.316       527.316       7510.70       8038.02    
  13  0.994926     -0.508642E-02  -4.08348       4.08348       5990.60       5994.69    
  14  0.733191     -0.310349      -249.155       249.155       6713.21       6962.36    
  15  0.952818     -0.483318E-01  -38.8018       38.8018       7920.16       7958.96    
  16  0.735955     -0.306586      -246.134       246.134       7562.90       7809.03    
  17  0.743149     -0.296859      -238.325       238.325       8603.77       8842.09    
  18  0.549375     -0.598975      -480.869       480.869       8552.41       9033.28    
  19  0.355140      -1.03524      -831.115       831.115       8382.14       9213.25    
  20  0.482165     -0.729469      -585.633       585.633       8424.04       9009.67    
  21  0.577197     -0.549571      -441.207       441.207       8533.89       8975.10    
  22  0.107316E-01  -4.53456      -3640.44       3640.44       7892.17       11532.6    
  23  0.923969     -0.790764E-01  -63.4842       63.4842       7512.56       7576.04    
  24  0.810451     -0.210164      -168.724       168.724       8867.37       9036.09    
  25  0.143346      -1.94249      -1559.47       1559.47       9012.53       10572.0    
  26  0.994184     -0.583318E-02  -4.68300       4.68300       8905.23       8909.91    
  27  0.870737     -0.138415      -111.123       111.123       8288.68       8399.80    
  28  0.970691     -0.297469E-01  -23.8815       23.8815       8203.20       8227.08    
  29  0.351269      -1.04620      -839.914       839.914       7603.86       8443.77    
  30  0.464982     -0.765756      -614.765       614.765       9374.39       9989.15    
  31  0.921785     -0.814432E-01  -65.3843       65.3843       9218.69       9284.07    
  32  0.110512      -2.20263      -1768.32       1768.32       9599.81       11368.1    
  33  0.261408      -1.34167      -1077.12       1077.12       9645.91       10723.0    
  34  0.908908     -0.955118E-01  -76.6789       76.6789       9749.08       9825.76    
  35  0.819412     -0.199168      -159.896       159.896       8968.45       9128.35    
  36  0.466482     -0.762536      -612.180       612.180       10025.9       10638.1    
  37  0.717237     -0.332349      -266.817       266.817       9680.84       9947.66    
  38  0.802331     -0.220234      -176.808       176.808       10373.9       10550.7    
  39  0.949390     -0.519355E-01  -41.6949       41.6949       10157.0       10198.7    
  40  0.258511      -1.35282      -1086.07       1086.07       8747.78       9833.85    
  41  0.270423      -1.30777      -1049.90       1049.90       7709.94       8759.84    
  42  0.366439      -1.00392      -805.971       805.971       10584.0       11390.0    
  43  0.934403     -0.678476E-01  -54.4695       54.4695       9020.91       9075.38    
  44  0.956654     -0.443133E-01  -35.5756       35.5756       9415.80       9451.37    
  45  0.377790     -0.973417      -781.480       781.480       10625.7       11407.2    
  46  0.203667      -1.59127      -1277.51       1277.51       9962.25       11239.8    
  47  0.673892     -0.394685      -316.861       316.861       10673.5       10990.4    
  48  0.347380      -1.05734      -848.851       848.851       10751.5       11600.3    
  49  0.144339      -1.93559      -1553.93       1553.93       10723.2       12277.1    
  50  0.728571     -0.316670      -254.229       254.229       10596.7       10851.0    
  51  0.243065      -1.41443      -1135.53       1135.53       10933.5       12069.0    
  52  0.686711     -0.375841      -301.733       301.733       10940.5       11242.3    
  53  0.159440      -1.83609      -1474.05       1474.05       10683.4       12157.5    
  54  0.426258     -0.852711      -684.574       684.574       10934.3       11618.9    
  55  0.929286     -0.733386E-01  -58.8778       58.8778       10689.6       10748.5    
  56  0.335987E-01  -3.39327      -2724.19       2724.19       9565.36       12289.5    
  57  0.539383     -0.617330      -495.605       495.605       10150.3       10645.9    
  58  0.384768     -0.955116      -766.787       766.787       10670.0       11436.7    
  59  0.267956      -1.31693      -1057.26       1057.26       10888.5       11945.8    
  60  0.116616      -2.14887      -1725.16       1725.16       10772.0       12497.1    
  61  0.852032     -0.160131      -128.557       128.557       10881.4       11010.0    
  62  0.456598     -0.783952      -629.373       629.373       10702.9       11332.3    
  63  0.157616      -1.84759      -1483.29       1483.29       9582.37       11065.7    
  64  0.928361     -0.743348E-01  -59.6775       59.6775       8124.44       8184.12    
loop,thermsimp(1:2)       83   397.972       1062.31    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       6526.89          0.89          1.10         23.06          0.23          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6526.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       83
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       84
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      199     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -447.589       447.589       5292.23       5739.82    
   2  0.468879     -0.757411      -608.066       608.066       5990.60       6598.67    
   3  0.886741E-01  -2.42279      -1945.06       1945.06       5996.15       7941.21    
   4  0.211783      -1.55219      -1246.13       1246.13       4343.46       5589.59    
   5  0.573306     -0.556336      -446.638       446.638       6093.62       6540.26    
   6  0.401711     -0.912021      -732.190       732.190       5728.33       6460.52    
   7  0.505706     -0.681800      -547.363       547.363       6713.21       7260.57    
   8  0.603045     -0.505763      -406.038       406.038       6104.52       6510.55    
   9  0.696575     -0.361580      -290.284       290.284       7130.15       7420.43    
  10  0.294614      -1.22209      -981.119       981.119       7512.56       8493.68    
  11  0.527550     -0.639511      -513.413       513.413       6959.75       7473.16    
  12  0.657157     -0.419832      -337.050       337.050       7512.14       7849.19    
  13  0.627866     -0.465428      -373.655       373.655       7562.90       7936.56    
  14  0.993353E-02  -4.61184      -3702.48       3702.48       7920.16       11622.6    
  15  0.885166E-01  -2.42456      -1946.49       1946.49       7510.70       9457.19    
  16  0.265764      -1.32515      -1063.86       1063.86       7593.84       8657.69    
  17  0.446403     -0.806534      -647.502       647.502       7293.57       7941.07    
  18  0.287864      -1.24527      -999.727       999.727       8124.44       9124.17    
  19  0.926928E-01  -2.37846      -1909.48       1909.48       8203.20       10112.7    
  20  0.394849     -0.929252      -746.023       746.023       8288.68       9034.70    
  21  0.540746     -0.614805      -493.578       493.578       7603.86       8097.44    
  22  0.846435     -0.166721      -133.847       133.847       7709.94       7843.78    
  23  0.417037     -0.874580      -702.131       702.131       8603.77       9305.90    
  24  0.210713      -1.55726      -1250.20       1250.20       8905.23       10155.4    
  25  0.764669     -0.268312      -215.406       215.406       8533.89       8749.30    
  26  0.219471E-01  -3.81912      -3066.07       3066.07       8424.04       11490.1    
  27  0.200728      -1.60581      -1289.18       1289.18       8552.41       9841.59    
  28  0.572660     -0.557463      -447.543       447.543       8867.37       9314.91    
  29  0.599083E-01  -2.81494      -2259.89       2259.89       9020.91       11280.8    
  30  0.214614      -1.53891      -1235.47       1235.47       8968.45       10203.9    
  31  0.489389     -0.714598      -573.694       573.694       8382.14       8955.83    
  32  0.162616      -1.81636      -1458.22       1458.22       9218.69       10676.9    
  33  0.710022     -0.342459      -274.933       274.933       9415.80       9690.73    
  34  0.753583     -0.282916      -227.131       227.131       9749.08       9976.21    
  35  0.743317     -0.296633      -238.143       238.143       8747.78       8985.92    
  36  0.155416      -1.86165      -1494.57       1494.57       9680.84       11175.4    
  37  0.643355     -0.441059      -354.091       354.091       9374.39       9728.48    
  38  0.656098     -0.421444      -338.344       338.344       10157.0       10495.4    
  39  0.327550      -1.11611      -896.039       896.039       10373.9       11269.9    
  40  0.192244      -1.64899      -1323.84       1323.84       9012.53       10336.4    
  41  0.433590     -0.835657      -670.883       670.883       10025.9       10696.8    
  42  0.788561     -0.237545      -190.706       190.706       10150.3       10341.0    
  43  0.978028     -0.222173E-01  -17.8365       17.8365       9645.91       9663.75    
  44  0.110322      -2.20435      -1769.70       1769.70       10689.6       12459.3    
  45  0.795332     -0.228995      -183.842       183.842       10596.7       10780.6    
  46  0.497518E-01  -3.00071      -2409.03       2409.03       10673.5       13082.6    
  47  0.852459     -0.159631      -128.155       128.155       10881.4       11009.6    
  48  0.133240      -2.01560      -1618.17       1618.17       9582.37       11200.5    
  49  0.671163     -0.398743      -320.119       320.119       9962.25       10282.4    
  50  0.245122      -1.40600      -1128.77       1128.77       10940.5       12069.3    
  51  0.820498     -0.197843      -158.833       158.833       10702.9       10861.8    
  52  0.422422     -0.861751      -691.832       691.832       9599.81       10291.6    
  53  0.946612E-01  -2.35745      -1892.61       1892.61       10584.0       12476.6    
  54  0.902486     -0.102603      -82.3715       82.3715       10625.7       10708.1    
  55  0.858585     -0.152469      -122.405       122.405       10670.0       10792.4    
  56  0.713346     -0.337789      -271.184       271.184       7892.17       8163.35    
  57  0.497785     -0.697587      -560.038       560.038       10751.5       11311.5    
  58  0.971461     -0.289536E-01  -23.2446       23.2446       10934.3       10957.6    
  59  0.714587     -0.336051      -269.789       269.789       10888.5       11158.3    
  60  0.194565E-01  -3.93958      -3162.77       3162.77       10933.5       14096.2    
  61  0.675786E-01  -2.69446      -2163.17       2163.17       10683.4       12846.6    
  62  0.924162     -0.788681E-01  -63.3169       63.3169       10723.2       10786.5    
  63  0.988536     -0.115299E-01  -9.25642       9.25642       9565.36       9574.62    
  64  0.136917      -1.98838      -1596.31       1596.31       6526.89       8123.20    
loop,thermsimp(1:2)       84   447.589       608.066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       6257.92          0.90          1.09         23.05          0.23          0.04         25.30
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       4437.73          0.90          1.08         23.08          0.34          0.04         25.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    6257.9        3.397    -0.5306      4.212     -100.0     0.2800E-02
                      -1.060      2.203     -100.0      2.624     0.5556    
                       1.587     0.3071      2.400      0.000      0.000    
                      -2.073      0.000      0.000      0.000     -1.221    

                      -2.500     0.1058E+05 0.1345E+05 -908.3     -3064.    
                      -2.000     -2.667     -1.667     -4.337     -2.984    
                      -12.67     -2.493      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1760     0.6829E-02  0.000    -0.1365    
                      0.8182E-01-0.2723     0.4094E-01-0.2506E-01-0.1148    

                      -1.220     -1.333      0.000     0.3041     0.2584    
                      0.8541E-01-0.5539     0.8669E-01 0.9921E-01-0.3515    
                     -0.1299    -0.3899E-02 0.4850E-01-0.8305      0.000    

                     -0.5921    -0.7340      3.149     -1.719      0.000    
                       0.000      9.322      8.674     -5554.     -4.000    
                      0.6666    -0.1194      9.159      8.685     -4360.    

                      -4.000     0.6666     0.6666      9.422      8.875    
                      -8422.     -4.000     0.2473     0.5699      9.417    
                       9.022     -8634.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4437.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       84
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       85
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      201     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -1302.19       1302.19       4343.46       5645.65    
   2  0.793097     -0.231809      -186.101       186.101       5292.23       5478.34    
   3  0.261081      -1.34293      -1078.13       1078.13       5728.33       6806.45    
   4  0.912198     -0.918984E-01  -73.7780       73.7780       6104.52       6178.29    
   5  0.493539     -0.706153      -566.914       566.914       6093.62       6660.53    
   6  0.721001     -0.327115      -262.614       262.614       5990.60       6253.22    
   7  0.578790     -0.546816      -438.995       438.995       6713.21       7152.20    
   8  0.684127     -0.379612      -304.760       304.760       7130.15       7434.91    
   9  0.627712     -0.465674      -373.853       373.853       6959.75       7333.60    
  10  0.858540     -0.152522      -122.448       122.448       7709.94       7832.38    
  11  0.712254E-01  -2.64191      -2120.98       2120.98       7512.14       9633.12    
  12  0.927250     -0.755316E-01  -60.6384       60.6384       7562.90       7623.54    
  13  0.458073     -0.780727      -626.784       626.784       7293.57       7920.35    
  14  0.940004     -0.618714E-01  -49.6716       49.6716       5996.15       6045.82    
  15  0.322549      -1.13150      -908.393       908.393       7603.86       8512.25    
  16  0.939473     -0.624358E-01  -50.1248       50.1248       6526.89       6577.02    
  17  0.726080     -0.320095      -256.979       256.979       7892.17       8149.14    
  18  0.602088E-02  -5.11252      -4104.44       4104.44       7512.56       11617.0    
  19  0.735289     -0.307492      -246.861       246.861       7593.84       7840.70    
  20  0.847617     -0.165326      -132.728       132.728       8533.89       8666.62    
  21  0.747190E-01  -2.59402      -2082.53       2082.53       8382.14       10464.7    
  22  0.248374      -1.39282      -1118.18       1118.18       8747.78       9865.96    
  23  0.350184      -1.04930      -842.396       842.396       8288.68       9131.08    
  24  0.327739E-03  -8.02329      -6441.27       6441.27       8124.44       14565.7    
  25  0.130012      -2.04013      -1637.86       1637.86       8603.77       10241.6    
  26  0.609791     -0.494639      -397.107       397.107       8867.37       9264.47    
  27  0.793414     -0.231410      -185.781       185.781       7510.70       7696.48    
  28  0.962567     -0.381519E-01  -30.6291       30.6291       9565.36       9595.99    
  29  0.499469     -0.694211      -557.327       557.327       9645.91       10203.2    
  30  0.887491     -0.119357      -95.8225       95.8225       9415.80       9511.62    
  31  0.136374      -1.99236      -1599.50       1599.50       9374.39       10973.9    
  32  0.292356      -1.22978      -987.296       987.296       8552.41       9539.71    
  33  0.301564      -1.19877      -962.401       962.401       9749.08       10711.5    
  34  0.352543      -1.04258      -837.007       837.007       8203.20       9040.20    
  35  0.483726     -0.726236      -583.038       583.038       8905.23       9488.27    
  36  0.410499     -0.890381      -714.817       714.817       8968.45       9683.27    
  37  0.458111     -0.780644      -626.718       626.718       9962.25       10589.0    
  38  0.670071     -0.400372      -321.427       321.427       9599.81       9921.24    
  39  0.175486      -1.74020      -1397.07       1397.07       9012.53       10409.6    
  40  0.798907     -0.224511      -180.242       180.242       10150.3       10330.5    
  41  0.270487      -1.30753      -1049.71       1049.71       10157.0       11206.8    
  42  0.480368     -0.733202      -588.630       588.630       9218.69       9807.32    
  43  0.658406     -0.417933      -335.525       335.525       10025.9       10361.5    
  44  0.937976     -0.640304E-01  -51.4049       51.4049       10625.7       10677.1    
  45  0.710083     -0.342373      -274.864       274.864       10596.7       10871.6    
  46  0.567340     -0.566797      -455.036       455.036       10723.2       11178.2    
  47  0.201426      -1.60233      -1286.39       1286.39       10670.0       11956.3    
  48  0.660313     -0.415042      -333.204       333.204       10702.9       11036.1    
  49  0.524008     -0.646249      -518.822       518.822       10934.3       11453.1    
  50  0.513616     -0.666280      -534.904       534.904       10881.4       11416.3    
  51  0.951218     -0.500122E-01  -40.1509       40.1509       10888.5       10928.6    
  52  0.703465     -0.351737      -282.382       282.382       9680.84       9963.23    
  53  0.702859     -0.352600      -283.074       283.074       9582.37       9865.44    
  54  0.453067     -0.791715      -635.605       635.605       10373.9       11009.5    
  55  0.202116      -1.59891      -1283.64       1283.64       9020.91       10304.5    
  56  0.491988     -0.709301      -569.442       569.442       10751.5       11320.9    
  57  0.632131     -0.458659      -368.221       368.221       8424.04       8792.26    
  58  0.911086     -0.931178E-01  -74.7569       74.7569       7920.16       7994.92    
  59  0.888750     -0.117939      -94.6841       94.6841       10940.5       11035.2    
  60  0.468235     -0.758785      -609.169       609.169       10689.6       11298.8    
  61  0.971366     -0.290520E-01  -23.3236       23.3236       10584.0       10607.3    
  62  0.622947     -0.473294      -379.971       379.971       10683.4       11063.4    
  63  0.837000     -0.177932      -142.847       142.847       10673.5       10816.4    
  64  0.495636     -0.701913      -563.510       563.510       4437.73       5001.24    
loop,thermsimp(1:2)       85   1302.19       186.101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203      11846.88          0.89          1.12         23.06          0.55          0.04         25.66
Just calling func    0   0         25.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  11846.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       85
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       86
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      202     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -614.940       614.940       4437.73       5052.67    
   2  0.948887     -0.524654E-01  -42.1203       42.1203       5292.23       5334.35    
   3  0.532332     -0.630488      -506.169       506.169       4343.46       4849.62    
   4  0.374267     -0.982785      -789.000       789.000       5996.15       6785.15    
   5  0.694531     -0.364519      -292.643       292.643       6104.52       6397.16    
   6  0.414371     -0.880994      -707.280       707.280       5990.60       6697.88    
   7  0.208827E-01  -3.86883      -3105.98       3105.98       6526.89       9632.87    
   8  0.627187     -0.466511      -374.524       374.524       6093.62       6468.14    
   9  0.148799E-01  -4.20774      -3378.06       3378.06       5728.33       9106.39    
  10  0.809008     -0.211946      -170.155       170.155       6713.21       6883.36    
  11  0.647680     -0.434359      -348.713       348.713       6959.75       7308.46    
  12  0.289351      -1.24012      -995.591       995.591       7130.15       8125.74    
  13  0.222457      -1.50302      -1206.66       1206.66       7562.90       8769.56    
  14  0.374268     -0.982782      -788.998       788.998       7510.70       8299.70    
  15  0.785765     -0.241097      -193.558       193.558       7709.94       7903.49    
  16  0.298051      -1.21049      -971.809       971.809       7593.84       8565.65    
  17  0.725075     -0.321480      -258.091       258.091       7293.57       7551.66    
  18  0.386364     -0.950976      -763.463       763.463       7920.16       8683.62    
  19  0.631686     -0.459363      -368.786       368.786       7892.17       8260.95    
  20  0.688282     -0.373557      -299.900       299.900       7603.86       7903.76    
  21  0.373817     -0.983990      -789.967       789.967       8533.89       9323.86    
  22  0.219845      -1.51483      -1216.14       1216.14       8424.04       9640.18    
  23  0.926271     -0.765889E-01  -61.4871       61.4871       8203.20       8264.69    
  24  0.618127     -0.481061      -386.206       386.206       8288.68       8674.89    
  25  0.176216      -1.73604      -1393.73       1393.73       8867.37       10261.1    
  26  0.742943     -0.297136      -238.547       238.547       8905.23       9143.78    
  27  0.357690      -1.02809      -825.371       825.371       9415.80       10241.2    
  28  0.478359     -0.737394      -591.995       591.995       8552.41       9144.41    
  29  0.395976     -0.926401      -743.734       743.734       9565.36       10309.1    
  30  0.803186     -0.219169      -175.953       175.953       7512.14       7688.09    
  31  0.231845      -1.46168      -1173.47       1173.47       8968.45       10141.9    
  32  0.808968     -0.211996      -170.195       170.195       9218.69       9388.88    
  33  0.579217     -0.546078      -438.403       438.403       9582.37       10020.8    
  34  0.384357     -0.956183      -767.644       767.644       8747.78       9515.43    
  35  0.856367     -0.155057      -124.483       124.483       9599.81       9724.29    
  36  0.265661      -1.32553      -1064.17       1064.17       9680.84       10745.0    
  37  0.288915      -1.24162      -996.802       996.802       9645.91       10642.7    
  38  0.224915      -1.49203      -1197.84       1197.84       8603.77       9801.61    
  39  0.685944     -0.376959      -302.631       302.631       9020.91       9323.54    
  40  0.265936      -1.32450      -1063.33       1063.33       10150.3       11213.6    
  41  0.412966     -0.884389      -710.006       710.006       10025.9       10735.9    
  42  0.440796     -0.819173      -657.649       657.649       9012.53       9670.18    
  43  0.572522     -0.557705      -447.737       447.737       8382.14       8829.88    
  44  0.798412     -0.225131      -180.740       180.740       9962.25       10143.0    
  45  0.127097      -2.06281      -1656.06       1656.06       10584.0       12240.1    
  46  0.243397      -1.41306      -1134.44       1134.44       10625.7       11760.2    
  47  0.322195      -1.13260      -909.273       909.273       9749.08       10658.4    
  48  0.512728     -0.668011      -536.293       536.293       10673.5       11209.8    
  49  0.786191     -0.240556      -193.123       193.123       10596.7       10789.9    
  50  0.733079     -0.310501      -249.277       249.277       10888.5       11137.8    
  51  0.601364     -0.508554      -408.278       408.278       9374.39       9782.67    
  52  0.348529      -1.05403      -846.200       846.200       10373.9       11220.1    
  53  0.923986     -0.790584E-01  -63.4698       63.4698       10940.5       11004.0    
  54  0.843742     -0.169908      -136.406       136.406       10702.9       10839.3    
  55  0.723581     -0.323543      -259.747       259.747       10683.4       10943.2    
  56  0.378158     -0.972444      -780.698       780.698       10723.2       11503.9    
  57  0.463644     -0.768638      -617.079       617.079       10157.0       10774.1    
  58  0.427569     -0.849641      -682.109       682.109       10689.6       11371.8    
  59  0.235852      -1.44455      -1159.71       1159.71       10751.5       11911.2    
  60  0.203797      -1.59063      -1276.99       1276.99       10881.4       12158.4    
  61  0.146982E-02  -6.52261      -5236.49       5236.49       10934.3       16170.8    
  62  0.681525     -0.383422      -307.819       307.819       7512.56       7820.38    
  63  0.931276     -0.711992E-01  -57.1602       57.1602       10670.0       10727.1    
  64  0.581849     -0.541545      -434.763       434.763       11846.9       12281.6    
loop,thermsimp(1:2)       86   614.940       42.1203    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204       6144.95          0.89          1.09         23.04          0.23          0.04         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6144.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       86
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       87
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      203     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -1363.54       1363.54       4343.46       5706.99    
   2  0.721345     -0.326637      -262.231       262.231       4437.73       4699.96    
   3  0.842493     -0.171390      -137.595       137.595       5292.23       5429.83    
   4  0.260540      -1.34500      -1079.79       1079.79       6104.52       7184.31    
   5  0.782605     -0.245127      -196.793       196.793       6093.62       6290.41    
   6  0.208492      -1.56785      -1258.71       1258.71       5990.60       7249.31    
   7  0.290568E-01  -3.53850      -2840.78       2840.78       5996.15       8836.93    
   8  0.673682     -0.394997      -317.112       317.112       6713.21       7030.32    
   9  0.399393     -0.917808      -736.836       736.836       6959.75       7696.58    
  10  0.966971     -0.335863E-01  -26.9638       26.9638       7293.57       7320.53    
  11  0.390645     -0.939956      -754.616       754.616       7512.14       8266.76    
  12  0.259548      -1.34881      -1082.86       1082.86       7512.56       8595.42    
  13  0.260765      -1.34413      -1079.10       1079.10       7709.94       8789.04    
  14  0.110601E-01  -4.50441      -3616.24       3616.24       7603.86       11220.1    
  15  0.727710     -0.317852      -255.178       255.178       7130.15       7385.33    
  16  0.717076     -0.332574      -266.997       266.997       7892.17       8159.16    
  17  0.612129     -0.490811      -394.034       394.034       8203.20       8597.23    
  18  0.589376     -0.528691      -424.444       424.444       7510.70       7935.14    
  19  0.541615     -0.613199      -492.289       492.289       7593.84       8086.13    
  20  0.330403      -1.10744      -889.077       889.077       8288.68       9177.76    
  21  0.229530      -1.47172      -1181.53       1181.53       7920.16       9101.69    
  22  0.564010     -0.572684      -459.763       459.763       7562.90       8022.66    
  23  0.454226     -0.789161      -633.555       633.555       8382.14       9015.69    
  24  0.579528     -0.545541      -437.972       437.972       5728.33       6166.30    
  25  0.245500      -1.40446      -1127.53       1127.53       8905.23       10032.8    
  26  0.708019     -0.345284      -277.201       277.201       8552.41       8829.61    
  27  0.300215      -1.20326      -966.001       966.001       9020.91       9986.91    
  28  0.721461     -0.326478      -262.103       262.103       8533.89       8795.99    
  29  0.326772      -1.11849      -897.950       897.950       9218.69       10116.6    
  30  0.580879     -0.543212      -436.102       436.102       8747.78       9183.88    
  31  0.963075     -0.376241E-01  -30.2054       30.2054       6526.89       6557.10    
  32  0.656935     -0.420170      -337.321       337.321       8424.04       8761.36    
  33  0.908335     -0.961416E-01  -77.1845       77.1845       9012.53       9089.71    
  34  0.765938     -0.266654      -214.076       214.076       9599.81       9813.88    
  35  0.497301     -0.698561      -560.819       560.819       9374.39       9935.21    
  36  0.833603     -0.181997      -146.111       146.111       8603.77       8749.88    
  37  0.433057     -0.836886      -671.869       671.869       9582.37       10254.2    
  38  0.349547      -1.05112      -843.858       843.858       8968.45       9812.31    
  39  0.142838      -1.94604      -1562.33       1562.33       9962.25       11524.6    
  40  0.326780      -1.11847      -897.930       897.930       9415.80       10313.7    
  41  0.707709     -0.345723      -277.554       277.554       8867.37       9144.92    
  42  0.914339     -0.895538E-01  -71.8956       71.8956       9565.36       9637.26    
  43  0.392800     -0.934454      -750.199       750.199       9645.91       10396.1    
  44  0.434772     -0.832933      -668.696       668.696       9749.08       10417.8    
  45  0.229545      -1.47165      -1181.47       1181.47       10670.0       11851.4    
  46  0.661281     -0.413577      -332.028       332.028       10025.9       10358.0    
  47  0.459966     -0.776602      -623.473       623.473       9680.84       10304.3    
  48  0.352439      -1.04288      -837.243       837.243       10157.0       10994.3    
  49  0.490345     -0.712647      -572.128       572.128       10596.7       11168.9    
  50  0.837788     -0.176990      -142.091       142.091       10702.9       10845.0    
  51  0.247493      -1.39637      -1121.04       1121.04       10683.4       11804.5    
  52  0.221382      -1.50787      -1210.55       1210.55       10940.5       12151.1    
  53  0.374412     -0.982399      -788.690       788.690       10888.5       11677.2    
  54  0.170580      -1.76855      -1419.83       1419.83       10673.5       12093.3    
  55  0.464054     -0.767755      -616.370       616.370       10150.3       10766.6    
  56  0.936961     -0.651140E-01  -52.2749       52.2749       10373.9       10426.2    
  57  0.302357      -1.19615      -960.291       960.291       10689.6       11649.9    
  58  0.572748E-01  -2.85990      -2295.98       2295.98       10723.2       13019.2    
  59  0.495156     -0.702883      -564.289       564.289       10625.7       11190.0    
  60  0.101162      -2.29104      -1839.29       1839.29       10751.5       12590.8    
  61  0.786435E-02  -4.84542      -3890.00       3890.00       10881.4       14771.4    
  62  0.960492     -0.403100E-01  -32.3617       32.3617       10584.0       10616.4    
  63  0.902616     -0.102458      -82.2556       82.2556       11846.9       11929.1    
  64  0.646986     -0.435430      -349.572       349.572       6144.95       6494.53    
loop,thermsimp(1:2)       87   1363.54       262.231    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       6015.28          0.90          1.09         23.02          0.35          0.04         25.39
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206       4953.55          0.90          1.08         23.08          0.21          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4953.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       87
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       88
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      205     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -1214.92       1214.92       4437.73       5652.65    
   2  0.246752E-01  -3.70196      -2972.01       2972.01       5292.23       8264.24    
   3  0.679039     -0.387076      -310.753       310.753       4343.46       4654.21    
   4  0.709027     -0.343862      -276.059       276.059       5728.33       6004.38    
   5  0.577754     -0.548608      -440.434       440.434       6093.62       6534.05    
   6  0.738694     -0.302871      -243.152       243.152       6144.95       6388.11    
   7  0.181723      -1.70527      -1369.03       1369.03       6526.89       7895.92    
   8  0.103748      -2.26579      -1819.02       1819.02       6713.21       8532.23    
   9  0.456811E-02  -5.38866      -4326.13       4326.13       6104.52       10430.6    
  10  0.303247      -1.19321      -957.932       957.932       5990.60       6948.54    
  11  0.284736      -1.25619      -1008.50       1008.50       7293.57       8302.06    
  12  0.900494     -0.104812      -84.1452       84.1452       7130.15       7214.30    
  13  0.691792     -0.368470      -295.815       295.815       6959.75       7255.56    
  14  0.502714     -0.687735      -552.128       552.128       7510.70       8062.83    
  15  0.305219      -1.18673      -952.729       952.729       7562.90       8515.63    
  16  0.412005     -0.886720      -711.878       711.878       7593.84       8305.72    
  17  0.412225     -0.886186      -711.448       711.448       7892.17       8603.61    
  18  0.121697      -2.10622      -1690.92       1690.92       7512.14       9203.06    
  19  0.465374     -0.764915      -614.089       614.089       7512.56       8126.65    
  20  0.273016      -1.29823      -1042.24       1042.24       8203.20       9245.44    
  21  0.502763     -0.687636      -552.049       552.049       8603.77       9155.82    
  22  0.516442     -0.660793      -530.499       530.499       8424.04       8954.53    
  23  0.554333     -0.589990      -473.656       473.656       7709.94       8183.59    
  24  0.192397E-01  -3.95078      -3171.77       3171.77       8533.89       11705.7    
  25  0.451279E-01  -3.09825      -2487.34       2487.34       8552.41       11039.8    
  26  0.457340     -0.782327      -628.069       628.069       5996.15       6624.22    
  27  0.325184      -1.12336      -901.859       901.859       8382.14       9284.00    
  28  0.700952     -0.355315      -285.255       285.255       9012.53       9297.78    
  29  0.961087     -0.396906E-01  -31.8645       31.8645       7920.16       7952.02    
  30  0.195966E-02  -6.23498      -5005.58       5005.58       8867.37       13872.9    
  31  0.766376     -0.266082      -213.617       213.617       8288.68       8502.30    
  32  0.398846     -0.919180      -737.937       737.937       8747.78       9485.72    
  33  0.675249     -0.392674      -315.247       315.247       9565.36       9880.61    
  34  0.189468      -1.66354      -1335.52       1335.52       8968.45       10304.0    
  35  0.444608     -0.810562      -650.736       650.736       9599.81       10250.5    
  36  0.514006     -0.665520      -534.293       534.293       9374.39       9908.68    
  37  0.575199     -0.553039      -443.991       443.991       9020.91       9464.90    
  38  0.121449      -2.10826      -1692.56       1692.56       8905.23       10597.8    
  39  0.209130      -1.56480      -1256.25       1256.25       9218.69       10474.9    
  40  0.466284E-01  -3.06555      -2461.08       2461.08       9582.37       12043.5    
  41  0.386630E-01  -3.25287      -2611.47       2611.47       9680.84       12292.3    
  42  0.335751E-01  -3.39397      -2724.75       2724.75       9415.80       12140.5    
  43  0.878126     -0.129965      -104.339       104.339       10025.9       10130.3    
  44  0.652938     -0.426273      -342.221       342.221       9645.91       9988.13    
  45  0.932456E-01  -2.37252      -1904.71       1904.71       9749.08       11653.8    
  46  0.662683     -0.411458      -330.327       330.327       10373.9       10704.2    
  47  0.204704      -1.58619      -1273.43       1273.43       10584.0       11857.4    
  48  0.985446     -0.146609E-01  -11.7701       11.7701       10150.3       10162.0    
  49  0.105847      -2.24576      -1802.94       1802.94       10702.9       12505.9    
  50  0.843201     -0.170550      -136.921       136.921       10157.0       10294.0    
  51  0.364087      -1.01036      -811.141       811.141       10596.7       11407.9    
  52  0.650651E-01  -2.73237      -2193.60       2193.60       10625.7       12819.3    
  53  0.968103     -0.324171E-01  -26.0251       26.0251       7603.86       7629.88    
  54  0.131933      -2.02546      -1626.08       1626.08       9962.25       11588.3    
  55  0.906847     -0.977815E-01  -78.5010       78.5010       10689.6       10768.1    
  56  0.443328E-01  -3.11603      -2501.61       2501.61       10888.5       13390.1    
  57  0.507045     -0.679156      -545.241       545.241       10683.4       11228.7    
  58  0.287709      -1.24581      -1000.16       1000.16       10670.0       11670.1    
  59  0.900299     -0.105028      -84.3189       84.3189       11846.9       11931.2    
  60  0.689829E-01  -2.67390      -2146.66       2146.66       10673.5       12820.2    
  61  0.876407     -0.131925      -105.912       105.912       10940.5       11046.5    
  62  0.718081     -0.331173      -265.872       265.872       10751.5       11017.3    
  63  0.177063      -1.73125      -1389.89       1389.89       10723.2       12113.1    
  64  0.749425E-01  -2.59103      -2080.14       2080.14       4953.55       7033.68    
loop,thermsimp(1:2)       88   1214.92       2972.01    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       7536.74          0.89          1.09         23.04          0.26          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7536.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       88
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       89
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      206     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -105.588       105.588       4343.46       4449.04    
   2  0.765270     -0.267527      -214.776       214.776       4437.73       4652.50    
   3  0.215687      -1.53393      -1231.47       1231.47       5728.33       6959.80    
   4  0.999601E-01  -2.30298      -1848.88       1848.88       6144.95       7993.84    
   5  0.706519     -0.347405      -278.904       278.904       6093.62       6372.52    
   6  0.201358      -1.60267      -1286.66       1286.66       5996.15       7282.81    
   7  0.450677     -0.797005      -639.853       639.853       5990.60       6630.46    
   8  0.897557     -0.108078      -86.7676       86.7676       4953.55       5040.32    
   9  0.161166      -1.82532      -1465.40       1465.40       7130.15       8595.55    
  10  0.972556E-01  -2.33041      -1870.90       1870.90       6959.75       8830.65    
  11  0.742112     -0.298255      -239.445       239.445       7603.86       7843.30    
  12  0.172377      -1.75807      -1411.42       1411.42       6526.89       7938.31    
  13  0.658751     -0.417410      -335.105       335.105       7920.16       8255.26    
  14  0.725340     -0.321114      -257.797       257.797       7510.70       7768.50    
  15  0.501488     -0.690175      -554.087       554.087       7512.56       8066.65    
  16  0.845372     -0.167978      -134.857       134.857       7709.94       7844.79    
  17  0.132369      -2.02216      -1623.43       1623.43       5292.23       6915.67    
  18  0.734515E-01  -2.61113      -2096.27       2096.27       7293.57       9389.84    
  19  0.391205     -0.938523      -753.466       753.466       7593.84       8347.30    
  20  0.376983     -0.975555      -783.196       783.196       8288.68       9071.88    
  21  0.315463      -1.15371      -926.225       926.225       7562.90       8489.13    
  22  0.267113      -1.32008      -1059.79       1059.79       6713.21       7773.00    
  23  0.965292     -0.353243E-01  -28.3591       28.3591       7892.17       7920.52    
  24  0.954592     -0.464714E-01  -37.3082       37.3082       8424.04       8461.34    
  25  0.992414     -0.761515E-02  -6.11360       6.11360       8603.77       8609.88    
  26  0.867953E-02  -4.74679      -3810.82       3810.82       7512.14       11323.0    
  27  0.829585     -0.186829      -149.990       149.990       8203.20       8353.19    
  28  0.349695      -1.05069      -843.520       843.520       8382.14       9225.66    
  29  0.673511     -0.395251      -317.316       317.316       9012.53       9329.85    
  30  0.340696      -1.07676      -864.449       864.449       9020.91       9885.36    
  31  0.558731     -0.582087      -467.311       467.311       8747.78       9215.09    
  32  0.747295     -0.291295      -233.858       233.858       9565.36       9799.22    
  33  0.123287      -2.09324      -1680.50       1680.50       9374.39       11054.9    
  34  0.355051      -1.03549      -831.315       831.315       9645.91       10477.2    
  35  0.511895     -0.669636      -537.597       537.597       10025.9       10563.5    
  36  0.571856E-01  -2.86145      -2297.23       2297.23       10150.3       12447.5    
  37  0.507517     -0.678226      -544.494       544.494       9599.81       10144.3    
  38  0.326770      -1.11850      -897.953       897.953       10157.0       11055.0    
  39  0.736001     -0.306523      -246.083       246.083       8968.45       9214.54    
  40  0.970046     -0.304120E-01  -24.4154       24.4154       6104.52       6128.93    
  41  0.673510     -0.395253      -317.317       317.317       9218.69       9536.01    
  42  0.335032      -1.09353      -877.909       877.909       8905.23       9783.14    
  43  0.872321E-01  -2.43918      -1958.23       1958.23       10373.9       12332.1    
  44  0.749956     -0.287741      -231.004       231.004       10689.6       10920.6    
  45  0.159001      -1.83884      -1476.26       1476.26       10751.5       12227.7    
  46  0.529687     -0.635468      -510.167       510.167       8552.41       9062.58    
  47  0.142415      -1.94901      -1564.71       1564.71       10940.5       12505.2    
  48  0.803387     -0.218919      -175.752       175.752       10683.4       10859.2    
  49  0.709133     -0.343713      -275.940       275.940       10596.7       10872.7    
  50  0.261172      -1.34258      -1077.85       1077.85       9962.25       11040.1    
  51  0.106599      -2.23868      -1797.26       1797.26       9749.08       11546.3    
  52  0.955666     -0.453468E-01  -36.4053       36.4053       10670.0       10706.4    
  53  0.376236     -0.977539      -784.789       784.789       8533.89       9318.68    
  54  0.890774     -0.115665      -92.8583       92.8583       10584.0       10676.9    
  55  0.554077     -0.590452      -474.028       474.028       11846.9       12320.9    
  56  0.892825E-01  -2.41595      -1939.58       1939.58       9582.37       11521.9    
  57  0.941033     -0.607774E-01  -48.7934       48.7934       10723.2       10772.0    
  58  0.209380E-01  -3.86619      -3103.86       3103.86       9415.80       12519.7    
  59  0.427794     -0.849113      -681.685       681.685       9680.84       10362.5    
  60  0.194887      -1.63533      -1312.88       1312.88       10702.9       12015.8    
  61  0.840289     -0.174009      -139.698       139.698       10625.7       10765.4    
  62  0.634527     -0.454875      -365.183       365.183       10673.5       11038.7    
  63  0.159135      -1.83800      -1475.58       1475.58       10888.5       12364.1    
  64  0.182987      -1.69834      -1363.46       1363.46       7536.74       8900.20    
loop,thermsimp(1:2)       89   105.588       214.776    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       6282.74          0.90          1.09         23.05          0.27          0.05         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6282.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       89
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       90
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      207     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -1484.53       1484.53       4343.46       5827.99    
   2  0.894146     -0.111886      -89.8242       89.8242       4437.73       4527.55    
   3  0.721270     -0.326741      -262.315       262.315       4953.55       5215.86    
   4  0.536866     -0.622006      -499.359       499.359       6104.52       6603.88    
   5  0.418107     -0.872017      -700.073       700.073       6093.62       6793.69    
   6  0.391189     -0.938564      -753.499       753.499       5990.60       6744.10    
   7  0.799669     -0.223558      -179.477       179.477       5292.23       5471.71    
   8  0.595070     -0.519076      -416.725       416.725       5728.33       6145.05    
   9  0.384356E-03  -7.86394      -6313.34       6313.34       5996.15       12309.5    
  10  0.654302     -0.424187      -340.546       340.546       7510.70       7851.25    
  11  0.873355     -0.135413      -108.713       108.713       6713.21       6821.92    
  12  0.303212      -1.19332      -958.024       958.024       7603.86       8561.88    
  13  0.434159     -0.834344      -669.829       669.829       7709.94       8379.77    
  14  0.970825     -0.296089E-01  -23.7707       23.7707       7892.17       7915.94    
  15  0.405896     -0.901659      -723.870       723.870       6526.89       7250.76    
  16  0.250423      -1.38461      -1111.59       1111.59       6144.95       7256.54    
  17  0.517030     -0.659654      -529.584       529.584       7512.56       8042.14    
  18  0.165468      -1.79897      -1444.25       1444.25       7920.16       9364.41    
  19  0.679403     -0.386541      -310.323       310.323       7593.84       7904.16    
  20  0.554013     -0.590567      -474.119       474.119       8203.20       8677.32    
  21  0.211764E-01  -3.85487      -3094.77       3094.77       8424.04       11518.8    
  22  0.453828     -0.790038      -634.259       634.259       7562.90       8197.16    
  23  0.377409     -0.974426      -782.289       782.289       7130.15       7912.44    
  24  0.496879     -0.699408      -561.499       561.499       8603.77       9165.27    
  25  0.214619      -1.53889      -1235.45       1235.45       6959.75       8195.20    
  26  0.724154     -0.322751      -259.111       259.111       7536.74       7795.85    
  27  0.385609     -0.952932      -765.033       765.033       8552.41       9317.44    
  28  0.777864     -0.251204      -201.671       201.671       8288.68       8490.35    
  29  0.709283     -0.343500      -275.769       275.769       8968.45       9244.22    
  30  0.191760      -1.65151      -1325.87       1325.87       8747.78       10073.6    
  31  0.347616      -1.05666      -848.306       848.306       8382.14       9230.44    
  32  0.191581      -1.65244      -1326.62       1326.62       8533.89       9860.51    
  33  0.770989     -0.260081      -208.799       208.799       9012.53       9221.33    
  34  0.788566E-01  -2.54012      -2039.26       2039.26       7293.57       9332.83    
  35  0.229474      -1.47197      -1181.73       1181.73       9218.69       10400.4    
  36  0.339326      -1.08079      -867.684       867.684       8905.23       9772.91    
  37  0.220886      -1.51011      -1212.35       1212.35       9565.36       10777.7    
  38  0.223644      -1.49770      -1202.38       1202.38       9020.91       10223.3    
  39  0.138287      -1.97842      -1588.32       1588.32       9599.81       11188.1    
  40  0.796402     -0.227651      -182.763       182.763       9680.84       9863.61    
  41  0.104384      -2.25968      -1814.12       1814.12       9645.91       11460.0    
  42  0.919642     -0.837713E-01  -67.2533       67.2533       10025.9       10093.2    
  43  0.360767      -1.01952      -818.495       818.495       10584.0       11402.5    
  44  0.924300     -0.787181E-01  -63.1965       63.1965       10670.0       10733.2    
  45  0.561139     -0.577786      -463.859       463.859       10625.7       11089.6    
  46  0.509073E-01  -2.97775      -2390.60       2390.60       10723.2       13113.8    
  47  0.715469     -0.334817      -268.798       268.798       10683.4       10952.2    
  48  0.294040E-01  -3.52662      -2831.25       2831.25       10596.7       13428.0    
  49  0.264026E-02  -5.93688      -4766.25       4766.25       10689.6       15455.9    
  50  0.634029     -0.455661      -365.814       365.814       10673.5       11039.3    
  51  0.319148      -1.14210      -916.903       916.903       9962.25       10879.1    
  52  0.495674     -0.701836      -563.449       563.449       9374.39       9937.84    
  53  0.838343     -0.176328      -141.560       141.560       10157.0       10298.6    
  54  0.240556      -1.42480      -1143.86       1143.86       7512.14       8656.00    
  55  0.919800     -0.835990E-01  -67.1151       67.1151       9582.37       9649.48    
  56  0.652899     -0.426332      -342.269       342.269       9749.08       10091.3    
  57  0.777375     -0.251832      -202.176       202.176       10702.9       10905.1    
  58  0.988137     -0.119340E-01  -9.58085       9.58085       10751.5       10761.0    
  59  0.771111     -0.259922      -208.671       208.671       11846.9       12055.5    
  60  0.980963     -0.192203E-01  -15.4305       15.4305       10373.9       10389.3    
  61  0.358823      -1.02493      -822.831       822.831       10888.5       11711.3    
  62  0.398479     -0.920100      -738.675       738.675       10150.3       10888.9    
  63  0.524779     -0.644778      -517.641       517.641       10940.5       11458.2    
  64  0.391693E-01  -3.23986      -2601.03       2601.03       6282.74       8883.76    
loop,thermsimp(1:2)       90   1484.53       89.8242    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209       5711.06          0.89          1.09         23.07          0.17          0.04         25.26
Just calling func    0   0         25.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5711.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       90
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       91
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      208     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -1825.73       1825.73       4437.73       6263.46    
   2  0.846291     -0.166892      -133.984       133.984       4953.55       5087.53    
   3  0.167054      -1.78944      -1436.60       1436.60       5292.23       6728.83    
   4  0.786038     -0.240750      -193.279       193.279       4343.46       4536.74    
   5  0.680218     -0.385341      -309.360       309.360       5728.33       6037.69    
   6  0.843894     -0.169729      -136.262       136.262       6104.52       6240.78    
   7  0.295559      -1.21889      -978.549       978.549       5990.60       6969.15    
   8  0.383493     -0.958433      -769.450       769.450       6093.62       6863.07    
   9  0.867247     -0.142431      -114.347       114.347       6713.21       6827.55    
  10  0.241960      -1.41898      -1139.19       1139.19       6526.89       7666.08    
  11  0.486925     -0.719645      -577.746       577.746       6144.95       6722.70    
  12  0.750166     -0.287460      -230.779       230.779       7536.74       7767.52    
  13  0.507045     -0.679156      -545.241       545.241       7510.70       8055.94    
  14  0.237743      -1.43656      -1153.30       1153.30       7593.84       8747.14    
  15  0.256837E-01  -3.66190      -2939.85       2939.85       7130.15       10070.0    
  16  0.776460     -0.253010      -203.121       203.121       7892.17       8095.29    
  17  0.316300      -1.15106      -924.098       924.098       7512.56       8436.66    
  18  0.493161     -0.706919      -567.529       567.529       6959.75       7527.28    
  19  0.807271     -0.214096      -171.881       171.881       7562.90       7734.78    
  20  0.338915      -1.08201      -868.657       868.657       7709.94       8578.59    
  21  0.132986      -2.01751      -1619.70       1619.70       8288.68       9908.38    
  22  0.409975     -0.891659      -715.843       715.843       7603.86       8319.70    
  23  0.525021     -0.644317      -517.271       517.271       7512.14       8029.41    
  24  0.393064     -0.933783      -749.661       749.661       8203.20       8952.86    
  25  0.176068      -1.73689      -1394.41       1394.41       6282.74       7677.15    
  26  0.965490     -0.351191E-01  -28.1944       28.1944       8603.77       8631.96    
  27  0.387767     -0.947350      -760.552       760.552       9012.53       9773.08    
  28  0.936248     -0.658753E-01  -52.8861       52.8861       8382.14       8435.02    
  29  0.914720     -0.891370E-01  -71.5611       71.5611       8968.45       9040.01    
  30  0.332171      -1.10211      -884.793       884.793       8552.41       9437.20    
  31  0.845314E-01  -2.47063      -1983.47       1983.47       7293.57       9277.04    
  32  0.687741     -0.374343      -300.530       300.530       7920.16       8220.69    
  33  0.899776     -0.105610      -84.7856       84.7856       9582.37       9667.15    
  34  0.558791     -0.581980      -467.225       467.225       8905.23       9372.46    
  35  0.882799     -0.124658      -100.078       100.078       8533.89       8633.97    
  36  0.235569      -1.44575      -1160.68       1160.68       9680.84       10841.5    
  37  0.533400     -0.628484      -504.560       504.560       9374.39       9878.95    
  38  0.147169      -1.91617      -1538.34       1538.34       8747.78       10286.1    
  39  0.966208E-01  -2.33696      -1876.16       1876.16       9749.08       11625.2    
  40  0.952887     -0.482588E-01  -38.7432       38.7432       10025.9       10064.7    
  41  0.155551      -1.86078      -1493.87       1493.87       9020.91       10514.8    
  42  0.645067     -0.438401      -351.958       351.958       10157.0       10509.0    
  43  0.394254     -0.930759      -747.233       747.233       10373.9       11121.1    
  44  0.546893     -0.603501      -484.504       484.504       9218.69       9703.19    
  45  0.390314     -0.940803      -755.296       755.296       10670.0       11425.3    
  46  0.311561      -1.16616      -936.218       936.218       10751.5       11687.7    
  47  0.752427E-01  -2.58704      -2076.93       2076.93       9565.36       11642.3    
  48  0.144673      -1.93328      -1552.08       1552.08       9962.25       11514.3    
  49  0.297567      -1.21212      -973.112       973.112       10150.3       11123.4    
  50  0.544131     -0.608565      -488.569       488.569       10702.9       11191.5    
  51  0.750603E-01  -2.58946      -2078.88       2078.88       10683.4       12762.3    
  52  0.127547      -2.05927      -1653.23       1653.23       10673.5       12326.7    
  53  0.839209     -0.175296      -140.731       140.731       10625.7       10766.5    
  54  0.718305     -0.330861      -265.622       265.622       9599.81       9865.43    
  55  0.246952      -1.39856      -1122.80       1122.80       10584.0       11706.8    
  56  0.550710     -0.596548      -478.921       478.921       10940.5       11419.5    
  57  0.588510     -0.530162      -425.625       425.625       9645.91       10071.5    
  58  0.361548      -1.01736      -816.758       816.758       8424.04       9240.79    
  59  0.962524     -0.381965E-01  -30.6650       30.6650       10888.5       10919.2    
  60  0.510442     -0.672478      -539.879       539.879       11846.9       12386.8    
  61  0.177498      -1.72880      -1387.91       1387.91       5996.15       7384.06    
  62  0.775349     -0.254441      -204.271       204.271       10723.2       10927.5    
  63  0.313518E-01  -3.46248      -2779.75       2779.75       10596.7       13376.5    
  64  0.136553      -1.99105      -1598.45       1598.45       5711.06       7309.52    
loop,thermsimp(1:2)       91   1825.73       133.984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       5561.24          0.90          1.09         23.06          0.28          0.04         25.38
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5561.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       91
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       92
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      209     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -1220.61       1220.61       4343.46       5564.06    
   2  0.389473     -0.942961      -757.029       757.029       4953.55       5710.58    
   3  0.919121     -0.843378E-01  -67.7081       67.7081       5728.33       5796.03    
   4  0.970518     -0.299250E-01  -24.0244       24.0244       6104.52       6128.54    
   5  0.713317     -0.337830      -271.217       271.217       4437.73       4708.95    
   6  0.639607     -0.446902      -358.782       358.782       6144.95       6503.74    
   7  0.712661     -0.338749      -271.955       271.955       5292.23       5564.19    
   8  0.212311      -1.54970      -1244.14       1244.14       6713.21       7957.34    
   9  0.831769     -0.184200      -147.880       147.880       6093.62       6241.50    
  10  0.794875     -0.229571      -184.304       184.304       5990.60       6174.91    
  11  0.909815     -0.945137E-01  -75.8776       75.8776       5711.06       5786.94    
  12  0.753651E-01  -2.58541      -2075.62       2075.62       5996.15       8071.77    
  13  0.676081     -0.391442      -314.258       314.258       6959.75       7274.01    
  14  0.597437     -0.515107      -413.539       413.539       6526.89       6940.43    
  15  0.146947      -1.91768      -1539.56       1539.56       6282.74       7822.29    
  16  0.854910     -0.156760      -125.850       125.850       7562.90       7688.75    
  17  0.984999     -0.151146E-01  -12.1343       12.1343       7536.74       7548.87    
  18  0.533419     -0.628448      -504.531       504.531       7512.14       8016.67    
  19  0.383774     -0.957703      -768.864       768.864       7510.70       8279.56    
  20  0.691729     -0.368561      -295.889       295.889       7892.17       8188.05    
  21  0.313732E-01  -3.46180      -2779.21       2779.21       7920.16       10699.4    
  22  0.415635     -0.877947      -704.834       704.834       7603.86       8308.69    
  23  0.288746      -1.24221      -997.270       997.270       8382.14       9379.41    
  24  0.176464      -1.73464      -1392.60       1392.60       7512.56       8905.16    
  25  0.881312     -0.126344      -101.432       101.432       7709.94       7811.37    
  26  0.962783     -0.379267E-01  -30.4484       30.4484       8603.77       8634.22    
  27  0.415450     -0.878393      -705.192       705.192       8533.89       9239.08    
  28  0.271836      -1.30256      -1045.72       1045.72       7593.84       8639.56    
  29  0.926655     -0.761736E-01  -61.1537       61.1537       8203.20       8264.35    
  30  0.277790      -1.28089      -1028.33       1028.33       8968.45       9996.78    
  31  0.189974      -1.66087      -1333.38       1333.38       8424.04       9757.42    
  32  0.410540     -0.890281      -714.736       714.736       7293.57       8008.30    
  33  0.952387     -0.487839E-01  -39.1647       39.1647       8905.23       8944.40    
  34  0.896015     -0.109798      -88.1481       88.1481       8552.41       8640.56    
  35  0.121549E-01  -4.41002      -3540.46       3540.46       9582.37       13122.8    
  36  0.723911     -0.323087      -259.381       259.381       9218.69       9478.07    
  37  0.759053     -0.275683      -221.324       221.324       9012.53       9233.85    
  38  0.969929     -0.305320E-01  -24.5117       24.5117       9599.81       9624.32    
  39  0.852636     -0.159422      -127.987       127.987       9374.39       9502.38    
  40  0.730471     -0.314065      -252.138       252.138       8288.68       8540.82    
  41  0.528358     -0.637981      -512.184       512.184       10025.9       10538.1    
  42  0.404403     -0.905344      -726.829       726.829       7130.15       7856.98    
  43  0.232822      -1.45748      -1170.10       1170.10       9645.91       10816.0    
  44  0.847643     -0.165296      -132.703       132.703       8747.78       8880.48    
  45  0.429393E-01  -3.14797      -2527.25       2527.25       10157.0       12684.3    
  46  0.673157     -0.395777      -317.738       317.738       9020.91       9338.64    
  47  0.806068E-01  -2.51817      -2021.64       2021.64       10625.7       12647.4    
  48  0.926018     -0.768619E-01  -61.7063       61.7063       9680.84       9742.55    
  49  0.167973      -1.78395      -1432.19       1432.19       10888.5       12320.7    
  50  0.780773     -0.247471      -198.675       198.675       10723.2       10921.9    
  51  0.565702E-01  -2.87227      -2305.92       2305.92       10373.9       12679.8    
  52  0.646011     -0.436939      -350.784       350.784       10150.3       10501.1    
  53  0.455316     -0.786763      -631.630       631.630       10702.9       11334.6    
  54  0.410066     -0.891437      -715.664       715.664       10940.5       11656.2    
  55  0.934064     -0.682104E-01  -54.7607       54.7607       10670.0       10724.7    
  56  0.511079     -0.671231      -538.878       538.878       9962.25       10501.1    
  57  0.578130     -0.547957      -439.911       439.911       9749.08       10189.0    
  58  0.458047     -0.780783      -626.829       626.829       9565.36       10192.2    
  59  0.223630      -1.49776      -1202.44       1202.44       10751.5       11953.9    
  60  0.952824E-01  -2.35091      -1887.36       1887.36       10584.0       12471.4    
  61  0.995385     -0.462583E-02  -3.71371       3.71371       10673.5       10677.2    
  62  0.675298     -0.392602      -315.189       315.189       11846.9       12162.1    
  63  0.728172     -0.317218      -254.669       254.669       10683.4       10938.1    
  64  0.240868      -1.42350      -1142.82       1142.82       5561.24       6704.06    
loop,thermsimp(1:2)       92   1220.61       757.029    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       6567.58          0.90          1.09         23.05          0.20          0.04         25.28
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212       5200.90          0.89          1.09         23.09          0.24          0.05         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5200.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       92
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       93
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      211     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -1530.60       1530.60       4437.73       5968.33    
   2  0.695074     -0.363738      -292.016       292.016       4343.46       4635.47    
   3  0.541180     -0.614003      -492.934       492.934       5292.23       5785.17    
   4  0.189791      -1.66183      -1334.15       1334.15       4953.55       6287.70    
   5  0.245553      -1.40424      -1127.35       1127.35       5711.06       6838.42    
   6  0.641474     -0.443986      -356.442       356.442       5728.33       6084.77    
   7  0.308462      -1.17616      -944.243       944.243       6104.52       7048.76    
   8  0.478005     -0.738133      -592.589       592.589       5990.60       6583.19    
   9  0.395759     -0.926951      -744.175       744.175       6093.62       6837.79    
  10  0.438776E-01  -3.12635      -2509.90       2509.90       6144.95       8654.85    
  11  0.294628E-01  -3.52463      -2829.65       2829.65       5561.24       8390.88    
  12  0.331052E-01  -3.40806      -2736.07       2736.07       6526.89       9262.96    
  13  0.916325E-01  -2.38997      -1918.72       1918.72       6959.75       8878.47    
  14  0.985908     -0.141919E-01  -11.3935       11.3935       7536.74       7548.13    
  15  0.511724     -0.669970      -537.866       537.866       7562.90       8100.77    
  16  0.185695      -1.68365      -1351.67       1351.67       7709.94       9061.61    
  17  0.830711     -0.185474      -148.902       148.902       6282.74       6431.64    
  18  0.765179E-04  -9.47799      -7609.13       7609.13       7130.15       14739.3    
  19  0.129365      -2.04512      -1641.86       1641.86       6713.21       8355.07    
  20  0.796363     -0.227700      -182.802       182.802       7293.57       7476.37    
  21  0.589256     -0.528895      -424.608       424.608       7512.14       7936.75    
  22  0.770995     -0.260073      -208.792       208.792       5996.15       6204.94    
  23  0.685430     -0.377709      -303.233       303.233       7892.17       8195.40    
  24  0.487688     -0.718080      -576.490       576.490       8203.20       8779.69    
  25  0.114898      -2.16371      -1737.07       1737.07       7510.70       9247.78    
  26  0.165093      -1.80124      -1446.08       1446.08       7603.86       9049.93    
  27  0.302275      -1.19642      -960.511       960.511       8288.68       9249.19    
  28  0.123669      -2.09014      -1678.01       1678.01       8603.77       10281.8    
  29  0.960526     -0.402739E-01  -32.3327       32.3327       7593.84       7626.17    
  30  0.744557     -0.294966      -236.805       236.805       8552.41       8789.21    
  31  0.418436     -0.871232      -699.443       699.443       8747.78       9447.22    
  32  0.624411     -0.470947      -378.086       378.086       7512.56       7890.65    
  33  0.920055     -0.833222E-01  -66.8928       66.8928       8905.23       8972.12    
  34  0.330507      -1.10713      -888.826       888.826       9012.53       9901.36    
  35  0.889566     -0.117022      -93.9474       93.9474       8533.89       8627.84    
  36  0.269410      -1.31152      -1052.92       1052.92       9020.91       10073.8    
  37  0.458780     -0.779184      -625.545       625.545       8382.14       9007.68    
  38  0.952588     -0.485730E-01  -38.9954       38.9954       9218.69       9257.68    
  39  0.213836      -1.54254      -1238.39       1238.39       9374.39       10612.8    
  40  0.460697     -0.775015      -622.199       622.199       9599.81       10222.0    
  41  0.571693     -0.559153      -448.900       448.900       9680.84       10129.7    
  42  0.201363      -1.60265      -1286.64       1286.64       8424.04       9710.67    
  43  0.707817     -0.345570      -277.431       277.431       8968.45       9245.88    
  44  0.927118     -0.756745E-01  -60.7531       60.7531       9749.08       9809.83    
  45  0.288916      -1.24162      -996.799       996.799       9565.36       10562.2    
  46  0.702737     -0.352773      -283.213       283.213       10150.3       10433.5    
  47  0.253190      -1.37362      -1102.77       1102.77       9962.25       11065.0    
  48  0.709086     -0.343779      -275.993       275.993       10025.9       10301.9    
  49  0.399421     -0.917738      -736.780       736.780       10673.5       11410.3    
  50  0.837301     -0.177572      -142.559       142.559       7920.16       8062.72    
  51  0.906694     -0.979507E-01  -78.6369       78.6369       10670.0       10748.6    
  52  0.479547     -0.734913      -590.004       590.004       9645.91       10235.9    
  53  0.573668     -0.555704      -446.131       446.131       10723.2       11169.3    
  54  0.616113     -0.484325      -388.826       388.826       10683.4       11072.3    
  55  0.899004     -0.106467      -85.4742       85.4742       10702.9       10788.4    
  56  0.668105     -0.403310      -323.786       323.786       10940.5       11264.3    
  57  0.464354     -0.767107      -615.850       615.850       10751.5       11367.3    
  58  0.298472E-01  -3.51166      -2819.24       2819.24       11846.9       14666.1    
  59  0.458507     -0.779779      -626.023       626.023       10888.5       11514.5    
  60  0.372295E-01  -3.29065      -2641.81       2641.81       10584.0       13225.8    
  61  0.349332      -1.05173      -844.354       844.354       10625.7       11470.1    
  62  0.396867     -0.924153      -741.930       741.930       10373.9       11115.8    
  63  0.599776     -0.511199      -410.401       410.401       10157.0       10567.5    
  64  0.175124      -1.74226      -1398.72       1398.72       5200.90       6599.62    
loop,thermsimp(1:2)       93   1530.60       292.016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213       8277.14          0.90          1.09         23.09          0.20          0.04         25.31
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8277.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       93
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       94
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      212     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -137.794       137.794       4343.46       4481.25    
   2  0.478368     -0.737375      -591.980       591.980       5292.23       5884.21    
   3  0.283498      -1.26055      -1012.00       1012.00       4437.73       5449.72    
   4  0.520516     -0.652935      -524.190       524.190       5728.33       6252.52    
   5  0.703282E-01  -2.65458      -2131.15       2131.15       5996.15       8127.30    
   6  0.914137     -0.897748E-01  -72.0731       72.0731       4953.55       5025.62    
   7  0.479535     -0.734938      -590.024       590.024       6282.74       6872.76    
   8  0.921875     -0.813456E-01  -65.3060       65.3060       5990.60       6055.91    
   9  0.739547     -0.301718      -242.225       242.225       5200.90       5443.13    
  10  0.790753     -0.234770      -188.478       188.478       6093.62       6282.10    
  11  0.212247E-01  -3.85259      -3092.94       3092.94       5711.06       8804.00    
  12  0.286971      -1.24837      -1002.22       1002.22       6104.52       7106.74    
  13  0.695666     -0.362886      -291.332       291.332       7293.57       7584.90    
  14  0.534590     -0.626255      -502.770       502.770       7536.74       8039.51    
  15  0.945577     -0.559603E-01  -44.9261       44.9261       7593.84       7638.76    
  16  0.619446     -0.478930      -384.495       384.495       7512.56       7897.05    
  17  0.291083E-01  -3.53673      -2839.36       2839.36       7512.14       10351.5    
  18  0.372584E-01  -3.28988      -2641.18       2641.18       7920.16       10561.3    
  19  0.713241     -0.337936      -271.302       271.302       7562.90       7834.20    
  20  0.280281      -1.27196      -1021.16       1021.16       7892.17       8913.32    
  21  0.254796      -1.36729      -1097.69       1097.69       6713.21       7810.90    
  22  0.498598     -0.695955      -558.727       558.727       5561.24       6119.96    
  23  0.515261E-01  -2.96567      -2380.90       2380.90       8533.89       10914.8    
  24  0.347627      -1.05662      -848.280       848.280       6144.95       6993.23    
  25  0.696212     -0.362102      -290.703       290.703       8203.20       8493.90    
  26  0.707749E-01  -2.64825      -2126.07       2126.07       8552.41       10678.5    
  27  0.364523E-01  -3.31175      -2658.74       2658.74       6959.75       9618.49    
  28  0.895087E-02  -4.71600      -3786.11       3786.11       8905.23       12691.3    
  29  0.333194      -1.09903      -882.325       882.325       8382.14       9264.46    
  30  0.451375     -0.795457      -638.609       638.609       7603.86       8242.47    
  31  0.849961E-01  -2.46515      -1979.07       1979.07       7709.94       9689.01    
  32  0.524791     -0.644756      -517.624       517.624       8968.45       9486.08    
  33  0.641068     -0.444619      -356.950       356.950       7510.70       7867.65    
  34  0.757376     -0.277895      -223.100       223.100       8288.68       8511.78    
  35  0.760597     -0.273651      -219.693       219.693       9218.69       9438.38    
  36  0.709070     -0.343801      -276.010       276.010       6526.89       6802.90    
  37  0.794718     -0.229768      -184.462       184.462       8747.78       8932.24    
  38  0.869679     -0.139632      -112.099       112.099       8424.04       8536.13    
  39  0.229100E-01  -3.77618      -3031.60       3031.60       9749.08       12780.7    
  40  0.935590     -0.665776E-01  -53.4499       53.4499       9012.53       9065.98    
  41  0.889453     -0.117149      -94.0495       94.0495       9020.91       9114.96    
  42  0.529054     -0.636665      -511.128       511.128       9680.84       10192.0    
  43  0.907902     -0.966186E-01  -77.5674       77.5674       9599.81       9677.38    
  44  0.693802     -0.365568      -293.486       293.486       9645.91       9939.40    
  45  0.883803     -0.123521      -99.1655       99.1655       8603.77       8702.94    
  46  0.275134E-01  -3.59308      -2884.60       2884.60       10025.9       12910.5    
  47  0.324767      -1.12465      -902.890       902.890       10150.3       11053.2    
  48  0.853326     -0.158614      -127.339       127.339       9565.36       9692.70    
  49  0.325639      -1.12197      -900.739       900.739       10157.0       11057.8    
  50  0.773280     -0.257115      -206.417       206.417       9374.39       9580.81    
  51  0.108890      -2.21741      -1780.19       1780.19       10670.0       12450.1    
  52  0.188532E-01  -3.97107      -3188.06       3188.06       10702.9       13891.0    
  53  0.970927     -0.295045E-01  -23.6868       23.6868       9962.25       9985.93    
  54  0.549714     -0.598357      -480.374       480.374       10683.4       11163.8    
  55  0.937888E-01  -2.36671      -1900.04       1900.04       10373.9       12273.9    
  56  0.293516      -1.22582      -984.116       984.116       10723.2       11707.3    
  57  0.598789     -0.512846      -411.723       411.723       10940.5       11352.3    
  58  0.173412      -1.75209      -1406.61       1406.61       10751.5       12158.1    
  59  0.552776     -0.592802      -475.914       475.914       10673.5       11149.4    
  60  0.586717     -0.533213      -428.075       428.075       10625.7       11053.8    
  61  0.902886     -0.102159      -82.0155       82.0155       10888.5       10970.5    
  62  0.423679     -0.858778      -689.445       689.445       10584.0       11273.4    
  63  0.796344E-01  -2.53031      -2031.38       2031.38       11846.9       13878.3    
  64  0.894023     -0.112024      -89.9351       89.9351       8277.14       8367.08    
loop,thermsimp(1:2)       94   137.794       591.980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       5445.82          0.90          1.09         23.05          0.20          0.04         25.28
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5445.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       94
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       95
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      213     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -236.704       236.704       4343.46       4580.16    
   2  0.739179     -0.302215      -242.625       242.625       4953.55       5196.17    
   3  0.131167      -2.03128      -1630.75       1630.75       5200.90       6831.66    
   4  0.523356     -0.647493      -519.821       519.821       4437.73       4957.55    
   5  0.660412     -0.414891      -333.083       333.083       5292.23       5625.32    
   6  0.433074E-01  -3.13943      -2520.40       2520.40       5990.60       8511.00    
   7  0.480352     -0.733236      -588.657       588.657       5561.24       6149.89    
   8  0.808114     -0.213053      -171.043       171.043       5728.33       5899.37    
   9  0.723804     -0.323235      -259.500       259.500       6093.62       6353.12    
  10  0.322682      -1.13109      -908.060       908.060       6526.89       7434.95    
  11  0.898907     -0.106576      -85.5616       85.5616       6282.74       6368.30    
  12  0.359972      -1.02173      -820.265       820.265       6144.95       6965.22    
  13  0.879118     -0.128836      -103.432       103.432       6104.52       6207.95    
  14  0.963559     -0.371220E-01  -29.8023       29.8023       7293.57       7323.37    
  15  0.662848     -0.411210      -330.128       330.128       7593.84       7923.97    
  16  0.648402     -0.433244      -347.817       347.817       6713.21       7061.03    
  17  0.375343     -0.979916      -786.697       786.697       7562.90       8349.60    
  18  0.812441     -0.207712      -166.756       166.756       7510.70       7677.46    
  19  0.248177E-01  -3.69620      -2967.38       2967.38       7512.56       10479.9    
  20  0.653530     -0.425366      -341.493       341.493       7536.74       7878.23    
  21  0.712244     -0.339334      -272.425       272.425       5996.15       6268.57    
  22  0.358229      -1.02658      -824.162       824.162       7603.86       8428.02    
  23  0.325518      -1.12234      -901.035       901.035       8277.14       9178.17    
  24  0.770349     -0.260912      -209.465       209.465       8203.20       8412.66    
  25  0.633518E-01  -2.75905      -2215.02       2215.02       8288.68       10503.7    
  26  0.168796      -1.77907      -1428.27       1428.27       8424.04       9852.31    
  27  0.562007     -0.576241      -462.618       462.618       8603.77       9066.39    
  28  0.156316      -1.85588      -1489.94       1489.94       5711.06       7201.00    
  29  0.967732     -0.328002E-01  -26.3327       26.3327       7892.17       7918.50    
  30  0.538071     -0.619766      -497.561       497.561       8747.78       9245.34    
  31  0.967495     -0.330453E-01  -26.5295       26.5295       9012.53       9039.06    
  32  0.771619     -0.259265      -208.143       208.143       9020.91       9229.05    
  33  0.246044      -1.40225      -1125.75       1125.75       8382.14       9507.89    
  34  0.700731     -0.355631      -285.508       285.508       9218.69       9504.20    
  35  0.382714     -0.960468      -771.084       771.084       8968.45       9739.54    
  36  0.580395     -0.544047      -436.772       436.772       9374.39       9811.16    
  37  0.305131      -1.18701      -952.959       952.959       6959.75       7912.71    
  38  0.624250     -0.471204      -378.292       378.292       9599.81       9978.10    
  39  0.575432     -0.552634      -443.666       443.666       7709.94       8153.60    
  40  0.701335     -0.354770      -284.817       284.817       9565.36       9850.18    
  41  0.290211      -1.23715      -993.207       993.207       9645.91       10639.1    
  42  0.140976      -1.95916      -1572.86       1572.86       9962.25       11535.1    
  43  0.275714      -1.28839      -1034.35       1034.35       9680.84       10715.2    
  44  0.856479     -0.154925      -124.377       124.377       7512.14       7636.52    
  45  0.994286     -0.573084E-02  -4.60084       4.60084       7920.16       7924.76    
  46  0.913008     -0.910102E-01  -73.0649       73.0649       8552.41       8625.47    
  47  0.204063      -1.58933      -1275.95       1275.95       8533.89       9809.84    
  48  0.388833     -0.944605      -758.349       758.349       10888.5       11646.8    
  49  0.781619     -0.246387      -197.805       197.805       10150.3       10348.1    
  50  0.373421     -0.985049      -790.818       790.818       10625.7       11416.5    
  51  0.834918     -0.180422      -144.846       144.846       10157.0       10301.9    
  52  0.174969      -1.74315      -1399.43       1399.43       10673.5       12073.0    
  53  0.531353     -0.632329      -507.647       507.647       10683.4       11191.1    
  54  0.339530      -1.08019      -867.201       867.201       10584.0       11451.2    
  55  0.929760     -0.728288E-01  -58.4685       58.4685       10940.5       10999.0    
  56  0.223523      -1.49824      -1202.82       1202.82       10723.2       11926.0    
  57  0.557869     -0.583631      -468.551       468.551       10751.5       11220.0    
  58  0.521577     -0.650898      -522.555       522.555       10373.9       10896.4    
  59  0.856336     -0.155092      -124.511       124.511       10670.0       10794.5    
  60  0.645536     -0.437674      -351.374       351.374       8905.23       9256.60    
  61  0.438677     -0.823992      -661.518       661.518       9749.08       10410.6    
  62  0.346732      -1.05920      -850.350       850.350       10025.9       10876.3    
  63  0.902848     -0.102201      -82.0488       82.0488       11846.9       11928.9    
  64  0.578219     -0.547803      -439.787       439.787       5445.82       5885.61    
loop,thermsimp(1:2)       95   236.704       242.625    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       5326.05          0.90          1.09         23.05          0.40          0.04         25.47
Just calling func    0   0         25.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5326.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       95
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   1890.09    

hmean,hstd :    8118.73       1890.09    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    8118.73       1890.09    
h(1),h(best1),h(np1) :    4343.46       4343.46       5326.05    
htherm(1),htherm(best1),htherm(np1) :    4580.16       4580.16       12073.0    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        1
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      214     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -3122.68       3122.68       4343.46       7466.14    
   2  0.977100     -0.231667E-01  -18.5987       18.5987       4437.73       4456.33    
   3  0.491467     -0.710361      -570.292       570.292       4953.55       5523.84    
   4  0.802113E-01  -2.52309      -2025.59       2025.59       5292.23       7317.82    
   5  0.891044     -0.115361      -92.6145       92.6145       5445.82       5538.43    
   6  0.397551     -0.922433      -740.549       740.549       5728.33       6468.87    
   7  0.121203      -2.11029      -1694.19       1694.19       5561.24       7255.42    
   8  0.789985E-01  -2.53833      -2037.82       2037.82       6104.52       8142.34    
   9  0.921855     -0.813679E-01  -65.3238       65.3238       5996.15       6061.47    
  10  0.252671      -1.37567      -1104.41       1104.41       6093.62       7198.03    
  11  0.787271     -0.239182      -192.020       192.020       6282.74       6474.76    
  12  0.634653     -0.454676      -365.024       365.024       5200.90       5565.92    
  13  0.706648     -0.347222      -278.757       278.757       6144.95       6423.71    
  14  0.349740E-01  -3.35315      -2691.98       2691.98       6713.21       9405.19    
  15  0.686787     -0.375731      -301.644       301.644       5711.06       6012.71    
  16  0.309348      -1.17329      -941.940       941.940       7293.57       8235.51    
  17  0.703748     -0.351336      -282.060       282.060       6526.89       6808.95    
  18  0.985092     -0.150207E-01  -12.0590       12.0590       7512.14       7524.20    
  19  0.440741     -0.819298      -657.750       657.750       7510.70       8168.45    
  20  0.796112     -0.228015      -183.055       183.055       7536.74       7719.79    
  21  0.451938     -0.794210      -637.609       637.609       6959.75       7597.36    
  22  0.230902      -1.46576      -1176.74       1176.74       7892.17       9068.91    
  23  0.760212     -0.274159      -220.100       220.100       7593.84       7813.94    
  24  0.250434E-02  -5.98973      -4808.68       4808.68       7920.16       12728.8    
  25  0.627913E-01  -2.76794      -2222.16       2222.16       7709.94       9932.10    
  26  0.263128      -1.33511      -1071.86       1071.86       7562.90       8634.76    
  27  0.177986      -1.72605      -1385.71       1385.71       8203.20       9588.91    
  28  0.919776     -0.836247E-01  -67.1357       67.1357       7603.86       7670.99    
  29  0.854272     -0.157506      -126.449       126.449       5990.60       6117.05    
  30  0.648187     -0.433576      -348.084       348.084       8552.41       8900.49    
  31  0.853797     -0.158061      -126.895       126.895       9012.53       9139.42    
  32  0.484551     -0.724533      -581.670       581.670       8603.77       9185.44    
  33  0.423817     -0.858454      -689.184       689.184       8277.14       8966.32    
  34  0.932015     -0.704065E-01  -56.5238       56.5238       9020.91       9077.43    
  35  0.161906      -1.82074      -1461.73       1461.73       8747.78       10209.5    
  36  0.812519     -0.207617      -166.679       166.679       8905.23       9071.91    
  37  0.346838      -1.05890      -850.106       850.106       9218.69       10068.8    
  38  0.477141     -0.739943      -594.041       594.041       8382.14       8976.18    
  39  0.931946     -0.704808E-01  -56.5835       56.5835       8968.45       9025.04    
  40  0.189794      -1.66182      -1334.14       1334.14       8533.89       9868.03    
  41  0.361902      -1.01638      -815.973       815.973       9374.39       10190.4    
  42  0.775630E-02  -4.85925      -3901.11       3901.11       9565.36       13466.5    
  43  0.292497      -1.22930      -986.907       986.907       8424.04       9410.94    
  44  0.264300      -1.33067      -1068.29       1068.29       9599.81       10668.1    
  45  0.529597     -0.635638      -510.304       510.304       10157.0       10667.4    
  46  0.163272      -1.81234      -1454.98       1454.98       10150.3       11605.3    
  47  0.212593      -1.54838      -1243.07       1243.07       9749.08       10992.2    
  48  0.359173      -1.02395      -822.050       822.050       7512.56       8334.61    
  49  0.993707     -0.631295E-02  -5.06817       5.06817       8288.68       8293.75    
  50  0.261479      -1.34140      -1076.91       1076.91       9645.91       10722.8    
  51  0.441392     -0.817822      -656.564       656.564       9680.84       10337.4    
  52  0.624656     -0.470554      -377.771       377.771       10670.0       11047.7    
  53  0.646784     -0.435743      -349.823       349.823       10025.9       10375.8    
  54  0.343734      -1.06789      -857.323       857.323       10373.9       11231.2    
  55  0.438651     -0.824052      -661.566       661.566       10940.5       11602.1    
  56  0.476250     -0.741811      -595.542       595.542       10683.4       11279.0    
  57  0.665451     -0.407291      -326.982       326.982       10751.5       11078.4    
  58  0.903561E-01  -2.40400      -1929.98       1929.98       10625.7       12555.7    
  59  0.899286     -0.106155      -85.2232       85.2232       10584.0       10669.2    
  60  0.822477     -0.195434      -156.899       156.899       9962.25       10119.1    
  61  0.824462E-01  -2.49561      -2003.53       2003.53       10888.5       12892.0    
  62  0.689460     -0.371846      -298.526       298.526       10723.2       11021.7    
  63  0.124471      -2.08368      -1672.82       1672.82       11846.9       13519.7    
  64  0.215598      -1.53434      -1231.80       1231.80       5326.05       6557.85    
loop,thermsimp(1:2)        1   3122.68       18.5987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216       7164.78          0.89          1.09         22.99          0.50          0.04         25.51
Just calling func    0   0         25.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7164.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        1
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        2
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      215     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -1195.14       1195.14       4437.73       5632.87    
   2  0.726663     -0.319292      -256.334       256.334       4953.55       5209.88    
   3  0.929061     -0.735808E-01  -59.0722       59.0722       5445.82       5504.89    
   4  0.764703     -0.268268      -215.371       215.371       5200.90       5416.27    
   5  0.119617      -2.12346      -1704.76       1704.76       5711.06       7415.82    
   6  0.369672     -0.995138      -798.918       798.918       5996.15       6795.06    
   7  0.875806     -0.132611      -106.463       106.463       5990.60       6097.07    
   8  0.657886     -0.418723      -336.159       336.159       6144.95       6481.11    
   9  0.387095E-01  -3.25167      -2610.51       2610.51       5728.33       8338.84    
  10  0.454078     -0.789485      -633.815       633.815       6282.74       6916.55    
  11  0.890470     -0.116006      -93.1318       93.1318       5326.05       5419.18    
  12  0.118445      -2.13331      -1712.66       1712.66       6526.89       8239.55    
  13  0.190238      -1.65948      -1332.27       1332.27       6093.62       7425.89    
  14  0.435624     -0.830976      -667.125       667.125       5561.24       6228.36    
  15  0.768655     -0.263114      -211.233       211.233       5292.23       5503.47    
  16  0.870896E-01  -2.44082      -1959.54       1959.54       4343.46       6303.00    
  17  0.936453     -0.656556E-01  -52.7097       52.7097       7512.14       7564.85    
  18  0.159312      -1.83689      -1474.69       1474.69       6959.75       8434.44    
  19  0.988165     -0.119051E-01  -9.55767       9.55767       7603.86       7613.42    
  20  0.713347     -0.337787      -271.182       271.182       7536.74       7807.92    
  21  0.417075     -0.874489      -702.058       702.058       7593.84       8295.90    
  22  0.719048     -0.329827      -264.792       264.792       6104.52       6369.31    
  23  0.785519     -0.241411      -193.810       193.810       7510.70       7704.51    
  24  0.356994      -1.03004      -826.934       826.934       7293.57       8120.50    
  25  0.357951      -1.02736      -824.786       824.786       8288.68       9113.47    
  26  0.154816      -1.86552      -1497.68       1497.68       7512.56       9010.24    
  27  0.246912      -1.39872      -1122.92       1122.92       7562.90       8685.82    
  28  0.553458     -0.591570      -474.925       474.925       8552.41       9027.33    
  29  0.729602     -0.315256      -253.094       253.094       8277.14       8530.23    
  30  0.605470     -0.501750      -402.816       402.816       8382.14       8784.95    
  31  0.278987E-01  -3.57918      -2873.44       2873.44       8968.45       11841.9    
  32  0.187991      -1.67136      -1341.81       1341.81       7892.17       9233.97    
  33  0.543158     -0.610355      -490.006       490.006       8905.23       9395.24    
  34  0.996749     -0.325625E-02  -2.61418       2.61418       9020.91       9023.52    
  35  0.540727     -0.614841      -493.607       493.607       9012.53       9506.14    
  36  0.833271E-01  -2.48498      -1994.99       1994.99       8603.77       10598.8    
  37  0.404538     -0.905011      -726.562       726.562       6713.21       7439.77    
  38  0.147302      -1.91527      -1537.62       1537.62       8424.04       9961.66    
  39  0.364226E-01  -3.31257      -2659.40       2659.40       8203.20       10862.6    
  40  0.381304     -0.964158      -774.046       774.046       8533.89       9307.94    
  41  0.737758     -0.304140      -244.170       244.170       7709.94       7954.11    
  42  0.179374      -1.71828      -1379.47       1379.47       9218.69       10598.2    
  43  0.281757      -1.26671      -1016.94       1016.94       9962.25       10979.2    
  44  0.192633      -1.64697      -1322.22       1322.22       9374.39       10696.6    
  45  0.954983     -0.460617E-01  -36.9793       36.9793       8747.78       8784.76    
  46  0.710258     -0.342127      -274.667       274.667       9680.84       9955.51    
  47  0.831769     -0.184201      -147.880       147.880       10025.9       10173.8    
  48  0.912541     -0.915218E-01  -73.4756       73.4756       10157.0       10230.5    
  49  0.221543      -1.50714      -1209.96       1209.96       9599.81       10809.8    
  50  0.690803E-02  -4.97507      -3994.09       3994.09       10584.0       14578.1    
  51  0.162616      -1.81637      -1458.22       1458.22       9645.91       11104.1    
  52  0.869433     -0.139913      -112.325       112.325       9749.08       9861.41    
  53  0.541563     -0.613295      -492.366       492.366       10723.2       11215.5    
  54  0.310811      -1.16857      -938.154       938.154       10670.0       11608.1    
  55  0.879573     -0.128319      -103.017       103.017       10751.5       10854.5    
  56  0.262339      -1.33812      -1074.27       1074.27       10373.9       11448.2    
  57  0.651476     -0.428515      -344.020       344.020       10683.4       11027.5    
  58  0.498193     -0.696767      -559.379       559.379       10940.5       11499.9    
  59  0.251241      -1.38134      -1108.97       1108.97       10150.3       11259.2    
  60  0.704518     -0.350242      -281.181       281.181       10625.7       10906.9    
  61  0.387431     -0.948219      -761.250       761.250       7920.16       8681.41    
  62  0.447312     -0.804500      -645.869       645.869       10888.5       11534.4    
  63  0.842599     -0.171264      -137.494       137.494       9565.36       9702.85    
  64  0.754683     -0.281457      -225.960       225.960       7164.78       7390.74    
loop,thermsimp(1:2)        2   1195.14       256.334    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217       5051.03          0.90          1.08         23.08          0.51          0.04         25.60
Just calling func    0   0         25.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218       6016.74          0.90          1.07         23.00          0.59          0.04         25.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5051.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        2
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        3
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      217     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -705.032       705.032       4953.55       5658.58    
   2  0.117190E-02  -6.74913      -5418.34       5418.34       5200.90       10619.2    
   3  0.432199     -0.838870      -673.462       673.462       5326.05       5999.51    
   4  0.466381     -0.762753      -612.354       612.354       5292.23       5904.59    
   5  0.696685     -0.361422      -290.157       290.157       5445.82       5735.97    
   6  0.193714      -1.64137      -1317.73       1317.73       4437.73       5755.46    
   7  0.535145     -0.625217      -501.937       501.937       5990.60       6492.54    
   8  0.812984     -0.207044      -166.220       166.220       5561.24       5727.46    
   9  0.956789     -0.441723E-01  -35.4624       35.4624       4343.46       4378.92    
  10  0.496711E-01  -3.00233      -2410.33       2410.33       6104.52       8514.85    
  11  0.206308E-01  -3.88097      -3115.73       3115.73       6144.95       9260.68    
  12  0.423434     -0.859358      -689.911       689.911       5996.15       6686.06    
  13  0.216826      -1.52866      -1227.24       1227.24       6282.74       7509.98    
  14  0.792422     -0.232661      -186.785       186.785       7164.78       7351.57    
  15  0.265940      -1.32449      -1063.32       1063.32       5711.06       6774.39    
  16  0.993400     -0.662201E-02  -5.31629       5.31629       6093.62       6098.94    
  17  0.645200E-01  -2.74078      -2200.36       2200.36       6713.21       8913.56    
  18  0.651527     -0.428436      -343.957       343.957       7512.14       7856.10    
  19  0.858875     -0.152131      -122.134       122.134       7603.86       7725.99    
  20  0.126056      -2.07103      -1662.66       1662.66       7510.70       9173.36    
  21  0.772661E-01  -2.56050      -2055.62       2055.62       7536.74       9592.36    
  22  0.441429     -0.817737      -656.496       656.496       7709.94       8366.43    
  23  0.166586      -1.79224      -1438.85       1438.85       7293.57       8732.41    
  24  0.217490      -1.52560      -1224.79       1224.79       6526.89       7751.68    
  25  0.632871     -0.457488      -367.281       367.281       7593.84       7961.12    
  26  0.201694      -1.60100      -1285.32       1285.32       5728.33       7013.65    
  27  0.282690      -1.26341      -1014.29       1014.29       6959.75       7974.04    
  28  0.255086E-01  -3.66874      -2945.34       2945.34       8277.14       11222.5    
  29  0.562308     -0.575706      -462.188       462.188       7920.16       8382.35    
  30  0.283366E-01  -3.56360      -2860.93       2860.93       7562.90       10423.8    
  31  0.404254E-01  -3.20830      -2575.69       2575.69       8747.78       11323.5    
  32  0.170475      -1.76917      -1420.33       1420.33       8382.14       9802.46    
  33  0.141712      -1.95396      -1568.68       1568.68       7512.56       9081.24    
  34  0.773173     -0.257253      -206.528       206.528       9020.91       9227.43    
  35  0.255978      -1.36266      -1093.98       1093.98       8552.41       9646.39    
  36  0.823739     -0.193902      -155.668       155.668       8288.68       8444.35    
  37  0.166307      -1.79392      -1440.20       1440.20       7892.17       9332.36    
  38  0.676319     -0.391090      -313.975       313.975       8533.89       8847.87    
  39  0.144546      -1.93416      -1552.78       1552.78       8905.23       10458.0    
  40  0.593436     -0.521826      -418.933       418.933       9012.53       9431.46    
  41  0.762921     -0.270600      -217.243       217.243       9565.36       9782.60    
  42  0.855796     -0.155724      -125.018       125.018       9749.08       9874.10    
  43  0.433555     -0.835737      -670.947       670.947       9680.84       10351.8    
  44  0.252891      -1.37480      -1103.71       1103.71       8424.04       9527.75    
  45  0.942909     -0.587850E-01  -47.1938       47.1938       10025.9       10073.1    
  46  0.432313     -0.838605      -673.250       673.250       10157.0       10830.3    
  47  0.975713     -0.245869E-01  -19.7389       19.7389       9218.69       9238.43    
  48  0.541226     -0.613919      -492.867       492.867       8603.77       9096.64    
  49  0.255057      -1.36627      -1096.87       1096.87       9374.39       10471.3    
  50  0.202141      -1.59879      -1283.54       1283.54       9599.81       10883.3    
  51  0.949562     -0.517549E-01  -41.5499       41.5499       10751.5       10793.0    
  52  0.255660E-01  -3.66649      -2943.54       2943.54       8203.20       11146.7    
  53  0.306802      -1.18155      -948.574       948.574       10625.7       11574.3    
  54  0.243277E-01  -3.71614      -2983.40       2983.40       9962.25       12945.6    
  55  0.466793     -0.761870      -611.645       611.645       10683.4       11295.1    
  56  0.200407      -1.60740      -1290.46       1290.46       9645.91       10936.4    
  57  0.282970      -1.26241      -1013.49       1013.49       10723.2       11736.7    
  58  0.214232      -1.54069      -1236.90       1236.90       10150.3       11387.2    
  59  0.326606      -1.11900      -898.358       898.358       10373.9       11272.2    
  60  0.997507     -0.249621E-02  -2.00401       2.00401       10940.5       10942.5    
  61  0.426725     -0.851615      -683.695       683.695       10888.5       11572.2    
  62  0.862854     -0.147510      -118.424       118.424       10670.0       10788.4    
  63  0.737079     -0.305061      -244.909       244.909       8968.45       9213.36    
  64  0.976691     -0.235846E-01  -18.9342       18.9342       5051.03       5069.97    
loop,thermsimp(1:2)        3   705.032       5418.34    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       7388.62          0.89          1.09         23.09          0.33          0.04         25.44
Just calling func    0   0         25.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7388.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        3
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        4
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      218     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -337.699       337.699       4343.46       4681.15    
   2  0.880966     -0.126736      -101.746       101.746       5051.03       5152.78    
   3  0.854972     -0.156687      -125.792       125.792       4953.55       5079.34    
   4  0.797101     -0.226774      -182.059       182.059       5561.24       5743.30    
   5  0.158477      -1.84214      -1478.91       1478.91       5445.82       6924.73    
   6  0.593839     -0.521148      -418.388       418.388       4437.73       4856.12    
   7  0.817101     -0.201993      -162.164       162.164       5292.23       5454.40    
   8  0.997190     -0.281377E-02  -2.25895       2.25895       5326.05       5328.31    
   9  0.402857     -0.909174      -729.904       729.904       6093.62       6823.52    
  10  0.690455     -0.370405      -297.369       297.369       5990.60       6287.97    
  11  0.609635     -0.494895      -397.312       397.312       5996.15       6393.46    
  12  0.491117     -0.711073      -570.864       570.864       5711.06       6281.93    
  13  0.990676     -0.936814E-02  -7.52094       7.52094       5728.33       5735.85    
  14  0.976919     -0.233519E-01  -18.7474       18.7474       7164.78       7183.53    
  15  0.692556     -0.367366      -294.929       294.929       6282.74       6577.67    
  16  0.549694     -0.598394      -480.404       480.404       7603.86       8084.26    
  17  0.538267E-01  -2.92199      -2345.83       2345.83       6526.89       8872.72    
  18  0.602193     -0.507178      -407.173       407.173       7512.14       7919.31    
  19  0.537276     -0.621243      -498.747       498.747       7593.84       8092.58    
  20  0.338220      -1.08406      -870.304       870.304       6959.75       7830.05    
  21  0.306772      -1.18165      -948.655       948.655       7709.94       8658.59    
  22  0.895389     -0.110497      -88.7097       88.7097       7920.16       8008.87    
  23  0.120096      -2.11946      -1701.55       1701.55       8288.68       9990.23    
  24  0.680166     -0.385418      -309.421       309.421       6104.52       6413.94    
  25  0.369434     -0.995782      -799.435       799.435       7293.57       8093.00    
  26  0.235484      -1.44611      -1160.97       1160.97       8533.89       9694.86    
  27  0.260836      -1.34386      -1078.88       1078.88       6713.21       7792.09    
  28  0.720259     -0.328144      -263.441       263.441       7512.56       7776.00    
  29  0.695069     -0.363744      -292.021       292.021       8603.77       8895.79    
  30  0.105076      -2.25307      -1808.82       1808.82       7510.70       9319.52    
  31  0.968349     -0.321628E-01  -25.8210       25.8210       8968.45       8994.27    
  32  0.974131     -0.262091E-01  -21.0412       21.0412       9020.91       9041.95    
  33  0.647785E-01  -2.73678      -2197.15       2197.15       9218.69       11415.8    
  34  0.910402     -0.938690E-01  -75.3600       75.3600       6144.95       6220.31    
  35  0.488733     -0.715939      -574.771       574.771       7892.17       8466.94    
  36  0.377436E-01  -3.27694      -2630.80       2630.80       9012.53       11643.3    
  37  0.154608      -1.86686      -1498.76       1498.76       8424.04       9922.79    
  38  0.277804      -1.28084      -1028.28       1028.28       7536.74       8565.02    
  39  0.969547     -0.309263E-01  -24.8283       24.8283       8552.41       8577.24    
  40  0.380083     -0.967367      -776.622       776.622       9565.36       10342.0    
  41  0.751822     -0.285256      -229.009       229.009       8382.14       8611.15    
  42  0.137692      -1.98274      -1591.78       1591.78       9749.08       11340.9    
  43  0.293470      -1.22598      -984.243       984.243       10025.9       11010.2    
  44  0.433705     -0.835390      -670.668       670.668       9680.84       10351.5    
  45  0.418034     -0.872194      -700.215       700.215       7562.90       8263.12    
  46  0.166728      -1.79139      -1438.17       1438.17       8905.23       10343.4    
  47  0.921960     -0.812537E-01  -65.2322       65.2322       9374.39       9439.62    
  48  0.412601     -0.885275      -710.717       710.717       5200.90       5911.62    
  49  0.925181     -0.777655E-01  -62.4318       62.4318       10670.0       10732.4    
  50  0.687711     -0.374386      -300.565       300.565       10751.5       11052.0    
  51  0.729890     -0.314862      -252.778       252.778       10157.0       10409.8    
  52  0.355028      -1.03556      -831.368       831.368       9599.81       10431.2    
  53  0.123338      -2.09283      -1680.17       1680.17       9645.91       11326.1    
  54  0.638370E-01  -2.75142      -2208.90       2208.90       10940.5       13149.4    
  55  0.379414     -0.969128      -778.036       778.036       8203.20       8981.23    
  56  0.643705     -0.440515      -353.655       353.655       8277.14       8630.79    
  57  0.172292      -1.75856      -1411.81       1411.81       10373.9       11785.7    
  58  0.996763     -0.324212E-02  -2.60284       2.60284       10683.4       10686.0    
  59  0.606366     -0.500272      -401.629       401.629       8747.78       9149.41    
  60  0.299698      -1.20498      -967.383       967.383       10150.3       11117.7    
  61  0.723907E-02  -4.92826      -3956.51       3956.51       10888.5       14845.0    
  62  0.197118      -1.62395      -1303.74       1303.74       10625.7       11929.5    
  63  0.316130      -1.15160      -924.530       924.530       10723.2       11647.7    
  64  0.115913      -2.15492      -1730.01       1730.01       7388.62       9118.64    
loop,thermsimp(1:2)        4   337.699       101.746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       4773.88          0.89          1.09         23.08          0.19          0.05         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221       5382.46          0.89          1.06         22.91          0.38          0.04         25.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    5382.5        2.677     0.6958      5.976     -100.0    -0.4973    
                      -1.625      1.679     -100.0      3.379    -0.3357    
                      0.7117E-01 0.8230      2.400      0.000      0.000    
                      -3.214      0.000      0.000      0.000     -1.221    

                      -2.500     0.1388E+05 0.1519E+05 -1735.     -6298.    
                      -2.000     0.7080E-02  1.007     -2.447     -1.014    
                      -10.68     -2.158      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.5298     0.1260      0.000    -0.3270    
                      0.4108    -0.5326     0.5992E-01 0.2957    -0.4636    

                      -1.267     -2.120      0.000     0.5588     0.6375    
                      0.8541E-01 -1.631     0.3597     0.3242    -0.9258    
                     -0.2494    -0.1727     0.6264    -0.9240      0.000    

                      -1.275    -0.2391      3.491     -3.112      0.000    
                       0.000      9.668      7.854     -6855.     -4.000    
                       1.755    -0.4138      9.469      8.434     -3253.    

                      -4.000      2.004      1.791      8.336      8.609    
                     -0.1539E+05 -4.000     0.6967      1.679      9.429    
                       9.468    -0.1604E+05 -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4773.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        4
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        5
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      220     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -370.640       370.640       4343.46       4714.10    
   2  0.876370     -0.131967      -105.946       105.946       4437.73       4543.67    
   3  0.840080     -0.174259      -139.899       139.899       4953.55       5093.45    
   4  0.608986E-01  -2.79854      -2246.73       2246.73       5051.03       7297.76    
   5  0.311901      -1.16507      -935.341       935.341       5326.05       6261.39    
   6  0.937552E-01  -2.36707      -1900.33       1900.33       5292.23       7192.57    
   7  0.608418     -0.496893      -398.916       398.916       5728.33       6127.24    
   8  0.297707      -1.21164      -972.733       972.733       5561.24       6533.97    
   9  0.365777      -1.00573      -807.422       807.422       5200.90       6008.32    
  10  0.194673      -1.63643      -1313.76       1313.76       6144.95       7458.72    
  11  0.941388     -0.604003E-01  -48.4906       48.4906       5711.06       5759.55    
  12  0.984881     -0.152343E-01  -12.2304       12.2304       5990.60       6002.83    
  13  0.750245     -0.287355      -230.694       230.694       5996.15       6226.84    
  14  0.437446     -0.826803      -663.774       663.774       6104.52       6768.29    
  15  0.174754      -1.74437      -1400.42       1400.42       6282.74       7683.16    
  16  0.300465E-01  -3.50501      -2813.89       2813.89       6093.62       8907.51    
  17  0.372924     -0.986380      -791.886       791.886       5445.82       6237.70    
  18  0.803506     -0.218771      -175.634       175.634       7164.78       7340.42    
  19  0.232583      -1.45851      -1170.92       1170.92       7512.56       8683.48    
  20  0.383368     -0.958759      -769.712       769.712       6713.21       7482.92    
  21  0.622786     -0.473552      -380.178       380.178       6959.75       7339.93    
  22  0.356422      -1.03164      -828.222       828.222       7512.14       8340.36    
  23  0.919964     -0.834212E-01  -66.9723       66.9723       7920.16       7987.13    
  24  0.550740     -0.596492      -478.876       478.876       7603.86       8082.73    
  25  0.402627     -0.909745      -730.362       730.362       7593.84       8324.20    
  26  0.256265      -1.36154      -1093.08       1093.08       7293.57       8386.64    
  27  0.763510     -0.269828      -216.624       216.624       7562.90       7779.52    
  28  0.388963     -0.944271      -758.081       758.081       7892.17       8650.25    
  29  0.981923     -0.182423E-01  -14.6453       14.6453       7536.74       7551.38    
  30  0.656629     -0.420635      -337.695       337.695       8552.41       8890.10    
  31  0.932472     -0.699161E-01  -56.1301       56.1301       8382.14       8438.27    
  32  0.336775      -1.08834      -873.743       873.743       8277.14       9150.88    
  33  0.810758     -0.209786      -168.421       168.421       7709.94       7878.36    
  34  0.557014     -0.585166      -469.783       469.783       6526.89       6996.67    
  35  0.652747     -0.426565      -342.455       342.455       8603.77       8946.23    
  36  0.890774     -0.115665      -92.8581       92.8581       8203.20       8296.06    
  37  0.703035     -0.352349      -282.873       282.873       8968.45       9251.33    
  38  0.534296     -0.626805      -503.212       503.212       9020.91       9524.12    
  39  0.604162     -0.503914      -404.552       404.552       7388.62       7793.18    
  40  0.545557     -0.605948      -486.468       486.468       8747.78       9234.25    
  41  0.371346     -0.990620      -795.290       795.290       7510.70       8305.99    
  42  0.491801     -0.709680      -569.746       569.746       9374.39       9944.14    
  43  0.879731     -0.128139      -102.873       102.873       8533.89       8636.76    
  44  0.995113     -0.489866E-02  -3.93274       3.93274       8424.04       8427.97    
  45  0.467927     -0.759444      -609.697       609.697       8288.68       8898.38    
  46  0.355083      -1.03540      -831.243       831.243       9565.36       10396.6    
  47  0.216960      -1.52804      -1226.74       1226.74       8905.23       10132.0    
  48  0.276988      -1.28378      -1030.65       1030.65       9680.84       10711.5    
  49  0.905458     -0.993144E-01  -79.7317       79.7317       10157.0       10236.8    
  50  0.704241     -0.350635      -281.497       281.497       9599.81       9881.31    
  51  0.784564     -0.242627      -194.786       194.786       10683.4       10878.2    
  52  0.329376      -1.11055      -891.576       891.576       10670.0       11561.5    
  53  0.845894     -0.167361      -134.361       134.361       10025.9       10160.3    
  54  0.645172     -0.438238      -351.827       351.827       10751.5       11103.3    
  55  0.279949      -1.27315      -1022.11       1022.11       10150.3       11172.4    
  56  0.149089      -1.90321      -1527.94       1527.94       9645.91       11173.9    
  57  0.887681     -0.119143      -95.6503       95.6503       9749.08       9844.73    
  58  0.582426     -0.540553      -433.968       433.968       9218.69       9652.66    
  59  0.221293      -1.50827      -1210.87       1210.87       9012.53       10223.4    
  60  0.839449     -0.175010      -140.502       140.502       10723.2       10863.7    
  61  0.383721     -0.957840      -768.974       768.974       10373.9       11142.9    
  62  0.933136     -0.692040E-01  -55.5584       55.5584       10625.7       10681.3    
  63  0.148663      -1.90607      -1530.24       1530.24       10940.5       12470.8    
  64  0.788780     -0.237267      -190.483       190.483       4773.88       4964.36    
loop,thermsimp(1:2)        5   370.640       105.946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       4919.34          0.90          1.09         23.09          0.25          0.04         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223      11206.45          0.90          1.07         22.85          0.40          0.04         25.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4919.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        5
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        6
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      222     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -1230.39       1230.39       4437.73       5668.12    
   2  0.942431     -0.592928E-01  -47.6015       47.6015       4343.46       4391.06    
   3  0.193824      -1.64081      -1317.27       1317.27       4773.88       6091.15    
   4  0.162512      -1.81700      -1458.73       1458.73       4953.55       6412.28    
   5  0.625243     -0.469616      -377.017       377.017       5711.06       6088.08    
   6  0.499178     -0.694793      -557.794       557.794       5990.60       6548.40    
   7  0.706095     -0.348006      -279.386       279.386       5200.90       5480.29    
   8  0.527414     -0.639770      -513.620       513.620       5728.33       6241.95    
   9  0.575748     -0.552085      -443.225       443.225       5996.15       6439.37    
  10  0.490522     -0.712286      -571.838       571.838       5445.82       6017.66    
  11  0.306517      -1.18248      -949.322       949.322       5326.05       6275.37    
  12  0.798470     -0.225057      -180.681       180.681       5561.24       5741.92    
  13  0.333550      -1.09796      -881.468       881.468       6104.52       6985.98    
  14  0.166731      -1.79138      -1438.15       1438.15       6526.89       7965.04    
  15  0.443580     -0.812878      -652.596       652.596       5292.23       5944.83    
  16  0.669985     -0.400500      -321.530       321.530       5051.03       5372.56    
  17  0.339921      -1.07904      -866.278       866.278       6959.75       7826.03    
  18  0.201260      -1.60316      -1287.05       1287.05       7164.78       8451.83    
  19  0.772250     -0.258447      -207.486       207.486       6144.95       6352.44    
  20  0.401372E-01  -3.21545      -2581.43       2581.43       6713.21       9294.64    
  21  0.940962     -0.608526E-01  -48.8538       48.8538       7536.74       7585.59    
  22  0.115324      -2.16001      -1734.10       1734.10       6282.74       8016.84    
  23  0.939991E-01  -2.36447      -1898.25       1898.25       7562.90       9461.15    
  24  0.412221     -0.886196      -711.457       711.457       7388.62       8100.08    
  25  0.136462      -1.99171      -1598.99       1598.99       7709.94       9308.92    
  26  0.310095      -1.17088      -940.003       940.003       7920.16       8860.16    
  27  0.985727     -0.143755E-01  -11.5409       11.5409       7603.86       7615.40    
  28  0.900161     -0.105182      -84.4420       84.4420       8203.20       8287.64    
  29  0.250220      -1.38542      -1112.24       1112.24       7510.70       8622.94    
  30  0.780405     -0.247942      -199.053       199.053       7593.84       7792.89    
  31  0.228719      -1.47526      -1184.37       1184.37       7512.14       8696.51    
  32  0.407088     -0.898727      -721.517       721.517       7293.57       8015.08    
  33  0.975627     -0.246749E-01  -19.8095       19.8095       8424.04       8443.85    
  34  0.885140     -0.122009      -97.9518       97.9518       8382.14       8480.09    
  35  0.896135     -0.109664      -88.0407       88.0407       8533.89       8621.93    
  36  0.856661     -0.154713      -124.207       124.207       7892.17       8016.37    
  37  0.258643      -1.35231      -1085.66       1085.66       7512.56       8598.22    
  38  0.336283      -1.08980      -874.915       874.915       8552.41       9427.33    
  39  0.868205     -0.141327      -113.460       113.460       8288.68       8402.14    
  40  0.937935     -0.640747E-01  -51.4405       51.4405       6093.62       6145.06    
  41  0.418906     -0.870109      -698.542       698.542       8603.77       9302.31    
  42  0.351040      -1.04685      -840.436       840.436       8277.14       9117.58    
  43  0.611628E-01  -2.79422      -2243.26       2243.26       8747.78       10991.0    
  44  0.153518      -1.87394      -1504.44       1504.44       8968.45       10472.9    
  45  0.938341     -0.636423E-01  -51.0934       51.0934       9020.91       9072.00    
  46  0.598133     -0.513942      -412.603       412.603       9218.69       9631.29    
  47  0.795771     -0.228444      -183.400       183.400       9749.08       9932.48    
  48  0.295375      -1.21951      -979.048       979.048       9599.81       10578.9    
  49  0.804738     -0.217239      -174.404       174.404       9374.39       9548.79    
  50  0.260094      -1.34671      -1081.17       1081.17       8905.23       9986.40    
  51  0.640517     -0.445479      -357.640       357.640       10025.9       10383.6    
  52  0.221872      -1.50566      -1208.77       1208.77       9012.53       10221.3    
  53  0.837141     -0.177762      -142.711       142.711       10157.0       10299.8    
  54  0.212745      -1.54766      -1242.50       1242.50       9565.36       10807.9    
  55  0.162033      -1.81996      -1461.10       1461.10       10625.7       12086.8    
  56  0.631631     -0.459450      -368.856       368.856       9680.84       10049.7    
  57  0.816014E-01  -2.50591      -2011.80       2011.80       10723.2       12735.0    
  58  0.754954     -0.281099      -225.672       225.672       10683.4       10909.1    
  59  0.568761E-01  -2.86688      -2301.59       2301.59       10751.5       13053.1    
  60  0.610521     -0.493442      -396.146       396.146       10373.9       10770.0    
  61  0.691718     -0.368577      -295.901       295.901       10150.3       10446.2    
  62  0.330677      -1.10661      -888.411       888.411       9645.91       10534.3    
  63  0.669260     -0.401583      -322.399       322.399       10670.0       10992.4    
  64  0.677208     -0.389776      -312.921       312.921       4919.34       5232.26    
loop,thermsimp(1:2)        6   1230.39       47.6015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       4723.70          0.89          1.09         23.06          0.28          0.04         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4723.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        6
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        7
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      223     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -1068.55       1068.55       4343.46       5412.01    
   2  0.401807     -0.911784      -731.999       731.999       4919.34       5651.34    
   3  0.418885     -0.870159      -698.581       698.581       5051.03       5749.61    
   4  0.753378     -0.283189      -227.350       227.350       5200.90       5428.25    
   5  0.792066     -0.233111      -187.146       187.146       4437.73       4624.87    
   6  0.868474     -0.141017      -113.211       113.211       5561.24       5674.45    
   7  0.318670      -1.14360      -918.104       918.104       5292.23       6210.34    
   8  0.863267     -0.147031      -118.039       118.039       5445.82       5563.86    
   9  0.589255     -0.528896      -424.609       424.609       5711.06       6135.67    
  10  0.632079E-01  -2.76133      -2216.85       2216.85       4773.88       6990.73    
  11  0.992270     -0.775975E-02  -6.22969       6.22969       6093.62       6099.85    
  12  0.466140     -0.763269      -612.768       612.768       5728.33       6341.09    
  13  0.177509      -1.72873      -1387.86       1387.86       5326.05       6713.91    
  14  0.933326     -0.690005E-01  -55.3951       55.3951       6144.95       6200.35    
  15  0.876357     -0.131982      -105.958       105.958       4953.55       5059.51    
  16  0.673496     -0.395274      -317.334       317.334       5996.15       6313.48    
  17  0.648708     -0.432773      -347.439       347.439       5990.60       6338.04    
  18  0.400813     -0.914259      -733.987       733.987       6104.52       6838.50    
  19  0.763164     -0.270282      -216.988       216.988       7536.74       7753.73    
  20  0.196240      -1.62842      -1307.33       1307.33       7603.86       8911.18    
  21  0.923666     -0.794046E-01  -63.7477       63.7477       7593.84       7657.59    
  22  0.999600     -0.400298E-03 -0.321367      0.321367       6959.75       6960.07    
  23  0.379715     -0.968335      -777.400       777.400       6526.89       7304.29    
  24  0.197375      -1.62265      -1302.70       1302.70       7293.57       8596.26    
  25  0.760736     -0.273468      -219.546       219.546       7892.17       8111.71    
  26  0.392182     -0.936030      -751.465       751.465       6282.74       7034.20    
  27  0.256208      -1.36177      -1093.25       1093.25       7388.62       8481.88    
  28  0.251796      -1.37914      -1107.20       1107.20       8203.20       9310.40    
  29  0.332089E-01  -3.40494      -2733.56       2733.56       8288.68       11022.2    
  30  0.970457     -0.299883E-01  -24.0752       24.0752       8424.04       8448.11    
  31  0.467370E-01  -3.06322      -2459.22       2459.22       7164.78       9624.00    
  32  0.716125     -0.333901      -268.062       268.062       8382.14       8650.20    
  33  0.757897     -0.277208      -222.548       222.548       7512.56       7735.11    
  34  0.765628     -0.267059      -214.401       214.401       8533.89       8748.29    
  35  0.323816      -1.12758      -905.245       905.245       7510.70       8415.95    
  36  0.909845     -0.944807E-01  -75.8511       75.8511       7512.14       7587.99    
  37  0.515782     -0.662071      -531.524       531.524       7920.16       8451.68    
  38  0.464370     -0.767074      -615.823       615.823       9020.91       9636.73    
  39  0.445707     -0.808094      -648.755       648.755       8277.14       8925.90    
  40  0.786320     -0.240391      -192.991       192.991       6713.21       6906.20    
  41  0.631860     -0.459087      -368.564       368.564       8603.77       8972.33    
  42  0.672488     -0.396772      -318.537       318.537       7709.94       8028.47    
  43  0.251717E-02  -5.98462      -4804.58       4804.58       8552.41       13357.0    
  44  0.245023      -1.40640      -1129.09       1129.09       7562.90       8691.99    
  45  0.252688      -1.37560      -1104.36       1104.36       9374.39       10478.7    
  46  0.268946      -1.31324      -1054.30       1054.30       9218.69       10273.0    
  47  0.550357     -0.597189      -479.436       479.436       9749.08       10228.5    
  48  0.826205     -0.190912      -153.268       153.268       8905.23       9058.50    
  49  0.964276     -0.363780E-01  -29.2050       29.2050       9680.84       9710.05    
  50  0.415479     -0.878324      -705.137       705.137       9012.53       9717.67    
  51  0.599143E-01  -2.81484      -2259.81       2259.81       10157.0       12416.9    
  52  0.348555      -1.05396      -846.140       846.140       10025.9       10872.1    
  53  0.243819      -1.41133      -1133.05       1133.05       10150.3       11283.3    
  54  0.233297      -1.45544      -1168.46       1168.46       8968.45       10136.9    
  55  0.705284     -0.349155      -280.309       280.309       9645.91       9926.22    
  56  0.258436      -1.35311      -1086.30       1086.30       9599.81       10686.1    
  57  0.328631      -1.11282      -893.396       893.396       10373.9       11267.3    
  58  0.676481     -0.390852      -313.784       313.784       9565.36       9879.14    
  59  0.784590     -0.242594      -194.759       194.759       10683.4       10878.2    
  60  0.546419E-01  -2.90695      -2333.76       2333.76       8747.78       11081.5    
  61  0.507256     -0.678740      -544.907       544.907       10670.0       11214.9    
  62  0.980797     -0.193899E-01  -15.5666       15.5666       10625.7       10641.3    
  63  0.193856      -1.64064      -1317.14       1317.14       10723.2       12040.3    
  64  0.101492      -2.28777      -1836.67       1836.67       4723.70       6560.37    
loop,thermsimp(1:2)        7   1068.55       731.999    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       6841.78          0.87          1.09         22.95          0.33          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6841.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        7
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        8
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      224     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -1803.20       1803.20       4437.73       6240.93    
   2  0.476819     -0.740619      -594.585       594.585       4953.55       5548.13    
   3  0.564430     -0.571938      -459.164       459.164       4343.46       4802.62    
   4  0.211741      -1.55239      -1246.29       1246.29       5200.90       6447.19    
   5  0.154226E-01  -4.17192      -3349.30       3349.30       5445.82       8795.12    
   6  0.489577     -0.714213      -573.385       573.385       4919.34       5492.73    
   7  0.583965     -0.537914      -431.849       431.849       5561.24       5993.09    
   8  0.430258     -0.843370      -677.075       677.075       5051.03       5728.11    
   9  0.280982      -1.26946      -1019.15       1019.15       6093.62       7112.77    
  10  0.535183     -0.625146      -501.881       501.881       5711.06       6212.94    
  11  0.306750      -1.18172      -948.712       948.712       6144.95       7093.67    
  12  0.924930     -0.780370E-01  -62.6497       62.6497       5292.23       5354.88    
  13  0.829670E-01  -2.48931      -1998.47       1998.47       5996.15       7994.62    
  14  0.330275      -1.10783      -889.389       889.389       5990.60       6879.99    
  15  0.229751      -1.47076      -1180.76       1180.76       5728.33       6909.08    
  16  0.455737     -0.785839      -630.888       630.888       4723.70       5354.59    
  17  0.830949     -0.185187      -148.672       148.672       5326.05       5474.72    
  18  0.148624      -1.90634      -1530.45       1530.45       6104.52       7634.96    
  19  0.883001     -0.124429      -99.8944       99.8944       6713.21       6813.10    
  20  0.668001     -0.403466      -323.911       323.911       6959.75       7283.66    
  21  0.610583     -0.493341      -396.065       396.065       4773.88       5169.95    
  22  0.689050     -0.372441      -299.003       299.003       6282.74       6581.74    
  23  0.124417      -2.08412      -1673.17       1673.17       6526.89       8200.06    
  24  0.785584E-01  -2.54391      -2042.31       2042.31       7512.14       9554.45    
  25  0.936565     -0.655366E-01  -52.6141       52.6141       7593.84       7646.45    
  26  0.483719     -0.726252      -583.050       583.050       7512.56       8095.61    
  27  0.715685     -0.334515      -268.556       268.556       7536.74       7805.29    
  28  0.786437     -0.240243      -192.872       192.872       7709.94       7902.81    
  29  0.361023      -1.01881      -817.925       817.925       7892.17       8710.09    
  30  0.325559      -1.12221      -900.934       900.934       7510.70       8411.63    
  31  0.850460     -0.161978      -130.039       130.039       8424.04       8554.07    
  32  0.301358      -1.19946      -962.949       962.949       7920.16       8883.11    
  33  0.304725      -1.18834      -954.028       954.028       7388.62       8342.65    
  34  0.887065     -0.119838      -96.2081       96.2081       7293.57       7389.77    
  35  0.762822     -0.270730      -217.348       217.348       8382.14       8599.49    
  36  0.364130      -1.01024      -811.046       811.046       7562.90       8373.95    
  37  0.762041     -0.271754      -218.170       218.170       8533.89       8752.06    
  38  0.941180     -0.606207E-01  -48.6675       48.6675       7603.86       7652.53    
  39  0.449403     -0.799835      -642.124       642.124       8277.14       8919.26    
  40  0.743855     -0.295910      -237.562       237.562       8603.77       8841.33    
  41  0.743104     -0.296920      -238.373       238.373       8905.23       9143.60    
  42  0.350527      -1.04832      -841.611       841.611       8203.20       9044.81    
  43  0.607240     -0.498831      -400.472       400.472       7164.78       7565.26    
  44  0.557347     -0.584567      -469.302       469.302       9020.91       9490.21    
  45  0.217970      -1.52340      -1223.01       1223.01       9680.84       10903.9    
  46  0.364570      -1.00904      -810.075       810.075       9012.53       9822.60    
  47  0.330900      -1.10594      -887.871       887.871       9565.36       10453.2    
  48  0.861127     -0.149514      -120.033       120.033       9645.91       9765.94    
  49  0.710764E-01  -2.64400      -2122.66       2122.66       8968.45       11091.1    
  50  0.264543      -1.32975      -1067.55       1067.55       9749.08       10816.6    
  51  0.985836     -0.142654E-01  -11.4526       11.4526       9218.69       9230.14    
  52  0.296563      -1.21550      -975.825       975.825       9374.39       10350.2    
  53  0.875112     -0.133403      -107.099       107.099       10625.7       10732.8    
  54  0.808637     -0.212405      -170.523       170.523       9599.81       9770.33    
  55  0.394372     -0.930461      -746.994       746.994       10025.9       10772.9    
  56  0.209815      -1.56153      -1253.63       1253.63       10683.4       11937.1    
  57  0.154667      -1.86648      -1498.45       1498.45       8288.68       9787.13    
  58  0.741232     -0.299442      -240.398       240.398       8747.78       8988.18    
  59  0.386718E-01  -3.25265      -2611.29       2611.29       10670.0       13281.2    
  60  0.372867     -0.986533      -792.010       792.010       10373.9       11165.9    
  61  0.910828E-01  -2.39599      -1923.55       1923.55       10150.3       12073.8    
  62  0.660999     -0.414003      -332.370       332.370       10723.2       11055.6    
  63  0.631205E-01  -2.76271      -2217.96       2217.96       10157.0       12375.0    
  64  0.959104     -0.417554E-01  -33.5221       33.5221       6841.78       6875.30    
loop,thermsimp(1:2)        8   1803.20       594.585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       4888.69          0.89          1.09         23.09          0.30          0.05         25.41
Just calling func    0   0         25.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    227       5852.70          0.89          1.07         23.03          0.30          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4888.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        8
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:        9
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      226     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -356.507       356.507       4343.46       4699.96    
   2  0.805197     -0.216668      -173.946       173.946       4773.88       4947.83    
   3  0.976428     -0.238543E-01  -19.1507       19.1507       4723.70       4742.85    
   4  0.599028     -0.512447      -411.403       411.403       5292.23       5703.64    
   5  0.591081     -0.525802      -422.125       422.125       5326.05       5748.17    
   6  0.151500      -1.88717      -1515.06       1515.06       4919.34       6434.40    
   7  0.565682     -0.569723      -457.385       457.385       4953.55       5410.93    
   8  0.345258      -1.06346      -853.771       853.771       5051.03       5904.80    
   9  0.658101     -0.418397      -335.898       335.898       5561.24       5897.13    
  10  0.691977E-01  -2.67079      -2144.16       2144.16       5711.06       7855.23    
  11  0.289062      -1.24111      -996.392       996.392       4437.73       5434.12    
  12  0.949819     -0.514835E-01  -41.3321       41.3321       5200.90       5242.23    
  13  0.791632     -0.233658      -187.586       187.586       6282.74       6470.32    
  14  0.400532     -0.914962      -734.551       734.551       6713.21       7447.76    
  15  0.241886      -1.41929      -1139.44       1139.44       6841.78       7981.22    
  16  0.383016     -0.959678      -770.450       770.450       5990.60       6761.05    
  17  0.993978     -0.604041E-02  -4.84936       4.84936       5728.33       5733.17    
  18  0.807089     -0.214322      -172.062       172.062       6144.95       6317.02    
  19  0.732161     -0.311755      -250.283       250.283       6093.62       6343.90    
  20  0.176507      -1.73440      -1392.41       1392.41       6959.75       8352.16    
  21  0.628098     -0.465059      -373.359       373.359       7293.57       7666.92    
  22  0.383392     -0.958697      -769.662       769.662       7164.78       7934.45    
  23  0.906421     -0.982517E-01  -78.8786       78.8786       6104.52       6183.39    
  24  0.329288      -1.11082      -891.793       891.793       7593.84       8485.63    
  25  0.869436     -0.139911      -112.323       112.323       7603.86       7716.18    
  26  0.354994      -1.03565      -831.444       831.444       7536.74       8368.18    
  27  0.127935      -2.05623      -1650.79       1650.79       7709.94       9360.72    
  28  0.840123     -0.174207      -139.857       139.857       5996.15       6136.00    
  29  0.625861     -0.468627      -376.224       376.224       7512.56       7888.78    
  30  0.488384     -0.716653      -575.344       575.344       6526.89       7102.23    
  31  0.888226E-01  -2.42111      -1943.72       1943.72       7388.62       9332.34    
  32  0.262955      -1.33577      -1072.38       1072.38       7562.90       8635.29    
  33  0.153205E-01  -4.17856      -3354.64       3354.64       7510.70       10865.3    
  34  0.432355     -0.838509      -673.173       673.173       8424.04       9097.21    
  35  0.225273      -1.49044      -1196.56       1196.56       8382.14       9578.70    
  36  0.812147     -0.208074      -167.046       167.046       7892.17       8059.21    
  37  0.832805E-01  -2.48554      -1995.44       1995.44       8533.89       10529.3    
  38  0.442280     -0.815813      -654.951       654.951       5445.82       6100.77    
  39  0.106639      -2.23831      -1796.96       1796.96       8603.77       10400.7    
  40  0.143053      -1.94454      -1561.11       1561.11       7920.16       9481.27    
  41  0.871774     -0.137225      -110.167       110.167       8277.14       8387.31    
  42  0.137692      -1.98273      -1591.78       1591.78       8747.78       10339.6    
  43  0.366512      -1.00372      -805.811       805.811       8203.20       9009.01    
  44  0.617157     -0.482633      -387.468       387.468       8905.23       9292.70    
  45  0.420337     -0.866700      -695.805       695.805       9218.69       9914.49    
  46  0.935846     -0.663044E-01  -53.2306       53.2306       9020.91       9074.14    
  47  0.979912     -0.202925E-01  -16.2912       16.2912       7512.14       7528.43    
  48  0.692793     -0.367024      -294.655       294.655       9645.91       9940.57    
  49  0.155424      -1.86160      -1494.53       1494.53       9599.81       11094.3    
  50  0.703218     -0.352088      -282.664       282.664       8288.68       8571.34    
  51  0.396734     -0.924489      -742.199       742.199       9012.53       9754.73    
  52  0.247863      -1.39488      -1119.84       1119.84       9374.39       10494.2    
  53  0.176690      -1.73336      -1391.58       1391.58       9565.36       10956.9    
  54  0.832421     -0.183417      -147.251       147.251       10625.7       10773.0    
  55  0.598900     -0.512660      -411.574       411.574       10025.9       10437.5    
  56  0.940005     -0.618702E-01  -49.6707       49.6707       9749.08       9798.75    
  57  0.556954     -0.585272      -469.869       469.869       9680.84       10150.7    
  58  0.920495     -0.828436E-01  -66.5086       66.5086       10723.2       10789.7    
  59  0.896932     -0.108775      -87.3272       87.3272       8968.45       9055.78    
  60  0.200022      -1.60933      -1292.00       1292.00       10373.9       11665.9    
  61  0.667904E-01  -2.70620      -2172.59       2172.59       10683.4       12856.0    
  62  0.146707      -1.91932      -1540.87       1540.87       10150.3       11691.1    
  63  0.305705      -1.18513      -951.450       951.450       10157.0       11108.5    
  64  0.975058     -0.252587E-01  -20.2782       20.2782       4888.69       4908.97    
loop,thermsimp(1:2)        9   356.507       173.946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228       4965.30          0.88          1.09         23.05          0.22          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4965.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:        9
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       10
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      227     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -146.535       146.535       4343.46       4489.99    
   2  0.367543      -1.00091      -803.555       803.555       4723.70       5527.26    
   3  0.528755     -0.637231      -511.582       511.582       4888.69       5400.27    
   4  0.776829     -0.252535      -202.741       202.741       4773.88       4976.62    
   5  0.149594E-01  -4.20242      -3373.79       3373.79       5200.90       8574.69    
   6  0.892228     -0.114033      -91.5481       91.5481       4953.55       5045.10    
   7  0.191037      -1.65529      -1328.90       1328.90       4437.73       5766.63    
   8  0.516533     -0.660616      -530.356       530.356       5292.23       5822.59    
   9  0.273230      -1.29744      -1041.61       1041.61       5728.33       6769.94    
  10  0.822225     -0.195741      -157.145       157.145       5326.05       5483.19    
  11  0.359850      -1.02207      -820.538       820.538       5561.24       6381.77    
  12  0.611658     -0.491581      -394.652       394.652       5051.03       5445.68    
  13  0.249481      -1.38837      -1114.61       1114.61       5445.82       6560.43    
  14  0.441252     -0.818139      -656.819       656.819       5996.15       6652.97    
  15  0.910514E-01  -2.39633      -1923.83       1923.83       6104.52       8028.34    
  16  0.745146     -0.294175      -236.170       236.170       6144.95       6381.12    
  17  0.758301     -0.276675      -222.121       222.121       6093.62       6315.74    
  18  0.638521     -0.448601      -360.146       360.146       4919.34       5279.49    
  19  0.150180      -1.89592      -1522.08       1522.08       6282.74       7804.82    
  20  0.144147      -1.93692      -1555.00       1555.00       5990.60       7545.61    
  21  0.104928      -2.25448      -1809.94       1809.94       6526.89       8336.83    
  22  0.398120     -0.921002      -739.400       739.400       6713.21       7452.61    
  23  0.802258     -0.220325      -176.882       176.882       7512.14       7689.02    
  24  0.399299     -0.918044      -737.025       737.025       7293.57       8030.59    
  25  0.493060     -0.707124      -567.694       567.694       7603.86       8171.55    
  26  0.504407     -0.684372      -549.428       549.428       5711.06       6260.49    
  27  0.762058     -0.271733      -218.153       218.153       7512.56       7730.71    
  28  0.430267     -0.843350      -677.059       677.059       7164.78       7841.84    
  29  0.993832     -0.618725E-02  -4.96725       4.96725       6841.78       6846.75    
  30  0.705390     -0.349005      -280.189       280.189       7892.17       8172.35    
  31  0.969760     -0.307069E-01  -24.6521       24.6521       6959.75       6984.40    
  32  0.245618      -1.40398      -1127.14       1127.14       7536.74       8663.88    
  33  0.685790     -0.377184      -302.812       302.812       8277.14       8579.95    
  34  0.905089     -0.997222E-01  -80.0590       80.0590       7593.84       7673.90    
  35  0.414065     -0.881732      -707.873       707.873       8288.68       8996.55    
  36  0.714747E-01  -2.63841      -2118.17       2118.17       7562.90       9681.07    
  37  0.694510     -0.364548      -292.667       292.667       8203.20       8495.87    
  38  0.770213E-01  -2.56367      -2058.17       2058.17       8968.45       11026.6    
  39  0.846173     -0.167031      -134.096       134.096       9020.91       9155.00    
  40  0.485012     -0.723582      -580.907       580.907       8424.04       9004.94    
  41  0.345787      -1.06193      -852.542       852.542       8905.23       9757.77    
  42  0.851861     -0.160332      -128.718       128.718       7388.62       7517.34    
  43  0.774151     -0.255989      -205.513       205.513       7709.94       7915.45    
  44  0.512382     -0.668685      -536.834       536.834       7920.16       8456.99    
  45  0.839798     -0.174594      -140.168       140.168       8382.14       8522.31    
  46  0.430550     -0.842692      -676.530       676.530       9012.53       9689.06    
  47  0.988263     -0.118067E-01  -9.47866       9.47866       9749.08       9758.56    
  48  0.349495      -1.05127      -843.978       843.978       9218.69       10062.7    
  49  0.290701      -1.23546      -991.853       991.853       9645.91       10637.8    
  50  0.210466      -1.55843      -1251.14       1251.14       9680.84       10932.0    
  51  0.361038      -1.01877      -817.891       817.891       8747.78       9565.67    
  52  0.168890      -1.77851      -1427.82       1427.82       8603.77       10031.6    
  53  0.176000      -1.73727      -1394.72       1394.72       10025.9       11420.7    
  54  0.494423     -0.704364      -565.478       565.478       9374.39       9939.87    
  55  0.887313     -0.119558      -95.9835       95.9835       8533.89       8629.87    
  56  0.318781      -1.14325      -917.826       917.826       10625.7       11543.6    
  57  0.385435     -0.953382      -765.395       765.395       10723.2       11488.6    
  58  0.557906     -0.583564      -468.498       468.498       7510.70       7979.20    
  59  0.262507      -1.33748      -1073.76       1073.76       9565.36       10639.1    
  60  0.573408     -0.556157      -446.495       446.495       9599.81       10046.3    
  61  0.334195      -1.09603      -879.917       879.917       10157.0       11037.0    
  62  0.365463      -1.00659      -808.111       808.111       10373.9       11182.0    
  63  0.182452      -1.70127      -1365.81       1365.81       10150.3       11516.1    
  64  0.224434      -1.49418      -1199.56       1199.56       4965.30       6164.85    
loop,thermsimp(1:2)       10   146.535       803.555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229       4813.99          0.89          1.09         23.09          0.30          0.04         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230       6503.80          0.90          1.07         23.05          0.42          0.05         25.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4813.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       10
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       11
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      229     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -67.4671       67.4671       4343.46       4410.92    
   2  0.309089      -1.17413      -942.614       942.614       4773.88       5716.50    
   3  0.237901      -1.43590      -1152.77       1152.77       4953.55       6106.32    
   4  0.542467     -0.611627      -491.027       491.027       4919.34       5410.37    
   5  0.523672     -0.646889      -519.336       519.336       4888.69       5408.03    
   6  0.850058     -0.162450      -130.418       130.418       5051.03       5181.45    
   7  0.589343     -0.528746      -424.489       424.489       5326.05       5750.54    
   8  0.979269     -0.209490E-01  -16.8183       16.8183       4723.70       4740.52    
   9  0.110419      -2.20347      -1769.00       1769.00       4437.73       6206.72    
  10  0.557914     -0.583550      -468.486       468.486       5292.23       5760.72    
  11  0.474464     -0.745569      -598.558       598.558       4965.30       5563.85    
  12  0.312482      -1.16321      -933.847       933.847       5711.06       6644.91    
  13  0.297011      -1.21399      -974.614       974.614       6093.62       7068.23    
  14  0.857571     -0.153651      -123.355       123.355       6144.95       6268.31    
  15  0.792567     -0.232479      -186.639       186.639       5561.24       5747.88    
  16  0.963006     -0.376958E-01  -30.2630       30.2630       5445.82       5476.08    
  17  0.294103      -1.22382      -982.512       982.512       5996.15       6978.66    
  18  0.403484     -0.907618      -728.654       728.654       5728.33       6456.98    
  19  0.449313     -0.800035      -642.285       642.285       6841.78       7484.06    
  20  0.721912     -0.325852      -261.601       261.601       6959.75       7221.35    
  21  0.512488     -0.668479      -536.669       536.669       6713.21       7249.88    
  22  0.885190     -0.121953      -97.9062       97.9062       7388.62       7486.53    
  23  0.694751E-01  -2.66679      -2140.95       2140.95       5990.60       8131.56    
  24  0.820879     -0.197380      -158.461       158.461       7593.84       7752.30    
  25  0.211527      -1.55340      -1247.11       1247.11       7512.14       8759.25    
  26  0.937420     -0.646236E-01  -51.8812       51.8812       7512.56       7564.44    
  27  0.515756E-01  -2.96471      -2380.13       2380.13       6282.74       8662.87    
  28  0.695222     -0.363525      -291.845       291.845       7164.78       7456.63    
  29  0.718776     -0.330205      -265.096       265.096       7709.94       7975.03    
  30  0.536080     -0.623471      -500.536       500.536       7510.70       8011.24    
  31  0.585855     -0.534682      -429.254       429.254       6104.52       6533.77    
  32  0.693572     -0.365900      -293.752       293.752       7293.57       7587.32    
  33  0.700823     -0.355500      -285.402       285.402       7603.86       7889.26    
  34  0.250985      -1.38236      -1109.79       1109.79       7892.17       9001.95    
  35  0.290600      -1.23581      -992.131       992.131       6526.89       7519.02    
  36  0.828609     -0.188007      -150.936       150.936       7920.16       8071.10    
  37  0.225820      -1.48802      -1194.61       1194.61       8203.20       9397.81    
  38  0.999674     -0.326354E-03 -0.262004      0.262004       8382.14       8382.40    
  39  0.878216     -0.129862      -104.256       104.256       5200.90       5305.16    
  40  0.685898E-01  -2.67961      -2151.25       2151.25       8277.14       10428.4    
  41  0.273860      -1.29514      -1039.76       1039.76       8533.89       9573.65    
  42  0.697655     -0.360030      -289.040       289.040       7536.74       7825.78    
  43  0.293168      -1.22701      -985.068       985.068       8288.68       9273.75    
  44  0.319476      -1.14107      -916.077       916.077       8424.04       9340.11    
  45  0.874681     -0.133896      -107.495       107.495       9020.91       9128.40    
  46  0.408697     -0.894781      -718.349       718.349       8747.78       9466.13    
  47  0.142130E-01  -4.25360      -3414.88       3414.88       7562.90       10977.8    
  48  0.164528      -1.80468      -1448.83       1448.83       9012.53       10461.4    
  49  0.652669     -0.426685      -342.551       342.551       8905.23       9247.78    
  50  0.492107     -0.709060      -569.248       569.248       9749.08       10318.3    
  51  0.542705     -0.611189      -490.676       490.676       9374.39       9865.06    
  52  0.798603     -0.224891      -180.547       180.547       8603.77       8784.32    
  53  0.474092E-01  -3.04894      -2447.75       2447.75       9599.81       12047.6    
  54  0.425084     -0.855468      -686.788       686.788       9218.69       9905.48    
  55  0.349722      -1.05062      -843.458       843.458       9645.91       10489.4    
  56  0.499235     -0.694678      -557.702       557.702       9565.36       10123.1    
  57  0.193091      -1.64459      -1320.31       1320.31       9680.84       11001.2    
  58  0.876894     -0.131369      -105.466       105.466       8968.45       9073.92    
  59  0.634591     -0.454774      -365.102       365.102       10157.0       10522.2    
  60  0.571394     -0.559676      -449.320       449.320       10373.9       10823.2    
  61  0.749680     -0.288108      -231.299       231.299       10025.9       10257.2    
  62  0.111050      -2.19777      -1764.42       1764.42       10723.2       12487.6    
  63  0.456811     -0.783485      -628.998       628.998       10150.3       10779.3    
  64  0.686362     -0.376350      -302.142       302.142       4813.99       5116.13    
loop,thermsimp(1:2)       11   67.4671       942.614    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231       4736.33          0.89          1.09         23.07          0.48          0.04         25.57
Just calling func    0   0         25.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232       8602.44          0.90          1.06         23.02          0.35          0.05         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4736.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       11
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       12
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      231     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -217.300       217.300       4343.46       4560.76    
   2  0.482922E-01  -3.03048      -2432.94       2432.94       4723.70       7156.64    
   3  0.612960     -0.489456      -392.946       392.946       4813.99       5206.94    
   4  0.910127     -0.941714E-01  -75.6028       75.6028       5051.03       5126.64    
   5  0.362433      -1.01492      -814.797       814.797       5200.90       6015.70    
   6  0.476779     -0.740702      -594.651       594.651       4888.69       5483.34    
   7  0.179006E-01  -4.02292      -3229.68       3229.68       4919.34       8149.03    
   8  0.589646     -0.528233      -424.076       424.076       5445.82       5869.89    
   9  0.926206     -0.766581E-01  -61.5428       61.5428       4965.30       5026.84    
  10  0.492629     -0.707999      -568.397       568.397       4773.88       5342.28    
  11  0.661123     -0.413815      -332.219       332.219       5561.24       5893.46    
  12  0.542248     -0.612032      -491.352       491.352       5326.05       5817.40    
  13  0.216527      -1.53004      -1228.35       1228.35       5292.23       6520.58    
  14  0.549832     -0.598143      -480.202       480.202       4953.55       5433.75    
  15  0.429556     -0.845003      -678.386       678.386       4437.73       5116.11    
  16  0.264838      -1.32864      -1066.66       1066.66       6144.95       7211.61    
  17  0.251706      -1.37949      -1107.49       1107.49       5728.33       6835.81    
  18  0.701724     -0.354215      -284.371       284.371       6104.52       6388.89    
  19  0.324289      -1.12612      -904.072       904.072       5711.06       6615.14    
  20  0.160749E-02  -6.43308      -5164.61       5164.61       5996.15       11160.8    
  21  0.533627     -0.628058      -504.218       504.218       6093.62       6597.84    
  22  0.883065     -0.124357      -99.8361       99.8361       6959.75       7059.58    
  23  0.484824     -0.723969      -581.217       581.217       6713.21       7294.43    
  24  0.724157     -0.322747      -259.108       259.108       7164.78       7423.89    
  25  0.847375     -0.165612      -132.957       132.957       6841.78       6974.74    
  26  0.167586      -1.78626      -1434.05       1434.05       7388.62       8822.67    
  27  0.890079     -0.116445      -93.4843       93.4843       6526.89       6620.38    
  28  0.235223      -1.44722      -1161.86       1161.86       7512.56       8674.42    
  29  0.206112      -1.57934      -1267.92       1267.92       7293.57       8561.49    
  30  0.463385     -0.769198      -617.528       617.528       7593.84       8211.37    
  31  0.487880E-01  -3.02027      -2424.74       2424.74       7536.74       9961.47    
  32  0.244157      -1.40994      -1131.93       1131.93       7603.86       8735.79    
  33  0.770602     -0.260583      -209.201       209.201       7709.94       7919.14    
  34  0.264159      -1.33120      -1068.72       1068.72       7510.70       8579.42    
  35  0.189030E-01  -3.96843      -3185.94       3185.94       7920.16       11106.1    
  36  0.635342     -0.453592      -364.153       364.153       5990.60       6354.76    
  37  0.139550      -1.96933      -1581.02       1581.02       8382.14       9963.16    
  38  0.561566     -0.577026      -463.248       463.248       6282.74       6745.98    
  39  0.951789     -0.494118E-01  -39.6688       39.6688       7512.14       7551.81    
  40  0.527693     -0.639242      -513.196       513.196       8603.77       9116.97    
  41  0.925337     -0.775972E-01  -62.2967       62.2967       7892.17       7954.46    
  42  0.795352     -0.228971      -183.823       183.823       8968.45       9152.27    
  43  0.530799     -0.633371      -508.484       508.484       9020.91       9529.39    
  44  0.642763     -0.441979      -354.830       354.830       8905.23       9260.06    
  45  0.485146     -0.723305      -580.685       580.685       8288.68       8869.36    
  46  0.795896     -0.228287      -183.274       183.274       8424.04       8607.31    
  47  0.519140     -0.655581      -526.314       526.314       8203.20       8729.51    
  48  0.694073E-01  -2.66776      -2141.74       2141.74       8747.78       10889.5    
  49  0.401486     -0.912583      -732.641       732.641       8533.89       9266.53    
  50  0.587982E-01  -2.83364      -2274.91       2274.91       9374.39       11649.3    
  51  0.752652     -0.284152      -228.123       228.123       9218.69       9446.81    
  52  0.139929      -1.96662      -1578.85       1578.85       9565.36       11144.2    
  53  0.136759      -1.98953      -1597.24       1597.24       10025.9       11623.2    
  54  0.690728     -0.370009      -297.051       297.051       9749.08       10046.1    
  55  0.409546     -0.892705      -716.682       716.682       8277.14       8993.82    
  56  0.422285     -0.862075      -692.092       692.092       9012.53       9704.62    
  57  0.160439      -1.82984      -1469.04       1469.04       9645.91       11114.9    
  58  0.230463      -1.46767      -1178.27       1178.27       10157.0       11335.3    
  59  0.836860     -0.178099      -142.981       142.981       10150.3       10293.3    
  60  0.635813     -0.452850      -363.558       363.558       10373.9       10737.4    
  61  0.464135     -0.767580      -616.230       616.230       7562.90       8179.13    
  62  0.999501     -0.498826E-03 -0.400468      0.400468       9680.84       9681.25    
  63  0.472031     -0.750710      -602.685       602.685       9599.81       10202.5    
  64  0.926290     -0.765681E-01  -61.4704       61.4704       4736.33       4797.80    
loop,thermsimp(1:2)       12   217.300       2432.94    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       5223.16          0.90          1.09         23.05          0.33          0.04         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234       7249.97          0.90          1.07         23.06          0.22          0.04         25.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   5223.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       12
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       13
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      233     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -419.782       419.782       4343.46       4763.24    
   2  0.691791     -0.368472      -295.817       295.817       4736.33       5032.15    
   3  0.688173     -0.373715      -300.026       300.026       4965.30       5265.32    
   4  0.439966     -0.821058      -659.162       659.162       4437.73       5096.89    
   5  0.945690     -0.558403E-01  -44.8298       44.8298       5051.03       5095.86    
   6  0.238956      -1.43147      -1149.22       1149.22       4813.99       5963.21    
   7  0.280830E-01  -3.57259      -2868.15       2868.15       4773.88       7642.03    
   8  0.902031E-01  -2.40569      -1931.34       1931.34       4953.55       6884.89    
   9  0.198361      -1.61767      -1298.70       1298.70       4888.69       6187.39    
  10  0.201288      -1.60302      -1286.94       1286.94       5326.05       6612.98    
  11  0.710033     -0.342444      -274.921       274.921       5445.82       5720.74    
  12  0.182913      -1.69874      -1363.79       1363.79       5561.24       6925.02    
  13  0.817316     -0.201730      -161.953       161.953       5200.90       5362.85    
  14  0.894732     -0.111231      -89.2984       89.2984       5990.60       6079.90    
  15  0.854000     -0.157824      -126.705       126.705       6104.52       6231.22    
  16  0.248066      -1.39406      -1119.18       1119.18       5292.23       6411.42    
  17  0.670877     -0.399170      -320.462       320.462       6093.62       6414.08    
  18  0.701473     -0.354573      -284.659       284.659       5711.06       5995.72    
  19  0.199467      -1.61210      -1294.23       1294.23       6526.89       7821.12    
  20  0.391533     -0.937685      -752.793       752.793       6282.74       7035.53    
  21  0.586761     -0.533138      -428.014       428.014       5728.33       6156.34    
  22  0.163799      -1.80912      -1452.40       1452.40       6841.78       8294.18    
  23  0.955964     -0.450353E-01  -36.1553       36.1553       6959.75       6995.90    
  24  0.365727      -1.00587      -807.531       807.531       4723.70       5531.23    
  25  0.733577     -0.309822      -248.732       248.732       6144.95       6393.69    
  26  0.111597      -2.19286      -1760.47       1760.47       6713.21       8473.68    
  27  0.714895     -0.335619      -269.442       269.442       7164.78       7434.23    
  28  0.816688     -0.202498      -162.570       162.570       7512.14       7674.71    
  29  0.480603     -0.732714      -588.238       588.238       7709.94       8298.17    
  30  0.573891     -0.555316      -445.819       445.819       7892.17       8337.98    
  31  0.204452      -1.58742      -1274.42       1274.42       4919.34       6193.76    
  32  0.845356E-01  -2.47058      -1983.44       1983.44       7562.90       9546.34    
  33  0.524789E-01  -2.94734      -2366.19       2366.19       7593.84       9960.03    
  34  0.631781     -0.459213      -368.666       368.666       7293.57       7662.23    
  35  0.620363     -0.477450      -383.307       383.307       7510.70       7894.01    
  36  0.553551     -0.591402      -474.790       474.790       8424.04       8898.83    
  37  0.546271     -0.604640      -485.418       485.418       7512.56       7997.98    
  38  0.402204     -0.910797      -731.207       731.207       8203.20       8934.41    
  39  0.735174     -0.307648      -246.986       246.986       7603.86       7850.84    
  40  0.359565      -1.02286      -821.173       821.173       7388.62       8209.80    
  41  0.564111     -0.572504      -459.619       459.619       8288.68       8748.30    
  42  0.412661     -0.885128      -710.599       710.599       8277.14       8987.74    
  43  0.795853     -0.228341      -183.317       183.317       8603.77       8787.09    
  44  0.909991E-01  -2.39691      -1924.29       1924.29       8968.45       10892.7    
  45  0.830687     -0.185502      -148.925       148.925       8905.23       9054.16    
  46  0.592588     -0.523256      -420.081       420.081       8533.89       8953.97    
  47  0.489472     -0.714427      -573.557       573.557       9218.69       9792.25    
  48  0.992056     -0.797586E-02  -6.40319       6.40319       9020.91       9027.31    
  49  0.808208     -0.212936      -170.949       170.949       9680.84       9851.79    
  50  0.212569      -1.54849      -1243.16       1243.16       9012.53       10255.7    
  51  0.214041      -1.54159      -1237.62       1237.62       7536.74       8774.36    
  52  0.586527     -0.533536      -428.334       428.334       8382.14       8810.47    
  53  0.603460     -0.505075      -405.485       405.485       9749.08       10154.6    
  54  0.819887     -0.198589      -159.431       159.431       9599.81       9759.24    
  55  0.204248      -1.58842      -1275.22       1275.22       10150.3       11425.5    
  56  0.540917     -0.614489      -493.325       493.325       10373.9       10867.2    
  57  0.430522     -0.842757      -676.583       676.583       8747.78       9424.36    
  58  0.637009E-01  -2.75356      -2210.61       2210.61       7920.16       10130.8    
  59  0.872387     -0.136522      -109.603       109.603       9645.91       9755.51    
  60  0.740351     -0.300631      -241.353       241.353       9565.36       9806.71    
  61  0.844085     -0.169502      -136.080       136.080       5996.15       6132.23    
  62  0.574613     -0.554058      -444.810       444.810       10157.0       10601.9    
  63  0.382052     -0.962198      -772.473       772.473       10025.9       10798.4    
  64  0.564583     -0.571667      -458.946       458.946       5223.16       5682.11    
loop,thermsimp(1:2)       13   419.782       295.817    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       5310.48          0.90          1.09         23.07          0.23          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5310.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       13
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       14
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      234     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -868.500       868.500       4343.46       5211.96    
   2  0.649641     -0.431335      -346.285       346.285       4736.33       5082.62    
   3  0.930116     -0.724456E-01  -58.1608       58.1608       5051.03       5109.19    
   4  0.297326      -1.21293      -973.763       973.763       4437.73       5411.49    
   5  0.751734     -0.285373      -229.103       229.103       4965.30       5194.40    
   6  0.409056     -0.893902      -717.644       717.644       5200.90       5918.54    
   7  0.115094      -2.16201      -1735.70       1735.70       4723.70       6459.41    
   8  0.606681     -0.499753      -401.212       401.212       5223.16       5624.38    
   9  0.140571      -1.96204      -1575.17       1575.17       5445.82       7020.99    
  10  0.447669E-01  -3.10629      -2493.79       2493.79       4813.99       7307.78    
  11  0.517394     -0.658951      -529.020       529.020       5711.06       6240.08    
  12  0.587057     -0.532633      -427.609       427.609       5990.60       6418.21    
  13  0.384993E-01  -3.25712      -2614.88       2614.88       5996.15       8611.03    
  14  0.829105E-01  -2.48999      -1999.02       1999.02       5728.33       7727.34    
  15  0.382179     -0.961866      -772.207       772.207       4888.69       5660.90    
  16  0.269516      -1.31113      -1052.60       1052.60       4919.34       5971.94    
  17  0.879580     -0.128311      -103.011       103.011       6104.52       6207.53    
  18  0.760503E-01  -2.57636      -2068.36       2068.36       6144.95       8213.31    
  19  0.482544     -0.728684      -585.002       585.002       5292.23       5877.24    
  20  0.561499     -0.577145      -463.344       463.344       6093.62       6556.96    
  21  0.254621      -1.36798      -1098.24       1098.24       5326.05       6424.29    
  22  0.479261     -0.735511      -590.483       590.483       4953.55       5544.03    
  23  0.638455     -0.448704      -360.229       360.229       5561.24       5921.47    
  24  0.289082      -1.24105      -996.338       996.338       6959.75       7956.09    
  25  0.656024     -0.421558      -338.436       338.436       6282.74       6621.17    
  26  0.597431     -0.515117      -413.547       413.547       7164.78       7578.33    
  27  0.859562     -0.151333      -121.493       121.493       4773.88       4895.37    
  28  0.554826     -0.589100      -472.942       472.942       7293.57       7766.51    
  29  0.128413      -2.05250      -1647.79       1647.79       7512.14       9159.93    
  30  0.311170      -1.16742      -937.227       937.227       6526.89       7464.12    
  31  0.606679     -0.499755      -401.214       401.214       7603.86       8005.07    
  32  0.923238     -0.798686E-01  -64.1202       64.1202       7510.70       7574.82    
  33  0.734154     -0.309037      -248.101       248.101       7512.56       7760.66    
  34  0.988670     -0.113947E-01  -9.14792       9.14792       7388.62       7397.77    
  35  0.136308      -1.99284      -1599.89       1599.89       6841.78       8441.67    
  36  0.345839      -1.06178      -852.422       852.422       7709.94       8562.36    
  37  0.349440      -1.05142      -844.105       844.105       7892.17       8736.27    
  38  0.625658E-01  -2.77154      -2225.05       2225.05       6713.21       8938.26    
  39  0.394804     -0.929365      -746.113       746.113       8288.68       9034.79    
  40  0.899667E-02  -4.71090      -3782.01       3782.01       7536.74       11318.7    
  41  0.823946     -0.193651      -155.467       155.467       8603.77       8759.24    
  42  0.834235     -0.181240      -145.504       145.504       8382.14       8527.64    
  43  0.777534     -0.251627      -202.012       202.012       8424.04       8626.05    
  44  0.384993     -0.954531      -766.317       766.317       8203.20       8969.52    
  45  0.247443E-01  -3.69916      -2969.76       2969.76       8533.89       11503.7    
  46  0.810695     -0.209863      -168.482       168.482       8277.14       8445.62    
  47  0.893618     -0.112477      -90.2987       90.2987       9020.91       9111.20    
  48  0.545617     -0.605837      -486.379       486.379       8905.23       9391.61    
  49  0.587193     -0.532402      -427.424       427.424       8747.78       9175.21    
  50  0.991207     -0.883185E-02  -7.09040       7.09040       7562.90       7569.99    
  51  0.477440     -0.739316      -593.539       593.539       9645.91       10239.5    
  52  0.444858     -0.810000      -650.285       650.285       9599.81       10250.1    
  53  0.103440      -2.26876      -1821.41       1821.41       9218.69       11040.1    
  54  0.320718      -1.13719      -912.962       912.962       9565.36       10478.3    
  55  0.161721      -1.82188      -1462.65       1462.65       9680.84       11143.5    
  56  0.912244     -0.918481E-01  -73.7376       73.7376       7593.84       7667.58    
  57  0.358583      -1.02559      -823.368       823.368       7920.16       8743.53    
  58  0.263871      -1.33229      -1069.59       1069.59       9749.08       10818.7    
  59  0.782230     -0.245606      -197.178       197.178       9012.53       9209.71    
  60  0.592946     -0.522652      -419.596       419.596       10157.0       10576.6    
  61  0.652732     -0.426589      -342.474       342.474       10025.9       10368.4    
  62  0.817021     -0.202091      -162.243       162.243       10373.9       10536.1    
  63  0.177213      -1.73040      -1389.20       1389.20       8968.45       10357.7    
  64  0.263258      -1.33462      -1071.46       1071.46       5310.48       6381.94    
loop,thermsimp(1:2)       14   868.500       346.285    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236       5242.64          0.90          1.09         23.09          0.42          0.04         25.54
Just calling func    0   0         25.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5242.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       14
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       15
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      235     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -1216.58       1216.58       4773.88       5990.46    
   2  0.894567E-01  -2.41400      -1938.01       1938.01       4736.33       6674.34    
   3  0.863615     -0.146628      -117.716       117.716       5051.03       5168.75    
   4  0.807990     -0.213206      -171.166       171.166       4965.30       5136.46    
   5  0.318173      -1.14516      -919.359       919.359       4343.46       5262.81    
   6  0.464606     -0.766566      -615.415       615.415       4437.73       5053.14    
   7  0.574933     -0.553501      -444.362       444.362       4953.55       5397.91    
   8  0.974939     -0.253802E-01  -20.3758       20.3758       5223.16       5243.54    
   9  0.415757     -0.877653      -704.598       704.598       4888.69       5593.29    
  10  0.187109      -1.67606      -1345.58       1345.58       5292.23       6637.81    
  11  0.730515E-01  -2.61659      -2100.65       2100.65       5200.90       7301.55    
  12  0.209185      -1.56454      -1256.04       1256.04       5561.24       6817.28    
  13  0.496690     -0.699790      -561.806       561.806       4919.34       5481.15    
  14  0.862986     -0.147356      -118.301       118.301       6104.52       6222.82    
  15  0.888200     -0.118558      -95.1808       95.1808       5711.06       5806.24    
  16  0.380888     -0.965250      -774.923       774.923       5310.48       6085.41    
  17  0.135305      -2.00022      -1605.82       1605.82       5990.60       7596.42    
  18  0.927079     -0.757167E-01  -60.7869       60.7869       5326.05       5386.83    
  19  0.603067     -0.505727      -406.008       406.008       4723.70       5129.71    
  20  0.136202      -1.99362      -1600.52       1600.52       6093.62       7694.14    
  21  0.954653     -0.464076E-01  -37.2570       37.2570       6282.74       6319.99    
  22  0.151192      -1.88920      -1516.69       1516.69       5445.82       6962.51    
  23  0.449259     -0.800155      -642.381       642.381       4813.99       5456.37    
  24  0.780874     -0.247341      -198.571       198.571       7388.62       7587.19    
  25  0.456238     -0.784740      -630.006       630.006       6526.89       7156.90    
  26  0.163284      -1.81227      -1454.92       1454.92       7562.90       9017.83    
  27  0.821444     -0.196692      -157.908       157.908       7510.70       7668.61    
  28  0.861448     -0.149141      -119.733       119.733       7164.78       7284.52    
  29  0.924167     -0.788621E-01  -63.3121       63.3121       7593.84       7657.15    
  30  0.195059      -1.63445      -1312.17       1312.17       5728.33       7040.50    
  31  0.375134     -0.980472      -787.144       787.144       7512.56       8299.70    
  32  0.909862     -0.944628E-01  -75.8367       75.8367       7293.57       7369.40    
  33  0.831459     -0.184574      -148.180       148.180       6959.75       7107.93    
  34  0.627278     -0.466365      -374.407       374.407       7603.86       7978.27    
  35  0.918890     -0.845891E-01  -67.9099       67.9099       6144.95       6212.86    
  36  0.475784     -0.742791      -596.328       596.328       6841.78       7438.11    
  37  0.344524      -1.06559      -855.480       855.480       8277.14       9132.62    
  38  0.286778      -1.24905      -1002.76       1002.76       8382.14       9384.90    
  39  0.336148      -1.09020      -875.237       875.237       7709.94       8585.17    
  40  0.709840     -0.342716      -275.140       275.140       5996.15       6271.29    
  41  0.219827      -1.51491      -1216.20       1216.20       8424.04       9640.24    
  42  0.347594      -1.05672      -848.357       848.357       7892.17       8740.52    
  43  0.905734     -0.990099E-01  -79.4872       79.4872       7920.16       7999.65    
  44  0.826231     -0.190881      -153.243       153.243       8603.77       8757.01    
  45  0.400277     -0.915599      -735.062       735.062       6713.21       7448.27    
  46  0.555153     -0.588512      -472.470       472.470       8203.20       8675.67    
  47  0.864397     -0.145723      -116.990       116.990       8288.68       8405.67    
  48  0.277380E-01  -3.58495      -2878.08       2878.08       9020.91       11899.0    
  49  0.993968     -0.605015E-02  -4.85719       4.85719       7512.14       7517.00    
  50  0.717076     -0.332573      -266.997       266.997       8747.78       9014.78    
  51  0.736253     -0.306182      -245.809       245.809       9012.53       9258.34    
  52  0.278813      -1.27722      -1025.38       1025.38       8905.23       9930.61    
  53  0.646460     -0.436245      -350.226       350.226       9645.91       9996.14    
  54  0.600312     -0.510306      -409.684       409.684       9599.81       10009.5    
  55  0.295434      -1.21931      -978.889       978.889       8968.45       9947.34    
  56  0.946129     -0.553767E-01  -44.4576       44.4576       10025.9       10070.4    
  57  0.722008     -0.325719      -261.494       261.494       9565.36       9826.85    
  58  0.789514     -0.236338      -189.737       189.737       10373.9       10563.6    
  59  0.955429     -0.455949E-01  -36.6046       36.6046       10157.0       10193.7    
  60  0.693546     -0.365938      -293.782       293.782       9749.08       10042.9    
  61  0.979434     -0.207808E-01  -16.6833       16.6833       9218.69       9235.37    
  62  0.860966     -0.149700      -120.182       120.182       9680.84       9801.03    
  63  0.329063      -1.11151      -892.341       892.341       7536.74       8429.08    
  64  0.839540     -0.174902      -140.415       140.415       5242.64       5383.05    
loop,thermsimp(1:2)       15   1216.58       1938.01    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       4896.42          0.90          1.09         23.09          0.40          0.04         25.51
Just calling func    0   0         25.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238       5716.97          0.88          1.07         23.02          0.35          0.04         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4896.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       15
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       16
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      237     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -1173.89       1173.89       4437.73       5611.62    
   2  0.641193     -0.444425      -356.793       356.793       4723.70       5080.49    
   3  0.353033      -1.04119      -835.893       835.893       4965.30       5801.19    
   4  0.928955     -0.736953E-01  -59.1641       59.1641       5051.03       5110.20    
   5  0.350257      -1.04909      -842.230       842.230       5223.16       6065.39    
   6  0.682617     -0.381821      -306.534       306.534       4343.46       4649.99    
   7  0.162763      -1.81546      -1457.49       1457.49       5242.64       6700.12    
   8  0.874032     -0.134639      -108.091       108.091       5326.05       5434.14    
   9  0.518909     -0.656027      -526.672       526.672       4953.55       5480.22    
  10  0.461984     -0.772226      -619.959       619.959       4813.99       5433.95    
  11  0.449468     -0.799691      -642.009       642.009       4919.34       5561.35    
  12  0.523281     -0.647637      -519.937       519.937       4888.69       5408.63    
  13  0.637377     -0.450394      -361.586       361.586       5711.06       6072.65    
  14  0.596329     -0.516963      -415.029       415.029       4773.88       5188.91    
  15  0.286246      -1.25090      -1004.25       1004.25       5310.48       6314.74    
  16  0.590425     -0.526913      -423.017       423.017       6144.95       6567.97    
  17  0.853637     -0.158249      -127.045       127.045       6104.52       6231.56    
  18  0.245572      -1.40416      -1127.29       1127.29       5996.15       7123.44    
  19  0.375654     -0.979088      -786.032       786.032       6282.74       7068.77    
  20  0.281654      -1.26708      -1017.23       1017.23       5292.23       6309.47    
  21  0.443392     -0.813302      -652.936       652.936       4736.33       5389.27    
  22  0.442934     -0.814335      -653.765       653.765       5561.24       6215.00    
  23  0.171790      -1.76149      -1414.16       1414.16       5445.82       6859.98    
  24  0.802582     -0.219921      -176.558       176.558       5728.33       5904.88    
  25  0.162733      -1.81564      -1457.64       1457.64       6959.75       8417.39    
  26  0.838320     -0.176355      -141.581       141.581       6526.89       6668.47    
  27  0.210754      -1.55706      -1250.04       1250.04       7164.78       8414.83    
  28  0.240377      -1.42554      -1144.46       1144.46       5200.90       6345.36    
  29  0.173042E-01  -4.05680      -3256.89       3256.89       7293.57       10550.5    
  30  0.640146     -0.446059      -358.105       358.105       6841.78       7199.89    
  31  0.749210     -0.288736      -231.803       231.803       6713.21       6945.01    
  32  0.666162     -0.406222      -326.124       326.124       7512.14       7838.26    
  33  0.601746     -0.507920      -407.769       407.769       7388.62       7796.39    
  34  0.677044     -0.390020      -313.116       313.116       5990.60       6303.72    
  35  0.290379      -1.23657      -992.743       992.743       7593.84       8586.58    
  36  0.439723     -0.821610      -659.606       659.606       7510.70       8170.31    
  37  0.680091     -0.385528      -309.510       309.510       6093.62       6403.13    
  38  0.803784     -0.218425      -175.356       175.356       7603.86       7779.21    
  39  0.507823     -0.677622      -544.009       544.009       7920.16       8464.17    
  40  0.894573     -0.111408      -89.4410       89.4410       7512.56       7602.00    
  41  0.826908     -0.190062      -152.586       152.586       8288.68       8441.27    
  42  0.815562     -0.203878      -163.678       163.678       7536.74       7700.42    
  43  0.352457      -1.04283      -837.204       837.204       7709.94       8547.14    
  44  0.104059      -2.26279      -1816.62       1816.62       8203.20       10019.8    
  45  0.601892     -0.507677      -407.574       407.574       7892.17       8299.74    
  46  0.988184     -0.118862E-01  -9.54248       9.54248       8603.77       8613.31    
  47  0.733912     -0.309366      -248.366       248.366       8747.78       8996.15    
  48  0.107394      -2.23125      -1791.29       1791.29       7562.90       9354.19    
  49  0.592150     -0.523995      -420.674       420.674       8277.14       8697.81    
  50  0.821901     -0.196136      -157.462       157.462       9218.69       9376.15    
  51  0.400070E-01  -3.21870      -2584.04       2584.04       9012.53       11596.6    
  52  0.271211      -1.30486      -1047.57       1047.57       8382.14       9429.71    
  53  0.296309      -1.21635      -976.512       976.512       8424.04       9400.55    
  54  0.436334     -0.829346      -665.817       665.817       9680.84       10346.7    
  55  0.372372     -0.987863      -793.077       793.077       9565.36       10358.4    
  56  0.806182     -0.215446      -172.964       172.964       8905.23       9078.20    
  57  0.194087      -1.63945      -1316.18       1316.18       8968.45       10284.6    
  58  0.739876     -0.301273      -241.868       241.868       9645.91       9887.78    
  59  0.348380      -1.05446      -846.545       846.545       9599.81       10446.4    
  60  0.850149     -0.162343      -130.333       130.333       9749.08       9879.41    
  61  0.123296      -2.09317      -1680.44       1680.44       10025.9       11706.4    
  62  0.855160     -0.156467      -125.615       125.615       10157.0       10282.7    
  63  0.959969E-01  -2.34344      -1881.36       1881.36       10373.9       12255.2    
  64  0.739916     -0.301218      -241.824       241.824       4896.42       5138.24    
loop,thermsimp(1:2)       16   1173.89       356.793    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       4941.39          0.90          1.07         23.06          0.24          0.04         25.31
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4941.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       16
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       17
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      238     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -202.654       202.654       4343.46       4546.11    
   2  0.350417      -1.04863      -841.863       841.863       4723.70       5565.56    
   3  0.533846     -0.627648      -503.889       503.889       5051.03       5554.92    
   4  0.622955     -0.473280      -379.959       379.959       4896.42       5276.38    
   5  0.661091E-01  -2.71645      -2180.82       2180.82       4773.88       6954.70    
   6  0.759206     -0.275482      -221.163       221.163       4736.33       4957.49    
   7  0.430535     -0.842727      -676.559       676.559       4888.69       5565.25    
   8  0.257678      -1.35604      -1088.66       1088.66       4813.99       5902.65    
   9  0.296561      -1.21550      -975.829       975.829       5326.05       6301.88    
  10  0.805929     -0.215760      -173.216       173.216       4953.55       5126.76    
  11  0.421616     -0.863661      -693.365       693.365       4919.34       5612.71    
  12  0.767803     -0.264223      -212.124       212.124       4437.73       4649.85    
  13  0.605260     -0.502097      -403.094       403.094       4965.30       5368.39    
  14  0.566784     -0.567776      -455.823       455.823       5728.33       6184.15    
  15  0.292740      -1.22847      -986.242       986.242       5223.16       6209.41    
  16  0.898463     -0.107069      -85.9576       85.9576       5711.06       5797.02    
  17  0.218067      -1.52295      -1222.66       1222.66       5561.24       6783.90    
  18  0.856756     -0.154603      -124.118       124.118       6104.52       6228.63    
  19  0.338883      -1.08210      -868.733       868.733       5990.60       6859.34    
  20  0.796034     -0.228113      -183.134       183.134       5292.23       5475.37    
  21  0.778636     -0.250212      -200.875       200.875       5310.48       5511.36    
  22  0.575989     -0.551667      -442.890       442.890       5200.90       5643.79    
  23  0.355531      -1.03414      -830.232       830.232       6093.62       6923.85    
  24  0.164949      -1.80212      -1446.78       1446.78       6144.95       7591.73    
  25  0.315998      -1.15202      -924.865       924.865       6526.89       7451.76    
  26  0.330933      -1.10584      -887.791       887.791       5242.64       6130.43    
  27  0.429436     -0.845283      -678.611       678.611       5445.82       6124.43    
  28  0.464808     -0.766130      -615.066       615.066       6713.21       7328.27    
  29  0.192211      -1.64916      -1323.98       1323.98       6282.74       7606.72    
  30  0.866849     -0.142891      -114.715       114.715       5996.15       6110.86    
  31  0.474973     -0.744498      -597.699       597.699       6841.78       7439.48    
  32  0.667713     -0.403897      -324.257       324.257       7512.56       7836.82    
  33  0.994155     -0.586200E-02  -4.70614       4.70614       7536.74       7541.44    
  34  0.577739     -0.548634      -440.455       440.455       7603.86       8044.31    
  35  0.381919     -0.962546      -772.752       772.752       7388.62       8161.38    
  36  0.733204     -0.310331      -249.140       249.140       7512.14       7761.28    
  37  0.492382     -0.708500      -568.799       568.799       7510.70       8079.50    
  38  0.188899E-01  -3.96913      -3186.50       3186.50       7892.17       11078.7    
  39  0.741920E-01  -2.60110      -2088.22       2088.22       7164.78       9253.00    
  40  0.210592      -1.55783      -1250.66       1250.66       6959.75       8210.41    
  41  0.682838     -0.381498      -306.275       306.275       8288.68       8594.95    
  42  0.656831     -0.420328      -337.448       337.448       7920.16       8257.61    
  43  0.444670     -0.810424      -650.625       650.625       7709.94       8360.56    
  44  0.872301     -0.136621      -109.682       109.682       7593.84       7703.52    
  45  0.932741     -0.696282E-01  -55.8990       55.8990       8603.77       8659.67    
  46  0.601727     -0.507951      -407.794       407.794       8277.14       8684.93    
  47  0.940344     -0.615097E-01  -49.3813       49.3813       8747.78       8797.16    
  48  0.208477E-01  -3.87051      -3107.33       3107.33       8905.23       12012.6    
  49  0.257831      -1.35545      -1088.18       1088.18       7562.90       8651.08    
  50  0.522803     -0.648550      -520.669       520.669       9218.69       9739.36    
  51  0.676437     -0.390915      -313.835       313.835       8424.04       8737.87    
  52  0.612346     -0.490458      -393.750       393.750       8382.14       8775.89    
  53  0.206854      -1.57574      -1265.04       1265.04       9749.08       11014.1    
  54  0.201156      -1.60367      -1287.46       1287.46       9645.91       10933.4    
  55  0.785118     -0.241921      -194.219       194.219       8203.20       8397.42    
  56  0.534951     -0.625580      -502.229       502.229       10157.0       10659.3    
  57  0.147432      -1.91439      -1536.91       1536.91       8968.45       10505.4    
  58  0.696605     -0.361537      -290.250       290.250       9680.84       9971.09    
  59  0.711810     -0.339944      -272.914       272.914       9565.36       9838.27    
  60  0.934269     -0.679906E-01  -54.5842       54.5842       9599.81       9654.39    
  61  0.821040     -0.197183      -158.303       158.303       7293.57       7451.87    
  62  0.682914     -0.381386      -306.184       306.184       9012.53       9318.71    
  63  0.660876     -0.414189      -332.520       332.520       10025.9       10358.5    
  64  0.653213     -0.425852      -341.883       341.883       4941.39       5283.27    
loop,thermsimp(1:2)       17   202.654       841.863    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       7335.62          0.88          1.09         23.06          0.22          0.04         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7335.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       17
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       18
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      239     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -1144.40       1144.40       4343.46       5487.85    
   2  0.711556E-02  -4.94547      -3970.33       3970.33       4437.73       8408.06    
   3  0.909796     -0.945347E-01  -75.8945       75.8945       4736.33       4812.22    
   4  0.659218     -0.416702      -334.537       334.537       4953.55       5288.09    
   5  0.833482     -0.182144      -146.229       146.229       4896.42       5042.65    
   6  0.726295E-01  -2.62238      -2105.30       2105.30       4941.39       7046.69    
   7  0.687091     -0.375288      -301.289       301.289       4965.30       5266.59    
   8  0.860775     -0.149922      -120.360       120.360       5292.23       5412.59    
   9  0.846215     -0.166982      -134.057       134.057       5310.48       5444.54    
  10  0.398551     -0.919919      -738.530       738.530       5051.03       5789.56    
  11  0.416092     -0.876849      -703.953       703.953       4888.69       5592.64    
  12  0.463389     -0.769189      -617.521       617.521       4723.70       5341.22    
  13  0.207356      -1.57332      -1263.09       1263.09       4919.34       6182.44    
  14  0.133003      -2.01738      -1619.60       1619.60       5200.90       6820.50    
  15  0.464971     -0.765779      -614.784       614.784       5711.06       6325.85    
  16  0.568281     -0.565140      -453.706       453.706       4813.99       5267.70    
  17  0.638811     -0.448147      -359.781       359.781       5996.15       6355.93    
  18  0.865664     -0.144259      -115.814       115.814       5445.82       5561.63    
  19  0.475002     -0.744436      -597.649       597.649       5242.64       5840.28    
  20  0.537086     -0.621597      -499.031       499.031       5728.33       6227.36    
  21  0.782345     -0.245459      -197.060       197.060       5223.16       5420.22    
  22  0.725469     -0.320937      -257.655       257.655       6104.52       6362.17    
  23  0.701426E-01  -2.65723      -2133.28       2133.28       5326.05       7459.32    
  24  0.297043      -1.21388      -974.528       974.528       5561.24       6535.77    
  25  0.444870     -0.809973      -650.263       650.263       5990.60       6640.87    
  26  0.685684     -0.377338      -302.935       302.935       6093.62       6396.55    
  27  0.651244     -0.428871      -344.307       344.307       4773.88       5118.19    
  28  0.269082      -1.31274      -1053.89       1053.89       6713.21       7767.10    
  29  0.177107      -1.73100      -1389.69       1389.69       6841.78       8231.47    
  30  0.766464     -0.265968      -213.524       213.524       6526.89       6740.42    
  31  0.801833     -0.220855      -177.307       177.307       7293.57       7470.87    
  32  0.759414     -0.275209      -220.943       220.943       7536.74       7757.68    
  33  0.566307     -0.568618      -456.498       456.498       6144.95       6601.45    
  34  0.297948      -1.21084      -972.084       972.084       6282.74       7254.82    
  35  0.430097E-01  -3.14633      -2525.94       2525.94       7593.84       10119.8    
  36  0.529414     -0.635984      -510.581       510.581       7512.14       8022.72    
  37  0.717133     -0.332494      -266.933       266.933       7512.56       7779.49    
  38  0.209457      -1.56323      -1255.00       1255.00       7603.86       8858.86    
  39  0.732428     -0.311390      -249.990       249.990       7510.70       7760.69    
  40  0.697782     -0.359849      -288.894       288.894       7388.62       7677.52    
  41  0.977227     -0.230362E-01  -18.4939       18.4939       6959.75       6978.24    
  42  0.744700     -0.294773      -236.650       236.650       7920.16       8156.81    
  43  0.713341     -0.337796      -271.190       271.190       7709.94       7981.13    
  44  0.497823     -0.697510      -559.976       559.976       8203.20       8763.17    
  45  0.968758     -0.317404E-01  -25.4818       25.4818       8288.68       8314.16    
  46  0.287665      -1.24596      -1000.28       1000.28       7562.90       8563.18    
  47  0.964672     -0.359674E-01  -28.8754       28.8754       8603.77       8632.65    
  48  0.733769     -0.309561      -248.522       248.522       8277.14       8525.66    
  49  0.692680     -0.367187      -294.786       294.786       8424.04       8718.82    
  50  0.328873      -1.11208      -892.803       892.803       8382.14       9274.94    
  51  0.744920     -0.294478      -236.413       236.413       8747.78       8984.19    
  52  0.655188     -0.422834      -339.460       339.460       7164.78       7504.24    
  53  0.255467      -1.36466      -1095.58       1095.58       9012.53       10108.1    
  54  0.262199E-02  -5.94382      -4771.82       4771.82       9599.81       14371.6    
  55  0.538310     -0.619321      -497.204       497.204       9218.69       9715.89    
  56  0.456270     -0.784671      -629.951       629.951       9565.36       10195.3    
  57  0.990209     -0.983957E-02  -7.89941       7.89941       9680.84       9688.74    
  58  0.262373      -1.33799      -1074.16       1074.16       10025.9       11100.1    
  59  0.645275     -0.438079      -351.699       351.699       8968.45       9320.15    
  60  0.423351     -0.859554      -690.068       690.068       10157.0       10847.1    
  61  0.353204      -1.04071      -835.502       835.502       9645.91       10481.4    
  62  0.721881     -0.325895      -261.635       261.635       9749.08       10010.7    
  63  0.213966      -1.54194      -1237.90       1237.90       7892.17       9130.07    
  64  0.176516      -1.73434      -1392.37       1392.37       7335.62       8727.98    
loop,thermsimp(1:2)       18   1144.40       3970.33    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241       5720.99          0.90          1.09         23.09          0.24          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    5721.0        3.196     0.3036E-01  4.940     -100.0    -0.8796E-01
                      -1.097      2.102     -100.0      2.761     0.3028    
                      0.5376     0.8709      2.400      0.000      0.000    
                      -2.470      0.000      0.000      0.000     -1.221    

                      -2.500     0.1159E+05 0.1322E+05 -1142.     -4008.    
                      -2.000     -1.924    -0.9404     -3.842     -2.458    
                      -11.24     -2.518      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.2808     0.5996E-01  0.000    -0.3526    
                      0.1833    -0.3395     0.5576E-01 0.1029    -0.2468    

                     -0.9274     -2.166      0.000     0.3642     0.3734    
                      0.8541E-01-0.9781     0.1564     0.1173    -0.5566    
                     -0.1741    -0.8439E-01 0.1689     -1.008      0.000    

                     -0.9154    -0.6676      3.094     -1.966      0.000    
                       0.000      9.412      8.030     -7361.     -4.000    
                      0.9740    -0.6061      9.238      8.664     -4847.    

                      -4.000      1.042      1.002      9.540      10.20    
                     -0.1140E+05 -4.000     0.1767     0.9149      9.321    
                       9.150    -0.1179E+05 -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5720.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       18
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       19
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      240     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -261.280       261.280       4736.33       4997.61    
   2  0.240049      -1.42691      -1145.55       1145.55       4896.42       6041.97    
   3  0.365543      -1.00637      -807.936       807.936       4773.88       5581.82    
   4  0.399010     -0.918769      -737.607       737.607       4965.30       5702.90    
   5  0.685268     -0.377945      -303.422       303.422       4813.99       5117.41    
   6  0.335805E-01  -3.39381      -2724.62       2724.62       4953.55       7678.17    
   7  0.820520     -0.197817      -158.811       158.811       4723.70       4882.51    
   8  0.756560     -0.278973      -223.966       223.966       5292.23       5516.20    
   9  0.869461     -0.139882      -112.300       112.300       5223.16       5335.46    
  10  0.787378     -0.239047      -191.912       191.912       5310.48       5502.40    
  11  0.330926      -1.10586      -887.808       887.808       4343.46       5231.26    
  12  0.339084E-01  -3.38409      -2716.82       2716.82       5445.82       8162.64    
  13  0.672805     -0.396300      -318.158       318.158       4888.69       5206.85    
  14  0.822413     -0.195513      -156.962       156.962       5051.03       5207.99    
  15  0.928870     -0.737865E-01  -59.2373       59.2373       5242.64       5301.87    
  16  0.778944     -0.249816      -200.558       200.558       4919.34       5119.90    
  17  0.301602E-01  -3.50123      -2810.86       2810.86       5728.33       8539.19    
  18  0.292626      -1.22886      -986.556       986.556       5711.06       6697.62    
  19  0.149515      -1.90036      -1525.65       1525.65       5996.15       7521.79    
  20  0.500330E-01  -2.99507      -2404.51       2404.51       6104.52       8509.02    
  21  0.759114E-01  -2.57819      -2069.82       2069.82       6093.62       8163.44    
  22  0.613440     -0.488673      -392.317       392.317       5561.24       5953.55    
  23  0.132502      -2.02116      -1622.63       1622.63       6144.95       7767.58    
  24  0.189750E-02  -6.26722      -5031.46       5031.46       5990.60       11022.1    
  25  0.507622     -0.678018      -544.327       544.327       6526.89       7071.22    
  26  0.378733     -0.970924      -779.478       779.478       5200.90       5980.38    
  27  0.139411      -1.97033      -1581.82       1581.82       6959.75       8541.57    
  28  0.298599      -1.20865      -970.333       970.333       4941.39       5911.72    
  29  0.767617     -0.264464      -212.317       212.317       6282.74       6495.05    
  30  0.656077     -0.421478      -338.371       338.371       5326.05       5664.42    
  31  0.701883     -0.353988      -284.189       284.189       7293.57       7577.75    
  32  0.940950     -0.608655E-01  -48.8641       48.8641       7164.78       7213.65    
  33  0.621043     -0.476355      -382.428       382.428       7388.62       7771.05    
  34  0.622910     -0.473353      -380.017       380.017       7536.74       7916.76    
  35  0.525019     -0.644320      -517.274       517.274       7510.70       8027.97    
  36  0.871126     -0.137969      -110.764       110.764       6713.21       6823.97    
  37  0.475532     -0.743322      -596.754       596.754       7512.56       8109.31    
  38  0.320094      -1.13914      -914.526       914.526       7709.94       8624.46    
  39  0.688986     -0.372534      -299.078       299.078       7512.14       7811.22    
  40  0.831218     -0.184863      -148.412       148.412       7920.16       8068.57    
  41  0.639633     -0.446861      -358.749       358.749       6841.78       7200.53    
  42  0.628257     -0.464807      -373.157       373.157       8288.68       8661.84    
  43  0.925835     -0.770596E-01  -61.8650       61.8650       4437.73       4499.59    
  44  0.611089     -0.492512      -395.399       395.399       8277.14       8672.54    
  45  0.423003E-01  -3.16296      -2539.29       2539.29       7562.90       10102.2    
  46  0.430763     -0.842198      -676.134       676.134       8603.77       9279.90    
  47  0.374764     -0.981459      -787.936       787.936       8424.04       9211.97    
  48  0.109336      -2.21333      -1776.90       1776.90       7335.62       9112.52    
  49  0.642636E-02  -5.04735      -4052.12       4052.12       8203.20       12255.3    
  50  0.232984      -1.45679      -1169.54       1169.54       7603.86       8773.40    
  51  0.169005E-01  -4.08041      -3275.84       3275.84       8747.78       12023.6    
  52  0.183441      -1.69586      -1361.47       1361.47       7892.17       9253.64    
  53  0.257429      -1.35701      -1089.44       1089.44       8382.14       9471.58    
  54  0.784332     -0.242922      -195.023       195.023       8968.45       9163.48    
  55  0.417881     -0.872558      -700.508       700.508       9680.84       10381.4    
  56  0.597408E-01  -2.81774      -2262.14       2262.14       9218.69       11480.8    
  57  0.854186E-01  -2.46019      -1975.09       1975.09       9749.08       11724.2    
  58  0.484163     -0.725335      -582.314       582.314       9012.53       9594.84    
  59  0.392210     -0.935958      -751.407       751.407       7593.84       8345.24    
  60  0.544229     -0.608385      -488.424       488.424       9565.36       10053.8    
  61  0.846696     -0.166413      -133.600       133.600       9645.91       9779.51    
  62  0.273327      -1.29709      -1041.33       1041.33       10157.0       11198.4    
  63  0.253790      -1.37125      -1100.87       1100.87       10025.9       11126.8    
  64  0.683640     -0.380324      -305.332       305.332       5720.99       6026.33    
loop,thermsimp(1:2)       19   261.280       1145.55    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       4407.40          0.90          1.09         23.05          0.17          0.04         25.24
Just calling func    0   0         25.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243       6404.30          0.88          1.08         22.99          0.39          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4407.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       19
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       20
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      242     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -935.456       935.456       4437.73       5373.18    
   2  0.362384      -1.01505      -814.904       814.904       4723.70       5538.60    
   3  0.900627     -0.104664      -84.0266       84.0266       4736.33       4820.36    
   4  0.233893      -1.45289      -1166.41       1166.41       4813.99       5980.40    
   5  0.183338      -1.69642      -1361.93       1361.93       4919.34       6281.27    
   6  0.351708      -1.04495      -838.910       838.910       4888.69       5727.60    
   7  0.979617     -0.205938E-01  -16.5331       16.5331       5051.03       5067.57    
   8  0.801294     -0.221527      -177.847       177.847       4343.46       4521.30    
   9  0.423893     -0.858275      -689.041       689.041       5242.64       5931.68    
  10  0.486446     -0.720630      -578.537       578.537       5223.16       5801.70    
  11  0.430531     -0.842736      -676.566       676.566       5310.48       5987.05    
  12  0.214629      -1.53884      -1235.42       1235.42       5292.23       6527.65    
  13  0.860310     -0.150463      -120.795       120.795       4773.88       4894.68    
  14  0.450659     -0.797045      -639.884       639.884       5326.05       5965.93    
  15  0.867432     -0.142218      -114.176       114.176       4965.30       5079.47    
  16  0.850327     -0.162134      -130.164       130.164       4941.39       5071.55    
  17  0.914193     -0.897130E-01  -72.0235       72.0235       5561.24       5633.26    
  18  0.908448     -0.960172E-01  -77.0846       77.0846       5200.90       5277.99    
  19  0.349788E-01  -3.35301      -2691.87       2691.87       5720.99       8412.86    
  20  0.825048     -0.192314      -154.394       154.394       4896.42       5050.81    
  21  0.628933     -0.463730      -372.292       372.292       6282.74       6655.03    
  22  0.756366     -0.279229      -224.171       224.171       5711.06       5935.24    
  23  0.545707     -0.605674      -486.247       486.247       6713.21       7199.46    
  24  0.653619     -0.425231      -341.385       341.385       6526.89       6868.28    
  25  0.781643     -0.246357      -197.780       197.780       6841.78       7039.56    
  26  0.444411     -0.811005      -651.092       651.092       7164.78       7815.88    
  27  0.223111      -1.50008      -1204.30       1204.30       5996.15       7200.45    
  28  0.143901      -1.93863      -1556.37       1556.37       7293.57       8849.94    
  29  0.419282E-01  -3.17180      -2546.38       2546.38       4953.55       7499.93    
  30  0.407367     -0.898040      -720.965       720.965       6144.95       6865.92    
  31  0.722138     -0.325538      -261.349       261.349       7388.62       7649.97    
  32  0.290143      -1.23738      -993.395       993.395       7512.14       8505.54    
  33  0.236931E-01  -3.74257      -3004.61       3004.61       7536.74       10541.4    
  34  0.198981      -1.61454      -1296.19       1296.19       7510.70       8806.89    
  35  0.765966     -0.266617      -214.046       214.046       7920.16       8134.20    
  36  0.522733     -0.648684      -520.777       520.777       7512.56       8033.34    
  37  0.297579E-01  -3.51466      -2821.64       2821.64       5445.82       8267.46    
  38  0.175475      -1.74026      -1397.11       1397.11       6093.62       7490.73    
  39  0.311931      -1.16497      -935.264       935.264       7593.84       8529.10    
  40  0.310920      -1.16822      -937.872       937.872       6104.52       7042.39    
  41  0.122272      -2.10150      -1687.13       1687.13       5728.33       7415.46    
  42  0.949359     -0.519686E-01  -41.7215       41.7215       6959.75       7001.47    
  43  0.500750     -0.691648      -555.270       555.270       7709.94       8265.21    
  44  0.729401E-01  -2.61812      -2101.88       2101.88       8288.68       10390.6    
  45  0.952528     -0.486360E-01  -39.0460       39.0460       8277.14       8316.19    
  46  0.718842     -0.330114      -265.023       265.023       7603.86       7868.88    
  47  0.529396     -0.636019      -510.609       510.609       7335.62       7846.23    
  48  0.314661      -1.15626      -928.268       928.268       8968.45       9896.72    
  49  0.947465     -0.539649E-01  -43.3241       43.3241       8424.04       8467.36    
  50  0.613869     -0.487974      -391.756       391.756       7892.17       8283.92    
  51  0.303056      -1.19384      -958.439       958.439       8603.77       9562.21    
  52  0.749186     -0.288769      -231.829       231.829       8382.14       8613.97    
  53  0.671119E-01  -2.70139      -2168.74       2168.74       9012.53       11181.3    
  54  0.545553E-02  -5.21113      -4183.60       4183.60       9645.91       13829.5    
  55  0.866985     -0.142734      -114.590       114.590       9565.36       9679.95    
  56  0.622088     -0.474673      -381.078       381.078       7562.90       7943.98    
  57  0.471050     -0.752790      -604.356       604.356       9680.84       10285.2    
  58  0.433456     -0.835964      -671.130       671.130       5990.60       6661.73    
  59  0.946573     -0.549070E-01  -44.0805       44.0805       10025.9       10070.0    
  60  0.795665     -0.228577      -183.506       183.506       10157.0       10340.6    
  61  0.536872E-01  -2.92458      -2347.91       2347.91       9218.69       11566.6    
  62  0.761403     -0.272592      -218.843       218.843       9749.08       9967.92    
  63  0.615271     -0.485692      -389.924       389.924       8747.78       9137.71    
  64  0.585500     -0.535288      -429.741       429.741       4407.40       4837.14    
loop,thermsimp(1:2)       20   935.456       814.904    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244       8869.72          0.89          1.08         23.07          0.20          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8869.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       20
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       21
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      243     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -947.552       947.552       4343.46       5291.01    
   2  0.575213     -0.553015      -443.972       443.972       4736.33       5180.30    
   3  0.632244     -0.458480      -368.077       368.077       4407.40       4775.48    
   4  0.819203     -0.199424      -160.101       160.101       4773.88       4933.98    
   5  0.137693E-02  -6.58790      -5288.90       5288.90       4896.42       10185.3    
   6  0.367814      -1.00018      -802.964       802.964       5051.03       5854.00    
   7  0.452636     -0.792666      -636.369       636.369       4941.39       5577.76    
   8  0.278102      -1.27977      -1027.43       1027.43       4965.30       5992.72    
   9  0.417803     -0.872745      -700.658       700.658       5200.90       5901.56    
  10  0.682140     -0.382521      -307.096       307.096       4437.73       4744.82    
  11  0.204733      -1.58605      -1273.31       1273.31       4723.70       5997.01    
  12  0.637442     -0.450292      -361.504       361.504       5561.24       5922.74    
  13  0.114518      -2.16702      -1739.73       1739.73       4888.69       6628.42    
  14  0.724207     -0.322678      -259.053       259.053       5223.16       5482.22    
  15  0.461399     -0.773492      -620.976       620.976       5242.64       5863.61    
  16  0.731739     -0.312332      -250.746       250.746       5711.06       5961.81    
  17  0.773272     -0.257124      -206.425       206.425       5326.05       5532.47    
  18  0.789195     -0.236742      -190.061       190.061       4813.99       5004.05    
  19  0.762001     -0.271807      -218.212       218.212       5310.48       5528.70    
  20  0.933384     -0.689386E-01  -55.3453       55.3453       4919.34       4974.69    
  21  0.694037     -0.365230      -293.214       293.214       5292.23       5585.45    
  22  0.423570     -0.859038      -689.653       689.653       6282.74       6972.39    
  23  0.272919      -1.29858      -1042.53       1042.53       5990.60       7033.13    
  24  0.535843     -0.623914      -500.891       500.891       6144.95       6645.85    
  25  0.902288     -0.102822      -82.5473       82.5473       6526.89       6609.44    
  26  0.479374     -0.735275      -590.294       590.294       6959.75       7550.04    
  27  0.494900E-01  -3.00599      -2413.27       2413.27       6841.78       9255.05    
  28  0.921867     -0.813539E-01  -65.3126       65.3126       6104.52       6169.83    
  29  0.132425      -2.02174      -1623.09       1623.09       6713.21       8336.30    
  30  0.640539     -0.445446      -357.613       357.613       5996.15       6353.76    
  31  0.215363      -1.53543      -1232.68       1232.68       5728.33       6961.00    
  32  0.437204E-01  -3.12994      -2512.78       2512.78       6093.62       8606.40    
  33  0.166028      -1.79560      -1441.55       1441.55       4953.55       6395.09    
  34  0.425825     -0.853727      -685.390       685.390       7388.62       8074.01    
  35  0.810393     -0.210235      -168.781       168.781       7164.78       7333.56    
  36  0.855958     -0.155534      -124.866       124.866       7335.62       7460.48    
  37  0.830452     -0.185786      -149.153       149.153       7603.86       7753.01    
  38  0.658784     -0.417359      -335.065       335.065       7562.90       7897.97    
  39  0.910965     -0.932509E-01  -74.8637       74.8637       7512.56       7587.42    
  40  0.603480     -0.505043      -405.459       405.459       7920.16       8325.62    
  41  0.702610     -0.352953      -283.358       283.358       7709.94       7993.30    
  42  0.329065      -1.11150      -892.335       892.335       5445.82       6338.15    
  43  0.790497     -0.235094      -188.738       188.738       7892.17       8080.90    
  44  0.641572     -0.443834      -356.319       356.319       8277.14       8633.46    
  45  0.650683     -0.429733      -344.999       344.999       5720.99       6065.99    
  46  0.194049E-02  -6.24481      -5013.47       5013.47       8424.04       13437.5    
  47  0.662053     -0.412409      -331.091       331.091       7512.14       7843.23    
  48  0.294846      -1.22130      -980.486       980.486       7593.84       8574.32    
  49  0.709874     -0.342668      -275.101       275.101       8382.14       8657.24    
  50  0.700314     -0.356226      -285.986       285.986       7510.70       7796.69    
  51  0.639811E-01  -2.74917      -2207.09       2207.09       7293.57       9500.65    
  52  0.251451      -1.38051      -1108.30       1108.30       8747.78       9856.08    
  53  0.828691     -0.187907      -150.856       150.856       8603.77       8754.63    
  54  0.962710     -0.380034E-01  -30.5100       30.5100       9565.36       9595.87    
  55  0.429583     -0.844940      -678.336       678.336       8968.45       9646.79    
  56  0.871108     -0.137990      -110.781       110.781       9749.08       9859.86    
  57  0.328516      -1.11317      -893.676       893.676       10025.9       10919.6    
  58  0.401423     -0.912741      -732.767       732.767       9680.84       10413.6    
  59  0.671285     -0.398562      -319.974       319.974       10157.0       10477.0    
  60  0.919587     -0.838302E-01  -67.3007       67.3007       8288.68       8355.98    
  61  0.209634      -1.56239      -1254.32       1254.32       7536.74       8791.06    
  62  0.894137     -0.111896      -89.8324       89.8324       9012.53       9102.36    
  63  0.623590     -0.472262      -379.142       379.142       9218.69       9597.83    
  64  0.469722     -0.755615      -606.623       606.623       8869.72       9476.35    
loop,thermsimp(1:2)       21   947.552       443.972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       5247.38          0.90          1.08         23.09          0.48          0.04         25.59
Just calling func    0   0         25.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5247.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       21
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       22
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      244     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -141.028       141.028       4437.73       4578.76    
   2  0.801853     -0.220830      -177.287       177.287       4407.40       4584.69    
   3  0.768645     -0.263126      -211.243       211.243       4773.88       4985.12    
   4  0.855557     -0.156003      -125.242       125.242       4919.34       5044.59    
   5  0.845591     -0.167720      -134.649       134.649       4813.99       4948.64    
   6  0.350050      -1.04968      -842.704       842.704       4736.33       5579.03    
   7  0.927608     -0.751463E-01  -60.3290       60.3290       4343.46       4403.79    
   8  0.655345E-01  -2.72518      -2187.83       2187.83       5223.16       7410.99    
   9  0.355481      -1.03428      -830.345       830.345       5310.48       6140.83    
  10  0.728523     -0.316737      -254.283       254.283       5326.05       5580.33    
  11  0.573220     -0.556486      -446.758       446.758       4941.39       5388.14    
  12  0.112478      -2.18499      -1754.16       1754.16       5292.23       7046.39    
  13  0.338739      -1.08253      -869.075       869.075       5051.03       5920.11    
  14  0.239648      -1.42858      -1146.90       1146.90       5242.64       6389.53    
  15  0.918959     -0.845134E-01  -67.8491       67.8491       5200.90       5268.75    
  16  0.283771      -1.25959      -1011.22       1011.22       5561.24       6572.46    
  17  0.414404     -0.880913      -707.215       707.215       5711.06       6418.28    
  18  0.716403     -0.333512      -267.751       267.751       4965.30       5233.05    
  19  0.317726      -1.14657      -920.488       920.488       4723.70       5644.19    
  20  0.339005      -1.08174      -868.444       868.444       5720.99       6589.44    
  21  0.163059      -1.81364      -1456.03       1456.03       6104.52       7560.55    
  22  0.477081     -0.740069      -594.143       594.143       5445.82       6039.96    
  23  0.105851      -2.24573      -1802.92       1802.92       5996.15       7799.06    
  24  0.840431     -0.173840      -139.562       139.562       4953.55       5093.11    
  25  0.235315      -1.44683      -1161.55       1161.55       6526.89       7688.44    
  26  0.865464     -0.144489      -115.999       115.999       4888.69       5004.69    
  27  0.909462     -0.949026E-01  -76.1898       76.1898       6144.95       6221.14    
  28  0.152105E-01  -4.18577      -3360.42       3360.42       5728.33       9088.75    
  29  0.962485     -0.382371E-01  -30.6976       30.6976       6282.74       6313.43    
  30  0.259410      -1.34934      -1083.28       1083.28       5990.60       7073.89    
  31  0.364880      -1.00819      -809.393       809.393       7164.78       7974.18    
  32  0.467235     -0.760923      -610.885       610.885       7335.62       7946.50    
  33  0.844908     -0.168527      -135.297       135.297       6959.75       7095.05    
  34  0.188232      -1.67008      -1340.78       1340.78       7512.56       8853.34    
  35  0.496585     -0.700000      -561.975       561.975       7603.86       8165.83    
  36  0.410505     -0.890367      -714.805       714.805       7510.70       8225.51    
  37  0.533875     -0.627594      -503.845       503.845       7512.14       8015.99    
  38  0.610668     -0.493202      -395.953       395.953       7562.90       7958.85    
  39  0.241933      -1.41910      -1139.28       1139.28       7709.94       8849.22    
  40  0.642629     -0.442188      -354.997       354.997       7388.62       7743.62    
  41  0.775072     -0.254799      -204.558       204.558       7892.17       8096.72    
  42  0.345343      -1.06322      -853.572       853.572       7920.16       8773.73    
  43  0.844097     -0.169488      -136.068       136.068       6713.21       6849.28    
  44  0.426886     -0.851239      -683.393       683.393       8288.68       8972.07    
  45  0.594109     -0.520693      -418.023       418.023       7593.84       8011.86    
  46  0.489527     -0.714316      -573.468       573.468       6093.62       6667.09    
  47  0.313882      -1.15874      -930.260       930.260       8277.14       9207.40    
  48  0.687066     -0.375325      -301.319       301.319       8382.14       8683.46    
  49  0.394505     -0.930124      -746.723       746.723       8603.77       9350.49    
  50  0.971200     -0.292233E-01  -23.4610       23.4610       7536.74       7560.20    
  51  0.916939     -0.867145E-01  -69.6162       69.6162       9012.53       9082.15    
  52  0.968457     -0.320511E-01  -25.7313       25.7313       6841.78       6867.51    
  53  0.437414     -0.826876      -663.833       663.833       8869.72       9533.56    
  54  0.647516     -0.434611      -348.915       348.915       7293.57       7642.48    
  55  0.181293      -1.70764      -1370.93       1370.93       9565.36       10936.3    
  56  0.836714     -0.178273      -143.121       143.121       9218.69       9361.81    
  57  0.940459     -0.613876E-01  -49.2832       49.2832       8968.45       9017.74    
  58  0.141896      -1.95266      -1567.64       1567.64       8747.78       10315.4    
  59  0.111323      -2.19532      -1762.45       1762.45       9749.08       11511.5    
  60  0.721494E-01  -2.62902      -2110.63       2110.63       4896.42       7007.05    
  61  0.618358     -0.480687      -385.906       385.906       9680.84       10066.8    
  62  0.825766     -0.191444      -153.695       153.695       10157.0       10310.7    
  63  0.438611     -0.824143      -661.640       661.640       10025.9       10687.6    
  64  0.158533      -1.84179      -1478.63       1478.63       5247.38       6726.01    
loop,thermsimp(1:2)       22   141.028       177.287    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246       6784.70          0.89          1.08         23.12          0.49          0.04         25.62
Just calling func    0   0         25.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6784.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       22
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       23
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      245     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -132.029       132.029       4343.46       4475.48    
   2  0.848474     -0.164316      -131.916       131.916       4437.73       4569.64    
   3  0.146795      -1.91872      -1540.39       1540.39       4407.40       5947.79    
   4  0.398624     -0.919738      -738.385       738.385       4813.99       5552.38    
   5  0.888093     -0.118679      -95.2776       95.2776       4773.88       4869.16    
   6  0.475009     -0.744421      -597.637       597.637       4888.69       5486.33    
   7  0.120824      -2.11342      -1696.70       1696.70       4919.34       6616.04    
   8  0.270052      -1.30914      -1051.01       1051.01       4953.55       6004.55    
   9  0.201748E-01  -3.90332      -3133.67       3133.67       4965.30       8098.97    
  10  0.999386     -0.614559E-03 -0.493380      0.493380       5200.90       5201.39    
  11  0.212655      -1.54808      -1242.83       1242.83       4941.39       6184.22    
  12  0.197911      -1.61994      -1300.52       1300.52       4736.33       6036.85    
  13  0.786394     -0.240297      -192.916       192.916       5326.05       5518.96    
  14  0.781263     -0.246844      -198.171       198.171       4723.70       4921.87    
  15  0.788011     -0.238244      -191.267       191.267       5051.03       5242.30    
  16  0.956387     -0.445927E-01  -35.7999       35.7999       5445.82       5481.62    
  17  0.717415     -0.332100      -266.617       266.617       5310.48       5577.10    
  18  0.808756     -0.212258      -170.405       170.405       6144.95       6315.36    
  19  0.756838     -0.278606      -223.671       223.671       6282.74       6506.41    
  20  0.570684     -0.560919      -450.318       450.318       5242.64       5692.95    
  21  0.946031     -0.554796E-01  -44.5402       44.5402       5711.06       5755.60    
  22  0.678634E-01  -2.69026      -2159.80       2159.80       5561.24       7721.03    
  23  0.631502     -0.459654      -369.020       369.020       5720.99       6090.01    
  24  0.114784E-01  -4.46729      -3586.43       3586.43       6093.62       9680.05    
  25  0.549681     -0.598417      -480.422       480.422       5247.38       5727.81    
  26  0.846433     -0.166725      -133.850       133.850       6713.21       6847.06    
  27  0.441841     -0.816805      -655.748       655.748       6841.78       7497.53    
  28  0.299100      -1.20698      -968.987       968.987       4896.42       5865.41    
  29  0.378130     -0.972517      -780.757       780.757       5292.23       6072.99    
  30  0.830469     -0.185764      -149.135       149.135       5990.60       6139.74    
  31  0.675108     -0.392883      -315.415       315.415       6959.75       7275.16    
  32  0.997619     -0.238377E-02  -1.91374       1.91374       5223.16       5225.08    
  33  0.897623     -0.108005      -86.7085       86.7085       7536.74       7623.45    
  34  0.591811E-01  -2.82715      -2269.70       2269.70       6104.52       8374.21    
  35  0.229825      -1.47044      -1180.50       1180.50       7293.57       8474.06    
  36  0.654017     -0.424622      -340.896       340.896       6526.89       6867.79    
  37  0.305777      -1.18490      -951.263       951.263       7388.62       8339.89    
  38  0.936135     -0.659954E-01  -52.9825       52.9825       5996.15       6049.13    
  39  0.698153     -0.359317      -288.467       288.467       7335.62       7624.08    
  40  0.829975     -0.186360      -149.614       149.614       7562.90       7712.51    
  41  0.951351     -0.498721E-01  -40.0383       40.0383       7164.78       7204.82    
  42  0.883299     -0.124092      -99.6237       99.6237       7593.84       7693.46    
  43  0.910087     -0.942154E-01  -75.6381       75.6381       7512.14       7587.78    
  44  0.590840     -0.526210      -422.452       422.452       7892.17       8314.62    
  45  0.146785      -1.91879      -1540.44       1540.44       7603.86       9144.30    
  46  0.830381E-01  -2.48846      -1997.78       1997.78       7510.70       9508.48    
  47  0.289482      -1.23966      -995.227       995.227       8382.14       9377.37    
  48  0.594462     -0.520098      -417.546       417.546       7920.16       8337.70    
  49  0.241311      -1.42167      -1141.34       1141.34       7709.94       8851.28    
  50  0.612368     -0.490422      -393.721       393.721       7512.56       7906.28    
  51  0.952207     -0.489727E-01  -39.3163       39.3163       8288.68       8328.00    
  52  0.857144     -0.154149      -123.754       123.754       8968.45       9092.21    
  53  0.221746      -1.50622      -1209.23       1209.23       9012.53       10221.8    
  54  0.874757     -0.133809      -107.425       107.425       5728.33       5835.75    
  55  0.474241     -0.746040      -598.936       598.936       8277.14       8876.08    
  56  0.679995E-01  -2.68826      -2158.19       2158.19       8603.77       10762.0    
  57  0.276977      -1.28382      -1030.68       1030.68       9218.69       10249.4    
  58  0.308562      -1.17583      -943.983       943.983       8869.72       9813.71    
  59  0.910099     -0.942023E-01  -75.6275       75.6275       9680.84       9756.47    
  60  0.189281      -1.66452      -1336.31       1336.31       10157.0       11493.4    
  61  0.759386     -0.275245      -220.973       220.973       8747.78       8968.75    
  62  0.464823     -0.766099      -615.041       615.041       10025.9       10641.0    
  63  0.428490     -0.847488      -680.381       680.381       9565.36       10245.7    
  64  0.377334     -0.974624      -782.449       782.449       6784.70       7567.15    
loop,thermsimp(1:2)       23   132.029       131.916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       4682.74          0.90          1.08         23.05          0.19          0.04         25.25
Just calling func    0   0         25.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248      22109.69          0.89          1.06         22.98          0.40          0.04         25.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4682.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       23
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       24
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      247     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -1832.46       1832.46       4343.46       6175.92    
   2  0.372115     -0.988552      -793.631       793.631       4437.73       5231.36    
   3  0.732875     -0.310780      -249.501       249.501       4773.88       5023.38    
   4  0.341646      -1.07398      -862.213       862.213       4723.70       5585.91    
   5  0.406512     -0.900141      -722.652       722.652       5200.90       5923.55    
   6  0.271848      -1.30251      -1045.68       1045.68       5223.16       6268.85    
   7  0.738418     -0.303245      -243.451       243.451       5051.03       5294.48    
   8  0.903199     -0.101813      -81.7375       81.7375       5445.82       5527.56    
   9  0.511789     -0.669842      -537.763       537.763       4888.69       5426.45    
  10  0.202674      -1.59616      -1281.43       1281.43       5326.05       6607.48    
  11  0.325695      -1.12179      -900.601       900.601       4813.99       5714.59    
  12  0.719720     -0.328893      -264.042       264.042       5310.48       5574.53    
  13  0.715609     -0.334622      -268.641       268.641       5242.64       5511.28    
  14  0.973328     -0.270339E-01  -21.7034       21.7034       5247.38       5269.09    
  15  0.373998     -0.983504      -789.578       789.578       5711.06       6500.64    
  16  0.977965     -0.222815E-01  -17.8881       17.8881       5728.33       5746.21    
  17  0.105495      -2.24909      -1805.62       1805.62       4896.42       6702.04    
  18  0.729809     -0.314973      -252.867       252.867       4407.40       4660.27    
  19  0.378008     -0.972839      -781.016       781.016       4953.55       5734.56    
  20  0.678326     -0.388127      -311.596       311.596       4736.33       5047.93    
  21  0.671993     -0.397507      -319.127       319.127       5996.15       6315.27    
  22  0.515926     -0.661792      -531.301       531.301       5292.23       5823.53    
  23  0.363490      -1.01200      -812.458       812.458       5720.99       6533.45    
  24  0.206319      -1.57833      -1267.12       1267.12       5990.60       7257.72    
  25  0.755157E-01  -2.58341      -2074.02       2074.02       4941.39       7015.41    
  26  0.413763     -0.882461      -708.458       708.458       6144.95       6853.41    
  27  0.279023      -1.27646      -1024.77       1024.77       6282.74       7307.51    
  28  0.506422     -0.680385      -546.227       546.227       4919.34       5465.57    
  29  0.643082E-02  -5.04665      -4051.56       4051.56       6713.21       10764.8    
  30  0.285888E-01  -3.55474      -2853.82       2853.82       6526.89       9380.71    
  31  0.660419     -0.414880      -333.074       333.074       7164.78       7497.86    
  32  0.739369     -0.301959      -242.419       242.419       6959.75       7202.17    
  33  0.270269      -1.30834      -1050.36       1050.36       6841.78       7892.14    
  34  0.663889     -0.409640      -328.868       328.868       6784.70       7113.57    
  35  0.898739E-01  -2.40935      -1934.27       1934.27       7512.14       9446.42    
  36  0.832427     -0.183410      -147.245       147.245       7536.74       7683.98    
  37  0.723106     -0.324200      -260.275       260.275       7335.62       7595.89    
  38  0.986274     -0.138207E-01  -11.0956       11.0956       7593.84       7604.93    
  39  0.812861     -0.207195      -166.340       166.340       7562.90       7729.24    
  40  0.553236     -0.591971      -475.247       475.247       5561.24       6036.48    
  41  0.693785E-01  -2.66818      -2142.07       2142.07       7512.56       9654.63    
  42  0.117256      -2.14340      -1720.77       1720.77       4965.30       6686.06    
  43  0.807809     -0.213430      -171.346       171.346       7892.17       8063.51    
  44  0.900249     -0.105084      -84.3634       84.3634       8288.68       8373.04    
  45  0.753470     -0.283066      -227.251       227.251       7920.16       8147.41    
  46  0.127159      -2.06232      -1655.67       1655.67       7388.62       9044.30    
  47  0.535389     -0.624762      -501.572       501.572       6104.52       6606.09    
  48  0.957281     -0.436582E-01  -35.0497       35.0497       7293.57       7328.62    
  49  0.227700      -1.47973      -1187.95       1187.95       7709.94       8897.89    
  50  0.636404     -0.451921      -362.812       362.812       8277.14       8639.95    
  51  0.905015     -0.998042E-01  -80.1249       80.1249       8747.78       8827.91    
  52  0.555191     -0.588444      -472.415       472.415       8968.45       9440.87    
  53  0.687780     -0.374286      -300.485       300.485       7603.86       7904.34    
  54  0.759422E-01  -2.57778      -2069.50       2069.50       8382.14       10451.6    
  55  0.374598     -0.981902      -788.291       788.291       7510.70       8298.99    
  56  0.399521     -0.917488      -736.578       736.578       6093.62       6830.20    
  57  0.997363     -0.264016E-02  -2.11957       2.11957       9680.84       9682.96    
  58  0.164658      -1.80389      -1448.20       1448.20       8869.72       10317.9    
  59  0.697359     -0.360454      -289.380       289.380       9012.53       9301.91    
  60  0.822795     -0.195048      -156.589       156.589       9565.36       9721.95    
  61  0.755086     -0.280923      -225.531       225.531       9218.69       9444.22    
  62  0.912857     -0.911765E-01  -73.1984       73.1984       10025.9       10099.1    
  63  0.891590     -0.114749      -92.1230       92.1230       8603.77       8695.89    
  64  0.461859     -0.772496      -620.176       620.176       4682.74       5302.92    
loop,thermsimp(1:2)       24   1832.46       793.631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       6008.98          0.90          1.10         23.05          0.21          0.04         25.30
Just calling func    0   0         25.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    250       8352.66          0.89          1.12         23.02          0.30          0.05         25.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   6008.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       24
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       25
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      249     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -30.4497       30.4497       4407.40       4437.85    
   2  0.355374      -1.03458      -830.585       830.585       4773.88       5604.47    
   3  0.294461      -1.22261      -981.536       981.536       4736.33       5717.87    
   4  0.644538     -0.439222      -352.616       352.616       4437.73       4790.34    
   5  0.741622     -0.298915      -239.976       239.976       5247.38       5487.36    
   6  0.805913E-01  -2.51837      -2021.80       2021.80       5051.03       7072.83    
   7  0.498180     -0.696794      -559.401       559.401       4682.74       5242.14    
   8  0.771004     -0.260061      -208.783       208.783       4888.69       5097.47    
   9  0.753480     -0.283053      -227.241       227.241       4919.34       5146.58    
  10  0.460525     -0.775387      -622.497       622.497       5242.64       5865.13    
  11  0.918626     -0.848759E-01  -68.1401       68.1401       5445.82       5513.96    
  12  0.355379      -1.03457      -830.574       830.574       5310.48       6141.06    
  13  0.664646     -0.408501      -327.953       327.953       4723.70       5051.65    
  14  0.328018      -1.11469      -894.895       894.895       4813.99       5708.89    
  15  0.529583     -0.635665      -510.325       510.325       4953.55       5463.87    
  16  0.259823      -1.34775      -1082.00       1082.00       5728.33       6810.33    
  17  0.463690E-01  -3.07112      -2465.56       2465.56       5292.23       7757.80    
  18  0.366509      -1.00373      -805.817       805.817       5200.90       6006.72    
  19  0.794534     -0.229999      -184.648       184.648       5561.24       5745.89    
  20  0.669373     -0.401413      -322.263       322.263       4343.46       4665.72    
  21  0.798901     -0.224518      -180.248       180.248       5223.16       5403.41    
  22  0.610403     -0.493636      -396.302       396.302       5996.15       6392.45    
  23  0.267818      -1.31745      -1057.67       1057.67       5711.06       6768.74    
  24  0.663049     -0.410906      -329.884       329.884       5720.99       6050.88    
  25  0.782871     -0.244788      -196.521       196.521       6104.52       6301.04    
  26  0.706545     -0.347368      -278.874       278.874       5326.05       5604.92    
  27  0.120119      -2.11927      -1701.39       1701.39       4965.30       6666.69    
  28  0.270575      -1.30721      -1049.45       1049.45       4896.42       5945.87    
  29  0.505391     -0.682422      -547.863       547.863       6093.62       6641.48    
  30  0.665734     -0.406865      -326.639       326.639       6144.95       6471.59    
  31  0.836788     -0.178185      -143.051       143.051       4941.39       5084.44    
  32  0.866983     -0.142736      -114.592       114.592       6784.70       6899.29    
  33  0.552904     -0.592571      -475.728       475.728       6959.75       7435.48    
  34  0.554153     -0.590314      -473.917       473.917       5990.60       6464.52    
  35  0.592407E-01  -2.82615      -2268.89       2268.89       6282.74       8551.63    
  36  0.902163     -0.102960      -82.6582       82.6582       7293.57       7376.22    
  37  0.266638E-01  -3.62445      -2909.78       2909.78       7164.78       10074.6    
  38  0.897053     -0.108640      -87.2186       87.2186       7335.62       7422.83    
  39  0.840496     -0.173763      -139.501       139.501       7593.84       7733.34    
  40  0.288358      -1.24355      -998.350       998.350       7536.74       8535.09    
  41  0.835972E-01  -2.48175      -1992.40       1992.40       7562.90       9555.30    
  42  0.412070     -0.886563      -711.751       711.751       6841.78       7553.53    
  43  0.725010     -0.321570      -258.163       258.163       7603.86       7862.02    
  44  0.316556      -1.15026      -923.449       923.449       7892.17       8815.62    
  45  0.486178     -0.721181      -578.979       578.979       7920.16       8499.14    
  46  0.143341      -1.94253      -1559.50       1559.50       7510.70       9070.21    
  47  0.956913     -0.440430E-01  -35.3587       35.3587       8288.68       8324.04    
  48  0.362697      -1.01419      -814.210       814.210       8277.14       9091.35    
  49  0.951746     -0.494572E-01  -39.7053       39.7053       8603.77       8643.48    
  50  0.511140     -0.671112      -538.783       538.783       8747.78       9286.56    
  51  0.364891E-01  -3.31074      -2657.93       2657.93       7709.94       10367.9    
  52  0.377076     -0.975308      -782.998       782.998       7388.62       8171.62    
  53  0.670030E-01  -2.70302      -2170.04       2170.04       9012.53       11182.6    
  54  0.448832     -0.801107      -643.146       643.146       6526.89       7170.04    
  55  0.252392      -1.37677      -1105.30       1105.30       8968.45       10073.8    
  56  0.910592     -0.936608E-01  -75.1929       75.1929       9218.69       9293.88    
  57  0.801917     -0.220751      -177.223       177.223       7512.14       7689.36    
  58  0.473432     -0.747746      -600.306       600.306       7512.56       8112.87    
  59  0.431618     -0.840214      -674.541       674.541       9680.84       10355.4    
  60  0.886774     -0.120166      -96.4715       96.4715       9565.36       9661.83    
  61  0.880132     -0.127683      -102.507       102.507       10025.9       10128.4    
  62  0.962190     -0.385439E-01  -30.9438       30.9438       8869.72       8900.67    
  63  0.618144     -0.481034      -386.184       386.184       8382.14       8768.32    
  64  0.169887      -1.77262      -1423.10       1423.10       6008.98       7432.08    
loop,thermsimp(1:2)       25   30.4497       830.585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       6123.14          0.89          1.09         23.00          0.30          0.04         25.31
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6123.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       25
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       26
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      250     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -10.0793       10.0793       4407.40       4417.48    
   2  0.516099     -0.661457      -531.032       531.032       4343.46       4874.49    
   3  0.202206      -1.59847      -1283.29       1283.29       4437.73       5721.01    
   4  0.240260      -1.42603      -1144.85       1144.85       4723.70       5868.55    
   5  0.717263E-01  -2.63490      -2115.35       2115.35       4941.39       7056.74    
   6  0.395382     -0.927902      -744.939       744.939       4888.69       5633.63    
   7  0.494348     -0.704516      -565.600       565.600       4919.34       5484.94    
   8  0.970815     -0.296196E-01  -23.7793       23.7793       4682.74       4706.52    
   9  0.992795     -0.723105E-02  -5.80524       5.80524       5223.16       5228.97    
  10  0.387320     -0.948503      -761.478       761.478       4953.55       5715.03    
  11  0.586568     -0.533466      -428.278       428.278       5247.38       5675.66    
  12  0.119144      -2.12742      -1707.94       1707.94       5445.82       7153.76    
  13  0.145144      -1.93003      -1549.47       1549.47       4773.88       6323.35    
  14  0.767931     -0.264056      -211.989       211.989       5326.05       5538.04    
  15  0.415014     -0.879442      -706.034       706.034       4813.99       5520.03    
  16  0.994477     -0.553801E-02  -4.44603       4.44603       4736.33       4740.78    
  17  0.757243     -0.278071      -223.242       223.242       5561.24       5784.48    
  18  0.669290     -0.401537      -322.363       322.363       5242.64       5565.00    
  19  0.112026      -2.18903      -1757.40       1757.40       4896.42       6653.82    
  20  0.434244     -0.834148      -669.672       669.672       5200.90       5870.57    
  21  0.491828     -0.709627      -569.703       569.703       5720.99       6290.70    
  22  0.517535     -0.658677      -528.800       528.800       5310.48       5839.28    
  23  0.411147     -0.888804      -713.551       713.551       6104.52       6818.07    
  24  0.250164      -1.38564      -1112.42       1112.42       5996.15       7108.57    
  25  0.109742E-01  -4.51221      -3622.50       3622.50       5990.60       9613.10    
  26  0.559459     -0.580786      -466.267       466.267       6144.95       6611.22    
  27  0.289677      -1.23899      -994.686       994.686       6093.62       7088.31    
  28  0.835809     -0.179356      -143.991       143.991       4965.30       5109.29    
  29  0.236182      -1.44315      -1158.59       1158.59       5711.06       6869.66    
  30  0.700988     -0.355264      -285.214       285.214       5728.33       6013.54    
  31  0.886914     -0.120007      -96.3444       96.3444       6784.70       6881.05    
  32  0.182911      -1.69875      -1363.79       1363.79       5051.03       6414.83    
  33  0.693089     -0.366597      -294.312       294.312       6526.89       6821.20    
  34  0.108523      -2.22079      -1782.90       1782.90       7293.57       9076.46    
  35  0.141600      -1.95475      -1569.31       1569.31       7335.62       8904.93    
  36  0.168348E-01  -4.08431      -3278.97       3278.97       6008.98       9287.95    
  37  0.419419E-01  -3.17147      -2546.12       2546.12       6959.75       9505.87    
  38  0.244896      -1.40692      -1129.51       1129.51       6841.78       7971.29    
  39  0.360662      -1.01981      -818.729       818.729       7512.14       8330.87    
  40  0.927013     -0.757879E-01  -60.8441       60.8441       7593.84       7654.68    
  41  0.869067     -0.140335      -112.664       112.664       5292.23       5404.90    
  42  0.827083     -0.189851      -152.416       152.416       7603.86       7756.27    
  43  0.928403     -0.742893E-01  -59.6410       59.6410       7512.56       7572.20    
  44  0.513193     -0.667103      -535.565       535.565       7388.62       7924.19    
  45  0.809080     -0.211858      -170.084       170.084       8288.68       8458.76    
  46  0.341224E-02  -5.68039      -4560.33       4560.33       7920.16       12480.5    
  47  0.734431     -0.308659      -247.798       247.798       7536.74       7784.54    
  48  0.688454     -0.373307      -299.699       299.699       6282.74       6582.44    
  49  0.990614     -0.943067E-02  -7.57114       7.57114       8603.77       8611.34    
  50  0.143408      -1.94206      -1559.13       1559.13       8382.14       9941.27    
  51  0.868596     -0.140878      -113.100       113.100       7892.17       8005.27    
  52  0.244103      -1.41016      -1132.11       1132.11       8869.72       10001.8    
  53  0.207986      -1.57029      -1260.66       1260.66       7510.70       8771.36    
  54  0.426578E-01  -3.15455      -2532.53       2532.53       8277.14       10809.7    
  55  0.111938      -2.18981      -1758.03       1758.03       8747.78       10505.8    
  56  0.304345      -1.18959      -955.030       955.030       9218.69       10173.7    
  57  0.911041     -0.931671E-01  -74.7965       74.7965       7562.90       7637.70    
  58  0.144299      -1.93587      -1554.15       1554.15       9565.36       11119.5    
  59  0.306010      -1.18414      -950.650       950.650       8968.45       9919.10    
  60  0.633032     -0.457234      -367.077       367.077       7164.78       7531.86    
  61  0.737469E-02  -4.90970      -3941.61       3941.61       10025.9       13967.6    
  62  0.794623     -0.229887      -184.558       184.558       9680.84       9865.40    
  63  0.200033      -1.60927      -1291.96       1291.96       7709.94       9001.90    
  64  0.543825     -0.609128      -489.021       489.021       6123.14       6612.16    
loop,thermsimp(1:2)       26   10.0793       531.032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       4318.74          0.90          1.08         23.02          0.30          0.05         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    253       8270.80          0.88          1.06         22.98          0.35          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4318.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       26
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       27
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      252     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -1293.66       1293.66       4407.40       5701.07    
   2  0.983274     -0.168677E-01  -13.5417       13.5417       4682.74       4696.29    
   3  0.569108     -0.563685      -452.538       452.538       4736.33       5188.87    
   4  0.411179     -0.888728      -713.489       713.489       4343.46       5056.95    
   5  0.889241     -0.117387      -94.2404       94.2404       4965.30       5059.54    
   6  0.109537      -2.21149      -1775.43       1775.43       5223.16       6998.60    
   7  0.658027     -0.418509      -335.988       335.988       5292.23       5628.22    
   8  0.427534     -0.849722      -682.174       682.174       4919.34       5601.52    
   9  0.277803      -1.28084      -1028.29       1028.29       4813.99       5842.28    
  10  0.568421     -0.564892      -453.507       453.507       5326.05       5779.55    
  11  0.368489     -0.998346      -801.493       801.493       5242.64       6044.13    
  12  0.100945E-01  -4.59576      -3689.58       3689.58       4888.69       8578.27    
  13  0.811445     -0.208939      -167.740       167.740       5247.38       5415.13    
  14  0.135138      -2.00146      -1606.81       1606.81       4953.55       6560.36    
  15  0.600340     -0.510258      -409.646       409.646       4437.73       4847.37    
  16  0.537538     -0.620755      -498.355       498.355       5561.24       6059.59    
  17  0.923261     -0.798434E-01  -64.0999       64.0999       5310.48       5374.58    
  18  0.296505      -1.21569      -975.983       975.983       4723.70       5699.68    
  19  0.975666     -0.246348E-01  -19.7773       19.7773       5200.90       5220.68    
  20  0.102971      -2.27331      -1825.06       1825.06       5728.33       7553.39    
  21  0.110137      -2.20603      -1771.05       1771.05       5720.99       7492.04    
  22  0.874539     -0.134058      -107.625       107.625       4773.88       4881.51    
  23  0.887507     -0.119339      -95.8082       95.8082       5051.03       5146.84    
  24  0.811767     -0.208543      -167.422       167.422       6282.74       6450.16    
  25  0.304283      -1.18980      -955.194       955.194       6144.95       7100.15    
  26  0.304144      -1.19025      -955.561       955.561       6123.14       7078.70    
  27  0.854538     -0.157194      -126.199       126.199       4896.42       5022.62    
  28  0.543001     -0.610645      -490.238       490.238       6104.52       6594.75    
  29  0.808766     -0.212246      -170.396       170.396       6526.89       6697.29    
  30  0.286176      -1.25115      -1004.45       1004.45       5711.06       6715.51    
  31  0.328161      -1.11425      -894.543       894.543       6784.70       7679.25    
  32  0.563264     -0.574006      -460.824       460.824       4941.39       5402.21    
  33  0.180895      -1.70984      -1372.69       1372.69       6093.62       7466.31    
  34  0.977796     -0.224538E-01  -18.0263       18.0263       5996.15       6014.17    
  35  0.650784     -0.429577      -344.873       344.873       5445.82       5790.69    
  36  0.350586      -1.04815      -841.475       841.475       7164.78       8006.26    
  37  0.852996E-01  -2.46159      -1976.21       1976.21       7512.56       9488.77    
  38  0.363921      -1.01082      -811.507       811.507       7562.90       8374.41    
  39  0.715496E-01  -2.63737      -2117.33       2117.33       7593.84       9711.17    
  40  0.540542     -0.615184      -493.882       493.882       7603.86       8097.74    
  41  0.458744E-02  -5.38443      -4322.74       4322.74       7536.74       11859.5    
  42  0.684509     -0.379054      -304.312       304.312       7388.62       7692.94    
  43  0.827193     -0.189717      -152.309       152.309       6841.78       6994.09    
  44  0.430712     -0.842315      -676.228       676.228       7892.17       8568.39    
  45  0.925073     -0.778822E-01  -62.5255       62.5255       7512.14       7574.67    
  46  0.139567      -1.96921      -1580.93       1580.93       8288.68       9869.61    
  47  0.905138     -0.996680E-01  -80.0155       80.0155       8603.77       8683.79    
  48  0.230323      -1.46827      -1178.76       1178.76       7510.70       8689.46    
  49  0.854981     -0.156676      -125.783       125.783       7335.62       7461.40    
  50  0.526676     -0.641170      -514.745       514.745       7709.94       8224.68    
  51  0.425904     -0.853542      -685.241       685.241       7293.57       7978.81    
  52  0.770395     -0.260852      -209.418       209.418       6008.98       6218.40    
  53  0.222399      -1.50328      -1206.87       1206.87       6959.75       8166.61    
  54  0.849203     -0.163457      -131.227       131.227       5990.60       6121.83    
  55  0.409521     -0.892766      -716.731       716.731       9680.84       10397.6    
  56  0.526161     -0.642147      -515.529       515.529       8968.45       9483.98    
  57  0.705716     -0.348543      -279.818       279.818       8382.14       8661.96    
  58  0.548845E-03  -7.50769      -6027.33       6027.33       8869.72       14897.1    
  59  0.498314     -0.696524      -559.184       559.184       9218.69       9777.87    
  60  0.774749     -0.255216      -204.893       204.893       8747.78       8952.67    
  61  0.537402E-01  -2.92359      -2347.12       2347.12       8277.14       10624.3    
  62  0.708174     -0.345066      -277.026       277.026       9565.36       9842.39    
  63  0.272932      -1.29853      -1042.49       1042.49       7920.16       8962.65    
  64  0.701294     -0.354828      -284.863       284.863       4318.74       4603.60    
loop,thermsimp(1:2)       27   1293.66       13.5417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       8222.28          0.90          1.10         23.09          0.17          0.04         25.30
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8222.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       27
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       28
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      253     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -1174.09       1174.09       4318.74       5492.83    
   2  0.922423     -0.807516E-01  -64.8291       64.8291       4682.74       4747.57    
   3  0.556007     -0.586974      -471.235       471.235       4437.73       4908.96    
   4  0.921345     -0.819211E-01  -65.7680       65.7680       4773.88       4839.65    
   5  0.623358     -0.472635      -379.441       379.441       4896.42       5275.86    
   6  0.967150     -0.334012E-01  -26.8152       26.8152       4343.46       4370.27    
   7  0.239844      -1.42777      -1146.24       1146.24       4965.30       6111.54    
   8  0.707370     -0.346201      -277.937       277.937       5051.03       5328.97    
   9  0.375591     -0.979256      -786.167       786.167       4736.33       5522.50    
  10  0.164915      -1.80233      -1446.94       1446.94       5200.90       6647.85    
  11  0.634729     -0.454558      -364.929       364.929       5310.48       5675.41    
  12  0.956585     -0.443852E-01  -35.6334       35.6334       4941.39       4977.02    
  13  0.281051      -1.26922      -1018.95       1018.95       5247.38       6266.34    
  14  0.332446      -1.10128      -884.129       884.129       4919.34       5803.47    
  15  0.417901     -0.872510      -700.470       700.470       5292.23       5992.70    
  16  0.454459     -0.788647      -633.142       633.142       4723.70       5356.84    
  17  0.163150      -1.81309      -1455.58       1455.58       4407.40       5862.99    
  18  0.412675     -0.885095      -710.573       710.573       5326.05       6036.62    
  19  0.510076     -0.673195      -540.455       540.455       5445.82       5986.27    
  20  0.159872E-02  -6.43855      -5169.00       5169.00       4813.99       9983.00    
  21  0.279094      -1.27620      -1024.56       1024.56       5996.15       7020.71    
  22  0.229843E-01  -3.77294      -3029.00       3029.00       5242.64       8271.63    
  23  0.829240E-02  -4.79242      -3847.45       3847.45       5561.24       9408.69    
  24  0.722732     -0.324717      -260.690       260.690       5990.60       6251.29    
  25  0.399402     -0.917787      -736.819       736.819       6008.98       6745.80    
  26  0.321457      -1.13489      -911.115       911.115       6282.74       7193.85    
  27  0.103147      -2.27160      -1823.68       1823.68       4953.55       6777.23    
  28  0.488570     -0.716273      -575.039       575.039       6104.52       6679.56    
  29  0.775391     -0.254388      -204.228       204.228       6526.89       6731.12    
  30  0.264831      -1.32866      -1066.68       1066.68       5711.06       6777.74    
  31  0.291634      -1.23225      -989.279       989.279       6841.78       7831.06    
  32  0.754799E-02  -4.88647      -3922.96       3922.96       5223.16       9146.13    
  33  0.403715     -0.907047      -728.196       728.196       6123.14       6851.34    
  34  0.794963     -0.229460      -184.215       184.215       6144.95       6329.17    
  35  0.482612E-01  -3.03113      -2433.45       2433.45       7335.62       9769.07    
  36  0.309506      -1.17278      -941.530       941.530       6093.62       7035.15    
  37  0.265676      -1.32548      -1064.12       1064.12       5720.99       6785.11    
  38  0.793358     -0.231480      -185.837       185.837       5728.33       5914.16    
  39  0.603192E-01  -2.80811      -2254.41       2254.41       7512.14       9766.55    
  40  0.516664     -0.660363      -530.153       530.153       6784.70       7314.86    
  41  0.524892E-01  -2.94715      -2366.03       2366.03       7388.62       9754.66    
  42  0.581500     -0.542144      -435.245       435.245       7293.57       7728.81    
  43  0.403805     -0.906823      -728.016       728.016       7164.78       7892.80    
  44  0.447829     -0.803344      -644.941       644.941       7603.86       8248.80    
  45  0.470604     -0.753737      -605.116       605.116       6959.75       7564.86    
  46  0.479088     -0.735871      -590.772       590.772       7709.94       8300.71    
  47  0.959223     -0.416322E-01  -33.4232       33.4232       7562.90       7596.32    
  48  0.527403     -0.639789      -513.636       513.636       7892.17       8405.80    
  49  0.731687     -0.312402      -250.803       250.803       4888.69       5139.49    
  50  0.682707     -0.381689      -306.428       306.428       8382.14       8688.57    
  51  0.386616     -0.950322      -762.938       762.938       8603.77       9366.71    
  52  0.120332      -2.11750      -1699.98       1699.98       7510.70       9210.68    
  53  0.285899      -1.25212      -1005.22       1005.22       8747.78       9753.01    
  54  0.798593     -0.224904      -180.558       180.558       7920.16       8100.72    
  55  0.305098      -1.18712      -953.046       953.046       8968.45       9921.50    
  56  0.274289      -1.29357      -1038.51       1038.51       7512.56       8551.07    
  57  0.805459     -0.216343      -173.685       173.685       7593.84       7767.52    
  58  0.665552     -0.407139      -326.859       326.859       9218.69       9545.55    
  59  0.721477     -0.326454      -262.084       262.084       9565.36       9827.44    
  60  0.563306     -0.573931      -460.764       460.764       8288.68       8749.44    
  61  0.253697      -1.37162      -1101.16       1101.16       9680.84       10782.0    
  62  0.714468     -0.336217      -269.922       269.922       8277.14       8547.06    
  63  0.106618      -2.23850      -1797.12       1797.12       7536.74       9333.86    
  64  0.116686      -2.14827      -1724.67       1724.67       8222.28       9946.95    
loop,thermsimp(1:2)       28   1174.09       64.8291    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       4777.95          0.89          1.08         23.02          0.30          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4777.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    802.821               253
loop is:       28
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    802.821               253
loop is:       29
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    401.410               316

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      254     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -442.542       442.542       4343.46       4786.00    
   2  0.991191     -0.884791E-02  -3.55164       3.55164       4682.74       4686.30    
   3  0.752830     -0.283916      -113.967       113.967       4773.88       4887.85    
   4  0.718872     -0.330071      -132.494       132.494       4437.73       4570.22    
   5  0.362244      -1.01544      -407.608       407.608       4941.39       5348.99    
   6  0.993342E-01  -2.30927      -926.963       926.963       4888.69       5815.65    
   7  0.734379     -0.308729      -123.927       123.927       4896.42       5020.35    
   8  0.190509      -1.65806      -665.561       665.561       5051.03       5716.59    
   9  0.113713      -2.17408      -872.697       872.697       4723.70       5596.40    
  10  0.582158     -0.541014      -217.169       217.169       4318.74       4535.91    
  11  0.100405E-01  -4.60113      -1846.94       1846.94       4736.33       6583.27    
  12  0.614877     -0.486333      -195.219       195.219       5310.48       5505.70    
  13  0.996806     -0.319890E-02  -1.28407       1.28407       4919.34       4920.63    
  14  0.439871E-01  -3.12386      -1253.95       1253.95       4407.40       5661.35    
  15  0.610456     -0.493549      -198.116       198.116       5728.33       5926.44    
  16  0.676471     -0.390866      -156.898       156.898       5445.82       5602.72    
  17  0.263829      -1.33246      -534.861       534.861       5292.23       5827.10    
  18  0.761962     -0.271858      -109.127       109.127       5326.05       5435.17    
  19  0.405295     -0.903140      -362.530       362.530       4965.30       5327.83    
  20  0.184680      -1.68913      -678.035       678.035       5990.60       6668.64    
  21  0.695434     -0.363219      -145.800       145.800       5247.38       5393.19    
  22  0.597154     -0.515580      -206.959       206.959       6144.95       6351.91    
  23  0.254276      -1.36933      -549.665       549.665       5200.90       5750.57    
  24  0.777974     -0.251062      -100.779       100.779       6104.52       6205.29    
  25  0.597236     -0.515443      -206.904       206.904       6526.89       6733.80    
  26  0.658168     -0.418295      -167.908       167.908       6008.98       6176.89    
  27  0.917953     -0.856086E-01  -34.3642       34.3642       4953.55       4987.91    
  28  0.167567      -1.78637      -717.069       717.069       5711.06       6428.13    
  29  0.867739E-02  -4.74703      -1905.51       1905.51       5720.99       7626.50    
  30  0.157469      -1.84853      -742.019       742.019       6123.14       6865.16    
  31  0.947458     -0.539724E-01  -21.6651       21.6651       5996.15       6017.81    
  32  0.883772     -0.123556      -49.5966       49.5966       6093.62       6143.22    
  33  0.873100     -0.135705      -54.4733       54.4733       6282.74       6337.21    
  34  0.138043      -1.98019      -794.868       794.868       6784.70       7579.57    
  35  0.833185     -0.182500      -73.2572       73.2572       6959.75       7033.01    
  36  0.907894     -0.966275E-01  -38.7873       38.7873       7562.90       7601.69    
  37  0.858432     -0.152648      -61.2745       61.2745       7293.57       7354.84    
  38  0.192050      -1.65000      -662.327       662.327       7593.84       8256.17    
  39  0.890666     -0.115786      -46.4776       46.4776       6841.78       6888.26    
  40  0.389935     -0.941775      -378.038       378.038       7164.78       7542.82    
  41  0.842362     -0.171545      -68.8601       68.8601       7920.16       7989.02    
  42  0.143912      -1.93855      -778.154       778.154       7603.86       8382.01    
  43  0.678545     -0.387804      -155.669       155.669       5242.64       5398.30    
  44  0.621021     -0.476390      -191.228       191.228       7709.94       7901.16    
  45  0.533199     -0.628861      -252.431       252.431       7892.17       8144.60    
  46  0.891703     -0.114623      -46.0107       46.0107       8277.14       8323.15    
  47  0.675469     -0.392349      -157.493       157.493       7512.56       7670.05    
  48  0.757471     -0.277770      -111.500       111.500       8382.14       8493.64    
  49  0.855441     -0.156139      -62.6757       62.6757       8288.68       8351.36    
  50  0.737982     -0.303836      -121.963       121.963       5223.16       5345.13    
  51  0.630328     -0.461515      -185.257       185.257       7510.70       7695.96    
  52  0.701612     -0.354375      -142.250       142.250       7536.74       7678.99    
  53  0.161537E-01  -4.12561      -1656.06       1656.06       8603.77       10259.8    
  54  0.716145     -0.333873      -134.020       134.020       5561.24       5695.26    
  55  0.644842     -0.438751      -176.119       176.119       9218.69       9394.81    
  56  0.465420E-01  -3.06740      -1231.29       1231.29       8747.78       9979.07    
  57  0.644178     -0.439780      -176.532       176.532       7388.62       7565.16    
  58  0.297766      -1.21145      -486.288       486.288       7512.14       7998.43    
  59  0.877956     -0.130159      -52.2471       52.2471       7335.62       7387.86    
  60  0.373410     -0.985078      -395.421       395.421       9565.36       9960.78    
  61  0.162588      -1.81653      -729.175       729.175       8968.45       9697.63    
  62  0.634599     -0.454761      -182.546       182.546       8222.28       8404.83    
  63  0.762468     -0.271195      -108.860       108.860       4813.99       4922.85    
  64  0.237905      -1.43588      -576.379       576.379       4777.95       5354.33    
loop,thermsimp(1:2)       29   442.542       3.55164    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256       4538.53          0.89          1.08         23.02          0.25          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    257       7620.11          0.89          1.07         22.95          0.44          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4538.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       29
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       30
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      256     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -741.793       741.793       4318.74       5060.53    
   2  0.553200     -0.592035      -237.649       237.649       4437.73       4675.38    
   3  0.825049     -0.192313      -77.1963       77.1963       4682.74       4759.94    
   4  0.767336     -0.264830      -106.306       106.306       4343.46       4449.76    
   5  0.966534     -0.340385E-01  -13.6634       13.6634       4773.88       4787.55    
   6  0.954430     -0.466410E-01  -18.7222       18.7222       4919.34       4938.07    
   7  0.780674     -0.247598      -99.3883       99.3883       4813.99       4913.38    
   8  0.312863      -1.16199      -466.436       466.436       4953.55       5419.98    
   9  0.990226     -0.982218E-02  -3.94273       3.94273       4896.42       4900.36    
  10  0.893872     -0.112193      -45.0353       45.0353       4965.30       5010.33    
  11  0.322320      -1.13221      -454.481       454.481       5223.16       5677.65    
  12  0.927465     -0.752997E-01  -30.2261       30.2261       4941.39       4971.61    
  13  0.539466     -0.617176      -247.741       247.741       4777.95       5025.69    
  14  0.461474     -0.773330      -310.423       310.423       5247.38       5557.81    
  15  0.745701     -0.293430      -117.786       117.786       5242.64       5360.42    
  16  0.703580     -0.351573      -141.125       141.125       5326.05       5467.17    
  17  0.917420E-01  -2.38878      -958.879       958.879       5310.48       6269.36    
  18  0.671661     -0.398001      -159.762       159.762       4723.70       4883.46    
  19  0.845179     -0.168207      -67.5201       67.5201       5445.82       5513.34    
  20  0.283605E-01  -3.56276      -1430.13       1430.13       4407.40       5837.53    
  21  0.108883E-01  -4.52006      -1814.40       1814.40       5561.24       7375.64    
  22  0.506006     -0.681208      -273.444       273.444       5051.03       5324.48    
  23  0.353918      -1.03869      -416.942       416.942       5200.90       5617.84    
  24  0.656862     -0.420282      -168.705       168.705       4888.69       5057.39    
  25  0.691560     -0.368806      -148.042       148.042       5292.23       5440.28    
  26  0.445402     -0.808779      -324.652       324.652       5728.33       6052.98    
  27  0.832700     -0.183081      -73.4907       73.4907       5996.15       6069.64    
  28  0.963063     -0.376360E-01  -15.1075       15.1075       6093.62       6108.73    
  29  0.422212     -0.862247      -346.115       346.115       6008.98       6355.09    
  30  0.917895     -0.856720E-01  -34.3896       34.3896       6104.52       6138.91    
  31  0.767210     -0.264994      -106.371       106.371       6282.74       6389.11    
  32  0.360836      -1.01933      -409.170       409.170       6144.95       6554.12    
  33  0.635930     -0.452667      -181.705       181.705       5711.06       5892.77    
  34  0.687292     -0.374995      -150.527       150.527       4736.33       4886.86    
  35  0.833832     -0.181724      -72.9458       72.9458       5990.60       6063.55    
  36  0.362075      -1.01590      -407.795       407.795       6526.89       6934.69    
  37  0.385764     -0.952530      -382.356       382.356       6123.14       6505.50    
  38  0.752556     -0.284279      -114.113       114.113       6841.78       6955.89    
  39  0.547433     -0.602515      -241.856       241.856       6959.75       7201.60    
  40  0.171004      -1.76607      -708.919       708.919       7293.57       8002.48    
  41  0.159022      -1.83871      -738.078       738.078       7335.62       8073.69    
  42  0.850806     -0.161571      -64.8561       64.8561       7164.78       7229.64    
  43  0.926075     -0.768001E-01  -30.8284       30.8284       7388.62       7419.45    
  44  0.584885     -0.536340      -215.292       215.292       6784.70       7000.00    
  45  0.547650     -0.602120      -241.697       241.697       7562.90       7804.60    
  46  0.864296     -0.145840      -58.5418       58.5418       5720.99       5779.53    
  47  0.384639     -0.955450      -383.527       383.527       7512.56       7896.09    
  48  0.359776      -1.02227      -410.352       410.352       7536.74       7947.09    
  49  0.147032      -1.91711      -769.547       769.547       7510.70       8280.25    
  50  0.649806     -0.431082      -173.041       173.041       7709.94       7882.98    
  51  0.909946     -0.943695E-01  -37.8809       37.8809       7920.16       7958.04    
  52  0.740699     -0.300161      -120.488       120.488       7512.14       7632.63    
  53  0.959446     -0.413992E-01  -16.6181       16.6181       7892.17       7908.78    
  54  0.993892     -0.612654E-02  -2.45926       2.45926       7593.84       7596.30    
  55  0.499875     -0.693397      -278.337       278.337       8277.14       8555.48    
  56  0.716813     -0.332941      -133.646       133.646       8288.68       8422.33    
  57  0.586555     -0.533488      -214.148       214.148       7603.86       7818.01    
  58  0.687999     -0.373968      -150.114       150.114       8222.28       8372.39    
  59  0.238056      -1.43525      -576.125       576.125       8382.14       8958.26    
  60  0.842319     -0.171596      -68.8806       68.8806       9218.69       9287.57    
  61  0.559244     -0.581169      -233.287       233.287       8968.45       9201.74    
  62  0.596920     -0.515973      -207.117       207.117       9565.36       9772.48    
  63  0.266753      -1.32143      -530.437       530.437       8747.78       9278.22    
  64  0.681727     -0.383126      -153.791       153.791       4538.53       4692.32    
loop,thermsimp(1:2)       30   741.793       237.649    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258       5796.84          0.90          1.08         23.04          0.37          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5796.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       30
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       31
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      257     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -514.564       514.564       4343.46       4858.02    
   2  0.202445      -1.59728      -641.167       641.167       4437.73       5078.90    
   3  0.927152     -0.756373E-01  -30.3616       30.3616       4538.53       4568.89    
   4  0.403144     -0.908460      -364.666       364.666       4682.74       5047.41    
   5  0.791838     -0.233398      -93.6885       93.6885       4773.88       4867.57    
   6  0.292576      -1.22903      -493.345       493.345       4723.70       5217.05    
   7  0.135578      -1.99821      -802.102       802.102       4736.33       5538.43    
   8  0.516570     -0.660545      -265.150       265.150       4896.42       5161.57    
   9  0.730579     -0.313918      -126.010       126.010       4813.99       4940.00    
  10  0.508248     -0.676786      -271.669       271.669       4919.34       5191.01    
  11  0.928455     -0.742338E-01  -29.7982       29.7982       4941.39       4971.18    
  12  0.696477     -0.361721      -145.198       145.198       4965.30       5110.50    
  13  0.465556     -0.764522      -306.887       306.887       4777.95       5084.84    
  14  0.194653      -1.63654      -656.923       656.923       4888.69       5545.61    
  15  0.650312     -0.430303      -172.728       172.728       4318.74       4491.47    
  16  0.555802     -0.587343      -235.765       235.765       5051.03       5286.80    
  17  0.985517     -0.145893E-01  -5.85630       5.85630       5242.64       5248.49    
  18  0.923066     -0.800544E-01  -32.1347       32.1347       4953.55       4985.68    
  19  0.658765     -0.417388      -167.544       167.544       5292.23       5459.78    
  20  0.197878      -1.62010      -650.327       650.327       5326.05       5976.37    
  21  0.449673     -0.799236      -320.822       320.822       5445.82       5766.64    
  22  0.208093      -1.56977      -630.123       630.123       5247.38       5877.51    
  23  0.102791      -2.27506      -913.233       913.233       5200.90       6114.13    
  24  0.650538     -0.429955      -172.589       172.589       5223.16       5395.75    
  25  0.223365      -1.49895      -601.694       601.694       5720.99       6322.69    
  26  0.520729     -0.652525      -261.930       261.930       4407.40       4669.33    
  27  0.919707E-01  -2.38629      -957.880       957.880       5711.06       6668.94    
  28  0.788427     -0.237716      -95.4216       95.4216       5728.33       5823.75    
  29  0.395754     -0.926961      -372.092       372.092       5990.60       6362.70    
  30  0.903388     -0.101603      -40.7847       40.7847       5996.15       6036.93    
  31  0.569415     -0.563145      -226.052       226.052       6093.62       6319.67    
  32  0.974677     -0.256496E-01  -10.2960       10.2960       6104.52       6114.81    
  33  0.376411     -0.977073      -392.207       392.207       5310.48       5702.69    
  34  0.309090      -1.17412      -471.305       471.305       6008.98       6480.29    
  35  0.248039      -1.39417      -559.635       559.635       6282.74       6842.37    
  36  0.941329     -0.604621E-01  -24.2701       24.2701       6123.14       6147.41    
  37  0.131879      -2.02587      -813.207       813.207       6144.95       6958.16    
  38  0.188022      -1.67120      -670.836       670.836       6526.89       7197.73    
  39  0.898649E-01  -2.40945      -967.178       967.178       6841.78       7808.96    
  40  0.853893     -0.157949      -63.4024       63.4024       6784.70       6848.11    
  41  0.643577     -0.440714      -176.907       176.907       6959.75       7136.66    
  42  0.664391     -0.408885      -164.131       164.131       7164.78       7328.91    
  43  0.825262     -0.192054      -77.0926       77.0926       5561.24       5638.33    
  44  0.611498     -0.491843      -197.431       197.431       7388.62       7586.05    
  45  0.284000      -1.25878      -505.287       505.287       7593.84       8099.12    
  46  0.108174      -2.22402      -892.743       892.743       7512.14       8404.88    
  47  0.293070      -1.22734      -492.668       492.668       7562.90       8055.57    
  48  0.412045     -0.886623      -355.900       355.900       7603.86       7959.76    
  49  0.464041     -0.767783      -308.196       308.196       7709.94       8018.13    
  50  0.711768     -0.340003      -136.481       136.481       7512.56       7649.04    
  51  0.919970     -0.834138E-01  -33.4832       33.4832       7892.17       7925.65    
  52  0.551321     -0.595437      -239.015       239.015       7536.74       7775.75    
  53  0.720690E-01  -2.63013      -1055.76       1055.76       7920.16       8975.92    
  54  0.788823     -0.237213      -95.2198       95.2198       7293.57       7388.79    
  55  0.339304      -1.08086      -433.869       433.869       7335.62       7769.48    
  56  0.824115     -0.193445      -77.6509       77.6509       7510.70       7588.35    
  57  0.564535     -0.571754      -229.508       229.508       8222.28       8451.79    
  58  0.608050     -0.497498      -199.701       199.701       8288.68       8488.38    
  59  0.696797     -0.361262      -145.014       145.014       8277.14       8422.15    
  60  0.287274      -1.24732      -500.687       500.687       8382.14       8882.83    
  61  0.302150E-01  -3.49942      -1404.70       1404.70       8968.45       10373.2    
  62  0.896370     -0.109402      -43.9151       43.9151       8747.78       8791.70    
  63  0.289059      -1.24112      -498.200       498.200       9218.69       9716.89    
  64  0.476596     -0.741086      -297.480       297.480       5796.84       6094.32    
loop,thermsimp(1:2)       31   514.564       641.167    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       4527.63          0.89          1.09         23.08          0.49          0.05         25.59
Just calling func    0   0         25.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260       5816.89          0.89          1.07         22.86          0.48          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4527.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       31
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       32
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      259     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -142.404       142.404       4318.74       4461.14    
   2  0.779682     -0.248869      -99.8987       99.8987       4538.53       4638.43    
   3  0.611645     -0.491604      -197.335       197.335       4407.40       4604.74    
   4  0.380626     -0.965937      -387.737       387.737       4343.46       4731.19    
   5  0.986599     -0.134915E-01  -5.41562       5.41562       4773.88       4779.30    
   6  0.699021     -0.358075      -143.735       143.735       4813.99       4957.73    
   7  0.981217E-01  -2.32155      -931.893       931.893       4941.39       5873.28    
   8  0.221199      -1.50869      -605.605       605.605       4953.55       5559.15    
   9  0.802460     -0.220073      -88.3397       88.3397       4682.74       4771.08    
  10  0.623430     -0.472519      -189.674       189.674       4437.73       4627.40    
  11  0.669862     -0.400684      -160.839       160.839       4777.95       4938.79    
  12  0.957999     -0.429090E-01  -17.2241       17.2241       4965.30       4982.52    
  13  0.569879E-01  -2.86492      -1150.01       1150.01       4896.42       6046.43    
  14  0.245244      -1.40550      -564.183       564.183       4919.34       5483.53    
  15  0.870123     -0.139121      -55.8446       55.8446       4723.70       4779.55    
  16  0.429679     -0.844716      -339.078       339.078       5242.64       5581.71    
  17  0.369880     -0.994577      -399.234       399.234       5051.03       5450.27    
  18  0.964882     -0.357490E-01  -14.3500       14.3500       5223.16       5237.51    
  19  0.625983     -0.468432      -188.033       188.033       5292.23       5480.27    
  20  0.508652     -0.675991      -271.350       271.350       4736.33       5007.68    
  21  0.694697     -0.364279      -146.225       146.225       4888.69       5034.91    
  22  0.817819     -0.201114      -80.7292       80.7292       5561.24       5641.97    
  23  0.655732     -0.422003      -169.396       169.396       5310.48       5479.88    
  24  0.658757     -0.417401      -167.549       167.549       5445.82       5613.37    
  25  0.325934      -1.12106      -450.005       450.005       5728.33       6178.33    
  26  0.849137     -0.163535      -65.6445       65.6445       5247.38       5313.03    
  27  0.953435     -0.476843E-01  -19.1410       19.1410       5326.05       5345.19    
  28  0.435049     -0.832297      -334.093       334.093       5996.15       6330.24    
  29  0.155341E-01  -4.16472      -1671.76       1671.76       5796.84       7468.60    
  30  0.390095     -0.941364      -377.873       377.873       5200.90       5578.77    
  31  0.400867E-02  -5.51929      -2215.50       2215.50       6104.52       8320.02    
  32  0.989750     -0.103025E-01  -4.13554       4.13554       6123.14       6127.28    
  33  0.194149      -1.63913      -657.963       657.963       6093.62       6751.58    
  34  0.573547     -0.555915      -223.150       223.150       5720.99       5944.14    
  35  0.570216     -0.561740      -225.488       225.488       5990.60       6216.09    
  36  0.802122     -0.220494      -88.5087       88.5087       6008.98       6097.49    
  37  0.831214E-01  -2.48745      -998.490       998.490       5711.06       6709.55    
  38  0.280368      -1.27165      -510.454       510.454       6282.74       6793.19    
  39  0.568263     -0.565171      -226.865       226.865       6784.70       7011.57    
  40  0.570544     -0.561165      -225.257       225.257       6144.95       6370.21    
  41  0.524202     -0.645877      -259.262       259.262       6959.75       7219.01    
  42  0.625335E-01  -2.77205      -1112.73       1112.73       6526.89       7639.62    
  43  0.717146     -0.332476      -133.460       133.460       7164.78       7298.24    
  44  0.234175      -1.45169      -582.722       582.722       7293.57       7876.29    
  45  0.366320      -1.00425      -403.116       403.116       7388.62       7791.74    
  46  0.458915     -0.778891      -312.655       312.655       7510.70       7823.36    
  47  0.379536     -0.968806      -388.889       388.889       7512.56       7901.45    
  48  0.854466     -0.157278      -63.1332       63.1332       7335.62       7398.75    
  49  0.452738E-01  -3.09503      -1242.38       1242.38       7536.74       8779.11    
  50  0.966525     -0.340477E-01  -13.6671       13.6671       6841.78       6855.45    
  51  0.400949     -0.913920      -366.857       366.857       7892.17       8259.02    
  52  0.563096     -0.574305      -230.532       230.532       7603.86       7834.39    
  53  0.612298     -0.490536      -196.906       196.906       7709.94       7906.84    
  54  0.395518     -0.927559      -372.332       372.332       7562.90       7935.23    
  55  0.693522     -0.365972      -146.905       146.905       7593.84       7740.74    
  56  0.270894      -1.30603      -524.254       524.254       7512.14       8036.39    
  57  0.885600     -0.121490      -48.7673       48.7673       8277.14       8325.91    
  58  0.862297     -0.148155      -59.4710       59.4710       8222.28       8281.75    
  59  0.483017     -0.727702      -292.107       292.107       8288.68       8580.79    
  60  0.594400     -0.520203      -208.815       208.815       8747.78       8956.60    
  61  0.351664      -1.04508      -419.506       419.506       8382.14       8801.64    
  62  0.402505     -0.910048      -365.303       365.303       7920.16       8285.46    
  63  0.272240      -1.30107      -522.264       522.264       9218.69       9740.95    
  64  0.234792      -1.44906      -581.667       581.667       4527.63       5109.30    
loop,thermsimp(1:2)       32   142.404       99.8987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       4974.25          0.89          1.07         23.03          0.28          0.04         25.31
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    262      10556.03          0.89          1.06         23.02          0.34          0.04         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    4974.2        2.949     0.7226      5.386     -100.0    -0.2339    
                      -1.513      1.948     -100.0      3.203     0.3126E-01
                      0.3767     0.4693      2.400      0.000      0.000    
                      -2.874      0.000      0.000      0.000     -1.221    

                      -2.500     0.1272E+05 0.1423E+05 -1402.     -5005.    
                      -2.000     -1.117    -0.1410     -3.274     -1.849    
                      -11.24     -2.464      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.3891     0.3565E-01  0.000    -0.4327    
                      0.2935    -0.4268    -0.3739E-01 0.2253    -0.3554    

                      -1.232     -2.505      0.000     0.4142     0.5038    
                      0.8541E-01 -1.243     0.3220     0.1720    -0.6935    
                     -0.2268    -0.1268     0.3154    -0.6956      0.000    

                      -1.413    -0.5377      3.456     -2.301      0.000    
                       0.000      9.530      7.788     -7943.     -4.000    
                       1.347    -0.7332      9.331      8.580     -4736.    

                      -4.000      1.447      1.388      9.672      8.648    
                     -0.1461E+05 -4.000     0.2326      1.261      9.288    
                       9.286     -353.6     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4974.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       32
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       33
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      261     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -363.843       363.843       4318.74       4682.58    
   2  0.598662     -0.513057      -205.947       205.947       4407.40       4613.35    
   3  0.165178      -1.80073      -722.832       722.832       4437.73       5160.56    
   4  0.785331     -0.241651      -97.0011       97.0011       4538.53       4635.53    
   5  0.422061     -0.862604      -346.258       346.258       4343.46       4689.71    
   6  0.343624      -1.06821      -428.789       428.789       4682.74       5111.53    
   7  0.988862     -0.112001E-01  -4.49583       4.49583       4773.88       4778.38    
   8  0.586093E-01  -2.83686      -1138.75       1138.75       4723.70       5862.45    
   9  0.324880      -1.12430      -451.306       451.306       4777.95       5229.26    
  10  0.869373     -0.139983      -56.1907       56.1907       4813.99       4870.18    
  11  0.314362      -1.15721      -464.516       464.516       4965.30       5429.81    
  12  0.635265     -0.453712      -182.125       182.125       4736.33       4918.46    
  13  0.800738     -0.222221      -89.2018       89.2018       4888.69       4977.89    
  14  0.234515      -1.45024      -582.140       582.140       4527.63       5109.77    
  15  0.818766     -0.199957      -80.2648       80.2648       5223.16       5303.43    
  16  0.480807     -0.732289      -293.948       293.948       5247.38       5541.33    
  17  0.173083      -1.75398      -704.067       704.067       5326.05       6030.11    
  18  0.544835     -0.607272      -243.765       243.765       5051.03       5294.80    
  19  0.955728     -0.452816E-01  -18.1765       18.1765       5310.48       5328.66    
  20  0.909631     -0.947157E-01  -38.0199       38.0199       5292.23       5330.25    
  21  0.538276     -0.619384      -248.627       248.627       4919.34       5167.97    
  22  0.640373     -0.445705      -178.911       178.911       4953.55       5132.46    
  23  0.588429     -0.530300      -212.868       212.868       5200.90       5413.77    
  24  0.954392     -0.466804E-01  -18.7380       18.7380       5242.64       5261.37    
  25  0.976738     -0.235363E-01  -9.44773       9.44773       5445.82       5455.27    
  26  0.801897     -0.220775      -88.6214       88.6214       5561.24       5649.86    
  27  0.679499     -0.386400      -155.105       155.105       4941.39       5096.49    
  28  0.303686      -1.19176      -478.386       478.386       5720.99       6199.38    
  29  0.907562     -0.969936E-01  -38.9342       38.9342       4896.42       4935.35    
  30  0.117971E-01  -4.43990      -1782.22       1782.22       6008.98       7791.20    
  31  0.324683      -1.12491      -451.549       451.549       6123.14       6574.69    
  32  0.662106     -0.412329      -165.513       165.513       5728.33       5893.84    
  33  0.334080      -1.09637      -440.096       440.096       5990.60       6430.70    
  34  0.307577      -1.17903      -473.275       473.275       5996.15       6469.42    
  35  0.539029     -0.617986      -248.066       248.066       6144.95       6393.02    
  36  0.822737     -0.195119      -78.3229       78.3229       5711.06       5789.39    
  37  0.973480     -0.268776E-01  -10.7890       10.7890       6093.62       6104.41    
  38  0.918970     -0.845018E-01  -33.9199       33.9199       6282.74       6316.66    
  39  0.203072      -1.59419      -639.926       639.926       6841.78       7481.71    
  40  0.467655     -0.760024      -305.082       305.082       6784.70       7089.78    
  41  0.323145      -1.12965      -453.455       453.455       6959.75       7413.20    
  42  0.505961     -0.681295      -273.479       273.479       7164.78       7438.26    
  43  0.699853E-01  -2.65947      -1067.54       1067.54       7335.62       8403.16    
  44  0.188263      -1.66991      -670.321       670.321       5796.84       6467.16    
  45  0.663178     -0.410711      -164.864       164.864       6526.89       6691.75    
  46  0.680233     -0.385320      -154.671       154.671       7593.84       7748.51    
  47  0.717812     -0.331548      -133.087       133.087       7388.62       7521.71    
  48  0.319374      -1.14139      -458.167       458.167       7510.70       7968.87    
  49  0.667076     -0.404851      -162.511       162.511       7603.86       7766.37    
  50  0.755360     -0.280560      -112.620       112.620       7293.57       7406.19    
  51  0.105804      -2.24617      -901.636       901.636       7512.56       8414.20    
  52  0.432752     -0.837590      -336.217       336.217       7709.94       8046.15    
  53  0.258710      -1.35205      -542.725       542.725       7562.90       8105.63    
  54  0.826410     -0.190665      -76.5348       76.5348       7512.14       7588.68    
  55  0.958430     -0.424590E-01  -17.0435       17.0435       7892.17       7909.21    
  56  0.898442     -0.107093      -42.9882       42.9882       8222.28       8265.27    
  57  0.794924     -0.229509      -92.1273       92.1273       7920.16       8012.29    
  58  0.191148      -1.65471      -664.217       664.217       6104.52       6768.73    
  59  0.920959     -0.823397E-01  -33.0520       33.0520       8277.14       8310.19    
  60  0.239714      -1.42831      -573.338       573.338       8288.68       8862.02    
  61  0.337561      -1.08601      -435.935       435.935       7536.74       7972.67    
  62  0.229537      -1.47169      -590.753       590.753       8382.14       8972.89    
  63  0.518941     -0.655965      -263.311       263.311       8747.78       9011.09    
  64  0.565096     -0.570759      -229.109       229.109       4974.25       5203.36    
loop,thermsimp(1:2)       33   363.843       205.947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       5851.16          0.88          1.09         23.00          0.23          0.04         25.25
Just calling func    0   0         25.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5851.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       33
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       34
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      262     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -591.826       591.826       4407.40       4999.23    
   2  0.299376      -1.20605      -484.123       484.123       4538.53       5022.65    
   3  0.220114      -1.51361      -607.579       607.579       4318.74       4926.32    
   4  0.229209      -1.47312      -591.327       591.327       4343.46       4934.78    
   5  0.902477     -0.102612      -41.1897       41.1897       4773.88       4815.07    
   6  0.659052     -0.416953      -167.369       167.369       4813.99       4981.36    
   7  0.100321E-01  -4.60197      -1847.28       1847.28       4736.33       6583.61    
   8  0.588837     -0.529606      -212.589       212.589       4896.42       5109.01    
   9  0.270943      -1.30585      -524.181       524.181       4888.69       5412.87    
  10  0.505518     -0.682171      -273.831       273.831       4941.39       5215.22    
  11  0.264565      -1.32967      -533.743       533.743       4527.63       5061.37    
  12  0.806386     -0.215193      -86.3809       86.3809       4682.74       4769.12    
  13  0.340560      -1.07716      -432.385       432.385       4953.55       5385.93    
  14  0.906186     -0.985106E-01  -39.5432       39.5432       4437.73       4477.27    
  15  0.786070     -0.240709      -96.6232       96.6232       4919.34       5015.97    
  16  0.540508     -0.615247      -246.966       246.966       4974.25       5221.22    
  17  0.935065     -0.671392E-01  -26.9504       26.9504       4777.95       4804.90    
  18  0.915359     -0.884391E-01  -35.5004       35.5004       5242.64       5278.14    
  19  0.958261     -0.426353E-01  -17.1143       17.1143       5051.03       5068.15    
  20  0.935110     -0.670907E-01  -26.9309       26.9309       5223.16       5250.10    
  21  0.637755     -0.449800      -180.555       180.555       5310.48       5491.04    
  22  0.975714     -0.245861E-01  -9.86913       9.86913       5292.23       5302.10    
  23  0.797424     -0.226369      -90.8669       90.8669       5200.90       5291.77    
  24  0.214179      -1.54094      -618.551       618.551       4965.30       5583.85    
  25  0.372145     -0.988472      -396.783       396.783       5445.82       5842.60    
  26  0.925208     -0.777367E-01  -31.2043       31.2043       5247.38       5278.59    
  27  0.175897      -1.73786      -697.593       697.593       5561.24       6258.83    
  28  0.952033     -0.491554E-01  -19.7315       19.7315       5711.06       5730.80    
  29  0.158274E-01  -4.14601      -1664.25       1664.25       4723.70       6387.95    
  30  0.799308     -0.224008      -89.9193       89.9193       5728.33       5818.24    
  31  0.248227      -1.39341      -559.330       559.330       5326.05       5885.38    
  32  0.244914      -1.40685      -564.723       564.723       6093.62       6658.34    
  33  0.390842     -0.939452      -377.106       377.106       5720.99       6098.10    
  34  0.146784      -1.91879      -770.224       770.224       6282.74       7052.96    
  35  0.500975     -0.691199      -277.455       277.455       6144.95       6422.41    
  36  0.480131E-01  -3.03628      -1218.80       1218.80       5990.60       7209.40    
  37  0.124503      -2.08343      -836.309       836.309       5796.84       6633.15    
  38  0.670304     -0.400024      -160.574       160.574       5996.15       6156.72    
  39  0.997449     -0.255468E-02  -1.02548       1.02548       6123.14       6124.17    
  40  0.681761     -0.383076      -153.771       153.771       6526.89       6680.66    
  41  0.440529     -0.819778      -329.067       329.067       6104.52       6433.58    
  42  0.342489      -1.07152      -430.118       430.118       6784.70       7214.82    
  43  0.735753     -0.306861      -123.177       123.177       7293.57       7416.74    
  44  0.614752     -0.486537      -195.301       195.301       6959.75       7155.05    
  45  0.351660      -1.04509      -419.510       419.510       7164.78       7584.29    
  46  0.777165     -0.252103      -101.197       101.197       6841.78       6942.98    
  47  0.392618     -0.934919      -375.286       375.286       7388.62       7763.91    
  48  0.385647     -0.952832      -382.477       382.477       7512.14       7894.62    
  49  0.834392     -0.181052      -72.6764       72.6764       7593.84       7666.51    
  50  0.469158     -0.756815      -303.794       303.794       7603.86       7907.65    
  51  0.697320     -0.360511      -144.713       144.713       6008.98       6153.69    
  52  0.987150     -0.129333E-01  -5.19155       5.19155       7892.17       7897.36    
  53  0.512413     -0.668624      -268.393       268.393       7510.70       7779.09    
  54  0.781282     -0.246819      -99.0759       99.0759       7536.74       7635.81    
  55  0.290579      -1.23588      -496.096       496.096       7920.16       8416.25    
  56  0.921499     -0.817534E-01  -32.8167       32.8167       7709.94       7742.75    
  57  0.198558      -1.61668      -648.950       648.950       7562.90       8211.85    
  58  0.488340     -0.716743      -287.708       287.708       8222.28       8509.99    
  59  0.874587     -0.134003      -53.7904       53.7904       8277.14       8330.93    
  60  0.165334      -1.79979      -722.455       722.455       7335.62       8058.07    
  61  0.712283     -0.339280      -136.190       136.190       7512.56       7648.75    
  62  0.578012E-01  -2.85075      -1144.32       1144.32       8288.68       9433.00    
  63  0.700556     -0.355880      -142.854       142.854       8382.14       8524.99    
  64  0.502101     -0.688954      -276.553       276.553       5851.16       6127.71    
loop,thermsimp(1:2)       34   591.826       484.123    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       4388.78          0.89          1.08         23.05          0.28          0.05         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265       6941.42          0.88          1.07         23.02          0.27          0.04         25.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4388.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       34
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       35
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      264     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -424.591       424.591       4437.73       4862.32    
   2  0.621479     -0.475653      -190.932       190.932       4682.74       4873.68    
   3  0.221273      -1.50836      -605.471       605.471       4777.95       5383.42    
   4  0.180626E-01  -4.01391      -1611.23       1611.23       4773.88       6385.11    
   5  0.216093      -1.53205      -614.980       614.980       4318.74       4933.72    
   6  0.351343      -1.04599      -419.872       419.872       4343.46       4763.33    
   7  0.360847      -1.01930      -409.159       409.159       4813.99       5223.15    
   8  0.439525     -0.822061      -329.984       329.984       4407.40       4737.39    
   9  0.910616E-01  -2.39622      -961.867       961.867       4919.34       5881.21    
  10  0.549745     -0.598300      -240.164       240.164       4538.53       4778.69    
  11  0.619825     -0.478318      -192.002       192.002       4527.63       4719.63    
  12  0.548169E-01  -2.90376      -1165.60       1165.60       5051.03       6216.63    
  13  0.947163     -0.542842E-01  -21.7903       21.7903       4896.42       4918.21    
  14  0.725459     -0.320951      -128.833       128.833       4941.39       5070.22    
  15  0.481613     -0.730615      -293.277       293.277       4974.25       5267.53    
  16  0.866286     -0.143540      -57.6186       57.6186       5223.16       5280.78    
  17  0.221988E-01  -3.80772      -1528.46       1528.46       5242.64       6771.09    
  18  0.980823     -0.193630E-01  -7.77253       7.77253       5247.38       5255.16    
  19  0.332549      -1.10097      -441.940       441.940       5200.90       5642.84    
  20  0.989035     -0.110256E-01  -4.42579       4.42579       5292.23       5296.66    
  21  0.364016      -1.01056      -405.648       405.648       4953.55       5359.20    
  22  0.861799     -0.148733      -59.7031       59.7031       4888.69       4948.39    
  23  0.622306     -0.474324      -190.399       190.399       5310.48       5500.88    
  24  0.575476     -0.552558      -221.803       221.803       4965.30       5187.10    
  25  0.205536      -1.58213      -635.084       635.084       5711.06       6346.15    
  26  0.124037      -2.08718      -837.815       837.815       5728.33       6566.14    
  27  0.467008     -0.761408      -305.637       305.637       5445.82       5751.46    
  28  0.273870      -1.29510      -519.867       519.867       5326.05       5845.91    
  29  0.842780     -0.171050      -68.6611       68.6611       5720.99       5789.65    
  30  0.709315     -0.343455      -137.866       137.866       6123.14       6261.01    
  31  0.677144     -0.389871      -156.498       156.498       5851.16       6007.66    
  32  0.656062     -0.421500      -169.195       169.195       6008.98       6178.17    
  33  0.721592     -0.326295      -130.978       130.978       5996.15       6127.12    
  34  0.120172      -2.11883      -850.522       850.522       5561.24       6411.76    
  35  0.832403     -0.183439      -73.6343       73.6343       4723.70       4797.34    
  36  0.607577     -0.498276      -200.013       200.013       6144.95       6344.97    
  37  0.169814      -1.77305      -711.721       711.721       6104.52       6816.24    
  38  0.578085     -0.548034      -219.987       219.987       4736.33       4956.32    
  39  0.201144      -1.60373      -643.756       643.756       5796.84       6440.59    
  40  0.922823     -0.803178E-01  -32.2404       32.2404       6093.62       6125.86    
  41  0.136644      -1.99038      -798.958       798.958       6526.89       7325.85    
  42  0.836366     -0.178689      -71.7275       71.7275       6841.78       6913.51    
  43  0.590669     -0.526499      -211.342       211.342       6282.74       6494.08    
  44  0.745946     -0.293102      -117.654       117.654       6959.75       7077.40    
  45  0.874736     -0.133833      -53.7220       53.7220       5990.60       6044.33    
  46  0.370232     -0.993625      -398.852       398.852       6784.70       7183.55    
  47  0.832293     -0.183570      -73.6871       73.6871       7293.57       7367.25    
  48  0.351566      -1.04536      -419.618       419.618       7164.78       7584.40    
  49  0.705870     -0.348324      -139.821       139.821       7536.74       7676.56    
  50  0.323816      -1.12758      -452.623       452.623       7512.56       7965.18    
  51  0.197269      -1.62319      -651.565       651.565       7593.84       8245.40    
  52  0.140686      -1.96123      -787.257       787.257       7709.94       8497.19    
  53  0.913651     -0.903067E-01  -36.2500       36.2500       7388.62       7424.87    
  54  0.515699     -0.662233      -265.827       265.827       7510.70       7776.53    
  55  0.217669      -1.52478      -612.063       612.063       7512.14       8124.20    
  56  0.234146      -1.45181      -582.772       582.772       7892.17       8474.94    
  57  0.948303     -0.530813E-01  -21.3074       21.3074       7603.86       7625.17    
  58  0.165683      -1.79768      -721.607       721.607       7335.62       8057.22    
  59  0.506186     -0.680851      -273.301       273.301       7562.90       7836.20    
  60  0.644381     -0.439466      -176.406       176.406       8277.14       8453.55    
  61  0.790610     -0.234950      -94.3113       94.3113       7920.16       8014.47    
  62  0.945427     -0.561185E-01  -22.5266       22.5266       8222.28       8244.81    
  63  0.195494      -1.63222      -655.192       655.192       8382.14       9037.33    
  64  0.478914     -0.736235      -295.532       295.532       4388.78       4684.32    
loop,thermsimp(1:2)       35   424.591       190.932    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266      22360.32          0.88          1.08         23.02          0.26          0.04         25.28
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    267       7535.56          0.89          1.09         22.98          0.30          0.04         25.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   7535.56
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       35
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       36
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      266     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -583.517       583.517       4388.78       4972.30    
   2  0.607568     -0.498291      -200.019       200.019       4527.63       4727.65    
   3  0.905785     -0.989529E-01  -39.7207       39.7207       4407.40       4447.12    
   4  0.995938E-01  -2.30666      -925.916       925.916       4343.46       5269.37    
   5  0.851360     -0.160920      -64.5951       64.5951       4538.53       4603.12    
   6  0.730583     -0.313913      -126.008       126.008       4723.70       4849.71    
   7  0.426216     -0.852810      -342.327       342.327       4437.73       4780.06    
   8  0.285108      -1.25489      -503.726       503.726       4682.74       5186.47    
   9  0.839246     -0.175251      -70.3478       70.3478       4896.42       4966.77    
  10  0.217639      -1.52492      -612.117       612.117       4318.74       4930.85    
  11  0.183996E-02  -6.29801      -2528.09       2528.09       4888.69       7416.78    
  12  0.682631     -0.381801      -153.259       153.259       4736.33       4889.59    
  13  0.203596      -1.59162      -638.893       638.893       4941.39       5580.28    
  14  0.881164     -0.126512      -50.7833       50.7833       4965.30       5016.08    
  15  0.711431     -0.340477      -136.671       136.671       4813.99       4950.66    
  16  0.874326     -0.134302      -53.9102       53.9102       5247.38       5301.30    
  17  0.814222     -0.205523      -82.4990       82.4990       4974.25       5056.75    
  18  0.995668     -0.434126E-02  -1.74263       1.74263       5223.16       5224.91    
  19  0.693805     -0.365564      -146.741       146.741       5292.23       5438.97    
  20  0.958584     -0.422984E-01  -16.9790       16.9790       4953.55       4970.53    
  21  0.748022     -0.290323      -116.539       116.539       4777.95       4894.49    
  22  0.696703     -0.361396      -145.068       145.068       5310.48       5455.55    
  23  0.732990     -0.310623      -124.687       124.687       5200.90       5325.59    
  24  0.534749     -0.625958      -251.266       251.266       5445.82       5697.08    
  25  0.691641     -0.368688      -147.995       147.995       5720.99       5868.99    
  26  0.300458      -1.20245      -482.675       482.675       5326.05       5808.72    
  27  0.977116     -0.231502E-01  -9.29274       9.29274       4919.34       4928.64    
  28  0.542581     -0.611418      -245.430       245.430       5851.16       6096.59    
  29  0.266111      -1.32384      -531.404       531.404       5990.60       6522.01    
  30  0.692298     -0.367738      -147.614       147.614       6093.62       6241.23    
  31  0.664047     -0.409403      -164.339       164.339       5996.15       6160.49    
  32  0.542186     -0.612146      -245.722       245.722       6008.98       6254.70    
  33  0.362243      -1.01544      -407.608       407.608       5051.03       5458.64    
  34  0.578658     -0.547044      -219.589       219.589       6123.14       6342.73    
  35  0.489298     -0.714783      -286.921       286.921       6144.95       6431.88    
  36  0.617485     -0.482100      -193.520       193.520       5711.06       5904.58    
  37  0.368651     -0.997905      -400.570       400.570       4773.88       5174.45    
  38  0.198936      -1.61477      -648.186       648.186       5561.24       6209.42    
  39  0.505263     -0.682676      -274.033       274.033       5796.84       6070.87    
  40  0.983997     -0.161325E-01  -6.47575       6.47575       6282.74       6289.21    
  41  0.630553     -0.461159      -185.114       185.114       5728.33       5913.44    
  42  0.423821E-01  -3.16103      -1268.87       1268.87       5242.64       6511.51    
  43  0.488935     -0.715526      -287.220       287.220       6104.52       6391.74    
  44  0.402078     -0.911110      -365.729       365.729       6841.78       7207.51    
  45  0.380878     -0.965277      -387.472       387.472       6959.75       7347.22    
  46  0.260585E-01  -3.64741      -1464.11       1464.11       6784.70       8248.81    
  47  0.681660     -0.383224      -153.830       153.830       6526.89       6680.72    
  48  0.489074     -0.715241      -287.105       287.105       7293.57       7580.67    
  49  0.752363     -0.284536      -114.216       114.216       7388.62       7502.84    
  50  0.978934     -0.212911E-01  -8.54648       8.54648       7164.78       7173.33    
  51  0.297789      -1.21137      -486.257       486.257       7603.86       8090.12    
  52  0.551604     -0.594926      -238.809       238.809       7536.74       7775.55    
  53  0.546413     -0.604381      -242.605       242.605       7510.70       7753.31    
  54  0.831880     -0.184067      -73.8862       73.8862       7562.90       7636.79    
  55  0.873708     -0.135010      -54.1942       54.1942       7512.56       7566.75    
  56  0.169447      -1.77521      -712.590       712.590       7920.16       8632.75    
  57  0.434000     -0.834712      -335.062       335.062       7335.62       7670.68    
  58  0.506119     -0.680984      -273.354       273.354       7512.14       7785.49    
  59  0.168470      -1.78100      -714.910       714.910       8222.28       8937.19    
  60  0.820014     -0.198433      -79.6533       79.6533       7593.84       7673.49    
  61  0.973689     -0.266631E-01  -10.7028       10.7028       8277.14       8287.84    
  62  0.438579     -0.824215      -330.849       330.849       7892.17       8223.01    
  63  0.725095     -0.321452      -129.034       129.034       7709.94       7838.97    
  64  0.857338     -0.153923      -61.7863       61.7863       7535.56       7597.35    
loop,thermsimp(1:2)       36   583.517       200.019    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       8272.87          0.88          1.09         23.01          0.28          0.05         25.30
Just calling func    0   0         25.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8272.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       36
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       37
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      267     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -356.626       356.626       4407.40       4764.03    
   2  0.697205     -0.360676      -144.779       144.779       4538.53       4683.31    
   3  0.314648E-01  -3.45889      -1388.43       1388.43       4527.63       5916.06    
   4  0.857269     -0.154003      -61.8184       61.8184       4437.73       4499.55    
   5  0.652165     -0.427457      -171.586       171.586       4723.70       4895.29    
   6  0.510145     -0.673060      -270.173       270.173       4736.33       5006.50    
   7  0.175175      -1.74197      -699.244       699.244       4777.95       5477.20    
   8  0.373803     -0.984025      -394.998       394.998       4919.34       5314.34    
   9  0.514972     -0.663642      -266.393       266.393       4318.74       4585.13    
  10  0.548235     -0.601051      -241.268       241.268       4813.99       5055.26    
  11  0.541310     -0.613763      -246.371       246.371       4896.42       5142.79    
  12  0.734083     -0.309133      -124.089       124.089       4953.55       5077.64    
  13  0.422599     -0.861332      -345.748       345.748       4388.78       4734.53    
  14  0.287055      -1.24808      -500.993       500.993       4965.30       5466.29    
  15  0.885133     -0.122017      -48.9790       48.9790       4974.25       5023.23    
  16  0.391075     -0.938857      -376.867       376.867       4773.88       5150.75    
  17  0.473784     -0.747003      -299.855       299.855       4682.74       4982.60    
  18  0.691812     -0.368440      -147.896       147.896       5223.16       5371.06    
  19  0.644447     -0.439363      -176.365       176.365       4343.46       4519.82    
  20  0.805933     -0.215754      -86.6060       86.6060       5247.38       5333.99    
  21  0.393766     -0.931998      -374.114       374.114       5200.90       5575.01    
  22  0.907098E-01  -2.40009      -963.421       963.421       5292.23       6255.65    
  23  0.376515     -0.976796      -392.096       392.096       5310.48       5702.58    
  24  0.819190     -0.199439      -80.0571       80.0571       5051.03       5131.09    
  25  0.692438     -0.367536      -147.533       147.533       4941.39       5088.92    
  26  0.188370      -1.66935      -670.094       670.094       5445.82       6115.91    
  27  0.500532     -0.692083      -277.810       277.810       5326.05       5603.86    
  28  0.282311      -1.26475      -507.683       507.683       5720.99       6228.68    
  29  0.338061      -1.08453      -435.341       435.341       5711.06       6146.40    
  30  0.466208     -0.763123      -306.326       306.326       5728.33       6034.65    
  31  0.893084     -0.113075      -45.3894       45.3894       5796.84       5842.23    
  32  0.818806     -0.199908      -80.2454       80.2454       5851.16       5931.40    
  33  0.585066     -0.536031      -215.169       215.169       5996.15       6211.32    
  34  0.527412     -0.639774      -256.812       256.812       5561.24       5818.05    
  35  0.994295     -0.572143E-02  -2.29664       2.29664       6093.62       6095.92    
  36  0.739278     -0.302082      -121.259       121.259       6008.98       6130.24    
  37  0.230995      -1.46536      -588.210       588.210       6282.74       6870.95    
  38  0.414929     -0.879648      -353.100       353.100       6123.14       6476.24    
  39  0.378446     -0.971682      -390.043       390.043       6104.52       6494.56    
  40  0.368620     -0.997990      -400.603       400.603       6144.95       6545.56    
  41  0.301312      -1.19961      -481.535       481.535       5242.64       5724.17    
  42  0.105882E-01  -4.54801      -1825.62       1825.62       5990.60       7816.22    
  43  0.481885     -0.730049      -293.049       293.049       6526.89       6819.94    
  44  0.446716     -0.805833      -323.470       323.470       7164.78       7488.25    
  45  0.482098     -0.729608      -292.872       292.872       6841.78       7134.65    
  46  0.278892      -1.27693      -512.574       512.574       6959.75       7472.32    
  47  0.756484     -0.279074      -112.023       112.023       4888.69       5000.71    
  48  0.662766     -0.411334      -165.114       165.114       7388.62       7553.74    
  49  0.433861E-01  -3.13762      -1259.47       1259.47       7512.56       8772.03    
  50  0.825649E-02  -4.79676      -1925.47       1925.47       7293.57       9219.03    
  51  0.476679     -0.740911      -297.410       297.410       7535.56       7832.97    
  52  0.128614      -2.05094      -823.268       823.268       7562.90       8386.17    
  53  0.609086     -0.495797      -199.018       199.018       7335.62       7534.63    
  54  0.484878E-01  -3.02644      -1214.85       1214.85       7593.84       8808.68    
  55  0.287383E-02  -5.85211      -2349.10       2349.10       7510.70       9859.80    
  56  0.699724     -0.357070      -143.332       143.332       7536.74       7680.07    
  57  0.407524     -0.897655      -360.328       360.328       7512.14       7872.47    
  58  0.530107     -0.634677      -254.766       254.766       7709.94       7964.70    
  59  0.589469E-01  -2.83112      -1136.44       1136.44       7603.86       8740.30    
  60  0.357066E-01  -3.33242      -1337.67       1337.67       7892.17       9229.83    
  61  0.726760     -0.319159      -128.114       128.114       6784.70       6912.82    
  62  0.486103     -0.721334      -289.551       289.551       8277.14       8566.69    
  63  0.212811      -1.54735      -621.123       621.123       7920.16       8541.28    
  64  0.264725      -1.32906      -533.500       533.500       8272.87       8806.37    
loop,thermsimp(1:2)       37   356.626       144.779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       6991.10          0.88          1.08         23.01          0.34          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   6991.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       37
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       38
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      268     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -359.022       359.022       4437.73       4796.75    
   2  0.259700      -1.34823      -541.192       541.192       4343.46       4884.65    
   3  0.681144E-01  -2.68657      -1078.42       1078.42       4318.74       5397.15    
   4  0.158140      -1.84427      -740.310       740.310       4538.53       5278.84    
   5  0.497681     -0.697796      -280.103       280.103       4388.78       4668.89    
   6  0.800218     -0.222871      -89.4626       89.4626       4407.40       4496.87    
   7  0.831967     -0.183962      -73.8444       73.8444       4723.70       4797.55    
   8  0.707345     -0.346237      -138.983       138.983       4682.74       4821.73    
   9  0.265927      -1.32454      -531.682       531.682       4888.69       5420.37    
  10  0.659046     -0.416962      -167.373       167.373       4736.33       4903.70    
  11  0.654587E-01  -2.72634      -1094.38       1094.38       4974.25       6068.63    
  12  0.223329      -1.49911      -601.759       601.759       4813.99       5415.75    
  13  0.996019     -0.398855E-02  -1.60105       1.60105       4953.55       4955.15    
  14  0.553910     -0.590753      -237.134       237.134       4941.39       5178.52    
  15  0.218863      -1.51931      -609.867       609.867       5051.03       5660.90    
  16  0.414020     -0.881841      -353.980       353.980       4896.42       5250.40    
  17  0.229117      -1.47352      -591.487       591.487       4773.88       5365.37    
  18  0.341764      -1.07363      -430.968       430.968       4919.34       5350.31    
  19  0.357052      -1.02987      -413.402       413.402       5247.38       5660.79    
  20  0.780779     -0.247463      -99.3344       99.3344       5223.16       5322.50    
  21  0.382234     -0.961721      -386.045       386.045       4965.30       5351.34    
  22  0.123899      -2.08829      -838.262       838.262       4777.95       5616.21    
  23  0.393312     -0.933152      -374.577       374.577       5200.90       5575.48    
  24  0.481741     -0.730349      -293.170       293.170       5326.05       5619.22    
  25  0.120001      -2.12026      -851.093       851.093       5310.48       6161.58    
  26  0.506023     -0.681173      -273.430       273.430       5242.64       5516.07    
  27  0.891157     -0.115235      -46.2566       46.2566       5561.24       5607.49    
  28  0.584674     -0.536701      -215.438       215.438       5796.84       6012.27    
  29  0.313196      -1.16093      -466.008       466.008       4527.63       4993.64    
  30  0.507340     -0.678574      -272.387       272.387       5851.16       6123.55    
  31  0.985030     -0.150835E-01  -6.05469       6.05469       5728.33       5734.38    
  32  0.186570      -1.67895      -673.947       673.947       6093.62       6767.57    
  33  0.992622     -0.740493E-02  -2.97242       2.97242       5445.82       5448.79    
  34  0.344152      -1.06667      -428.173       428.173       6008.98       6437.15    
  35  0.327214      -1.11714      -448.432       448.432       5711.06       6159.50    
  36  0.722008     -0.325719      -130.747       130.747       5996.15       6126.89    
  37  0.471441     -0.751960      -301.845       301.845       5720.99       6022.84    
  38  0.483594     -0.726510      -291.629       291.629       5292.23       5583.86    
  39  0.799410     -0.223881      -89.8681       89.8681       6123.14       6213.01    
  40  0.864070     -0.146101      -58.6466       58.6466       6104.52       6163.16    
  41  0.326419      -1.11957      -449.409       449.409       6144.95       6594.36    
  42  0.970166E-01  -2.33287      -936.440       936.440       6526.89       7463.33    
  43  0.822479     -0.195432      -78.4486       78.4486       6282.74       6361.18    
  44  0.719858     -0.328701      -131.944       131.944       6784.70       6916.65    
  45  0.359763      -1.02231      -410.366       410.366       6841.78       7252.15    
  46  0.879180     -0.128765      -51.6878       51.6878       6959.75       7011.44    
  47  0.152514      -1.88050      -754.852       754.852       7164.78       7919.64    
  48  0.379430     -0.969085      -389.001       389.001       7335.62       7724.62    
  49  0.444703     -0.810349      -325.283       325.283       7388.62       7713.91    
  50  0.240485      -1.42510      -572.049       572.049       7536.74       8108.79    
  51  0.682479     -0.382024      -153.348       153.348       5990.60       6143.95    
  52  0.989508     -0.105479E-01  -4.23404       4.23404       7535.56       7539.79    
  53  0.626329E-01  -2.77046      -1112.09       1112.09       7512.14       8624.23    
  54  0.217806      -1.52415      -611.810       611.810       7709.94       8321.75    
  55  0.297102      -1.21368      -487.184       487.184       7562.90       8050.08    
  56  0.447982     -0.803002      -322.333       322.333       7920.16       8242.49    
  57  0.343456      -1.06870      -428.985       428.985       8277.14       8706.13    
  58  0.737340     -0.304706      -122.312       122.312       7603.86       7726.17    
  59  0.863080     -0.147248      -59.1067       59.1067       7512.56       7571.67    
  60  0.463462     -0.769030      -308.697       308.697       8272.87       8581.57    
  61  0.120067      -2.11970      -850.871       850.871       7593.84       8444.71    
  62  0.758415     -0.276525      -111.000       111.000       7293.57       7404.57    
  63  0.356867      -1.03039      -413.610       413.610       7892.17       8305.78    
  64  0.811695     -0.208631      -83.7467       83.7467       6991.10       7074.85    
loop,thermsimp(1:2)       38   359.022       541.192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270       4534.37          0.88          1.08         22.99          0.35          0.05         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    271       7970.56          0.89          1.06         23.00          0.73          0.04         25.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4534.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       38
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       39
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      270     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -834.488       834.488       4407.40       5241.89    
   2  0.274837      -1.29158      -518.452       518.452       4388.78       4907.24    
   3  0.305931E-01  -3.48698      -1399.71       1399.71       4437.73       5837.44    
   4  0.929157     -0.734779E-01  -29.4948       29.4948       4723.70       4753.20    
   5  0.995956     -0.405208E-02  -1.62655       1.62655       4682.74       4684.37    
   6  0.904971     -0.998521E-01  -40.0817       40.0817       4343.46       4383.54    
   7  0.189758      -1.66200      -667.146       667.146       4736.33       5403.48    
   8  0.134931      -2.00299      -804.023       804.023       4953.55       5757.57    
   9  0.302412      -1.19596      -480.073       480.073       4527.63       5007.70    
  10  0.389155     -0.943777      -378.842       378.842       4941.39       5320.23    
  11  0.947428     -0.540040E-01  -21.6778       21.6778       4896.42       4918.10    
  12  0.338357      -1.08365      -434.990       434.990       4538.53       4973.52    
  13  0.937476     -0.645645E-01  -25.9169       25.9169       5223.16       5249.08    
  14  0.399493     -0.917560      -368.318       368.318       4919.34       5287.66    
  15  0.527586     -0.639444      -256.680       256.680       4965.30       5221.98    
  16  0.297740      -1.21153      -486.323       486.323       4773.88       5260.20    
  17  0.557978     -0.583436      -234.197       234.197       4318.74       4552.93    
  18  0.267521      -1.31856      -529.282       529.282       4813.99       5343.27    
  19  0.637637     -0.449986      -180.629       180.629       4888.69       5069.32    
  20  0.838569     -0.176059      -70.6718       70.6718       5445.82       5516.49    
  21  0.132199E-01  -4.32603      -1736.51       1736.51       5242.64       6979.15    
  22  0.745606     -0.293557      -117.837       117.837       5200.90       5318.74    
  23  0.334504      -1.09511      -439.587       439.587       5292.23       5731.82    
  24  0.118852      -2.12987      -854.954       854.954       5561.24       6416.19    
  25  0.319911      -1.13971      -457.493       457.493       4777.95       5235.45    
  26  0.638302E-01  -2.75153      -1104.49       1104.49       5326.05       6430.54    
  27  0.173204      -1.75329      -703.788       703.788       5247.38       5951.17    
  28  0.885640     -0.121444      -48.7491       48.7491       5051.03       5099.78    
  29  0.710758     -0.341423      -137.051       137.051       5728.33       5865.38    
  30  0.938919     -0.630265E-01  -25.2995       25.2995       5796.84       5822.14    
  31  0.217740      -1.52445      -611.931       611.931       5720.99       6332.92    
  32  0.130036      -2.03994      -818.854       818.854       4974.25       5793.10    
  33  0.331090      -1.10537      -443.706       443.706       5851.16       6294.86    
  34  0.453525E-01  -3.09329      -1241.68       1241.68       5996.15       7237.83    
  35  0.494600     -0.704006      -282.595       282.595       5990.60       6273.20    
  36  0.488771E-01  -3.01845      -1211.64       1211.64       5711.06       6922.70    
  37  0.262916E-01  -3.63850      -1460.53       1460.53       5310.48       6771.02    
  38  0.975293     -0.250177E-01  -10.0424       10.0424       6104.52       6114.56    
  39  0.521026     -0.651955      -261.701       261.701       6123.14       6384.84    
  40  0.210960      -1.55609      -624.630       624.630       6282.74       6907.37    
  41  0.475166E-02  -5.34926      -2147.25       2147.25       6008.98       8156.23    
  42  0.675859     -0.391771      -157.261       157.261       6144.95       6302.21    
  43  0.691418     -0.369011      -148.125       148.125       6093.62       6241.74    
  44  0.425152     -0.855309      -343.330       343.330       6784.70       7128.03    
  45  0.141313      -1.95678      -785.470       785.470       6959.75       7745.22    
  46  0.902170     -0.102952      -41.3261       41.3261       6991.10       7032.43    
  47  0.794321     -0.230268      -92.4321       92.4321       6841.78       6934.21    
  48  0.685387     -0.377772      -151.642       151.642       7293.57       7445.21    
  49  0.273223      -1.29747      -520.816       520.816       6526.89       7047.71    
  50  0.784111     -0.243205      -97.6250       97.6250       7535.56       7633.18    
  51  0.824524     -0.192949      -77.4519       77.4519       7512.56       7590.01    
  52  0.855082     -0.156558      -62.8441       62.8441       7388.62       7451.47    
  53  0.744692E-01  -2.59737      -1042.61       1042.61       7335.62       8378.23    
  54  0.294857E-01  -3.52385      -1414.51       1414.51       7603.86       9018.37    
  55  0.225962      -1.48739      -597.053       597.053       7164.78       7761.84    
  56  0.211073      -1.55555      -624.414       624.414       7562.90       8187.31    
  57  0.525673E-01  -2.94566      -1182.42       1182.42       7536.74       8719.16    
  58  0.855455     -0.156122      -62.6690       62.6690       7920.16       7982.83    
  59  0.169262E-01  -4.07890      -1637.31       1637.31       7892.17       9529.48    
  60  0.578360     -0.547559      -219.796       219.796       7709.94       7929.73    
  61  0.753083     -0.283580      -113.832       113.832       7593.84       7707.67    
  62  0.942983     -0.587068E-01  -23.5655       23.5655       8272.87       8296.44    
  63  0.164299      -1.80607      -724.975       724.975       7512.14       8237.12    
  64  0.964876     -0.357557E-01  -14.3527       14.3527       4534.37       4548.73    
loop,thermsimp(1:2)       39   834.488       518.452    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272       4971.06          0.88          1.07         22.98          0.58          0.05         25.56
Just calling func    0   0         25.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    273      10764.53          0.89          1.07         23.04          0.50          0.04         25.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4971.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       39
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       40
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      272     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -306.832       306.832       4343.46       4650.29    
   2  0.310178      -1.17061      -469.894       469.894       4534.37       5004.27    
   3  0.883713     -0.123623      -49.6236       49.6236       4318.74       4368.36    
   4  0.641465     -0.444001      -178.227       178.227       4682.74       4860.97    
   5  0.458576E-01  -3.08222      -1237.23       1237.23       4723.70       5960.93    
   6  0.611421     -0.491970      -197.482       197.482       4388.78       4586.27    
   7  0.292603      -1.22894      -493.309       493.309       4896.42       5389.73    
   8  0.180818      -1.71026      -686.518       686.518       4538.53       5225.05    
   9  0.490648     -0.712028      -285.816       285.816       4527.63       4813.44    
  10  0.538601     -0.618781      -248.385       248.385       4888.69       5137.07    
  11  0.451209     -0.795824      -319.452       319.452       5051.03       5370.48    
  12  0.610260     -0.493870      -198.245       198.245       4965.30       5163.54    
  13  0.425113     -0.855401      -343.367       343.367       4777.95       5121.32    
  14  0.647858     -0.434084      -174.246       174.246       4407.40       4581.65    
  15  0.394937     -0.929029      -372.922       372.922       5223.16       5596.09    
  16  0.452279E-01  -3.09604      -1242.78       1242.78       4773.88       6016.67    
  17  0.954905     -0.461437E-01  -18.5225       18.5225       4919.34       4937.87    
  18  0.362548      -1.01460      -407.270       407.270       5200.90       5608.17    
  19  0.808078     -0.213097      -85.5394       85.5394       4941.39       5026.93    
  20  0.219348      -1.51709      -608.977       608.977       4813.99       5422.97    
  21  0.206981      -1.57513      -632.272       632.272       4736.33       5368.60    
  22  0.719933     -0.328597      -131.902       131.902       5445.82       5577.72    
  23  0.950238     -0.510432E-01  -20.4893       20.4893       5292.23       5312.72    
  24  0.845993     -0.167244      -67.1334       67.1334       4953.55       5020.68    
  25  0.157926      -1.84563      -740.855       740.855       4974.25       5715.10    
  26  0.430020     -0.843924      -338.760       338.760       5796.84       6135.60    
  27  0.624159     -0.471350      -189.205       189.205       4437.73       4626.93    
  28  0.355386      -1.03455      -415.280       415.280       5728.33       6143.61    
  29  0.297353      -1.21284      -486.845       486.845       5247.38       5734.23    
  30  0.185476      -1.68483      -676.308       676.308       6104.52       6780.82    
  31  0.406569     -0.900002      -361.270       361.270       6093.62       6454.89    
  32  0.147052      -1.91697      -769.492       769.492       5990.60       6760.10    
  33  0.205955      -1.58010      -634.267       634.267       5851.16       6485.43    
  34  0.383503     -0.958409      -384.715       384.715       6144.95       6529.67    
  35  0.514677E-01  -2.96680      -1190.91       1190.91       5720.99       6911.90    
  36  0.499194     -0.694760      -278.884       278.884       6123.14       6402.03    
  37  0.103172E-01  -4.57394      -1836.03       1836.03       5561.24       7397.26    
  38  0.470163     -0.754676      -302.935       302.935       5326.05       5628.98    
  39  0.983694     -0.164404E-01  -6.59933       6.59933       5310.48       5317.08    
  40  0.880425     -0.127351      -51.1199       51.1199       6282.74       6333.86    
  41  0.969759     -0.307072E-01  -12.3262       12.3262       5711.06       5723.39    
  42  0.761826E-01  -2.57462      -1033.48       1033.48       6841.78       7875.26    
  43  0.124427      -2.08404      -836.554       836.554       5242.64       6079.19    
  44  0.997702     -0.230032E-02 -0.923373      0.923373       6991.10       6992.03    
  45  0.213939      -1.54206      -619.000       619.000       6526.89       7145.89    
  46  0.471369     -0.752113      -301.906       301.906       6784.70       7086.61    
  47  0.421561E-01  -3.16638      -1271.02       1271.02       5996.15       7267.16    
  48  0.693092     -0.366592      -147.154       147.154       7293.57       7440.72    
  49  0.375157     -0.980409      -393.547       393.547       7388.62       7782.17    
  50  0.285659      -1.25296      -502.950       502.950       7512.56       8015.51    
  51  0.338951      -1.08190      -434.286       434.286       7535.56       7969.85    
  52  0.930127E-01  -2.37502      -953.358       953.358       7593.84       8547.20    
  53  0.840878     -0.173309      -69.5680       69.5680       6959.75       7029.32    
  54  0.384591     -0.955575      -383.578       383.578       7164.78       7548.36    
  55  0.212856      -1.54714      -621.037       621.037       7709.94       8330.97    
  56  0.878356     -0.129704      -52.0645       52.0645       7920.16       7972.22    
  57  0.623236E-01  -2.77542      -1114.08       1114.08       6008.98       7123.06    
  58  0.374221E-02  -5.58808      -2243.11       2243.11       7562.90       9806.01    
  59  0.851985     -0.160186      -64.3005       64.3005       7512.14       7576.44    
  60  0.779613     -0.248958      -99.9342       99.9342       8272.87       8372.80    
  61  0.991658     -0.837700E-02  -3.36261       3.36261       7335.62       7338.98    
  62  0.425290     -0.854985      -343.200       343.200       7536.74       7879.94    
  63  0.613403     -0.488733      -196.183       196.183       7603.86       7800.04    
  64  0.487347E-01  -3.02136      -1212.81       1212.81       4971.06       6183.86    
loop,thermsimp(1:2)       40   306.832       469.894    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       4365.37          0.89          1.07         22.99          0.48          0.05         25.48
Just calling func    0   0         25.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    275       7984.08          0.89          1.06         22.98          0.30          0.04         25.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4365.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       40
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       41
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      274     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -588.071       588.071       4318.74       4906.81    
   2  0.984723     -0.153953E-01  -6.17985       6.17985       4407.40       4413.58    
   3  0.689569     -0.371688      -149.199       149.199       4388.78       4537.98    
   4  0.539532     -0.617054      -247.692       247.692       4437.73       4685.42    
   5  0.103859      -2.26472      -909.084       909.084       4343.46       5252.54    
   6  0.403261     -0.908171      -364.549       364.549       4527.63       4892.18    
   7  0.545138     -0.606716      -243.542       243.542       4682.74       4926.29    
   8  0.211198      -1.55496      -624.178       624.178       4919.34       5543.52    
   9  0.533123     -0.629004      -252.489       252.489       4534.37       4786.86    
  10  0.891214     -0.115171      -46.2307       46.2307       4953.55       4999.78    
  11  0.604806     -0.502847      -201.848       201.848       4941.39       5143.23    
  12  0.176166      -1.73633      -696.981       696.981       4777.95       5474.93    
  13  0.733693     -0.309664      -124.302       124.302       4888.69       5012.99    
  14  0.248504      -1.39230      -558.883       558.883       4965.30       5524.18    
  15  0.183808      -1.69387      -679.935       679.935       4538.53       5218.46    
  16  0.308674E-02  -5.78064      -2320.41       2320.41       5292.23       7612.64    
  17  0.651025     -0.429207      -172.288       172.288       5310.48       5482.77    
  18  0.864353     -0.145775      -58.5154       58.5154       4736.33       4794.85    
  19  0.547352     -0.602664      -241.915       241.915       5051.03       5292.95    
  20  0.631248     -0.460057      -184.672       184.672       4896.42       5081.09    
  21  0.344368E-01  -3.36863      -1352.20       1352.20       4813.99       6166.20    
  22  0.876828     -0.131444      -52.7631       52.7631       5445.82       5498.58    
  23  0.884538     -0.122690      -49.2492       49.2492       5223.16       5272.41    
  24  0.926808     -0.760084E-01  -30.5106       30.5106       5200.90       5231.41    
  25  0.823462     -0.194237      -77.9689       77.9689       5326.05       5404.02    
  26  0.852580     -0.159489      -64.0205       64.0205       4974.25       5038.27    
  27  0.577707     -0.548689      -220.249       220.249       5711.06       5931.31    
  28  0.510093     -0.673163      -270.215       270.215       5247.38       5517.60    
  29  0.890288     -0.116210      -46.6479       46.6479       4723.70       4770.35    
  30  0.304875      -1.18785      -476.816       476.816       4773.88       5250.70    
  31  0.152164      -1.88279      -755.773       755.773       5242.64       5998.41    
  32  0.718687     -0.330329      -132.598       132.598       5796.84       5929.43    
  33  0.488128     -0.717177      -287.882       287.882       5728.33       6016.21    
  34  0.373052     -0.986038      -395.806       395.806       4971.06       5366.86    
  35  0.247351      -1.39695      -560.749       560.749       6282.74       6843.49    
  36  0.532108     -0.630909      -253.254       253.254       6123.14       6376.40    
  37  0.828879E-02  -4.79285      -1923.90       1923.90       6093.62       8017.52    
  38  0.168277      -1.78214      -715.371       715.371       5851.16       6566.53    
  39  0.253216      -1.37351      -551.343       551.343       6144.95       6696.30    
  40  0.458588     -0.779602      -312.940       312.940       5990.60       6303.54    
  41  0.725692     -0.320630      -128.704       128.704       6104.52       6233.22    
  42  0.283543      -1.26039      -505.935       505.935       5720.99       6226.93    
  43  0.798055     -0.225578      -90.5493       90.5493       6991.10       7081.65    
  44  0.805371     -0.216453      -86.8864       86.8864       6959.75       7046.63    
  45  0.580747     -0.543441      -218.143       218.143       6784.70       7002.85    
  46  0.581119     -0.542799      -217.885       217.885       6008.98       6226.87    
  47  0.305196      -1.18680      -476.395       476.395       6526.89       7003.29    
  48  0.905702     -0.990454E-01  -39.7579       39.7579       5996.15       6035.90    
  49  0.265633E-01  -3.62822      -1456.41       1456.41       7335.62       8792.02    
  50  0.114529E-01  -4.46951      -1794.11       1794.11       5561.24       7355.35    
  51  0.990634     -0.941033E-02  -3.77741       3.77741       7293.57       7297.34    
  52  0.609564     -0.495011      -198.703       198.703       7164.78       7363.49    
  53  0.380905     -0.965204      -387.443       387.443       7512.14       7899.58    
  54  0.902244     -0.102870      -41.2932       41.2932       7388.62       7429.92    
  55  0.841859     -0.172142      -69.0998       69.0998       7603.86       7672.96    
  56  0.954561     -0.465036E-01  -18.6670       18.6670       6841.78       6860.45    
  57  0.637314     -0.450492      -180.832       180.832       7536.74       7717.57    
  58  0.224695      -1.49301      -599.310       599.310       7535.56       8134.87    
  59  0.537548     -0.620738      -249.171       249.171       7920.16       8169.33    
  60  0.271295      -1.30455      -523.660       523.660       7512.56       8036.22    
  61  0.524725E-02  -5.25005      -2107.43       2107.43       7709.94       9817.36    
  62  0.194770      -1.63594      -656.682       656.682       8272.87       8929.55    
  63  0.833225E-01  -2.48504      -997.520       997.520       7593.84       8591.36    
  64  0.195984      -1.62972      -654.187       654.187       4365.37       5019.56    
loop,thermsimp(1:2)       41   588.071       6.17985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276       4799.54          0.87          1.07         23.02          0.35          0.04         25.34
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4799.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       41
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       42
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      275     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -1251.14       1251.14       4407.40       5658.55    
   2  0.196215      -1.62854      -653.714       653.714       4388.78       5042.50    
   3  0.501152     -0.690846      -277.313       277.313       4437.73       4715.04    
   4  0.288339      -1.24362      -499.202       499.202       4723.70       5222.90    
   5  0.773132     -0.257306      -103.285       103.285       4534.37       4637.66    
   6  0.417683     -0.873033      -350.445       350.445       4736.33       5086.78    
   7  0.229479      -1.47195      -590.854       590.854       4527.63       5118.48    
   8  0.964123     -0.365367E-01  -14.6662       14.6662       4318.74       4333.40    
   9  0.263782      -1.33263      -534.933       534.933       4682.74       5217.68    
  10  0.102960      -2.27342      -912.573       912.573       4953.55       5866.12    
  11  0.828790     -0.187788      -75.3802       75.3802       4888.69       4964.07    
  12  0.738697     -0.302868      -121.574       121.574       4365.37       4486.94    
  13  0.458595     -0.779589      -312.935       312.935       4974.25       5287.18    
  14  0.905176     -0.996260E-01  -39.9909       39.9909       4896.42       4936.41    
  15  0.147067      -1.91687      -769.450       769.450       4941.39       5710.84    
  16  0.142365      -1.94936      -782.493       782.493       4538.53       5321.02    
  17  0.483147     -0.727435      -292.000       292.000       5200.90       5492.90    
  18  0.640417     -0.445636      -178.883       178.883       4773.88       4952.76    
  19  0.719349     -0.329408      -132.228       132.228       4343.46       4475.68    
  20  0.714234     -0.336545      -135.093       135.093       5223.16       5358.26    
  21  0.825507     -0.191757      -76.9733       76.9733       5051.03       5128.01    
  22  0.155188      -1.86312      -747.874       747.874       4971.06       5718.93    
  23  0.248874      -1.39081      -558.286       558.286       5326.05       5884.33    
  24  0.107953      -2.22606      -893.564       893.564       4777.95       5671.52    
  25  0.349169      -1.05220      -422.364       422.364       5310.48       5732.85    
  26  0.967311     -0.332356E-01  -13.3411       13.3411       5445.82       5459.16    
  27  0.519506     -0.654877      -262.875       262.875       5247.38       5510.26    
  28  0.462662     -0.770758      -309.390       309.390       4965.30       5274.69    
  29  0.811438     -0.208948      -83.8738       83.8738       4919.34       5003.22    
  30  0.394710E-01  -3.23219      -1297.43       1297.43       5796.84       7094.27    
  31  0.482930     -0.727884      -292.180       292.180       5711.06       6003.24    
  32  0.520883     -0.652231      -261.812       261.812       5242.64       5504.45    
  33  0.980978E-01  -2.32179      -931.991       931.991       5728.33       6660.32    
  34  0.626549     -0.467529      -187.671       187.671       5996.15       6183.82    
  35  0.618402     -0.480616      -192.924       192.924       4813.99       5006.92    
  36  0.681438     -0.383550      -153.961       153.961       6008.98       6162.94    
  37  0.816820     -0.202336      -81.2198       81.2198       5720.99       5802.21    
  38  0.578487     -0.547340      -219.708       219.708       6104.52       6324.22    
  39  0.349734      -1.05058      -421.715       421.715       5990.60       6412.32    
  40  0.945672     -0.558596E-01  -22.4226       22.4226       6123.14       6145.57    
  41  0.767680     -0.264382      -106.126       106.126       5851.16       5957.28    
  42  0.122064      -2.10321      -844.250       844.250       6144.95       6989.20    
  43  0.211623      -1.55295      -623.369       623.369       6282.74       6906.11    
  44  0.969992E-01  -2.33305      -936.512       936.512       6841.78       7778.29    
  45  0.877482     -0.130699      -52.4640       52.4640       6784.70       6837.17    
  46  0.448991     -0.800752      -321.430       321.430       6526.89       6848.32    
  47  0.833113     -0.182586      -73.2921       73.2921       6959.75       7033.04    
  48  0.691765     -0.368508      -147.923       147.923       6991.10       7139.03    
  49  0.310664      -1.16904      -469.267       469.267       7293.57       7762.83    
  50  0.422283     -0.862080      -346.048       346.048       5561.24       5907.28    
  51  0.382184E-01  -3.26444      -1310.38       1310.38       7164.78       8475.16    
  52  0.679614E-01  -2.68882      -1079.32       1079.32       7388.62       8467.94    
  53  0.580404     -0.544031      -218.380       218.380       5292.23       5510.61    
  54  0.887981     -0.118805      -47.6895       47.6895       7603.86       7651.55    
  55  0.540749     -0.614799      -246.787       246.787       7536.74       7783.52    
  56  0.749712     -0.288066      -115.633       115.633       7512.14       7627.77    
  57  0.428385     -0.847733      -340.289       340.289       6093.62       6433.91    
  58  0.271790      -1.30272      -522.927       522.927       7512.56       8035.49    
  59  0.317865      -1.14613      -460.068       460.068       7535.56       7995.63    
  60  0.855566     -0.155992      -62.6169       62.6169       7920.16       7982.78    
  61  0.153120      -1.87653      -753.260       753.260       7593.84       8347.10    
  62  0.507684     -0.677896      -272.115       272.115       7335.62       7607.73    
  63  0.270723      -1.30666      -524.506       524.506       8272.87       8797.38    
  64  0.721736     -0.326096      -130.898       130.898       4799.54       4930.43    
loop,thermsimp(1:2)       42   1251.14       653.714    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       7157.88          0.88          1.10         23.01          0.28          0.04         25.30
Just calling func    0   0         25.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7157.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       42
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       43
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      276     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -485.173       485.173       4318.74       4803.91    
   2  0.383173     -0.959268      -385.060       385.060       4343.46       4728.52    
   3  0.386205     -0.951387      -381.897       381.897       4365.37       4747.27    
   4  0.362178      -1.01562      -407.680       407.680       4534.37       4942.05    
   5  0.394462     -0.930233      -373.405       373.405       4437.73       4811.13    
   6  0.883072     -0.124349      -49.9149       49.9149       4799.54       4849.45    
   7  0.571477     -0.559531      -224.602       224.602       4896.42       5121.02    
   8  0.944036     -0.575912E-01  -23.1177       23.1177       4773.88       4797.00    
   9  0.326573      -1.11910      -449.219       449.219       4888.69       5337.91    
  10  0.467297     -0.760791      -305.389       305.389       4919.34       5224.73    
  11  0.828365     -0.188301      -75.5860       75.5860       4813.99       4889.58    
  12  0.826991     -0.189962      -76.2527       76.2527       4388.78       4465.04    
  13  0.675447E-01  -2.69497      -1081.79       1081.79       4736.33       5818.12    
  14  0.924113     -0.789214E-01  -31.6799       31.6799       4527.63       4559.31    
  15  0.810131     -0.210560      -84.5210       84.5210       5051.03       5135.55    
  16  0.410286     -0.890900      -357.617       357.617       4682.74       5040.36    
  17  0.334977      -1.09369      -439.020       439.020       4723.70       5162.72    
  18  0.119017      -2.12849      -854.397       854.397       4965.30       5819.69    
  19  0.447328     -0.804463      -322.920       322.920       4974.25       5297.17    
  20  0.324388E-02  -5.73098      -2300.48       2300.48       4538.53       6839.01    
  21  0.158272      -1.84344      -739.977       739.977       5223.16       5963.14    
  22  0.241219      -1.42205      -570.826       570.826       5445.82       6016.64    
  23  0.259790      -1.34788      -541.054       541.054       5200.90       5741.95    
  24  0.521973     -0.650139      -260.973       260.973       5242.64       5503.61    
  25  0.336335      -1.08965      -437.396       437.396       5247.38       5684.78    
  26  0.642248     -0.442780      -177.737       177.737       5292.23       5469.97    
  27  0.984615     -0.155047E-01  -6.22375       6.22375       4407.40       4413.63    
  28  0.373782     -0.984082      -395.021       395.021       4777.95       5172.97    
  29  0.932479     -0.699087E-01  -28.0621       28.0621       4941.39       4969.45    
  30  0.711360     -0.340577      -136.711       136.711       4971.06       5107.77    
  31  0.315363      -1.15403      -463.240       463.240       5310.48       5773.72    
  32  0.528583     -0.637556      -255.922       255.922       5720.99       5976.91    
  33  0.622355E-01  -2.77683      -1114.65       1114.65       4953.55       6068.20    
  34  0.144849      -1.93206      -775.549       775.549       5326.05       6101.60    
  35  0.868928     -0.140495      -56.3960       56.3960       5561.24       5617.63    
  36  0.243398      -1.41306      -567.216       567.216       5851.16       6418.37    
  37  0.936928     -0.651491E-01  -26.1516       26.1516       5711.06       5737.22    
  38  0.979804E-01  -2.32299      -932.472       932.472       6123.14       7055.61    
  39  0.805773     -0.215953      -86.6856       86.6856       6008.98       6095.67    
  40  0.210751      -1.55708      -625.028       625.028       5996.15       6621.17    
  41  0.497104     -0.698956      -280.568       280.568       6104.52       6385.08    
  42  0.532106     -0.630913      -253.255       253.255       5990.60       6243.86    
  43  0.898420     -0.107117      -42.9980       42.9980       6093.62       6136.62    
  44  0.579370     -0.545814      -219.095       219.095       5728.33       5947.42    
  45  0.191213      -1.65437      -664.080       664.080       6784.70       7448.78    
  46  0.491633     -0.710023      -285.011       285.011       6526.89       6811.90    
  47  0.989123     -0.109370E-01  -4.39023       4.39023       6282.74       6287.13    
  48  0.576855     -0.550164      -220.841       220.841       6144.95       6365.80    
  49  0.133368      -2.01464      -808.698       808.698       6959.75       7768.45    
  50  0.708426     -0.344710      -138.370       138.370       5796.84       5935.21    
  51  0.183469      -1.69571      -680.676       680.676       6991.10       7671.78    
  52  0.951201     -0.500300E-01  -20.0826       20.0826       7335.62       7355.70    
  53  0.380646E-01  -3.26847      -1312.00       1312.00       7512.14       8824.14    
  54  0.575108     -0.553198      -222.060       222.060       7603.86       7825.92    
  55  0.136357E-01  -4.29506      -1724.08       1724.08       7293.57       9017.65    
  56  0.665821E-01  -2.70932      -1087.55       1087.55       6841.78       7929.33    
  57  0.885471     -0.121635      -48.8256       48.8256       7536.74       7585.56    
  58  0.213600E-01  -3.84624      -1543.92       1543.92       7920.16       9464.08    
  59  0.740349     -0.300634      -120.678       120.678       7535.56       7656.24    
  60  0.290679      -1.23553      -495.957       495.957       7512.56       8008.52    
  61  0.895680     -0.110173      -44.2244       44.2244       7593.84       7638.06    
  62  0.956670     -0.442971E-01  -17.7813       17.7813       7388.62       7406.40    
  63  0.196231      -1.62846      -653.682       653.682       7164.78       7818.47    
  64  0.279139      -1.27605      -512.218       512.218       7157.88       7670.10    
loop,thermsimp(1:2)       43   485.173       385.060    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       4464.60          0.89          1.07         22.91          0.62          0.05         25.54
Just calling func    0   0         25.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    279       5416.70          0.88          1.06         22.71          0.77          0.04         25.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4464.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       43
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       44
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      278     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -501.009       501.009       4407.40       4908.41    
   2  0.260243      -1.34614      -540.354       540.354       4388.78       4929.14    
   3  0.646915     -0.435540      -174.830       174.830       4527.63       4702.46    
   4  0.572447     -0.557835      -223.921       223.921       4343.46       4567.38    
   5  0.105907      -2.24520      -901.245       901.245       4365.37       5266.62    
   6  0.693038     -0.366671      -147.185       147.185       4773.88       4921.07    
   7  0.329408      -1.11046      -445.750       445.750       4318.74       4764.49    
   8  0.187221      -1.67546      -672.549       672.549       4437.73       5110.28    
   9  0.545731     -0.605630      -243.106       243.106       4799.54       5042.64    
  10  0.752820     -0.283930      -113.972       113.972       4813.99       4927.96    
  11  0.153542      -1.87378      -752.154       752.154       4534.37       5286.53    
  12  0.400659     -0.914645      -367.148       367.148       4941.39       5308.53    
  13  0.306182      -1.18357      -475.099       475.099       4682.74       5157.84    
  14  0.270957E-01  -3.60838      -1448.44       1448.44       4971.06       6419.50    
  15  0.776765     -0.252618      -101.403       101.403       4896.42       4997.82    
  16  0.711945     -0.339755      -136.381       136.381       5051.03       5187.41    
  17  0.217190      -1.52698      -612.947       612.947       4723.70       5336.65    
  18  0.285226      -1.25447      -503.559       503.559       4777.95       5281.51    
  19  0.348904      -1.05296      -422.669       422.669       4919.34       5342.01    
  20  0.686414     -0.376275      -151.041       151.041       4974.25       5125.29    
  21  0.212825      -1.54729      -621.097       621.097       4888.69       5509.79    
  22  0.501697     -0.689760      -276.877       276.877       5292.23       5569.11    
  23  0.363771      -1.01123      -405.919       405.919       5242.64       5648.55    
  24  0.789273     -0.236642      -94.9908       94.9908       5561.24       5656.23    
  25  0.232884      -1.45721      -584.941       584.941       5247.38       5832.33    
  26  0.754896     -0.281175      -112.866       112.866       5711.06       5823.93    
  27  0.639358     -0.447290      -179.547       179.547       5200.90       5380.45    
  28  0.532505     -0.630163      -252.954       252.954       5310.48       5563.44    
  29  0.759813     -0.274683      -110.261       110.261       4736.33       4846.59    
  30  0.768360     -0.263497      -105.771       105.771       4965.30       5071.07    
  31  0.245116      -1.40602      -564.392       564.392       5796.84       6361.23    
  32  0.672517     -0.396727      -159.250       159.250       5728.33       5887.58    
  33  0.910675     -0.935691E-01  -37.5596       37.5596       5223.16       5260.72    
  34  0.441618     -0.817310      -328.077       328.077       5720.99       6049.07    
  35  0.212980      -1.54656      -620.805       620.805       5445.82       6066.62    
  36  0.471690     -0.751434      -301.633       301.633       4953.55       5255.18    
  37  0.968545     -0.319606E-01  -12.8293       12.8293       6008.98       6021.81    
  38  0.711169     -0.340845      -136.819       136.819       5326.05       5462.87    
  39  0.222170      -1.50431      -603.847       603.847       6093.62       6697.47    
  40  0.896100     -0.109703      -44.0361       44.0361       5990.60       6034.64    
  41  0.898054     -0.107525      -43.1616       43.1616       6282.74       6325.90    
  42  0.981364     -0.188122E-01  -7.55141       7.55141       6144.95       6152.51    
  43  0.238126      -1.43496      -576.006       576.006       6104.52       6680.52    
  44  0.884882     -0.122301      -49.0931       49.0931       5851.16       5900.25    
  45  0.206421      -1.57784      -633.361       633.361       5996.15       6629.51    
  46  0.421939     -0.862894      -346.375       346.375       6526.89       6873.27    
  47  0.334170E-01  -3.39869      -1364.27       1364.27       4538.53       5902.80    
  48  0.940374     -0.614772E-01  -24.6776       24.6776       6123.14       6147.82    
  49  0.119361      -2.12561      -853.241       853.241       7335.62       8188.86    
  50  0.493355     -0.706527      -283.607       283.607       7388.62       7672.23    
  51  0.239498      -1.42921      -573.701       573.701       6784.70       7358.40    
  52  0.779094     -0.249623      -100.201       100.201       7536.74       7636.94    
  53  0.993851     -0.616759E-02  -2.47574       2.47574       7593.84       7596.31    
  54  0.680666     -0.384683      -154.416       154.416       7535.56       7689.98    
  55  0.861145     -0.149492      -60.0076       60.0076       7157.88       7217.89    
  56  0.679030     -0.387090      -155.382       155.382       6991.10       7146.49    
  57  0.568731E-01  -2.86693      -1150.82       1150.82       6959.75       8110.57    
  58  0.342751      -1.07075      -429.811       429.811       7164.78       7594.59    
  59  0.929483     -0.731270E-01  -29.3539       29.3539       7603.86       7633.21    
  60  0.287616      -1.24613      -500.209       500.209       6841.78       7341.99    
  61  0.622582     -0.473881      -190.221       190.221       7512.56       7702.78    
  62  0.449193     -0.800303      -321.250       321.250       7512.14       7833.39    
  63  0.746100     -0.292896      -117.571       117.571       7293.57       7411.14    
  64  0.783595     -0.243863      -97.8891       97.8891       4464.60       4562.49    
loop,thermsimp(1:2)       44   501.009       540.354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280       5563.59          0.88          1.08         22.91          0.48          0.04         25.39
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5563.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       44
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       45
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      279     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -637.503       637.503       4464.60       5102.11    
   2  0.455846E-01  -3.08818      -1239.63       1239.63       4343.46       5583.09    
   3  0.655807     -0.421889      -169.351       169.351       4527.63       4696.98    
   4  0.902989     -0.102045      -40.9620       40.9620       4318.74       4359.70    
   5  0.826012     -0.191146      -76.7278       76.7278       4736.33       4813.06    
   6  0.160871      -1.82715      -733.438       733.438       4407.40       5140.84    
   7  0.516410     -0.660854      -265.274       265.274       4773.88       5039.16    
   8  0.506939     -0.679364      -272.704       272.704       4813.99       5086.70    
   9  0.728359     -0.316962      -127.232       127.232       4388.78       4516.02    
  10  0.453162     -0.791506      -317.719       317.719       4896.42       5214.14    
  11  0.837994     -0.176745      -70.9471       70.9471       4799.54       4870.48    
  12  0.118024      -2.13686      -857.759       857.759       4965.30       5823.06    
  13  0.274030      -1.29452      -519.633       519.633       4437.73       4957.36    
  14  0.402227     -0.910738      -365.580       365.580       4974.25       5339.83    
  15  0.444245     -0.811380      -325.696       325.696       4682.74       5008.44    
  16  0.594880     -0.519396      -208.491       208.491       5051.03       5259.52    
  17  0.548806     -0.600010      -240.850       240.850       4953.55       5194.40    
  18  0.222827      -1.50136      -602.661       602.661       5223.16       5825.83    
  19  0.152541      -1.88032      -754.780       754.780       4365.37       5120.15    
  20  0.816533     -0.202688      -81.3610       81.3610       4777.95       4859.31    
  21  0.525417     -0.643564      -258.333       258.333       4534.37       4792.71    
  22  0.661450     -0.413320      -165.911       165.911       4941.39       5107.30    
  23  0.437535     -0.826598      -331.805       331.805       4723.70       5055.51    
  24  0.464442     -0.766918      -307.849       307.849       4919.34       5227.19    
  25  0.683975     -0.379834      -152.469       152.469       5200.90       5353.37    
  26  0.407919     -0.896688      -359.940       359.940       5326.05       5685.99    
  27  0.934669     -0.675632E-01  -27.1206       27.1206       4888.69       4915.81    
  28  0.866891     -0.142842      -57.3381       57.3381       5310.48       5367.82    
  29  0.145435E-01  -4.23061      -1698.21       1698.21       5292.23       6990.45    
  30  0.514599     -0.664368      -266.684       266.684       5242.64       5509.32    
  31  0.370591     -0.992656      -398.463       398.463       5561.24       5959.70    
  32  0.251726      -1.37941      -553.711       553.711       5711.06       6264.77    
  33  0.959470     -0.413742E-01  -16.6080       16.6080       5247.38       5263.99    
  34  0.344885E-01  -3.36713      -1351.60       1351.60       5728.33       7079.93    
  35  0.348690      -1.05357      -422.915       422.915       5851.16       6274.07    
  36  0.610898     -0.492826      -197.825       197.825       4538.53       4736.35    
  37  0.440567     -0.819693      -329.033       329.033       6008.98       6338.01    
  38  0.340409      -1.07761      -432.563       432.563       5990.60       6423.17    
  39  0.345015E-01  -3.36675      -1351.45       1351.45       5720.99       7072.44    
  40  0.667224     -0.404630      -162.423       162.423       5445.82       5608.24    
  41  0.138336      -1.97807      -794.019       794.019       6123.14       6917.16    
  42  0.412023     -0.886676      -355.921       355.921       6144.95       6500.88    
  43  0.578410     -0.547473      -219.761       219.761       6282.74       6502.50    
  44  0.972817     -0.275594E-01  -11.0626       11.0626       5796.84       5807.90    
  45  0.152341      -1.88163      -755.308       755.308       4971.06       5726.36    
  46  0.764264     -0.268842      -107.916       107.916       5996.15       6104.06    
  47  0.898082E-01  -2.41008      -967.431       967.431       6104.52       7071.95    
  48  0.205097      -1.58427      -635.943       635.943       6093.62       6729.56    
  49  0.249611E-01  -3.69044      -1481.38       1481.38       6526.89       8008.27    
  50  0.999211     -0.789000E-03 -0.316713      0.316713       6991.10       6991.42    
  51  0.622898E-01  -2.77596      -1114.30       1114.30       7157.88       8272.18    
  52  0.588779     -0.529705      -212.629       212.629       6841.78       7054.41    
  53  0.395562     -0.927447      -372.287       372.287       6784.70       7156.99    
  54  0.213371      -1.54472      -620.069       620.069       7293.57       7913.63    
  55  0.801544     -0.221215      -88.7982       88.7982       7164.78       7253.58    
  56  0.392036     -0.936401      -375.881       375.881       7593.84       7969.72    
  57  0.504835     -0.683524      -274.374       274.374       7603.86       7878.23    
  58  0.389514     -0.942856      -378.472       378.472       7536.74       7915.21    
  59  0.694006     -0.365275      -146.625       146.625       7388.62       7535.25    
  60  0.220113      -1.51361      -607.580       607.580       7535.56       8143.14    
  61  0.548334     -0.600870      -241.196       241.196       7512.56       7753.76    
  62  0.490082     -0.713183      -286.279       286.279       7512.14       7798.42    
  63  0.315187      -1.15459      -463.465       463.465       6959.75       7423.21    
  64  0.454028     -0.789596      -316.952       316.952       5563.59       5880.55    
loop,thermsimp(1:2)       45   637.503       1239.63    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       8210.84          0.88          1.07         23.02          0.65          0.04         25.66
Just calling func    0   0         25.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    8210.8        2.846     0.4965      5.781     -100.0    -0.4035    
                      -1.355      1.776     -100.0      3.111    -0.7288E-01
                      0.2747     0.8500      2.400      0.000      0.000    
                      -3.235      0.000      0.000      0.000     -1.221    

                      -2.500     0.1317E+05 0.1447E+05 -1525.     -5383.    
                      -2.000    -0.8044     0.1710     -2.981     -1.560    
                      -11.60     -2.375      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.4437     0.8200E-01  0.000    -0.3138    
                      0.3436    -0.4636     0.3027E-02 0.2718     0.8747E-01

                      -1.141     -2.401      0.000     0.4943     0.5557    
                      0.8541E-01 -1.489     0.2763     0.2163    -0.8521    
                     -0.2737    -0.1455     0.4171    -0.9412      0.000    

                      -1.278    -0.4483      3.106     -2.686      0.000    
                       0.000      9.582      7.825     -7485.     -4.000    
                       1.503    -0.3312      9.380      8.531     -4294.    

                      -4.000      1.604      1.544      9.724      8.700    
                     -0.1330E+05 -4.000     0.3646      1.416      9.339    
                       9.338    -0.1451E+05 -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   8210.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       45
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       46
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      280     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -92.3310       92.3310       4318.74       4411.07    
   2  0.338444      -1.08340      -434.886       434.886       4388.78       4823.67    
   3  0.563800     -0.573055      -230.030       230.030       4527.63       4757.66    
   4  0.295284      -1.21982      -489.647       489.647       4538.53       5028.18    
   5  0.506481     -0.680269      -273.067       273.067       4534.37       4807.44    
   6  0.345803      -1.06189      -426.252       426.252       4736.33       5162.58    
   7  0.741641     -0.298890      -119.977       119.977       4777.95       4897.93    
   8  0.182310      -1.70204      -683.219       683.219       4799.54       5482.76    
   9  0.315187      -1.15459      -463.464       463.464       4888.69       5352.15    
  10  0.598844     -0.512755      -205.825       205.825       4437.73       4643.55    
  11  0.659119     -0.416852      -167.329       167.329       4682.74       4850.07    
  12  0.247481      -1.39642      -560.539       560.539       4773.88       5334.42    
  13  0.255298      -1.36532      -548.055       548.055       4723.70       5271.76    
  14  0.876488     -0.131833      -52.9190       52.9190       4813.99       4866.91    
  15  0.358010      -1.02719      -412.327       412.327       4464.60       4876.93    
  16  0.317480      -1.14734      -460.555       460.555       4941.39       5401.94    
  17  0.153422      -1.87456      -752.469       752.469       4365.37       5117.84    
  18  0.296162      -1.21685      -488.456       488.456       4407.40       4895.86    
  19  0.629760     -0.462417      -185.619       185.619       4953.55       5139.17    
  20  0.458345E-01  -3.08272      -1237.44       1237.44       4896.42       6133.86    
  21  0.209534      -1.56287      -627.351       627.351       4919.34       5546.69    
  22  0.490210E-01  -3.01551      -1210.46       1210.46       5051.03       6261.49    
  23  0.144817      -1.93229      -775.640       775.640       5247.38       6023.03    
  24  0.764061     -0.269107      -108.023       108.023       4974.25       5082.27    
  25  0.158664      -1.84097      -738.984       738.984       5200.90       5939.89    
  26  0.242818      -1.41544      -568.173       568.173       5310.48       5878.66    
  27  0.779950     -0.248525      -99.7605       99.7605       5242.64       5342.40    
  28  0.763580     -0.269737      -108.275       108.275       4343.46       4451.73    
  29  0.817639     -0.201335      -80.8178       80.8178       5445.82       5526.64    
  30  0.656802     -0.420373      -168.742       168.742       5326.05       5494.79    
  31  0.202192      -1.59854      -641.670       641.670       4971.06       5612.73    
  32  0.469647     -0.755773      -303.375       303.375       5796.84       6100.21    
  33  0.107456      -2.23067      -895.414       895.414       4965.30       5860.71    
  34  0.709118     -0.343734      -137.978       137.978       5223.16       5361.14    
  35  0.988480     -0.115868E-01  -4.65108       4.65108       5563.59       5568.25    
  36  0.645173     -0.438236      -175.913       175.913       5561.24       5737.15    
  37  0.583143     -0.539322      -216.490       216.490       5996.15       6212.64    
  38  0.276552E-01  -3.58794      -1440.24       1440.24       5711.06       7151.30    
  39  0.560517     -0.578896      -232.375       232.375       5851.16       6083.53    
  40  0.292779      -1.22834      -493.067       493.067       6008.98       6502.05    
  41  0.486207     -0.721121      -289.465       289.465       5990.60       6280.07    
  42  0.379142E-01  -3.27243      -1313.59       1313.59       6144.95       7458.54    
  43  0.459895     -0.776757      -311.798       311.798       6282.74       6594.53    
  44  0.810771     -0.209769      -84.2035       84.2035       6093.62       6177.82    
  45  0.189138      -1.66528      -668.459       668.459       6123.14       6791.60    
  46  0.509870     -0.673599      -270.390       270.390       5292.23       5562.62    
  47  0.468020E-01  -3.06183      -1229.05       1229.05       6991.10       8220.15    
  48  0.568404     -0.564922      -226.766       226.766       6841.78       7068.55    
  49  0.891250     -0.115130      -46.2145       46.2145       6104.52       6150.73    
  50  0.415261     -0.878849      -352.779       352.779       5720.99       6073.77    
  51  0.714019     -0.336846      -135.213       135.213       5728.33       5863.54    
  52  0.606207     -0.500534      -200.919       200.919       6784.70       6985.62    
  53  0.106011      -2.24421      -900.850       900.850       7164.78       8065.63    
  54  0.330348      -1.10761      -444.606       444.606       6959.75       7404.35    
  55  0.773475     -0.256862      -103.107       103.107       7388.62       7491.73    
  56  0.721841     -0.325951      -130.840       130.840       7512.56       7643.40    
  57  0.714980     -0.335501      -134.674       134.674       7512.14       7646.81    
  58  0.616486     -0.483719      -194.170       194.170       7603.86       7798.03    
  59  0.885098     -0.122057      -48.9948       48.9948       7293.57       7342.56    
  60  0.463686     -0.768549      -308.504       308.504       7536.74       7845.24    
  61  0.912951     -0.910727E-01  -36.5575       36.5575       7593.84       7630.40    
  62  0.819534     -0.199020      -79.8886       79.8886       6526.89       6606.78    
  63  0.771708     -0.259149      -104.025       104.025       7535.56       7639.58    
  64  0.812091E-03  -7.11590      -2856.40       2856.40       8210.84       11067.2    
loop,thermsimp(1:2)       46   92.3310       434.886    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282       7157.88          0.89          1.09         23.01          0.35          0.04         25.38
Just calling func    0   0         25.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7157.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       46
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       47
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      281     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -171.372       171.372       4318.74       4490.11    
   2  0.474910     -0.744630      -298.902       298.902       4343.46       4642.36    
   3  0.125725      -2.07366      -832.388       832.388       4437.73       5270.12    
   4  0.950967     -0.502756E-01  -20.1811       20.1811       4527.63       4547.81    
   5  0.562475     -0.575409      -230.975       230.975       4534.37       4765.35    
   6  0.728528     -0.316729      -127.138       127.138       4388.78       4515.92    
   7  0.326058      -1.12068      -449.853       449.853       4682.74       5132.60    
   8  0.460979     -0.774402      -310.853       310.853       4813.99       5124.85    
   9  0.186861      -1.67739      -673.323       673.323       4464.60       5137.93    
  10  0.737773     -0.304119      -122.077       122.077       4407.40       4529.48    
  11  0.254524      -1.36836      -549.274       549.274       4777.95       5327.23    
  12  0.475390     -0.743621      -298.497       298.497       4538.53       4837.03    
  13  0.783107     -0.244486      -98.1391       98.1391       4974.25       5072.39    
  14  0.615536     -0.485261      -194.789       194.789       4365.37       4560.16    
  15  0.600710E-01  -2.81223      -1128.86       1128.86       4953.55       6082.41    
  16  0.834417     -0.181022      -72.6643       72.6643       4736.33       4808.99    
  17  0.270355      -1.30802      -525.053       525.053       4723.70       5248.75    
  18  0.408387     -0.895540      -359.479       359.479       4773.88       5133.36    
  19  0.248286      -1.39318      -559.235       559.235       5242.64       5801.87    
  20  0.586808E-01  -2.83564      -1138.26       1138.26       4888.69       6026.95    
  21  0.747050     -0.291623      -117.061       117.061       5223.16       5340.23    
  22  0.261869E-01  -3.64250      -1462.14       1462.14       4941.39       6403.52    
  23  0.495813     -0.701557      -281.612       281.612       4799.54       5081.15    
  24  0.600032     -0.510772      -205.029       205.029       5326.05       5531.08    
  25  0.936456     -0.656531E-01  -26.3539       26.3539       5445.82       5472.17    
  26  0.583260     -0.539121      -216.409       216.409       4919.34       5135.75    
  27  0.994266     -0.575021E-02  -2.30820       2.30820       5292.23       5294.54    
  28  0.149755      -1.89876      -762.180       762.180       5563.59       6325.77    
  29  0.751239     -0.286032      -114.816       114.816       4971.06       5085.87    
  30  0.703931     -0.351075      -140.925       140.925       5561.24       5702.16    
  31  0.998476     -0.152564E-02 -0.612408      0.612408       4965.30       4965.91    
  32  0.501495     -0.690161      -277.038       277.038       5728.33       6005.36    
  33  0.446468     -0.806387      -323.692       323.692       5310.48       5634.18    
  34  0.321376      -1.13514      -455.659       455.659       5200.90       5656.56    
  35  0.850901     -0.161459      -64.8115       64.8115       5247.38       5312.20    
  36  0.975881     -0.244142E-01  -9.80011       9.80011       5720.99       5730.79    
  37  0.386316     -0.951100      -381.781       381.781       5851.16       6232.94    
  38  0.782734     -0.244962      -98.3304       98.3304       5796.84       5895.17    
  39  0.142678      -1.94716      -781.612       781.612       4896.42       5678.03    
  40  0.509914     -0.673514      -270.355       270.355       6104.52       6374.87    
  41  0.211111      -1.55537      -624.342       624.342       6093.62       6717.96    
  42  0.212538      -1.54864      -621.639       621.639       5996.15       6617.79    
  43  0.889982     -0.116555      -46.7862       46.7862       5051.03       5097.82    
  44  0.769070     -0.262573      -105.400       105.400       5990.60       6096.00    
  45  0.792434     -0.232646      -93.3865       93.3865       6008.98       6102.37    
  46  0.250220E-01  -3.68800      -1480.40       1480.40       6282.74       7763.14    
  47  0.190304      -1.65913      -665.993       665.993       6526.89       7192.88    
  48  0.579595     -0.545425      -218.939       218.939       6123.14       6342.08    
  49  0.373376     -0.985170      -395.457       395.457       6784.70       7180.16    
  50  0.933620E-01  -2.37127      -951.853       951.853       6841.78       7793.63    
  51  0.628243     -0.464828      -186.587       186.587       5711.06       5897.65    
  52  0.737857     -0.304005      -122.031       122.031       7293.57       7415.60    
  53  0.430189     -0.843530      -338.602       338.602       6959.75       7298.35    
  54  0.957397     -0.435375E-01  -17.4764       17.4764       6144.95       6162.43    
  55  0.388126     -0.946424      -379.904       379.904       7388.62       7768.53    
  56  0.989586     -0.104686E-01  -4.20222       4.20222       7593.84       7598.04    
  57  0.754642     -0.281511      -113.002       113.002       7535.56       7648.56    
  58  0.404023E-01  -3.20887      -1288.07       1288.07       7512.56       8800.63    
  59  0.298112      -1.21029      -485.822       485.822       7512.14       7997.96    
  60  0.915557     -0.882223E-01  -35.4134       35.4134       7603.86       7639.27    
  61  0.205580E-01  -3.88450      -1559.28       1559.28       7536.74       9096.02    
  62  0.883530     -0.123830      -49.7069       49.7069       7164.78       7214.49    
  63  0.776014     -0.253585      -101.792       101.792       6991.10       7092.89    
  64  0.755316     -0.280619      -112.643       112.643       7157.88       7270.53    
loop,thermsimp(1:2)       47   171.372       298.902    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       4450.21          0.88          1.08         22.96          0.41          0.04         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284      18240.08          0.89          1.07         22.98          0.27          0.05         25.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4450.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       47
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       48
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      283     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -462.414       462.414       4318.74       4781.15    
   2  0.452730     -0.792459      -318.101       318.101       4388.78       4706.89    
   3  0.463916     -0.768051      -308.304       308.304       4407.40       4715.71    
   4  0.531172E-01  -2.93526      -1178.24       1178.24       4527.63       5705.87    
   5  0.933113     -0.692290E-01  -27.7892       27.7892       4365.37       4393.16    
   6  0.107612      -2.22922      -894.833       894.833       4343.46       5238.29    
   7  0.228017      -1.47833      -593.419       593.419       4534.37       5127.79    
   8  0.766526     -0.265887      -106.730       106.730       4736.33       4843.06    
   9  0.676418     -0.390944      -156.929       156.929       4538.53       4695.46    
  10  0.220696      -1.51097      -606.519       606.519       4965.30       5571.82    
  11  0.959946E-01  -2.34346      -940.691       940.691       4974.25       5914.94    
  12  0.570655     -0.560971      -225.180       225.180       4799.54       5024.72    
  13  0.736426     -0.305947      -122.810       122.810       4971.06       5093.87    
  14  0.966377     -0.342013E-01  -13.7288       13.7288       5051.03       5064.76    
  15  0.797662     -0.226070      -90.7469       90.7469       4813.99       4904.74    
  16  0.413688     -0.882643      -354.302       354.302       4682.74       5037.05    
  17  0.200670      -1.60609      -644.702       644.702       4773.88       5418.58    
  18  0.843958E-01  -2.47224      -992.382       992.382       4919.34       5911.73    
  19  0.375580     -0.979284      -393.095       393.095       4464.60       4857.70    
  20  0.968669     -0.318322E-01  -12.7778       12.7778       4723.70       4736.48    
  21  0.379263     -0.969525      -389.177       389.177       4437.73       4826.91    
  22  0.421746     -0.863352      -346.558       346.558       5292.23       5638.79    
  23  0.639909     -0.446429      -179.201       179.201       5247.38       5426.59    
  24  0.549878     -0.598059      -240.067       240.067       4777.95       5018.02    
  25  0.226469      -1.48515      -596.154       596.154       5223.16       5819.32    
  26  0.547044E-02  -5.20840      -2090.70       2090.70       5445.82       7536.52    
  27  0.372808     -0.986692      -396.068       396.068       5326.05       5722.12    
  28  0.406819E-01  -3.20197      -1285.30       1285.30       5310.48       6595.79    
  29  0.664564     -0.408624      -164.026       164.026       5200.90       5364.93    
  30  0.708700     -0.344323      -138.215       138.215       4896.42       5034.64    
  31  0.863329     -0.146959      -58.9908       58.9908       5561.24       5620.23    
  32  0.406109     -0.901134      -361.724       361.724       5720.99       6082.72    
  33  0.101947      -2.28330      -916.541       916.541       5242.64       6159.18    
  34  0.660574     -0.414646      -166.443       166.443       5796.84       5963.28    
  35  0.839002     -0.175542      -70.4646       70.4646       5711.06       5781.53    
  36  0.735312E-01  -2.61005      -1047.70       1047.70       5728.33       6776.03    
  37  0.559917     -0.579967      -232.805       232.805       4888.69       5121.49    
  38  0.922004     -0.812055E-01  -32.5967       32.5967       4953.55       4986.14    
  39  0.891471     -0.114882      -46.1150       46.1150       5990.60       6036.72    
  40  0.489346     -0.714686      -286.883       286.883       6008.98       6295.86    
  41  0.583196     -0.539231      -216.453       216.453       6144.95       6361.41    
  42  0.989235     -0.108230E-01  -4.34448       4.34448       5851.16       5855.50    
  43  0.844741     -0.168725      -67.7282       67.7282       5563.59       5631.32    
  44  0.734982     -0.307909      -123.598       123.598       6123.14       6246.74    
  45  0.913246     -0.907495E-01  -36.4278       36.4278       6104.52       6140.94    
  46  0.605096     -0.502369      -201.656       201.656       4941.39       5143.04    
  47  0.623739     -0.472024      -189.475       189.475       5996.15       6185.62    
  48  0.780990     -0.247193      -99.2260       99.2260       6093.62       6192.85    
  49  0.615662E-01  -2.78764      -1118.99       1118.99       6991.10       8110.09    
  50  0.646443E-02  -5.04144      -2023.69       2023.69       6784.70       8808.39    
  51  0.848055     -0.164809      -66.1562       66.1562       6526.89       6593.05    
  52  0.740886     -0.299909      -120.386       120.386       7164.78       7285.17    
  53  0.350650      -1.04797      -420.665       420.665       7157.88       7578.55    
  54  0.873328     -0.135444      -54.3687       54.3687       6959.75       7014.12    
  55  0.353091      -1.04103      -417.880       417.880       7293.57       7711.45    
  56  0.867938     -0.141635      -56.8539       56.8539       7593.84       7650.69    
  57  0.746706     -0.292084      -117.246       117.246       7603.86       7721.10    
  58  0.701641     -0.354333      -142.233       142.233       7535.56       7677.79    
  59  0.454866     -0.787753      -316.212       316.212       6282.74       6598.95    
  60  0.172086      -1.75976      -706.386       706.386       7388.62       8095.01    
  61  0.633774     -0.456062      -183.068       183.068       6841.78       7024.85    
  62  0.321574      -1.13453      -455.411       455.411       7512.14       7967.55    
  63  0.171612      -1.76252      -707.493       707.493       7512.56       8220.05    
  64  0.417516     -0.873431      -350.604       350.604       4450.21       4800.82    
loop,thermsimp(1:2)       48   462.414       318.101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       5333.71          0.88          1.09         23.02          0.26          0.04         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5333.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       48
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       49
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      284     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02  -3.41245       3.41245       4365.37       4368.78    
   2  0.120199      -2.11861      -850.430       850.430       4538.53       5388.96    
   3  0.825835     -0.191360      -76.8139       76.8139       4388.78       4465.60    
   4  0.769690     -0.261767      -105.076       105.076       4407.40       4512.48    
   5  0.206534      -1.57729      -633.141       633.141       4723.70       5356.84    
   6  0.435455     -0.831363      -333.718       333.718       4318.74       4652.45    
   7  0.408718     -0.894731      -359.154       359.154       4450.21       4809.37    
   8  0.504170E-01  -2.98743      -1199.18       1199.18       4437.73       5636.91    
   9  0.943874     -0.577631E-01  -23.1867       23.1867       4736.33       4759.52    
  10  0.161493      -1.82330      -731.890       731.890       4464.60       5196.49    
  11  0.248560      -1.39207      -558.792       558.792       4813.99       5372.78    
  12  0.952734     -0.484195E-01  -19.4361       19.4361       4953.55       4972.98    
  13  0.349224      -1.05204      -422.301       422.301       4777.95       5200.25    
  14  0.245013      -1.40644      -564.561       564.561       4799.54       5364.10    
  15  0.713805     -0.337146      -135.334       135.334       4896.42       5031.75    
  16  0.206995      -1.57506      -632.246       632.246       4682.74       5314.99    
  17  0.573984     -0.555154      -222.845       222.845       5051.03       5273.88    
  18  0.791297     -0.234082      -93.9631       93.9631       4971.06       5065.02    
  19  0.599323     -0.511955      -205.504       205.504       4888.69       5094.19    
  20  0.632893     -0.457454      -183.627       183.627       4534.37       4718.00    
  21  0.920472     -0.828688E-01  -33.2644       33.2644       4941.39       4974.65    
  22  0.650695     -0.429713      -172.491       172.491       4343.46       4515.95    
  23  0.759327     -0.275322      -110.517       110.517       5200.90       5311.42    
  24  0.547563     -0.602278      -241.761       241.761       4773.88       5015.64    
  25  0.375945     -0.978312      -392.705       392.705       5247.38       5640.09    
  26  0.436593     -0.828753      -332.670       332.670       4965.30       5297.97    
  27  0.226348      -1.48568      -596.367       596.367       5561.24       6157.60    
  28  0.889061     -0.117589      -47.2015       47.2015       5563.59       5610.80    
  29  0.294563      -1.22226      -490.628       490.628       5292.23       5782.86    
  30  0.760606     -0.273640      -109.842       109.842       4527.63       4637.47    
  31  0.131934      -2.02545      -813.037       813.037       5326.05       6139.08    
  32  0.150887      -1.89123      -759.158       759.158       5711.06       6470.22    
  33  0.108814      -2.21811      -890.373       890.373       5223.16       6113.54    
  34  0.392982     -0.933991      -374.914       374.914       5851.16       6226.07    
  35  0.524209     -0.645865      -259.257       259.257       4919.34       5178.60    
  36  0.779329     -0.249322      -100.080       100.080       4974.25       5074.33    
  37  0.684136     -0.379599      -152.375       152.375       5796.84       5949.21    
  38  0.898629     -0.106885      -42.9049       42.9049       5990.60       6033.51    
  39  0.885947E-01  -2.42368      -972.892       972.892       5720.99       6693.88    
  40  0.865042     -0.144977      -58.1954       58.1954       6104.52       6162.71    
  41  0.953799     -0.473027E-01  -18.9878       18.9878       5242.64       5261.62    
  42  0.264945      -1.32823      -533.167       533.167       5996.15       6529.31    
  43  0.931660     -0.707875E-01  -28.4148       28.4148       6093.62       6122.03    
  44  0.273150      -1.29773      -520.924       520.924       6123.14       6644.07    
  45  0.773196     -0.257223      -103.252       103.252       6008.98       6112.23    
  46  0.936342     -0.657743E-01  -26.4025       26.4025       6144.95       6171.36    
  47  0.367272      -1.00165      -402.074       402.074       6526.89       6928.97    
  48  0.970907     -0.295243E-01  -11.8513       11.8513       5310.48       5322.34    
  49  0.722669     -0.324804      -130.380       130.380       6282.74       6413.12    
  50  0.247966      -1.39446      -559.753       559.753       5728.33       6288.08    
  51  0.730821     -0.313587      -125.877       125.877       6959.75       7085.63    
  52  0.379134     -0.969864      -389.314       389.314       6841.78       7231.09    
  53  0.326173      -1.12033      -449.711       449.711       7164.78       7614.49    
  54  0.555872     -0.587218      -235.715       235.715       5445.82       5681.53    
  55  0.600838     -0.509431      -204.491       204.491       7157.88       7362.37    
  56  0.714504     -0.336167      -134.941       134.941       7593.84       7728.78    
  57  0.190775      -1.65666      -665.001       665.001       7535.56       8200.56    
  58  0.206210      -1.57886      -633.770       633.770       7293.57       7927.34    
  59  0.855348     -0.156247      -62.7193       62.7193       7603.86       7666.58    
  60  0.886753     -0.120189      -48.2450       48.2450       7512.14       7560.39    
  61  0.391830     -0.936926      -376.092       376.092       7388.62       7764.72    
  62  0.986898     -0.131885E-01  -5.29401       5.29401       6991.10       6996.40    
  63  0.153388      -1.87479      -752.558       752.558       7512.56       8265.12    
  64  0.416027     -0.877006      -352.039       352.039       5333.71       5685.75    
loop,thermsimp(1:2)       49   3.41245       850.430    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       4140.99          0.88          1.08         22.99          0.32          0.05         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287       8719.02          0.88          1.06         22.99          0.24          0.05         25.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4140.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       49
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       50
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      286     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -1882.41       1882.41       4365.37       6247.78    
   2  0.902150     -0.102974      -41.3349       41.3349       4388.78       4430.12    
   3  0.375868     -0.978517      -392.787       392.787       4407.40       4800.19    
   4  0.136549E-01  -4.29366      -1723.52       1723.52       4343.46       6066.98    
   5  0.948329     -0.530533E-01  -21.2962       21.2962       4527.63       4548.92    
   6  0.489379E-01  -3.01720      -1211.14       1211.14       4318.74       5529.87    
   7  0.319400      -1.14131      -458.134       458.134       4534.37       4992.51    
   8  0.748008     -0.290342      -116.546       116.546       4736.33       4852.88    
   9  0.468015     -0.759255      -304.773       304.773       4450.21       4754.99    
  10  0.467420     -0.760527      -305.284       305.284       4953.55       5258.83    
  11  0.345085      -1.06396      -427.086       427.086       4941.39       5368.47    
  12  0.598981     -0.512526      -205.733       205.733       4773.88       4979.61    
  13  0.231496      -1.46319      -587.340       587.340       4896.42       5483.76    
  14  0.685496     -0.377613      -151.578       151.578       4971.06       5122.63    
  15  0.225803      -1.48809      -597.335       597.335       4974.25       5571.58    
  16  0.744991E-01  -2.59697      -1042.45       1042.45       4888.69       5931.14    
  17  0.436777     -0.828332      -332.501       332.501       4919.34       5251.84    
  18  0.241074      -1.42265      -571.067       571.067       4464.60       5035.67    
  19  0.728071     -0.317357      -127.391       127.391       4777.95       4905.34    
  20  0.228500      -1.47622      -592.570       592.570       5242.64       5835.21    
  21  0.423678     -0.858781      -344.724       344.724       5051.03       5395.76    
  22  0.812855     -0.207202      -83.1730       83.1730       4965.30       5048.47    
  23  0.810546     -0.210047      -84.3151       84.3151       5200.90       5285.22    
  24  0.113500      -2.17595      -873.449       873.449       4682.74       5556.19    
  25  0.197385      -1.62260      -651.329       651.329       5310.48       5961.81    
  26  0.101018      -2.29246      -920.218       920.218       4723.70       5643.92    
  27  0.857009E-01  -2.45689      -986.222       986.222       4799.54       5785.76    
  28  0.693668     -0.365762      -146.821       146.821       4813.99       4960.81    
  29  0.705918     -0.348256      -139.794       139.794       4538.53       4678.32    
  30  0.309793      -1.17185      -470.393       470.393       5563.59       6033.99    
  31  0.144843      -1.93210      -775.566       775.566       4437.73       5213.29    
  32  0.412916     -0.884511      -355.052       355.052       5247.38       5602.44    
  33  0.916661     -0.870180E-01  -34.9299       34.9299       5445.82       5480.75    
  34  0.933384E-01  -2.37152      -951.954       951.954       5333.71       6285.67    
  35  0.937330     -0.647200E-01  -25.9793       25.9793       5292.23       5318.21    
  36  0.958012     -0.428952E-01  -17.2186       17.2186       5796.84       5814.06    
  37  0.692877E-01  -2.66949      -1071.56       1071.56       5990.60       7062.16    
  38  0.228520E-01  -3.77872      -1516.82       1516.82       6008.98       7525.80    
  39  0.188135      -1.67060      -670.595       670.595       5223.16       5893.76    
  40  0.122595E-01  -4.40146      -1766.79       1766.79       6093.62       7860.41    
  41  0.776693     -0.252710      -101.441       101.441       5326.05       5427.49    
  42  0.571957     -0.558691      -224.265       224.265       5561.24       5785.50    
  43  0.313016      -1.16150      -466.239       466.239       6104.52       6570.75    
  44  0.512360     -0.668728      -268.434       268.434       6144.95       6413.39    
  45  0.874954     -0.133584      -53.6220       53.6220       5851.16       5904.78    
  46  0.617920     -0.481397      -193.238       193.238       5728.33       5921.56    
  47  0.529196     -0.636396      -255.456       255.456       6282.74       6538.19    
  48  0.389261E-02  -5.54867      -2227.30       2227.30       5711.06       7938.36    
  49  0.323386E-01  -3.43149      -1377.44       1377.44       5996.15       7373.58    
  50  0.900641     -0.104648      -42.0069       42.0069       6123.14       6165.15    
  51  0.872638     -0.136235      -54.6861       54.6861       5720.99       5775.68    
  52  0.965349     -0.352660E-01  -14.1561       14.1561       6526.89       6541.05    
  53  0.679490     -0.386413      -155.110       155.110       6991.10       7146.21    
  54  0.101129      -2.29136      -919.777       919.777       6959.75       7879.53    
  55  0.885746     -0.121326      -48.7013       48.7013       6841.78       6890.48    
  56  0.307763      -1.17843      -473.033       473.033       7157.88       7630.92    
  57  0.978164     -0.220781E-01  -8.86239       8.86239       7512.14       7521.00    
  58  0.678582     -0.387750      -155.647       155.647       7164.78       7320.43    
  59  0.573317     -0.556317      -223.312       223.312       7603.86       7827.17    
  60  0.541891     -0.612690      -245.940       245.940       7593.84       7839.78    
  61  0.110478      -2.20294      -884.283       884.283       7388.62       8272.91    
  62  0.125637      -2.07436      -832.668       832.668       7293.57       8126.23    
  63  0.580733     -0.543464      -218.152       218.152       7535.56       7753.71    
  64  0.261777      -1.34026      -537.995       537.995       4140.99       4678.99    
loop,thermsimp(1:2)       50   1882.41       41.3349    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288       4439.95          0.88          1.08         23.01          0.33          0.05         25.34
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289       4989.90          0.90          1.07         23.02          0.25          0.04         25.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4439.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       50
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       51
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      288     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -40.7739       40.7739       4388.78       4429.56    
   2  0.808902     -0.212077      -85.1301       85.1301       4527.63       4612.76    
   3  0.762147     -0.271616      -109.029       109.029       4538.53       4647.56    
   4  0.287851      -1.24531      -499.881       499.881       4140.99       4640.87    
   5  0.212418      -1.54920      -621.865       621.865       4450.21       5072.08    
   6  0.380717     -0.965699      -387.642       387.642       4407.40       4795.05    
   7  0.877795     -0.130342      -52.3206       52.3206       4736.33       4788.65    
   8  0.836834     -0.178130      -71.5031       71.5031       4777.95       4849.46    
   9  0.435183     -0.831988      -333.969       333.969       4813.99       5147.96    
  10  0.900166     -0.105177      -42.2190       42.2190       4773.88       4816.10    
  11  0.175095      -1.74242      -699.427       699.427       4534.37       5233.80    
  12  0.322232      -1.13248      -454.591       454.591       4464.60       4919.19    
  13  0.706662     -0.347203      -139.371       139.371       4965.30       5104.67    
  14  0.494297     -0.704618      -282.841       282.841       4971.06       5253.90    
  15  0.324383      -1.12583      -451.920       451.920       4437.73       4889.65    
  16  0.777122     -0.252157      -101.219       101.219       4919.34       5020.56    
  17  0.499054E-01  -2.99763      -1203.28       1203.28       4953.55       6156.83    
  18  0.489193E-01  -3.01758      -1211.29       1211.29       5200.90       6412.19    
  19  0.480140     -0.733678      -294.506       294.506       5292.23       5586.74    
  20  0.914126     -0.897865E-01  -36.0412       36.0412       4941.39       4977.43    
  21  0.613008     -0.489378      -196.441       196.441       5051.03       5247.47    
  22  0.470573     -0.753804      -302.585       302.585       5326.05       5628.63    
  23  0.614279     -0.487307      -195.610       195.610       5445.82       5641.43    
  24  0.410529     -0.890308      -357.379       357.379       4896.42       5253.80    
  25  0.582759     -0.539981      -216.754       216.754       4318.74       4535.49    
  26  0.422753E-01  -3.16355      -1269.88       1269.88       4682.74       5952.63    
  27  0.717044     -0.332618      -133.516       133.516       4974.25       5107.77    
  28  0.420765     -0.865682      -347.494       347.494       5247.38       5594.88    
  29  0.801392     -0.221405      -88.8742       88.8742       4723.70       4812.58    
  30  0.426188     -0.852875      -342.353       342.353       5720.99       6063.35    
  31  0.338881      -1.08211      -434.369       434.369       5561.24       5995.61    
  32  0.398160     -0.920902      -369.660       369.660       4799.54       5169.20    
  33  0.938837     -0.631132E-01  -25.3343       25.3343       5796.84       5822.17    
  34  0.411860E-01  -3.18966      -1280.36       1280.36       5242.64       6523.00    
  35  0.180703      -1.71090      -686.774       686.774       5223.16       5909.94    
  36  0.617012     -0.482867      -193.828       193.828       5851.16       6044.99    
  37  0.788612     -0.237480      -95.3271       95.3271       5728.33       5823.65    
  38  0.381719     -0.963071      -386.587       386.587       4888.69       5275.28    
  39  0.376038     -0.978064      -392.605       392.605       5310.48       5703.09    
  40  0.105996      -2.24435      -900.907       900.907       5563.59       6464.50    
  41  0.769932E-01  -2.56404      -1029.23       1029.23       4343.46       5372.69    
  42  0.365987      -1.00516      -403.481       403.481       6123.14       6526.62    
  43  0.731763     -0.312298      -125.360       125.360       4365.37       4490.73    
  44  0.447137     -0.804891      -323.092       323.092       5333.71       5656.80    
  45  0.273519      -1.29638      -520.382       520.382       6144.95       6665.34    
  46  0.870614     -0.138556      -55.6179       55.6179       6282.74       6338.35    
  47  0.822463     -0.195452      -78.4563       78.4563       6526.89       6605.35    
  48  0.456061     -0.785129      -315.159       315.159       6104.52       6419.67    
  49  0.603947     -0.504269      -202.419       202.419       6841.78       7044.20    
  50  0.342037      -1.07284      -430.647       430.647       5990.60       6421.25    
  51  0.693527     -0.365965      -146.902       146.902       6991.10       7138.01    
  52  0.958323     -0.425703E-01  -17.0882       17.0882       7164.78       7181.87    
  53  0.587360     -0.532117      -213.597       213.597       5996.15       6209.74    
  54  0.364787      -1.00844      -404.799       404.799       7512.14       7916.94    
  55  0.878785     -0.129215      -51.8683       51.8683       6008.98       6060.85    
  56  0.273053      -1.29809      -521.067       521.067       7157.88       7678.95    
  57  0.896174     -0.109620      -44.0028       44.0028       7535.56       7579.56    
  58  0.239994      -1.42714      -572.869       572.869       7603.86       8176.73    
  59  0.595505E-01  -2.82093      -1132.35       1132.35       7593.84       8726.19    
  60  0.353403      -1.04015      -417.525       417.525       6093.62       6511.14    
  61  0.729282     -0.315695      -126.723       126.723       6959.75       7086.47    
  62  0.231928      -1.46133      -586.592       586.592       5711.06       6297.66    
  63  0.107599      -2.22934      -894.882       894.882       7293.57       8188.45    
  64  0.641905     -0.443315      -177.951       177.951       4439.95       4617.90    
loop,thermsimp(1:2)       51   40.7739       85.1301    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       4217.70          0.88          1.09         23.02          0.30          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    291       9383.18          0.90          1.06         23.01          0.34          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4217.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       51
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       52
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      290     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -347.182       347.182       4388.78       4735.97    
   2  0.315135      -1.15476      -463.531       463.531       4365.37       4828.90    
   3  0.696708     -0.361389      -145.065       145.065       4318.74       4463.80    
   4  0.922116     -0.810842E-01  -32.5481       32.5481       4527.63       4560.18    
   5  0.908133     -0.963648E-01  -38.6818       38.6818       4439.95       4478.63    
   6  0.174132      -1.74794      -701.642       701.642       4140.99       4842.63    
   7  0.490629     -0.712068      -285.831       285.831       4538.53       4824.36    
   8  0.382604     -0.960755      -385.657       385.657       4736.33       5121.99    
   9  0.985159     -0.149527E-01  -6.00217       6.00217       4407.40       4413.41    
  10  0.182634      -1.70027      -682.507       682.507       4723.70       5406.21    
  11  0.554568     -0.589565      -236.658       236.658       4773.88       5010.54    
  12  0.999791     -0.209153E-03 -0.839561E-01  0.839561E-01   4777.95       4778.04    
  13  0.284621      -1.25660      -504.412       504.412       4437.73       4942.14    
  14  0.920706E-01  -2.38520      -957.444       957.444       4464.60       5422.05    
  15  0.243911      -1.41095      -566.371       566.371       4941.39       5507.76    
  16  0.866829     -0.142914      -57.3670       57.3670       4919.34       4976.71    
  17  0.640039     -0.446225      -179.120       179.120       4450.21       4629.33    
  18  0.737488E-01  -2.60709      -1046.51       1046.51       4965.30       6011.81    
  19  0.511916     -0.669594      -268.782       268.782       4974.25       5243.03    
  20  0.870220     -0.139009      -55.7998       55.7998       4813.99       4869.79    
  21  0.594690     -0.519714      -208.619       208.619       4799.54       5008.16    
  22  0.659508     -0.416262      -167.092       167.092       4534.37       4701.47    
  23  0.702023     -0.353789      -142.015       142.015       5051.03       5193.05    
  24  0.178121      -1.72529      -692.550       692.550       4896.42       5588.97    
  25  0.622271     -0.474379      -190.421       190.421       4971.06       5161.48    
  26  0.877027     -0.131217      -52.6719       52.6719       4888.69       4941.36    
  27  0.206753      -1.57623      -632.716       632.716       4343.46       4976.17    
  28  0.927381     -0.753912E-01  -30.2628       30.2628       5292.23       5322.50    
  29  0.610274     -0.493848      -198.236       198.236       5247.38       5445.62    
  30  0.453676     -0.790373      -317.264       317.264       5326.05       5643.31    
  31  0.203335      -1.59290      -639.407       639.407       5445.82       6085.22    
  32  0.558786     -0.581989      -233.616       233.616       5333.71       5567.33    
  33  0.685013     -0.378317      -151.860       151.860       5310.48       5462.34    
  34  0.753574     -0.282929      -113.571       113.571       5796.84       5910.41    
  35  0.736990E-01  -2.60777      -1046.78       1046.78       5728.33       6775.11    
  36  0.719848     -0.328716      -131.950       131.950       5223.16       5355.11    
  37  0.177345E-01  -4.03224      -1618.58       1618.58       4682.74       6301.33    
  38  0.277334E-01  -3.58512      -1439.10       1439.10       5561.24       7000.34    
  39  0.228604      -1.47576      -592.386       592.386       5851.16       6443.55    
  40  0.874609     -0.133979      -53.7804       53.7804       6008.98       6062.76    
  41  0.875699     -0.132733      -53.2804       53.2804       5720.99       5774.27    
  42  0.540874     -0.614569      -246.694       246.694       4953.55       5200.24    
  43  0.343108E-01  -3.37230      -1353.67       1353.67       5996.15       7349.82    
  44  0.982551     -0.176027E-01  -7.06592       7.06592       5711.06       5718.13    
  45  0.201823      -1.60037      -642.404       642.404       6282.74       6925.14    
  46  0.116838      -2.14697      -861.816       861.816       5200.90       6062.72    
  47  0.520586     -0.652800      -262.041       262.041       6104.52       6366.56    
  48  0.515528     -0.662563      -265.960       265.960       5990.60       6256.56    
  49  0.814407     -0.205295      -82.4075       82.4075       5563.59       5646.00    
  50  0.436930     -0.827981      -332.360       332.360       6093.62       6425.98    
  51  0.802441     -0.220097      -88.3491       88.3491       5242.64       5330.98    
  52  0.366662      -1.00331      -402.741       402.741       6123.14       6525.88    
  53  0.915349     -0.884494E-01  -35.5045       35.5045       6526.89       6562.40    
  54  0.619345     -0.479093      -192.313       192.313       6144.95       6337.27    
  55  0.984856     -0.152594E-01  -6.12528       6.12528       6841.78       6847.91    
  56  0.594834     -0.519472      -208.522       208.522       6959.75       7168.27    
  57  0.295281      -1.21983      -489.652       489.652       6991.10       7480.76    
  58  0.363721      -1.01137      -405.973       405.973       7164.78       7570.76    
  59  0.113237      -2.17827      -874.380       874.380       7535.56       8409.94    
  60  0.684322     -0.379327      -152.266       152.266       7157.88       7310.15    
  61  0.172853E-01  -4.05790      -1628.88       1628.88       7512.14       9141.02    
  62  0.910904     -0.933174E-01  -37.4586       37.4586       7603.86       7641.32    
  63  0.792218     -0.232919      -93.4960       93.4960       7293.57       7387.06    
  64  0.644894E-02  -5.04384      -2024.65       2024.65       4217.70       6242.35    
loop,thermsimp(1:2)       52   347.182       463.531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       4209.72          0.88          1.08         23.03          0.32          0.04         25.34
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293       5861.95          0.88          1.07         23.01          0.35          0.04         25.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4209.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       52
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       53
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      292     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -1356.31       1356.31       4407.40       5763.71    
   2  0.714674     -0.335928      -134.845       134.845       4318.74       4453.58    
   3  0.977792     -0.224587E-01  -9.01516       9.01516       4439.95       4448.96    
   4  0.771231     -0.259767      -104.273       104.273       4527.63       4631.90    
   5  0.265148      -1.32747      -532.860       532.860       4450.21       4983.07    
   6  0.559491     -0.580728      -233.110       233.110       4534.37       4767.48    
   7  0.934824E-01  -2.36998      -951.336       951.336       4388.78       5340.12    
   8  0.928182     -0.745278E-01  -29.9162       29.9162       4777.95       4807.87    
   9  0.464905     -0.765922      -307.449       307.449       4538.53       4845.98    
  10  0.871919     -0.137059      -55.0167       55.0167       4365.37       4420.39    
  11  0.982233     -0.179265E-01  -7.19587       7.19587       4140.99       4148.19    
  12  0.426376     -0.852433      -342.175       342.175       4813.99       5156.17    
  13  0.471128E-01  -3.05521      -1226.39       1226.39       4888.69       6115.08    
  14  0.686439     -0.376238      -151.026       151.026       4437.73       4588.75    
  15  0.117826      -2.13855      -858.435       858.435       4343.46       5201.89    
  16  0.756878E-01  -2.58114      -1036.10       1036.10       4919.34       5955.44    
  17  0.196211      -1.62856      -653.723       653.723       4799.54       5453.26    
  18  0.431930     -0.839491      -336.980       336.980       4773.88       5110.86    
  19  0.707794     -0.345602      -138.728       138.728       4736.33       4875.06    
  20  0.174358E-01  -4.04923      -1625.40       1625.40       4971.06       6596.46    
  21  0.267976      -1.31686      -528.600       528.600       5051.03       5579.63    
  22  0.793866     -0.230841      -92.6619       92.6619       4953.55       5046.21    
  23  0.135848      -1.99622      -801.304       801.304       4974.25       5775.55    
  24  0.663958     -0.409536      -164.392       164.392       5292.23       5456.63    
  25  0.281101      -1.26904      -509.406       509.406       5242.64       5752.04    
  26  0.606466     -0.500106      -200.748       200.748       5223.16       5423.91    
  27  0.940056     -0.618158E-01  -24.8135       24.8135       4723.70       4748.51    
  28  0.124106      -2.08662      -837.591       837.591       4464.60       5302.19    
  29  0.205090      -1.58431      -635.957       635.957       5247.38       5883.34    
  30  0.852960     -0.159043      -63.8415       63.8415       5310.48       5374.33    
  31  0.241701      -1.42005      -570.024       570.024       4941.39       5511.41    
  32  0.744368     -0.295220      -118.504       118.504       5333.71       5452.22    
  33  0.279909      -1.27329      -511.113       511.113       4896.42       5407.53    
  34  0.142971      -1.94511      -780.789       780.789       5326.05       6106.84    
  35  0.367233      -1.00176      -402.116       402.116       5563.59       5965.71    
  36  0.839044     -0.175493      -70.4445       70.4445       5711.06       5781.51    
  37  0.762369     -0.271325      -108.913       108.913       5720.99       5829.91    
  38  0.414704     -0.880189      -353.317       353.317       5796.84       6150.15    
  39  0.294445      -1.22266      -490.790       490.790       4965.30       5456.09    
  40  0.296874      -1.21445      -487.491       487.491       5200.90       5688.39    
  41  0.834777     -0.180590      -72.4909       72.4909       6008.98       6081.47    
  42  0.399354     -0.917907      -368.457       368.457       5445.82       5814.28    
  43  0.948666     -0.526981E-01  -21.1536       21.1536       4217.70       4238.86    
  44  0.306553E-01  -3.48495      -1398.90       1398.90       5990.60       7389.50    
  45  0.768324E-01  -2.56613      -1030.07       1030.07       4682.74       5712.82    
  46  0.723813     -0.323222      -129.745       129.745       6144.95       6274.70    
  47  0.912222     -0.918720E-01  -36.8784       36.8784       6104.52       6141.39    
  48  0.846322     -0.166855      -66.9773       66.9773       6093.62       6160.60    
  49  0.704090     -0.350850      -140.835       140.835       5851.16       5991.99    
  50  0.443839     -0.812294      -326.063       326.063       6123.14       6449.21    
  51  0.790462     -0.235137      -94.3865       94.3865       6526.89       6621.28    
  52  0.134239      -2.00813      -806.084       806.084       5728.33       6534.41    
  53  0.720618     -0.327646      -131.520       131.520       6841.78       6973.30    
  54  0.489652     -0.714061      -286.632       286.632       6282.74       6569.37    
  55  0.493891E-01  -3.00802      -1207.45       1207.45       5561.24       6768.69    
  56  0.524875     -0.644595      -258.747       258.747       6959.75       7218.50    
  57  0.919627     -0.837868E-01  -33.6329       33.6329       7157.88       7191.52    
  58  0.372709     -0.986956      -396.175       396.175       5996.15       6392.32    
  59  0.121203      -2.11029      -847.092       847.092       7293.57       8140.66    
  60  0.195183      -1.63382      -655.832       655.832       6991.10       7646.94    
  61  0.325168      -1.12341      -450.950       450.950       7164.78       7615.73    
  62  0.248863      -1.39085      -558.304       558.304       7603.86       8162.16    
  63  0.910643     -0.936046E-01  -37.5739       37.5739       7535.56       7573.13    
  64  0.131372E-01  -4.33230      -1739.03       1739.03       4209.72       5948.75    
loop,thermsimp(1:2)       53   1356.31       134.845    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       4688.27          0.90          1.07         23.00          0.23          0.05         25.24
Just calling func    0   0         25.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4688.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       53
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       54
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      293     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -195.139       195.139       4140.99       4336.13    
   2  0.438442     -0.824528      -330.974       330.974       4217.70       4548.68    
   3  0.666371     -0.405908      -162.936       162.936       4365.37       4528.31    
   4  0.419797     -0.867984      -348.418       348.418       4439.95       4788.37    
   5  0.662493     -0.411746      -165.279       165.279       4318.74       4484.02    
   6  0.261021      -1.34315      -539.156       539.156       4437.73       4976.88    
   7  0.451731     -0.794667      -318.988       318.988       4527.63       4846.62    
   8  0.858047     -0.153096      -61.4544       61.4544       4723.70       4785.16    
   9  0.678039     -0.388550      -155.968       155.968       4534.37       4690.34    
  10  0.257304      -1.35750      -544.913       544.913       4777.95       5322.87    
  11  0.379774     -0.968178      -388.637       388.637       4538.53       4927.17    
  12  0.200314      -1.60787      -645.416       645.416       4736.33       5381.75    
  13  0.702955E-01  -2.65505      -1065.76       1065.76       4450.21       5515.98    
  14  0.846007     -0.167228      -67.1270       67.1270       4953.55       5020.68    
  15  0.692217     -0.367856      -147.661       147.661       4773.88       4921.54    
  16  0.830541     -0.185678      -74.5331       74.5331       4813.99       4888.53    
  17  0.162133E-02  -6.42451      -2578.86       2578.86       4343.46       6922.32    
  18  0.829216     -0.187275      -75.1740       75.1740       4464.60       4539.78    
  19  0.464918     -0.765894      -307.438       307.438       4388.78       4696.22    
  20  0.204157      -1.58887      -637.787       637.787       5310.48       5948.27    
  21  0.203429      -1.59244      -639.221       639.221       4896.42       5535.64    
  22  0.403935     -0.906500      -363.879       363.879       5223.16       5587.04    
  23  0.508037     -0.677201      -271.836       271.836       5333.71       5605.55    
  24  0.337702      -1.08559      -435.767       435.767       4799.54       5235.30    
  25  0.375672     -0.979039      -392.996       392.996       4965.30       5358.29    
  26  0.218755      -1.51980      -610.065       610.065       5292.23       5902.30    
  27  0.803422     -0.218876      -87.8590       87.8590       4941.39       5029.25    
  28  0.324101      -1.12670      -452.270       452.270       5051.03       5503.30    
  29  0.804001     -0.218155      -87.5695       87.5695       5200.90       5288.47    
  30  0.727676     -0.317899      -127.608       127.608       4682.74       4810.35    
  31  0.769479     -0.262042      -105.186       105.186       5242.64       5347.82    
  32  0.632293     -0.458402      -184.007       184.007       4407.40       4591.41    
  33  0.300459      -1.20244      -482.673       482.673       4974.25       5456.92    
  34  0.567362     -0.566759      -227.503       227.503       5711.06       5938.57    
  35  0.803345     -0.218971      -87.8973       87.8973       5445.82       5533.72    
  36  0.764706     -0.268264      -107.684       107.684       5720.99       5828.68    
  37  0.159444      -1.83606      -737.014       737.014       5247.38       5984.40    
  38  0.951670     -0.495367E-01  -19.8845       19.8845       4209.72       4229.60    
  39  0.769198     -0.262407      -105.333       105.333       4919.34       5024.68    
  40  0.916532     -0.871588E-01  -34.9864       34.9864       5563.59       5598.58    
  41  0.146117E-01  -4.22593      -1696.33       1696.33       5851.16       7547.49    
  42  0.196164      -1.62880      -653.819       653.819       6008.98       6662.80    
  43  0.399482     -0.917586      -368.328       368.328       5326.05       5694.38    
  44  0.646732     -0.435823      -174.944       174.944       4888.69       5063.63    
  45  0.207790      -1.57122      -630.706       630.706       6104.52       6735.22    
  46  0.276388      -1.28595      -516.194       516.194       5796.84       6313.03    
  47  0.410494     -0.890394      -357.413       357.413       6093.62       6451.03    
  48  0.437747     -0.826115      -331.611       331.611       6144.95       6476.57    
  49  0.414886     -0.879752      -353.142       353.142       5996.15       6349.29    
  50  0.453890     -0.789901      -317.075       317.075       6123.14       6440.22    
  51  0.141383      -1.95628      -785.272       785.272       5728.33       6513.60    
  52  0.264375      -1.33039      -534.032       534.032       6282.74       6816.77    
  53  0.598599     -0.513163      -205.989       205.989       4971.06       5177.05    
  54  0.716868     -0.332864      -133.615       133.615       6526.89       6660.51    
  55  0.547773     -0.601894      -241.607       241.607       5561.24       5802.84    
  56  0.920744     -0.825729E-01  -33.1456       33.1456       6841.78       6874.93    
  57  0.394656     -0.929742      -373.208       373.208       7157.88       7531.09    
  58  0.439395     -0.822357      -330.103       330.103       6959.75       7289.85    
  59  0.890216     -0.116291      -46.6804       46.6804       5990.60       6037.28    
  60  0.693208     -0.366425      -147.087       147.087       7535.56       7682.65    
  61  0.747783     -0.290642      -116.667       116.667       7164.78       7281.45    
  62  0.408813     -0.894498      -359.061       359.061       6991.10       7350.16    
  63  0.175963E-03  -8.64523      -3470.29       3470.29       7293.57       10763.9    
  64  0.715035     -0.335424      -134.643       134.643       4688.27       4822.91    
loop,thermsimp(1:2)       54   195.139       330.974    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       5712.30          0.88          1.07         23.02          0.30          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5712.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       54
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       55
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      294     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -187.957       187.957       4209.72       4397.67    
   2  0.909442     -0.949244E-01  -38.1036       38.1036       4140.99       4179.09    
   3  0.449837     -0.798870      -320.675       320.675       4318.74       4639.41    
   4  0.761598     -0.272336      -109.319       109.319       4365.37       4474.69    
   5  0.706800     -0.347007      -139.292       139.292       4464.60       4603.90    
   6  0.214343      -1.54018      -618.243       618.243       4217.70       4835.95    
   7  0.855661     -0.155881      -62.5722       62.5722       4407.40       4469.98    
   8  0.432924E-01  -3.13978      -1260.34       1260.34       4534.37       5794.71    
   9  0.902784     -0.102271      -41.0528       41.0528       4388.78       4429.84    
  10  0.706965     -0.346774      -139.199       139.199       4723.70       4862.90    
  11  0.826667     -0.190354      -76.4099       76.4099       4439.95       4516.36    
  12  0.824436     -0.193055      -77.4944       77.4944       4682.74       4760.24    
  13  0.442772     -0.814700      -327.029       327.029       4688.27       5015.29    
  14  0.416355     -0.876217      -351.723       351.723       4527.63       4879.35    
  15  0.268464      -1.31504      -527.870       527.870       4813.99       5341.86    
  16  0.779742     -0.248792      -99.8677       99.8677       4773.88       4873.75    
  17  0.406799E-01  -3.20202      -1285.33       1285.33       4538.53       5823.85    
  18  0.975397     -0.249106E-01  -9.99938       9.99938       4437.73       4447.73    
  19  0.425150E-01  -3.15790      -1267.61       1267.61       4953.55       6221.16    
  20  0.302481      -1.19574      -479.981       479.981       4919.34       5399.32    
  21  0.732033     -0.311930      -125.212       125.212       4941.39       5066.60    
  22  0.774561     -0.255459      -102.544       102.544       4888.69       4991.23    
  23  0.899897     -0.105475      -42.3387       42.3387       4971.06       5013.40    
  24  0.549624     -0.598520      -240.252       240.252       4799.54       5039.79    
  25  0.143543      -1.94112      -779.186       779.186       5200.90       5980.09    
  26  0.229055      -1.47379      -591.596       591.596       4777.95       5369.55    
  27  0.334206      -1.09600      -439.945       439.945       5242.64       5682.58    
  28  0.301620      -1.19859      -481.126       481.126       4965.30       5446.42    
  29  0.856030     -0.155449      -62.3990       62.3990       4736.33       4798.73    
  30  0.978878     -0.213482E-01  -8.56938       8.56938       4974.25       4982.82    
  31  0.890790E-01  -2.41823      -970.704       970.704       5051.03       6021.74    
  32  0.275076      -1.29071      -518.103       518.103       4450.21       4968.32    
  33  0.506865     -0.679511      -272.763       272.763       5445.82       5718.58    
  34  0.628553     -0.464334      -186.389       186.389       4896.42       5082.81    
  35  0.787972     -0.238293      -95.6532       95.6532       5223.16       5318.82    
  36  0.746168     -0.292804      -117.535       117.535       5563.59       5681.13    
  37  0.116954      -2.14598      -861.418       861.418       5333.71       6195.13    
  38  0.245368      -1.40500      -563.980       563.980       5326.05       5890.03    
  39  0.873952     -0.134729      -54.0818       54.0818       5561.24       5615.32    
  40  0.850596     -0.161818      -64.9554       64.9554       5720.99       5785.95    
  41  0.455763     -0.785783      -315.422       315.422       5292.23       5607.66    
  42  0.984333     -0.157910E-01  -6.33867       6.33867       5711.06       5717.40    
  43  0.956700     -0.442655E-01  -17.7686       17.7686       5310.48       5328.25    
  44  0.186161      -1.68114      -674.828       674.828       5247.38       5922.21    
  45  0.791379     -0.233979      -93.9215       93.9215       5990.60       6084.52    
  46  0.262937      -1.33584      -536.221       536.221       5796.84       6333.06    
  47  0.115228E-01  -4.46342      -1791.66       1791.66       5996.15       7787.81    
  48  0.324912      -1.12420      -451.266       451.266       6123.14       6574.41    
  49  0.164288      -1.80613      -725.000       725.000       6093.62       6818.62    
  50  0.334193E-02  -5.70121      -2288.52       2288.52       6144.95       8433.48    
  51  0.189130      -1.66532      -668.476       668.476       5728.33       6396.80    
  52  0.157956      -1.84544      -740.778       740.778       6526.89       7267.67    
  53  0.414399     -0.880925      -353.613       353.613       6008.98       6362.59    
  54  0.445375     -0.808838      -324.676       324.676       6104.52       6429.19    
  55  0.674924     -0.393155      -157.817       157.817       6282.74       6440.55    
  56  0.204431      -1.58752      -637.249       637.249       6841.78       7479.03    
  57  0.741769     -0.298718      -119.908       119.908       4343.46       4463.36    
  58  0.662845     -0.411215      -165.066       165.066       7164.78       7329.85    
  59  0.716249     -0.333728      -133.962       133.962       6959.75       7093.71    
  60  0.503649     -0.685876      -275.318       275.318       6991.10       7266.42    
  61  0.525560     -0.643292      -258.224       258.224       7157.88       7416.11    
  62  0.981258     -0.189199E-01  -7.59464       7.59464       5851.16       5858.75    
  63  0.892133     -0.114140      -45.8171       45.8171       7535.56       7581.38    
  64  0.239527E-01  -3.73167      -1497.93       1497.93       5712.30       7210.23    
loop,thermsimp(1:2)       55   187.957       38.1036    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       4404.41          0.88          1.07         22.99          0.34          0.04         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297       7827.09          0.89          1.06         22.99          0.66          0.04         25.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4404.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       55
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       56
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      296     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -563.206       563.206       4140.99       4704.20    
   2  0.963480     -0.372033E-01  -14.9338       14.9338       4209.72       4224.65    
   3  0.633143     -0.457059      -183.468       183.468       4388.78       4572.25    
   4  0.939850E-02  -4.66721      -1873.47       1873.47       4437.73       6311.19    
   5  0.796978     -0.226928      -91.0914       91.0914       4343.46       4434.55    
   6  0.229125      -1.47349      -591.474       591.474       4407.40       4998.88    
   7  0.926958     -0.758467E-01  -30.4457       30.4457       4365.37       4395.82    
   8  0.687512     -0.374676      -150.399       150.399       4439.95       4590.35    
   9  0.695030     -0.363800      -146.033       146.033       4464.60       4610.64    
  10  0.900736     -0.104543      -41.9645       41.9645       4318.74       4360.70    
  11  0.867179     -0.142510      -57.2049       57.2049       4682.74       4739.95    
  12  0.879271     -0.128662      -51.6462       51.6462       4736.33       4787.98    
  13  0.197557      -1.62173      -650.979       650.979       4217.70       4868.68    
  14  0.790701     -0.234835      -94.2652       94.2652       4723.70       4817.97    
  15  0.807456     -0.213867      -85.8484       85.8484       4773.88       4859.73    
  16  0.688117     -0.373796      -150.046       150.046       4527.63       4677.67    
  17  0.227000      -1.48280      -595.213       595.213       4450.21       5045.43    
  18  0.374715     -0.981589      -394.020       394.020       4974.25       5368.27    
  19  0.176077      -1.73683      -697.183       697.183       4888.69       5585.87    
  20  0.446126E-01  -3.10974      -1248.28       1248.28       4971.06       6219.34    
  21  0.997763E-01  -2.30482      -925.181       925.181       4688.27       5613.45    
  22  0.142978E-01  -4.24765      -1705.05       1705.05       4799.54       6504.59    
  23  0.652216     -0.427379      -171.555       171.555       4941.39       5112.94    
  24  0.909797     -0.945339E-01  -37.9469       37.9469       4896.42       4934.37    
  25  0.145015      -1.93092      -775.091       775.091       5223.16       5998.26    
  26  0.189723      -1.66219      -667.222       667.222       5310.48       5977.71    
  27  0.260997      -1.34324      -539.192       539.192       4813.99       5353.18    
  28  0.167755      -1.78525      -716.617       716.617       4777.95       5494.57    
  29  0.148939      -1.90422      -764.373       764.373       4919.34       5683.72    
  30  0.209474      -1.56315      -627.467       627.467       4965.30       5592.76    
  31  0.594522     -0.519998      -208.733       208.733       5292.23       5500.97    
  32  0.401703     -0.912043      -366.104       366.104       5561.24       5927.34    
  33  0.306469      -1.18264      -474.724       474.724       5563.59       6038.32    
  34  0.879335     -0.128589      -51.6170       51.6170       5242.64       5294.25    
  35  0.920707     -0.826134E-01  -33.1619       33.1619       5711.06       5744.23    
  36  0.215616      -1.53425      -615.866       615.866       5445.82       6061.68    
  37  0.821708     -0.196370      -78.8252       78.8252       5720.99       5799.82    
  38  0.935240     -0.669517E-01  -26.8751       26.8751       4534.37       4561.25    
  39  0.691932     -0.368268      -147.827       147.827       4538.53       4686.36    
  40  0.493152     -0.706938      -283.772       283.772       5851.16       6134.93    
  41  0.362160      -1.01567      -407.700       407.700       5326.05       5733.75    
  42  0.636318     -0.452056      -181.460       181.460       5247.38       5428.85    
  43  0.178369      -1.72390      -691.992       691.992       5200.90       5892.89    
  44  0.987372     -0.127089E-01  -5.10148       5.10148       5051.03       5056.13    
  45  0.557690     -0.583953      -234.405       234.405       5990.60       6225.01    
  46  0.434391     -0.833811      -334.701       334.701       5333.71       5668.41    
  47  0.759572     -0.275001      -110.388       110.388       4953.55       5063.94    
  48  0.578559     -0.547214      -219.658       219.658       5796.84       6016.49    
  49  0.262392      -1.33792      -537.053       537.053       6008.98       6546.03    
  50  0.615619     -0.485127      -194.735       194.735       5728.33       5923.06    
  51  0.580502     -0.543861      -218.312       218.312       6104.52       6322.83    
  52  0.434749     -0.832986      -334.369       334.369       6282.74       6617.11    
  53  0.741569     -0.298987      -120.017       120.017       6123.14       6243.16    
  54  0.207475      -1.57274      -631.315       631.315       6093.62       6724.93    
  55  0.610742     -0.493081      -197.928       197.928       6959.75       7157.68    
  56  0.746759     -0.292013      -117.217       117.217       5712.30       5829.52    
  57  0.846394     -0.166771      -66.9434       66.9434       6991.10       7058.05    
  58  0.114011      -2.17146      -871.647       871.647       6526.89       7398.54    
  59  0.148375      -1.90801      -765.896       765.896       7164.78       7930.68    
  60  0.610037     -0.494236      -198.391       198.391       7157.88       7356.28    
  61  0.104069      -2.26270      -908.271       908.271       6841.78       7750.05    
  62  0.570721     -0.560855      -225.133       225.133       7535.56       7760.69    
  63  0.154528      -1.86738      -749.585       749.585       5996.15       6745.73    
  64  0.365341      -1.00692      -404.189       404.189       4404.41       4808.60    
loop,thermsimp(1:2)       56   563.206       14.9338    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       5221.51          0.88          1.08         23.03          0.33          0.04         25.36
Just calling func    0   0         25.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   5221.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       56
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       57
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      297     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -478.101       478.101       4209.72       4687.82    
   2  0.729962     -0.314762      -126.349       126.349       4318.74       4445.09    
   3  0.788140     -0.238080      -95.5678       95.5678       4365.37       4460.94    
   4  0.718031     -0.331242      -132.964       132.964       4343.46       4476.42    
   5  0.603575     -0.504885      -202.666       202.666       4534.37       4737.04    
   6  0.287757      -1.24564      -500.013       500.013       4388.78       4888.80    
   7  0.690986     -0.369635      -148.375       148.375       4439.95       4588.32    
   8  0.976315     -0.239695E-01  -9.62161       9.62161       4464.60       4474.23    
   9  0.983892     -0.162393E-01  -6.51863       6.51863       4527.63       4534.15    
  10  0.858769     -0.152255      -61.1167       61.1167       4538.53       4599.65    
  11  0.968889     -0.316048E-01  -12.6865       12.6865       4140.99       4153.68    
  12  0.364921      -1.00807      -404.651       404.651       4682.74       5087.40    
  13  0.540930     -0.614466      -246.653       246.653       4736.33       4982.98    
  14  0.812278E-01  -2.51050      -1007.74       1007.74       4404.41       5412.15    
  15  0.919841     -0.835539E-01  -33.5394       33.5394       4723.70       4757.24    
  16  0.275462      -1.28930      -517.540       517.540       4773.88       5291.42    
  17  0.704362     -0.350463      -140.680       140.680       4217.70       4358.38    
  18  0.896809     -0.108913      -43.7188       43.7188       4896.42       4940.14    
  19  0.166873      -1.79052      -718.735       718.735       4407.40       5126.14    
  20  0.927791E-02  -4.68012      -1878.65       1878.65       4450.21       6328.86    
  21  0.906733     -0.979074E-01  -39.3011       39.3011       5051.03       5090.33    
  22  0.575421     -0.552654      -221.841       221.841       4953.55       5175.39    
  23  0.975069     -0.252469E-01  -10.1344       10.1344       4941.39       4951.52    
  24  0.610094     -0.494143      -198.354       198.354       5242.64       5440.99    
  25  0.823028     -0.194765      -78.1806       78.1806       4813.99       4892.17    
  26  0.709022     -0.343869      -138.032       138.032       4974.25       5112.28    
  27  0.956893     -0.440633E-01  -17.6875       17.6875       5247.38       5265.07    
  28  0.897850E-01  -2.41034      -967.535       967.535       4777.95       5745.49    
  29  0.836996     -0.177936      -71.4256       71.4256       5292.23       5363.66    
  30  0.688664     -0.373001      -149.727       149.727       4888.69       5038.42    
  31  0.587454     -0.531957      -213.533       213.533       4965.30       5178.83    
  32  0.880970     -0.126731      -50.8712       50.8712       4688.27       4739.14    
  33  0.506724     -0.679789      -272.874       272.874       5333.71       5606.59    
  34  0.802262     -0.220320      -88.4387       88.4387       4919.34       5007.78    
  35  0.764787E-01  -2.57074      -1031.92       1031.92       5326.05       6357.97    
  36  0.907101     -0.975014E-01  -39.1381       39.1381       5711.06       5750.20    
  37  0.797350     -0.226461      -90.9040       90.9040       5720.99       5811.90    
  38  0.257375      -1.35722      -544.802       544.802       5712.30       6257.10    
  39  0.643190     -0.441315      -177.148       177.148       5200.90       5378.05    
  40  0.513768     -0.665984      -267.333       267.333       5728.33       5995.66    
  41  0.850264     -0.162208      -65.1121       65.1121       5561.24       5626.35    
  42  0.200819      -1.60535      -644.405       644.405       5310.48       5954.89    
  43  0.331940      -1.10280      -442.676       442.676       5223.16       5665.84    
  44  0.900490     -0.104816      -42.0742       42.0742       5796.84       5838.91    
  45  0.618957     -0.479719      -192.564       192.564       5563.59       5756.16    
  46  0.395756     -0.926956      -372.090       372.090       5445.82       5817.91    
  47  0.528166     -0.638345      -256.238       256.238       5851.16       6107.40    
  48  0.586635     -0.533352      -214.093       214.093       4971.06       5185.15    
  49  0.705559     -0.348765      -139.998       139.998       5990.60       6130.60    
  50  0.191018      -1.65539      -664.490       664.490       6123.14       6787.63    
  51  0.581133     -0.542775      -217.876       217.876       4437.73       4655.60    
  52  0.297529      -1.21224      -486.607       486.607       6104.52       6591.12    
  53  0.532486     -0.630198      -252.968       252.968       4799.54       5052.50    
  54  0.396084     -0.926129      -371.758       371.758       6008.98       6380.74    
  55  0.209334      -1.56382      -627.735       627.735       6282.74       6910.47    
  56  0.632068     -0.458758      -184.150       184.150       6093.62       6277.77    
  57  0.941424     -0.603613E-01  -24.2296       24.2296       5996.15       6020.38    
  58  0.875379     -0.133099      -53.4272       53.4272       6991.10       7044.53    
  59  0.497903     -0.697350      -279.924       279.924       6959.75       7239.67    
  60  0.840483     -0.173779      -69.7565       69.7565       7157.88       7227.64    
  61  0.230101      -1.46924      -589.768       589.768       6526.89       7116.66    
  62  0.213210      -1.54548      -620.371       620.371       6841.78       7462.15    
  63  0.412073     -0.886554      -355.872       355.872       7535.56       7891.43    
  64  0.264912      -1.32836      -533.217       533.217       5221.51       5754.73    
loop,thermsimp(1:2)       57   478.101       126.349    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299       4522.97          0.88          1.09         23.01          0.25          0.04         25.26
Just calling func    0   0         25.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300       4937.96          0.90          1.09         23.06          0.34          0.04         25.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   4522.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       57
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       58
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      299     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -254.689       254.689       4140.99       4395.68    
   2  0.175946E-01  -4.04016      -1621.76       1621.76       4217.70       5839.47    
   3  0.419998     -0.867504      -348.225       348.225       4318.74       4666.96    
   4  0.448197E-01  -3.10511      -1246.42       1246.42       4365.37       5611.79    
   5  0.501784     -0.689586      -276.807       276.807       4464.60       4741.41    
   6  0.858173     -0.152949      -61.3955       61.3955       4343.46       4404.85    
   7  0.101932      -2.28345      -916.602       916.602       4527.63       5444.23    
   8  0.453268     -0.791273      -317.625       317.625       4439.95       4757.57    
   9  0.128092      -2.05501      -824.901       824.901       4538.53       5363.43    
  10  0.779644     -0.248918      -99.9181       99.9181       4437.73       4537.65    
  11  0.769943E-01  -2.56402      -1029.23       1029.23       4209.72       5238.94    
  12  0.140214      -1.96458      -788.604       788.604       4534.37       5322.98    
  13  0.571588     -0.559337      -224.524       224.524       4688.27       4912.79    
  14  0.455096     -0.787247      -316.009       316.009       4723.70       5039.71    
  15  0.594240     -0.520471      -208.923       208.923       4388.78       4597.71    
  16  0.833288     -0.182376      -73.2076       73.2076       4813.99       4887.20    
  17  0.807090E-01  -2.51691      -1010.31       1010.31       4896.42       5906.73    
  18  0.430313     -0.843242      -338.486       338.486       4941.39       5279.87    
  19  0.990463     -0.958277E-02  -3.84662       3.84662       4736.33       4740.18    
  20  0.907906     -0.966144E-01  -38.7820       38.7820       4919.34       4958.13    
  21  0.607469     -0.498455      -200.085       200.085       4888.69       5088.77    
  22  0.927102     -0.756916E-01  -30.3834       30.3834       4799.54       4829.92    
  23  0.379122     -0.969896      -389.327       389.327       4682.74       5072.07    
  24  0.183121E-01  -4.00019      -1605.72       1605.72       5051.03       6656.75    
  25  0.561966     -0.576313      -231.338       231.338       4974.25       5205.59    
  26  0.638772     -0.448208      -179.915       179.915       4407.40       4587.32    
  27  0.234202      -1.45157      -582.675       582.675       4953.55       5536.22    
  28  0.257221      -1.35782      -545.042       545.042       4965.30       5510.34    
  29  0.688379     -0.373416      -149.893       149.893       4971.06       5120.95    
  30  0.360237E-01  -3.32358      -1334.12       1334.12       5247.38       6581.50    
  31  0.849177     -0.163487      -65.6255       65.6255       4773.88       4839.51    
  32  0.324868E-01  -3.42692      -1375.60       1375.60       5292.23       6667.84    
  33  0.216483E-01  -3.83283      -1538.54       1538.54       5200.90       6739.44    
  34  0.794095     -0.230552      -92.5459       92.5459       4404.41       4496.95    
  35  0.453180     -0.791465      -317.702       317.702       5242.64       5560.34    
  36  0.286278      -1.25079      -502.081       502.081       5333.71       5835.79    
  37  0.931500     -0.709590E-01  -28.4837       28.4837       5561.24       5589.72    
  38  0.483424     -0.726861      -291.770       291.770       5223.16       5514.93    
  39  0.782276     -0.245547      -98.5653       98.5653       4777.95       4876.52    
  40  0.976661     -0.236156E-01  -9.47954       9.47954       5711.06       5720.54    
  41  0.707981     -0.345338      -138.622       138.622       5221.51       5360.14    
  42  0.101993      -2.28285      -916.361       916.361       5563.59       6479.96    
  43  0.690974E-01  -2.67224      -1072.66       1072.66       5720.99       6793.66    
  44  0.767576E-01  -2.56710      -1030.46       1030.46       5445.82       6476.28    
  45  0.584825     -0.536443      -215.334       215.334       5796.84       6012.17    
  46  0.588828     -0.529621      -212.596       212.596       5310.48       5523.08    
  47  0.894562     -0.111421      -44.7255       44.7255       5728.33       5773.05    
  48  0.260723      -1.34430      -539.615       539.615       5996.15       6535.76    
  49  0.773456E-01  -2.55947      -1027.40       1027.40       5851.16       6878.56    
  50  0.848651E-01  -2.46669      -990.156       990.156       5990.60       6980.76    
  51  0.992803     -0.722305E-02  -2.89941       2.89941       5712.30       5715.20    
  52  0.529202     -0.636386      -255.452       255.452       6093.62       6349.07    
  53  0.540374     -0.615494      -247.066       247.066       4450.21       4697.28    
  54  0.185914      -1.68247      -675.361       675.361       5326.05       6001.41    
  55  0.764153     -0.268988      -107.975       107.975       6008.98       6116.95    
  56  0.931974E-01  -2.37304      -952.561       952.561       6104.52       7057.08    
  57  0.753946     -0.282434      -113.372       113.372       6123.14       6236.52    
  58  0.279731      -1.27393      -511.367       511.367       6282.74       6794.10    
  59  0.790083     -0.235617      -94.5792       94.5792       6991.10       7085.68    
  60  0.179541      -1.71735      -689.363       689.363       6526.89       7216.25    
  61  0.424504     -0.856835      -343.942       343.942       7157.88       7501.83    
  62  0.359861      -1.02204      -410.256       410.256       6959.75       7370.00    
  63  0.234475      -1.45041      -582.209       582.209       6841.78       7423.99    
  64  0.320303      -1.13849      -457.001       457.001       4522.97       4979.97    
loop,thermsimp(1:2)       58   254.689       1621.76    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301       7128.39          0.89          1.07         22.90          0.37          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    7128.4        2.727     0.6391      6.307     -100.0    -0.4894    
                      -1.459      1.684     -100.0      3.218    -0.2110    
                      0.2419     0.8410      2.400      0.000      0.000    
                      -3.436      0.000      0.000      0.000     -1.221    

                      -2.500     0.1407E+05 0.1480E+05 -1678.     -5901.    
                      -2.000    -0.4001     0.5646     -2.495     -1.048    
                      -11.24     -2.396      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.5105     0.1417      0.000    -0.4162    
                      0.4007    -0.4946     0.5846E-02 0.3447     0.1027E-01

                      -1.043     -2.850      0.000     0.5300     0.6200    
                      0.8541E-01 -1.649     0.3011     0.2127    -0.9216    
                     -0.2948    -0.1659     0.4346    -0.9517      0.000    

                      -1.476    -0.4407      3.095     -3.318      0.000    
                       0.000      9.673      7.821     -7807.     -4.000    
                       1.684    -0.4140      9.459      8.510     -4563.    

                      -4.000      1.808      1.737      9.788      8.661    
                     -0.1446E+05 -4.000     0.3130      1.576      9.394    
                       9.408    -0.1575E+05 -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   7128.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    401.410               316
loop is:       58
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    3211.28      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    401.410               316
loop is:       59
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      300     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -21.8934       21.8934       4140.99       4162.88    
   2  0.224221      -1.49512      -600.158       600.158       4343.46       4943.61    
   3  0.699642     -0.357186      -143.378       143.378       4404.41       4547.79    
   4  0.490916     -0.711482      -285.596       285.596       4437.73       4723.32    
   5  0.204251      -1.58840      -637.602       637.602       4407.40       5045.01    
   6  0.356522      -1.03136      -413.998       413.998       4388.78       4802.78    
   7  0.745938     -0.293113      -117.658       117.658       4318.74       4436.40    
   8  0.451533     -0.795107      -319.164       319.164       4450.21       4769.38    
   9  0.101038      -2.29226      -920.137       920.137       4736.33       5656.47    
  10  0.826978     -0.189977      -76.2588       76.2588       4464.60       4540.86    
  11  0.212337      -1.54958      -622.018       622.018       4439.95       5061.97    
  12  0.490540     -0.712248      -285.904       285.904       4799.54       5085.44    
  13  0.672078     -0.397381      -159.513       159.513       4773.88       4933.39    
  14  0.690580     -0.370223      -148.611       148.611       4777.95       4926.56    
  15  0.513190     -0.667108      -267.784       267.784       4813.99       5081.78    
  16  0.268393      -1.31530      -527.977       527.977       4688.27       5216.24    
  17  0.896898     -0.108813      -43.6787       43.6787       4919.34       4963.02    
  18  0.911953     -0.921674E-01  -36.9969       36.9969       4522.97       4559.97    
  19  0.355703      -1.03366      -414.921       414.921       4723.70       5138.62    
  20  0.293818      -1.22479      -491.645       491.645       4682.74       5174.39    
  21  0.713392     -0.337724      -135.566       135.566       4888.69       5024.25    
  22  0.660627     -0.414565      -166.411       166.411       4971.06       5137.47    
  23  0.795097     -0.229291      -92.0397       92.0397       4974.25       5066.29    
  24  0.919484     -0.839428E-01  -33.6955       33.6955       4209.72       4243.41    
  25  0.976382     -0.239014E-01  -9.59426       9.59426       4941.39       4950.98    
  26  0.922195     -0.809991E-01  -32.5139       32.5139       4534.37       4566.89    
  27  0.436062     -0.829970      -333.159       333.159       5221.51       5554.67    
  28  0.271848      -1.30251      -522.842       522.842       4538.53       5061.37    
  29  0.389360     -0.943252      -378.631       378.631       4527.63       4906.26    
  30  0.314178E-01  -3.46038      -1389.03       1389.03       4965.30       6354.33    
  31  0.545460     -0.606126      -243.305       243.305       5223.16       5466.47    
  32  0.925479E-01  -2.38003      -955.369       955.369       5310.48       6265.85    
  33  0.971973     -0.284273E-01  -11.4110       11.4110       4953.55       4964.96    
  34  0.403500     -0.907578      -364.311       364.311       5242.64       5606.95    
  35  0.392926     -0.934133      -374.971       374.971       5561.24       5936.21    
  36  0.718758     -0.330230      -132.558       132.558       4365.37       4497.93    
  37  0.746082     -0.292920      -117.581       117.581       5712.30       5829.88    
  38  0.353478      -1.03993      -417.440       417.440       5711.06       6128.50    
  39  0.843229     -0.170517      -68.4473       68.4473       5728.33       5796.77    
  40  0.388011     -0.946720      -380.023       380.023       5333.71       5713.74    
  41  0.969569     -0.309034E-01  -12.4049       12.4049       4217.70       4230.11    
  42  0.441380E-01  -3.12043      -1252.58       1252.58       4896.42       6149.00    
  43  0.533000     -0.629233      -252.581       252.581       5326.05       5578.63    
  44  0.288396      -1.24342      -499.122       499.122       5796.84       6295.96    
  45  0.683115     -0.381092      -152.974       152.974       6008.98       6161.95    
  46  0.339511      -1.08025      -433.624       433.624       6123.14       6556.77    
  47  0.150420E-01  -4.19691      -1684.68       1684.68       6093.62       7778.30    
  48  0.141026      -1.95881      -786.286       786.286       5445.82       6232.10    
  49  0.421666     -0.863541      -346.635       346.635       5563.59       5910.23    
  50  0.953496     -0.476201E-01  -19.1152       19.1152       5996.15       6015.26    
  51  0.966647     -0.339215E-01  -13.6164       13.6164       5247.38       5261.00    
