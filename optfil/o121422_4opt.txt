nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    7484.35      0.500000    
Tfreq:   52
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    7484.35      0.500000    
Tfreq:   52
 Estimating   52 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      3      24947.83          0.85          1.11         21.69          0.27          0.04         23.96
iter,obj,time:      4      25509.28          0.84          1.10         21.65          0.33          0.04         23.96
iter,obj,time:      5      25076.29          0.84          1.10         21.66          0.23          0.04         23.88
iter,obj,time:      6      25009.56          0.84          1.10         21.70          0.41          0.04         24.10
iter,obj,time:      7      26352.10          0.84          1.10         21.61          0.31          0.04         23.90
iter,obj,time:      8      24836.88          0.84          1.11         21.66          0.21          0.04         23.87
iter,obj,time:      9      25038.75          0.84          1.10         21.66          0.25          0.04         23.89
iter,obj,time:     10      24959.24          0.83          1.10         21.67          0.29          0.04         23.93
iter,obj,time:     11      25055.52          0.83          1.10         21.64          0.31          0.04         23.93
iter,obj,time:     12      24820.52          0.84          1.11         21.66          0.26          0.04         23.91
iter,obj,time:     13      24932.48          0.84          1.11         21.68          0.35          0.04         24.01
iter,obj,time:     14      24375.72          0.85          1.11         21.73          0.51          0.04         24.24
iter,obj,time:     15      24967.78          0.84          1.12         21.70          0.39          0.04         24.09
iter,obj,time:     16      28816.96          0.86          1.14         21.73          0.16          0.04         23.93
iter,obj,time:     17      24948.96          0.88          1.15         21.79          0.13          0.04         23.99
iter,obj,time:     18      24946.75          0.89          1.18         21.70          0.23          0.04         24.04
iter,obj,time:     19      24947.83          0.89          1.17         21.73          0.20          0.04         24.03
iter,obj,time:     20      24994.27          0.89          1.16         21.62          0.31          0.04         24.02
iter,obj,time:     21      25526.80          0.89          1.17         21.75          0.17          0.04         24.03
iter,obj,time:     22      25015.85          0.90          1.18         21.75          0.19          0.04         24.06
iter,obj,time:     23      25138.56          0.89          1.18         21.76          0.18          0.04         24.05
iter,obj,time:     24      24879.43          0.89          1.17         21.75          0.20          0.04         24.05
iter,obj,time:     25      25156.09          0.89          1.18         21.72          0.23          0.04         24.06
iter,obj,time:     26      25087.96          0.90          1.19         21.73          0.20          0.04         24.06
iter,obj,time:     27      25081.30          0.89          1.19         21.71          0.22          0.05         24.07
iter,obj,time:     28      24977.88          0.88          1.18         21.71          0.21          0.04         24.02
iter,obj,time:     29      24117.13          0.88          1.18         21.71          0.31          0.05         24.14
iter,obj,time:     30      25184.30          0.90          1.18         21.73          0.29          0.04         24.14
iter,obj,time:     31      24818.35          0.90          1.18         21.76          0.18          0.04         24.07
iter,obj,time:     32      24857.12          0.91          1.20         21.74          0.21          0.04         24.09
iter,obj,time:     33      25516.56          0.90          1.18         21.70          0.23          0.05         24.07
iter,obj,time:     34      24796.57          0.91          1.18         21.79          0.20          0.04         24.11
iter,obj,time:     35      27069.42          0.91          1.19         21.73          0.25          0.04         24.11
iter,obj,time:     36      25090.08          0.90          1.20         21.77          0.15          0.04         24.06
iter,obj,time:     37      25007.11          0.89          1.17         21.68          0.29          0.05         24.08
iter,obj,time:     38      25051.90          0.89          1.18         21.71          0.22          0.04         24.05
iter,obj,time:     39      24998.74          0.90          1.20         21.73          0.22          0.04         24.09
iter,obj,time:     40      22554.49          0.91          1.19         21.79          0.16          0.05         24.10
iter,obj,time:     41      21776.68          0.91          1.19         21.73          0.32          0.05         24.19
iter,obj,time:     42      25083.85          0.91          1.20         21.80          0.30          0.04         24.25
iter,obj,time:     43      24693.18          0.89          1.18         21.78          0.31          0.04         24.20
iter,obj,time:     44      25038.72          0.90          1.18         21.73          0.32          0.04         24.18
iter,obj,time:     45      24940.79          0.90          1.19         21.75          0.33          0.04         24.21
iter,obj,time:     46      24942.77          0.89          1.19         21.71          0.37          0.04         24.21
iter,obj,time:     47      24798.03          0.90          1.19         21.72          0.38          0.05         24.24
iter,obj,time:     48      25066.14          0.89          1.16         21.66          0.34          0.04         24.10
iter,obj,time:     49      24905.92          0.89          1.17         21.71          0.29          0.04         24.10
iter,obj,time:     50      25059.47          0.89          1.19         21.75          0.32          0.04         24.20
iter,obj,time:     51      24655.59          0.89          1.19         21.81          0.25          0.05         24.20
iter,obj,time:     52      24951.23          0.89          1.18         21.55          0.53          0.05         24.20
iter,obj,time:     53      24970.42          0.90          1.17         21.57          0.50          0.04         24.18
iter,obj,time:     54      24959.49          0.90          1.20         21.74          0.36          0.04         24.24
iter,obj,time:     55      24823.05          0.90          1.18         21.65          0.46          0.04         24.24

    1    24948.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    2    25509.      -0.6850     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    3    25076.        1.315     -4.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    4    25010.        1.315     -2.102      1.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    5    26352.        1.315     -2.102      3.011     -102.6    -0.9390    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    6    24837.        1.315     -2.102      3.011     -102.6      1.061    
                      -1.148      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    7    25039.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518    -0.5920     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    8    24959.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      1.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

    9    25056.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     -1.541    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   10    24821.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                      0.1570     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   11    24932.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -3.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   12    24376.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -1.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   13    24968.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500    -0.9650     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   14    28817.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965      1.382     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   15    24949.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -3.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   16    24947.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      11.41    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   17    24948.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -9.390     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   18    24994.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6110     0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   19    25527.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.8544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   20    25016.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544     0.5665     0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   21    25139.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.7510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   22    24879.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486     0.4554     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   23    25156.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.7394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   24    25088.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.6804     0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   25    25081.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.6916    



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   26    24978.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                      0.4970E-01-0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   27    24117.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503      0.000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   28    25184.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.6846    -0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   29    24818.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01 0.5607    

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   30    24857.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                      0.5530     0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   31    25517.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.7431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   32    24797.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116     0.4859     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   33    27069.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.8695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   34    25090.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.6329     0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   35    25007.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.6015    -0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   36    25052.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.3074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   37    24999.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074    -0.9290      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   38    22554.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.7390     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   39    21777.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   40    25084.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.900      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   41    24693.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      9.200    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   42    25039.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                      0.5712     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   43    24941.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -1.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   44    24943.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.100      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   45    24798.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      9.200    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   46    25066.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000      1.585    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   47    24906.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846     0.6307      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   48    25059.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      9.300      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   49    24656.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      9.200    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   50    24951.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000     0.3511    -0.6332      9.600    

                       8.800    -0.1891E+05 -6.000    

   51    24970.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489     0.3668      9.600    

                       8.800    -0.1891E+05 -6.000    

   52    24959.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      10.00    

                       8.800    -0.1891E+05 -6.000    

   53    24823.        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.500      8.800    -0.1672E+05 -6.000    

                     -0.4288     -2.381      8.700      8.800    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.900      8.800    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.600    

                       9.200    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          53          53

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        1
neval is:       53


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       53     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -11046.3       11046.3       24947.8       35994.1    
   2  0.709707     -0.342904      -2566.41       2566.41       25509.3       28075.7    
   3  0.151889      -1.88460      -14105.0       14105.0       25076.3       39181.3    
   4  0.456170E-01  -3.08747      -23107.7       23107.7       25009.6       48117.3    
   5  0.882557     -0.124932      -935.033       935.033       26352.1       27287.1    
   6  0.711292     -0.340672      -2549.71       2549.71       24836.9       27386.6    
   7  0.241669      -1.42019      -10629.2       10629.2       25038.8       35667.9    
   8  0.682871     -0.381450      -2854.90       2854.90       24959.2       27814.1    
   9  0.500657     -0.691834      -5177.93       5177.93       25055.5       30233.4    
  10  0.494633     -0.703939      -5268.52       5268.52       24820.5       30089.0    
  11  0.437126     -0.827535      -6193.56       6193.56       24932.5       31126.0    
  12  0.462981     -0.770069      -5763.47       5763.47       24375.7       30139.2    
  13  0.988878     -0.111840E-01  -83.7049       83.7049       24967.8       25051.5    
  14  0.878158     -0.129929      -972.434       972.434       28817.0       29789.4    
  15  0.825605     -0.191638      -1434.29       1434.29       24949.0       26383.3    
  16  0.966665     -0.339033E-01  -253.744       253.744       24946.8       25200.5    
  17  0.340930      -1.07608      -8053.73       8053.73       24947.8       33001.6    
  18  0.288920      -1.24161      -9292.62       9292.62       24994.3       34286.9    
  19  0.442843     -0.814539      -6096.30       6096.30       25526.8       31623.1    
  20  0.878635     -0.129386      -968.367       968.367       25015.8       25984.2    
  21  0.198777E-01  -3.91816      -29324.8       29324.8       25138.6       54463.4    
  22  0.315829      -1.15255      -8626.11       8626.11       24879.4       33505.5    
  23  0.208690      -1.56690      -11727.3       11727.3       25156.1       36883.4    
  24  0.849393     -0.163234      -1221.70       1221.70       25088.0       26309.7    
  25  0.945818     -0.557056E-01  -416.920       416.920       25081.3       25498.2    
  26  0.567839     -0.565917      -4235.52       4235.52       24977.9       29213.4    
  27  0.718388     -0.330745      -2475.41       2475.41       24117.1       26592.5    
  28  0.115406      -2.15930      -16160.9       16160.9       25184.3       41345.2    
  29  0.659869E-01  -2.71830      -20344.7       20344.7       24818.4       45163.0    
  30  0.171393      -1.76380      -13200.9       13200.9       24857.1       38058.0    
  31  0.161953      -1.82045      -13624.9       13624.9       25516.6       39141.5    
  32  0.455406     -0.786566      -5886.93       5886.93       24796.6       30683.5    
  33  0.788693     -0.237378      -1776.62       1776.62       27069.4       28846.0    
  34  0.157754      -1.84672      -13821.5       13821.5       25090.1       38911.6    
  35  0.126279      -2.06926      -15487.1       15487.1       25007.1       40494.2    
  36  0.646962     -0.435467      -3259.19       3259.19       25051.9       28311.1    
  37  0.730769     -0.313658      -2347.52       2347.52       24998.7       27346.3    
  38  0.443446E-01  -3.11577      -23319.5       23319.5       22554.5       45874.0    
  39  0.219048      -1.51847      -11364.7       11364.7       21776.7       33141.4    
  40  0.311223E-01  -3.46983      -25969.4       25969.4       25083.9       51053.3    
  41  0.864417     -0.145700      -1090.47       1090.47       24693.2       25783.6    
  42  0.372606     -0.987233      -7388.79       7388.79       25038.7       32427.5    
  43  0.599250E-01  -2.81466      -21065.9       21065.9       24940.8       46006.7    
  44  0.250528      -1.38418      -10359.7       10359.7       24942.8       35302.5    
  45  0.404968E-01  -3.20653      -23998.8       23998.8       24798.0       48796.8    
  46  0.792822     -0.232156      -1737.54       1737.54       25066.1       26803.7    
  47  0.826691     -0.190324      -1424.45       1424.45       24905.9       26330.4    
  48  0.258424      -1.35316      -10127.5       10127.5       25059.5       35187.0    
  49  0.713620     -0.337405      -2525.26       2525.26       24655.6       27180.9    
  50  0.936186     -0.659413E-01  -493.527       493.527       24951.2       25444.8    
  51  0.655367E-01  -2.72514      -20395.9       20395.9       24970.4       45366.3    
  52  0.178790      -1.72154      -12884.6       12884.6       24959.5       37844.1    
  53  0.110644E-01  -4.50403      -33709.7       33709.7       24823.0       58532.8    
loop,thermsimp(1:2)        1   11046.3       2566.41    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     56      24717.88          0.90          1.20         21.87          0.26          0.05         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     57      24688.25          0.92          1.20         21.83          0.28          0.04         24.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24688.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        1
neval is:       55
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        2
neval is:       55


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       55     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -7799.02       7799.02       24967.8       32766.8    
   2  0.440787     -0.819193      -6131.13       6131.13       24946.8       31077.9    
   3  0.685789     -0.377185      -2822.99       2822.99       24951.2       27774.2    
   4  0.673104     -0.395856      -2962.72       2962.72       25081.3       28044.0    
   5  0.655536     -0.422301      -3160.65       3160.65       24693.2       27853.8    
   6  0.422838     -0.860766      -6442.27       6442.27       25015.8       31458.1    
   7  0.300870      -1.20108      -8989.28       8989.28       25088.0       34077.2    
   8  0.776987     -0.252331      -1888.53       1888.53       24905.9       26794.5    
   9  0.170551      -1.76872      -13237.7       13237.7       24949.0       38186.7    
  10  0.587497     -0.531884      -3980.81       3980.81       24117.1       28097.9    
  11  0.250425      -1.38459      -10362.8       10362.8       25066.1       35428.9    
  12  0.776362E-01  -2.55572      -19127.9       19127.9       24655.6       43783.5    
  13  0.766647     -0.265729      -1988.81       1988.81       26352.1       28340.9    
  14  0.480193     -0.733568      -5490.28       5490.28       24998.7       30489.0    
  15  0.434643     -0.833231      -6236.19       6236.19       24836.9       31073.1    
  16  0.815924E-01  -2.50602      -18755.9       18755.9       24959.2       43715.2    
  17  0.724257E-01  -2.62519      -19647.9       19647.9       25509.3       45157.1    
  18  0.573795     -0.555483      -4157.43       4157.43       25051.9       29209.3    
  19  0.196096      -1.62915      -12193.1       12193.1       27069.4       39262.5    
  20  0.240673      -1.42432      -10660.1       10660.1       24977.9       35638.0    
  21  0.194228      -1.63872      -12264.8       12264.8       28817.0       41081.7    
  22  0.236387      -1.44229      -10794.6       10794.6       24820.5       35615.1    
  23  0.261662      -1.34070      -10034.3       10034.3       24375.7       34410.0    
  24  0.146321      -1.92195      -14384.6       14384.6       25055.5       39440.1    
  25  0.169637      -1.77410      -13278.0       13278.0       24796.6       38074.5    
  26  0.886717     -0.120229      -899.837       899.837       24932.5       25832.3    
  27  0.253412      -1.37274      -10274.1       10274.1       25526.8       35800.9    
  28  0.470820     -0.753279      -5637.80       5637.80       25038.7       30676.5    
  29  0.329871      -1.10905      -8300.55       8300.55       24947.8       33248.4    
  30  0.726784     -0.319126      -2388.45       2388.45       21776.7       24165.1    
  31  0.612351     -0.490450      -3670.70       3670.70       24879.4       28550.1    
  32  0.146573      -1.92023      -14371.7       14371.7       24994.3       39366.0    
  33  0.812633     -0.207476      -1552.82       1552.82       25059.5       26612.3    
  34  0.486789     -0.719925      -5388.17       5388.17       24942.8       30330.9    
  35  0.653508     -0.425400      -3183.85       3183.85       25038.8       28222.6    
  36  0.180127      -1.71409      -12828.9       12828.9       24947.8       37776.7    
  37  0.155218      -1.86292      -13942.8       13942.8       25156.1       39098.9    
  38  0.830615     -0.185589      -1389.01       1389.01       24959.5       26348.5    
  39  0.728345     -0.316980      -2372.39       2372.39       24857.1       27229.5    
  40  0.262318      -1.33820      -10015.5       10015.5       25090.1       35105.6    
  41  0.234222      -1.45148      -10863.4       10863.4       25516.6       36380.0    
  42  0.250201      -1.38549      -10369.5       10369.5       25076.3       35445.8    
  43  0.898433     -0.107103      -801.599       801.599       25007.1       25808.7    
  44  0.580277     -0.544250      -4073.36       4073.36       25184.3       29257.7    
  45  0.823617     -0.194050      -1452.33       1452.33       24818.4       26270.7    
  46  0.820676     -0.197627      -1479.11       1479.11       24970.4       26449.5    
  47  0.502494     -0.688171      -5150.51       5150.51       22554.5       27705.0    
  48  0.751016     -0.286329      -2142.99       2142.99       24940.8       27083.8    
  49  0.360461      -1.02037      -7636.81       7636.81       25009.6       32646.4    
  50  0.948712     -0.526497E-01  -394.049       394.049       24798.0       25192.1    
  51  0.452918     -0.792045      -5927.94       5927.94       25083.9       31011.8    
  52  0.182886      -1.69889      -12715.1       12715.1       25138.6       37853.7    
  53  0.986780     -0.133085E-01  -99.6057       99.6057       24688.2       24787.9    
loop,thermsimp(1:2)        2   7799.02       6131.13    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     58      24544.36          0.89          1.18         21.86          0.23          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     59      25021.30          0.91          1.18         21.83          0.23          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24544.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        2
neval is:       57
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        3
neval is:       57


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       57     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -13355.1       13355.1       21776.7       35131.7    
   2  0.274399      -1.29317      -9678.55       9678.55       24688.2       34366.8    
   3  0.597410E-01  -2.81774      -21088.9       21088.9       24798.0       45887.0    
   4  0.283115E-01  -3.56449      -26677.9       26677.9       25007.1       51685.0    
   5  0.901069     -0.104174      -779.674       779.674       24932.5       25712.2    
   6  0.717939     -0.331371      -2480.10       2480.10       24818.4       27298.4    
   7  0.294866      -1.22123      -9140.14       9140.14       24959.5       34099.6    
   8  0.935651     -0.665127E-01  -497.804       497.804       24970.4       25468.2    
   9  0.314362      -1.15721      -8660.97       8660.97       25059.5       33720.4    
  10  0.807729     -0.213529      -1598.13       1598.13       24905.9       26504.0    
  11  0.757191     -0.278140      -2081.70       2081.70       24940.8       27022.5    
  12  0.508654     -0.675987      -5059.32       5059.32       24857.1       29916.4    
  13  0.722060     -0.325647      -2437.25       2437.25       22554.5       24991.7    
  14  0.424032     -0.857947      -6421.18       6421.18       24951.2       31372.4    
  15  0.786154     -0.240602      -1800.75       1800.75       24693.2       26493.9    
  16  0.399894     -0.916557      -6859.83       6859.83       25081.3       31941.1    
  17  0.757416     -0.277843      -2079.48       2079.48       24117.1       26196.6    
  18  0.637270     -0.450563      -3372.17       3372.17       25038.8       28410.9    
  19  0.586055     -0.534342      -3999.20       3999.20       26352.1       30351.3    
  20  0.821724     -0.196351      -1469.56       1469.56       24879.4       26349.0    
  21  0.921558     -0.816897E-01  -611.394       611.394       25051.9       25663.3    
  22  0.985596     -0.145083E-01  -108.585       108.585       25184.3       25292.9    
  23  0.257194      -1.35793      -10163.2       10163.2       24942.8       35106.0    
  24  0.921438E-01  -2.38440      -17845.7       17845.7       24998.7       42844.5    
  25  0.114653      -2.16584      -16209.9       16209.9       25038.7       41248.7    
  26  0.379827     -0.968040      -7245.15       7245.15       25083.9       32329.0    
  27  0.541451     -0.613503      -4591.67       4591.67       24836.9       29428.6    
  28  0.544274     -0.608302      -4552.75       4552.75       24946.8       29499.5    
  29  0.934365     -0.678883E-01  -508.100       508.100       25015.8       25523.9    
  30  0.266419E-01  -3.62527      -27132.8       27132.8       25009.6       52142.3    
  31  0.919572     -0.838466E-01  -627.537       627.537       24967.8       25595.3    
  32  0.864639     -0.145444      -1088.55       1088.55       24947.8       26036.4    
  33  0.341156      -1.07542      -8048.79       8048.79       25088.0       33136.7    
  34  0.803175     -0.219182      -1640.44       1640.44       24375.7       26016.2    
  35  0.699424     -0.357498      -2675.64       2675.64       25090.1       27765.7    
  36  0.223868E-01  -3.79928      -28435.2       28435.2       25066.1       53501.3    
  37  0.605689     -0.501389      -3752.57       3752.57       25076.3       28828.9    
  38  0.312349      -1.16363      -8709.04       8709.04       24820.5       33529.6    
  39  0.437501     -0.826675      -6187.13       6187.13       24977.9       31165.0    
  40  0.303330      -1.19293      -8928.33       8928.33       25526.8       34455.1    
  41  0.129735      -2.04226      -15285.0       15285.0       25516.6       40801.5    
  42  0.954352     -0.467224E-01  -349.687       349.687       24947.8       25297.5    
  43  0.519807     -0.654297      -4896.99       4896.99       25138.6       30035.6    
  44  0.950560     -0.507036E-01  -379.483       379.483       24796.6       25176.1    
  45  0.443941     -0.812064      -6077.77       6077.77       24949.0       31026.7    
  46  0.911446     -0.927229E-01  -693.971       693.971       25156.1       25850.1    
  47  0.782475     -0.245293      -1835.86       1835.86       27069.4       28905.3    
  48  0.412534     -0.885438      -6626.92       6626.92       24994.3       31621.2    
  49  0.843850     -0.169780      -1270.69       1270.69       25055.5       26326.2    
  50  0.149432      -1.90091      -14227.1       14227.1       28817.0       43044.1    
  51  0.292747      -1.22845      -9194.13       9194.13       24959.2       34153.4    
  52  0.579908E-02  -5.15006      -38544.8       38544.8       24655.6       63200.4    
  53  0.164431      -1.80526      -13511.2       13511.2       24544.4       38055.6    
loop,thermsimp(1:2)        3   13355.1       9678.55    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     60      25043.76          0.90          1.19         21.85          0.23          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     61      26690.72          0.91          1.19         21.67          0.47          0.05         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25043.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        3
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        4
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       59     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -929.271       929.271       22554.5       23483.8    
   2  0.114178      -2.16999      -16241.0       16241.0       24796.6       41037.6    
   3  0.217017      -1.52778      -11434.4       11434.4       25184.3       36618.7    
   4  0.138317      -1.97821      -14805.6       14805.6       24947.8       39753.4    
   5  0.832728     -0.183048      -1370.00       1370.00       24970.4       26340.4    
   6  0.390825     -0.939496      -7031.52       7031.52       25015.8       32047.4    
   7  0.283633      -1.26007      -9430.84       9430.84       24967.8       34398.6    
   8  0.725809     -0.320468      -2398.50       2398.50       25051.9       27450.4    
   9  0.506121     -0.680979      -5096.69       5096.69       24932.5       30029.2    
  10  0.216234      -1.53139      -11461.5       11461.5       25156.1       36617.6    
  11  0.637942     -0.449509      -3364.28       3364.28       24375.7       27740.0    
  12  0.536707     -0.622302      -4657.53       4657.53       24947.8       29605.4    
  13  0.231844      -1.46169      -10939.8       10939.8       24117.1       35056.9    
  14  0.491379     -0.710540      -5317.93       5317.93       25055.5       30373.5    
  15  0.825774     -0.191434      -1432.76       1432.76       24879.4       26312.2    
  16  0.671593     -0.398102      -2979.54       2979.54       24693.2       27672.7    
  17  0.549103     -0.599470      -4486.64       4486.64       24905.9       29392.6    
  18  0.659287     -0.416597      -3117.96       3117.96       24940.8       28058.8    
  19  0.205012      -1.58469      -11860.3       11860.3       24818.4       36678.7    
  20  0.400541E-02  -5.52011      -41314.4       41314.4       25090.1       66404.5    
  21  0.750831     -0.286575      -2144.83       2144.83       25038.8       27183.6    
  22  0.619921     -0.478162      -3578.73       3578.73       25076.3       28655.0    
  23  0.435226     -0.831889      -6226.15       6226.15       27069.4       33295.6    
  24  0.460974     -0.774414      -5795.99       5795.99       24836.9       30632.9    
  25  0.891582E-01  -2.41734      -18092.2       18092.2       24946.8       43039.0    
  26  0.589618E-01  -2.83087      -21187.2       21187.2       24857.1       46044.3    
  27  0.541391     -0.613613      -4592.49       4592.49       25138.6       29731.1    
  28  0.545108E-01  -2.90936      -21774.6       21774.6       26352.1       48126.7    
  29  0.744722     -0.294744      -2205.97       2205.97       24949.0       27154.9    
  30  0.712477     -0.339008      -2537.25       2537.25       24977.9       27515.1    
  31  0.563836     -0.572992      -4288.47       4288.47       24951.2       29239.7    
  32  0.161455      -1.82353      -13647.9       13647.9       24994.3       38642.2    
  33  0.640738     -0.445135      -3331.55       3331.55       25081.3       28412.8    
  34  0.157494      -1.84837      -13833.8       13833.8       25083.9       38917.7    
  35  0.695323     -0.363378      -2719.65       2719.65       25088.0       27807.6    
  36  0.792798     -0.232186      -1737.76       1737.76       24820.5       26558.3    
  37  0.940634     -0.612017E-01  -458.055       458.055       25059.5       25517.5    
  38  0.750008     -0.287672      -2153.04       2153.04       24959.5       27112.5    
  39  0.298939E-01  -3.51010      -26270.8       26270.8       24959.2       51230.1    
  40  0.633510     -0.456480      -3416.45       3416.45       24688.2       28104.7    
  41  0.465723     -0.764164      -5719.27       5719.27       25526.8       31246.1    
  42  0.916259     -0.874560E-01  -654.551       654.551       24942.8       25597.3    
  43  0.451376     -0.795456      -5953.47       5953.47       21776.7       27730.1    
  44  0.414090     -0.881672      -6598.74       6598.74       24544.4       31143.1    
  45  0.273092      -1.29795      -9714.29       9714.29       25516.6       35230.9    
  46  0.361379      -1.01783      -7617.77       7617.77       25038.7       32656.5    
  47  0.548848     -0.599934      -4490.11       4490.11       24998.7       29488.9    
  48  0.832309     -0.183552      -1373.77       1373.77       28817.0       30190.7    
  49  0.673017     -0.395985      -2963.69       2963.69       24798.0       27761.7    
  50  0.692516     -0.367425      -2749.93       2749.93       25007.1       27757.0    
  51  0.354468E-01  -3.33972      -24995.7       24995.7       25009.6       50005.2    
  52  0.987850     -0.122240E-01  -91.4884       91.4884       25066.1       25157.6    
  53  0.659676     -0.416007      -3113.54       3113.54       25043.8       28157.3    
loop,thermsimp(1:2)        4   929.271       16241.0    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     62      24873.85          0.90          1.18         21.88          0.23          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     63      41876.47          0.91          1.18         21.84          0.20          0.04         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    24874.        1.389     -2.191      2.922     -102.6     0.9717    
                      0.7625      1.319     -99.70      3.463     0.3695    

                       2.068     -2.040      1.540      7000.      7000.    

                      -1.955      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.742     -3.395     -8.409      6.636    

                      -14.17     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3785E-01 0.2812    -0.6679E-02 0.1778    

                     -0.2486    -0.1178     0.1662     0.1073     0.1184    



                     -0.4280    -0.4777      0.000     0.1114    -0.1251E-01

                     -0.2017E-01 0.1699    -0.7116    -0.8730E-01 0.2963    

                     -0.5634     0.2833E-01-0.5940     -1.216      7000.    



                      -1.217     -1.137     -2.142     -1.982    -0.3807    

                     -0.3252      9.518      8.818    -0.1672E+05 -6.000    

                     -0.3841     -2.336      8.718      8.818    -0.1969E+05



                      -6.000     0.6293    -0.3246      8.918      8.787    

                     -0.1944E+05 -6.000    -0.6042    -0.5885      9.618    

                       8.750    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24873.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        4
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        5
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       61     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -241.953       241.953       22554.5       22796.4    
   2  0.384676     -0.955353      -7150.19       7150.19       25066.1       32216.3    
   3  0.472770     -0.749146      -5606.87       5606.87       25059.5       30666.3    
   4  0.131186      -2.03114      -15201.7       15201.7       24942.8       40144.5    
   5  0.387497     -0.948046      -7095.51       7095.51       24879.4       31974.9    
   6  0.474858     -0.744739      -5573.88       5573.88       24970.4       30544.3    
   7  0.654056     -0.424563      -3177.57       3177.57       24820.5       27998.1    
   8  0.375266     -0.980119      -7335.55       7335.55       24959.5       32295.0    
   9  0.605577     -0.501574      -3753.95       3753.95       24949.0       28702.9    
  10  0.485605     -0.722360      -5406.40       5406.40       25038.8       30445.2    
  11  0.503843     -0.685490      -5130.45       5130.45       25051.9       30182.4    
  12  0.374521     -0.982108      -7350.44       7350.44       24977.9       32328.3    
  13  0.955542E-01  -2.34806      -17573.7       17573.7       24693.2       42266.9    
  14  0.902567     -0.102512      -767.236       767.236       21776.7       22543.9    
  15  0.347215      -1.05781      -7917.02       7917.02       24375.7       32292.7    
  16  0.893138     -0.113014      -845.838       845.838       25007.1       25852.9    
  17  0.561145     -0.577776      -4324.27       4324.27       24798.0       29122.3    
  18  0.667287     -0.404536      -3027.69       3027.69       25088.0       28115.6    
  19  0.601102     -0.508991      -3809.47       3809.47       24940.8       28750.3    
  20  0.569928     -0.562245      -4208.04       4208.04       24688.2       28896.3    
  21  0.655926     -0.421708      -3156.21       3156.21       25043.8       28200.0    
  22  0.355892      -1.03313      -7732.28       7732.28       25081.3       32813.6    
  23  0.208013      -1.57015      -11751.6       11751.6       25076.3       36827.9    
  24  0.879772     -0.128093      -958.691       958.691       24951.2       25909.9    
  25  0.114206E-01  -4.47233      -33472.5       33472.5       24905.9       58378.4    
  26  0.950245     -0.510357E-01  -381.969       381.969       24998.7       25380.7    
  27  0.321268      -1.13548      -8498.33       8498.33       24947.8       33446.2    
  28  0.379005     -0.970207      -7261.37       7261.37       25138.6       32399.9    
  29  0.117960      -2.13741      -15997.1       15997.1       24932.5       40929.6    
  30  0.822558     -0.195337      -1461.97       1461.97       28817.0       30278.9    
  31  0.671085     -0.398860      -2985.21       2985.21       25055.5       28040.7    
  32  0.220279      -1.51286      -11322.8       11322.8       24836.9       36159.7    
  33  0.836335     -0.178727      -1337.65       1337.65       24544.4       25882.0    
  34  0.982442E-01  -2.32030      -17365.9       17365.9       25526.8       42892.7    
  35  0.912526     -0.915389E-01  -685.109       685.109       25015.8       25701.0    
  36  0.758802     -0.276015      -2065.79       2065.79       25038.7       27104.5    
  37  0.562651     -0.575096      -4304.22       4304.22       27069.4       31373.6    
  38  0.248142      -1.39375      -10431.3       10431.3       24967.8       35399.1    
  39  0.864881     -0.145163      -1086.45       1086.45       24117.1       25203.6    
  40  0.495151     -0.702893      -5260.70       5260.70       25516.6       30777.3    
  41  0.112352E-01  -4.48870      -33595.0       33595.0       25156.1       58751.1    
  42  0.745500     -0.293700      -2198.15       2198.15       25184.3       27382.5    
  43  0.405071     -0.903693      -6763.55       6763.55       24818.4       31581.9    
  44  0.617259     -0.482466      -3610.95       3610.95       24994.3       28605.2    
  45  0.992755     -0.727089E-02  -54.4179       54.4179       25083.9       25138.3    
  46  0.888739     -0.117952      -882.795       882.795       24947.8       25830.6    
  47  0.976701     -0.235748E-01  -176.442       176.442       24796.6       24973.0    
  48  0.461976     -0.772242      -5779.73       5779.73       24946.8       30726.5    
  49  0.150581      -1.89325      -14169.8       14169.8       24857.1       39026.9    
  50  0.726286E-01  -2.62240      -19626.9       19626.9       26352.1       45979.0    
  51  0.280837      -1.26998      -9504.98       9504.98       25009.6       34514.5    
  52  0.727959     -0.317510      -2376.36       2376.36       24959.2       27335.6    
  53  0.565225     -0.570532      -4270.06       4270.06       24873.8       29143.9    
loop,thermsimp(1:2)        5   241.953       7150.19    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     64      24688.27          0.89          1.19         21.87          0.22          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24688.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        5
neval is:       62
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        6
neval is:       62


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       62     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -1611.99       1611.99       21776.7       23388.7    
   2  0.337878      -1.08507      -8121.05       8121.05       22554.5       30675.5    
   3  0.930612     -0.719127E-01  -538.220       538.220       24796.6       25334.8    
   4  0.843645     -0.170024      -1272.52       1272.52       25083.9       26356.4    
   5  0.757799     -0.277337      -2075.68       2075.68       24117.1       26192.8    
   6  0.627925     -0.465335      -3482.73       3482.73       24998.7       28481.5    
   7  0.412314     -0.885971      -6630.91       6630.91       25015.8       31646.8    
   8  0.282274      -1.26488      -9466.78       9466.78       24947.8       34414.6    
   9  0.426609E-01  -3.15447      -23609.2       23609.2       25007.1       48616.3    
  10  0.484876     -0.723862      -5417.63       5417.63       24544.4       29962.0    
  11  0.372210     -0.988296      -7396.75       7396.75       24951.2       32348.0    
  12  0.740507     -0.300421      -2248.45       2248.45       25038.7       27287.2    
  13  0.361519      -1.01744      -7614.89       7614.89       24959.2       32574.1    
  14  0.421034     -0.865042      -6474.28       6474.28       25184.3       31658.6    
  15  0.780595     -0.247699      -1853.87       1853.87       24820.5       26674.4    
  16  0.758410     -0.276531      -2069.65       2069.65       25055.5       27125.2    
  17  0.522921E-01  -2.95091      -22085.6       22085.6       25088.0       47173.6    
  18  0.609673     -0.494833      -3703.50       3703.50       25043.8       28747.3    
  19  0.204029      -1.58949      -11896.3       11896.3       24994.3       36890.6    
  20  0.516385     -0.660902      -4946.42       4946.42       24949.0       29895.4    
  21  0.323918      -1.12726      -8436.83       8436.83       24940.8       33377.6    
  22  0.671820     -0.397765      -2977.01       2977.01       24688.2       27665.3    
  23  0.850344     -0.162114      -1213.32       1213.32       24798.0       26011.3    
  24  0.515631     -0.662364      -4957.36       4957.36       24873.8       29831.2    
  25  0.919408     -0.840249E-01  -628.872       628.872       25051.9       25680.8    
  26  0.516519     -0.660643      -4944.48       4944.48       28817.0       33761.4    
  27  0.986900     -0.131869E-01  -98.6951       98.6951       25038.8       25137.4    
  28  0.127351      -2.06081      -15423.8       15423.8       24970.4       40394.2    
  29  0.775028E-01  -2.55744      -19140.8       19140.8       25059.5       44200.3    
  30  0.778307     -0.250634      -1875.83       1875.83       24946.8       26822.6    
  31  0.548570     -0.600441      -4493.91       4493.91       25516.6       30010.5    
  32  0.191672      -1.65197      -12363.9       12363.9       27069.4       39433.3    
  33  0.593733     -0.521326      -3901.79       3901.79       24818.4       28720.1    
  34  0.612853     -0.489631      -3664.57       3664.57       24879.4       28544.0    
  35  0.872749     -0.136107      -1018.67       1018.67       25066.1       26084.8    
  36  0.291105E-01  -3.53666      -26469.6       26469.6       24375.7       50845.3    
  37  0.310804      -1.16859      -8746.15       8746.15       24959.5       33705.6    
  38  0.238051      -1.43527      -10742.1       10742.1       24977.9       35720.0    
  39  0.600295     -0.510334      -3819.52       3819.52       25138.6       28958.1    
  40  0.856575     -0.154813      -1158.68       1158.68       25081.3       26240.0    
  41  0.127990      -2.05580      -15386.4       15386.4       24947.8       40334.2    
  42  0.390396E-01  -3.24318      -24273.1       24273.1       25009.6       49282.6    
  43  0.469298E-01  -3.05910      -22895.4       22895.4       24967.8       47863.2    
  44  0.170208      -1.77073      -13252.8       13252.8       24836.9       38089.7    
  45  0.457801     -0.781320      -5847.67       5847.67       25076.3       30924.0    
  46  0.451589     -0.794982      -5949.92       5949.92       24857.1       30807.0    
  47  0.601844     -0.507757      -3800.23       3800.23       24942.8       28743.0    
  48  0.923684     -0.793857E-01  -594.150       594.150       24932.5       25526.6    
  49  0.113154      -2.17901      -16308.4       16308.4       24693.2       41001.6    
  50  0.652894     -0.426340      -3190.88       3190.88       25526.8       28717.7    
  51  0.600010     -0.510809      -3823.07       3823.07       26352.1       30175.2    
  52  0.768679     -0.263082      -1969.00       1969.00       24905.9       26874.9    
  53  0.999310     -0.690144E-03  -5.16528       5.16528       24688.3       24693.4    
loop,thermsimp(1:2)        6   1611.99       8121.05    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65      25246.74          0.88          1.18         21.85          0.23          0.04         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66      26189.01          0.90          1.18         21.85          0.18          0.04         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25246.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        6
neval is:       64
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        7
neval is:       64


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       64     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -16012.7       16012.7       21776.7       37789.4    
   2  0.421875     -0.863045      -6459.33       6459.33       24688.3       31147.6    
   3  0.700103     -0.356528      -2668.38       2668.38       25038.8       27707.1    
   4  0.209367      -1.56367      -11703.0       11703.0       24796.6       36499.6    
   5  0.117251      -2.14344      -16042.2       16042.2       24932.5       40974.7    
   6  0.898330     -0.107218      -802.454       802.454       25051.9       25854.4    
   7  0.209806      -1.56157      -11687.4       11687.4       24798.0       36485.4    
   8  0.917155     -0.864790E-01  -647.239       647.239       25066.1       25713.4    
   9  0.120514E-01  -4.41857      -33070.1       33070.1       24117.1       57187.3    
  10  0.189983      -1.66082      -12430.2       12430.2       25081.3       37511.5    
  11  0.257131      -1.35817      -10165.0       10165.0       25083.9       35248.9    
  12  0.913158E-01  -2.39343      -17913.3       17913.3       24820.5       42733.8    
  13  0.336531      -1.08906      -8150.94       8150.94       24946.8       33097.7    
  14  0.318351      -1.14460      -8566.59       8566.59       24905.9       33472.5    
  15  0.919606     -0.838101E-01  -627.264       627.264       25055.5       25682.8    
  16  0.719771E-01  -2.63141      -19694.4       19694.4       25038.7       44733.1    
  17  0.788730E-01  -2.53992      -19009.6       19009.6       24688.2       43697.9    
  18  0.905929     -0.987941E-01  -739.409       739.409       24998.7       25738.2    
  19  0.665501     -0.407215      -3047.74       3047.74       24879.4       27927.2    
  20  0.812159     -0.208059      -1557.19       1557.19       25526.8       27084.0    
  21  0.412726E-01  -3.18756      -23856.8       23856.8       24818.4       48675.1    
  22  0.256064      -1.36233      -10196.1       10196.1       24942.8       35138.9    
  23  0.277519      -1.28187      -9593.93       9593.93       25043.8       34637.7    
  24  0.279550      -1.27457      -9539.35       9539.35       25138.6       34677.9    
  25  0.857884     -0.153286      -1147.25       1147.25       24873.8       26021.1    
  26  0.205158      -1.58398      -11855.0       11855.0       24949.0       36804.0    
  27  0.482085     -0.729635      -5460.85       5460.85       24544.4       30005.2    
  28  0.494966E-01  -3.00585      -22496.8       22496.8       25516.6       48013.4    
  29  0.338791      -1.08237      -8100.85       8100.85       26352.1       34452.9    
  30  0.249491E-01  -3.69092      -27624.1       27624.1       22554.5       50178.6    
  31  0.480710     -0.732491      -5482.22       5482.22       24857.1       30339.3    
  32  0.908951E-01  -2.39805      -17947.8       17947.8       25076.3       43024.1    
  33  0.283223      -1.26152      -9441.67       9441.67       25015.8       34457.5    
  34  0.277734      -1.28109      -9588.13       9588.13       25184.3       34772.4    
  35  0.504407     -0.684372      -5122.08       5122.08       24951.2       30073.3    
  36  0.251881      -1.37880      -10319.4       10319.4       24959.2       35278.6    
  37  0.568193     -0.565294      -4230.85       4230.85       24940.8       29171.6    
  38  0.186135      -1.68128      -12583.3       12583.3       24959.5       37542.8    
  39  0.964582     -0.360604E-01  -269.889       269.889       28817.0       29086.8    
  40  0.493045     -0.707155      -5292.59       5292.59       24947.8       30240.4    
  41  0.477950     -0.738248      -5525.31       5525.31       24977.9       30503.2    
  42  0.114879      -2.16388      -16195.2       16195.2       24994.3       41189.5    
  43  0.324003      -1.12700      -8434.87       8434.87       24836.9       33271.8    
  44  0.720573     -0.327708      -2452.68       2452.68       27069.4       29522.1    
  45  0.934913     -0.673019E-01  -503.711       503.711       24947.8       25451.5    
  46  0.516467     -0.660745      -4945.24       4945.24       24970.4       29915.7    
  47  0.351513      -1.04551      -7824.94       7824.94       24693.2       32518.1    
  48  0.310221      -1.17047      -8760.22       8760.22       25059.5       33819.7    
  49  0.467571     -0.760204      -5689.63       5689.63       25088.0       30777.6    
  50  0.700644     -0.355756      -2662.60       2662.60       24967.8       27630.4    
  51  0.608579E-01  -2.79921      -20950.3       20950.3       25007.1       45957.4    
  52  0.360106      -1.02136      -7644.19       7644.19       25009.6       32653.8    
  53  0.355744      -1.03354      -7735.41       7735.41       25246.7       32982.2    
loop,thermsimp(1:2)        7   16012.7       6459.33    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67      24776.81          0.89          1.19         21.86          0.24          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68      23821.85          0.90          1.18         21.65          0.44          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23821.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        7
neval is:       66
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        8
neval is:       66


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       66     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -5378.76       5378.76       24947.8       30326.6    
   2  0.568497     -0.564760      -4226.86       4226.86       25055.5       29282.4    
   3  0.632037E-01  -2.76139      -20667.2       20667.2       25066.1       45733.4    
   4  0.184325      -1.69105      -12656.4       12656.4       24998.7       37655.2    
   5  0.949772     -0.515332E-01  -385.692       385.692       25051.9       25437.6    
   6  0.512179     -0.669081      -5007.64       5007.64       24873.8       29881.5    
   7  0.573767     -0.555532      -4157.79       4157.79       25526.8       29684.6    
   8  0.590189     -0.527312      -3946.59       3946.59       24967.8       28914.4    
   9  0.323917      -1.12727      -8436.87       8436.87       25038.8       33475.6    
  10  0.246420E-01  -3.70330      -27716.8       27716.8       24879.4       52596.3    
  11  0.923153E-01  -2.38255      -17831.8       17831.8       28817.0       46648.8    
  12  0.236043      -1.44374      -10805.5       10805.5       24940.8       35746.3    
  13  0.885388     -0.121730      -911.066       911.066       27069.4       27980.5    
  14  0.617726     -0.481710      -3605.29       3605.29       24970.4       28575.7    
  15  0.349992      -1.04985      -7857.41       7857.41       24544.4       32401.8    
  16  0.892028     -0.114257      -855.142       855.142       24951.2       25806.4    
  17  0.382423     -0.961227      -7194.16       7194.16       24947.8       32142.0    
  18  0.850527     -0.161899      -1211.71       1211.71       24857.1       26068.8    
  19  0.653461     -0.425472      -3184.38       3184.38       24977.9       28162.3    
  20  0.413959     -0.881988      -6601.10       6601.10       25088.0       31689.1    
  21  0.807813     -0.213424      -1597.34       1597.34       24688.3       26285.6    
  22  0.348045      -1.05542      -7899.16       7899.16       24693.2       32592.3    
  23  0.435267     -0.831795      -6225.44       6225.44       25009.6       31235.0    
  24  0.434284     -0.834056      -6242.37       6242.37       25246.7       31489.1    
  25  0.983564     -0.165728E-01  -124.037       124.037       24946.8       25070.8    
  26  0.545923     -0.605277      -4530.10       4530.10       24836.9       29367.0    
  27  0.227140      -1.48219      -11093.2       11093.2       24905.9       35999.1    
  28  0.965085     -0.355395E-01  -265.990       265.990       25059.5       25325.5    
  29  0.183882      -1.69346      -12674.4       12674.4       26352.1       39026.5    
  30  0.187300E-02  -6.28022      -47003.3       47003.3       25015.8       72019.2    
  31  0.428736     -0.846914      -6338.60       6338.60       25043.8       31382.4    
  32  0.459764     -0.777041      -5815.65       5815.65       25138.6       30954.2    
  33  0.914786     -0.890649E-01  -666.593       666.593       25184.3       25850.9    
  34  0.872236     -0.136696      -1023.08       1023.08       24942.8       25965.9    
  35  0.789367     -0.236524      -1770.23       1770.23       25083.9       26854.1    
  36  0.619233E-01  -2.78186      -20820.4       20820.4       24959.2       45779.6    
  37  0.138004E-01  -4.28306      -32055.9       32055.9       24798.0       56853.9    
  38  0.287035      -1.24815      -9341.59       9341.59       24796.6       34138.2    
  39  0.138758E-01  -4.27761      -32015.1       32015.1       24949.0       56964.1    
  40  0.593330     -0.522005      -3906.87       3906.87       25081.3       28988.2    
  41  0.399445     -0.917679      -6868.23       6868.23       24959.5       31827.7    
  42  0.982947     -0.172001E-01  -128.732       128.732       21776.7       21905.4    
  43  0.259534      -1.34887      -10095.4       10095.4       24932.5       35027.9    
  44  0.816592E-01  -2.50520      -18749.8       18749.8       24994.3       43744.1    
  45  0.166083      -1.79527      -13436.4       13436.4       24820.5       38256.9    
  46  0.967370     -0.331741E-01  -248.287       248.287       25076.3       25324.6    
  47  0.371024     -0.991488      -7420.64       7420.64       24688.2       32108.9    
  48  0.941964     -0.597885E-01  -447.478       447.478       25038.7       25486.2    
  49  0.130219      -2.03854      -15257.1       15257.1       25007.1       40264.2    
  50  0.599455     -0.511734      -3830.00       3830.00       25516.6       29346.6    
  51  0.519323     -0.655230      -4903.97       4903.97       24818.4       29722.3    
  52  0.829175     -0.187324      -1402.00       1402.00       22554.5       23956.5    
  53  0.341525      -1.07433      -8040.69       8040.69       23821.8       31862.5    
loop,thermsimp(1:2)        8   5378.76       4226.86    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69      24590.16          0.89          1.18         21.87          0.24          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24590.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        8
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:        9
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       67     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -18204.7       18204.7       21776.7       39981.4    
   2  0.192227      -1.64908      -12342.3       12342.3       22554.5       34896.8    
   3  0.872733     -0.136126      -1018.82       1018.82       24946.8       25965.6    
   4  0.444113     -0.811675      -6074.86       6074.86       25076.3       31151.2    
   5  0.194382      -1.63793      -12258.8       12258.8       25059.5       37318.3    
   6  0.358074      -1.02702      -7686.55       7686.55       25051.9       32738.5    
   7  0.461693     -0.772855      -5784.32       5784.32       25038.7       30823.0    
   8  0.180202      -1.71368      -12825.8       12825.8       24951.2       37777.0    
   9  0.944954     -0.566187E-01  -423.754       423.754       25184.3       25608.1    
  10  0.738770     -0.302769      -2266.03       2266.03       24942.8       27208.8    
  11  0.822491E-01  -2.49800      -18695.9       18695.9       24857.1       43553.0    
  12  0.313602      -1.15963      -8679.08       8679.08       24688.3       33367.3    
  13  0.978185     -0.220567E-01  -165.080       165.080       25083.9       25248.9    
  14  0.540591E-01  -2.91768      -21836.9       21836.9       27069.4       48906.3    
  15  0.872885     -0.135951      -1017.51       1017.51       24977.9       25995.4    
  16  0.209079      -1.56504      -11713.3       11713.3       24970.4       36683.7    
  17  0.789205E-01  -2.53931      -19005.1       19005.1       24967.8       43972.9    
  18  0.746404     -0.292489      -2189.09       2189.09       25081.3       27270.4    
  19  0.110219      -2.20529      -16505.2       16505.2       25055.5       41560.7    
  20  0.656016     -0.421570      -3155.17       3155.17       25516.6       28671.7    
  21  0.665675     -0.406953      -3045.78       3045.78       24836.9       27882.7    
  22  0.563292     -0.573957      -4295.69       4295.69       25526.8       29822.5    
  23  0.615044     -0.486062      -3637.85       3637.85       24818.4       28456.2    
  24  0.128081      -2.05509      -15381.0       15381.0       24873.8       40254.9    
  25  0.459916     -0.776711      -5813.17       5813.17       24947.8       30761.0    
  26  0.433297     -0.836332      -6259.40       6259.40       25138.6       31398.0    
  27  0.225675      -1.48866      -11141.7       11141.7       25009.6       36151.2    
  28  0.808805     -0.212197      -1588.16       1588.16       25043.8       26631.9    
  29  0.578238     -0.547770      -4099.70       4099.70       25246.7       29346.4    
  30  0.569572     -0.562871      -4212.72       4212.72       25088.0       29300.7    
  31  0.291272      -1.23350      -9231.92       9231.92       24959.5       34191.4    
  32  0.144426      -1.93499      -14482.1       14482.1       23821.8       38304.0    
  33  0.908321     -0.961572E-01  -719.674       719.674       24688.2       25407.9    
  34  0.593166     -0.522281      -3908.94       3908.94       24947.8       28856.8    
  35  0.327630      -1.11587      -8351.57       8351.57       24544.4       32895.9    
  36  0.823214E-01  -2.49712      -18689.3       18689.3       24693.2       43382.5    
  37  0.742531     -0.297691      -2228.02       2228.02       25038.8       27266.8    
  38  0.476201E-01  -3.04450      -22786.1       22786.1       24796.6       47582.7    
  39  0.183829      -1.69375      -12676.6       12676.6       24932.5       37609.1    
  40  0.417257     -0.874053      -6541.72       6541.72       24940.8       31482.5    
  41  0.647723E-01  -2.73688      -20483.7       20483.7       24905.9       45389.7    
  42  0.123950E-01  -4.39046      -32859.7       32859.7       24998.7       57858.5    
  43  0.281372E-01  -3.57066      -26724.1       26724.1       24820.5       51544.6    
  44  0.883044     -0.124380      -930.903       930.903       26352.1       27283.0    
  45  0.445413     -0.808754      -6053.00       6053.00       25007.1       31060.1    
  46  0.418101     -0.872031      -6526.58       6526.58       24994.3       31520.9    
  47  0.301534      -1.19887      -8972.78       8972.78       25066.1       34038.9    
  48  0.674500     -0.393783      -2947.21       2947.21       24959.2       27906.4    
  49  0.732783     -0.310905      -2326.92       2326.92       28817.0       31143.9    
  50  0.970355     -0.300929E-01  -225.226       225.226       24879.4       25104.7    
  51  0.981589     -0.185824E-01  -139.077       139.077       24798.0       24937.1    
  52  0.677253     -0.389711      -2916.73       2916.73       24949.0       27865.7    
  53  0.800731     -0.222230      -1663.25       1663.25       24590.2       26253.4    
loop,thermsimp(1:2)        9   18204.7       12342.3    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     70      24474.27          0.89          1.18         21.85          0.23          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     71      23924.58          0.90          1.18         21.63          0.48          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23924.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:        9
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       10
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       69     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -3677.35       3677.35       24798.0       28475.4    
   2  0.877337     -0.130865      -979.437       979.437       24879.4       25858.9    
   3  0.821280     -0.196891      -1473.60       1473.60       25083.9       26557.5    
   4  0.989636     -0.104181E-01  -77.9727       77.9727       24688.2       24766.2    
   5  0.492813     -0.707625      -5296.11       5296.11       25184.3       30480.4    
   6  0.904083     -0.100835      -754.681       754.681       24946.8       25701.4    
   7  0.490620     -0.712086      -5329.50       5329.50       24977.9       30307.4    
   8  0.572439     -0.557850      -4175.14       4175.14       24590.2       28765.3    
   9  0.588753     -0.529749      -3964.83       3964.83       25043.8       29008.6    
  10  0.341799      -1.07353      -8034.68       8034.68       24942.8       32977.5    
  11  0.449605     -0.799385      -5982.88       5982.88       25038.8       31021.6    
  12  0.740720     -0.300132      -2246.29       2246.29       25081.3       27327.6    
  13  0.173164E-01  -4.05610      -30357.3       30357.3       26352.1       56709.4    
  14  0.828389     -0.188272      -1409.09       1409.09       24949.0       26358.1    
  15  0.110451      -2.20318      -16489.4       16489.4       24836.9       41326.3    
  16  0.646816     -0.435693      -3260.88       3260.88       24959.2       28220.1    
  17  0.857676     -0.153529      -1149.06       1149.06       24818.4       25967.4    
  18  0.691202E-02  -4.97449      -37230.8       37230.8       25516.6       62747.4    
  19  0.530885     -0.633210      -4739.16       4739.16       24947.8       29687.0    
  20  0.742957     -0.297117      -2223.73       2223.73       25088.0       27311.7    
  21  0.883526E-01  -2.42642      -18160.2       18160.2       25246.7       43406.9    
  22  0.599138     -0.512263      -3833.95       3833.95       25526.8       29360.8    
  23  0.476407     -0.741482      -5549.51       5549.51       24947.8       30497.3    
  24  0.509994E-01  -2.97594      -22273.0       22273.0       25038.7       47311.7    
  25  0.669768     -0.400824      -2999.91       2999.91       25007.1       28007.0    
  26  0.874430     -0.134183      -1004.27       1004.27       28817.0       29821.2    
  27  0.830739     -0.185440      -1387.89       1387.89       25076.3       26464.2    
  28  0.166673      -1.79172      -13409.9       13409.9       25138.6       38548.4    
  29  0.578742     -0.546898      -4093.17       4093.17       24940.8       29034.0    
  30  0.433531     -0.835791      -6255.35       6255.35       24994.3       31249.6    
  31  0.979127     -0.210935E-01  -157.871       157.871       25051.9       25209.8    
  32  0.310252      -1.17037      -8759.46       8759.46       24544.4       33303.8    
  33  0.686879     -0.375597      -2811.10       2811.10       24688.3       27499.4    
  34  0.243104      -1.41427      -10584.9       10584.9       25066.1       35651.0    
  35  0.459407     -0.777818      -5821.46       5821.46       24959.5       30781.0    
  36  0.332163      -1.10213      -8248.72       8248.72       22554.5       30803.2    
  37  0.512243     -0.668956      -5006.70       5006.70       25009.6       30016.3    
  38  0.323240      -1.12936      -8452.53       8452.53       24970.4       33422.9    
  39  0.667455     -0.404284      -3025.80       3025.80       25059.5       28085.3    
  40  0.460037     -0.776449      -5811.21       5811.21       24932.5       30743.7    
  41  0.227415      -1.48098      -11084.1       11084.1       24951.2       36035.4    
  42  0.636494     -0.451780      -3381.28       3381.28       23821.8       27203.1    
  43  0.432078     -0.839149      -6280.48       6280.48       21776.7       28057.2    
  44  0.609015     -0.495913      -3711.58       3711.58       24873.8       28585.4    
  45  0.427755     -0.849205      -6355.74       6355.74       25055.5       31411.3    
  46  0.496712     -0.699745      -5237.14       5237.14       24693.2       29930.3    
  47  0.295308      -1.21974      -9128.94       9128.94       24857.1       33986.1    
  48  0.928979     -0.736692E-01  -551.366       551.366       24967.8       25519.1    
  49  0.245696E-01  -3.70625      -27738.8       27738.8       24905.9       52644.8    
  50  0.833617E-01  -2.48457      -18595.4       18595.4       24796.6       43391.9    
  51  0.499690     -0.693767      -5192.40       5192.40       27069.4       32261.8    
  52  0.320552      -1.13771      -8515.02       8515.02       24820.5       33335.5    
  53  0.151030E-01  -4.19286      -31380.8       31380.8       23924.6       55305.4    
loop,thermsimp(1:2)       10   3677.35       979.437    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72      24665.68          0.90          1.18         21.84          0.26          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     73      30583.61          0.91          1.18         21.84          0.21          0.04         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24665.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       10
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       11
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       71     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -7713.65       7713.65       24688.2       32401.9    
   2  0.318207      -1.14505      -8569.99       8569.99       25051.9       33621.9    
   3  0.410972E-01  -3.19181      -23888.7       23888.7       24967.8       48856.4    
   4  0.217948      -1.52350      -11402.4       11402.4       24946.8       36349.1    
   5  0.460755     -0.774888      -5799.53       5799.53       24879.4       30679.0    
   6  0.694214     -0.364975      -2731.60       2731.60       24818.4       27549.9    
   7  0.237764      -1.43648      -10751.1       10751.1       24949.0       35700.0    
   8  0.635477     -0.453379      -3393.25       3393.25       25076.3       28469.5    
   9  0.882831E-01  -2.42721      -18166.1       18166.1       25083.9       43249.9    
  10  0.889613     -0.116969      -875.436       875.436       23821.8       24697.3    
  11  0.236395      -1.44225      -10794.3       10794.3       25088.0       35882.3    
  12  0.785560     -0.241359      -1806.41       1806.41       25081.3       26887.7    
  13  0.253594      -1.37202      -10268.7       10268.7       24688.3       34957.0    
  14  0.767743     -0.264300      -1978.12       1978.12       25007.1       26985.2    
  15  0.425111     -0.855405      -6402.15       6402.15       21776.7       28178.8    
  16  0.334680E-01  -3.39717      -25425.6       25425.6       25059.5       50485.0    
  17  0.737903     -0.303943      -2274.81       2274.81       24959.2       27234.1    
  18  0.530906     -0.633170      -4738.87       4738.87       24798.0       29536.9    
  19  0.811772     -0.208536      -1560.76       1560.76       24873.8       26434.6    
  20  0.781494     -0.246548      -1845.25       1845.25       24590.2       26435.4    
  21  0.668871     -0.402164      -3009.94       3009.94       25043.8       28053.7    
  22  0.609633     -0.494898      -3703.99       3703.99       24940.8       28644.8    
  23  0.732795E-01  -2.61347      -19560.2       19560.2       25526.8       45087.0    
  24  0.999755     -0.244962E-03  -1.83338       1.83338       24947.8       24949.7    
  25  0.556911     -0.585350      -4380.97       4380.97       28817.0       33197.9    
  26  0.381942     -0.962485      -7203.58       7203.58       24693.2       31896.8    
  27  0.230973      -1.46546      -10968.0       10968.0       25009.6       35977.5    
  28  0.791084     -0.234351      -1753.97       1753.97       24977.9       26731.8    
  29  0.122039      -2.10341      -15742.7       15742.7       25184.3       40927.0    
  30  0.411383     -0.888231      -6647.83       6647.83       24947.8       31595.7    
  31  0.753656     -0.282819      -2116.72       2116.72       24932.5       27049.2    
  32  0.846821     -0.166266      -1244.39       1244.39       24959.5       26203.9    
  33  0.577745     -0.548622      -4106.08       4106.08       22554.5       26660.6    
  34  0.859903     -0.150936      -1129.66       1129.66       25038.8       26168.4    
  35  0.915816     -0.879395E-01  -658.170       658.170       24994.3       25652.4    
  36  0.220499      -1.51186      -11315.3       11315.3       25055.5       36370.8    
  37  0.539962     -0.616256      -4612.28       4612.28       27069.4       31681.7    
  38  0.810725     -0.209827      -1570.42       1570.42       24942.8       26513.2    
  39  0.901567     -0.103621      -775.533       775.533       24544.4       25319.9    
  40  0.196148      -1.62888      -12191.1       12191.1       24820.5       37011.7    
  41  0.413437     -0.883250      -6610.55       6610.55       24970.4       31581.0    
  42  0.192892      -1.64562      -12316.4       12316.4       24857.1       37173.5    
  43  0.194290      -1.63840      -12262.4       12262.4       25066.1       37328.5    
  44  0.988313     -0.117563E-01  -87.9883       87.9883       24951.2       25039.2    
  45  0.917980     -0.855792E-01  -640.504       640.504       25138.6       25779.1    
  46  0.136083      -1.99449      -14927.4       14927.4       24836.9       39764.3    
  47  0.847126     -0.165905      -1241.69       1241.69       24796.6       26038.3    
  48  0.513003     -0.667474      -4995.60       4995.60       25246.7       30242.3    
  49  0.562161     -0.575967      -4310.73       4310.73       25038.7       29349.5    
  50  0.926079     -0.767957E-01  -574.765       574.765       24905.9       25480.7    
  51  0.890313     -0.116182      -869.546       869.546       23924.6       24794.1    
  52  0.857665     -0.153542      -1149.16       1149.16       26352.1       27501.3    
  53  0.599877     -0.511031      -3824.73       3824.73       24665.7       28490.4    
loop,thermsimp(1:2)       11   7713.65       8569.99    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74      24727.06          0.91          1.19         21.88          0.25          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75      25964.94          0.91          1.18         21.62          0.44          0.04         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24727.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       11
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       12
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       73     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -19289.4       19289.4       23821.8       43111.2    
   2  0.804470     -0.217571      -1628.38       1628.38       23924.6       25553.0    
   3  0.984017     -0.161120E-01  -120.588       120.588       24947.8       25068.4    
   4  0.587639     -0.531643      -3979.00       3979.00       24951.2       28930.2    
   5  0.523810     -0.646626      -4839.57       4839.57       24544.4       29383.9    
   6  0.930607     -0.719181E-01  -538.260       538.260       24905.9       25444.2    
   7  0.360114E-01  -3.32392      -24877.4       24877.4       24994.3       49871.6    
   8  0.963815     -0.368556E-01  -275.840       275.840       25138.6       25414.4    
   9  0.201264E-01  -3.90572      -29231.8       29231.8       24796.6       54028.4    
  10  0.954897     -0.461522E-01  -345.419       345.419       25038.8       25384.2    
  11  0.374160     -0.983071      -7357.65       7357.65       24959.5       32317.1    
  12  0.174967      -1.74316      -13046.4       13046.4       24873.8       37920.2    
  13  0.381618     -0.963335      -7209.93       7209.93       24590.2       31800.1    
  14  0.191097      -1.65498      -12386.4       12386.4       24942.8       37329.2    
  15  0.425287     -0.854991      -6399.05       6399.05       22554.5       28953.5    
  16  0.426180     -0.852893      -6383.35       6383.35       24977.9       31361.2    
  17  0.615671     -0.485042      -3630.22       3630.22       25081.3       28711.5    
  18  0.787264     -0.239192      -1790.20       1790.20       25007.1       26797.3    
  19  0.812636     -0.207472      -1552.79       1552.79       24932.5       26485.3    
  20  0.917241E-01  -2.38897      -17879.9       17879.9       24959.2       42839.1    
  21  0.671310     -0.398525      -2982.70       2982.70       26352.1       29334.8    
  22  0.548174     -0.601162      -4499.30       4499.30       24818.4       29317.7    
  23  0.134851      -2.00359      -14995.5       14995.5       25043.8       40039.3    
  24  0.373236     -0.985545      -7376.16       7376.16       21776.7       29152.8    
  25  0.578774     -0.546843      -4092.76       4092.76       25076.3       29169.1    
  26  0.910021     -0.942872E-01  -705.678       705.678       24665.7       25371.4    
  27  0.192323      -1.64858      -12338.5       12338.5       24940.8       37279.3    
  28  0.366342      -1.00419      -7515.69       7515.69       25038.7       32554.4    
  29  0.686994     -0.375430      -2809.85       2809.85       24798.0       27607.9    
  30  0.486551     -0.720414      -5391.83       5391.83       25246.7       30638.6    
  31  0.256801      -1.35945      -10174.6       10174.6       24879.4       35054.1    
  32  0.284977      -1.25535      -9395.46       9395.46       24970.4       34365.9    
  33  0.903072     -0.101953      -763.049       763.049       24947.8       25710.9    
  34  0.226450      -1.48523      -11116.0       11116.0       27069.4       38185.4    
  35  0.446078     -0.807261      -6041.82       6041.82       24693.2       30735.0    
  36  0.152634      -1.87971      -14068.4       14068.4       24688.2       38756.7    
  37  0.511955     -0.669518      -5010.91       5010.91       28817.0       33827.9    
  38  0.513138     -0.667210      -4993.63       4993.63       25051.9       30045.5    
  39  0.637309     -0.450501      -3371.71       3371.71       24688.3       28060.0    
  40  0.861477     -0.149107      -1115.97       1115.97       24949.0       26064.9    
  41  0.817364     -0.201671      -1509.37       1509.37       25088.0       26597.3    
  42  0.793820     -0.230898      -1728.12       1728.12       25009.6       26737.7    
  43  0.253309      -1.37315      -10277.1       10277.1       24946.8       35223.9    
  44  0.702532     -0.353065      -2642.46       2642.46       25055.5       27698.0    
  45  0.822324     -0.195620      -1464.09       1464.09       24820.5       26284.6    
  46  0.720485     -0.327831      -2453.60       2453.60       24857.1       27310.7    
  47  0.881589     -0.126029      -943.248       943.248       25066.1       26009.4    
  48  0.584479     -0.537035      -4019.36       4019.36       24836.9       28856.2    
  49  0.697197     -0.360688      -2699.51       2699.51       25184.3       27883.8    
  50  0.320931      -1.13653      -8506.19       8506.19       25083.9       33590.0    
  51  0.780071     -0.248371      -1858.89       1858.89       25526.8       27385.7    
  52  0.318322E-01  -3.44728      -25800.6       25800.6       24967.8       50768.4    
  53  0.693387     -0.366167      -2740.52       2740.52       24727.1       27467.6    
loop,thermsimp(1:2)       12   19289.4       1628.38    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76      25106.60          0.88          1.18         21.88          0.29          0.05         24.27
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77      45878.97          0.92          1.18         21.85          0.21          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25106.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       12
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       13
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       75     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -1021.36       1021.36       24947.8       25969.2    
   2  0.311340      -1.16687      -8733.26       8733.26       24665.7       33398.9    
   3  0.293828      -1.22476      -9166.54       9166.54       25038.8       34205.3    
   4  0.586668     -0.533296      -3991.38       3991.38       25138.6       29129.9    
   5  0.360311      -1.02079      -7639.94       7639.94       24905.9       32545.9    
   6  0.315643      -1.15314      -8630.52       8630.52       23924.6       32555.1    
   7  0.481464     -0.730923      -5470.48       5470.48       24947.8       30418.3    
   8  0.720279     -0.328116      -2455.74       2455.74       25066.1       27521.9    
   9  0.551471     -0.595166      -4454.43       4454.43       24949.0       29403.4    
  10  0.524434     -0.645435      -4830.66       4830.66       24820.5       29651.2    
  11  0.781600     -0.246412      -1844.23       1844.23       24932.5       26776.7    
  12  0.353648      -1.03945      -7779.63       7779.63       25088.0       32867.6    
  13  0.451044     -0.796190      -5958.97       5958.97       25009.6       30968.5    
  14  0.325353      -1.12284      -8403.75       8403.75       25007.1       33410.9    
  15  0.312157      -1.16425      -8713.64       8713.64       24857.1       33570.8    
  16  0.432418     -0.838362      -6274.59       6274.59       25526.8       31801.4    
  17  0.296543      -1.21556      -9097.69       9097.69       24727.1       33824.8    
  18  0.705416     -0.348967      -2611.79       2611.79       24798.0       27409.8    
  19  0.146505      -1.92069      -14375.1       14375.1       25055.5       39430.7    
  20  0.471608     -0.751607      -5625.29       5625.29       25184.3       30809.6    
  21  0.633095     -0.457134      -3421.35       3421.35       24688.3       28109.6    
  22  0.754855     -0.281230      -2104.82       2104.82       25081.3       27186.1    
  23  0.444501E-01  -3.11339      -23301.7       23301.7       24836.9       48138.6    
  24  0.160973      -1.82652      -13670.3       13670.3       24951.2       38621.5    
  25  0.943694     -0.579536E-01  -433.745       433.745       22554.5       22988.2    
  26  0.187304      -1.67502      -12536.5       12536.5       21776.7       34313.1    
  27  0.840922     -0.173257      -1296.71       1296.71       25076.3       26373.0    
  28  0.888648     -0.118054      -883.556       883.556       24818.4       25701.9    
  29  0.920614E-01  -2.38530      -17852.4       17852.4       26352.1       44204.5    
  30  0.906493     -0.981722E-01  -734.755       734.755       24544.4       25279.1    
  31  0.221761      -1.50616      -11272.6       11272.6       25051.9       36324.5    
  32  0.248725      -1.39141      -10413.8       10413.8       25246.7       35660.5    
  33  0.315928      -1.15224      -8623.78       8623.78       24693.2       33317.0    
  34  0.949967     -0.513283E-01  -384.159       384.159       24977.9       25362.0    
  35  0.802748     -0.219715      -1644.42       1644.42       24590.2       26234.6    
  36  0.558987     -0.581628      -4353.11       4353.11       24959.5       29312.6    
  37  0.638133     -0.449209      -3362.04       3362.04       25038.7       28400.8    
  38  0.637852     -0.449648      -3365.32       3365.32       25083.9       28449.2    
  39  0.382908     -0.959961      -7184.68       7184.68       28817.0       36001.6    
  40  0.982834     -0.173149E-01  -129.591       129.591       24970.4       25100.0    
  41  0.497022     -0.699120      -5232.46       5232.46       24879.4       30111.9    
  42  0.263620      -1.33325      -9978.48       9978.48       24946.8       34925.2    
  43  0.296939      -1.21423      -9087.72       9087.72       24940.8       34028.5    
  44  0.784161     -0.243141      -1819.75       1819.75       24942.8       26762.5    
  45  0.545321     -0.606380      -4538.36       4538.36       24873.8       29412.2    
  46  0.770080     -0.261260      -1955.36       1955.36       27069.4       29024.8    
  47  0.358755      -1.02511      -7672.31       7672.31       24688.2       32360.6    
  48  0.325126      -1.12354      -8408.99       8408.99       25043.8       33452.7    
  49  0.599396     -0.511832      -3830.73       3830.73       24959.2       28790.0    
  50  0.323708      -1.12791      -8441.70       8441.70       23821.8       32263.5    
  51  0.329142      -1.11127      -8317.10       8317.10       24994.3       33311.4    
  52  0.685661     -0.377371      -2824.38       2824.38       24967.8       27792.2    
  53  0.360361      -1.02065      -7638.88       7638.88       25106.6       32745.5    
loop,thermsimp(1:2)       13   1021.36       8733.26    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78      25882.43          0.89          1.18         21.84          0.27          0.04         24.21
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25882.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       13
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       14
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       76     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -7973.67       7973.67       22554.5       30528.2    
   2  0.267720      -1.31781      -9862.98       9862.98       24970.4       34833.4    
   3  0.279825      -1.27359      -9532.01       9532.01       24544.4       34076.4    
   4  0.281095      -1.26906      -9498.11       9498.11       24977.9       34476.0    
   5  0.245867      -1.40297      -10500.3       10500.3       24818.4       35318.6    
   6  0.914239     -0.896636E-01  -671.074       671.074       24947.8       25618.9    
   7  0.180116      -1.71415      -12829.3       12829.3       24590.2       37419.5    
   8  0.567917     -0.565780      -4234.50       4234.50       25076.3       29310.8    
   9  0.431941     -0.839465      -6282.85       6282.85       24942.8       31225.6    
  10  0.877920     -0.130199      -974.458       974.458       24932.5       25906.9    
  11  0.280355      -1.27170      -9517.83       9517.83       25081.3       34599.1    
  12  0.486947     -0.719601      -5385.74       5385.74       24798.0       30183.8    
  13  0.216546      -1.52995      -11450.7       11450.7       25066.1       36516.8    
  14  0.483718E-02  -5.33142      -39902.2       39902.2       24967.8       64870.0    
  15  0.785152E-03  -7.14963      -53510.4       53510.4       24688.3       78198.6    
  16  0.300781      -1.20137      -8991.49       8991.49       25038.7       34030.2    
  17  0.869691     -0.139618      -1044.95       1044.95       25083.9       26128.8    
  18  0.694261E-01  -2.66749      -19964.4       19964.4       24959.2       44923.7    
  19  0.635475     -0.453382      -3393.27       3393.27       27069.4       30462.7    
  20  0.894977     -0.110958      -830.445       830.445       25138.6       25969.0    
  21  0.442267     -0.815841      -6106.04       6106.04       24959.5       31065.5    
  22  0.283362      -1.26103      -9437.98       9437.98       24949.0       34386.9    
  23  0.518611     -0.656601      -4914.23       4914.23       24873.8       29788.1    
  24  0.858122E-01  -2.45559      -18378.5       18378.5       24820.5       43199.0    
  25  0.461153     -0.774026      -5793.08       5793.08       24879.4       30672.5    
  26  0.180026      -1.71465      -12833.1       12833.1       24947.8       37780.9    
  27  0.446938E-01  -3.10792      -23260.8       23260.8       25184.3       48445.1    
  28  0.152352      -1.88156      -14082.3       14082.3       25009.6       39091.8    
  29  0.163937E-01  -4.11086      -30767.1       30767.1       25526.8       56293.9    
  30  0.721347     -0.326635      -2444.65       2444.65       23821.8       26266.5    
  31  0.813323     -0.206626      -1546.46       1546.46       24688.2       26234.7    
  32  0.569343     -0.563273      -4215.73       4215.73       24905.9       29121.7    
  33  0.275899      -1.28772      -9637.74       9637.74       23924.6       33562.3    
  34  0.933187     -0.691492E-01  -517.537       517.537       25106.6       25624.1    
  35  0.716570     -0.333279      -2494.38       2494.38       25088.0       27582.3    
  36  0.405413     -0.902848      -6757.23       6757.23       24994.3       31751.5    
  37  0.907528     -0.970314E-01  -726.217       726.217       24693.2       25419.4    
  38  0.554651     -0.589416      -4411.39       4411.39       24665.7       29077.1    
  39  0.419962     -0.867592      -6493.36       6493.36       25007.1       31500.5    
  40  0.824173     -0.193375      -1447.29       1447.29       25043.8       26491.0    
  41  0.865647     -0.144278      -1079.83       1079.83       24857.1       25937.0    
  42  0.300944      -1.20083      -8987.45       8987.45       24727.1       33714.5    
  43  0.339688      -1.07973      -8081.07       8081.07       24940.8       33021.9    
  44  0.217032      -1.52771      -11433.9       11433.9       25038.8       36472.7    
  45  0.792618E-01  -2.53500      -18972.8       18972.8       21776.7       40749.5    
  46  0.997677     -0.232582E-02  -17.4072       17.4072       24946.8       24964.2    
  47  0.174239      -1.74733      -13077.6       13077.6       25246.7       38324.3    
  48  0.834084     -0.181422      -1357.82       1357.82       28817.0       30174.8    
  49  0.324404      -1.12577      -8425.63       8425.63       25051.9       33477.5    
  50  0.927598     -0.751564E-01  -562.497       562.497       24951.2       25513.7    
  51  0.981384     -0.187911E-01  -140.639       140.639       25055.5       25196.2    
  52  0.849105     -0.163572      -1224.23       1224.23       26352.1       27576.3    
  53  0.148698      -1.90584      -14264.0       14264.0       25882.4       40146.4    
loop,thermsimp(1:2)       14   7973.67       9862.98    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79      24976.10          0.90          1.19         21.87          0.24          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80      45531.82          0.91          1.19         21.82          0.21          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24976.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       14
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       15
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       78     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -11001.2       11001.2       24946.8       35948.0    
   2  0.322822      -1.13066      -8462.22       8462.22       25055.5       33517.7    
   3  0.327586      -1.11601      -8352.57       8352.57       24693.2       33045.7    
   4  0.799078     -0.224296      -1678.71       1678.71       24951.2       26629.9    
   5  0.698072     -0.359433      -2690.12       2690.12       24947.8       27638.0    
   6  0.733871     -0.309421      -2315.82       2315.82       25106.6       27422.4    
   7  0.823872     -0.193740      -1450.02       1450.02       24932.5       26382.5    
   8  0.800045     -0.223087      -1669.66       1669.66       24857.1       26526.8    
   9  0.162010      -1.82010      -13622.2       13622.2       25138.6       38760.8    
  10  0.113138      -2.17915      -16309.5       16309.5       25083.9       41393.3    
  11  0.973966     -0.263784E-01  -197.425       197.425       24688.2       24885.7    
  12  0.998107     -0.189521E-02  -14.1844       14.1844       23821.8       23836.0    
  13  0.631351     -0.459893      -3442.00       3442.00       25043.8       28485.8    
  14  0.698229     -0.359208      -2688.44       2688.44       26352.1       29040.5    
  15  0.359252      -1.02373      -7661.96       7661.96       25088.0       32749.9    
  16  0.936266     -0.658562E-01  -492.890       492.890       24665.7       25158.6    
  17  0.843107     -0.170662      -1277.29       1277.29       24905.9       26183.2    
  18  0.181284      -1.70769      -12781.0       12781.0       25076.3       37857.3    
  19  0.354246      -1.03777      -7767.00       7767.00       24873.8       32640.8    
  20  0.981540     -0.186324E-01  -139.451       139.451       28817.0       28956.4    
  21  0.582284E-01  -2.84338      -21280.9       21280.9       24798.0       46078.9    
  22  0.935088     -0.671143E-01  -502.307       502.307       27069.4       27571.7    
  23  0.682144     -0.382515      -2862.87       2862.87       22554.5       25417.4    
  24  0.441439     -0.817715      -6120.06       6120.06       24879.4       30999.5    
  25  0.325829      -1.12138      -8392.81       8392.81       24959.5       33352.3    
  26  0.956968E-01  -2.34657      -17562.6       17562.6       24942.8       42505.3    
  27  0.465124E-01  -3.06804      -22962.3       22962.3       25007.1       47969.4    
  28  0.645503     -0.437726      -3276.10       3276.10       24994.3       28270.4    
  29  0.184751      -1.68875      -12639.2       12639.2       24940.8       37580.0    
  30  0.676303     -0.391115      -2927.24       2927.24       25051.9       27979.1    
  31  0.408248     -0.895880      -6705.08       6705.08       23924.6       30629.7    
  32  0.215511      -1.53474      -11486.6       11486.6       24727.1       36213.6    
  33  0.762109     -0.271666      -2033.24       2033.24       25038.7       27072.0    
  34  0.445022     -0.809632      -6059.57       6059.57       24544.4       30603.9    
  35  0.667113     -0.404797      -3029.64       3029.64       24949.0       27978.6    
  36  0.995785     -0.422376E-02  -31.6121       31.6121       24977.9       25009.5    
  37  0.278840      -1.27712      -9558.40       9558.40       25081.3       34639.7    
  38  0.624255     -0.471196      -3526.60       3526.60       24970.4       28497.0    
  39  0.368212     -0.999097      -7477.59       7477.59       24818.4       32295.9    
  40  0.330266      -1.10786      -8291.60       8291.60       25038.8       33330.3    
  41  0.969155     -0.313304E-01  -234.488       234.488       25066.1       25300.6    
  42  0.686816     -0.375688      -2811.78       2811.78       24590.2       27401.9    
  43  0.201053      -1.60419      -12006.3       12006.3       24947.8       36954.1    
  44  0.481166     -0.731544      -5475.13       5475.13       25246.7       30721.9    
  45  0.992829     -0.719725E-02  -53.8667       53.8667       25009.6       25063.4    
  46  0.665697     -0.406921      -3045.54       3045.54       25882.4       28928.0    
  47  0.991934E-02  -4.61327      -34527.3       34527.3       21776.7       56304.0    
  48  0.211644      -1.55285      -11622.1       11622.1       24820.5       36442.6    
  49  0.908243E-01  -2.39883      -17953.7       17953.7       24959.2       42912.9    
  50  0.643762     -0.440426      -3296.31       3296.31       25184.3       28480.6    
  51  0.568794E-01  -2.86682      -21456.3       21456.3       25526.8       46983.1    
  52  0.159466      -1.83592      -13740.7       13740.7       24967.8       38708.5    
  53  0.918851     -0.846310E-01  -633.408       633.408       24976.1       25609.5    
loop,thermsimp(1:2)       15   11001.2       8462.22    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81      27893.49          0.90          1.20         21.86          0.22          0.04         24.21
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  27893.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       15
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       16
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       79     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -4368.96       4368.96       23821.8       28190.8    
   2  0.850944     -0.161409      -1208.04       1208.04       24688.2       25896.3    
   3  0.343999      -1.06712      -7986.67       7986.67       24977.9       32964.5    
   4  0.481777E-02  -5.33544      -39932.3       39932.3       25009.6       64941.9    
   5  0.146991      -1.91738      -14350.4       14350.4       24665.7       39016.0    
   6  0.545677     -0.605728      -4533.48       4533.48       25066.1       29599.6    
   7  0.761940     -0.271888      -2034.90       2034.90       22554.5       24589.4    
   8  0.944477     -0.571238E-01  -427.534       427.534       24976.1       25403.6    
   9  0.965249     -0.353688E-01  -264.712       264.712       24905.9       25170.6    
  10  0.634176     -0.455429      -3408.59       3408.59       24932.5       28341.1    
  11  0.793205     -0.231673      -1733.92       1733.92       24857.1       26591.0    
  12  0.743605     -0.296246      -2217.21       2217.21       24951.2       27168.4    
  13  0.983069E-01  -2.31966      -17361.2       17361.2       25038.7       42399.9    
  14  0.618437     -0.480560      -3596.68       3596.68       24590.2       28186.8    
  15  0.429182     -0.845875      -6330.82       6330.82       25106.6       31437.4    
  16  0.771528     -0.259382      -1941.30       1941.30       27069.4       29010.7    
  17  0.218286      -1.52195      -11390.8       11390.8       24947.8       36338.6    
  18  0.556408     -0.586254      -4387.73       4387.73       24949.0       29336.7    
  19  0.526292     -0.641899      -4804.20       4804.20       25051.9       29856.1    
  20  0.665532     -0.407169      -3047.40       3047.40       24994.3       28041.7    
  21  0.261756      -1.34034      -10031.6       10031.6       25184.3       35215.9    
  22  0.975508     -0.247971E-01  -185.590       185.590       25043.8       25229.3    
  23  0.257613      -1.35630      -10151.0       10151.0       24970.4       35121.4    
  24  0.981555E-01  -2.32120      -17372.7       17372.7       25882.4       43255.1    
  25  0.955054     -0.459870E-01  -344.183       344.183       28817.0       29161.1    
  26  0.887906     -0.118890      -889.813       889.813       26352.1       27241.9    
  27  0.407043     -0.898837      -6727.21       6727.21       24544.4       31271.6    
  28  0.876870     -0.131396      -983.416       983.416       23924.6       24908.0    
  29  0.957152     -0.437935E-01  -327.766       327.766       25246.7       25574.5    
  30  0.827730     -0.189068      -1415.05       1415.05       24879.4       26294.5    
  31  0.289027      -1.24124      -9289.84       9289.84       24818.4       34108.2    
  32  0.125230      -2.07760      -15549.5       15549.5       24873.8       40423.3    
  33  0.242443      -1.41699      -10605.2       10605.2       25088.0       35693.2    
  34  0.654103     -0.424490      -3177.03       3177.03       24693.2       27870.2    
  35  0.811871     -0.208414      -1559.84       1559.84       25038.8       26598.6    
  36  0.145201E-01  -4.23222      -31675.4       31675.4       24959.5       56634.9    
  37  0.344449      -1.06581      -7976.88       7976.88       25055.5       33032.4    
  38  0.265532      -1.32602      -9924.39       9924.39       25081.3       35005.7    
  39  0.811851     -0.208438      -1560.02       1560.02       24946.8       26506.8    
  40  0.983290E-01  -2.31944      -17359.5       17359.5       24727.1       42086.5    
  41  0.347314      -1.05753      -7914.90       7914.90       24820.5       32735.4    
  42  0.923773     -0.792888E-01  -593.425       593.425       24947.8       25541.3    
  43  0.690375     -0.370520      -2773.10       2773.10       24940.8       27713.9    
  44  0.227523      -1.48051      -11080.6       11080.6       25076.3       36156.9    
  45  0.652275     -0.427289      -3197.98       3197.98       24967.8       28165.8    
  46  0.669640     -0.401014      -3001.33       3001.33       25138.6       28139.9    
  47  0.288804      -1.24201      -9295.61       9295.61       25083.9       34379.5    
  48  0.404648     -0.904738      -6771.37       6771.37       24942.8       31714.1    
  49  0.371042     -0.991440      -7420.28       7420.28       24959.2       32379.5    
  50  0.308424      -1.17628      -8803.70       8803.70       24798.0       33601.7    
  51  0.911221     -0.929703E-01  -695.822       695.822       25526.8       26222.6    
  52  0.615436     -0.485425      -3633.09       3633.09       25007.1       28640.2    
  53  0.780328     -0.248041      -1856.42       1856.42       27893.5       29749.9    
loop,thermsimp(1:2)       16   4368.96       1208.04    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82      24676.46          0.89          1.18         21.86          0.23          0.05         24.21
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83      24610.11          0.91          1.19         21.84          0.25          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    24676.        1.433     -2.246      4.944     -102.6     0.9174    
                      0.8773      1.264     -99.70      3.408     0.3152    

                       2.013     -2.095      1.540      7000.      7000.    

                      -2.047      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.606     -3.259     -8.273      6.772    

                      -14.03     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5412E-01 0.2975    -0.5395E-01 0.1941    

                     -0.2486    -0.1015     0.1594     0.1235     0.1346    



                     -0.4144    -0.5741      0.000     0.1276     0.3757E-02

                     -0.3903E-02 0.1294    -0.7116    -0.1237     0.3126    

                      0.3154E-02 0.4459E-01-0.5859     -1.266      7000.    



                      -1.203     -1.162     -2.142     -1.982    -0.3807    

                     -0.3252      9.529      8.829    -0.1672E+05 -6.000    

                     -0.3570     -2.309      8.729      8.829    -0.1969E+05



                      -6.000     0.6564    -0.2975      8.892      8.778    

                     -0.1944E+05 -6.000    -0.5771    -0.5614      9.629    

                       8.720    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24610.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       16
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       17
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       81     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -2255.68       2255.68       22554.5       24810.2    
   2  0.527958     -0.638738      -4780.54       4780.54       23924.6       28705.1    
   3  0.326119      -1.12049      -8386.15       8386.15       24905.9       33292.1    
   4  0.647061     -0.435314      -3258.04       3258.04       25043.8       28301.8    
   5  0.419805     -0.867966      -6496.16       6496.16       24976.1       31472.3    
   6  0.218417      -1.52135      -11386.3       11386.3       24947.8       36334.1    
   7  0.168864      -1.77866      -13312.1       13312.1       25246.7       38558.9    
   8  0.761417     -0.272575      -2040.04       2040.04       24688.2       26728.3    
   9  0.383989     -0.957143      -7163.59       7163.59       25526.8       32690.4    
  10  0.104774      -2.25595      -16884.3       16884.3       24879.4       41763.8    
  11  0.167912      -1.78432      -13354.5       13354.5       24946.8       38301.2    
  12  0.997930     -0.207190E-02  -15.5068       15.5068       24857.1       24872.6    
  13  0.493294     -0.706650      -5288.82       5288.82       25038.8       30327.6    
  14  0.483048     -0.727639      -5445.91       5445.91       24951.2       30397.1    
  15  0.715967     -0.334121      -2500.68       2500.68       26352.1       28852.8    
  16  0.595423E-01  -2.82107      -21113.9       21113.9       24940.8       46054.6    
  17  0.636569     -0.451662      -3380.39       3380.39       24693.2       28073.6    
  18  0.482980     -0.727779      -5446.95       5446.95       24994.3       30441.2    
  19  0.500121     -0.692905      -5185.94       5185.94       25138.6       30324.5    
  20  0.426980     -0.851018      -6369.31       6369.31       24967.8       31337.1    
  21  0.546576     -0.604082      -4521.16       4521.16       24590.2       29111.3    
  22  0.142720      -1.94687      -14571.1       14571.1       23821.8       38392.9    
  23  0.473622     -0.747346      -5593.40       5593.40       24932.5       30525.9    
  24  0.892718E-01  -2.41607      -18082.7       18082.7       25007.1       43089.8    
  25  0.660659     -0.414518      -3102.39       3102.39       27069.4       30171.8    
  26  0.328755      -1.11244      -8325.91       8325.91       28817.0       37142.9    
  27  0.544150     -0.608530      -4554.45       4554.45       24949.0       29503.4    
  28  0.199068      -1.61411      -12080.6       12080.6       25066.1       37146.7    
  29  0.685070     -0.378234      -2830.84       2830.84       27893.5       30724.3    
  30  0.500258     -0.692632      -5183.90       5183.90       25051.9       30235.8    
  31  0.130607      -2.03556      -15234.9       15234.9       24544.4       39779.2    
  32  0.982013E-01  -2.32074      -17369.2       17369.2       25106.6       42475.8    
  33  0.581494E-01  -2.84474      -21291.0       21291.0       24942.8       46233.8    
  34  0.841391     -0.172699      -1292.54       1292.54       24959.2       26251.8    
  35  0.838937E-01  -2.47820      -18547.7       18547.7       24820.5       43368.3    
  36  0.729848     -0.314919      -2356.96       2356.96       24977.9       27334.8    
  37  0.748292     -0.289962      -2170.18       2170.18       25055.5       27225.7    
  38  0.229216      -1.47309      -11025.1       11025.1       24798.0       35823.2    
  39  0.710713     -0.341487      -2555.81       2555.81       24818.4       27374.2    
  40  0.511506     -0.670395      -5017.47       5017.47       25083.9       30101.3    
  41  0.106756      -2.23721      -16744.0       16744.0       25081.3       41825.3    
  42  0.583466     -0.538770      -4032.34       4032.34       24970.4       29002.8    
  43  0.993140E-01  -2.30947      -17284.9       17284.9       25184.3       42469.2    
  44  0.461224     -0.773871      -5791.92       5791.92       25088.0       30879.9    
  45  0.574465     -0.554316      -4148.69       4148.69       25076.3       29225.0    
  46  0.715977     -0.334107      -2500.58       2500.58       24947.8       27448.4    
  47  0.877584     -0.130583      -977.328       977.328       24665.7       25643.0    
  48  0.492354     -0.708558      -5303.09       5303.09       24873.8       30176.9    
  49  0.874926     -0.133616      -1000.03       1000.03       24727.1       25727.1    
  50  0.800367     -0.222685      -1666.65       1666.65       25038.7       26705.4    
  51  0.507308     -0.678636      -5079.15       5079.15       25882.4       30961.6    
  52  0.727831     -0.317686      -2377.67       2377.67       24959.5       27337.2    
  53  0.899777E-01  -2.40819      -18023.8       18023.8       24610.1       42633.9    
loop,thermsimp(1:2)       17   2255.68       4780.54    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84      24721.49          0.91          1.19         21.84          0.23          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85      24925.60          0.91          1.17         21.56          0.51          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24721.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       17
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       18
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       83     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -7185.62       7185.62       22554.5       29740.1    
   2  0.293468      -1.22599      -9175.72       9175.72       24857.1       34032.8    
   3  0.954036     -0.470539E-01  -352.168       352.168       24665.7       25017.9    
   4  0.452934     -0.792010      -5927.68       5927.68       24727.1       30654.7    
   5  0.251692      -1.37955      -10325.0       10325.0       24959.2       35284.3    
   6  0.881081     -0.126605      -947.559       947.559       25038.7       25986.3    
   7  0.855311     -0.156290      -1169.73       1169.73       24688.2       25858.0    
   8  0.576474     -0.550824      -4122.56       4122.56       25055.5       29178.1    
   9  0.433835     -0.835090      -6250.11       6250.11       24977.9       31228.0    
  10  0.298626      -1.20856      -9045.32       9045.32       24959.5       34004.8    
  11  0.269991      -1.30937      -9799.76       9799.76       24818.4       34618.1    
  12  0.884826     -0.122364      -915.815       915.815       24947.8       25863.6    
  13  0.664124     -0.409287      -3063.24       3063.24       24693.2       27756.4    
  14  0.580836     -0.543287      -4066.15       4066.15       25043.8       29109.9    
  15  0.285501      -1.25351      -9381.70       9381.70       23924.6       33306.3    
  16  0.690757     -0.369967      -2768.96       2768.96       26352.1       29121.1    
  17  0.578320     -0.547628      -4098.64       4098.64       24970.4       29069.1    
  18  0.563230     -0.574067      -4296.52       4296.52       24590.2       28886.7    
  19  0.681565     -0.383363      -2869.22       2869.22       25076.3       27945.5    
  20  0.453362     -0.791065      -5920.60       5920.60       24949.0       30869.6    
  21  0.645457     -0.437797      -3276.63       3276.63       25083.9       28360.5    
  22  0.982222E-01  -2.32052      -17367.6       17367.6       27069.4       44437.0    
  23  0.843064     -0.170712      -1277.67       1277.67       24873.8       26151.5    
  24  0.505683     -0.681845      -5103.17       5103.17       25051.9       30155.1    
  25  0.350376      -1.04875      -7849.21       7849.21       25138.6       32987.8    
  26  0.367167      -1.00194      -7498.87       7498.87       25038.8       32537.6    
  27  0.268175      -1.31611      -9850.26       9850.26       24951.2       34801.5    
  28  0.989085E-01  -2.31356      -17315.5       17315.5       24994.3       42309.8    
  29  0.349392      -1.05156      -7870.26       7870.26       24932.5       32802.7    
  30  0.945468     -0.560755E-01  -419.688       419.688       27893.5       28313.2    
  31  0.305400      -1.18613      -8877.42       8877.42       25088.0       33965.4    
  32  0.942706     -0.590006E-01  -441.581       441.581       25882.4       26324.0    
  33  0.778346     -0.250584      -1875.46       1875.46       24967.8       26843.2    
  34  0.256449      -1.36083      -10184.9       10184.9       24976.1       35161.0    
  35  0.338120      -1.08436      -8115.69       8115.69       25526.8       33642.5    
  36  0.644609     -0.439112      -3286.47       3286.47       24905.9       28192.4    
  37  0.420837     -0.865509      -6477.77       6477.77       24798.0       31275.8    
  38  0.793406     -0.231421      -1732.03       1732.03       24947.8       26679.9    
  39  0.685561     -0.377517      -2825.47       2825.47       28817.0       31642.4    
  40  0.278740      -1.27748      -9561.08       9561.08       25066.1       34627.2    
  41  0.414078     -0.881700      -6598.95       6598.95       24946.8       31545.7    
  42  0.999720     -0.280334E-03  -2.09812       2.09812       23821.8       23823.9    
  43  0.714259     -0.336509      -2518.55       2518.55       25246.7       27765.3    
  44  0.713371     -0.337753      -2527.86       2527.86       24544.4       27072.2    
  45  0.451360     -0.795490      -5953.73       5953.73       24879.4       30833.2    
  46  0.887280     -0.119595      -895.091       895.091       25081.3       25976.4    
  47  0.234319      -1.45107      -10860.3       10860.3       25184.3       36044.6    
  48  0.277567E-01  -3.58428      -26826.0       26826.0       25106.6       51932.6    
  49  0.582411     -0.540579      -4045.88       4045.88       24610.1       28656.0    
  50  0.969019     -0.314707E-01  -235.538       235.538       25007.1       25242.6    
  51  0.441889     -0.816696      -6112.44       6112.44       24820.5       30933.0    
  52  0.150247      -1.89548      -14186.4       14186.4       24940.8       39127.2    
  53  0.901555E-01  -2.40622      -18009.0       18009.0       24721.5       42730.5    
loop,thermsimp(1:2)       18   7185.62       9175.72    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86      24958.11          0.91          1.19         21.87          0.24          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87      55448.12          0.92          1.20         21.84          0.23          0.05         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24958.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       18
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       19
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       85     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -7793.53       7793.53       23821.8       31615.4    
   2  0.270835E-01  -3.60883      -27009.7       27009.7       24665.7       51675.4    
   3  0.923755     -0.793087E-01  -593.574       593.574       25007.1       25600.7    
   4  0.535520     -0.624517      -4674.10       4674.10       24688.2       29362.4    
   5  0.629344     -0.463078      -3465.84       3465.84       24947.8       28413.7    
   6  0.572648E-01  -2.86007      -21405.8       21405.8       25081.3       46487.0    
   7  0.353113E-01  -3.34355      -25024.3       25024.3       25038.7       50063.0    
   8  0.580838     -0.543283      -4066.12       4066.12       24873.8       28940.0    
   9  0.370403     -0.993164      -7433.18       7433.18       25882.4       33315.6    
  10  0.443010     -0.814162      -6093.47       6093.47       24947.8       31041.3    
  11  0.188704      -1.66757      -12480.7       12480.7       24967.8       37448.5    
  12  0.177608      -1.72818      -12934.3       12934.3       24544.4       37478.7    
  13  0.694998     -0.363847      -2723.16       2723.16       24693.2       27416.3    
  14  0.160742      -1.82796      -13681.1       13681.1       25246.7       38927.8    
  15  0.290050      -1.23770      -9263.40       9263.40       25076.3       34339.7    
  16  0.441138E-01  -3.12098      -23358.5       23358.5       24905.9       48264.4    
  17  0.372461     -0.987622      -7391.71       7391.71       27893.5       35285.2    
  18  0.652779     -0.426517      -3192.20       3192.20       25083.9       28276.1    
  19  0.998108     -0.189387E-02  -14.1744       14.1744       24610.1       24624.3    
  20  0.741140     -0.299566      -2242.06       2242.06       24590.2       26832.2    
  21  0.623042     -0.473141      -3541.16       3541.16       24970.4       28511.6    
  22  0.504617     -0.683955      -5118.96       5118.96       25043.8       30162.7    
  23  0.872499     -0.136394      -1020.82       1020.82       26352.1       27372.9    
  24  0.142620      -1.94757      -14576.3       14576.3       25055.5       39631.8    
  25  0.580285     -0.544236      -4073.25       4073.25       22554.5       26627.7    
  26  0.860063E-01  -2.45334      -18361.6       18361.6       25051.9       43413.5    
  27  0.401846     -0.911687      -6823.38       6823.38       24727.1       31550.4    
  28  0.161242      -1.82485      -13657.8       13657.8       24879.4       38537.3    
  29  0.550753     -0.596469      -4464.18       4464.18       24949.0       29413.1    
  30  0.815012     -0.204553      -1530.94       1530.94       24820.5       26351.5    
  31  0.438663     -0.824024      -6167.28       6167.28       24977.9       31145.2    
  32  0.542283     -0.611968      -4580.18       4580.18       24798.0       29378.2    
  33  0.943132E-01  -2.36113      -17671.6       17671.6       24946.8       42618.3    
  34  0.236587      -1.44144      -10788.2       10788.2       28817.0       39605.2    
  35  0.283068      -1.26207      -9445.75       9445.75       25038.8       34484.5    
  36  0.973178     -0.271886E-01  -203.489       203.489       24932.5       25136.0    
  37  0.596723     -0.516302      -3864.18       3864.18       25138.6       29002.7    
  38  0.595114     -0.519003      -3884.40       3884.40       23924.6       27809.0    
  39  0.948736     -0.526250E-01  -393.864       393.864       25526.8       25920.7    
  40  0.216072E-01  -3.83473      -28700.4       28700.4       25088.0       53788.4    
  41  0.440213     -0.820496      -6140.88       6140.88       24959.5       31100.4    
  42  0.905197     -0.996023E-01  -745.459       745.459       24857.1       25602.6    
  43  0.158396      -1.84266      -13791.1       13791.1       24818.4       38609.5    
  44  0.287789      -1.24553      -9321.96       9321.96       25066.1       34388.1    
  45  0.238244      -1.43446      -10736.0       10736.0       24951.2       35687.2    
  46  0.363881      -1.01093      -7566.13       7566.13       24976.1       32542.2    
  47  0.828805     -0.187771      -1405.34       1405.34       24959.2       26364.6    
  48  0.587140     -0.532492      -3985.36       3985.36       25184.3       29169.7    
  49  0.141687      -1.95414      -14625.5       14625.5       24940.8       39566.2    
  50  0.879115     -0.128839      -964.276       964.276       24994.3       25958.5    
  51  0.742190     -0.298150      -2231.46       2231.46       24721.5       26953.0    
  52  0.218958      -1.51887      -11367.8       11367.8       27069.4       38437.2    
  53  0.333192      -1.09904      -8225.58       8225.58       24958.1       33183.7    
loop,thermsimp(1:2)       19   7793.53       27009.7    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88      24713.16          0.91          1.20         21.86          0.26          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89      30702.07          0.92          1.18         21.67          0.43          0.04         24.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24713.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       19
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       20
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       87     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -4684.92       4684.92       24610.1       29295.0    
   2  0.288348      -1.24359      -9307.45       9307.45       24932.5       34239.9    
   3  0.910112E-01  -2.39677      -17938.3       17938.3       25007.1       42945.4    
   4  0.213812      -1.54266      -11545.8       11545.8       24857.1       36402.9    
   5  0.575222     -0.552999      -4138.84       4138.84       25526.8       29665.6    
   6  0.855707     -0.155827      -1166.26       1166.26       24994.3       26160.5    
   7  0.818692     -0.200047      -1497.22       1497.22       24820.5       26317.7    
   8  0.309911      -1.17147      -8767.70       8767.70       24959.2       33726.9    
   9  0.773438     -0.256910      -1922.80       1922.80       22554.5       24477.3    
  10  0.440502E-01  -3.12243      -23369.3       23369.3       24590.2       47959.5    
  11  0.211655      -1.55280      -11621.7       11621.7       24721.5       36343.2    
  12  0.713577     -0.337465      -2525.71       2525.71       26352.1       28877.8    
  13  0.927405     -0.753650E-01  -564.058       564.058       24693.2       25257.2    
  14  0.360229      -1.02101      -7641.62       7641.62       23924.6       31566.2    
  15  0.911872     -0.922553E-01  -690.471       690.471       25083.9       25774.3    
  16  0.800691     -0.222280      -1663.62       1663.62       24947.8       26611.5    
  17  0.169830      -1.77296      -13269.4       13269.4       24970.4       38239.9    
  18  0.581014     -0.542980      -4063.86       4063.86       24873.8       28937.7    
  19  0.869395     -0.139958      -1047.49       1047.49       25138.6       26186.1    
  20  0.773880     -0.256338      -1918.52       1918.52       25184.3       27102.8    
  21  0.496085     -0.701008      -5246.59       5246.59       24688.2       29934.8    
  22  0.530037     -0.634809      -4751.13       4751.13       24798.0       29549.2    
  23  0.239414      -1.42956      -10699.3       10699.3       24949.0       35648.3    
  24  0.595728     -0.517972      -3876.68       3876.68       25043.8       28920.4    
  25  0.170793      -1.76730      -13227.1       13227.1       24947.8       38175.0    
  26  0.983027     -0.171183E-01  -128.119       128.119       24959.5       25087.6    
  27  0.608714     -0.496407      -3715.28       3715.28       24977.9       28693.2    
  28  0.518727     -0.656378      -4912.56       4912.56       24727.1       29639.6    
  29  0.887918     -0.118876      -889.708       889.708       23821.8       24711.6    
  30  0.140498      -1.96256      -14688.5       14688.5       24976.1       39664.6    
  31  0.256308      -1.36138      -10189.0       10189.0       24958.1       35147.1    
  32  0.887238     -0.119642      -895.440       895.440       25882.4       26777.9    
  33  0.306042      -1.18403      -8861.71       8861.71       25076.3       33938.0    
  34  0.993873     -0.614632E-02  -46.0012       46.0012       25066.1       25112.1    
  35  0.275412E-01  -3.59207      -26884.3       26884.3       25038.8       51923.1    
  36  0.698960     -0.358161      -2680.60       2680.60       27893.5       30574.1    
  37  0.268424      -1.31519      -9843.31       9843.31       24951.2       34794.5    
  38  0.580935E-01  -2.84570      -21298.2       21298.2       24967.8       46266.0    
  39  0.242705      -1.41591      -10597.2       10597.2       24544.4       35141.5    
  40  0.443517     -0.813019      -6084.92       6084.92       27069.4       33154.3    
  41  0.904179     -0.100728      -753.882       753.882       24879.4       25633.3    
  42  0.454025     -0.789603      -5909.66       5909.66       24818.4       30728.0    
  43  0.592994     -0.522572      -3911.11       3911.11       25246.7       29157.9    
  44  0.401796     -0.911812      -6824.32       6824.32       24940.8       31765.1    
  45  0.130776      -2.03427      -15225.2       15225.2       28817.0       44042.1    
  46  0.709753     -0.342839      -2565.93       2565.93       25055.5       27621.4    
  47  0.388071     -0.946568      -7084.44       7084.44       24946.8       32031.2    
  48  0.362521      -1.01467      -7594.16       7594.16       25051.9       32646.1    
  49  0.285379      -1.25394      -9384.90       9384.90       25081.3       34466.2    
  50  0.286508      -1.24999      -9355.35       9355.35       24905.9       34261.3    
  51  0.951542     -0.496714E-01  -371.758       371.758       25038.7       25410.5    
  52  0.122933      -2.09612      -15688.1       15688.1       24665.7       40353.8    
  53  0.210928      -1.55624      -11647.4       11647.4       24713.2       36360.6    
loop,thermsimp(1:2)       20   4684.92       9307.45    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90      24738.36          0.90          1.19         21.86          0.25          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91      24660.35          0.91          1.18         21.88          0.23          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24660.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       20
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       21
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       89     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -9075.55       9075.55       22554.5       31630.0    
   2  0.663536     -0.410173      -3069.88       3069.88       23821.8       26891.7    
   3  0.263982      -1.33188      -9968.22       9968.22       24959.5       34927.7    
   4  0.792402     -0.232686      -1741.51       1741.51       25066.1       26807.6    
   5  0.624731     -0.470434      -3520.89       3520.89       24693.2       28214.1    
   6  0.170977      -1.76622      -13219.0       13219.0       25038.7       38257.8    
   7  0.362487      -1.01477      -7594.87       7594.87       24879.4       32474.3    
   8  0.659245     -0.416659      -3118.42       3118.42       25083.9       28202.3    
   9  0.746481E-03  -7.20014      -53888.4       53888.4       24994.3       78882.6    
  10  0.690046     -0.370998      -2776.68       2776.68       25138.6       27915.2    
  11  0.905636     -0.991173E-01  -741.828       741.828       24820.5       25562.3    
  12  0.317643      -1.14683      -8583.26       8583.26       24947.8       33531.1    
  13  0.321948      -1.13336      -8482.50       8482.50       25882.4       34364.9    
  14  0.293974      -1.22426      -9162.83       9162.83       25184.3       34347.1    
  15  0.679275     -0.386729      -2894.41       2894.41       25055.5       27949.9    
  16  0.180340      -1.71291      -12820.0       12820.0       24977.9       37797.9    
  17  0.539600     -0.616927      -4617.30       4617.30       26352.1       30969.4    
  18  0.260315      -1.34586      -10072.9       10072.9       25043.8       35116.7    
  19  0.256777      -1.35955      -10175.3       10175.3       24873.8       35049.2    
  20  0.518851     -0.656138      -4910.77       4910.77       25246.7       30157.5    
  21  0.485887     -0.721780      -5402.05       5402.05       24610.1       30012.2    
  22  0.562814     -0.574805      -4302.04       4302.04       24798.0       29100.1    
  23  0.906369     -0.983082E-01  -735.773       735.773       24727.1       25462.8    
  24  0.332143      -1.10219      -8249.17       8249.17       25526.8       33776.0    
  25  0.912001E-01  -2.39470      -17922.8       17922.8       24688.2       42611.0    
  26  0.302569      -1.19545      -8947.13       8947.13       27893.5       36840.6    
  27  0.362040      -1.01600      -7604.10       7604.10       24818.4       32422.5    
  28  0.630870     -0.460656      -3447.71       3447.71       23924.6       27372.3    
  29  0.685312     -0.377881      -2828.19       2828.19       24940.8       27769.0    
  30  0.329910      -1.10894      -8299.67       8299.67       24946.8       33246.4    
  31  0.906630E-01  -2.40061      -17967.0       17967.0       25051.9       43018.9    
  32  0.339749      -1.07955      -8079.73       8079.73       27069.4       35149.1    
  33  0.783039     -0.244573      -1830.47       1830.47       24959.2       26789.7    
  34  0.322673      -1.13112      -8465.67       8465.67       25076.3       33542.0    
  35  0.255311      -1.36527      -10218.2       10218.2       24932.5       35150.6    
  36  0.645921     -0.437078      -3271.24       3271.24       24905.9       28177.2    
  37  0.240122      -1.42661      -10677.2       10677.2       25081.3       35758.5    
  38  0.224638      -1.49326      -11176.1       11176.1       24951.2       36127.3    
  39  0.682659     -0.381760      -2857.22       2857.22       24544.4       27401.6    
  40  0.533856     -0.627629      -4697.39       4697.39       24958.1       29655.5    
  41  0.439620E-02  -5.42701      -40617.7       40617.7       24949.0       65566.6    
  42  0.409891     -0.891863      -6675.01       6675.01       24721.5       31396.5    
  43  0.379406     -0.969149      -7253.45       7253.45       24713.2       31966.6    
  44  0.982111     -0.180514E-01  -135.103       135.103       24857.1       24992.2    
  45  0.243530      -1.41251      -10571.7       10571.7       24947.8       35519.6    
  46  0.709323     -0.343445      -2570.46       2570.46       24970.4       27540.9    
  47  0.212014      -1.55110      -11609.0       11609.0       24976.1       36585.1    
  48  0.530919     -0.633146      -4738.69       4738.69       24665.7       29404.4    
  49  0.439600     -0.821890      -6151.31       6151.31       25007.1       31158.4    
  50  0.304385      -1.18946      -8902.34       8902.34       28817.0       37719.3    
  51  0.850253     -0.162221      -1214.12       1214.12       24967.8       26181.9    
  52  0.686564     -0.376055      -2814.53       2814.53       24590.2       27404.7    
  53  0.894299     -0.111715      -836.112       836.112       24660.4       25496.5    
loop,thermsimp(1:2)       21   9075.55       3069.88    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92      24702.70          0.91          1.18         21.86          0.23          0.05         24.23
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93      29314.76          0.91          1.19         21.82          0.24          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24702.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       21
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       22
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       91     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -7169.77       7169.77       24857.1       32026.9    
   2  0.741480     -0.299107      -2238.62       2238.62       24727.1       26965.7    
   3  0.138898      -1.97401      -14774.2       14774.2       24660.4       39434.6    
   4  0.751974E-01  -2.58764      -19366.8       19366.8       24820.5       44187.3    
   5  0.824485     -0.192996      -1444.45       1444.45       24967.8       26412.2    
   6  0.982900     -0.172482E-01  -129.092       129.092       24959.2       25088.3    
   7  0.693409     -0.366136      -2740.29       2740.29       25066.1       27806.4    
   8  0.941572     -0.602045E-01  -450.591       450.591       23821.8       24272.4    
   9  0.812713     -0.207378      -1552.09       1552.09       23924.6       25476.7    
  10  0.879507     -0.128393      -960.940       960.940       24544.4       25505.3    
  11  0.418958     -0.869984      -6511.26       6511.26       24590.2       31101.4    
  12  0.314952      -1.15533      -8646.92       8646.92       24970.4       33617.3    
  13  0.812426     -0.207731      -1554.73       1554.73       24940.8       26495.5    
  14  0.213788      -1.54277      -11546.6       11546.6       25138.6       36685.2    
  15  0.521629     -0.650798      -4870.80       4870.80       25055.5       29926.3    
  16  0.287143      -1.24777      -9338.78       9338.78       24905.9       34244.7    
  17  0.518340     -0.657125      -4918.15       4918.15       25083.9       30002.0    
  18  0.712802E-02  -4.94372      -37000.5       37000.5       24693.2       61693.7    
  19  0.579935     -0.544838      -4077.76       4077.76       24798.0       28875.8    
  20  0.508101E-02  -5.28224      -39534.2       39534.2       24665.7       64199.8    
  21  0.984466     -0.156557E-01  -117.173       117.173       24958.1       25075.3    
  22  0.394325     -0.930579      -6964.78       6964.78       24610.1       31574.9    
  23  0.837309     -0.177562      -1328.94       1328.94       25246.7       26575.7    
  24  0.683519     -0.380501      -2847.80       2847.80       26352.1       29199.9    
  25  0.892337     -0.113912      -852.556       852.556       25007.1       25859.7    
  26  0.297675      -1.21175      -9069.19       9069.19       24721.5       33790.7    
  27  0.566054     -0.569065      -4259.08       4259.08       22554.5       26813.6    
  28  0.325499E-01  -3.42498      -25633.8       25633.8       24713.2       50346.9    
  29  0.721169     -0.326882      -2446.50       2446.50       24818.4       27264.8    
  30  0.370449     -0.993040      -7432.26       7432.26       24879.4       32311.7    
  31  0.398952     -0.918913      -6877.47       6877.47       24946.8       31824.2    
  32  0.942469     -0.592518E-01  -443.461       443.461       24947.8       25391.3    
  33  0.379045     -0.970101      -7260.58       7260.58       25076.3       32336.9    
  34  0.218373      -1.52155      -11387.8       11387.8       25526.8       36914.6    
  35  0.413944     -0.882024      -6601.37       6601.37       25184.3       31785.7    
  36  0.452532     -0.792896      -5934.31       5934.31       25882.4       31816.7    
  37  0.938896     -0.630505E-01  -471.892       471.892       24959.5       25431.4    
  38  0.389299     -0.943409      -7060.80       7060.80       24873.8       31934.6    
  39  0.943794     -0.578471E-01  -432.948       432.948       25043.8       25476.7    
  40  0.706887     -0.346884      -2596.20       2596.20       27069.4       29665.6    
  41  0.274873      -1.29145      -9665.63       9665.63       24932.5       34598.1    
  42  0.343864      -1.06751      -7989.61       7989.61       24947.8       32937.4    
  43  0.869527E-01  -2.44239      -18279.7       18279.7       25081.3       43361.0    
  44  0.859615     -0.151271      -1132.16       1132.16       24951.2       26083.4    
  45  0.264079      -1.33151      -9965.46       9965.46       24976.1       34941.6    
  46  0.494871     -0.703457      -5264.92       5264.92       27893.5       33158.4    
  47  0.112943      -2.18087      -16322.4       16322.4       28817.0       45139.4    
  48  0.358273      -1.02646      -7682.39       7682.39       24977.9       32660.3    
  49  0.215257      -1.53592      -11495.4       11495.4       25038.7       36534.1    
  50  0.441681     -0.817166      -6115.96       6115.96       24688.2       30804.2    
  51  0.888276     -0.118473      -886.694       886.694       25051.9       25938.6    
  52  0.780286     -0.248095      -1856.83       1856.83       24949.0       26805.8    
  53  0.488747     -0.715911      -5358.13       5358.13       24702.7       30060.8    
loop,thermsimp(1:2)       22   7169.77       2238.62    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94      25520.30          0.90          1.20         21.85          0.26          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95      75709.72          0.91          1.19         21.84          0.23          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25520.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       22
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       23
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       93     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -8350.98       8350.98       23821.8       32172.8    
   2  0.736029     -0.306486      -2293.85       2293.85       24958.1       27252.0    
   3  0.608436     -0.496864      -3718.70       3718.70       24959.2       28677.9    
   4  0.584882     -0.536346      -4014.20       4014.20       24947.8       28962.0    
   5  0.617514     -0.482053      -3607.85       3607.85       24959.5       28567.3    
   6  0.376473     -0.976909      -7311.53       7311.53       23924.6       31236.1    
   7  0.535145     -0.625218      -4679.35       4679.35       25043.8       29723.1    
   8  0.341783      -1.07358      -8035.04       8035.04       24544.4       32579.4    
   9  0.804208E-01  -2.52048      -18864.2       18864.2       25007.1       43871.3    
  10  0.660499     -0.414760      -3104.21       3104.21       25051.9       28156.1    
  11  0.739860E-01  -2.60388      -19488.3       19488.3       24951.2       44439.6    
  12  0.203251      -1.59331      -11924.9       11924.9       24967.8       36892.7    
  13  0.637025     -0.450946      -3375.04       3375.04       24940.8       28315.8    
  14  0.687460     -0.374752      -2804.77       2804.77       25246.7       28051.5    
  15  0.663581     -0.410105      -3069.37       3069.37       24949.0       28018.3    
  16  0.579690     -0.545263      -4080.94       4080.94       22554.5       26635.4    
  17  0.775653     -0.254050      -1901.40       1901.40       24727.1       26628.5    
  18  0.284124      -1.25834      -9417.88       9417.88       24818.4       34236.2    
  19  0.317710      -1.14662      -8581.67       8581.67       25066.1       33647.8    
  20  0.958871     -0.419990E-01  -314.336       314.336       24798.0       25112.4    
  21  0.582932     -0.539685      -4039.19       4039.19       26352.1       30391.3    
  22  0.905476     -0.992942E-01  -743.152       743.152       27069.4       27812.6    
  23  0.225214      -1.49070      -11156.9       11156.9       25055.5       36212.5    
  24  0.618260     -0.480846      -3598.82       3598.82       25083.9       28682.7    
  25  0.608706     -0.496420      -3715.38       3715.38       24702.7       28418.1    
  26  0.651052     -0.429165      -3212.02       3212.02       24688.2       27900.3    
  27  0.138439E-02  -6.58249      -49265.7       49265.7       24590.2       73855.8    
  28  0.157375      -1.84913      -13839.5       13839.5       24610.1       38449.6    
  29  0.168063      -1.78342      -13347.7       13347.7       25184.3       38532.0    
  30  0.924354     -0.786598E-01  -588.718       588.718       25882.4       26471.1    
  31  0.985585     -0.145204E-01  -108.676       108.676       24946.8       25055.4    
  32  0.540844E-01  -2.91721      -21833.4       21833.4       24873.8       46707.3    
  33  0.535345     -0.624843      -4676.54       4676.54       24857.1       29533.7    
  34  0.736351     -0.306048      -2290.57       2290.57       24879.4       27170.0    
  35  0.283062E-01  -3.56467      -26679.3       26679.3       25076.3       51755.6    
  36  0.690743     -0.369987      -2769.11       2769.11       24977.9       27747.0    
  37  0.260994      -1.34326      -10053.4       10053.4       24947.8       35001.2    
  38  0.243637      -1.41208      -10568.5       10568.5       27893.5       38462.0    
  39  0.850226     -0.162253      -1214.36       1214.36       24970.4       26184.8    
  40  0.589307     -0.528809      -3957.79       3957.79       24721.5       28679.3    
  41  0.515087     -0.663420      -4965.27       4965.27       24905.9       29871.2    
  42  0.348855      -1.05310      -7881.77       7881.77       24932.5       32814.2    
  43  0.791407     -0.233943      -1750.91       1750.91       24976.1       26727.0    
  44  0.370775     -0.992160      -7425.67       7425.67       25038.7       32464.4    
  45  0.676021     -0.391531      -2930.36       2930.36       25138.6       28068.9    
  46  0.125601      -2.07465      -15527.4       15527.4       25526.8       41054.2    
  47  0.582904     -0.539733      -4039.55       4039.55       24660.4       28699.9    
  48  0.818994     -0.199679      -1494.47       1494.47       25081.3       26575.8    
  49  0.291406      -1.23304      -9228.49       9228.49       24820.5       34049.0    
  50  0.887104     -0.119794      -896.577       896.577       28817.0       29713.5    
  51  0.666242     -0.406102      -3039.41       3039.41       24713.2       27752.6    
  52  0.931047     -0.714460E-01  -534.727       534.727       24693.2       25227.9    
  53  0.169651      -1.77401      -13277.3       13277.3       25520.3       38797.6    
loop,thermsimp(1:2)       23   8350.98       2293.85    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96      25156.56          0.90          1.20         21.88          0.25          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97      38316.88          0.92          1.20         21.82          0.28          0.04         24.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25156.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       23
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       24
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       95     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -9226.02       9226.02       24946.8       34172.8    
   2  0.991852     -0.818183E-02  -61.2357       61.2357       24798.0       24859.3    
   3  0.317368      -1.14769      -8589.74       8589.74       24693.2       33282.9    
   4  0.737330     -0.304720      -2280.63       2280.63       24970.4       27251.0    
   5  0.834641     -0.180753      -1352.82       1352.82       25882.4       27235.2    
   6  0.464401     -0.767007      -5740.55       5740.55       25081.3       30821.8    
   7  0.592116     -0.524053      -3922.20       3922.20       24727.1       28649.3    
   8  0.464372     -0.767069      -5741.01       5741.01       22554.5       28295.5    
   9  0.636055E-01  -2.75505      -20619.8       20619.8       24976.1       45595.9    
  10  0.712927     -0.338376      -2532.52       2532.52       24879.4       27412.0    
  11  0.265597      -1.32578      -9922.57       9922.57       24958.1       34880.7    
  12  0.152318      -1.88178      -14083.9       14083.9       24977.9       39061.8    
  13  0.629580     -0.462703      -3463.03       3463.03       24713.2       28176.2    
  14  0.849464     -0.163150      -1221.07       1221.07       27069.4       28290.5    
  15  0.487816     -0.717817      -5372.39       5372.39       24688.2       30060.6    
  16  0.374667     -0.981718      -7347.52       7347.52       24949.0       32296.5    
  17  0.657383     -0.419488      -3139.59       3139.59       25246.7       28386.3    
  18  0.846901     -0.166172      -1243.69       1243.69       25138.6       26382.2    
  19  0.201185      -1.60353      -12001.4       12001.4       25051.9       37053.3    
  20  0.771980     -0.258797      -1936.93       1936.93       24940.8       26877.7    
  21  0.507739     -0.677788      -5072.80       5072.80       24702.7       29775.5    
  22  0.280262      -1.27203      -9520.33       9520.33       24959.5       34479.8    
  23  0.285359      -1.25401      -9385.43       9385.43       24959.2       34344.7    
  24  0.246191      -1.40165      -10490.4       10490.4       24721.5       35211.9    
  25  0.559989E-01  -2.88242      -21573.1       21573.1       25083.9       46656.9    
  26  0.330462      -1.10726      -8287.15       8287.15       24660.4       32947.5    
  27  0.899405     -0.106022      -793.507       793.507       24947.8       25741.3    
  28  0.637003     -0.450981      -3375.30       3375.30       24857.1       28232.4    
  29  0.699726E-01  -2.65965      -19905.8       19905.8       28817.0       48722.7    
  30  0.677191     -0.389802      -2917.41       2917.41       25043.8       27961.2    
  31  0.649507     -0.431542      -3229.81       3229.81       24905.9       28135.7    
  32  0.527986     -0.638685      -4780.14       4780.14       26352.1       31132.2    
  33  0.374870E-01  -3.28376      -24576.8       24576.8       23924.6       48501.4    
  34  0.448697     -0.801407      -5998.01       5998.01       23821.8       29819.9    
  35  0.809612     -0.211200      -1580.69       1580.69       25038.7       26619.4    
  36  0.836235     -0.178846      -1338.54       1338.54       24544.4       25882.9    
  37  0.198161      -1.61867      -12114.7       12114.7       24932.5       37047.2    
  38  0.222702      -1.50192      -11240.9       11240.9       25066.1       36307.0    
  39  0.888863     -0.117812      -881.745       881.745       24820.5       25702.3    
  40  0.868267     -0.141256      -1057.21       1057.21       24818.4       25875.6    
  41  0.164066      -1.80749      -13527.9       13527.9       24947.8       38475.7    
  42  0.163797      -1.80912      -13540.1       13540.1       25055.5       38595.6    
  43  0.883498     -0.123867      -927.061       927.061       24967.8       25894.8    
  44  0.749983     -0.287705      -2153.28       2153.28       24610.1       26763.4    
  45  0.666691     -0.405428      -3034.36       3034.36       27893.5       30927.9    
  46  0.978530     -0.217038E-01  -162.439       162.439       25184.3       25346.7    
  47  0.442024     -0.816391      -6110.16       6110.16       25520.3       31630.5    
  48  0.228080      -1.47806      -11062.3       11062.3       25526.8       36589.1    
  49  0.226174      -1.48645      -11125.1       11125.1       25007.1       36132.2    
  50  0.388394     -0.945736      -7078.22       7078.22       24951.2       32029.4    
  51  0.257425      -1.35703      -10156.5       10156.5       24873.8       35030.3    
  52  0.707288     -0.346317      -2591.96       2591.96       25076.3       27668.3    
  53  0.518387     -0.657032      -4917.46       4917.46       25156.6       30074.0    
loop,thermsimp(1:2)       24   9226.02       61.2357    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98      24776.33          0.90          1.18         21.86          0.23          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99      24666.34          0.90          1.17         21.83          0.18          0.04         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24666.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       24
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       25
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       97     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -14406.0       14406.0       24798.0       39204.1    
   2  0.438196     -0.825090      -6175.26       6175.26       25184.3       31359.6    
   3  0.637359     -0.450422      -3371.12       3371.12       24820.5       28191.6    
   4  0.122813      -2.09709      -15695.4       15695.4       24947.8       40643.2    
   5  0.926899     -0.759107E-01  -568.142       568.142       24818.4       25386.5    
   6  0.456580     -0.783992      -5867.67       5867.67       24544.4       30412.0    
   7  0.988763     -0.113008E-01  -84.5795       84.5795       24967.8       25052.4    
   8  0.499609     -0.693930      -5193.61       5193.61       25138.6       30332.2    
   9  0.432617     -0.837902      -6271.15       6271.15       25038.7       31309.9    
  10  0.403570     -0.907406      -6791.34       6791.34       24610.1       31401.4    
  11  0.435824     -0.830517      -6215.88       6215.88       24940.8       31156.7    
  12  0.504807     -0.683579      -5116.14       5116.14       25882.4       30998.6    
  13  0.778763     -0.250048      -1871.45       1871.45       24970.4       26841.9    
  14  0.429140     -0.845972      -6331.55       6331.55       24879.4       31211.0    
  15  0.597763     -0.514562      -3851.16       3851.16       25076.3       28927.5    
  16  0.425932     -0.853476      -6387.71       6387.71       25043.8       31431.5    
  17  0.825778     -0.191430      -1432.73       1432.73       24905.9       26338.6    
  18  0.448772     -0.801241      -5996.77       5996.77       24713.2       30709.9    
  19  0.701335     -0.354770      -2655.22       2655.22       24857.1       27512.3    
  20  0.425857     -0.853651      -6389.02       6389.02       27069.4       33458.4    
  21  0.800815     -0.222126      -1662.47       1662.47       22554.5       24217.0    
  22  0.724239     -0.322634      -2414.70       2414.70       25246.7       27661.4    
  23  0.312194      -1.16413      -8712.76       8712.76       24727.1       33439.8    
  24  0.796592     -0.227412      -1702.03       1702.03       24702.7       26404.7    
  25  0.164146      -1.80700      -13524.2       13524.2       23821.8       37346.1    
  26  0.503041     -0.687083      -5142.37       5142.37       24688.2       29830.6    
  27  0.640838     -0.444978      -3330.37       3330.37       25156.6       28486.9    
  28  0.327752      -1.11550      -8348.78       8348.78       25081.3       33430.1    
  29  0.720325     -0.328053      -2455.27       2455.27       27893.5       30348.8    
  30  0.447570     -0.803922      -6016.83       6016.83       26352.1       32368.9    
  31  0.377461     -0.974289      -7291.92       7291.92       25520.3       32812.2    
  32  0.951264     -0.499633E-01  -373.943       373.943       24951.2       25325.2    
  33  0.610405     -0.493632      -3694.52       3694.52       24949.0       28643.5    
  34  0.564697     -0.571466      -4277.05       4277.05       24660.4       28937.4    
  35  0.993998     -0.601974E-02  -45.0538       45.0538       24693.2       24738.2    
  36  0.908032     -0.964757E-01  -722.058       722.058       24946.8       25668.8    
  37  0.731210     -0.313055      -2343.01       2343.01       24959.2       27302.3    
  38  0.818812     -0.199901      -1496.13       1496.13       24959.5       26455.6    
  39  0.423172     -0.859976      -6436.36       6436.36       24958.1       31394.5    
  40  0.554414     -0.589843      -4414.59       4414.59       24873.8       29288.4    
  41  0.244903E-01  -3.70948      -27763.0       27763.0       24721.5       52484.5    
  42  0.337898      -1.08501      -8120.60       8120.60       25007.1       33127.7    
  43  0.634521E-01  -2.75747      -20637.9       20637.9       25066.1       45704.0    
  44  0.824978     -0.192398      -1439.98       1439.98       25526.8       26966.8    
  45  0.954123     -0.469622E-01  -351.481       351.481       24932.5       25284.0    
  46  0.807852     -0.213376      -1596.98       1596.98       25051.9       26648.9    
  47  0.335430      -1.09234      -8175.46       8175.46       24947.8       33123.3    
  48  0.266194      -1.32353      -9905.77       9905.77       25055.5       34961.3    
  49  0.797818     -0.225874      -1690.52       1690.52       24977.9       26668.4    
  50  0.710601     -0.341644      -2556.98       2556.98       24976.1       27533.1    
  51  0.469059     -0.757026      -5665.85       5665.85       25083.9       30749.7    
  52  0.256457E-01  -3.66338      -27418.0       27418.0       23924.6       51342.6    
  53  0.620630     -0.477020      -3570.19       3570.19       24666.3       28236.5    
loop,thermsimp(1:2)       25   14406.0       6175.26    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100      24825.36          0.90          1.18         21.85          0.21          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101      25069.59          0.91          1.19         21.84          0.23          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24825.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       25
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       26
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       99     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -1849.58       1849.58       22554.5       24404.1    
   2  0.928800     -0.738619E-01  -552.809       552.809       24693.2       25246.0    
   3  0.727994     -0.317462      -2376.00       2376.00       24967.8       27343.8    
   4  0.109723E-01  -4.51238      -33772.3       33772.3       24932.5       58704.7    
   5  0.160096      -1.83198      -13711.2       13711.2       24951.2       38662.4    
   6  0.497079     -0.699006      -5231.61       5231.61       24818.4       30050.0    
   7  0.789473     -0.236389      -1769.22       1769.22       24946.8       26716.0    
   8  0.763780     -0.269476      -2016.85       2016.85       24905.9       26922.8    
   9  0.217288      -1.52653      -11425.1       11425.1       24702.7       36127.8    
  10  0.867642     -0.141976      -1062.60       1062.60       24959.5       26022.1    
  11  0.740966     -0.299800      -2243.81       2243.81       25051.9       27295.7    
  12  0.999757     -0.242662E-03  -1.81617       1.81617       24977.9       24979.7    
  13  0.587476     -0.531920      -3981.07       3981.07       24970.4       28951.5    
  14  0.703619     -0.351518      -2630.89       2630.89       25526.8       28157.7    
  15  0.740946     -0.299828      -2244.02       2244.02       24959.2       27203.3    
  16  0.335927      -1.09086      -8164.38       8164.38       24857.1       33021.5    
  17  0.736553     -0.305774      -2288.52       2288.52       24976.1       27264.6    
  18  0.597397     -0.515174      -3855.74       3855.74       25246.7       29102.5    
  19  0.126601      -2.06672      -15468.0       15468.0       24820.5       40288.6    
  20  0.990194     -0.985477E-02  -73.7565       73.7565       24666.3       24740.1    
  21  0.716453     -0.333443      -2495.61       2495.61       25156.6       27652.2    
  22  0.279233E-01  -3.57829      -26781.2       26781.2       24949.0       51730.2    
  23  0.413932     -0.882054      -6601.60       6601.60       25076.3       31677.9    
  24  0.109516      -2.21168      -16553.0       16553.0       24660.4       41213.4    
  25  0.440749     -0.819279      -6131.77       6131.77       24873.8       31005.6    
  26  0.412115     -0.886453      -6634.52       6634.52       24688.2       31322.8    
  27  0.146963      -1.91758      -14351.8       14351.8       25138.6       39490.4    
  28  0.345919      -1.06155      -7945.01       7945.01       27893.5       35838.5    
  29  0.343614      -1.06824      -7995.05       7995.05       24544.4       32539.4    
  30  0.600334E-01  -2.81285      -21052.4       21052.4       24713.2       45765.5    
  31  0.751538     -0.285634      -2137.78       2137.78       25083.9       27221.6    
  32  0.878119     -0.129973      -972.766       972.766       25882.4       26855.2    
  33  0.544046     -0.608721      -4555.88       4555.88       24940.8       29496.7    
  34  0.931023     -0.714714E-01  -534.917       534.917       24879.4       25414.4    
  35  0.131968      -2.02520      -15157.3       15157.3       25038.7       40196.0    
  36  0.826694E-01  -2.49291      -18657.8       18657.8       25184.3       43842.1    
  37  0.174702E-02  -6.34984      -47524.4       47524.4       24958.1       72482.6    
  38  0.233470      -1.45470      -10887.5       10887.5       24610.1       35497.6    
  39  0.232927      -1.45703      -10904.9       10904.9       25043.8       35948.7    
  40  0.958279     -0.426163E-01  -318.956       318.956       26352.1       26671.1    
  41  0.820100     -0.198330      -1484.37       1484.37       25520.3       27004.7    
  42  0.305797      -1.18483      -8867.72       8867.72       24947.8       33815.5    
  43  0.260853      -1.34380      -10057.5       10057.5       25007.1       35064.6    
  44  0.960408     -0.403967E-01  -302.343       302.343       25081.3       25383.6    
  45  0.318957      -1.14270      -8552.35       8552.35       24727.1       33279.4    
  46  0.146887      -1.91809      -14355.7       14355.7       27069.4       41425.1    
  47  0.787623     -0.238735      -1786.78       1786.78       25055.5       26842.3    
  48  0.452412     -0.793163      -5936.31       5936.31       23821.8       29758.2    
  49  0.218339      -1.52170      -11389.0       11389.0       24798.0       36187.0    
  50  0.177672      -1.72782      -12931.6       12931.6       24947.8       37879.4    
  51  0.928922     -0.737304E-01  -551.824       551.824       25066.1       25618.0    
  52  0.341447      -1.07456      -8042.40       8042.40       23924.6       31967.0    
  53  0.462674     -0.770732      -5768.43       5768.43       24825.4       30593.8    
loop,thermsimp(1:2)       26   1849.58       552.809    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102      25044.76          0.89          1.18         21.90          0.21          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    25045.        1.447     -2.262      2.962     -102.6     0.9009    
                      0.7561      1.641     -99.70      3.392     0.2987    

                       1.997     -2.111      1.540      7000.      7000.    

                      -2.048      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.565     -4.032     -8.232      6.813    

                      -13.99     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2350E-02 0.3024    -0.3314E-02 0.1990    

                     -0.2486    -0.9657E-01 0.1272     0.6504E-01 0.1396    



                     -0.4103    -0.5786      0.000     0.1326     0.8723E-02

                      0.1063E-02 0.1789    -0.7116    -0.6896     0.3175    

                     -0.2739E-03 0.4956E-01-0.5834     -1.272      7000.    



                      -1.199     -1.134     -2.142     -1.982    -0.3807    

                     -0.3252      9.532      8.832    -0.1672E+05 -6.000    

                     -0.3487     -2.301      8.752      8.832    -0.1969E+05



                      -6.000     0.6647    -0.2892      8.888      8.776    

                     -0.1944E+05 -6.000    -0.5688    -0.5531      9.632    

                       8.711    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25044.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       26
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       27
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      100     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -1498.90       1498.90       22554.5       24053.4    
   2  0.309452      -1.17295      -8778.79       8778.79       24666.3       33445.1    
   3  0.303638      -1.19192      -8920.74       8920.74       24977.9       33898.6    
   4  0.754457     -0.281757      -2108.77       2108.77       24693.2       26801.9    
   5  0.623133     -0.472996      -3540.07       3540.07       25081.3       28621.4    
   6  0.989422E-01  -2.31322      -17312.9       17312.9       24879.4       42192.4    
   7  0.695126     -0.363662      -2721.77       2721.77       25066.1       27787.9    
   8  0.832210E-01  -2.48626      -18608.0       18608.0       24959.5       43567.5    
   9  0.869521     -0.139813      -1046.41       1046.41       26352.1       27398.5    
  10  0.488136     -0.717160      -5367.48       5367.48       24946.8       30314.2    
  11  0.579877     -0.544940      -4078.52       4078.52       25055.5       29134.0    
  12  0.480435     -0.733064      -5486.50       5486.50       25882.4       31368.9    
  13  0.792626     -0.232404      -1739.39       1739.39       24905.9       26645.3    
  14  0.870230     -0.138998      -1040.31       1040.31       25520.3       26560.6    
  15  0.886361     -0.120631      -902.843       902.843       24959.2       25862.1    
  16  0.358181      -1.02672      -7684.31       7684.31       25083.9       32768.2    
  17  0.560125     -0.579594      -4337.89       4337.89       24976.1       29314.0    
  18  0.546151     -0.604859      -4526.98       4526.98       25051.9       29578.9    
  19  0.732086     -0.311858      -2334.05       2334.05       24967.8       27301.8    
  20  0.590102     -0.527460      -3947.69       3947.69       25156.6       29104.3    
  21  0.867355     -0.142307      -1065.08       1065.08       25526.8       26591.9    
  22  0.749758     -0.288005      -2155.53       2155.53       24970.4       27125.9    
  23  0.721970     -0.325772      -2438.19       2438.19       25246.7       27684.9    
  24  0.596865     -0.516065      -3862.41       3862.41       24940.8       28803.2    
  25  0.878161     -0.129925      -972.403       972.403       23821.8       24794.2    
  26  0.558752E-01  -2.88463      -21589.6       21589.6       24818.4       46408.0    
  27  0.555543     -0.587810      -4399.37       4399.37       24825.4       29224.7    
  28  0.597562     -0.514897      -3853.67       3853.67       24873.8       28727.5    
  29  0.995329     -0.468202E-02  -35.0419       35.0419       24688.2       24723.3    
  30  0.206787      -1.57606      -11795.8       11795.8       25076.3       36872.1    
  31  0.645457     -0.437797      -3276.63       3276.63       23924.6       27201.2    
  32  0.871352     -0.137710      -1030.67       1030.67       24544.4       25575.0    
  33  0.701360     -0.354733      -2654.95       2654.95       24857.1       27512.1    
  34  0.936151     -0.659784E-01  -493.806       493.806       24727.1       25220.9    
  35  0.590091     -0.527478      -3947.83       3947.83       24947.8       28895.7    
  36  0.750433     -0.287105      -2148.79       2148.79       25007.1       27155.9    
  37  0.326255      -1.12007      -8383.03       8383.03       24610.1       32993.1    
  38  0.873133     -0.135668      -1015.39       1015.39       27893.5       28908.9    
  39  0.621627     -0.475415      -3558.17       3558.17       25043.8       28601.9    
  40  0.153041      -1.87705      -14048.5       14048.5       24702.7       38751.2    
  41  0.196696      -1.62610      -12170.3       12170.3       24798.0       36968.3    
  42  0.365028      -1.00778      -7542.58       7542.58       24947.8       32490.4    
  43  0.398429     -0.920226      -6887.29       6887.29       24951.2       31838.5    
  44  0.549691     -0.598399      -4478.63       4478.63       25138.6       29617.2    
  45  0.994179     -0.583795E-02  -43.6933       43.6933       25038.7       25082.4    
  46  0.147335E-01  -4.21763      -31566.2       31566.2       24820.5       56386.8    
  47  0.224737      -1.49282      -11172.8       11172.8       24660.4       35833.2    
  48  0.182172      -1.70281      -12744.4       12744.4       27069.4       39813.8    
  49  0.230919      -1.46569      -10969.7       10969.7       25184.3       36154.0    
  50  0.491818     -0.709647      -5311.24       5311.24       24713.2       30024.4    
  51  0.370754     -0.992217      -7426.10       7426.10       24949.0       32375.1    
  52  0.785622     -0.241279      -1805.82       1805.82       24932.5       26738.3    
  53  0.476284     -0.741742      -5551.45       5551.45       25044.8       30596.2    
loop,thermsimp(1:2)       27   1498.90       8778.79    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103      24724.16          0.89          1.19         21.86          0.26          0.05         24.25
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104      24625.08          0.91          1.19         21.82          0.26          0.04         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24625.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       27
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       28
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      102     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -1589.53       1589.53       22554.5       24144.0    
   2  0.162004E-01  -4.12272      -30855.9       30855.9       24688.2       55544.1    
   3  0.446841E-01  -3.10814      -23262.4       23262.4       23821.8       47084.2    
   4  0.757954     -0.277132      -2074.16       2074.16       25038.7       27112.9    
   5  0.525315     -0.643757      -4818.11       4818.11       24727.1       29545.2    
   6  0.229940      -1.46994      -11001.5       11001.5       24544.4       35545.9    
   7  0.273310E-01  -3.59973      -26941.7       26941.7       24959.2       51900.9    
   8  0.228047      -1.47820      -11063.4       11063.4       25520.3       36583.7    
   9  0.963384E-01  -2.33989      -17512.5       17512.5       25526.8       43039.3    
  10  0.495504     -0.702179      -5255.35       5255.35       24905.9       30161.3    
  11  0.930436     -0.721018E-01  -539.635       539.635       24932.5       25472.1    
  12  0.138744      -1.97513      -14782.5       14782.5       24693.2       39475.7    
  13  0.676381     -0.390999      -2926.37       2926.37       24970.4       27896.8    
  14  0.763696     -0.269586      -2017.67       2017.67       25007.1       27024.8    
  15  0.282468      -1.26419      -9461.64       9461.64       23924.6       33386.2    
  16  0.359172      -1.02395      -7663.62       7663.62       24967.8       32631.4    
  17  0.392258     -0.935834      -7004.11       7004.11       26352.1       33356.2    
  18  0.524686     -0.644955      -4827.06       4827.06       24857.1       29684.2    
  19  0.850465     -0.161972      -1212.26       1212.26       25246.7       26459.0    
  20  0.227056      -1.48256      -11096.0       11096.0       25066.1       36162.1    
  21  0.942039     -0.597082E-01  -446.877       446.877       25043.8       25490.6    
  22  0.807336     -0.214016      -1601.77       1601.77       25081.3       26683.1    
  23  0.345853      -1.06174      -7946.45       7946.45       24873.8       32820.3    
  24  0.762940     -0.270575      -2025.08       2025.08       24940.8       26965.9    
  25  0.589959     -0.527702      -3949.50       3949.50       24947.8       28897.3    
  26  0.563539     -0.573518      -4292.41       4292.41       27893.5       32185.9    
  27  0.812044     -0.208201      -1558.25       1558.25       25156.6       26714.8    
  28  0.735850     -0.306729      -2295.67       2295.67       25055.5       27351.2    
  29  0.396292     -0.925605      -6927.55       6927.55       24825.4       31752.9    
  30  0.623568     -0.472298      -3534.84       3534.84       24976.1       28510.9    
  31  0.925937     -0.769486E-01  -575.910       575.910       25051.9       25627.8    
  32  0.880074     -0.127749      -956.121       956.121       25138.6       26094.7    
  33  0.379958     -0.967693      -7242.55       7242.55       24713.2       31955.7    
  34  0.842940E-01  -2.47344      -18512.1       18512.1       24946.8       43458.9    
  35  0.199092      -1.61399      -12079.7       12079.7       25044.8       37124.4    
  36  0.625899     -0.468566      -3506.91       3506.91       25882.4       29389.3    
  37  0.888337     -0.118405      -886.181       886.181       24951.2       25837.4    
  38  0.959633     -0.412048E-01  -308.391       308.391       24949.0       25257.4    
  39  0.289813      -1.23852      -9269.50       9269.50       24947.8       34217.3    
  40  0.889440     -0.117163      -876.891       876.891       25083.9       25960.7    
  41  0.797260     -0.226575      -1695.76       1695.76       24610.1       26305.9    
  42  0.451097     -0.796073      -5958.09       5958.09       24666.3       30624.4    
  43  0.609578     -0.494989      -3704.67       3704.67       24977.9       28682.5    
  44  0.910850     -0.933770E-01  -698.866       698.866       24660.4       25359.2    
  45  0.448191     -0.802536      -6006.46       6006.46       25184.3       31190.8    
  46  0.831229     -0.184850      -1383.48       1383.48       25076.3       26459.8    
  47  0.246260      -1.40137      -10488.3       10488.3       24798.0       35286.4    
  48  0.280480      -1.27125      -9514.50       9514.50       24702.7       34217.2    
  49  0.161513      -1.82317      -13645.2       13645.2       27069.4       40714.7    
  50  0.337020      -1.08761      -8140.08       8140.08       24879.4       33019.5    
  51  0.160136      -1.83173      -13709.3       13709.3       24959.5       38668.8    
  52  0.268039      -1.31662      -9854.07       9854.07       24818.4       34672.4    
  53  0.907744     -0.967928E-01  -724.431       724.431       24625.1       25349.5    
loop,thermsimp(1:2)       28   1589.53       30855.9    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105      24728.31          0.90          1.19         21.87          0.21          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106      30747.19          0.90          1.18         21.84          0.21          0.04         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24728.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       28
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       29
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      104     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -16129.9       16129.9       22554.5       38684.4    
   2  0.685048     -0.378267      -2831.08       2831.08       24949.0       27780.0    
   3  0.739526     -0.301746      -2258.37       2258.37       24625.1       26883.5    
   4  0.161448      -1.82357      -13648.2       13648.2       24660.4       38308.6    
   5  0.819608     -0.198929      -1488.86       1488.86       24932.5       26421.3    
   6  0.750679     -0.286777      -2146.34       2146.34       25043.8       27190.1    
   7  0.797409     -0.226388      -1694.36       1694.36       25051.9       26746.3    
   8  0.193123      -1.64443      -12307.5       12307.5       24951.2       37258.7    
   9  0.189346E-01  -3.96676      -29688.6       29688.6       25083.9       54772.5    
  10  0.715264     -0.335103      -2508.03       2508.03       25138.6       27646.6    
  11  0.384856     -0.954886      -7146.70       7146.70       24610.1       31756.8    
  12  0.268023      -1.31668      -9854.52       9854.52       25246.7       35101.3    
  13  0.777164     -0.252104      -1886.83       1886.83       25076.3       26963.1    
  14  0.707495E-01  -2.64861      -19823.1       19823.1       25081.3       44904.4    
  15  0.233610      -1.45410      -10883.0       10883.0       25156.6       36039.6    
  16  0.193057      -1.64477      -12310.0       12310.0       24940.8       37250.8    
  17  0.486879     -0.719739      -5386.78       5386.78       25007.1       30393.9    
  18  0.735370     -0.307381      -2300.55       2300.55       25038.7       27339.3    
  19  0.147509      -1.91387      -14324.0       14324.0       25055.5       39379.6    
  20  0.739111     -0.302308      -2262.58       2262.58       24970.4       27233.0    
  21  0.886241     -0.120766      -903.854       903.854       24976.1       25880.0    
  22  0.158672      -1.84092      -13778.1       13778.1       24977.9       38755.9    
  23  0.143658      -1.94032      -14522.0       14522.0       24947.8       39469.9    
  24  0.637431E-02  -5.05548      -37837.0       37837.0       25882.4       63719.4    
  25  0.753372     -0.283196      -2119.54       2119.54       24727.1       26846.6    
  26  0.555831     -0.587292      -4395.50       4395.50       24857.1       29252.6    
  27  0.280013      -1.27292      -9526.97       9526.97       24905.9       34432.9    
  28  0.811304     -0.209112      -1565.07       1565.07       24666.3       26231.4    
  29  0.972296E-02  -4.63327      -34677.0       34677.0       25184.3       59861.3    
  30  0.713459     -0.337631      -2526.95       2526.95       24825.4       27352.3    
  31  0.194621      -1.63670      -12249.6       12249.6       24713.2       36962.8    
  32  0.492587     -0.708083      -5299.54       5299.54       27893.5       33193.0    
  33  0.759094E-01  -2.57821      -19296.3       19296.3       24967.8       44264.0    
  34  0.494544     -0.704119      -5269.87       5269.87       24873.8       30143.7    
  35  0.297023      -1.21395      -9085.60       9085.60       24879.4       33965.0    
  36  0.429878E-01  -3.14684      -23552.0       23552.0       26352.1       49904.1    
  37  0.490931     -0.711452      -5324.75       5324.75       23924.6       29249.3    
  38  0.534417     -0.626578      -4689.53       4689.53       24702.7       29392.2    
  39  0.254967      -1.36662      -10228.3       10228.3       24947.8       35176.1    
  40  0.995945     -0.406335E-02  -30.4115       30.4115       24818.4       24848.8    
  41  0.428814E-01  -3.14932      -23570.6       23570.6       24798.0       48368.6    
  42  0.332915      -1.09987      -8231.80       8231.80       24544.4       32776.2    
  43  0.657266     -0.419666      -3140.93       3140.93       25066.1       28207.1    
  44  0.301071      -1.20041      -8984.27       8984.27       25520.3       34504.6    
  45  0.998178     -0.182349E-02  -13.6477       13.6477       25044.8       25058.4    
  46  0.533372     -0.628536      -4704.18       4704.18       24959.5       29663.7    
  47  0.244746      -1.40753      -10534.5       10534.5       24693.2       35227.7    
  48  0.345321      -1.06328      -7957.97       7957.97       27069.4       35027.4    
  49  0.339541      -1.08016      -8084.31       8084.31       25526.8       33611.1    
  50  0.456434     -0.784311      -5870.06       5870.06       24946.8       30816.8    
  51  0.510210     -0.672933      -5036.46       5036.46       23821.8       28858.3    
  52  0.678441     -0.387958      -2903.62       2903.62       24959.2       27862.9    
  53  0.802552     -0.219958      -1646.24       1646.24       24728.3       26374.6    
loop,thermsimp(1:2)       29   16129.9       2831.08    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107      25240.93          0.90          1.18         21.84          0.23          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108      25772.30          0.91          1.18         21.82          0.23          0.04         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  25240.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7484.35               105
loop is:       29
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    7484.35               105
loop is:       30
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3742.17               157

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      106     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -12079.5       12079.5       24818.4       36897.9    
   2  0.712690     -0.338709      -1267.51       1267.51       25044.8       26312.3    
   3  0.284498      -1.25703      -4704.03       4704.03       24976.1       29680.1    
   4  0.132414      -2.02182      -7566.01       7566.01       24666.3       32232.4    
   5  0.868558     -0.140920      -527.349       527.349       24728.3       25255.7    
   6  0.695240     -0.363498      -1360.27       1360.27       24932.5       26292.8    
   7  0.777362     -0.251849      -942.463       942.463       25051.9       25994.4    
   8  0.302494      -1.19569      -4474.49       4474.49       24727.1       29201.6    
   9  0.710188     -0.342225      -1280.67       1280.67       24625.1       25905.7    
  10  0.884530     -0.122698      -459.159       459.159       25076.3       25535.5    
  11  0.146421E-01  -4.22386      -15806.4       15806.4       25043.8       40850.2    
  12  0.834801     -0.180562      -675.693       675.693       24970.4       25646.1    
  13  0.414011     -0.881863      -3300.09       3300.09       25038.7       28338.8    
  14  0.655777     -0.421935      -1578.95       1578.95       24825.4       26404.3    
  15  0.530106     -0.634679      -2375.08       2375.08       25138.6       27513.6    
  16  0.325231      -1.12322      -4203.29       4203.29       24949.0       29152.3    
  17  0.293550      -1.22571      -4586.82       4586.82       24959.2       29546.1    
  18  0.194161      -1.63907      -6133.68       6133.68       25066.1       31199.8    
  19  0.589029E-01  -2.83186      -10597.3       10597.3       23821.8       34419.2    
  20  0.385142     -0.954143      -3570.57       3570.57       23924.6       27495.1    
  21  0.287461      -1.24667      -4665.25       4665.25       24857.1       29522.4    
  22  0.528518     -0.637678      -2386.30       2386.30       24702.7       27089.0    
  23  0.517042     -0.659630      -2468.45       2468.45       24959.5       27427.9    
  24  0.453375     -0.791035      -2960.19       2960.19       24873.8       27834.0    
  25  0.695596     -0.362986      -1358.36       1358.36       25007.1       26365.5    
  26  0.645178     -0.438228      -1639.93       1639.93       24946.8       26586.7    
  27  0.696076     -0.362297      -1355.78       1355.78       24610.1       25965.9    
  28  0.483522     -0.726659      -2719.28       2719.28       24544.4       27263.6    
  29  0.155396E-01  -4.16436      -15583.8       15583.8       27893.5       43477.3    
  30  0.883154     -0.124256      -464.988       464.988       25526.8       25991.8    
  31  0.525944     -0.642561      -2404.58       2404.58       24879.4       27284.0    
  32  0.746799     -0.291959      -1092.56       1092.56       24905.9       25998.5    
  33  0.458658     -0.779449      -2916.84       2916.84       25520.3       28437.1    
  34  0.614284     -0.487298      -1823.56       1823.56       27069.4       28893.0    
  35  0.581412     -0.542295      -2029.36       2029.36       25246.7       27276.1    
  36  0.820935     -0.197312      -738.375       738.375       24947.8       25686.2    
  37  0.852366     -0.159739      -597.771       597.771       24693.2       25290.9    
  38  0.527059     -0.640443      -2396.65       2396.65       25156.6       27553.2    
  39  0.376404     -0.977092      -3656.45       3656.45       24713.2       28369.6    
  40  0.729525E-01  -2.61795      -9796.81       9796.81       24940.8       34737.6    
  41  0.342258      -1.07219      -4012.32       4012.32       24951.2       28963.6    
  42  0.955065     -0.459761E-01  -172.051       172.051       24660.4       24832.4    
  43  0.508654E-01  -2.97857      -11146.3       11146.3       22554.5       33700.8    
  44  0.471716     -0.751379      -2811.79       2811.79       24977.9       27789.7    
  45  0.137118      -1.98691      -7435.38       7435.38       25055.5       32490.9    
  46  0.844826     -0.168625      -631.023       631.023       24947.8       25578.9    
  47  0.841708     -0.172322      -644.858       644.858       24967.8       25612.6    
  48  0.360396E-01  -3.32314      -12435.8       12435.8       25081.3       37517.1    
  49  0.953282     -0.478444E-01  -179.042       179.042       24798.0       24977.1    
  50  0.503408     -0.686355      -2568.46       2568.46       26352.1       28920.6    
  51  0.593854     -0.521122      -1950.13       1950.13       25083.9       27034.0    
  52  0.524910     -0.644528      -2411.94       2411.94       25184.3       27596.2    
  53  0.730244     -0.314377      -1176.45       1176.45       25240.9       26417.4    
loop,thermsimp(1:2)       30   12079.5       1267.51    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109      21784.24          0.89          1.18         21.86          0.22          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110      50667.51          0.90          1.19         21.84          0.22          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  21784.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       30
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       31
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      108     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -5209.06       5209.06       24660.4       29869.4    
   2  0.247647      -1.39575      -5223.15       5223.15       24798.0       30021.2    
   3  0.396263     -0.925678      -3464.05       3464.05       24728.3       28192.4    
   4  0.386461     -0.950723      -3557.77       3557.77       24693.2       28250.9    
   5  0.729285     -0.315691      -1181.37       1181.37       25076.3       26257.7    
   6  0.665866     -0.406667      -1521.82       1521.82       24947.8       26469.6    
   7  0.385122     -0.954194      -3570.76       3570.76       24967.8       28538.5    
   8  0.625701     -0.468883      -1754.64       1754.64       24970.4       26725.1    
   9  0.392668     -0.934792      -3498.15       3498.15       24947.8       28446.0    
  10  0.698356     -0.359026      -1343.54       1343.54       24625.1       25968.6    
  11  0.537534E-01  -2.92335      -10939.7       10939.7       24610.1       35549.8    
  12  0.289307      -1.24027      -4641.30       4641.30       25526.8       30168.1    
  13  0.138460E-01  -4.27976      -16015.6       16015.6       25051.9       41067.5    
  14  0.824110     -0.193451      -723.926       723.926       24905.9       25629.8    
  15  0.560983     -0.578065      -2163.22       2163.22       24932.5       27095.7    
  16  0.116087E-01  -4.45600      -16675.1       16675.1       25044.8       41719.9    
  17  0.218033      -1.52311      -5699.74       5699.74       25007.1       30706.8    
  18  0.893705E-01  -2.41497      -9037.22       9037.22       24825.4       33862.6    
  19  0.304886      -1.18782      -4445.01       4445.01       25240.9       29685.9    
  20  0.179833      -1.71573      -6420.56       6420.56       24946.8       31367.3    
  21  0.867378     -0.142281      -532.439       532.439       25083.9       25616.3    
  22  0.243287      -1.41351      -5289.61       5289.61       24702.7       29992.3    
  23  0.772489     -0.258138      -965.996       965.996       24544.4       25510.4    
  24  0.321011      -1.13628      -4252.16       4252.16       25246.7       29498.9    
  25  0.499417     -0.694314      -2598.24       2598.24       24879.4       27477.7    
  26  0.396806     -0.924307      -3458.92       3458.92       24959.5       28418.4    
  27  0.580203E-01  -2.84696      -10653.8       10653.8       23924.6       34578.4    
  28  0.854206     -0.157583      -589.702       589.702       25138.6       25728.3    
  29  0.914649     -0.892145E-01  -333.856       333.856       25156.6       25490.4    
  30  0.167601      -1.78617      -6684.16       6684.16       25184.3       31868.5    
  31  0.350137      -1.04943      -3927.15       3927.15       24977.9       28905.0    
  32  0.522932     -0.648304      -2426.07       2426.07       24873.8       27299.9    
  33  0.538779     -0.618450      -2314.35       2314.35       25038.7       27353.1    
  34  0.693066     -0.366629      -1371.99       1371.99       24713.2       26085.2    
  35  0.361961      -1.01622      -3802.87       3802.87       25520.3       29323.2    
  36  0.310665      -1.16904      -4374.75       4374.75       27069.4       31444.2    
  37  0.818669     -0.200076      -748.719       748.719       26352.1       27100.8    
  38  0.582861     -0.539807      -2020.05       2020.05       24951.2       26971.3    
  39  0.401728     -0.911979      -3412.78       3412.78       24949.0       28361.7    
  40  0.171089      -1.76557      -6607.08       6607.08       24727.1       31334.1    
  41  0.980174     -0.200248E-01  -74.9363       74.9363       24857.1       24932.1    
  42  0.495496     -0.702196      -2627.74       2627.74       24959.2       27587.0    
  43  0.436683     -0.828549      -3100.57       3100.57       24976.1       28076.7    
  44  0.910411     -0.938588E-01  -351.236       351.236       25066.1       25417.4    
  45  0.649932     -0.430887      -1612.45       1612.45       24666.3       26278.8    
  46  0.755226     -0.280738      -1050.57       1050.57       25055.5       26106.1    
  47  0.927352     -0.754221E-01  -282.243       282.243       22554.5       22836.7    
  48  0.848028     -0.164842      -616.867       616.867       23821.8       24438.7    
  49  0.146193      -1.92283      -7195.57       7195.57       24940.8       32136.4    
  50  0.571278     -0.559879      -2095.17       2095.17       24818.4       26913.5    
  51  0.244418      -1.40888      -5272.26       5272.26       25081.3       30353.6    
  52  0.979014     -0.212091E-01  -79.3680       79.3680       25043.8       25123.1    
  53  0.235747      -1.44500      -5407.43       5407.43       21784.2       27191.7    
loop,thermsimp(1:2)       31   5209.06       5223.15    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111      24778.67          0.88          1.18         21.88          0.21          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112      54317.64          0.91          1.19         21.82          0.26          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24778.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       31
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       32
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      110     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -14.7352       14.7352       22554.5       22569.2    
   2  0.758684E-02  -4.88134      -18266.8       18266.8       23821.8       42088.7    
   3  0.404439     -0.905254      -3387.62       3387.62       24857.1       28244.7    
   4  0.947917E-01  -2.35607      -8816.84       8816.84       25043.8       33860.6    
   5  0.834417     -0.181022      -677.417       677.417       25066.1       25743.6    
   6  0.891274     -0.115104      -430.738       430.738       25156.6       25587.3    
   7  0.744451     -0.295108      -1104.35       1104.35       24544.4       25648.7    
   8  0.559638     -0.580466      -2172.20       2172.20       25083.9       27256.1    
   9  0.821724     -0.196351      -734.779       734.779       24905.9       25640.7    
  10  0.847292     -0.165710      -620.114       620.114       25138.6       25758.7    
  11  0.661676     -0.412979      -1545.44       1545.44       24625.1       26170.5    
  12  0.993427     -0.659478E-02  -24.6788       24.6788       24713.2       24737.8    
  13  0.425996     -0.853326      -3193.30       3193.30       25055.5       28248.8    
  14  0.673132     -0.395813      -1481.20       1481.20       25076.3       26557.5    
  15  0.234810      -1.44898      -5422.33       5422.33       24666.3       30088.7    
  16  0.122926      -2.09617      -7844.24       7844.24       24947.8       32792.1    
  17  0.523553     -0.647118      -2421.63       2421.63       24970.4       27392.0    
  18  0.959317     -0.415333E-01  -155.425       155.425       24818.4       24973.8    
  19  0.321726      -1.13406      -4243.83       4243.83       24951.2       29195.1    
  20  0.493112     -0.707018      -2645.78       2645.78       24932.5       27578.3    
  21  0.416134     -0.876748      -3280.94       3280.94       26352.1       29633.0    
  22  0.409432     -0.892985      -3341.70       3341.70       21784.2       25125.9    
  23  0.657956     -0.418617      -1566.54       1566.54       24873.8       26440.4    
  24  0.904324     -0.100567      -376.341       376.341       25038.7       25415.1    
  25  0.714426     -0.336276      -1258.40       1258.40       24879.4       26137.8    
  26  0.150521      -1.89365      -7086.37       7086.37       24959.2       32045.6    
  27  0.758740     -0.276096      -1033.20       1033.20       24976.1       26009.3    
  28  0.359105      -1.02414      -3832.51       3832.51       24728.3       28560.8    
  29  0.666937     -0.405060      -1515.80       1515.80       24693.2       26209.0    
  30  0.343213      -1.06940      -4001.90       4001.90       24949.0       28950.9    
  31  0.484849     -0.723918      -2709.03       2709.03       24959.5       27668.5    
  32  0.874661     -0.133919      -501.148       501.148       24947.8       25449.0    
  33  0.994710     -0.530415E-02  -19.8491       19.8491       24967.8       24987.6    
  34  0.821923     -0.196109      -733.874       733.874       24977.9       25711.8    
  35  0.954096E-02  -4.65216      -17409.2       17409.2       25520.3       42929.5    
  36  0.240030      -1.42699      -5340.04       5340.04       25246.7       30586.8    
  37  0.279003      -1.27653      -4777.00       4777.00       25240.9       30017.9    
  38  0.553830     -0.590898      -2211.24       2211.24       24660.4       26871.6    
  39  0.400809     -0.914271      -3421.36       3421.36       24702.7       28124.1    
  40  0.146125      -1.92330      -7197.31       7197.31       24798.0       31995.3    
  41  0.811879     -0.208403      -779.882       779.882       25526.8       26306.7    
  42  0.349149      -1.05226      -3937.73       3937.73       25081.3       29019.0    
  43  0.897422     -0.108229      -405.011       405.011       25007.1       25412.1    
  44  0.114492      -2.16725      -8110.23       8110.23       24727.1       32837.3    
  45  0.831901E-01  -2.48663      -9305.39       9305.39       24946.8       34252.1    
  46  0.721169     -0.326882      -1223.25       1223.25       27069.4       28292.7    
  47  0.801724     -0.220991      -826.987       826.987       25184.3       26011.3    
  48  0.466569     -0.762349      -2852.84       2852.84       24940.8       27793.6    
  49  0.103404      -2.26911      -8491.41       8491.41       24825.4       33316.8    
  50  0.417206     -0.874175      -3271.31       3271.31       23924.6       27195.9    
  51  0.267666      -1.31802      -4932.24       4932.24       24610.1       29542.3    
  52  0.670232     -0.400131      -1497.36       1497.36       25051.9       26549.3    
  53  0.161265      -1.82470      -6828.36       6828.36       24778.7       31607.0    
loop,thermsimp(1:2)       32   14.7352       18266.8    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113      24442.11          0.89          1.18         21.88          0.20          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24442.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       32
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       33
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      111     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -2941.95       2941.95       22554.5       25496.4    
   2  0.588265E-01  -2.83316      -10602.2       10602.2       24713.2       35315.4    
   3  0.787103E-01  -2.54198      -9512.54       9512.54       24818.4       34330.9    
   4  0.597713     -0.514644      -1925.89       1925.89       24967.8       26893.7    
   5  0.110741      -2.20056      -8234.89       8234.89       21784.2       30019.1    
   6  0.677861     -0.388813      -1455.00       1455.00       25007.1       26462.1    
   7  0.307724      -1.17855      -4410.35       4410.35       25038.7       29449.1    
   8  0.550587     -0.596770      -2233.22       2233.22       24947.8       27181.0    
   9  0.601295     -0.508669      -1903.53       1903.53       25156.6       27060.1    
  10  0.487121     -0.719243      -2691.53       2691.53       24905.9       27597.5    
  11  0.146295      -1.92213      -7192.94       7192.94       24544.4       31737.3    
  12  0.714050     -0.336802      -1260.37       1260.37       24977.9       26238.3    
  13  0.723089     -0.324223      -1213.30       1213.30       25066.1       26279.4    
  14  0.805432     -0.216376      -809.717       809.717       25138.6       25948.3    
  15  0.123280      -2.09329      -7833.47       7833.47       24976.1       32809.6    
  16  0.853039     -0.158950      -594.820       594.820       25184.3       25779.1    
  17  0.288289      -1.24379      -4654.48       4654.48       24879.4       29533.9    
  18  0.705126     -0.349379      -1307.44       1307.44       24625.1       25932.5    
  19  0.772420     -0.258227      -966.329       966.329       24693.2       25659.5    
  20  0.962845     -0.378631E-01  -141.690       141.690       25526.8       25668.5    
  21  0.245802      -1.40323      -5251.12       5251.12       24873.8       30125.0    
  22  0.752702     -0.284087      -1063.10       1063.10       25051.9       26115.0    
  23  0.729896     -0.314853      -1178.23       1178.23       25076.3       26254.5    
  24  0.869278     -0.140092      -524.250       524.250       24660.4       25184.6    
  25  0.597817E-01  -2.81706      -10541.9       10541.9       23924.6       34466.5    
  26  0.984108     -0.160195E-01  -59.9478       59.9478       25083.9       25143.8    
  27  0.278288      -1.27910      -4786.61       4786.61       24970.4       29757.0    
  28  0.588278     -0.530555      -1985.43       1985.43       24932.5       26917.9    
  29  0.807614     -0.213671      -799.595       799.595       24959.5       25759.1    
  30  0.428679     -0.847047      -3169.80       3169.80       24940.8       28110.6    
  31  0.452991     -0.791883      -2963.36       2963.36       24702.7       27666.1    
  32  0.678742     -0.387514      -1450.15       1450.15       24857.1       26307.3    
  33  0.504500     -0.684188      -2560.35       2560.35       25055.5       27615.9    
  34  0.894800     -0.111155      -415.961       415.961       27069.4       27485.4    
  35  0.854311     -0.157461      -589.245       589.245       24728.3       25317.6    
  36  0.756230     -0.279410      -1045.60       1045.60       24949.0       25994.6    
  37  0.744369     -0.295219      -1104.76       1104.76       25081.3       26186.1    
  38  0.435758     -0.830668      -3108.50       3108.50       24951.2       28059.7    
  39  0.677387     -0.389513      -1457.62       1457.62       24610.1       26067.7    
  40  0.504989     -0.683219      -2556.72       2556.72       26352.1       28908.8    
  41  0.325676      -1.12185      -4198.17       4198.17       25240.9       29439.1    
  42  0.147207      -1.91591      -7169.68       7169.68       24666.3       31836.0    
  43  0.432041     -0.839234      -3140.56       3140.56       25246.7       28387.3    
  44  0.615972     -0.484555      -1813.29       1813.29       24778.7       26592.0    
  45  0.150867      -1.89136      -7077.79       7077.79       24798.0       31875.8    
  46  0.464307     -0.767210      -2871.03       2871.03       24959.2       27830.3    
  47  0.379753     -0.968234      -3623.30       3623.30       24947.8       28571.1    
  48  0.886192     -0.120822      -452.136       452.136       24727.1       25179.2    
  49  0.231751E-01  -3.76468      -14088.1       14088.1       24825.4       38913.4    
  50  0.257662      -1.35611      -5074.79       5074.79       25043.8       30118.5    
  51  0.470381E-01  -3.05680      -11439.1       11439.1       24946.8       36385.8    
  52  0.972366     -0.280233E-01  -104.868       104.868       23821.8       23926.7    
  53  0.242054      -1.41860      -5308.63       5308.63       24442.1       29750.7    
loop,thermsimp(1:2)       33   2941.95       10602.2    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114      24563.69          0.90          1.18         21.82          0.24          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115      24377.91          0.90          1.18         21.85          0.19          0.04         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24377.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       33
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       34
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      113     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -8763.23       8763.23       23821.8       32585.1    
   2  0.298819      -1.20792      -4520.24       4520.24       25083.9       29604.1    
   3  0.706385     -0.347595      -1300.76       1300.76       24727.1       26027.8    
   4  0.958764     -0.421100E-01  -157.583       157.583       24660.4       24817.9    
   5  0.306496      -1.18255      -4425.31       4425.31       24728.3       29153.6    
   6  0.905447     -0.993270E-01  -371.699       371.699       22554.5       22926.2    
   7  0.234113      -1.45195      -5433.45       5433.45       24693.2       30126.6    
   8  0.704141     -0.350777      -1312.67       1312.67       25526.8       26839.5    
   9  0.908200     -0.962902E-01  -360.335       360.335       24959.5       25319.8    
  10  0.656383     -0.421011      -1575.50       1575.50       25184.3       26759.8    
  11  0.967894     -0.326327E-01  -122.117       122.117       24625.1       24747.2    
  12  0.754670     -0.281475      -1053.33       1053.33       25138.6       26191.9    
  13  0.488960     -0.715475      -2677.43       2677.43       24949.0       27626.4    
  14  0.451577     -0.795009      -2975.06       2975.06       24610.1       27585.2    
  15  0.387599E-01  -3.25037      -12163.4       12163.4       25051.9       37215.3    
  16  0.210942E-02  -6.16134      -23056.8       23056.8       25081.3       48138.1    
  17  0.656530     -0.420787      -1574.66       1574.66       24977.9       26552.5    
  18  0.181246      -1.70790      -6391.26       6391.26       25076.3       31467.6    
  19  0.758879     -0.275913      -1032.51       1032.51       25066.1       26098.7    
  20  0.392052     -0.936362      -3504.03       3504.03       24857.1       28361.2    
  21  0.406710     -0.899654      -3366.66       3366.66       25007.1       28373.8    
  22  0.830107     -0.186201      -696.795       696.795       24778.7       25475.5    
  23  0.311833      -1.16529      -4360.71       4360.71       24967.8       29328.5    
  24  0.945407     -0.561396E-01  -210.084       210.084       24932.5       25142.6    
  25  0.303319      -1.19297      -4464.30       4464.30       25156.6       29620.9    
  26  0.284230      -1.25797      -4707.55       4707.55       24947.8       29655.4    
  27  0.292492      -1.22932      -4600.32       4600.32       27069.4       31669.7    
  28  0.401496     -0.912557      -3414.95       3414.95       24905.9       28320.9    
  29  0.379648     -0.968510      -3624.33       3624.33       25055.5       28679.9    
  30  0.723496E-01  -2.62625      -9827.87       9827.87       24702.7       34530.6    
  31  0.940338     -0.615157E-01  -230.203       230.203       24959.2       25189.4    
  32  0.766237     -0.266264      -996.405       996.405       24951.2       25947.6    
  33  0.984920     -0.151946E-01  -56.8608       56.8608       24940.8       24997.7    
  34  0.552546     -0.593218      -2219.93       2219.93       25246.7       27466.7    
  35  0.735557     -0.307128      -1149.33       1149.33       24947.8       26097.2    
  36  0.142195      -1.95056      -7299.32       7299.32       26352.1       33651.4    
  37  0.304783      -1.18816      -4446.28       4446.28       25240.9       29687.2    
  38  0.868582     -0.140894      -527.249       527.249       25038.7       25566.0    
  39  0.382741     -0.960397      -3593.97       3593.97       24879.4       28473.4    
  40  0.273812      -1.29531      -4847.29       4847.29       24442.1       29289.4    
  41  0.601920     -0.507631      -1899.64       1899.64       24970.4       26870.1    
  42  0.827744     -0.189051      -707.464       707.464       21784.2       22491.7    
  43  0.881186E-01  -2.42907      -9090.01       9090.01       25043.8       34133.8    
  44  0.386744     -0.949994      -3555.04       3555.04       24873.8       28428.9    
  45  0.852312     -0.159803      -598.011       598.011       24544.4       25142.4    
  46  0.830189     -0.186102      -696.428       696.428       24666.3       25362.8    
  47  0.216531      -1.53002      -5725.61       5725.61       24798.0       30523.6    
  48  0.835540     -0.179677      -672.383       672.383       24976.1       25648.5    
  49  0.962152     -0.385824E-01  -144.382       144.382       24818.4       24962.7    
  50  0.866477     -0.143320      -536.327       536.327       23924.6       24460.9    
  51  0.640111     -0.446114      -1669.43       1669.43       24713.2       26382.6    
  52  0.103467      -2.26850      -8489.14       8489.14       24946.8       33435.9    
  53  0.746080     -0.292923      -1096.17       1096.17       24377.9       25474.1    
loop,thermsimp(1:2)       34   8763.23       4520.24    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116      24467.34          0.90          1.17         21.88          0.21          0.04         24.21
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117      29545.05          0.91          1.19         21.85          0.22          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24467.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       34
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       35
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      115     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -3949.03       3949.03       21784.2       25733.3    
   2  0.175000      -1.74297      -6522.51       6522.51       22554.5       29077.0    
   3  0.131587      -2.02809      -7589.47       7589.47       23924.6       31514.0    
   4  0.301717      -1.19826      -4484.11       4484.11       24625.1       29109.2    
   5  0.166877      -1.79050      -6700.37       6700.37       24660.4       31360.7    
   6  0.481073     -0.731736      -2738.28       2738.28       24818.4       27556.6    
   7  0.706381     -0.347600      -1300.78       1300.78       24940.8       26241.6    
   8  0.702617     -0.352943      -1320.77       1320.77       24544.4       25865.1    
   9  0.552795     -0.592767      -2218.24       2218.24       24932.5       27150.7    
  10  0.495420     -0.702349      -2628.31       2628.31       24959.2       27587.6    
  11  0.479343     -0.735339      -2751.77       2751.77       24959.5       27711.3    
  12  0.462659     -0.770765      -2884.34       2884.34       24666.3       27550.7    
  13  0.631315E-01  -2.76253      -10337.9       10337.9       24377.9       34715.8    
  14  0.785681     -0.241205      -902.631       902.631       24778.7       25681.3    
  15  0.767932     -0.264055      -988.139       988.139       25038.7       26026.9    
  16  0.262689E-01  -3.63937      -13619.2       13619.2       24976.1       38595.3    
  17  0.871353     -0.137708      -515.327       515.327       24951.2       25466.6    
  18  0.618350     -0.480701      -1798.87       1798.87       24727.1       26525.9    
  19  0.196090      -1.62918      -6096.69       6096.69       24947.8       31044.5    
  20  0.925050     -0.779078E-01  -291.545       291.545       25066.1       25357.7    
  21  0.903269     -0.101735      -380.711       380.711       25138.6       25519.3    
  22  0.958828     -0.420436E-01  -157.334       157.334       24713.2       24870.5    
  23  0.969274     -0.312081E-01  -116.786       116.786       24977.9       25094.7    
  24  0.313932      -1.15858      -4335.60       4335.60       25184.3       29519.9    
  25  0.106324      -2.24126      -8387.20       8387.20       25526.8       33914.0    
  26  0.718705     -0.330304      -1236.06       1236.06       24970.4       26206.5    
  27  0.751116     -0.286195      -1070.99       1070.99       25246.7       26317.7    
  28  0.996391     -0.361592E-02  -13.5314       13.5314       24610.1       24623.6    
  29  0.313387      -1.16032      -4342.11       4342.11       24949.0       29291.1    
  30  0.305057      -1.18726      -4442.92       4442.92       24905.9       29348.8    
  31  0.408833     -0.894447      -3347.18       3347.18       24857.1       28204.3    
  32  0.589856     -0.527877      -1975.41       1975.41       25007.1       26982.5    
  33  0.808683     -0.212349      -794.646       794.646       24873.8       25668.5    
  34  0.481635     -0.730569      -2733.92       2733.92       24879.4       27613.4    
  35  0.677481     -0.389374      -1457.10       1457.10       25055.5       26512.6    
  36  0.673605     -0.395111      -1478.57       1478.57       24728.3       26206.9    
  37  0.409374E-01  -3.19571      -11958.9       11958.9       24442.1       36401.0    
  38  0.362144      -1.01571      -3800.98       3800.98       24967.8       28768.8    
  39  0.364718E-01  -3.31122      -12391.1       12391.1       25083.9       37475.0    
  40  0.280272      -1.27199      -4760.02       4760.02       25156.6       29916.6    
  41  0.532528     -0.630120      -2358.02       2358.02       24947.8       27305.8    
  42  0.901591     -0.103595      -387.669       387.669       25240.9       25628.6    
  43  0.262858      -1.33614      -5000.07       5000.07       24693.2       29693.2    
  44  0.168755      -1.77931      -6658.49       6658.49       24798.0       31456.5    
  45  0.504619     -0.683952      -2559.47       2559.47       25076.3       27635.8    
  46  0.900650     -0.104639      -391.576       391.576       27069.4       27461.0    
  47  0.438495     -0.824406      -3085.07       3085.07       23821.8       26906.9    
  48  0.984597     -0.155233E-01  -58.0910       58.0910       24946.8       25004.8    
  49  0.469739     -0.755579      -2827.51       2827.51       26352.1       29179.6    
  50  0.252111      -1.37789      -5156.29       5156.29       25043.8       30200.0    
  51  0.764692     -0.268282      -1003.96       1003.96       24702.7       25706.7    
  52  0.848445     -0.164351      -615.028       615.028       25051.9       25666.9    
  53  0.705739     -0.348509      -1304.18       1304.18       24467.3       25771.5    
loop,thermsimp(1:2)       35   3949.03       6522.51    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118      24689.24          0.89          1.19         21.90          0.22          0.04         24.23
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119      26359.82          0.89          1.18         21.91          0.20          0.05         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24689.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       35
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       36
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      117     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -9653.99       9653.99       24610.1       34264.1    
   2  0.962370     -0.383559E-01  -143.534       143.534       24713.2       24856.7    
   3  0.356737      -1.03076      -3857.27       3857.27       24946.8       28804.0    
   4  0.884319     -0.122937      -460.052       460.052       24977.9       25437.9    
   5  0.919725E-01  -2.38627      -8929.82       8929.82       25066.1       33996.0    
   6  0.900184     -0.105156      -393.512       393.512       24951.2       25344.7    
   7  0.390055     -0.941468      -3523.14       3523.14       25138.6       28661.7    
   8  0.263976      -1.33190      -4984.19       4984.19       25240.9       30225.1    
   9  0.898455     -0.107078      -400.706       400.706       25051.9       25452.6    
  10  0.697674E-01  -2.66259      -9963.87       9963.87       24873.8       34837.7    
  11  0.888938     -0.117727      -440.556       440.556       24778.7       25219.2    
  12  0.824147     -0.193406      -723.759       723.759       24702.7       25426.5    
  13  0.941109     -0.606968E-01  -227.138       227.138       21784.2       22011.4    
  14  0.885654     -0.121429      -454.408       454.408       24467.3       24921.7    
  15  0.798208     -0.225386      -843.432       843.432       24544.4       25387.8    
  16  0.365331      -1.00695      -3768.19       3768.19       25038.7       28806.9    
  17  0.519490     -0.654907      -2450.78       2450.78       24970.4       27421.2    
  18  0.922741     -0.804065E-01  -300.895       300.895       24728.3       25029.2    
  19  0.877443     -0.130744      -489.265       489.265       24940.8       25430.1    
  20  0.584844     -0.536410      -2007.34       2007.34       25246.7       27254.1    
  21  0.671390     -0.398406      -1490.90       1490.90       25055.5       26546.4    
  22  0.203335      -1.59290      -5960.91       5960.91       24727.1       30688.0    
  23  0.330236E-01  -3.41053      -12762.8       12762.8       23821.8       36584.7    
  24  0.879725     -0.128146      -479.546       479.546       25007.1       25486.7    
  25  0.833976     -0.181550      -679.394       679.394       24932.5       25611.9    
  26  0.901698     -0.103475      -387.222       387.222       24947.8       25335.1    
  27  0.692847     -0.366946      -1373.18       1373.18       27069.4       28442.6    
  28  0.550572     -0.596797      -2233.32       2233.32       24666.3       26899.7    
  29  0.158383E-01  -4.14532      -15512.5       15512.5       24818.4       40330.9    
  30  0.503246     -0.686677      -2569.66       2569.66       24959.2       27528.9    
  31  0.648812     -0.432612      -1618.91       1618.91       24879.4       26498.3    
  32  0.306980      -1.18097      -4419.41       4419.41       25076.3       29495.7    
  33  0.205188      -1.58383      -5926.97       5926.97       24959.5       30886.5    
  34  0.265146      -1.32748      -4967.65       4967.65       24857.1       29824.8    
  35  0.272730E-01  -3.60186      -13478.8       13478.8       24967.8       38446.6    
  36  0.262990E-01  -3.63823      -13614.9       13614.9       22554.5       36169.4    
  37  0.492753     -0.707748      -2648.52       2648.52       24625.1       27273.6    
  38  0.255065      -1.36624      -5112.69       5112.69       26352.1       31464.8    
  39  0.623259     -0.472794      -1769.28       1769.28       24949.0       26718.2    
  40  0.949296     -0.520343E-01  -194.722       194.722       24905.9       25100.6    
  41  0.982394     -0.177630E-01  -66.4722       66.4722       25184.3       25250.8    
  42  0.566450     -0.568366      -2126.92       2126.92       24693.2       26820.1    
  43  0.557613     -0.584090      -2185.77       2185.77       25156.6       27342.3    
  44  0.900731     -0.104549      -391.240       391.240       25043.8       25435.0    
  45  0.671339     -0.398481      -1491.18       1491.18       24947.8       26439.0    
  46  0.650454     -0.430084      -1609.45       1609.45       24660.4       26269.8    
  47  0.749315     -0.288595      -1079.97       1079.97       24798.0       25878.0    
  48  0.667497     -0.404220      -1512.66       1512.66       23924.6       25437.2    
  49  0.132870      -2.01838      -7553.15       7553.15       25526.8       33079.9    
  50  0.964787     -0.358480E-01  -134.149       134.149       24377.9       24512.1    
  51  0.835780     -0.179390      -671.307       671.307       24442.1       25113.4    
  52  0.601609     -0.508148      -1901.58       1901.58       25083.9       26985.4    
  53  0.937321     -0.647298E-01  -242.230       242.230       24689.2       24931.5    
loop,thermsimp(1:2)       36   9653.99       143.534    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120      24626.55          0.90          1.18         21.91          0.23          0.04         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121      38270.38          0.92          1.18         21.89          0.23          0.05         24.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24626.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       36
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       37
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      119     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -234.876       234.876       21784.2       22019.1    
   2  0.112532E-01  -4.48710      -16791.5       16791.5       24377.9       41169.4    
   3  0.907929     -0.965891E-01  -361.453       361.453       24713.2       25074.6    
   4  0.478640     -0.736807      -2757.26       2757.26       24467.3       27224.6    
   5  0.737686     -0.304237      -1138.51       1138.51       24689.2       25827.7    
   6  0.114880      -2.16387      -8097.57       8097.57       24728.3       32825.9    
   7  0.309837      -1.17171      -4384.74       4384.74       24905.9       29290.7    
   8  0.469091     -0.756958      -2832.67       2832.67       24442.1       27274.8    
   9  0.721151     -0.326907      -1223.34       1223.34       24778.7       26002.0    
  10  0.557251     -0.584740      -2188.20       2188.20       25184.3       27372.5    
  11  0.581534     -0.542085      -2028.58       2028.58       24947.8       26976.4    
  12  0.501412     -0.690326      -2583.32       2583.32       24951.2       27534.5    
  13  0.783062     -0.244543      -915.124       915.124       24544.4       25459.5    
  14  0.571322     -0.559803      -2094.88       2094.88       24702.7       26797.6    
  15  0.902729E-01  -2.40492      -8999.62       8999.62       24940.8       33940.4    
  16  0.695403E-01  -2.66585      -9976.07       9976.07       25043.8       35019.8    
  17  0.128872      -2.04894      -7667.49       7667.49       23924.6       31592.1    
  18  0.940828E-01  -2.36358      -8844.93       8844.93       24977.9       33822.8    
  19  0.326350      -1.11979      -4190.43       4190.43       25051.9       29242.3    
  20  0.102915      -2.27385      -8509.16       8509.16       25007.1       33516.3    
  21  0.324524      -1.12540      -4211.43       4211.43       24932.5       29143.9    
  22  0.259454      -1.34918      -5048.86       5048.86       24798.0       29846.9    
  23  0.782812     -0.244863      -916.319       916.319       24660.4       25576.7    
  24  0.383591     -0.958178      -3585.67       3585.67       24947.8       28533.5    
  25  0.626880     -0.466999      -1747.59       1747.59       24879.4       26627.0    
  26  0.292269      -1.23008      -4603.17       4603.17       25055.5       29658.7    
  27  0.448852     -0.801062      -2997.71       2997.71       24949.0       27946.7    
  28  0.685432     -0.377706      -1413.44       1413.44       24693.2       26106.6    
  29  0.995399     -0.461118E-02  -17.2558       17.2558       24666.3       24683.6    
  30  0.163323      -1.81203      -6780.93       6780.93       25083.9       31864.8    
  31  0.952940     -0.482038E-01  -180.387       180.387       25246.7       25427.1    
  32  0.861306     -0.149306      -558.728       558.728       24625.1       25183.8    
  33  0.587276     -0.532261      -1991.81       1991.81       25156.6       27148.4    
  34  0.908704     -0.957357E-01  -358.260       358.260       24970.4       25328.7    
  35  0.585935     -0.534546      -2000.36       2000.36       24959.2       26959.6    
  36  0.429836     -0.844352      -3159.71       3159.71       27069.4       30229.1    
  37  0.726203     -0.319926      -1197.22       1197.22       25138.6       26335.8    
  38  0.151145E-01  -4.19210      -15687.6       15687.6       24946.8       40634.3    
  39  0.927869     -0.748646E-01  -280.156       280.156       25038.7       25318.9    
  40  0.961645     -0.391099E-01  -146.356       146.356       25076.3       25222.6    
  41  0.253977      -1.37051      -5128.69       5128.69       24857.1       29985.8    
  42  0.768038     -0.263917      -987.622       987.622       25240.9       26228.6    
  43  0.569441E-01  -2.86569      -10723.9       10723.9       24727.1       35451.0    
  44  0.103919      -2.26415      -8472.83       8472.83       24959.5       33432.3    
  45  0.312226      -1.16403      -4355.99       4355.99       26352.1       30708.1    
  46  0.473636E-02  -5.35249      -20029.9       20029.9       25526.8       45556.7    
  47  0.192099      -1.64975      -6173.63       6173.63       25066.1       31239.8    
  48  0.799429     -0.223858      -837.715       837.715       24610.1       25447.8    
  49  0.164379      -1.80558      -6756.80       6756.80       24873.8       31630.6    
  50  0.421896     -0.862996      -3229.48       3229.48       22554.5       25784.0    
  51  0.361660      -1.01705      -3805.98       3805.98       23821.8       27627.8    
  52  0.346541      -1.05975      -3965.79       3965.79       24967.8       28933.6    
  53  0.728715     -0.316473      -1184.30       1184.30       24626.5       25810.8    
loop,thermsimp(1:2)       37   234.876       16791.5    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122      24395.48          0.90          1.19         21.87          0.21          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    24395.        1.531     -2.328      3.406     -102.6     0.8354    
                      0.7372      1.686     -99.70      3.326     0.2332    

                       2.388     -2.177      1.540      7000.      7000.    

                      -2.083      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.401     -4.163     -8.068      6.977    

                      -13.83     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5930E-02-0.3010    -0.1945E-02 0.2187    

                     -0.2486    -0.7692E-01 0.1354     0.6671E-01 0.1085    



                     -0.3939    -0.6255      0.000     0.1522    -0.1867E-01

                      0.2071E-01 0.1268    -0.7116    -0.7034E-01 0.3372    

                     -0.2241E-01 0.6920E-01-0.5736     -1.298      7000.    



                      -1.183     -1.133     -2.142     -1.982    -0.3807    

                     -0.3252      9.545      8.845    -0.1672E+05 -6.000    

                     -0.3160     -2.268      8.661      8.845    -0.1969E+05



                      -6.000     0.6974    -0.2565      8.881      8.760    

                     -0.1944E+05 -6.000    -0.5361    -0.5204      9.645    

                       8.797    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24395.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       37
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       38
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      120     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -3702.98       3702.98       21784.2       25487.2    
   2  0.687927     -0.374072      -1399.84       1399.84       24666.3       26066.2    
   3  0.288957      -1.24148      -4645.82       4645.82       24713.2       29359.0    
   4  0.192838      -1.64590      -6159.25       6159.25       24625.1       30784.3    
   5  0.369869     -0.994607      -3721.99       3721.99       25076.3       28798.3    
   6  0.735973     -0.306562      -1147.21       1147.21       25038.7       26185.9    
   7  0.637144     -0.450760      -1686.82       1686.82       24970.4       26657.2    
   8  0.703934     -0.351071      -1313.77       1313.77       25246.7       26560.5    
   9  0.864279     -0.145859      -545.830       545.830       24610.1       25155.9    
  10  0.473452     -0.747705      -2798.04       2798.04       24544.4       27342.4    
  11  0.242010      -1.41877      -5309.30       5309.30       24660.4       29969.7    
  12  0.510769     -0.671838      -2514.14       2514.14       22554.5       25068.6    
  13  0.829624     -0.186782      -698.973       698.973       24626.5       25325.5    
  14  0.228911      -1.47442      -5517.55       5517.55       24689.2       30206.8    
  15  0.310006      -1.17116      -4382.70       4382.70       24778.7       29161.4    
  16  0.248341      -1.39295      -5212.68       5212.68       24693.2       29905.9    
  17  0.723214     -0.324050      -1212.65       1212.65       25240.9       26453.6    
  18  0.420900     -0.865360      -3238.33       3238.33       25138.6       28376.9    
  19  0.133903      -2.01064      -7524.15       7524.15       24879.4       32403.6    
  20  0.571916     -0.558763      -2090.99       2090.99       24702.7       26793.7    
  21  0.609104     -0.495766      -1855.24       1855.24       24959.2       26814.5    
  22  0.582057     -0.541186      -2025.21       2025.21       24947.8       26973.0    
  23  0.440731     -0.819321      -3066.04       3066.04       25156.6       28222.6    
  24  0.211006      -1.55587      -5822.34       5822.34       24467.3       30289.7    
  25  0.665769     -0.406813      -1522.36       1522.36       24442.1       25964.5    
  26  0.766062     -0.266493      -997.262       997.262       25184.3       26181.6    
  27  0.321416E-01  -3.43760      -12864.1       12864.1       24951.2       37815.3    
  28  0.165897E-01  -4.09897      -15339.1       15339.1       23821.8       39160.9    
  29  0.634553     -0.454835      -1702.07       1702.07       24949.0       26651.0    
  30  0.981834     -0.183335E-01  -68.6072       68.6072       24947.8       25016.4    
  31  0.511720     -0.669978      -2507.18       2507.18       24967.8       27475.0    
  32  0.426358     -0.852477      -3190.12       3190.12       24932.5       28122.6    
  33  0.500527     -0.692094      -2589.94       2589.94       25051.9       27641.8    
  34  0.100483      -2.29777      -8598.66       8598.66       24905.9       33504.6    
  35  0.837324     -0.177545      -664.403       664.403       25055.5       25719.9    
  36  0.257741      -1.35580      -5073.64       5073.64       24798.0       29871.7    
  37  0.437184     -0.827401      -3096.28       3096.28       24857.1       27953.4    
  38  0.707529     -0.345976      -1294.70       1294.70       27069.4       28364.1    
  39  0.538379     -0.619193      -2317.13       2317.13       26352.1       28669.2    
  40  0.611820     -0.491317      -1838.59       1838.59       25066.1       26904.7    
  41  0.404533     -0.905022      -3386.75       3386.75       23924.6       27311.3    
  42  0.902499     -0.102588      -383.903       383.903       24873.8       25257.8    
  43  0.704299     -0.350552      -1311.83       1311.83       25083.9       26395.7    
  44  0.511818     -0.669786      -2506.46       2506.46       24728.3       27234.8    
  45  0.748131     -0.290178      -1085.90       1085.90       24959.5       26045.4    
  46  0.296598      -1.21538      -4548.16       4548.16       25007.1       29555.3    
  47  0.805122     -0.216762      -811.161       811.161       24977.9       25789.0    
  48  0.525063     -0.644236      -2410.84       2410.84       24940.8       27351.6    
  49  0.192567      -1.64731      -6164.53       6164.53       25043.8       31208.3    
  50  0.991898     -0.813527E-02  -30.4436       30.4436       24727.1       24757.5    
  51  0.238175      -1.43475      -5369.08       5369.08       24946.8       30315.8    
  52  0.627675     -0.465733      -1742.85       1742.85       24377.9       26120.8    
  53  0.328849      -1.11216      -4161.88       4161.88       24395.5       28557.4    
loop,thermsimp(1:2)       38   3702.98       1399.84    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123      21541.55          0.89          1.18         21.87          0.24          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124      20123.24          0.89          1.20         21.71          0.39          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  20123.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       38
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       39
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      122     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -1207.22       1207.22       24727.1       25934.3    
   2  0.309663      -1.17227      -4386.84       4386.84       24947.8       29334.7    
   3  0.688114     -0.373801      -1398.83       1398.83       22554.5       23953.3    
   4  0.677876     -0.388791      -1454.92       1454.92       24610.1       26065.0    
   5  0.283701      -1.25984      -4714.53       4714.53       24873.8       29588.4    
   6  0.183733      -1.69427      -6340.25       6340.25       24626.5       30966.8    
   7  0.243414      -1.41299      -5287.66       5287.66       21784.2       27071.9    
   8  0.785389     -0.241576      -904.018       904.018       25055.5       25959.5    
   9  0.258033      -1.35467      -5069.41       5069.41       24977.9       30047.3    
  10  0.137887      -1.98132      -7414.46       7414.46       24442.1       31856.6    
  11  0.386520     -0.950573      -3557.21       3557.21       24959.5       28516.7    
  12  0.882934     -0.124505      -465.921       465.921       24666.3       25132.3    
  13  0.395106     -0.928602      -3474.99       3474.99       24377.9       27852.9    
  14  0.107633      -2.22903      -8341.43       8341.43       25184.3       33525.7    
  15  0.434094     -0.834495      -3122.82       3122.82       25038.7       28161.5    
  16  0.558484     -0.582529      -2179.93       2179.93       25083.9       27263.8    
  17  0.102706      -2.27589      -8516.76       8516.76       25240.9       33757.7    
  18  0.325804      -1.12146      -4196.69       4196.69       25246.7       29443.4    
  19  0.693871     -0.365469      -1367.65       1367.65       24949.0       26316.6    
  20  0.832622     -0.183176      -685.476       685.476       24970.4       25655.9    
  21  0.691207     -0.369316      -1382.04       1382.04       24702.7       26084.7    
  22  0.903946     -0.100985      -377.904       377.904       24959.2       25337.1    
  23  0.258785E-01  -3.65434      -13675.2       13675.2       25066.1       38741.3    
  24  0.247338      -1.39700      -5227.82       5227.82       24947.8       30175.6    
  25  0.861464     -0.149122      -558.042       558.042       24728.3       25286.4    
  26  0.954919     -0.461290E-01  -172.623       172.623       23924.6       24097.2    
  27  0.579638     -0.545352      -2040.80       2040.80       24544.4       26585.2    
  28  0.537182     -0.621418      -2325.45       2325.45       24940.8       27266.2    
  29  0.407710     -0.897199      -3357.48       3357.48       24967.8       28325.3    
  30  0.958466     -0.424211E-01  -158.747       158.747       25051.9       25210.7    
  31  0.884674     -0.122536      -458.551       458.551       24857.1       25315.7    
  32  0.395055     -0.928731      -3475.47       3475.47       24932.5       28408.0    
  33  0.325425      -1.12262      -4201.05       4201.05       25156.6       29357.6    
  34  0.679842     -0.385895      -1444.09       1444.09       27069.4       28513.5    
  35  0.765292     -0.267498      -1001.02       1001.02       25138.6       26139.6    
  36  0.217460      -1.52574      -5709.59       5709.59       24395.5       30105.1    
  37  0.181189      -1.70822      -6392.44       6392.44       26352.1       32744.5    
  38  0.518456     -0.656899      -2458.23       2458.23       25076.3       27534.5    
  39  0.249864E-01  -3.68942      -13806.5       13806.5       24778.7       38585.1    
  40  0.336654      -1.08870      -4074.11       4074.11       24713.2       28787.3    
  41  0.873801     -0.134903      -504.830       504.830       25007.1       25511.9    
  42  0.478904     -0.736255      -2755.19       2755.19       24798.0       27553.2    
  43  0.819950     -0.198512      -742.867       742.867       24693.2       25436.0    
  44  0.966813     -0.337500E-01  -126.298       126.298       24660.4       24786.6    
  45  0.514109     -0.665319      -2489.74       2489.74       24689.2       27179.0    
  46  0.483734     -0.726221      -2717.64       2717.64       24467.3       27185.0    
  47  0.227743E-01  -3.78212      -14153.4       14153.4       24946.8       39100.1    
  48  0.409495     -0.892830      -3341.12       3341.12       24625.1       27966.2    
  49  0.198361      -1.61767      -6053.60       6053.60       25043.8       31097.4    
  50  0.925767     -0.771331E-01  -288.645       288.645       24879.4       25168.1    
  51  0.842113     -0.171842      -643.061       643.061       24905.9       25549.0    
  52  0.347114E-01  -3.36069      -12576.3       12576.3       24951.2       37527.5    
  53  0.215814      -1.53334      -5738.02       5738.02       20123.2       25861.3    
loop,thermsimp(1:2)       39   1207.22       4386.84    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125      24508.79          0.88          1.19         21.87          0.20          0.04         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126      23294.80          0.88          1.16         21.85          0.27          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23294.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       39
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       40
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      124     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -173.748       173.748       22554.5       22728.2    
   2  0.450411     -0.797594      -2984.74       2984.74       23924.6       26909.3    
   3  0.691912E-01  -2.67088      -9994.91       9994.91       24660.4       34655.3    
   4  0.740935     -0.299842      -1122.06       1122.06       24666.3       25788.4    
   5  0.452531     -0.792898      -2967.16       2967.16       24879.4       27846.6    
   6  0.461330     -0.773642      -2895.10       2895.10       25051.9       27947.0    
   7  0.102999      -2.27303      -8506.09       8506.09       24728.3       33234.4    
   8  0.475106     -0.744217      -2784.99       2784.99       24857.1       27642.1    
   9  0.240275      -1.42597      -5336.23       5336.23       24959.2       30295.5    
  10  0.276707E-01  -3.58738      -13424.6       13424.6       24693.2       38117.8    
  11  0.132701E-01  -4.32224      -16174.6       16174.6       25007.1       41181.7    
  12  0.997219     -0.278509E-02  -10.4223       10.4223       24905.9       24916.3    
  13  0.563305     -0.573934      -2147.76       2147.76       24970.4       27118.2    
  14  0.347949      -1.05570      -3950.61       3950.61       20123.2       24073.9    
  15  0.546018     -0.605103      -2264.40       2264.40       24727.1       26991.5    
  16  0.343968      -1.06721      -3993.67       3993.67       25055.5       29049.2    
  17  0.945234     -0.563230E-01  -210.770       210.770       24610.1       24820.9    
  18  0.346208      -1.06072      -3969.38       3969.38       24702.7       28672.1    
  19  0.406433     -0.900337      -3369.22       3369.22       25138.6       28507.8    
  20  0.632259     -0.458455      -1715.62       1715.62       24949.0       26664.6    
  21  0.983930     -0.162002E-01  -60.6240       60.6240       24544.4       24605.0    
  22  0.200798      -1.60546      -6007.90       6007.90       21784.2       27792.1    
  23  0.223962      -1.49628      -5599.33       5599.33       24689.2       30288.6    
  24  0.594322     -0.520335      -1947.18       1947.18       24467.3       26414.5    
  25  0.875298     -0.133191      -498.424       498.424       25083.9       25582.3    
  26  0.327822      -1.11529      -4173.59       4173.59       24940.8       29114.4    
  27  0.215105      -1.53663      -5750.33       5750.33       25076.3       30826.6    
  28  0.905181     -0.996198E-01  -372.795       372.795       24798.0       25170.8    
  29  0.699086     -0.357981      -1339.63       1339.63       24377.9       25717.5    
  30  0.747401     -0.291154      -1089.55       1089.55       24625.1       25714.6    
  31  0.699189     -0.357834      -1339.08       1339.08       25038.7       26377.8    
  32  0.563488     -0.573610      -2146.55       2146.55       24967.8       27114.3    
  33  0.155576      -1.86062      -6962.78       6962.78       24932.5       31895.3    
  34  0.380593     -0.966025      -3615.03       3615.03       27069.4       30684.5    
  35  0.626112     -0.468226      -1752.18       1752.18       24959.5       26711.7    
  36  0.372369     -0.987870      -3696.78       3696.78       24713.2       28409.9    
  37  0.517531     -0.658686      -2464.92       2464.92       24947.8       27412.7    
  38  0.673247     -0.395643      -1480.56       1480.56       25156.6       26637.1    
  39  0.741527     -0.299044      -1119.07       1119.07       25246.7       26365.8    
  40  0.280982      -1.26947      -4750.56       4750.56       24873.8       29624.4    
  41  0.331745      -1.10339      -4129.07       4129.07       24977.9       29107.0    
  42  0.712030     -0.339635      -1270.97       1270.97       24395.5       25666.5    
  43  0.200581      -1.60654      -6011.94       6011.94       24947.8       30959.8    
  44  0.989915     -0.101357E-01  -37.9296       37.9296       24626.5       24664.5    
  45  0.808031     -0.213155      -797.664       797.664       25043.8       25841.4    
  46  0.893446     -0.112670      -421.630       421.630       24442.1       24863.7    
  47  0.364885      -1.00817      -3772.76       3772.76       26352.1       30124.9    
  48  0.923731     -0.793347E-01  -296.884       296.884       25184.3       25481.2    
  49  0.504880     -0.683434      -2557.53       2557.53       25240.9       27798.5    
  50  0.724988     -0.321600      -1203.48       1203.48       24951.2       26154.7    
  51  0.927322     -0.754540E-01  -282.362       282.362       24778.7       25061.0    
  52  0.857721     -0.153476      -574.335       574.335       25066.1       25640.5    
  53  0.943333     -0.583361E-01  -218.304       218.304       23294.8       23513.1    
loop,thermsimp(1:2)       40   173.748       2984.74    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127      24482.79          0.90          1.19         21.85          0.19          0.04         24.18
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24482.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       40
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       41
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      125     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -3844.41       3844.41       22554.5       26398.9    
   2  0.414955     -0.879585      -3291.56       3291.56       23294.8       26586.4    
   3  0.407443     -0.897854      -3359.92       3359.92       20123.2       23483.2    
   4  0.883897     -0.123414      -461.838       461.838       24544.4       25006.2    
   5  0.520045     -0.653840      -2446.79       2446.79       24626.5       27073.3    
   6  0.634521     -0.454885      -1702.26       1702.26       24610.1       26312.4    
   7  0.344406      -1.06594      -3988.92       3988.92       24442.1       28431.0    
   8  0.545595     -0.605879      -2267.30       2267.30       24905.9       27173.2    
   9  0.766876     -0.265430      -993.284       993.284       24778.7       25772.0    
  10  0.639043     -0.447783      -1675.68       1675.68       24798.0       26473.7    
  11  0.850701     -0.161694      -605.089       605.089       25184.3       25789.4    
  12  0.832060     -0.183851      -688.003       688.003       25083.9       25771.9    
  13  0.728209     -0.317167      -1186.89       1186.89       25066.1       26253.0    
  14  0.531327     -0.632378      -2366.47       2366.47       24395.5       26761.9    
  15  0.188974E-01  -3.96873      -14851.7       14851.7       24625.1       39476.8    
  16  0.246817      -1.39911      -5235.70       5235.70       24377.9       29613.6    
  17  0.935336     -0.668496E-01  -250.163       250.163       24666.3       24916.5    
  18  0.730823     -0.313585      -1173.49       1173.49       25043.8       26217.2    
  19  0.482288     -0.729213      -2728.84       2728.84       24951.2       27680.1    
  20  0.782974E-04  -9.45500      -35382.2       35382.2       25246.7       60629.0    
  21  0.258744      -1.35192      -5059.11       5059.11       25038.7       30097.8    
  22  0.389044     -0.944063      -3532.85       3532.85       24467.3       28000.2    
  23  0.611459E-01  -2.79449      -10457.5       10457.5       25156.6       35614.0    
  24  0.124922      -2.08006      -7783.97       7783.97       24949.0       32732.9    
  25  0.253683      -1.37167      -5133.03       5133.03       24959.5       30092.5    
  26  0.781437     -0.246621      -922.898       922.898       23924.6       24847.5    
  27  0.835634     -0.179565      -671.963       671.963       24727.1       25399.0    
  28  0.542030     -0.612434      -2291.83       2291.83       24967.8       27259.6    
  29  0.463443     -0.769071      -2878.00       2878.00       24970.4       27848.4    
  30  0.120587      -2.11538      -7916.13       7916.13       24947.8       32864.0    
  31  0.733316     -0.310178      -1160.74       1160.74       24857.1       26017.9    
  32  0.955530     -0.454889E-01  -170.227       170.227       21784.2       21954.5    
  33  0.419735     -0.868132      -3248.70       3248.70       25240.9       28489.6    
  34  0.284829      -1.25587      -4699.67       4699.67       24879.4       29579.1    
  35  0.924079     -0.789582E-01  -295.475       295.475       25051.9       25347.4    
  36  0.432674     -0.837770      -3135.08       3135.08       24713.2       27848.2    
  37  0.155293      -1.86244      -6969.57       6969.57       25138.6       32108.1    
  38  0.634342     -0.455168      -1703.32       1703.32       24702.7       26406.0    
  39  0.935635     -0.665293E-01  -248.964       248.964       25055.5       25304.5    
  40  0.931832     -0.706024E-01  -264.206       264.206       24977.9       25242.1    
  41  0.875970     -0.132424      -495.553       495.553       24940.8       25436.3    
  42  0.273544      -1.29629      -4850.95       4850.95       24873.8       29724.8    
  43  0.799596     -0.223649      -836.934       836.934       26352.1       27189.0    
  44  0.772883     -0.257628      -964.088       964.088       24689.2       25653.3    
  45  0.274276      -1.29362      -4840.96       4840.96       24959.2       29800.2    
  46  0.116034      -2.15387      -8060.17       8060.17       27069.4       35129.6    
  47  0.700214     -0.356369      -1333.60       1333.60       25076.3       26409.9    
  48  0.704184E-01  -2.65330      -9929.12       9929.12       24947.8       34876.9    
  49  0.699980E-01  -2.65929      -9951.52       9951.52       24932.5       34884.0    
  50  0.186964      -1.67684      -6275.03       6275.03       24728.3       31003.3    
  51  0.342641      -1.07107      -4008.14       4008.14       24660.4       28668.5    
  52  0.989806     -0.102462E-01  -38.3429       38.3429       24693.2       24731.5    
  53  0.216227      -1.53143      -5730.87       5730.87       24482.8       30213.7    
loop,thermsimp(1:2)       41   3844.41       3291.56    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128      24118.21          0.89          1.18         21.87          0.24          0.04         24.21
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24118.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       41
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       42
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      126     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -10790.4       10790.4       21784.2       32574.6    
   2  0.688513     -0.373221      -1396.66       1396.66       20123.2       21519.9    
   3  0.530653     -0.633647      -2371.22       2371.22       24693.2       27064.4    
   4  0.542886     -0.610856      -2285.93       2285.93       23924.6       26210.5    
   5  0.603382     -0.505205      -1890.56       1890.56       24666.3       26556.9    
   6  0.478412     -0.737283      -2759.04       2759.04       24544.4       27303.4    
   7  0.809657     -0.211144      -790.139       790.139       24977.9       25768.0    
   8  0.764585     -0.268422      -1004.48       1004.48       25055.5       26060.0    
   9  0.228600      -1.47578      -5522.63       5522.63       25051.9       30574.5    
  10  0.495526     -0.702136      -2627.51       2627.51       24727.1       27354.6    
  11  0.368264     -0.998954      -3738.26       3738.26       24940.8       28679.1    
  12  0.407647     -0.897355      -3358.06       3358.06       24689.2       28047.3    
  13  0.316165      -1.15149      -4309.08       4309.08       25083.9       29392.9    
  14  0.458518     -0.779756      -2917.98       2917.98       24778.7       27696.7    
  15  0.643610     -0.440663      -1649.04       1649.04       25184.3       26833.3    
  16  0.316553E-01  -3.45285      -12921.2       12921.2       24857.1       37778.3    
  17  0.570171     -0.561819      -2102.43       2102.43       25043.8       27146.2    
  18  0.448642E-01  -3.10412      -11616.1       11616.1       25066.1       36682.3    
  19  0.128957      -2.04828      -7665.02       7665.02       24610.1       32275.1    
  20  0.159422      -1.83620      -6871.39       6871.39       22554.5       29425.9    
  21  0.154083      -1.87026      -6998.84       6998.84       24702.7       31701.5    
  22  0.696997     -0.360974      -1350.83       1350.83       25076.3       26427.1    
  23  0.579421     -0.545727      -2042.20       2042.20       24798.0       26840.2    
  24  0.528206     -0.638269      -2388.52       2388.52       23294.8       25683.3    
  25  0.322914      -1.13037      -4230.03       4230.03       24395.5       28625.5    
  26  0.369562     -0.995437      -3725.10       3725.10       24626.5       28351.6    
  27  0.134248      -2.00806      -7514.53       7514.53       24905.9       32420.4    
  28  0.950150     -0.511358E-01  -191.359       191.359       26352.1       26543.5    
  29  0.138040      -1.98021      -7410.30       7410.30       24967.8       32378.1    
  30  0.316838      -1.14936      -4301.12       4301.12       24951.2       29252.3    
  31  0.151783      -1.88530      -7055.14       7055.14       24713.2       31768.3    
  32  0.338674      -1.08272      -4051.72       4051.72       24970.4       29022.1    
  33  0.814165     -0.205592      -769.363       769.363       24467.3       25236.7    
  34  0.578183     -0.547865      -2050.21       2050.21       24442.1       26492.3    
  35  0.208707      -1.56682      -5863.33       5863.33       25240.9       31104.3    
  36  0.540561     -0.615147      -2301.99       2301.99       24660.4       26962.3    
  37  0.910129     -0.941686E-01  -352.395       352.395       24879.4       25231.8    
  38  0.907740     -0.967972E-01  -362.232       362.232       24377.9       24740.1    
  39  0.549661     -0.598453      -2239.52       2239.52       24873.8       27113.4    
  40  0.193889      -1.64047      -6138.93       6138.93       24959.2       31098.2    
  41  0.807651     -0.213625      -799.423       799.423       24959.5       25758.9    
  42  0.613777     -0.488124      -1826.64       1826.64       25038.7       26865.4    
  43  0.664452     -0.408793      -1529.77       1529.77       24482.8       26012.6    
  44  0.584630     -0.536776      -2008.71       2008.71       24728.3       26737.0    
  45  0.618915     -0.479787      -1795.45       1795.45       25138.6       26934.0    
  46  0.542097     -0.612311      -2291.37       2291.37       24949.0       27240.3    
  47  0.133641      -2.01260      -7531.50       7531.50       24947.8       32479.3    
  48  0.479627     -0.734747      -2749.55       2749.55       24947.8       27697.4    
  49  0.225939      -1.48749      -5566.45       5566.45       24932.5       30498.9    
  50  0.324869      -1.12433      -4207.45       4207.45       27069.4       31276.9    
  51  0.669051     -0.401895      -1503.96       1503.96       25156.6       26660.5    
  52  0.602039     -0.507434      -1898.91       1898.91       24625.1       26524.0    
  53  0.143076      -1.94438      -7276.22       7276.22       24118.2       31394.4    
loop,thermsimp(1:2)       42   10790.4       1396.66    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129      24645.41          0.90          1.19         21.87          0.25          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130      45626.70          0.91          1.18         21.87          0.20          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24645.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       42
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       43
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      128     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -888.746       888.746       20123.2       21012.0    
   2  0.796559     -0.227454      -851.172       851.172       24377.9       25229.1    
   3  0.784232     -0.243051      -909.538       909.538       24879.4       25789.0    
   4  0.503549     -0.686074      -2567.41       2567.41       24467.3       27034.7    
   5  0.468337     -0.758566      -2838.69       2838.69       23294.8       26133.5    
   6  0.198518      -1.61688      -6050.64       6050.64       24959.5       31010.1    
   7  0.857529     -0.153700      -575.172       575.172       24977.9       25553.1    
   8  0.845427     -0.167913      -628.359       628.359       24482.8       25111.2    
   9  0.710919     -0.341197      -1276.82       1276.82       25055.5       26332.3    
  10  0.934107     -0.681640E-01  -255.082       255.082       23924.6       24179.7    
  11  0.565087     -0.570775      -2135.94       2135.94       25076.3       27212.2    
  12  0.147377      -1.91476      -7165.37       7165.37       24442.1       31607.5    
  13  0.471965     -0.750851      -2809.82       2809.82       24625.1       27434.9    
  14  0.287319      -1.24716      -4667.09       4667.09       26352.1       31019.2    
  15  0.526906     -0.640733      -2397.74       2397.74       24666.3       27064.1    
  16  0.176999      -1.73161      -6479.99       6479.99       25156.6       31636.6    
  17  0.868579     -0.140897      -527.259       527.259       24728.3       25255.6    
  18  0.621282     -0.475971      -1781.17       1781.17       25184.3       26965.5    
  19  0.181881      -1.70440      -6378.18       6378.18       24798.0       31176.2    
  20  0.565209     -0.570560      -2135.14       2135.14       25038.7       27173.9    
  21  0.927617     -0.751364E-01  -281.173       281.173       25138.6       25419.7    
  22  0.296120      -1.21699      -4554.19       4554.19       24660.4       29214.5    
  23  0.152389      -1.88132      -7040.22       7040.22       24693.2       31733.4    
  24  0.508731     -0.675835      -2529.09       2529.09       24873.8       27402.9    
  25  0.389654     -0.942496      -3526.98       3526.98       25043.8       28570.7    
  26  0.770754     -0.260386      -974.410       974.410       24949.0       25923.4    
  27  0.144347      -1.93554      -7243.11       7243.11       24544.4       31787.5    
  28  0.690124     -0.370884      -1387.91       1387.91       24727.1       26115.0    
  29  0.882429     -0.125077      -468.060       468.060       24778.7       25246.7    
  30  0.781105     -0.247045      -924.487       924.487       24947.8       25872.3    
  31  0.331946      -1.10278      -4126.80       4126.80       24689.2       28816.0    
  32  0.157011      -1.85144      -6928.40       6928.40       24626.5       31554.9    
  33  0.734200     -0.308973      -1156.23       1156.23       24395.5       25551.7    
  34  0.563390     -0.573784      -2147.20       2147.20       24940.8       27088.0    
  35  0.349498      -1.05126      -3933.99       3933.99       24970.4       28904.4    
  36  0.256822      -1.35937      -5087.00       5087.00       24951.2       30038.2    
  37  0.563556     -0.573488      -2146.09       2146.09       25083.9       27229.9    
  38  0.945419E-01  -2.35871      -8826.71       8826.71       22554.5       31381.2    
  39  0.571450     -0.559577      -2094.04       2094.04       24932.5       27026.5    
  40  0.583029E-01  -2.84210      -10635.6       10635.6       25051.9       35687.6    
  41  0.428808     -0.846746      -3168.67       3168.67       24959.2       28127.9    
  42  0.628450     -0.464499      -1738.23       1738.23       25240.9       26979.2    
  43  0.152789      -1.87869      -7030.40       7030.40       27069.4       34099.8    
  44  0.787004E-01  -2.54211      -9513.01       9513.01       24118.2       33631.2    
  45  0.170927E-01  -4.06911      -15227.3       15227.3       24702.7       39930.0    
  46  0.531078     -0.632847      -2368.22       2368.22       24713.2       27081.4    
  47  0.206082E-01  -3.88206      -14527.4       14527.4       24610.1       39137.5    
  48  0.909565     -0.947891E-01  -354.717       354.717       24967.8       25322.5    
  49  0.456291     -0.784625      -2936.20       2936.20       24905.9       27842.1    
  50  0.997425E-02  -4.60775      -17243.0       17243.0       24947.8       42190.8    
  51  0.251070      -1.38202      -5171.77       5171.77       21784.2       26956.0    
  52  0.548517     -0.600536      -2247.31       2247.31       25066.1       27313.5    
  53  0.210242      -1.55950      -5835.91       5835.91       24645.4       30481.3    
loop,thermsimp(1:2)       43   888.746       851.172    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131      24174.34          0.90          1.19         21.86          0.21          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24174.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       43
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       44
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      129     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -8434.57       8434.57       20123.2       28557.8    
   2  0.780131E-01  -2.55088      -9545.83       9545.83       23924.6       33470.4    
   3  0.723689     -0.323394      -1210.20       1210.20       24482.8       25693.0    
   4  0.439896     -0.821218      -3073.14       3073.14       24377.9       27451.1    
   5  0.967364     -0.331803E-01  -124.166       124.166       24778.7       24902.8    
   6  0.235884      -1.44441      -5405.25       5405.25       24728.3       30133.6    
   7  0.311956      -1.16489      -4359.24       4359.24       24967.8       29327.0    
   8  0.600573     -0.509870      -1908.02       1908.02       25138.6       27046.6    
   9  0.781739     -0.246234      -921.451       921.451       24395.5       25316.9    
  10  0.505036     -0.683126      -2556.37       2556.37       24977.9       27534.3    
  11  0.896130     -0.109670      -410.405       410.405       24879.4       25289.8    
  12  0.545040     -0.606897      -2271.11       2271.11       24947.8       27218.9    
  13  0.338019      -1.08465      -4058.97       4058.97       24949.0       29007.9    
  14  0.200467      -1.60711      -6014.07       6014.07       24727.1       30741.1    
  15  0.548763     -0.600089      -2245.64       2245.64       23294.8       25540.4    
  16  0.897241     -0.108431      -405.767       405.767       25055.5       25461.3    
  17  0.229905      -1.47009      -5501.33       5501.33       21784.2       27285.6    
  18  0.387828     -0.947193      -3544.56       3544.56       25184.3       28728.9    
  19  0.789400     -0.236482      -884.958       884.958       25240.9       26125.9    
  20  0.495667     -0.701851      -2626.45       2626.45       24932.5       27558.9    
  21  0.818926     -0.199761      -747.542       747.542       24467.3       25214.9    
  22  0.181319      -1.70750      -6389.75       6389.75       24666.3       31056.1    
  23  0.901986     -0.103156      -386.029       386.029       24713.2       25099.2    
  24  0.933790E-01  -2.37109      -8873.03       8873.03       24940.8       33813.8    
  25  0.171523      -1.76304      -6597.59       6597.59       25038.7       31636.3    
  26  0.648450     -0.433170      -1621.00       1621.00       25076.3       26697.3    
  27  0.777448     -0.251739      -942.050       942.050       25083.9       26025.9    
  28  0.777670     -0.251453      -940.981       940.981       25066.1       26007.1    
  29  0.972420     -0.279672E-01  -104.658       104.658       24873.8       24978.5    
  30  0.825305     -0.192002      -718.504       718.504       24625.1       25343.6    
  31  0.470649     -0.753642      -2820.26       2820.26       24905.9       27726.2    
  32  0.263953      -1.33198      -4984.51       4984.51       24959.2       29943.7    
  33  0.857551     -0.153675      -575.079       575.079       25043.8       25618.8    
  34  0.950157     -0.511279E-01  -191.329       191.329       24689.2       24880.6    
  35  0.866482     -0.143314      -536.305       536.305       24970.4       25506.7    
  36  0.904889     -0.999433E-01  -374.005       374.005       24660.4       25034.4    
  37  0.297565      -1.21212      -4535.97       4535.97       24951.2       29487.2    
  38  0.902696     -0.102369      -383.084       383.084       24645.4       25028.5    
  39  0.800054     -0.223076      -834.790       834.790       24959.5       25794.3    
  40  0.534162     -0.627057      -2346.56       2346.56       26352.1       28698.7    
  41  0.593018     -0.522530      -1955.40       1955.40       24798.0       26753.4    
  42  0.682417E-01  -2.68470      -10046.6       10046.6       22554.5       32601.1    
  43  0.336048      -1.09050      -4080.85       4080.85       24626.5       28707.4    
  44  0.576540     -0.550710      -2060.85       2060.85       24442.1       26503.0    
  45  0.217955      -1.52347      -5701.08       5701.08       25156.6       30857.6    
  46  0.281607      -1.26724      -4742.24       4742.24       24693.2       29435.4    
  47  0.306631      -1.18211      -4423.66       4423.66       24544.4       28968.0    
  48  0.676335E-01  -2.69365      -10080.1       10080.1       24118.2       34198.3    
  49  0.145631      -1.92668      -7209.97       7209.97       27069.4       34279.4    
  50  0.820952     -0.197291      -738.297       738.297       25051.9       25790.2    
  51  0.224137      -1.49550      -5596.41       5596.41       24610.1       30206.5    
  52  0.738282     -0.303430      -1135.49       1135.49       24702.7       25838.2    
  53  0.364089      -1.01036      -3780.93       3780.93       24174.3       27955.3    
loop,thermsimp(1:2)       44   8434.57       9545.83    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132      24288.91          0.89          1.18         21.85          0.23          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133      27899.29          0.90          1.17         21.89          0.23          0.05         24.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24288.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       44
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       45
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      131     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -509.914       509.914       24689.2       25199.2    
   2  0.990306     -0.974175E-02  -36.4553       36.4553       24778.7       24815.1    
   3  0.488656     -0.716096      -2679.76       2679.76       24873.8       27553.6    
   4  0.865115E-01  -2.44748      -9158.89       9158.89       24645.4       33804.3    
   5  0.234262      -1.45132      -5431.08       5431.08       24660.4       30091.4    
   6  0.906541     -0.981186E-01  -367.177       367.177       24713.2       25080.3    
   7  0.680454     -0.384995      -1440.72       1440.72       24467.3       25908.1    
   8  0.575574     -0.552388      -2067.13       2067.13       24879.4       26946.6    
   9  0.537443E-02  -5.22610      -19557.0       19557.0       24395.5       43952.5    
  10  0.421676     -0.863518      -3231.44       3231.44       24625.1       27856.5    
  11  0.297588      -1.21204      -4535.68       4535.68       25055.5       29591.2    
  12  0.119337      -2.12581      -7955.14       7955.14       24970.4       32925.6    
  13  0.958276     -0.426192E-01  -159.488       159.488       23294.8       23454.3    
  14  0.115549      -2.15806      -8075.83       8075.83       25043.8       33119.6    
  15  0.104220      -2.26125      -8462.01       8462.01       24482.8       32944.8    
  16  0.719503     -0.329194      -1231.90       1231.90       25051.9       26283.8    
  17  0.875656     -0.132782      -496.892       496.892       24959.5       25456.4    
  18  0.578760     -0.546868      -2046.47       2046.47       24702.7       26749.2    
  19  0.923704     -0.793639E-01  -296.994       296.994       25066.1       25363.1    
  20  0.457980     -0.780930      -2922.37       2922.37       25083.9       28006.2    
  21  0.783173     -0.244401      -914.592       914.592       25240.9       26155.5    
  22  0.764479     -0.268561      -1005.00       1005.00       24442.1       25447.1    
  23  0.496891     -0.699384      -2617.22       2617.22       25076.3       27693.5    
  24  0.554859     -0.589041      -2204.29       2204.29       24798.0       27002.3    
  25  0.734503E-02  -4.91373      -18388.0       18388.0       25138.6       43526.6    
  26  0.117643      -2.14010      -8008.64       8008.64       24947.8       32956.5    
  27  0.145440      -1.92799      -7214.88       7214.88       21784.2       28999.1    
  28  0.375449     -0.979633      -3665.96       3665.96       24377.9       28043.9    
  29  0.954324E-01  -2.34934      -8791.63       8791.63       24977.9       33769.5    
  30  0.449085     -0.800543      -2995.77       2995.77       24932.5       27928.3    
  31  0.354483      -1.03709      -3880.99       3880.99       24905.9       28786.9    
  32  0.153971      -1.87099      -7001.57       7001.57       24174.3       31175.9    
  33  0.871598     -0.137427      -514.275       514.275       20123.2       20637.5    
  34  0.633061     -0.457188      -1710.88       1710.88       26352.1       28063.0    
  35  0.947022E-01  -2.35702      -8820.37       8820.37       24626.5       33446.9    
  36  0.793812     -0.230909      -864.102       864.102       25184.3       26048.4    
  37  0.760585     -0.273667      -1024.11       1024.11       24544.4       25568.5    
  38  0.124312      -2.08496      -7802.30       7802.30       24949.0       32751.3    
  39  0.961605E-03  -6.94691      -25996.5       25996.5       24967.8       50964.3    
  40  0.672529     -0.396710      -1484.56       1484.56       24693.2       26177.7    
  41  0.749847E-01  -2.59047      -9693.99       9693.99       24951.2       34645.2    
  42  0.982441     -0.177147E-01  -66.2916       66.2916       24959.2       25025.5    
  43  0.340727      -1.07667      -4029.10       4029.10       24728.3       28757.4    
  44  0.915043     -0.887846E-01  -332.248       332.248       24610.1       24942.4    
  45  0.150614      -1.89303      -7084.06       7084.06       24727.1       31811.1    
  46  0.892785     -0.113409      -424.396       424.396       25156.6       25581.0    
  47  0.844073     -0.169516      -634.358       634.358       24666.3       25300.7    
  48  0.469949     -0.755131      -2825.83       2825.83       25038.7       27864.6    
  49  0.389072     -0.943991      -3532.58       3532.58       22554.5       26087.1    
  50  0.738049     -0.303745      -1136.67       1136.67       23924.6       25061.2    
  51  0.250173      -1.38560      -5185.17       5185.17       24940.8       30126.0    
  52  0.383245     -0.959081      -3589.05       3589.05       24118.2       27707.3    
  53  0.384434     -0.955983      -3577.46       3577.46       24288.9       27866.4    
loop,thermsimp(1:2)       45   509.914       36.4553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134      24105.52          0.89          1.19         21.90          0.23          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135      23909.82          0.91          1.18         21.86          0.22          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23909.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       45
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       46
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      133     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -9092.67       9092.67       20123.2       29215.9    
   2  0.312747      -1.16236      -4349.76       4349.76       23294.8       27644.6    
   3  0.317683      -1.14670      -4291.15       4291.15       24778.7       29069.8    
   4  0.693053     -0.366649      -1372.06       1372.06       24610.1       25982.2    
   5  0.361881      -1.01644      -3803.69       3803.69       24959.2       28762.9    
   6  0.127478      -2.05981      -7708.17       7708.17       23924.6       31632.7    
   7  0.718706     -0.330302      -1236.05       1236.05       24713.2       25949.2    
   8  0.609419E-01  -2.79783      -10470.0       10470.0       24689.2       35159.2    
   9  0.320798      -1.13695      -4254.65       4254.65       24666.3       28921.0    
  10  0.343503      -1.06856      -3998.74       3998.74       25066.1       29064.9    
  11  0.671828     -0.397753      -1488.46       1488.46       24442.1       25930.6    
  12  0.616702     -0.483369      -1808.85       1808.85       24959.5       26768.3    
  13  0.806358E-01  -2.51781      -9422.09       9422.09       24544.4       33966.5    
  14  0.997284     -0.271972E-02  -10.1777       10.1777       25156.6       25166.7    
  15  0.554344     -0.589969      -2207.77       2207.77       24467.3       26675.1    
  16  0.411057     -0.889023      -3326.88       3326.88       25184.3       28511.2    
  17  0.846258E-01  -2.46952      -9241.36       9241.36       22554.5       31795.8    
  18  0.737439     -0.304571      -1139.76       1139.76       25240.9       26380.7    
  19  0.393790     -0.931939      -3487.48       3487.48       24693.2       28180.7    
  20  0.965947     -0.346467E-01  -129.654       129.654       25051.9       25181.6    
  21  0.150166      -1.89601      -7095.21       7095.21       24702.7       31797.9    
  22  0.212005      -1.55114      -5804.65       5804.65       24879.4       30684.1    
  23  0.615060     -0.486036      -1818.83       1818.83       24798.0       26616.9    
  24  0.382142     -0.961962      -3599.83       3599.83       24873.8       28473.7    
  25  0.249044      -1.39013      -5202.10       5202.10       25076.3       30278.4    
  26  0.245943      -1.40266      -5248.99       5248.99       24118.2       29367.2    
  27  0.108882      -2.21749      -8298.25       8298.25       24625.1       32923.3    
  28  0.199835      -1.61026      -6025.89       6025.89       25038.7       31064.6    
  29  0.863954     -0.146235      -547.239       547.239       24288.9       24836.1    
  30  0.392842     -0.934347      -3496.49       3496.49       24932.5       28429.0    
  31  0.770596     -0.260592      -975.179       975.179       25083.9       26059.0    
  32  0.149868      -1.89800      -7102.66       7102.66       24377.9       31480.6    
  33  0.234154      -1.45178      -5432.80       5432.80       26352.1       31784.9    
  34  0.611512     -0.491821      -1840.48       1840.48       24728.3       26568.8    
  35  0.518093E-01  -2.96019      -11077.5       11077.5       24905.9       35983.5    
  36  0.567953     -0.565716      -2117.01       2117.01       21784.2       23901.2    
  37  0.190847      -1.65628      -6198.10       6198.10       25055.5       31253.6    
  38  0.104561      -2.25798      -8449.76       8449.76       24660.4       33110.1    
  39  0.135276      -2.00044      -7485.99       7485.99       24940.8       32426.8    
  40  0.262364      -1.33802      -5007.12       5007.12       24174.3       29181.5    
  41  0.463951     -0.767976      -2873.90       2873.90       24727.1       27601.0    
  42  0.419672     -0.868282      -3249.26       3249.26       24949.0       28198.2    
  43  0.897011     -0.108687      -406.725       406.725       24970.4       25377.1    
  44  0.818933     -0.199754      -747.513       747.513       24482.8       25230.3    
  45  0.136906      -1.98846      -7441.18       7441.18       24947.8       32389.0    
  46  0.561722     -0.576748      -2158.29       2158.29       25043.8       27202.0    
  47  0.991681     -0.835368E-02  -31.2609       31.2609       24626.5       24657.8    
  48  0.653388     -0.425585      -1592.61       1592.61       24977.9       26570.5    
  49  0.578557     -0.547219      -2047.79       2047.79       24645.4       26693.2    
  50  0.784121     -0.243191      -910.065       910.065       24951.2       25861.3    
  51  0.827307     -0.189579      -709.438       709.438       25138.6       25848.0    
  52  0.994261     -0.575522E-02  -21.5370       21.5370       24395.5       24417.0    
  53  0.274030      -1.29452      -4844.31       4844.31       23909.8       28754.1    
loop,thermsimp(1:2)       46   9092.67       4349.76    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136      24058.26          0.90          1.19         21.86          0.24          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137      23905.32          0.90          1.18         21.84          0.25          0.04         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23905.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       46
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       47
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      135     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -11871.2       11871.2       21784.2       33655.4    
   2  0.581082     -0.542864      -2031.49       2031.49       24395.5       26427.0    
   3  0.690143     -0.370857      -1387.81       1387.81       24626.5       26014.4    
   4  0.958690     -0.421877E-01  -157.874       157.874       24288.9       24446.8    
   5  0.947492     -0.539367E-01  -201.841       201.841       25156.6       25358.4    
   6  0.253816E-01  -3.67373      -13747.7       13747.7       25051.9       38799.6    
   7  0.811950     -0.208316      -779.555       779.555       24482.8       25262.3    
   8  0.448512     -0.801821      -3000.55       3000.55       24970.4       27971.0    
   9  0.625244     -0.469613      -1757.38       1757.38       25138.6       26895.9    
  10  0.557627     -0.584065      -2185.67       2185.67       24951.2       27136.9    
  11  0.762657     -0.270947      -1013.93       1013.93       24442.1       25456.0    
  12  0.579328     -0.545887      -2042.80       2042.80       24713.2       26756.0    
  13  0.168395      -1.78144      -6666.47       6666.47       24610.1       31276.6    
  14  0.993282     -0.674111E-02  -25.2264       25.2264       25083.9       25109.1    
  15  0.573458     -0.556070      -2080.91       2080.91       25240.9       27321.8    
  16  0.900456     -0.104854      -392.380       392.380       24728.3       25120.7    
  17  0.961937     -0.388068E-01  -145.222       145.222       24977.9       25123.1    
  18  0.685702     -0.377312      -1411.97       1411.97       24798.0       26210.0    
  19  0.335644      -1.09171      -4085.35       4085.35       24467.3       28552.7    
  20  0.726392     -0.319666      -1196.24       1196.24       24645.4       25841.7    
  21  0.523515     -0.647189      -2421.89       2421.89       24959.5       27381.4    
  22  0.877914     -0.130206      -487.255       487.255       25043.8       25531.0    
  23  0.893563     -0.112539      -421.140       421.140       24727.1       25148.2    
  24  0.829449     -0.186994      -699.765       699.765       23294.8       23994.6    
  25  0.454457     -0.788653      -2951.28       2951.28       24693.2       27644.5    
  26  0.261407      -1.34168      -5020.79       5020.79       24949.0       29969.8    
  27  0.144225      -1.93638      -7246.28       7246.28       24932.5       32178.8    
  28  0.963744     -0.369299E-01  -138.198       138.198       24873.8       25012.0    
  29  0.267843      -1.31735      -4929.77       4929.77       25184.3       30114.1    
  30  0.251943E-01  -3.68114      -13775.5       13775.5       23909.8       37685.3    
  31  0.321532      -1.13466      -4246.09       4246.09       24959.2       29205.3    
  32  0.440903     -0.818930      -3064.58       3064.58       24666.3       27730.9    
  33  0.214416      -1.53984      -5762.35       5762.35       25066.1       30828.5    
  34  0.212185      -1.55030      -5801.49       5801.49       24778.7       30580.2    
  35  0.948253E-01  -2.35572      -8815.51       8815.51       24174.3       32989.8    
  36  0.507627     -0.678008      -2537.22       2537.22       20123.2       22660.5    
  37  0.415074     -0.879299      -3290.49       3290.49       24118.2       27408.7    
  38  0.768069     -0.263876      -987.470       987.470       25076.3       26063.8    
  39  0.462999E-01  -3.07261      -11498.3       11498.3       24879.4       36377.7    
  40  0.835390     -0.179856      -673.054       673.054       25038.7       25711.8    
  41  0.678734     -0.387526      -1450.19       1450.19       25055.5       26505.7    
  42  0.363569      -1.01179      -3786.28       3786.28       24377.9       28164.2    
  43  0.677161     -0.389846      -1458.87       1458.87       23924.6       25383.4    
  44  0.506668     -0.679899      -2544.30       2544.30       26352.1       28896.4    
  45  0.875658     -0.132779      -496.883       496.883       22554.5       23051.4    
  46  0.924863     -0.781102E-01  -292.302       292.302       24702.7       24995.0    
  47  0.794570E-01  -2.53254      -9477.21       9477.21       24947.8       34425.0    
  48  0.449212     -0.800261      -2994.72       2994.72       24940.8       27935.5    
  49  0.658987     -0.417051      -1560.68       1560.68       24625.1       26185.8    
  50  0.674357     -0.393995      -1474.40       1474.40       24660.4       26134.7    
  51  0.436334     -0.829348      -3103.57       3103.57       24544.4       27647.9    
  52  0.331871      -1.10301      -4127.65       4127.65       24689.2       28816.9    
  53  0.233029      -1.45659      -5450.83       5450.83       23905.3       29356.1    
loop,thermsimp(1:2)       47   11871.2       2031.49    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138      23858.94          0.89          1.18         21.90          0.20          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23858.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       47
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       48
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      136     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -2124.51       2124.51       20123.2       22247.7    
   2  0.216137      -1.53184      -5732.42       5732.42       22554.5       28286.9    
   3  0.476425     -0.741444      -2774.61       2774.61       23294.8       26069.4    
   4  0.184047      -1.69256      -6333.87       6333.87       24288.9       30622.8    
   5  0.722630     -0.324858      -1215.68       1215.68       24702.7       25918.4    
   6  0.887750     -0.119065      -445.562       445.562       24873.8       25319.4    
   7  0.236344      -1.44247      -5397.97       5397.97       25083.9       30481.8    
   8  0.798055     -0.225578      -844.150       844.150       24728.3       25572.5    
   9  0.425454     -0.854597      -3198.05       3198.05       24977.9       28175.9    
  10  0.605701     -0.501368      -1876.21       1876.21       24727.1       26603.3    
  11  0.742456     -0.297792      -1114.39       1114.39       24482.8       25597.2    
  12  0.378462E-01  -3.27423      -12252.7       12252.7       25156.6       37409.3    
  13  0.341910      -1.07321      -4016.13       4016.13       23924.6       27940.7    
  14  0.794971E-01  -2.53203      -9475.32       9475.32       24442.1       33917.4    
  15  0.586423     -0.533715      -1997.25       1997.25       25043.8       27041.0    
  16  0.990523     -0.952170E-02  -35.6319       35.6319       25038.7       25074.4    
  17  0.348475      -1.05419      -3944.96       3944.96       24645.4       28590.4    
  18  0.998034     -0.196755E-02  -7.36291       7.36291       24626.5       24633.9    
  19  0.616072     -0.484391      -1812.68       1812.68       25076.3       26889.0    
  20  0.427239     -0.850411      -3182.39       3182.39       24660.4       27842.7    
  21  0.598160     -0.513898      -1923.09       1923.09       24625.1       26548.2    
  22  0.642831     -0.441873      -1653.57       1653.57       24798.0       26451.6    
  23  0.392766     -0.934541      -3497.21       3497.21       24395.5       27892.7    
  24  0.738407     -0.303260      -1134.85       1134.85       25055.5       26190.4    
  25  0.334341      -1.09559      -4099.90       4099.90       24713.2       28813.1    
  26  0.997912     -0.208996E-02  -7.82098       7.82098       25138.6       25146.4    
  27  0.492305E-01  -3.01124      -11268.6       11268.6       24951.2       36219.8    
  28  0.304734      -1.18832      -4446.88       4446.88       25240.9       29687.8    
  29  0.159886      -1.83330      -6860.51       6860.51       24959.5       31820.0    
  30  0.991331     -0.870666E-02  -32.5818       32.5818       24118.2       24150.8    
  31  0.735164     -0.307662      -1151.33       1151.33       24693.2       25844.5    
  32  0.279948      -1.27315      -4764.35       4764.35       24544.4       29308.7    
  33  0.457260     -0.782502      -2928.26       2928.26       24666.3       27594.6    
  34  0.678170     -0.388358      -1453.30       1453.30       24940.8       26394.1    
  35  0.689603     -0.371639      -1390.74       1390.74       24970.4       26361.2    
  36  0.468470     -0.758283      -2837.63       2837.63       24377.9       27215.5    
  37  0.937429     -0.646141E-01  -241.797       241.797       24467.3       24709.1    
  38  0.115915      -2.15490      -8064.01       8064.01       24689.2       32753.2    
  39  0.125789      -2.07315      -7758.07       7758.07       26352.1       34110.2    
  40  0.137562      -1.98368      -7423.28       7423.28       24959.2       32382.5    
  41  0.273901      -1.29499      -4846.07       4846.07       23905.3       28751.4    
  42  0.934963     -0.672484E-01  -251.655       251.655       24949.0       25200.6    
  43  0.450296     -0.797850      -2985.69       2985.69       25184.3       28170.0    
  44  0.681645     -0.383246      -1434.17       1434.17       24778.7       26212.8    
  45  0.282914E-01  -3.56520      -13341.6       13341.6       25066.1       38407.7    
  46  0.962226     -0.385062E-01  -144.097       144.097       24610.1       24754.2    
  47  0.771412     -0.259533      -971.217       971.217       24932.5       25903.7    
  48  0.778208     -0.250761      -938.393       938.393       24174.3       25112.7    
  49  0.945686     -0.558450E-01  -208.982       208.982       21784.2       21993.2    
  50  0.648669     -0.432833      -1619.74       1619.74       24947.8       26567.6    
  51  0.214283      -1.54046      -5764.65       5764.65       24879.4       30644.1    
  52  0.692999     -0.366726      -1372.35       1372.35       23909.8       25282.2    
  53  0.966323     -0.342573E-01  -128.197       128.197       23858.9       23987.1    
loop,thermsimp(1:2)       48   2124.51       5732.42    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139      23946.87          0.91          1.19         21.84          0.25          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23946.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       48
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       49
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      137     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -6396.96       6396.96       21784.2       28181.2    
   2  0.335083      -1.09338      -4091.61       4091.61       20123.2       24214.8    
   3  0.585160     -0.535871      -2005.32       2005.32       23858.9       25864.3    
   4  0.445729     -0.808044      -3023.84       3023.84       24118.2       27142.1    
   5  0.963605     -0.370741E-01  -138.738       138.738       24626.5       24765.3    
   6  0.538074     -0.619758      -2319.24       2319.24       24467.3       26786.6    
   7  0.971443     -0.289729E-01  -108.422       108.422       24610.1       24718.5    
   8  0.817136     -0.201950      -755.732       755.732       25038.7       25794.5    
   9  0.216943      -1.52812      -5718.50       5718.50       24174.3       29892.8    
  10  0.572311     -0.558074      -2088.41       2088.41       25138.6       27227.0    
  11  0.511761     -0.669897      -2506.87       2506.87       24949.0       27455.8    
  12  0.331920E-01  -3.40545      -12743.8       12743.8       23909.8       36653.6    
  13  0.662680     -0.411462      -1539.76       1539.76       24873.8       26413.6    
  14  0.578679     -0.547007      -2046.99       2046.99       24728.3       26775.3    
  15  0.473979     -0.746592      -2793.88       2793.88       24482.8       27276.7    
  16  0.243750      -1.41161      -5282.50       5282.50       24693.2       29975.7    
  17  0.784227     -0.243057      -909.563       909.563       24932.5       25842.0    
  18  0.215065      -1.53682      -5751.03       5751.03       24702.7       30453.7    
  19  0.813272     -0.206689      -773.468       773.468       23294.8       24068.3    
  20  0.877336     -0.130865      -489.720       489.720       25055.5       25545.2    
  21  0.911070     -0.931357E-01  -348.530       348.530       24778.7       25127.2    
  22  0.424500     -0.856844      -3206.46       3206.46       24970.4       28176.9    
  23  0.122508      -2.09958      -7857.00       7857.00       24940.8       32797.8    
  24  0.173199      -1.75331      -6561.21       6561.21       24798.0       31359.2    
  25  0.243010      -1.41465      -5293.88       5293.88       24625.1       29919.0    
  26  0.618804     -0.479966      -1796.12       1796.12       24947.8       26743.9    
  27  0.365303      -1.00703      -3768.47       3768.47       24727.1       28495.5    
  28  0.178054      -1.72567      -6457.75       6457.75       25076.3       31534.0    
  29  0.416122     -0.876776      -3281.05       3281.05       25043.8       28324.8    
  30  0.789287     -0.236625      -885.494       885.494       24377.9       25263.4    
  31  0.786736     -0.239863      -897.610       897.610       24666.3       25563.9    
  32  0.295880      -1.21780      -4557.22       4557.22       24660.4       29217.6    
  33  0.418649     -0.870722      -3258.39       3258.39       24395.5       27653.9    
  34  0.706992     -0.346736      -1297.55       1297.55       23924.6       25222.1    
  35  0.281863      -1.26633      -4738.84       4738.84       25184.3       29923.1    
  36  0.357290      -1.02921      -3851.48       3851.48       24977.9       28829.4    
  37  0.174180      -1.74767      -6540.07       6540.07       22554.5       29094.6    
  38  0.190924      -1.65588      -6196.59       6196.59       24645.4       30842.0    
  39  0.630369     -0.461449      -1726.82       1726.82       23905.3       25632.1    
  40  0.252261      -1.37729      -5154.06       5154.06       24713.2       29867.2    
  41  0.359213      -1.02384      -3831.39       3831.39       24544.4       28375.8    
  42  0.740344     -0.300640      -1125.05       1125.05       25240.9       26366.0    
  43  0.283211      -1.26156      -4720.99       4720.99       25083.9       29804.8    
  44  0.965119     -0.355039E-01  -132.862       132.862       24288.9       24421.8    
  45  0.389600     -0.942634      -3527.50       3527.50       24879.4       28406.9    
  46  0.598383     -0.513525      -1921.70       1921.70       24959.5       26881.2    
  47  0.631795     -0.459190      -1718.37       1718.37       24959.2       26677.6    
  48  0.997460     -0.254363E-02  -9.51872       9.51872       24689.2       24698.8    
  49  0.192532      -1.64749      -6165.21       6165.21       24442.1       30607.3    
  50  0.769348     -0.262212      -981.242       981.242       26352.1       27333.3    
  51  0.740745     -0.300099      -1123.02       1123.02       24951.2       26074.2    
  52  0.590587     -0.526639      -1970.78       1970.78       25156.6       27127.3    
  53  0.628310E-01  -2.76731      -10355.7       10355.7       23946.9       34302.6    
loop,thermsimp(1:2)       49   6396.96       4091.61    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140      26502.87          0.89          1.19         21.84          0.26          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  26502.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       49
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       50
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      138     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -12913.2       12913.2       23294.8       36208.0    
   2  0.601445     -0.508421      -1902.60       1902.60       20123.2       22025.8    
   3  0.651191     -0.428952      -1605.21       1605.21       24288.9       25894.1    
   4  0.187303      -1.67503      -6268.24       6268.24       24689.2       30957.5    
   5  0.664603     -0.408566      -1528.92       1528.92       24610.1       26139.0    
   6  0.945236     -0.563208E-01  -210.762       210.762       24626.5       24837.3    
   7  0.865870     -0.144020      -538.948       538.948       24778.7       25317.6    
   8  0.674117     -0.394351      -1475.73       1475.73       23924.6       25400.3    
   9  0.959689E-01  -2.34373      -8770.65       8770.65       24377.9       33148.6    
  10  0.663337     -0.410472      -1536.06       1536.06       25055.5       26591.6    
  11  0.384854     -0.954891      -3573.37       3573.37       24666.3       28239.7    
  12  0.892338     -0.113910      -426.273       426.273       23905.3       24331.6    
  13  0.470837     -0.753243      -2818.77       2818.77       25038.7       27857.5    
  14  0.262618      -1.33706      -5003.49       5003.49       24932.5       29936.0    
  15  0.877143     -0.131085      -490.542       490.542       23858.9       24349.5    
  16  0.262102      -1.33902      -5010.85       5010.85       24951.2       29962.1    
  17  0.306130      -1.18375      -4429.79       4429.79       25240.9       29670.7    
  18  0.251844      -1.37895      -5160.26       5160.26       24873.8       30034.1    
  19  0.371147     -0.991157      -3709.08       3709.08       24959.2       28668.3    
  20  0.244393E-01  -3.71156      -13889.3       13889.3       24947.8       38837.2    
  21  0.550903     -0.596197      -2231.07       2231.07       24728.3       26959.4    
  22  0.509078     -0.675154      -2526.55       2526.55       24467.3       26993.9    
  23  0.741178     -0.299515      -1120.84       1120.84       24959.5       26080.3    
  24  0.585965     -0.534496      -2000.18       2000.18       25156.6       27156.7    
  25  0.602491     -0.506683      -1896.10       1896.10       24118.2       26014.3    
  26  0.532366     -0.630423      -2359.15       2359.15       25138.6       27497.7    
  27  0.264247      -1.33087      -4980.35       4980.35       24482.8       29463.1    
  28  0.468512     -0.758194      -2837.30       2837.30       26352.1       29189.4    
  29  0.338122      -1.08435      -4057.83       4057.83       24949.0       29006.8    
  30  0.815455     -0.204008      -763.435       763.435       24395.5       25158.9    
  31  0.126007      -2.07142      -7751.61       7751.61       24970.4       32722.0    
  32  0.391435     -0.937937      -3509.92       3509.92       21784.2       25294.2    
  33  0.477179     -0.739864      -2768.70       2768.70       25043.8       27812.5    
  34  0.926058     -0.768180E-01  -287.466       287.466       24544.4       24831.8    
  35  0.305992E-01  -3.48678      -13048.1       13048.1       24879.4       37927.6    
  36  0.142122      -1.95107      -7301.24       7301.24       24727.1       32028.3    
  37  0.934627E-01  -2.37019      -8869.68       8869.68       24977.9       33847.6    
  38  0.933240     -0.690924E-01  -258.556       258.556       22554.5       22813.0    
  39  0.551354     -0.595378      -2228.01       2228.01       24660.4       26888.4    
  40  0.167646      -1.78590      -6683.15       6683.15       25083.9       31767.0    
  41  0.657770     -0.418900      -1567.60       1567.60       24713.2       26280.8    
  42  0.937012     -0.650587E-01  -243.461       243.461       24174.3       24417.8    
  43  0.435130     -0.832109      -3113.90       3113.90       24625.1       27739.0    
  44  0.346278E-01  -3.36310      -12585.3       12585.3       25184.3       37769.6    
  45  0.529273     -0.636251      -2380.96       2380.96       24693.2       27074.1    
  46  0.543808     -0.609159      -2279.58       2279.58       24702.7       26982.3    
  47  0.476993     -0.740254      -2770.16       2770.16       24442.1       27212.3    
  48  0.602365     -0.506891      -1896.87       1896.87       24645.4       26542.3    
  49  0.429141     -0.845970      -3165.77       3165.77       24798.0       27963.8    
  50  0.161300E-01  -4.12707      -15444.2       15444.2       25076.3       40520.5    
  51  0.806405     -0.215169      -805.201       805.201       24940.8       25746.0    
  52  0.577848E-01  -2.85103      -10669.0       10669.0       23946.9       34615.9    
  53  0.992308     -0.772154E-02  -28.8954       28.8954       26502.9       26531.8    
loop,thermsimp(1:2)       50   12913.2       1902.60    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141      23850.44          0.89          1.17         21.87          0.23          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142      25261.29          0.90          1.17         21.85          0.20          0.04         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    25261.        1.941      3.415      4.436     -102.6     0.4241    
                      0.5837      2.445     -99.70      2.915    -0.1781    

                       3.037     -2.588      1.540      7000.      7000.    

                      -2.051      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -3.851     -5.708     -7.040      5.843    

                      -13.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.3971E-01 0.2950     0.3752E-01 0.3421    

                     -0.2486     0.4647E-01 0.1474     0.1066E-02 0.1141    



                     -0.2911    -0.2286      0.000     0.2756    -0.4510E-02

                      0.2824E-01 0.5534E-01-0.7116    -0.2496E-02 0.3531    

                     -0.1275     0.6765E-01-0.5626     -1.474      7000.    



                      -1.080     -1.101     -2.142     -1.982    -0.3807    

                     -0.3252      9.627      8.927    -0.1672E+05 -6.000    

                     -0.1103     -2.063      8.549      8.927    -0.1969E+05



                      -6.000     0.7402    -0.4020      8.814      8.684    

                     -0.1944E+05 -6.000    -0.3304    -0.3147      9.727    

                       8.852    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23850.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       50
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       51
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      140     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -274.409       274.409       20123.2       20397.6    
   2  0.669511     -0.401208      -1501.39       1501.39       22554.5       24055.9    
   3  0.863337E-01  -2.44954      -9166.59       9166.59       23905.3       33071.9    
   4  0.279945      -1.27316      -4764.40       4764.40       23858.9       28623.3    
   5  0.832640     -0.183154      -685.395       685.395       24174.3       24859.7    
   6  0.848933     -0.163775      -612.876       612.876       24544.4       25157.2    
   7  0.141794      -1.95338      -7309.90       7309.90       24626.5       31936.4    
   8  0.208764      -1.56655      -5862.31       5862.31       24395.5       30257.8    
   9  0.755787     -0.279996      -1047.79       1047.79       21784.2       22832.0    
  10  0.177416      -1.72926      -6471.19       6471.19       24778.7       31249.9    
  11  0.405148     -0.903503      -3381.07       3381.07       23924.6       27305.6    
  12  0.640380     -0.445693      -1667.86       1667.86       24940.8       26608.7    
  13  0.548060     -0.601370      -2250.43       2250.43       24288.9       26539.3    
  14  0.773287     -0.257105      -962.131       962.131       24118.2       25080.3    
  15  0.180768      -1.71054      -6401.14       6401.14       24959.5       31360.6    
  16  0.135846      -1.99624      -7470.26       7470.26       24610.1       32080.4    
  17  0.601016     -0.509133      -1905.27       1905.27       24713.2       26618.4    
  18  0.302263      -1.19646      -4477.35       4477.35       26502.9       30980.2    
  19  0.189428      -1.66374      -6226.02       6226.02       24645.4       30871.4    
  20  0.737158     -0.304953      -1141.19       1141.19       25055.5       26196.7    
  21  0.790680     -0.234862      -878.894       878.894       24660.4       25539.2    
  22  0.177192E-01  -4.03310      -15092.6       15092.6       24728.3       39820.9    
  23  0.236042      -1.44375      -5402.75       5402.75       24702.7       30105.4    
  24  0.459229     -0.778206      -2912.18       2912.18       24467.3       27379.5    
  25  0.586479E-01  -2.83620      -10613.6       10613.6       24693.2       35306.7    
  26  0.263766      -1.33269      -4987.17       4987.17       25156.6       30143.7    
  27  0.942550     -0.591663E-01  -221.411       221.411       24442.1       24663.5    
  28  0.106855      -2.23628      -8368.55       8368.55       25138.6       33507.1    
  29  0.710700     -0.341505      -1277.97       1277.97       24625.1       25903.1    
  30  0.207109E-01  -3.87709      -14508.8       14508.8       25043.8       39552.5    
  31  0.901203     -0.104025      -389.280       389.280       25038.7       25428.0    
  32  0.949751     -0.515555E-01  -192.930       192.930       24798.0       24991.0    
  33  0.343487      -1.06861      -3998.92       3998.92       24666.3       28665.3    
  34  0.875043     -0.133483      -499.516       499.516       24959.2       25458.8    
  35  0.122447E-01  -4.40266      -16475.5       16475.5       24949.0       41424.5    
  36  0.820650     -0.197659      -739.674       739.674       26352.1       27091.8    
  37  0.748866     -0.289195      -1082.22       1082.22       24482.8       25565.0    
  38  0.594525     -0.519992      -1945.90       1945.90       25240.9       27186.8    
  39  0.927863E-01  -2.37746      -8896.86       8896.86       24932.5       33829.3    
  40  0.631335     -0.459918      -1721.09       1721.09       24951.2       26672.3    
  41  0.282620      -1.26365      -4728.81       4728.81       24873.8       29602.7    
  42  0.707811     -0.345578      -1293.21       1293.21       24689.2       25982.5    
  43  0.930463     -0.720730E-01  -269.710       269.710       25083.9       25353.6    
  44  0.988563     -0.115032E-01  -43.0471       43.0471       24727.1       24770.1    
  45  0.869439     -0.139907      -523.557       523.557       24970.4       25494.0    
  46  0.693921     -0.365397      -1367.38       1367.38       24377.9       25745.3    
  47  0.731753     -0.312312      -1168.73       1168.73       24977.9       26146.6    
  48  0.848712     -0.164035      -613.848       613.848       23946.9       24560.7    
  49  0.174447      -1.74613      -6534.34       6534.34       23294.8       29829.1    
  50  0.313212      -1.16087      -4344.19       4344.19       25184.3       29528.5    
  51  0.880789     -0.126937      -475.020       475.020       24879.4       25354.5    
  52  0.441967     -0.816520      -3055.56       3055.56       24947.8       28003.4    
  53  0.624106     -0.471435      -1764.19       1764.19       23850.4       25614.6    
loop,thermsimp(1:2)       51   274.409       1501.39    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143      23850.39          0.89          1.18         21.91          0.27          0.05         24.30
Just calling func    0   0         24.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23850.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       51
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       52
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      141     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -1566.11       1566.11       20123.2       21689.3    
   2  0.385391     -0.953496      -3568.15       3568.15       21784.2       25352.4    
   3  0.323679      -1.12800      -4221.18       4221.18       22554.5       26775.7    
   4  0.402516E-01  -3.21260      -12022.1       12022.1       23946.9       35969.0    
   5  0.866022     -0.143846      -538.295       538.295       24442.1       24980.4    
   6  0.560147     -0.579555      -2168.80       2168.80       24727.1       26895.9    
   7  0.389098     -0.943925      -3532.33       3532.33       24174.3       27706.7    
   8  0.470755     -0.753417      -2819.42       2819.42       24798.0       27617.4    
   9  0.794299     -0.230295      -861.804       861.804       24118.2       24980.0    
  10  0.897132     -0.108553      -406.224       406.224       24544.4       24950.6    
  11  0.359474      -1.02311      -3828.67       3828.67       25083.9       28912.5    
  12  0.604694     -0.503032      -1882.44       1882.44       24879.4       26761.9    
  13  0.101554      -2.28717      -8558.97       8558.97       25038.7       33597.7    
  14  0.274480      -1.29288      -4838.17       4838.17       24959.2       29797.4    
  15  0.916086     -0.876445E-01  -327.981       327.981       24970.4       25298.4    
  16  0.820070E-01  -2.50095      -9358.99       9358.99       24660.4       34019.3    
  17  0.975902     -0.243929E-01  -91.2826       91.2826       24482.8       24574.1    
  18  0.131665      -2.02750      -7587.25       7587.25       23850.4       31437.7    
  19  0.751313     -0.285933      -1070.01       1070.01       24377.9       25447.9    
  20  0.775324     -0.254475      -952.288       952.288       24625.1       25577.4    
  21  0.237000      -1.43969      -5387.59       5387.59       24689.2       30076.8    
  22  0.113641      -2.17471      -8138.13       8138.13       24977.9       33116.0    
  23  0.762281     -0.271440      -1015.77       1015.77       25055.5       26071.3    
  24  0.783730     -0.243690      -911.931       911.931       24288.9       25200.8    
  25  0.492891     -0.707468      -2647.47       2647.47       24940.8       27588.3    
  26  0.471904     -0.750980      -2810.30       2810.30       24713.2       27523.5    
  27  0.855781     -0.155740      -582.807       582.807       24951.2       25534.0    
  28  0.636473     -0.451814      -1690.77       1690.77       26352.1       28042.9    
  29  0.433340     -0.836232      -3129.32       3129.32       25240.9       28370.3    
  30  0.482236     -0.729321      -2729.25       2729.25       23924.6       26653.8    
  31  0.855143E-01  -2.45907      -9202.28       9202.28       24467.3       33669.6    
  32  0.916579     -0.871071E-01  -325.970       325.970       24947.8       25273.8    
  33  0.232519      -1.45878      -5459.02       5459.02       23858.9       29318.0    
  34  0.283977      -1.25886      -4710.88       4710.88       24666.3       29377.2    
  35  0.401228E-01  -3.21581      -12034.1       12034.1       25184.3       37218.4    
  36  0.235231      -1.44719      -5415.63       5415.63       24873.8       30289.5    
  37  0.233426      -1.45489      -5444.45       5444.45       23294.8       28739.3    
  38  0.903594     -0.101376      -379.365       379.365       24702.7       25082.1    
  39  0.857571     -0.153651      -574.988       574.988       25156.6       25731.5    
  40  0.444085     -0.811739      -3037.67       3037.67       24395.5       27433.2    
  41  0.151055      -1.89011      -7073.13       7073.13       24645.4       31718.5    
  42  0.745694     -0.293440      -1098.10       1098.10       26502.9       27601.0    
  43  0.470647E-01  -3.05623      -11437.0       11437.0       24778.7       36215.6    
  44  0.344459      -1.06578      -3988.34       3988.34       24959.5       28947.8    
  45  0.592738     -0.523004      -1957.17       1957.17       24626.5       26583.7    
  46  0.754292     -0.281975      -1055.20       1055.20       24610.1       25665.3    
  47  0.162950      -1.81431      -6789.48       6789.48       23905.3       30694.8    
  48  0.939100     -0.628333E-01  -235.133       235.133       25138.6       25373.7    
  49  0.966845     -0.337175E-01  -126.177       126.177       24932.5       25058.7    
  50  0.287323      -1.24715      -4667.04       4667.04       24693.2       29360.2    
  51  0.835081     -0.180227      -674.439       674.439       25043.8       25718.2    
  52  0.836052     -0.179064      -670.089       670.089       24728.3       25398.4    
  53  0.382321     -0.961495      -3598.08       3598.08       23850.4       27448.5    
loop,thermsimp(1:2)       52   1566.11       3568.15    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144      23866.07          0.89          1.19         21.92          0.20          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23866.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       52
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       53
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      142     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -2027.20       2027.20       20123.2       22150.4    
   2  0.307993      -1.17768      -4407.07       4407.07       24482.8       28889.9    
   3  0.551684     -0.594779      -2225.77       2225.77       24544.4       26770.1    
   4  0.969976     -0.304835E-01  -114.075       114.075       24118.2       24232.3    
   5  0.401714     -0.912015      -3412.92       3412.92       24442.1       27855.0    
   6  0.336211      -1.09002      -4079.03       4079.03       24932.5       29011.5    
   7  0.649191     -0.432028      -1616.72       1616.72       24702.7       26319.4    
   8  0.426986     -0.851005      -3184.61       3184.61       24288.9       27473.5    
   9  0.479997     -0.733976      -2746.67       2746.67       24947.8       27694.5    
  10  0.441527     -0.817516      -3059.29       3059.29       24970.4       28029.7    
  11  0.218988      -1.51874      -5683.39       5683.39       21784.2       27467.6    
  12  0.935549     -0.666221E-01  -249.312       249.312       25138.6       25387.9    
  13  0.159996      -1.83261      -6857.94       6857.94       24728.3       31586.3    
  14  0.486870     -0.719759      -2693.46       2693.46       24377.9       27071.4    
  15  0.835520     -0.179701      -672.471       672.471       24951.2       25623.7    
  16  0.643759     -0.440431      -1648.17       1648.17       24625.1       26273.3    
  17  0.177188      -1.73054      -6475.99       6475.99       24610.1       31086.1    
  18  0.408356     -0.895617      -3351.55       3351.55       25043.8       28395.3    
  19  0.463768     -0.768371      -2875.38       2875.38       25156.6       28031.9    
  20  0.616820     -0.483178      -1808.14       1808.14       25055.5       26863.7    
  21  0.377083     -0.975289      -3649.70       3649.70       24626.5       28276.2    
  22  0.278016      -1.28008      -4790.27       4790.27       23924.6       28714.9    
  23  0.746435     -0.292446      -1094.38       1094.38       24879.4       25973.8    
  24  0.872234     -0.136697      -511.544       511.544       22554.5       23066.0    
  25  0.887073E-01  -2.42241      -9065.09       9065.09       24727.1       33792.1    
  26  0.124913      -2.08014      -7784.24       7784.24       24395.5       32179.7    
  27  0.918160     -0.853835E-01  -319.520       319.520       23850.4       24169.9    
  28  0.924603     -0.783912E-01  -293.354       293.354       24713.2       25006.5    
  29  0.863214     -0.147092      -550.446       550.446       24940.8       25491.2    
  30  0.823499E-02  -4.79936      -17960.1       17960.1       26502.9       44462.9    
  31  0.548113     -0.601275      -2250.07       2250.07       24798.0       27048.1    
  32  0.800553     -0.222452      -832.454       832.454       24174.3       25006.8    
  33  0.180829      -1.71020      -6399.88       6399.88       26352.1       32752.0    
  34  0.968975E-01  -2.33410      -8734.61       8734.61       25240.9       33975.5    
  35  0.749847     -0.287886      -1077.32       1077.32       23294.8       24372.1    
  36  0.902028     -0.103110      -385.855       385.855       25083.9       25469.7    
  37  0.312083      -1.16449      -4357.71       4357.71       24959.5       29317.2    
  38  0.472691     -0.749313      -2804.06       2804.06       23858.9       26663.0    
  39  0.970346     -0.301026E-01  -112.649       112.649       24693.2       24805.8    
  40  0.485853     -0.721850      -2701.29       2701.29       24666.3       27367.6    
  41  0.604658     -0.503092      -1882.66       1882.66       24959.2       26841.9    
  42  0.172238      -1.75888      -6582.04       6582.04       24689.2       31271.3    
  43  0.359079E-01  -3.32680      -12449.5       12449.5       24873.8       37323.3    
  44  0.464923     -0.765884      -2866.07       2866.07       23905.3       26771.4    
  45  0.293512      -1.22584      -4587.30       4587.30       23850.4       28437.7    
  46  0.572788     -0.557239      -2085.29       2085.29       24645.4       26730.7    
  47  0.931713     -0.707300E-01  -264.684       264.684       24977.9       25242.6    
  48  0.983012     -0.171340E-01  -64.1185       64.1185       25038.7       25102.8    
  49  0.572194     -0.558278      -2089.17       2089.17       24467.3       26556.5    
  50  0.272189      -1.30126      -4869.54       4869.54       24660.4       29529.9    
  51  0.521081     -0.651849      -2439.33       2439.33       23946.9       26386.2    
  52  0.560075     -0.579685      -2169.28       2169.28       24778.7       26948.0    
  53  0.442251     -0.815877      -3053.15       3053.15       23866.1       26919.2    
loop,thermsimp(1:2)       53   2027.20       4407.07    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145      23816.54          0.92          1.19         21.84          0.23          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146      22921.58          0.92          1.17         21.61          0.35          0.04         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  22921.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       53
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       54
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      144     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -2130.11       2130.11       20123.2       22253.4    
   2  0.698829     -0.358349      -1341.00       1341.00       22554.5       23895.5    
   3  0.550231     -0.597418      -2235.64       2235.64       23850.4       26086.0    
   4  0.844966     -0.168459      -630.402       630.402       24118.2       24748.6    
   5  0.139804      -1.96751      -7362.77       7362.77       23294.8       30657.6    
   6  0.119451      -2.12485      -7951.56       7951.56       24693.2       32644.7    
   7  0.474112     -0.746312      -2792.83       2792.83       24713.2       27506.0    
   8  0.293024      -1.22750      -4593.52       4593.52       24174.3       28767.9    
   9  0.760137     -0.274256      -1026.31       1026.31       25038.7       26065.0    
  10  0.216376      -1.53074      -5728.29       5728.29       24977.9       30706.2    
  11  0.837069     -0.177849      -665.541       665.541       25138.6       25804.1    
  12  0.969258     -0.312245E-01  -116.848       116.848       25083.9       25200.7    
  13  0.335918      -1.09089      -4082.30       4082.30       24940.8       29023.1    
  14  0.966643     -0.339265E-01  -126.959       126.959       24951.2       25078.2    
  15  0.723887     -0.323119      -1209.17       1209.17       24879.4       26088.6    
  16  0.459929E-01  -3.07927      -11523.2       11523.2       24625.1       36148.2    
  17  0.536724     -0.622271      -2328.65       2328.65       24702.7       27031.3    
  18  0.432574     -0.838001      -3135.95       3135.95       23946.9       27082.8    
  19  0.160308      -1.83066      -6850.64       6850.64       24467.3       31318.0    
  20  0.885158     -0.121989      -456.504       456.504       23858.9       24315.4    
  21  0.753783     -0.282650      -1057.73       1057.73       24645.4       25703.1    
  22  0.135562      -1.99832      -7478.07       7478.07       24544.4       32022.4    
  23  0.817964     -0.200937      -751.940       751.940       23905.3       24657.3    
  24  0.286617      -1.24961      -4676.26       4676.26       24959.2       29635.5    
  25  0.319126      -1.14217      -4274.20       4274.20       25055.5       29329.7    
  26  0.104479E-01  -4.56135      -17069.4       17069.4       23866.1       40935.4    
  27  0.671407     -0.398379      -1490.80       1490.80       24778.7       26269.5    
  28  0.782955     -0.244680      -915.637       915.637       24798.0       25713.7    
  29  0.186689      -1.67831      -6280.54       6280.54       24377.9       30658.5    
  30  0.462519     -0.771067      -2885.47       2885.47       24666.3       27551.8    
  31  0.203171      -1.59371      -5963.93       5963.93       21784.2       27748.2    
  32  0.851762E-01  -2.46303      -9217.10       9217.10       24288.9       33506.0    
  33  0.702824     -0.352649      -1319.67       1319.67       24947.8       26267.5    
  34  0.747923     -0.290456      -1086.94       1086.94       24442.1       25529.0    
  35  0.224450      -1.49410      -5591.20       5591.20       24970.4       30561.6    
  36  0.243563E-02  -6.01755      -22518.7       22518.7       25156.6       47675.3    
  37  0.160790      -1.82766      -6839.42       6839.42       24626.5       31466.0    
  38  0.880431     -0.127343      -476.541       476.541       25043.8       25520.3    
  39  0.507306     -0.678640      -2539.59       2539.59       23850.4       26390.0    
  40  0.266019      -1.32419      -4955.34       4955.34       23924.6       28879.9    
  41  0.310751      -1.16876      -4373.72       4373.72       24482.8       28856.5    
  42  0.945006     -0.565640E-01  -211.672       211.672       24932.5       25144.2    
  43  0.265699E-01  -3.62797      -13576.5       13576.5       24959.5       38536.0    
  44  0.652842     -0.426420      -1595.74       1595.74       24660.4       26256.1    
  45  0.799409     -0.223882      -837.806       837.806       24610.1       25447.9    
  46  0.543529     -0.609672      -2281.50       2281.50       24689.2       26970.7    
  47  0.361947      -1.01626      -3803.01       3803.01       24728.3       28531.3    
  48  0.398721     -0.919492      -3440.90       3440.90       24395.5       27836.4    
  49  0.349489      -1.05128      -3934.08       3934.08       26352.1       30286.2    
  50  0.948739     -0.526212E-01  -196.918       196.918       24727.1       24924.0    
  51  0.346176      -1.06081      -3969.73       3969.73       25240.9       29210.7    
  52  0.678244     -0.388248      -1452.89       1452.89       24873.8       26326.7    
  53  0.858518     -0.152547      -570.859       570.859       22921.6       23492.4    
loop,thermsimp(1:2)       54   2130.11       1341.00    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147      23617.45          0.89          1.18         21.88          0.23          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23617.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       54
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       55
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      145     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -6129.86       6129.86       20123.2       26253.1    
   2  0.875287     -0.133204      -498.471       498.471       22921.6       23420.1    
   3  0.103612      -2.26710      -8483.88       8483.88       22554.5       31038.4    
   4  0.159072      -1.83840      -6879.61       6879.61       23858.9       30738.6    
   5  0.118738      -2.13084      -7973.96       7973.96       23905.3       31879.3    
   6  0.294105      -1.22382      -4579.74       4579.74       24118.2       28697.9    
   7  0.967643     -0.328919E-01  -123.087       123.087       24727.1       24850.1    
   8  0.675183     -0.392772      -1469.82       1469.82       24951.2       26421.0    
   9  0.170112      -1.77130      -6628.51       6628.51       24932.5       31561.0    
  10  0.990992     -0.904902E-02  -33.8630       33.8630       25083.9       25117.7    
  11  0.198513      -1.61690      -6050.73       6050.73       24610.1       30660.8    
  12  0.404817E-01  -3.20690      -12000.8       12000.8       25043.8       37044.6    
  13  0.834933E-01  -2.48299      -9291.78       9291.78       24442.1       33733.9    
  14  0.458935     -0.778848      -2914.58       2914.58       24645.4       27560.0    
  15  0.929311     -0.733118E-01  -274.346       274.346       24798.0       25072.4    
  16  0.593071     -0.522440      -1955.06       1955.06       25138.6       27093.6    
  17  0.963359E-01  -2.33991      -8756.37       8756.37       25038.7       33795.1    
  18  0.383119E-01  -3.26200      -12207.0       12207.0       23850.4       36057.3    
  19  0.841843     -0.172161      -644.258       644.258       24879.4       25523.7    
  20  0.874261     -0.134376      -502.860       502.860       24660.4       25163.2    
  21  0.706443     -0.347513      -1300.45       1300.45       24947.8       26248.3    
  22  0.423649E-01  -3.16143      -11830.6       11830.6       24778.7       36609.3    
  23  0.904835     -0.100003      -374.228       374.228       24873.8       25248.1    
  24  0.728800     -0.316356      -1183.86       1183.86       23850.4       25034.3    
  25  0.764304     -0.268790      -1005.86       1005.86       24689.2       25695.1    
  26  0.578519     -0.547284      -2048.03       2048.03       24702.7       26750.7    
  27  0.321737      -1.13402      -4243.70       4243.70       23946.9       28190.6    
  28  0.592944     -0.522656      -1955.87       1955.87       24713.2       26669.0    
  29  0.159596      -1.83511      -6867.31       6867.31       24666.3       31533.6    
  30  0.797332     -0.226484      -847.542       847.542       21784.2       22631.8    
  31  0.263979      -1.33189      -4984.15       4984.15       24395.5       29379.6    
  32  0.449355     -0.799942      -2993.52       2993.52       24728.3       27721.8    
  33  0.859901     -0.150938      -564.835       564.835       24174.3       24739.2    
  34  0.730093     -0.314584      -1177.23       1177.23       24482.8       25660.0    
  35  0.484666     -0.724295      -2710.44       2710.44       23924.6       26635.0    
  36  0.180217      -1.71359      -6412.56       6412.56       24940.8       31353.4    
  37  0.857397     -0.153854      -575.749       575.749       25240.9       25816.7    
  38  0.502370     -0.688418      -2576.18       2576.18       25055.5       27631.7    
  39  0.245408      -1.40484      -5257.14       5257.14       24959.2       30216.4    
  40  0.134540      -2.00590      -7506.41       7506.41       26352.1       33858.5    
  41  0.468137     -0.758995      -2840.29       2840.29       24970.4       27810.7    
  42  0.864548E-01  -2.44813      -9161.34       9161.34       23294.8       32456.1    
  43  0.178791      -1.72154      -6442.30       6442.30       24377.9       30820.2    
  44  0.690351     -0.370555      -1386.68       1386.68       24977.9       26364.6    
  45  0.731648     -0.312455      -1169.26       1169.26       24467.3       25636.6    
  46  0.857623     -0.153591      -574.763       574.763       24626.5       25201.3    
  47  0.754956     -0.281095      -1051.91       1051.91       24544.4       25596.3    
  48  0.355557      -1.03407      -3869.67       3869.67       24693.2       28562.9    
  49  0.200964      -1.60463      -6004.81       6004.81       24288.9       30293.7    
  50  0.243499      -1.41264      -5286.36       5286.36       24625.1       29911.4    
  51  0.796288     -0.227794      -852.446       852.446       24959.5       25811.9    
  52  0.256937      -1.35892      -5085.33       5085.33       23866.1       28951.4    
  53  0.591760     -0.524655      -1963.35       1963.35       23617.5       25580.8    
loop,thermsimp(1:2)       55   6129.86       498.471    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148      23856.16          0.90          1.20         21.88          0.23          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149      24467.15          0.90          1.19         21.84          0.21          0.04         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23856.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       55
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       56
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      147     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -7322.99       7322.99       21784.2       29107.2    
   2  0.197548      -1.62177      -6068.96       6068.96       22921.6       28990.5    
   3  0.774000     -0.256183      -958.681       958.681       24174.3       25133.0    
   4  0.170284      -1.77029      -6624.73       6624.73       24727.1       31351.8    
   5  0.250636      -1.38376      -5178.25       5178.25       23850.4       29028.7    
   6  0.907951     -0.965652E-01  -361.364       361.364       24798.0       25159.4    
   7  0.611678     -0.491549      -1839.46       1839.46       25083.9       26923.3    
   8  0.735945E-02  -4.91177      -18380.7       18380.7       24660.4       43041.1    
   9  0.309131      -1.17399      -4393.27       4393.27       24626.5       29019.8    
  10  0.577854     -0.548434      -2052.33       2052.33       24873.8       26926.2    
  11  0.931529     -0.709274E-01  -265.423       265.423       24879.4       25144.9    
  12  0.665703     -0.406912      -1522.74       1522.74       23617.5       25140.2    
  13  0.585695     -0.534955      -2001.90       2001.90       24544.4       26546.3    
  14  0.295001      -1.22078      -4568.36       4568.36       24467.3       29035.7    
  15  0.317712E-01  -3.44920      -12907.5       12907.5       24482.8       37390.3    
  16  0.222963      -1.50075      -5616.07       5616.07       24689.2       30305.3    
  17  0.325931      -1.12107      -4195.24       4195.24       24959.5       29154.7    
  18  0.785098     -0.241947      -905.407       905.407       25240.9       26146.3    
  19  0.550467     -0.596988      -2234.03       2234.03       24947.8       27181.9    
  20  0.780222     -0.248176      -928.719       928.719       20123.2       21052.0    
  21  0.130712      -2.03476      -7614.42       7614.42       24977.9       32592.3    
  22  0.873397     -0.135365      -506.559       506.559       24951.2       25457.8    
  23  0.366975      -1.00246      -3751.38       3751.38       23924.6       27676.0    
  24  0.813244     -0.206724      -773.597       773.597       24713.2       25486.8    
  25  0.782660E-01  -2.54764      -9533.72       9533.72       24702.7       34236.4    
  26  0.700327     -0.356208      -1332.99       1332.99       25138.6       26471.6    
  27  0.437766     -0.826071      -3091.30       3091.30       24645.4       27736.7    
  28  0.508966E-01  -2.97796      -11144.0       11144.0       25055.5       36199.6    
  29  0.276850      -1.28428      -4805.99       4805.99       24728.3       29534.3    
  30  0.792031     -0.233154      -872.504       872.504       24970.4       25842.9    
  31  0.174747      -1.74441      -6527.91       6527.91       23946.9       30474.8    
  32  0.469718     -0.755623      -2827.67       2827.67       24693.2       27520.9    
  33  0.252316      -1.37707      -5153.24       5153.24       24118.2       29271.5    
  34  0.980061     -0.201409E-01  -75.3706       75.3706       23866.1       23941.4    
  35  0.838300     -0.176379      -660.043       660.043       24395.5       25055.5    
  36  0.369385     -0.995915      -3726.89       3726.89       24625.1       28352.0    
  37  0.923139     -0.799751E-01  -299.281       299.281       24959.2       25258.5    
  38  0.592446     -0.523496      -1959.01       1959.01       24288.9       26247.9    
  39  0.348787      -1.05329      -3941.61       3941.61       24610.1       28551.7    
  40  0.569584     -0.562850      -2106.28       2106.28       23858.9       25965.2    
  41  0.543034E-01  -2.91317      -10901.6       10901.6       24377.9       35279.5    
  42  0.582662     -0.540148      -2021.33       2021.33       22554.5       24575.8    
  43  0.702825     -0.352648      -1319.67       1319.67       24940.8       26260.5    
  44  0.941375     -0.604140E-01  -226.080       226.080       24666.3       24892.4    
  45  0.258857      -1.35148      -5057.47       5057.47       24932.5       29990.0    
  46  0.116535      -2.14956      -8044.04       8044.04       23905.3       31949.4    
  47  0.102671      -2.27622      -8518.03       8518.03       23294.8       31812.8    
  48  0.172023      -1.76013      -6586.70       6586.70       24442.1       31028.8    
  49  0.434982E-01  -3.13504      -11731.9       11731.9       25038.7       36770.6    
  50  0.852122     -0.160026      -598.845       598.845       26352.1       26950.9    
  51  0.583521     -0.538675      -2015.81       2015.81       23850.4       25866.2    
  52  0.843374     -0.170345      -637.460       637.460       24778.7       25416.1    
  53  0.194743      -1.63607      -6122.47       6122.47       23856.2       29978.6    
loop,thermsimp(1:2)       56   7322.99       6068.96    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150      24125.71          0.89          1.19         21.85          0.27          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24125.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       56
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       57
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      148     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -1542.09       1542.09       20123.2       21665.3    
   2  0.724212     -0.322671      -1207.49       1207.49       23866.1       25073.6    
   3  0.633711     -0.456163      -1707.04       1707.04       22554.5       24261.5    
   4  0.448566     -0.801700      -3000.10       3000.10       24666.3       27666.4    
   5  0.964228     -0.364273E-01  -136.317       136.317       24395.5       24531.8    
   6  0.714306     -0.336444      -1259.03       1259.03       24174.3       25433.4    
   7  0.528330     -0.638035      -2387.64       2387.64       23617.5       26005.1    
   8  0.654127     -0.424453      -1588.38       1588.38       24879.4       26467.8    
   9  0.368899     -0.997232      -3731.82       3731.82       24798.0       28529.8    
  10  0.227697      -1.47974      -5537.45       5537.45       24959.2       30496.7    
  11  0.612266     -0.490588      -1835.87       1835.87       24778.7       26614.5    
  12  0.313777      -1.15907      -4337.46       4337.46       24951.2       29288.7    
  13  0.258526      -1.35276      -5062.27       5062.27       24713.2       29775.4    
  14  0.119298      -2.12613      -7956.36       7956.36       24970.4       32926.8    
  15  0.213331      -1.54491      -5781.32       5781.32       23850.4       29631.7    
  16  0.294218      -1.22343      -4578.31       4578.31       23858.9       28437.3    
  17  0.352988      -1.04132      -3896.81       3896.81       25240.9       29137.7    
  18  0.348706      -1.05353      -3942.48       3942.48       24288.9       28231.4    
  19  0.449249     -0.800179      -2994.41       2994.41       24940.8       27935.2    
  20  0.879121     -0.128833      -482.115       482.115       25138.6       25620.7    
  21  0.464081     -0.767695      -2872.85       2872.85       24544.4       27417.2    
  22  0.497582     -0.697995      -2612.02       2612.02       25083.9       27695.9    
  23  0.920207     -0.831566E-01  -311.187       311.187       24873.8       25185.0    
  24  0.811773     -0.208535      -780.374       780.374       26352.1       27132.5    
  25  0.190651      -1.65731      -6201.94       6201.94       24947.8       31149.8    
  26  0.645174     -0.438235      -1639.95       1639.95       24693.2       26333.1    
  27  0.668343     -0.402954      -1507.93       1507.93       23924.6       25432.5    
  28  0.765111     -0.267735      -1001.91       1001.91       24645.4       25647.3    
  29  0.991779     -0.825499E-02  -30.8916       30.8916       24625.1       24656.0    
  30  0.136888      -1.98859      -7441.67       7441.67       24610.1       32051.8    
  31  0.645145E-01  -2.74086      -10256.8       10256.8       22921.6       33178.4    
  32  0.408515E-01  -3.19781      -11966.8       11966.8       24626.5       36593.3    
  33  0.264109      -1.33140      -4982.31       4982.31       23850.4       28832.8    
  34  0.382737     -0.960407      -3594.01       3594.01       24467.3       28061.3    
  35  0.402738E-02  -5.51464      -20636.7       20636.7       21784.2       42421.0    
  36  0.318074      -1.14547      -4286.55       4286.55       24959.5       29246.0    
  37  0.245237      -1.40553      -5259.75       5259.75       24118.2       29378.0    
  38  0.519766     -0.654377      -2448.79       2448.79       24728.3       27177.1    
  39  0.255147      -1.36592      -5111.50       5111.50       23856.2       28967.7    
  40  0.833841     -0.181712      -679.998       679.998       24932.5       25612.5    
  41  0.696242E-01  -2.66464      -9971.56       9971.56       24689.2       34660.8    
  42  0.487295     -0.718886      -2690.20       2690.20       23946.9       26637.1    
  43  0.276229E-01  -3.58911      -13431.1       13431.1       24442.1       37873.2    
  44  0.638327     -0.448905      -1679.88       1679.88       24727.1       26406.9    
  45  0.206684      -1.57657      -5899.78       5899.78       23294.8       29194.6    
  46  0.736003     -0.306521      -1147.06       1147.06       23905.3       25052.4    
  47  0.217444E-01  -3.82840      -14326.5       14326.5       24977.9       39304.4    
  48  0.956929     -0.440260E-01  -164.753       164.753       24702.7       24867.4    
  49  0.883561     -0.123795      -463.261       463.261       24377.9       24841.2    
  50  0.700901     -0.355388      -1329.92       1329.92       25055.5       26385.4    
  51  0.201997      -1.59950      -5985.61       5985.61       25038.7       31024.3    
  52  0.412152     -0.886362      -3316.92       3316.92       24482.8       27799.7    
  53  0.890450     -0.116029      -434.200       434.200       24125.7       24559.9    
loop,thermsimp(1:2)       57   1542.09       1207.49    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151      27257.63          0.89          1.18         21.87          0.22          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  27257.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       57
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       58
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      149     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -10623.9       10623.9       20123.2       30747.1    
   2  0.104884      -2.25490      -8438.25       8438.25       22554.5       30992.7    
   3  0.784254     -0.243023      -909.433       909.433       24395.5       25304.9    
   4  0.813133     -0.206861      -774.110       774.110       24125.7       24899.8    
   5  0.490778     -0.711764      -2663.55       2663.55       24625.1       27288.6    
   6  0.168573      -1.78039      -6662.52       6662.52       24377.9       31040.4    
   7  0.450161     -0.798149      -2986.81       2986.81       24702.7       27689.5    
   8  0.828233     -0.188461      -705.253       705.253       23905.3       24610.6    
   9  0.994731     -0.528342E-02  -19.7715       19.7715       23866.1       23885.8    
  10  0.813340     -0.206606      -773.156       773.156       24873.8       25647.0    
  11  0.776133     -0.253432      -948.386       948.386       23924.6       24873.0    
  12  0.729556     -0.315319      -1179.98       1179.98       24174.3       25354.3    
  13  0.530451     -0.634028      -2372.64       2372.64       24932.5       27305.1    
  14  0.752564E-01  -2.58685      -9680.46       9680.46       25138.6       34819.0    
  15  0.918457     -0.850597E-01  -318.308       318.308       24645.4       24963.7    
  16  0.162642      -1.81621      -6796.56       6796.56       23617.5       30414.0    
  17  0.725851     -0.320411      -1199.03       1199.03       24693.2       25892.2    
  18  0.322292      -1.13230      -4237.25       4237.25       25055.5       29292.8    
  19  0.838064     -0.176661      -661.097       661.097       24727.1       25388.2    
  20  0.346062E-01  -3.36372      -12587.6       12587.6       24879.4       37467.1    
  21  0.442915     -0.814377      -3047.54       3047.54       24778.7       27826.2    
  22  0.143708      -1.93997      -7259.72       7259.72       23946.9       31206.6    
  23  0.940845     -0.609769E-01  -228.186       228.186       26352.1       26580.3    
  24  0.972503     -0.278816E-01  -104.338       104.338       24728.3       24832.7    
  25  0.291831      -1.23158      -4608.79       4608.79       24544.4       29153.2    
  26  0.211976      -1.55128      -5805.17       5805.17       24666.3       30471.5    
  27  0.695427     -0.363229      -1359.27       1359.27       25083.9       26443.1    
  28  0.982540E-01  -2.32020      -8682.59       8682.59       24482.8       33165.4    
  29  0.730742     -0.313695      -1173.90       1173.90       24940.8       26114.7    
  30  0.417794     -0.872766      -3266.04       3266.04       24467.3       27733.4    
  31  0.868385     -0.141121      -528.098       528.098       24288.9       24817.0    
  32  0.300897      -1.20099      -4494.30       4494.30       23858.9       28353.2    
  33  0.917219     -0.864093E-01  -323.359       323.359       24798.0       25121.4    
  34  0.304394      -1.18943      -4451.07       4451.07       23850.4       28301.5    
  35  0.856500     -0.154901      -579.668       579.668       23856.2       24435.8    
  36  0.310652      -1.16908      -4374.91       4374.91       25240.9       29615.8    
  37  0.846275     -0.166911      -624.611       624.611       23294.8       23919.4    
  38  0.206825      -1.57588      -5897.23       5897.23       24959.5       30856.7    
  39  0.606376     -0.500256      -1872.04       1872.04       24951.2       26823.3    
  40  0.840015     -0.174336      -652.394       652.394       24118.2       24770.6    
  41  0.348835      -1.05315      -3941.09       3941.09       23850.4       27791.5    
  42  0.857325     -0.153939      -576.065       576.065       24713.2       25289.2    
  43  0.308035E-01  -3.48013      -13023.2       13023.2       24959.2       37982.5    
  44  0.400632     -0.914711      -3423.01       3423.01       25038.7       28461.7    
  45  0.242237      -1.41784      -5305.79       5305.79       24947.8       30253.6    
  46  0.407771     -0.897050      -3356.92       3356.92       24610.1       27967.0    
  47  0.430691     -0.842364      -3152.27       3152.27       24970.4       28122.7    
  48  0.415503     -0.878266      -3286.63       3286.63       22921.6       26208.2    
  49  0.593575     -0.521591      -1951.88       1951.88       24689.2       26641.1    
  50  0.973620     -0.267342E-01  -100.044       100.044       24626.5       24726.6    
  51  0.510257     -0.672840      -2517.88       2517.88       24442.1       26960.0    
  52  0.796475     -0.227560      -851.568       851.568       24977.9       25829.5    
  53  0.213576      -1.54376      -5777.03       5777.03       27257.6       33034.7    
loop,thermsimp(1:2)       58   10623.9       8438.25    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152      24042.15          0.89          1.18         21.90          0.21          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153      23410.81          0.91          1.18         21.71          0.40          0.05         24.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23410.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       58
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       59
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      151     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -4148.45       4148.45       23866.1       28014.5    
   2  0.939148     -0.627826E-01  -234.944       234.944       23294.8       23529.7    
   3  0.130906      -2.03328      -7608.88       7608.88       23856.2       31465.0    
   4  0.664370     -0.408916      -1530.23       1530.23       23905.3       25435.6    
   5  0.490908     -0.711498      -2662.55       2662.55       24626.5       27289.1    
   6  0.711731     -0.340055      -1272.55       1272.55       24118.2       25390.8    
   7  0.676080     -0.391444      -1464.85       1464.85       24288.9       25753.8    
   8  0.611139     -0.492432      -1842.76       1842.76       24728.3       26571.1    
   9  0.614246     -0.487359      -1823.78       1823.78       23924.6       25748.4    
  10  0.988045     -0.120275E-01  -45.0092       45.0092       24125.7       24170.7    
  11  0.232883      -1.45722      -5453.16       5453.16       24645.4       30098.6    
  12  0.450825     -0.796675      -2981.30       2981.30       24798.0       27779.3    
  13  0.493319     -0.706599      -2644.22       2644.22       24713.2       27357.4    
  14  0.191184      -1.65452      -6191.50       6191.50       24395.5       30587.0    
  15  0.894136     -0.111897      -418.739       418.739       24174.3       24593.1    
  16  0.391751     -0.937128      -3506.90       3506.90       24727.1       28234.0    
  17  0.236278      -1.44275      -5399.01       5399.01       24873.8       30272.9    
  18  0.496874E-01  -3.00200      -11234.0       11234.0       24977.9       36211.9    
  19  0.784524     -0.242678      -908.145       908.145       24693.2       25601.3    
  20  0.292328      -1.22988      -4602.42       4602.42       24940.8       29543.2    
  21  0.832247E-01  -2.48621      -9303.84       9303.84       22921.6       32225.4    
  22  0.423133     -0.860069      -3218.53       3218.53       25083.9       28302.4    
  23  0.234472      -1.45042      -5427.72       5427.72       26352.1       31779.8    
  24  0.868463     -0.141031      -527.761       527.761       24689.2       25217.0    
  25  0.122969      -2.09582      -7842.93       7842.93       24951.2       32794.2    
  26  0.811771     -0.208537      -780.382       780.382       24442.1       25222.5    
  27  0.786834     -0.239738      -897.143       897.143       24625.1       25522.2    
  28  0.163144      -1.81312      -6785.01       6785.01       24932.5       31717.5    
  29  0.571103     -0.560186      -2096.31       2096.31       24702.7       26799.0    
  30  0.769982     -0.261388      -978.158       978.158       24467.3       25445.5    
  31  0.471769     -0.751265      -2811.37       2811.37       23850.4       26661.8    
  32  0.584935     -0.536254      -2006.76       2006.76       24778.7       26785.4    
  33  0.416140     -0.876734      -3280.89       3280.89       24610.1       27891.0    
  34  0.106525E-01  -4.54196      -16996.8       16996.8       24970.4       41967.2    
  35  0.595424     -0.518482      -1940.25       1940.25       23850.4       25790.7    
  36  0.302400      -1.19600      -4475.66       4475.66       23858.9       28334.6    
  37  0.629701     -0.462510      -1730.79       1730.79       25038.7       26769.5    
  38  0.939026E-01  -2.36550      -8852.10       8852.10       24544.4       33396.5    
  39  0.911727     -0.924151E-01  -345.833       345.833       25055.5       25401.4    
  40  0.289502      -1.23959      -4638.77       4638.77       25240.9       29879.7    
  41  0.326571      -1.11911      -4187.89       4187.89       24947.8       29135.7    
  42  0.972366     -0.280231E-01  -104.867       104.867       23617.5       23722.3    
  43  0.823413     -0.194297      -727.093       727.093       24666.3       25393.4    
  44  0.790717     -0.234815      -878.718       878.718       20123.2       21002.0    
  45  0.167922      -1.78426      -6677.00       6677.00       24959.5       31636.5    
  46  0.804665     -0.217329      -813.284       813.284       22554.5       23367.8    
  47  0.154714      -1.86617      -6983.55       6983.55       24377.9       31361.5    
  48  0.240456      -1.42522      -5333.42       5333.42       23946.9       29280.3    
  49  0.351787      -1.04473      -3909.56       3909.56       27257.6       31167.2    
  50  0.666429E-01  -2.70841      -10135.3       10135.3       24482.8       34618.1    
  51  0.484113     -0.725437      -2714.71       2714.71       25138.6       27853.3    
  52  0.298509      -1.20896      -4524.12       4524.12       24879.4       29403.6    
  53  0.982136     -0.180253E-01  -67.4537       67.4537       23410.8       23478.3    
loop,thermsimp(1:2)       59   4148.45       234.944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154      23982.73          0.91          1.20         21.64          0.47          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155      23480.02          0.91          1.19         21.63          0.48          0.04         24.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23480.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       59
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       60
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      153     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -4454.24       4454.24       20123.2       24577.5    
   2  0.843344     -0.170380      -637.591       637.591       22554.5       23192.1    
   3  0.457815     -0.781289      -2923.72       2923.72       23410.8       26334.5    
   4  0.933709     -0.685899E-01  -256.676       256.676       23294.8       23551.5    
   5  0.887159     -0.119731      -448.053       448.053       23617.5       24065.5    
   6  0.786211     -0.240530      -900.106       900.106       24125.7       25025.8    
   7  0.794803     -0.229661      -859.432       859.432       24174.3       25033.8    
   8  0.573435E-01  -2.85870      -10697.7       10697.7       24689.2       35387.0    
   9  0.647106     -0.435245      -1628.76       1628.76       24442.1       26070.9    
  10  0.110118      -2.20620      -8256.00       8256.00       24118.2       32374.2    
  11  0.339548      -1.08014      -4042.07       4042.07       24666.3       28708.4    
  12  0.635246     -0.453742      -1697.98       1697.98       25055.5       26753.5    
  13  0.488392     -0.716638      -2681.78       2681.78       23905.3       26587.1    
  14  0.602571     -0.506549      -1895.60       1895.60       24467.3       26362.9    
  15  0.710041     -0.342433      -1281.44       1281.44       24625.1       25906.5    
  16  0.585763     -0.534840      -2001.46       2001.46       24693.2       26694.6    
  17  0.288010      -1.24476      -4658.11       4658.11       23924.6       28582.7    
  18  0.455238     -0.786934      -2944.85       2944.85       24288.9       27233.8    
  19  0.723984     -0.322986      -1208.67       1208.67       23850.4       25059.1    
  20  0.554067     -0.590470      -2209.64       2209.64       24728.3       26938.0    
  21  0.646516     -0.436157      -1632.18       1632.18       23850.4       25482.6    
  22  0.271985      -1.30201      -4872.34       4872.34       25038.7       29911.1    
  23  0.901636E-02  -4.70871      -17620.8       17620.8       24778.7       42399.5    
  24  0.383616     -0.958114      -3585.43       3585.43       24702.7       28288.1    
  25  0.443516     -0.813022      -3042.47       3042.47       24626.5       27669.0    
  26  0.223023      -1.50048      -5615.07       5615.07       24713.2       30328.2    
  27  0.123255      -2.09350      -7834.23       7834.23       24798.0       32632.3    
  28  0.817485     -0.201523      -754.134       754.134       25138.6       25892.7    
  29  0.333893      -1.09693      -4104.92       4104.92       24610.1       28715.0    
  30  0.867877     -0.141706      -530.288       530.288       23866.1       24396.4    
  31  0.365747      -1.00581      -3763.93       3763.93       24727.1       28491.0    
  32  0.429445     -0.845262      -3163.12       3163.12       25083.9       28247.0    
  33  0.856620     -0.154761      -579.143       579.143       23858.9       24438.1    
  34  0.729532     -0.315352      -1180.10       1180.10       24947.8       26127.9    
  35  0.315845      -1.15251      -4312.88       4312.88       23946.9       28259.7    
  36  0.547596     -0.602217      -2253.60       2253.60       24879.4       27133.0    
  37  0.752130     -0.284846      -1065.95       1065.95       24940.8       26006.7    
  38  0.806451     -0.215112      -804.987       804.987       25240.9       26045.9    
  39  0.618613     -0.480275      -1797.27       1797.27       24645.4       26442.7    
  40  0.630350     -0.461480      -1726.94       1726.94       24873.8       26600.8    
  41  0.251741      -1.37935      -5161.79       5161.79       24395.5       29557.3    
  42  0.846504     -0.166640      -623.595       623.595       27257.6       27881.2    
  43  0.830791     -0.185377      -693.711       693.711       24377.9       25071.6    
  44  0.566838     -0.567681      -2124.36       2124.36       23856.2       25980.5    
  45  0.499450E-01  -2.99683      -11214.7       11214.7       24959.5       36174.2    
  46  0.976301     -0.239838E-01  -89.7517       89.7517       24932.5       25022.2    
  47  0.401049     -0.913672      -3419.12       3419.12       26352.1       29771.2    
  48  0.709931E-01  -2.64517      -9898.70       9898.70       22921.6       32820.3    
  49  0.920370E-02  -4.68815      -17543.9       17543.9       24951.2       42495.1    
  50  0.379723     -0.968314      -3623.60       3623.60       24544.4       28168.0    
  51  0.207569      -1.57229      -5883.79       5883.79       24482.8       30366.6    
  52  0.745673     -0.293468      -1098.21       1098.21       24977.9       26076.1    
  53  0.915877     -0.878737E-01  -328.839       328.839       23480.0       23808.9    
loop,thermsimp(1:2)       60   4454.24       637.591    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156      24028.84          0.89          1.19         21.85          0.32          0.04         24.30
Just calling func    0   0         24.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24028.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       60
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       61
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      154     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -698.712       698.712       22554.5       23253.2    
   2  0.735850     -0.306729      -1147.83       1147.83       23294.8       24442.6    
   3  0.828786     -0.187793      -702.755       702.755       23480.0       24182.8    
   4  0.592078     -0.524118      -1961.34       1961.34       23617.5       25578.8    
   5  0.691797E-01  -2.67105      -9995.53       9995.53       23866.1       33861.6    
   6  0.772335     -0.258337      -966.742       966.742       23858.9       24825.7    
   7  0.504563     -0.684063      -2559.88       2559.88       20123.2       22683.1    
   8  0.700615     -0.355797      -1331.45       1331.45       24932.5       26263.9    
   9  0.764596     -0.268408      -1004.43       1004.43       24125.7       25130.1    
  10  0.459614     -0.777368      -2909.05       2909.05       24174.3       27083.4    
  11  0.931193     -0.712882E-01  -266.773       266.773       23850.4       24117.2    
  12  0.502482E-01  -2.99078      -11192.0       11192.0       24377.9       35569.9    
  13  0.498197     -0.696760      -2607.40       2607.40       23850.4       26457.8    
  14  0.551534E-01  -2.89764      -10843.5       10843.5       25138.6       35982.0    
  15  0.172209      -1.75905      -6582.66       6582.66       24625.1       31207.7    
  16  0.238868E-01  -3.73443      -13974.9       13974.9       23856.2       37831.1    
  17  0.699366     -0.357581      -1338.13       1338.13       24940.8       26278.9    
  18  0.764093     -0.269066      -1006.89       1006.89       25240.9       26247.8    
  19  0.465633     -0.764357      -2860.36       2860.36       24442.1       27302.5    
  20  0.209906      -1.56110      -5841.90       5841.90       24977.9       30819.8    
  21  0.216891      -1.52836      -5719.39       5719.39       24947.8       30667.2    
  22  0.795854E-01  -2.53092      -9471.16       9471.16       23410.8       32882.0    
  23  0.701683     -0.354273      -1325.75       1325.75       24467.3       25793.1    
  24  0.574425     -0.554385      -2074.61       2074.61       24645.4       26720.0    
  25  0.674968     -0.393090      -1471.01       1471.01       23905.3       25376.3    
  26  0.684189     -0.379521      -1420.24       1420.24       24873.8       26294.1    
  27  0.541862     -0.612745      -2293.00       2293.00       24693.2       26986.2    
  28  0.668027     -0.403426      -1509.69       1509.69       25055.5       26565.2    
  29  0.353251      -1.04058      -3894.02       3894.02       24728.3       28622.3    
  30  0.778708     -0.250119      -935.991       935.991       24879.4       25815.4    
  31  0.829283     -0.187194      -700.513       700.513       24288.9       24989.4    
  32  0.679297     -0.386697      -1447.09       1447.09       24626.5       26073.6    
  33  0.536301     -0.623060      -2331.60       2331.60       27257.6       29589.2    
  34  0.247738      -1.39538      -5221.76       5221.76       24544.4       29766.1    
  35  0.271399      -1.30416      -4880.41       4880.41       25083.9       29964.3    
  36  0.284124      -1.25835      -4708.95       4708.95       23946.9       28655.8    
  37  0.664442     -0.408808      -1529.83       1529.83       24702.7       26232.5    
  38  0.874508     -0.134094      -501.801       501.801       24727.1       25228.9    
  39  0.916444     -0.872538E-01  -326.519       326.519       23924.6       24251.1    
  40  0.295165      -1.22022      -4566.28       4566.28       24666.3       29232.6    
  41  0.242592      -1.41637      -5300.32       5300.32       24610.1       29910.4    
  42  0.396124     -0.926028      -3465.36       3465.36       24395.5       27860.8    
  43  0.509193E-01  -2.97751      -11142.4       11142.4       26352.1       37494.5    
  44  0.778911     -0.249858      -935.012       935.012       25038.7       25973.7    
  45  0.351009      -1.04694      -3917.84       3917.84       24713.2       28631.0    
  46  0.480934     -0.732025      -2739.37       2739.37       24482.8       27222.2    
  47  0.908579     -0.958731E-01  -358.774       358.774       24118.2       24477.0    
  48  0.898885     -0.106600      -398.915       398.915       24798.0       25196.9    
  49  0.561121     -0.577819      -2162.30       2162.30       22921.6       25083.9    
  50  0.851109     -0.161215      -603.296       603.296       24689.2       25292.5    
  51  0.975854     -0.244425E-01  -91.4681       91.4681       24959.5       25051.0    
  52  0.187829      -1.67223      -6257.76       6257.76       24778.7       31036.4    
  53  0.962131     -0.386049E-01  -144.466       144.466       24028.8       24173.3    
loop,thermsimp(1:2)       61   698.712       1147.83    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157      25013.29          0.89          1.20         21.86          0.25          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25013.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       61
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       62
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      155     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -322.638       322.638       20123.2       20445.9    
   2  0.899579E-01  -2.40841      -9012.70       9012.70       22554.5       31567.2    
   3  0.997625     -0.237830E-02  -8.90002       8.90002       23850.4       23859.3    
   4  0.224083      -1.49574      -5597.32       5597.32       24028.8       29626.2    
   5  0.120769      -2.11388      -7910.51       7910.51       23480.0       31390.5    
   6  0.302676E-01  -3.49768      -13088.9       13088.9       23924.6       37013.5    
   7  0.315161      -1.15467      -4320.98       4320.98       23294.8       27615.8    
   8  0.155895      -1.85857      -6955.11       6955.11       24118.2       31073.3    
   9  0.467639     -0.760060      -2844.28       2844.28       23858.9       26703.2    
  10  0.277823      -1.28077      -4792.86       4792.86       24288.9       29081.8    
  11  0.712282     -0.339281      -1269.65       1269.65       24959.5       26229.1    
  12  0.929560     -0.730437E-01  -273.342       273.342       22921.6       23194.9    
  13  0.499024     -0.695101      -2601.19       2601.19       24125.7       26726.9    
  14  0.940347     -0.615066E-01  -230.168       230.168       24798.0       25028.2    
  15  0.714006     -0.336864      -1260.60       1260.60       24727.1       25987.7    
  16  0.162603      -1.81644      -6797.45       6797.45       24689.2       31486.7    
  17  0.663729     -0.409881      -1533.85       1533.85       23905.3       25439.2    
  18  0.314148      -1.15789      -4333.03       4333.03       23617.5       27950.5    
  19  0.497386     -0.698388      -2613.49       2613.49       24467.3       27080.8    
  20  0.368387     -0.998622      -3737.02       3737.02       24879.4       28616.5    
  21  0.326342      -1.11981      -4190.52       4190.52       25038.7       29229.2    
  22  0.442952     -0.814294      -3047.23       3047.23       24626.5       27673.8    
  23  0.929694     -0.729000E-01  -272.805       272.805       24702.7       24975.5    
  24  0.945450E-01  -2.35868      -8826.59       8826.59       25240.9       34067.5    
  25  0.407158     -0.898555      -3362.55       3362.55       24932.5       28295.0    
  26  0.706679     -0.347179      -1299.21       1299.21       24940.8       26240.0    
  27  0.657848     -0.418781      -1567.15       1567.15       24873.8       26441.0    
  28  0.968040     -0.324817E-01  -121.552       121.552       23850.4       23971.9    
  29  0.330387      -1.10749      -4144.42       4144.42       25055.5       29199.9    
  30  0.756161     -0.279501      -1045.94       1045.94       24645.4       25691.4    
  31  0.307772      -1.17840      -4409.76       4409.76       24693.2       29102.9    
  32  0.759008E-01  -2.57833      -9648.55       9648.55       24174.3       33822.9    
  33  0.615618E-01  -2.78771      -10432.1       10432.1       24482.8       34914.9    
  34  0.545984     -0.605166      -2264.64       2264.64       24442.1       26706.7    
  35  0.339865      -1.07921      -4038.58       4038.58       24395.5       28434.1    
  36  0.816477     -0.202757      -758.752       758.752       24728.3       25487.1    
  37  0.932889     -0.694691E-01  -259.965       259.965       24713.2       24973.1    
  38  0.667042     -0.404902      -1515.21       1515.21       23946.9       25462.1    
  39  0.583049     -0.539484      -2018.84       2018.84       24666.3       26685.2    
  40  0.210192      -1.55973      -5836.80       5836.80       27257.6       33094.4    
  41  0.158846      -1.83982      -6884.94       6884.94       24544.4       31429.3    
  42  0.360401      -1.02054      -3819.03       3819.03       24610.1       28429.1    
  43  0.508154     -0.676971      -2533.34       2533.34       25083.9       27617.2    
  44  0.873303     -0.135473      -506.963       506.963       24947.8       25454.8    
  45  0.650524     -0.429977      -1609.05       1609.05       24977.9       26586.9    
  46  0.805601     -0.216166      -808.931       808.931       24778.7       25587.6    
  47  0.312590E-03  -8.07062      -30201.7       30201.7       24625.1       54826.7    
  48  0.892261     -0.113997      -426.596       426.596       23410.8       23837.4    
  49  0.504672     -0.683846      -2559.07       2559.07       23866.1       26425.1    
  50  0.269834      -1.30995      -4902.05       4902.05       24377.9       29280.0    
  51  0.752889     -0.283838      -1062.17       1062.17       25138.6       26200.7    
  52  0.952800     -0.483498E-01  -180.933       180.933       26352.1       26533.0    
  53  0.147189E-01  -4.21863      -15786.8       15786.8       25013.3       40800.1    
loop,thermsimp(1:2)       62   322.638       9012.70    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158      24172.56          0.89          1.20         21.85          0.24          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159      22997.01          0.91          1.21         21.77          0.36          0.04         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  22997.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       62
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       63
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      157     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -1805.86       1805.86       20123.2       21929.1    
   2  0.828850     -0.187716      -702.464       702.464       22921.6       23624.0    
   3  0.138898      -1.97402      -7387.12       7387.12       23410.8       30797.9    
   4  0.174947      -1.74327      -6523.63       6523.63       23850.4       30374.1    
   5  0.452367E-01  -3.09585      -11585.2       11585.2       23850.4       35435.6    
   6  0.982229     -0.179305E-01  -67.0989       67.0989       24713.2       24780.3    
   7  0.855728     -0.155803      -583.042       583.042       24702.7       25285.7    
   8  0.350750      -1.04768      -3920.61       3920.61       24798.0       28718.6    
   9  0.880054     -0.127772      -478.146       478.146       23905.3       24383.5    
  10  0.106511      -2.23950      -8380.62       8380.62       24947.8       33328.4    
  11  0.336060      -1.09047      -4080.72       4080.72       23946.9       28027.6    
  12  0.904819     -0.100020      -374.293       374.293       24728.3       25102.6    
  13  0.765597     -0.267099      -999.530       999.530       24778.7       25778.2    
  14  0.551789     -0.594589      -2225.06       2225.06       24645.4       26870.5    
  15  0.832435     -0.183400      -686.314       686.314       24727.1       25413.4    
  16  0.353494      -1.03989      -3891.45       3891.45       25138.6       29030.0    
  17  0.510104     -0.673140      -2519.01       2519.01       24959.5       27478.5    
  18  0.523162     -0.647863      -2424.42       2424.42       24940.8       27365.2    
  19  0.953043     -0.480957E-01  -179.983       179.983       23866.1       24046.1    
  20  0.267001E-01  -3.62309      -13558.2       13558.2       24873.8       38432.1    
  21  0.280924      -1.26967      -4751.33       4751.33       26352.1       31103.4    
  22  0.956868     -0.440901E-01  -164.993       164.993       24977.9       25142.9    
  23  0.779725     -0.248814      -931.104       931.104       24666.3       25597.4    
  24  0.901061     -0.104183      -389.870       389.870       23858.9       24248.8    
  25  0.533391     -0.628501      -2351.96       2351.96       24442.1       26794.1    
  26  0.642536     -0.442333      -1655.29       1655.29       24125.7       25781.0    
  27  0.520565E-01  -2.95543      -11059.7       11059.7       24467.3       35527.1    
  28  0.330080      -1.10842      -4147.90       4147.90       23294.8       27442.7    
  29  0.280801      -1.27011      -4752.97       4752.97       25083.9       29836.8    
  30  0.144013      -1.93785      -7251.77       7251.77       24626.5       31878.3    
  31  0.201537      -1.60178      -5994.14       5994.14       23617.5       29611.6    
  32  0.920188     -0.831777E-01  -311.266       311.266       24932.5       25243.7    
  33  0.747222     -0.291393      -1090.44       1090.44       24610.1       25700.5    
  34  0.697959     -0.359595      -1345.67       1345.67       24395.5       25741.1    
  35  0.492949     -0.707349      -2647.02       2647.02       24879.4       27526.5    
  36  0.378001     -0.972857      -3640.60       3640.60       24288.9       27929.5    
  37  0.936484     -0.656225E-01  -245.571       245.571       24693.2       24938.7    
  38  0.458232     -0.780381      -2920.32       2920.32       25055.5       27975.8    
  39  0.286796      -1.24898      -4673.92       4673.92       25038.7       29712.6    
  40  0.524458     -0.645389      -2415.16       2415.16       24377.9       26793.1    
  41  0.126679      -2.06610      -7731.70       7731.70       24028.8       31760.5    
  42  0.645270     -0.438086      -1639.39       1639.39       24118.2       25757.6    
  43  0.996049     -0.395919E-02  -14.8160       14.8160       23480.0       23494.8    
  44  0.470695     -0.753545      -2819.90       2819.90       24544.4       27364.3    
  45  0.783048     -0.244561      -915.189       915.189       24689.2       25604.4    
  46  0.682425     -0.382103      -1429.90       1429.90       22554.5       23984.4    
  47  0.623779     -0.471960      -1766.16       1766.16       27257.6       29023.8    
  48  0.138146      -1.97945      -7407.43       7407.43       24174.3       31581.8    
  49  0.317697      -1.14666      -4290.99       4290.99       25240.9       29531.9    
  50  0.215616      -1.53426      -5741.45       5741.45       24482.8       30224.2    
  51  0.392653     -0.934829      -3498.29       3498.29       23924.6       27422.9    
  52  0.311957      -1.16489      -4359.22       4359.22       25013.3       29372.5    
  53  0.665567     -0.407116      -1523.50       1523.50       22997.0       24520.5    
loop,thermsimp(1:2)       63   1805.86       702.464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160      24100.24          0.90          1.19         21.87          0.25          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24100.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3742.17               157
loop is:       63
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    3742.17               157
loop is:       64
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1871.09               209

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      158     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -379.212       379.212       20123.2       20502.5    
   2  0.209930      -1.56098      -2920.73       2920.73       23480.0       26400.7    
   3  0.710991     -0.341096      -638.220       638.220       22921.6       23559.8    
   4  0.967365     -0.331789E-01  -62.0806       62.0806       22554.5       22616.6    
   5  0.650635E-01  -2.73239      -5112.54       5112.54       23866.1       28978.6    
   6  0.578340     -0.547593      -1024.59       1024.59       23858.9       24883.5    
   7  0.928890E-01  -2.37635      -4446.36       4446.36       23905.3       28351.7    
   8  0.486974     -0.719546      -1346.33       1346.33       22997.0       24343.3    
   9  0.560625     -0.578703      -1082.80       1082.80       24713.2       25796.0    
  10  0.552834     -0.592698      -1108.99       1108.99       24693.2       25802.2    
  11  0.744529E-01  -2.59759      -4860.31       4860.31       24728.3       29588.6    
  12  0.937600     -0.644318E-01  -120.558       120.558       24977.9       25098.4    
  13  0.154459      -1.86783      -3494.87       3494.87       24932.5       28427.3    
  14  0.186893E-02  -6.28239      -11754.9       11754.9       24702.7       36457.6    
  15  0.250797      -1.38311      -2587.92       2587.92       24727.1       27315.0    
  16  0.924847E-01  -2.38071      -4454.52       4454.52       24666.3       29120.9    
  17  0.476680     -0.740911      -1386.31       1386.31       24689.2       26075.5    
  18  0.266527      -1.32228      -2474.10       2474.10       24610.1       27084.2    
  19  0.369755     -0.994916      -1861.57       1861.57       24395.5       26257.1    
  20  0.595561     -0.518252      -969.695       969.695       24118.2       25087.9    
  21  0.636070     -0.452447      -846.569       846.569       24778.7       25625.2    
  22  0.447294     -0.804540      -1505.36       1505.36       24125.7       25631.1    
  23  0.964945     -0.356839E-01  -66.7677       66.7677       24377.9       24444.7    
  24  0.752421     -0.284460      -532.249       532.249       24442.1       24974.4    
  25  0.705556     -0.348769      -652.577       652.577       24645.4       25298.0    
  26  0.943467     -0.581939E-01  -108.886       108.886       24544.4       24653.2    
  27  0.272564      -1.29988      -2432.19       2432.19       24940.8       27373.0    
  28  0.215815      -1.53333      -2869.00       2869.00       23924.6       26793.6    
  29  0.756955     -0.278452      -521.008       521.008       23294.8       23815.8    
  30  0.538381     -0.619189      -1158.56       1158.56       24959.5       26118.0    
  31  0.182967      -1.69845      -3177.95       3177.95       24879.4       28057.4    
  32  0.644758     -0.438881      -821.184       821.184       24288.9       25110.1    
  33  0.939477     -0.624320E-01  -116.816       116.816       25055.5       25172.3    
  34  0.663186     -0.410699      -768.454       768.454       23946.9       24715.3    
  35  0.795014     -0.229396      -429.220       429.220       24798.0       25227.3    
  36  0.630792     -0.460779      -862.158       862.158       27257.6       28119.8    
  37  0.151039      -1.89022      -3536.76       3536.76       25138.6       28675.3    
  38  0.668306     -0.403009      -754.065       754.065       25013.3       25767.4    
  39  0.683820     -0.380061      -711.128       711.128       25240.9       25952.1    
  40  0.122229      -2.10186      -3932.76       3932.76       23617.5       27550.2    
  41  0.664453     -0.408791      -764.883       764.883       25038.7       25803.6    
  42  0.548687     -0.600228      -1123.08       1123.08       25083.9       26206.9    
  43  0.931535     -0.709210E-01  -132.699       132.699       24482.8       24615.5    
  44  0.139742      -1.96796      -3682.22       3682.22       23850.4       27532.7    
  45  0.429142     -0.845967      -1582.88       1582.88       23410.8       24993.7    
  46  0.531147     -0.632717      -1183.87       1183.87       26352.1       27536.0    
  47  0.575558     -0.552416      -1033.62       1033.62       24174.3       25208.0    
  48  0.336537      -1.08905      -2037.70       2037.70       24028.8       26066.5    
  49  0.324486      -1.12551      -2105.93       2105.93       24626.5       26732.5    
  50  0.652768     -0.426534      -798.082       798.082       24947.8       25745.9    
  51  0.537860     -0.620158      -1160.37       1160.37       23850.4       25010.8    
  52  0.415288     -0.878782      -1644.28       1644.28       24467.3       26111.6    
  53  0.771827     -0.258995      -484.603       484.603       24100.2       24584.8    
loop,thermsimp(1:2)       64   379.212       2920.73    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161      23900.06          0.90          1.18         21.84          0.23          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162      33640.43          0.91          1.19         21.83          0.23          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    33640.        1.934     -2.049      4.864     -102.6     0.5548    
                      0.1103      1.480     -99.70      3.860    -0.4735E-01

                       2.647     -2.457      1.540      7000.      7000.    

                      -1.858      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -10.99     -9.048     -8.713      3.297    

                      -15.01     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.      1.655     0.1013     0.3049E-01 0.3028    

                     -0.2486     0.7246E-02 0.1220E-01-0.6602E-01-0.9804E-01



                     -0.3238     0.4461      0.000     0.8083E-01-0.2041    

                     -0.1299    -0.1095E-01-0.7116    -0.3008E-01 0.2037    

                     -0.4005E-01-0.9979E-01-0.6137     -1.513      7000.    



                      -1.112     -1.112     -2.142     -1.982    -0.3807    

                     -0.3252      9.601      8.901    -0.1672E+05 -6.000    

                     -0.1757     -2.128      8.384      8.901    -0.1969E+05



                      -6.000     0.5739    -0.6852      8.777      8.705    

                     -0.1944E+05 -6.000    -0.5779    -0.7583      9.701    

                       9.323    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23900.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       64
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       65
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      160     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -1872.91       1872.91       20123.2       21996.1    
   2  0.298218      -1.20993      -2263.89       2263.89       22554.5       24818.4    
   3  0.374092     -0.983254      -1839.75       1839.75       22921.6       24761.3    
   4  0.417366     -0.873791      -1634.94       1634.94       23294.8       24929.7    
   5  0.299382      -1.20604      -2256.60       2256.60       22997.0       25253.6    
   6  0.373029     -0.986099      -1845.08       1845.08       24377.9       26223.0    
   7  0.628224     -0.464858      -869.790       869.790       24100.2       24970.0    
   8  0.111397      -2.19465      -4106.39       4106.39       24482.8       28589.2    
   9  0.983555     -0.165818E-01  -31.0260       31.0260       24544.4       24575.4    
  10  0.394578     -0.929938      -1740.00       1740.00       23946.9       25686.9    
  11  0.410639     -0.890042      -1665.35       1665.35       23858.9       25524.3    
  12  0.700680     -0.355705      -665.554       665.554       24442.1       25107.7    
  13  0.223946      -1.49635      -2799.81       2799.81       23410.8       26210.6    
  14  0.651113E-01  -2.73166      -5111.17       5111.17       23850.4       28961.6    
  15  0.704010     -0.350963      -656.682       656.682       24118.2       24774.9    
  16  0.172411      -1.75787      -3289.13       3289.13       24977.9       28267.0    
  17  0.567412     -0.566670      -1060.29       1060.29       24288.9       25349.2    
  18  0.186334      -1.68021      -3143.82       3143.82       25055.5       28199.3    
  19  0.677524     -0.389310      -728.434       728.434       24174.3       24902.8    
  20  0.362270      -1.01537      -1899.84       1899.84       24798.0       26697.9    
  21  0.603880     -0.504381      -943.740       943.740       24645.4       25589.1    
  22  0.782208     -0.245635      -459.604       459.604       24778.7       25238.3    
  23  0.129808      -2.04170      -3820.20       3820.20       24125.7       27945.9    
  24  0.284816      -1.25591      -2349.92       2349.92       24947.8       27297.8    
  25  0.246930      -1.39865      -2617.00       2617.00       25013.3       27630.3    
  26  0.256917      -1.35900      -2542.81       2542.81       24713.2       27256.0    
  27  0.240545      -1.42485      -2666.02       2666.02       24693.2       27359.2    
  28  0.218018      -1.52318      -2850.00       2850.00       25038.7       27888.7    
  29  0.235583E-01  -3.74828      -7013.35       7013.35       25240.9       32254.3    
  30  0.114660      -2.16578      -4052.37       4052.37       24028.8       28081.2    
  31  0.119129      -2.12755      -3980.83       3980.83       24689.2       28670.1    
  32  0.471707     -0.751398      -1405.93       1405.93       24467.3       25873.3    
  33  0.607413     -0.498546      -932.822       932.822       24959.5       25892.3    
  34  0.568731     -0.564347      -1055.94       1055.94       25083.9       26139.8    
  35  0.587492     -0.531893      -995.219       995.219       24395.5       25390.7    
  36  0.411259     -0.888533      -1662.52       1662.52       23480.0       25142.5    
  37  0.836192     -0.178897      -334.731       334.731       24626.5       24961.3    
  38  0.152977      -1.87747      -3512.90       3512.90       23924.6       27437.5    
  39  0.941831     -0.599291E-01  -112.133       112.133       24610.1       24722.2    
  40  0.936595     -0.655045E-01  -122.565       122.565       24727.1       24849.6    
  41  0.856621     -0.154759      -289.568       289.568       24940.8       25230.4    
  42  0.484786     -0.724047      -1354.75       1354.75       23850.4       25205.2    
  43  0.188261      -1.66993      -3124.58       3124.58       26352.1       29476.7    
  44  0.957606     -0.433189E-01  -81.0535       81.0535       23617.5       23698.5    
  45  0.234891      -1.44863      -2710.52       2710.52       24879.4       27590.0    
  46  0.758920     -0.275858      -516.155       516.155       27257.6       27773.8    
  47  0.135340      -1.99997      -3742.11       3742.11       23905.3       27647.4    
  48  0.779121E-01  -2.55217      -4775.34       4775.34       24932.5       29707.8    
  49  0.573767     -0.555531      -1039.45       1039.45       25138.6       26178.0    
  50  0.982512     -0.176424E-01  -33.0104       33.0104       23866.1       23899.1    
  51  0.109579      -2.21111      -4137.18       4137.18       24666.3       28803.5    
  52  0.714543     -0.336113      -628.896       628.896       24728.3       25357.2    
  53  0.573216     -0.556492      -1041.24       1041.24       23900.1       24941.3    
loop,thermsimp(1:2)       65   1872.91       2263.89    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163      24875.58          0.89          1.20         21.87          0.23          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24875.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       65
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       66
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      161     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -2553.44       2553.44       20123.2       22676.7    
   2  0.513427E-01  -2.96923      -5555.69       5555.69       23617.5       29173.1    
   3  0.288453      -1.24322      -2326.18       2326.18       23866.1       26192.3    
   4  0.107044      -2.23452      -4180.97       4180.97       24544.4       28725.3    
   5  0.756779     -0.278684      -521.442       521.442       24610.1       25131.5    
   6  0.333762      -1.09733      -2053.20       2053.20       22921.6       24974.8    
   7  0.270335      -1.30809      -2447.56       2447.56       24118.2       26565.8    
   8  0.666278E-01  -2.70863      -5068.09       5068.09       22554.5       27622.6    
   9  0.517510     -0.658727      -1232.53       1232.53       24727.1       25959.6    
  10  0.719680     -0.328949      -615.492       615.492       24174.3       24789.8    
  11  0.401542     -0.912442      -1707.26       1707.26       23294.8       25002.1    
  12  0.408125     -0.896181      -1676.83       1676.83       23900.1       25576.9    
  13  0.481086     -0.731710      -1369.09       1369.09       24626.5       25995.6    
  14  0.166952E-01  -4.09263      -7657.67       7657.67       24100.2       31757.9    
  15  0.913266     -0.907286E-01  -169.761       169.761       24442.1       24611.9    
  16  0.972084     -0.283134E-01  -52.9769       52.9769       23480.0       23533.0    
  17  0.889421     -0.117184      -219.262       219.262       23850.4       24069.7    
  18  0.171754      -1.76169      -3296.28       3296.28       24940.8       28237.1    
  19  0.925876     -0.770155E-01  -144.103       144.103       24778.7       24922.8    
  20  0.992897     -0.712866E-02  -13.3383       13.3383       22997.0       23010.4    
  21  0.118575E-01  -4.43479      -8297.89       8297.89       24288.9       32586.8    
  22  0.492413     -0.708438      -1325.55       1325.55       24728.3       26053.9    
  23  0.952433     -0.487360E-01  -91.1893       91.1893       24395.5       24486.7    
  24  0.591826     -0.524543      -981.466       981.466       23858.9       24840.4    
  25  0.762199     -0.271548      -508.089       508.089       24645.4       25153.5    
  26  0.613492     -0.488588      -914.191       914.191       23946.9       24861.1    
  27  0.134863      -2.00350      -3748.72       3748.72       24467.3       28216.1    
  28  0.633670     -0.456227      -853.640       853.640       24959.5       25813.1    
  29  0.829625     -0.186782      -349.485       349.485       25083.9       25433.3    
  30  0.148219      -1.90906      -3572.02       3572.02       25138.6       28710.6    
  31  0.198093      -1.61902      -3029.33       3029.33       23410.8       26440.1    
  32  0.321318      -1.13532      -2124.29       2124.29       24377.9       26502.2    
  33  0.475408     -0.743582      -1391.31       1391.31       24798.0       26189.3    
  34  0.196520      -1.62699      -3044.24       3044.24       24713.2       27757.4    
  35  0.637413     -0.450337      -842.621       842.621       24947.8       25790.5    
  36  0.596751     -0.516255      -965.959       965.959       24693.2       25659.1    
  37  0.351361      -1.04594      -1957.05       1957.05       23924.6       25881.6    
  38  0.111764      -2.19136      -4100.23       4100.23       24879.4       28979.7    
  39  0.213579      -1.54375      -2888.49       2888.49       25013.3       27901.8    
  40  0.799647     -0.223585      -418.348       418.348       23905.3       24323.7    
  41  0.670682     -0.399460      -747.425       747.425       27257.6       28005.1    
  42  0.104235      -2.26111      -4230.73       4230.73       25038.7       29269.5    
  43  0.607160E-01  -2.80155      -5241.94       5241.94       24125.7       29367.6    
  44  0.462312     -0.771516      -1443.57       1443.57       24028.8       25472.4    
  45  0.269658      -1.31060      -2452.25       2452.25       25055.5       27507.8    
  46  0.678606     -0.387714      -725.447       725.447       24977.9       25703.3    
  47  0.669051     -0.401895      -751.981       751.981       24482.8       25234.8    
  48  0.551912     -0.594367      -1112.11       1112.11       24689.2       25801.3    
  49  0.116070E-01  -4.45614      -8337.84       8337.84       24666.3       33004.2    
  50  0.911337     -0.928428E-01  -173.717       173.717       23850.4       24024.1    
  51  0.302404      -1.19599      -2237.80       2237.80       26352.1       28589.9    
  52  0.527926     -0.638800      -1195.25       1195.25       24932.5       26127.7    
  53  0.204835      -1.58555      -2966.70       2966.70       24875.6       27842.3    
loop,thermsimp(1:2)       66   2553.44       5555.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164      27318.74          0.90          1.20         21.88          0.25          0.04         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  27318.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       66
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       67
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      162     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -2265.80       2265.80       20123.2       22389.0    
   2  0.840396     -0.173882      -325.348       325.348       22997.0       23322.4    
   3  0.165782      -1.79708      -3362.50       3362.50       23480.0       26842.5    
   4  0.516202E-01  -2.96384      -5545.61       5545.61       23850.4       29396.0    
   5  0.163201      -1.81278      -3391.86       3391.86       23850.4       27242.3    
   6  0.201529      -1.60182      -2997.15       2997.15       23905.3       26902.5    
   7  0.791805     -0.233441      -436.788       436.788       24395.5       24832.3    
   8  0.306466      -1.18265      -2212.84       2212.84       24442.1       26654.9    
   9  0.625963     -0.468465      -876.539       876.539       24174.3       25050.9    
  10  0.255827      -1.36325      -2550.77       2550.77       23858.9       26409.7    
  11  0.275269      -1.29001      -2413.72       2413.72       23946.9       26360.6    
  12  0.546374     -0.604451      -1130.98       1130.98       24778.7       25909.7    
  13  0.738275E-01  -2.60602      -4876.10       4876.10       22921.6       27797.7    
  14  0.459460     -0.777704      -1455.15       1455.15       23294.8       24750.0    
  15  0.245891      -1.40287      -2624.89       2624.89       24610.1       27235.0    
  16  0.818144E-01  -2.50330      -4683.90       4683.90       24645.4       29329.3    
  17  0.791963     -0.233241      -436.415       436.415       24482.8       24919.2    
  18  0.652560     -0.426852      -798.678       798.678       25083.9       25882.5    
  19  0.743237     -0.296740      -555.226       555.226       24028.8       24584.1    
  20  0.146095      -1.92350      -3599.04       3599.04       23900.1       27499.1    
  21  0.747148     -0.291492      -545.407       545.407       24693.2       25238.6    
  22  0.935024E-01  -2.36977      -4434.04       4434.04       24977.9       29411.9    
  23  0.924202     -0.788243E-01  -147.487       147.487       24947.8       25095.3    
  24  0.193934      -1.64024      -3069.03       3069.03       24689.2       27758.3    
  25  0.112499      -2.18481      -4087.97       4087.97       24959.5       29047.5    
  26  0.609079     -0.495807      -927.699       927.699       23924.6       24852.3    
  27  0.387822     -0.947210      -1772.31       1772.31       24727.1       26499.4    
  28  0.151976      -1.88403      -3525.19       3525.19       24626.5       28151.7    
  29  0.820125     -0.198299      -371.034       371.034       24728.3       25099.3    
  30  0.100865      -2.29397      -4292.22       4292.22       24932.5       29224.7    
  31  0.246930      -1.39865      -2617.00       2617.00       24798.0       27415.0    
  32  0.101973      -2.28305      -4271.78       4271.78       23866.1       28137.8    
  33  0.389401     -0.943145      -1764.71       1764.71       23410.8       25175.5    
  34  0.573635     -0.555762      -1039.88       1039.88       24377.9       25417.8    
  35  0.730896E-01  -2.61607      -4894.89       4894.89       24118.2       29013.1    
  36  0.260104      -1.34667      -2519.74       2519.74       25055.5       27575.3    
  37  0.562102     -0.576073      -1077.88       1077.88       22554.5       23632.4    
  38  0.159056      -1.83850      -3440.00       3440.00       24713.2       28153.2    
  39  0.779134E-02  -4.85474      -9083.65       9083.65       24875.6       33959.2    
  40  0.693208     -0.366425      -685.613       685.613       25013.3       25698.9    
  41  0.600279     -0.510361      -954.930       954.930       27257.6       28212.6    
  42  0.419387     -0.868962      -1625.90       1625.90       24467.3       26093.2    
  43  0.952036     -0.491524E-01  -91.9684       91.9684       24940.8       25032.8    
  44  0.613955     -0.487834      -912.779       912.779       26352.1       27264.9    
  45  0.842752     -0.171082      -320.110       320.110       25138.6       25458.7    
  46  0.733219     -0.310311      -580.619       580.619       24544.4       25125.0    
  47  0.776088     -0.253489      -474.301       474.301       24879.4       25353.7    
  48  0.965215     -0.354047E-01  -66.2452       66.2452       23617.5       23683.7    
  49  0.487812     -0.717826      -1343.12       1343.12       25038.7       26381.8    
  50  0.864492     -0.145613      -272.454       272.454       24125.7       24398.2    
  51  0.334607      -1.09480      -2048.46       2048.46       24100.2       26148.7    
  52  0.267438      -1.31887      -2467.71       2467.71       24288.9       26756.6    
  53  0.333561      -1.09793      -2054.32       2054.32       27318.7       29373.1    
loop,thermsimp(1:2)       67   2265.80       325.348    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165      25131.30          0.92          1.21         21.87          0.23          0.04         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25131.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       67
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       68
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      163     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -8723.92       8723.92       20123.2       28847.2    
   2  0.714357     -0.336373      -629.383       629.383       22997.0       23626.4    
   3  0.997096     -0.290808E-02  -5.44128       5.44128       22554.5       22559.9    
   4  0.905437     -0.993373E-01  -185.869       185.869       23617.5       23803.3    
   5  0.307060      -1.18071      -2209.22       2209.22       24125.7       26334.9    
   6  0.179061      -1.72003      -3218.32       3218.32       24028.8       27247.2    
   7  0.384312     -0.956301      -1789.32       1789.32       23294.8       25084.1    
   8  0.901101     -0.104138      -194.852       194.852       24395.5       24590.3    
   9  0.606170     -0.500594      -936.655       936.655       23924.6       24861.2    
  10  0.515234     -0.663133      -1240.78       1240.78       24482.8       25723.6    
  11  0.639447     -0.447152      -836.660       836.660       24940.8       25777.5    
  12  0.820429     -0.197928      -370.340       370.340       24174.3       24544.7    
  13  0.521739     -0.650587      -1217.31       1217.31       24947.8       26165.1    
  14  0.767979     -0.263993      -493.954       493.954       24728.3       25222.3    
  15  0.530366     -0.634187      -1186.62       1186.62       24544.4       25731.0    
  16  0.732471     -0.311332      -582.530       582.530       23410.8       23993.3    
  17  0.440461     -0.819933      -1534.17       1534.17       24693.2       26227.3    
  18  0.595715     -0.517993      -969.210       969.210       24879.4       25848.6    
  19  0.407958     -0.896592      -1677.60       1677.60       24377.9       26055.5    
  20  0.544683     -0.607550      -1136.78       1136.78       25138.6       26275.3    
  21  0.611386E-01  -2.79461      -5228.96       5228.96       25013.3       30242.3    
  22  0.135041      -2.00218      -3746.24       3746.24       25083.9       28830.1    
  23  0.547242     -0.602864      -1128.01       1128.01       24778.7       25906.7    
  24  0.214436      -1.53975      -2881.00       2881.00       24467.3       27348.3    
  25  0.340220      -1.07816      -2017.34       2017.34       24100.2       26117.6    
  26  0.270394      -1.30787      -2447.15       2447.15       23946.9       26394.0    
  27  0.605229     -0.502149      -939.564       939.564       25038.7       25978.3    
  28  0.630206     -0.461709      -863.897       863.897       23858.9       24722.8    
  29  0.942476     -0.592449E-01  -110.852       110.852       24727.1       24837.9    
  30  0.293125      -1.22716      -2296.12       2296.12       24442.1       26738.2    
  31  0.526210     -0.642056      -1201.34       1201.34       24288.9       25490.3    
  32  0.972201     -0.281927E-01  -52.7509       52.7509       23480.0       23532.8    
  33  0.570000     -0.562119      -1051.77       1051.77       23905.3       24957.1    
  34  0.752945     -0.283763      -530.946       530.946       24610.1       25141.1    
  35  0.333005      -1.09960      -2057.44       2057.44       23850.4       25907.9    
  36  0.430444     -0.842939      -1577.21       1577.21       26352.1       27929.3    
  37  0.106505      -2.23957      -4190.42       4190.42       24798.0       28988.5    
  38  0.327953      -1.11488      -2086.05       2086.05       23900.1       25986.1    
  39  0.586631     -0.533359      -997.962       997.962       25055.5       26053.5    
  40  0.563274     -0.573989      -1073.98       1073.98       24689.2       25763.2    
  41  0.802100     -0.220522      -412.615       412.615       22921.6       23334.2    
  42  0.594871     -0.519411      -971.862       971.862       23866.1       24837.9    
  43  0.816066     -0.203261      -380.318       380.318       24626.5       25006.9    
  44  0.170795E-01  -4.06987      -7615.09       7615.09       24713.2       32328.3    
  45  0.554958     -0.588864      -1101.82       1101.82       27257.6       28359.4    
  46  0.674023     -0.394492      -738.128       738.128       24118.2       24856.3    
  47  0.371758     -0.989512      -1851.46       1851.46       24959.5       26811.0    
  48  0.309440      -1.17299      -2194.77       2194.77       24932.5       27127.2    
  49  0.182337      -1.70190      -3184.40       3184.40       24645.4       27829.8    
  50  0.443504     -0.813049      -1521.29       1521.29       27318.7       28840.0    
  51  0.407824     -0.896918      -1678.21       1678.21       23850.4       25528.6    
  52  0.140254      -1.96430      -3675.37       3675.37       24977.9       28653.3    
  53  0.801043     -0.221840      -415.082       415.082       25131.3       25546.4    
loop,thermsimp(1:2)       68   8723.92       629.383    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166      23810.94          0.89          1.18         21.84          0.24          0.04         24.20
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    167      35217.21          0.90          1.19         21.82          0.27          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23810.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       68
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       69
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      165     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -1219.79       1219.79       22554.5       23774.3    
   2  0.554375     -0.589913      -1103.78       1103.78       22921.6       24025.4    
   3  0.404373     -0.905418      -1694.12       1694.12       23480.0       25174.1    
   4  0.632877     -0.457478      -855.982       855.982       22997.0       23853.0    
   5  0.395261     -0.928209      -1736.76       1736.76       23617.5       25354.2    
   6  0.715068     -0.335378      -627.522       627.522       23410.8       24038.3    
   7  0.918313     -0.852174E-01  -159.449       159.449       24174.3       24333.8    
   8  0.529514E-01  -2.93838      -5497.97       5497.97       24395.5       29893.5    
   9  0.284219      -1.25801      -2353.85       2353.85       23858.9       26212.8    
  10  0.809402     -0.211460      -395.660       395.660       24727.1       25122.7    
  11  0.604758     -0.502928      -941.022       941.022       23866.1       24807.1    
  12  0.624772     -0.470369      -880.101       880.101       24118.2       24998.3    
  13  0.622683     -0.473718      -886.368       886.368       23924.6       24810.9    
  14  0.491656     -0.709976      -1328.43       1328.43       23905.3       25233.7    
  15  0.823484     -0.194211      -363.385       363.385       24626.5       24989.9    
  16  0.185629E-01  -3.98659      -7459.26       7459.26       23294.8       30754.1    
  17  0.911253     -0.929346E-01  -173.889       173.889       24610.1       24784.0    
  18  0.825116     -0.192231      -359.681       359.681       24728.3       25088.0    
  19  0.902913     -0.102129      -191.093       191.093       24288.9       24480.0    
  20  0.869925     -0.139348      -260.733       260.733       23850.4       24111.1    
  21  0.135445      -1.99919      -3740.66       3740.66       25131.3       28872.0    
  22  0.516840     -0.660022      -1234.96       1234.96       24482.8       25717.8    
  23  0.127583      -2.05899      -3852.55       3852.55       24544.4       28396.9    
  24  0.237062E-01  -3.74202      -7001.64       7001.64       24689.2       31690.9    
  25  0.456233     -0.784753      -1468.34       1468.34       24940.8       26409.1    
  26  0.547397     -0.602581      -1127.48       1127.48       24879.4       26006.9    
  27  0.231746E-02  -6.06728      -11352.4       11352.4       24778.7       36131.1    
  28  0.467213     -0.760969      -1423.84       1423.84       23850.4       25274.3    
  29  0.397333     -0.922981      -1726.98       1726.98       25038.7       26765.7    
  30  0.291343      -1.23325      -2307.52       2307.52       23900.1       26207.6    
  31  0.964262     -0.363922E-01  -68.0929       68.0929       25055.5       25123.6    
  32  0.260485      -1.34521      -2517.00       2517.00       24377.9       26894.9    
  33  0.868574     -0.140902      -263.641       263.641       24100.2       24363.9    
  34  0.832573     -0.183235      -342.848       342.848       24947.8       25290.7    
  35  0.240383      -1.42552      -2667.28       2667.28       24693.2       27360.5    
  36  0.878342     -0.129719      -242.715       242.715       25138.6       25381.3    
  37  0.168707      -1.77959      -3329.77       3329.77       24125.7       27455.5    
  38  0.348015      -1.05551      -1974.95       1974.95       23946.9       25921.8    
  39  0.846224     -0.166971      -312.418       312.418       24442.1       24754.5    
  40  0.842580     -0.171286      -320.491       320.491       24959.5       25280.0    
  41  0.230401      -1.46794      -2746.64       2746.64       24932.5       27679.1    
  42  0.441962     -0.816531      -1527.80       1527.80       24028.8       25556.6    
  43  0.772036     -0.258724      -484.096       484.096       24467.3       24951.4    
  44  0.970063     -0.303946E-01  -56.8709       56.8709       24645.4       24702.3    
  45  0.610535     -0.493419      -923.231       923.231       26352.1       27275.3    
  46  0.548201     -0.601114      -1124.74       1124.74       27257.6       28382.4    
  47  0.322533      -1.13155      -2117.23       2117.23       24977.9       27095.1    
  48  0.194318E-01  -3.94084      -7373.66       7373.66       25083.9       32457.5    
  49  0.219930      -1.51445      -2833.66       2833.66       27318.7       30152.4    
  50  0.538995E-01  -2.92063      -5464.76       5464.76       20123.2       25588.0    
  51  0.189941      -1.66104      -3107.95       3107.95       24798.0       27906.0    
  52  0.339787      -1.07944      -2019.72       2019.72       25013.3       27033.0    
  53  0.783417     -0.244091      -456.715       456.715       23810.9       24267.7    
loop,thermsimp(1:2)       69   1219.79       1103.78    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168      23903.85          0.90          1.18         21.86          0.22          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169      36428.42          0.90          1.18         21.84          0.20          0.04         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23903.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       69
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       70
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      167     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -2653.36       2653.36       22554.5       25207.8    
   2  0.384023     -0.957054      -1790.73       1790.73       22997.0       24787.7    
   3  0.672379     -0.396933      -742.696       742.696       22921.6       23664.3    
   4  0.204591      -1.58674      -2968.93       2968.93       23410.8       26379.7    
   5  0.145151      -1.92998      -3611.16       3611.16       23850.4       27461.5    
   6  0.235757      -1.44495      -2703.63       2703.63       23810.9       26514.6    
   7  0.882595     -0.124889      -233.678       233.678       24174.3       24408.0    
   8  0.215562      -1.53451      -2871.20       2871.20       24100.2       26971.4    
   9  0.248905      -1.39068      -2602.09       2602.09       24288.9       26891.0    
  10  0.695481     -0.363152      -679.488       679.488       24645.4       25324.9    
  11  0.515786     -0.662063      -1238.78       1238.78       24442.1       25680.9    
  12  0.956817     -0.441428E-01  -82.5950       82.5950       24610.1       24692.7    
  13  0.256477      -1.36072      -2546.02       2546.02       23866.1       26412.1    
  14  0.870409     -0.138792      -259.692       259.692       23924.6       24184.3    
  15  0.296335      -1.21627      -2275.74       2275.74       24467.3       26743.1    
  16  0.563087     -0.574322      -1074.61       1074.61       24626.5       25701.2    
  17  0.860973     -0.149692      -280.087       280.087       24118.2       24398.3    
  18  0.336353      -1.08959      -2038.72       2038.72       24728.3       26767.0    
  19  0.432238     -0.838780      -1569.43       1569.43       24727.1       26296.5    
  20  0.411587     -0.887734      -1661.03       1661.03       25055.5       26716.5    
  21  0.685679     -0.377346      -706.046       706.046       23480.0       24186.1    
  22  0.178038E-01  -4.02835      -7537.39       7537.39       23905.3       31442.7    
  23  0.330516      -1.10710      -2071.48       2071.48       23850.4       25921.9    
  24  0.987115     -0.129685E-01  -24.2651       24.2651       24959.5       24983.8    
  25  0.702947     -0.352474      -659.510       659.510       24947.8       25607.3    
  26  0.159040      -1.83860      -3440.18       3440.18       23617.5       27057.6    
  27  0.329714      -1.10953      -2076.03       2076.03       25138.6       27214.6    
  28  0.542452     -0.611656      -1144.46       1144.46       24028.8       25173.3    
  29  0.484074     -0.725518      -1357.51       1357.51       20123.2       21480.7    
  30  0.574330     -0.554551      -1037.61       1037.61       24482.8       25520.4    
  31  0.987944     -0.121288E-01  -22.6941       22.6941       23946.9       23969.6    
  32  0.565195E-01  -2.87317      -5375.95       5375.95       24879.4       30255.4    
  33  0.662626     -0.411545      -770.036       770.036       23900.1       24670.1    
  34  0.462195     -0.771769      -1444.05       1444.05       23858.9       25303.0    
  35  0.413957     -0.881994      -1650.29       1650.29       24940.8       26591.1    
  36  0.627825     -0.465493      -870.979       870.979       25038.7       25909.7    
  37  0.373783E-01  -3.28667      -6149.64       6149.64       24377.9       30527.6    
  38  0.318481      -1.14419      -2140.88       2140.88       25013.3       27154.2    
  39  0.193037      -1.64487      -3077.70       3077.70       24977.9       28055.6    
  40  0.246573      -1.40010      -2619.71       2619.71       26352.1       28971.8    
  41  0.913643     -0.903152E-01  -168.988       168.988       24693.2       24862.2    
  42  0.593287     -0.522077      -976.851       976.851       24125.7       25102.6    
  43  0.323913      -1.12728      -2109.24       2109.24       24932.5       27041.7    
  44  0.270579E-01  -3.60978      -6754.20       6754.20       24798.0       31552.2    
  45  0.684823     -0.378595      -708.384       708.384       27257.6       27966.0    
  46  0.279340      -1.27532      -2386.24       2386.24       24544.4       26930.6    
  47  0.285511      -1.25348      -2345.36       2345.36       25131.3       27476.7    
  48  0.361874      -1.01646      -1901.88       1901.88       24395.5       26297.4    
  49  0.779291     -0.249370      -466.594       466.594       27318.7       27785.3    
  50  0.590933     -0.526053      -984.292       984.292       23294.8       24279.1    
  51  0.493821E-01  -3.00817      -5628.54       5628.54       24689.2       30317.8    
  52  0.736348     -0.306053      -572.652       572.652       25083.9       25656.5    
  53  0.300670      -1.20174      -2248.56       2248.56       23903.8       26152.4    
loop,thermsimp(1:2)       70   2653.36       1790.73    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170      23886.11          0.90          1.18         21.87          0.21          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23886.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       70
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       71
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      168     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -393.572       393.572       20123.2       20516.8    
   2  0.601567     -0.508218      -950.920       950.920       22921.6       23872.5    
   3  0.190401      -1.65862      -3103.43       3103.43       23946.9       27050.3    
   4  0.827263     -0.189632      -354.818       354.818       23924.6       24279.4    
   5  0.581677     -0.541840      -1013.83       1013.83       23480.0       24493.8    
   6  0.680336     -0.385169      -720.685       720.685       23294.8       24015.5    
   7  0.641383     -0.444128      -831.003       831.003       24118.2       24949.2    
   8  0.593931     -0.520992      -974.821       974.821       24174.3       25149.2    
   9  0.326400      -1.11963      -2094.93       2094.93       23900.1       25995.0    
  10  0.964323     -0.363286E-01  -67.9740       67.9740       24610.1       24678.1    
  11  0.481751     -0.730328      -1366.51       1366.51       22997.0       24363.5    
  12  0.230624E-01  -3.76955      -7053.16       7053.16       24693.2       31746.3    
  13  0.214859      -1.53777      -2877.31       2877.31       24959.5       27836.8    
  14  0.325804      -1.12146      -2098.35       2098.35       24125.7       26224.1    
  15  0.668745     -0.402353      -752.837       752.837       24028.8       24781.7    
  16  0.803263     -0.219073      -409.904       409.904       22554.5       22964.4    
  17  0.465531     -0.764577      -1430.59       1430.59       23858.9       25289.5    
  18  0.589796     -0.527978      -987.894       987.894       24645.4       25633.3    
  19  0.783335     -0.244195      -456.911       456.911       24482.8       24939.7    
  20  0.937099     -0.649659E-01  -121.557       121.557       24947.8       25069.4    
  21  0.504081     -0.685019      -1281.73       1281.73       25083.9       26365.6    
  22  0.368431E-01  -3.30109      -6176.62       6176.62       24442.1       30618.7    
  23  0.462712     -0.770651      -1441.96       1441.96       24626.5       26068.5    
  24  0.172447      -1.75767      -3288.75       3288.75       25038.7       28327.5    
  25  0.361979      -1.01617      -1901.34       1901.34       23850.4       25751.8    
  26  0.616189     -0.484202      -905.985       905.985       23903.8       24809.8    
  27  0.495582     -0.702023      -1313.55       1313.55       24727.1       26040.6    
  28  0.492859     -0.707532      -1323.85       1323.85       24395.5       25719.3    
  29  0.189027      -1.66586      -3116.98       3116.98       23410.8       26527.8    
  30  0.336237      -1.08994      -2039.37       2039.37       23866.1       25905.4    
  31  0.997382     -0.262184E-02  -4.90568       4.90568       23810.9       23815.8    
  32  0.629287     -0.463168      -866.627       866.627       24940.8       25807.4    
  33  0.226178      -1.48644      -2781.25       2781.25       25055.5       27836.8    
  34  0.522315     -0.649483      -1215.24       1215.24       24467.3       25682.6    
  35  0.238835E-02  -6.03715      -11296.0       11296.0       24728.3       36024.4    
  36  0.123092E-01  -4.39741      -8227.94       8227.94       24288.9       32516.8    
  37  0.488141     -0.717152      -1341.85       1341.85       24544.4       25886.2    
  38  0.925188     -0.777584E-01  -145.493       145.493       24100.2       24245.7    
  39  0.676413     -0.390952      -731.505       731.505       24932.5       25664.0    
  40  0.638827     -0.448121      -838.474       838.474       23617.5       24455.9    
  41  0.789998     -0.235725      -441.062       441.062       25013.3       25454.4    
  42  0.453703E-01  -3.09290      -5787.08       5787.08       25138.6       30925.6    
  43  0.866893     -0.142840      -267.266       267.266       23850.4       24117.7    
  44  0.122493E-01  -4.40228      -8237.06       8237.06       25131.3       33368.4    
  45  0.172311      -1.75846      -3290.23       3290.23       27318.7       30609.0    
  46  0.899580     -0.105827      -198.011       198.011       27257.6       27455.6    
  47  0.857845     -0.153332      -286.898       286.898       24977.9       25264.8    
  48  0.176813      -1.73266      -3241.96       3241.96       26352.1       29594.1    
  49  0.795271E-01  -2.53166      -4736.95       4736.95       24879.4       29616.4    
  50  0.461368     -0.773559      -1447.40       1447.40       24689.2       26136.6    
  51  0.727625     -0.317970      -594.949       594.949       24377.9       24972.9    
  52  0.106879      -2.23606      -4183.87       4183.87       23905.3       28089.2    
  53  0.169411      -1.77543      -3321.98       3321.98       23886.1       27208.1    
loop,thermsimp(1:2)       71   393.572       950.920    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171      23025.18          0.90          1.18         21.89          0.21          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172      21294.91          0.91          1.19         21.84          0.27          0.04         24.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  21294.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       71
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       72
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      170     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -259.862       259.862       20123.2       20383.1    
   2  0.470451     -0.754063      -1410.92       1410.92       22554.5       23965.4    
   3  0.615627     -0.485114      -907.691       907.691       23810.9       24718.6    
   4  0.291899      -1.23135      -2303.96       2303.96       22921.6       25225.5    
   5  0.584822     -0.536448      -1003.74       1003.74       23294.8       24298.5    
   6  0.681731     -0.383120      -716.852       716.852       23850.4       24567.2    
   7  0.680149     -0.385444      -721.199       721.199       24100.2       24821.4    
   8  0.560478     -0.578966      -1083.30       1083.30       23924.6       25007.9    
   9  0.392299     -0.935730      -1750.83       1750.83       22997.0       24747.8    
  10  0.586793     -0.533083      -997.445       997.445       23617.5       24614.9    
  11  0.461418     -0.773452      -1447.20       1447.20       23480.0       24927.2    
  12  0.142886      -1.94571      -3640.60       3640.60       24610.1       28250.7    
  13  0.960325     -0.404831E-01  -75.7474       75.7474       24028.8       24104.6    
  14  0.547176     -0.602984      -1128.24       1128.24       23903.8       25032.1    
  15  0.817596     -0.201386      -376.812       376.812       24482.8       24859.6    
  16  0.184065      -1.69247      -3166.75       3166.75       24118.2       27285.0    
  17  0.763954     -0.269247      -503.785       503.785       24377.9       24881.7    
  18  0.740640     -0.300240      -561.775       561.775       24947.8       25509.6    
  19  0.257299      -1.35751      -2540.03       2540.03       24174.3       26714.4    
  20  0.274950      -1.29117      -2415.89       2415.89       24977.9       27393.8    
  21  0.850599     -0.161814      -302.768       302.768       23858.9       24161.7    
  22  0.265651      -1.32557      -2480.26       2480.26       25013.3       27493.6    
  23  0.388810     -0.944665      -1767.55       1767.55       24645.4       26413.0    
  24  0.921262     -0.820106E-01  -153.449       153.449       24932.5       25085.9    
  25  0.622168     -0.474545      -887.915       887.915       24467.3       25355.3    
  26  0.831499     -0.184526      -345.263       345.263       24395.5       24740.7    
  27  0.777776     -0.251317      -470.236       470.236       23850.4       24320.7    
  28  0.519638     -0.654624      -1224.86       1224.86       24940.8       26165.7    
  29  0.343480      -1.06863      -1999.49       1999.49       24544.4       26543.9    
  30  0.379182     -0.969738      -1814.46       1814.46       23866.1       25680.5    
  31  0.509964     -0.673415      -1260.02       1260.02       23900.1       25160.1    
  32  0.457294E-01  -3.08501      -5772.33       5772.33       24727.1       30499.4    
  33  0.952238     -0.489400E-01  -91.5710       91.5710       24626.5       24718.1    
  34  0.198116      -1.61890      -3029.11       3029.11       24689.2       27718.3    
  35  0.863922     -0.146273      -273.690       273.690       24125.7       24399.4    
  36  0.765944     -0.266646      -498.918       498.918       25083.9       25582.8    
  37  0.849389     -0.163238      -305.433       305.433       23410.8       23716.2    
  38  0.488339     -0.716745      -1341.09       1341.09       23946.9       25288.0    
  39  0.969632     -0.308388E-01  -57.7021       57.7021       23886.1       23943.8    
  40  0.971690     -0.287184E-01  -53.7346       53.7346       27257.6       27311.4    
  41  0.690522     -0.370307      -692.877       692.877       25055.5       25748.4    
  42  0.266028      -1.32415      -2477.61       2477.61       24959.5       27437.1    
  43  0.581296     -0.542495      -1015.06       1015.06       23905.3       24920.4    
  44  0.636654     -0.451529      -844.850       844.850       25038.7       25883.6    
  45  0.947680     -0.537383E-01  -100.549       100.549       26352.1       26452.6    
  46  0.792806     -0.232176      -434.422       434.422       24879.4       25313.9    
  47  0.420588     -0.866101      -1620.55       1620.55       27318.7       28939.3    
  48  0.780043     -0.248407      -464.791       464.791       24442.1       24906.9    
  49  0.834700E-01  -2.48327      -4646.41       4646.41       25138.6       29785.0    
  50  0.707823     -0.345562      -646.576       646.576       24693.2       25339.8    
  51  0.836500     -0.178529      -334.044       334.044       24288.9       24623.0    
  52  0.111614      -2.19271      -4102.74       4102.74       25131.3       29234.0    
  53  0.690314     -0.370608      -693.440       693.440       21294.9       21988.3    
loop,thermsimp(1:2)       72   259.862       1410.92    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173      23762.85          0.89          1.19         21.85          0.22          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23762.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       72
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       73
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      171     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -558.573       558.573       20123.2       20681.8    
   2  0.823468     -0.194230      -363.422       363.422       21294.9       21658.3    
   3  0.352913      -1.04153      -1948.80       1948.80       23410.8       25359.6    
   4  0.268511      -1.31486      -2460.22       2460.22       23886.1       26346.3    
   5  0.137541      -1.98383      -3711.93       3711.93       22554.5       26266.4    
   6  0.953738     -0.473661E-01  -88.6262       88.6262       24028.8       24117.5    
   7  0.366602      -1.00348      -1877.59       1877.59       23858.9       25736.5    
   8  0.861530     -0.149046      -278.878       278.878       23294.8       23573.7    
   9  0.190086      -1.66028      -3106.52       3106.52       23850.4       26957.0    
  10  0.931621     -0.708293E-01  -132.528       132.528       24125.7       24258.2    
  11  0.135562      -1.99833      -3739.05       3739.05       23850.4       27589.4    
  12  0.577052     -0.549824      -1028.77       1028.77       23617.5       24646.2    
  13  0.937511     -0.645266E-01  -120.735       120.735       24288.9       24409.6    
  14  0.836727     -0.178258      -333.536       333.536       24626.5       24960.1    
  15  0.124731      -2.08159      -3894.84       3894.84       23810.9       27705.8    
  16  0.830758     -0.185417      -346.932       346.932       24395.5       24742.4    
  17  0.925849     -0.770442E-01  -144.156       144.156       22997.0       23141.2    
  18  0.945668     -0.558633E-01  -104.525       104.525       24100.2       24204.8    
  19  0.700762     -0.355587      -665.334       665.334       24482.8       25148.1    
  20  0.585168E-01  -2.83844      -5310.97       5310.97       24377.9       29688.9    
  21  0.241985      -1.41888      -2654.85       2654.85       24442.1       27097.0    
  22  0.426115     -0.853047      -1596.12       1596.12       23905.3       25501.4    
  23  0.730656     -0.313813      -587.172       587.172       23480.0       24067.2    
  24  0.227460      -1.48078      -2770.67       2770.67       23924.6       26695.3    
  25  0.824070     -0.193500      -362.055       362.055       23903.8       24265.9    
  26  0.912829     -0.912064E-01  -170.655       170.655       24932.5       25103.1    
  27  0.130860      -2.03363      -3805.10       3805.10       23900.1       27705.2    
  28  0.126999      -2.06358      -3861.13       3861.13       22921.6       26782.7    
  29  0.394828E-01  -3.23189      -6047.15       6047.15       23946.9       29994.0    
  30  0.927793     -0.749466E-01  -140.232       140.232       24879.4       25019.7    
  31  0.161762      -1.82163      -3408.43       3408.43       24693.2       28101.6    
  32  0.510374     -0.672611      -1258.51       1258.51       24467.3       25725.9    
  33  0.930607     -0.719186E-01  -134.566       134.566       24947.8       25082.4    
  34  0.825283E-01  -2.49461      -4667.64       4667.64       25083.9       29751.5    
  35  0.569143     -0.563624      -1054.59       1054.59       23866.1       24920.7    
  36  0.732951     -0.310676      -581.302       581.302       25055.5       25636.8    
  37  0.554950     -0.588877      -1101.84       1101.84       25038.7       26140.6    
  38  0.614368     -0.487160      -911.520       911.520       24940.8       25852.3    
  39  0.127889      -2.05659      -3848.07       3848.07       24645.4       28493.5    
  40  0.510007     -0.673330      -1259.86       1259.86       26352.1       27612.0    
  41  0.206107      -1.57936      -2955.12       2955.12       24544.4       27499.5    
  42  0.812962E-01  -2.50966      -4695.79       4695.79       24174.3       28870.1    
  43  0.711913     -0.339799      -635.794       635.794       24118.2       24754.0    
  44  0.649899     -0.430939      -806.324       806.324       27257.6       28064.0    
  45  0.102708      -2.27587      -4258.35       4258.35       24977.9       29236.2    
  46  0.152702      -1.87927      -3516.27       3516.27       24959.5       28475.8    
  47  0.827734     -0.189064      -353.755       353.755       25013.3       25367.0    
  48  0.558329     -0.582808      -1090.48       1090.48       24689.2       25779.7    
  49  0.174746      -1.74442      -3263.97       3263.97       24610.1       27874.1    
  50  0.107247      -2.23262      -4177.44       4177.44       27318.7       31496.2    
  51  0.988891     -0.111711E-01  -20.9021       20.9021       25131.3       25152.2    
  52  0.388651     -0.945075      -1768.32       1768.32       25138.6       26906.9    
  53  0.580190     -0.544399      -1018.62       1018.62       23762.8       24781.5    
loop,thermsimp(1:2)       73   558.573       363.422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174      24472.40          0.89          1.18         21.86          0.21          0.05         24.19
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24472.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       73
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       74
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      172     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -335.252       335.252       20123.2       20458.5    
   2  0.439366     -0.822423      -1538.82       1538.82       21294.9       22833.7    
   3  0.603094     -0.505682      -946.175       946.175       22997.0       23943.2    
   4  0.695854E-01  -2.66520      -4986.82       4986.82       23294.8       28281.6    
   5  0.273021      -1.29821      -2429.06       2429.06       23480.0       25909.1    
   6  0.418319     -0.871511      -1630.67       1630.67       24028.8       25659.5    
   7  0.688437     -0.373331      -698.535       698.535       24100.2       24798.8    
   8  0.400930     -0.913969      -1710.12       1710.12       24125.7       25835.8    
   9  0.569492     -0.563010      -1053.44       1053.44       23903.8       24957.3    
  10  0.812441     -0.207712      -388.647       388.647       24288.9       24677.6    
  11  0.222094      -1.50465      -2815.34       2815.34       23617.5       26432.8    
  12  0.695761     -0.362749      -678.736       678.736       24395.5       25074.2    
  13  0.909536E-01  -2.39741      -4485.76       4485.76       24118.2       28604.0    
  14  0.297191      -1.21338      -2270.34       2270.34       23762.8       26033.2    
  15  0.806729     -0.214767      -401.848       401.848       23866.1       24267.9    
  16  0.407021     -0.898891      -1681.90       1681.90       24626.5       26308.4    
  17  0.520426     -0.653107      -1222.02       1222.02       24879.4       26101.5    
  18  0.826852     -0.190129      -355.748       355.748       24947.8       25303.6    
  19  0.729268     -0.315714      -590.729       590.729       24932.5       25523.2    
  20  0.344086      -1.06687      -1996.20       1996.20       24482.8       26479.0    
  21  0.280849      -1.26994      -2376.16       2376.16       25131.3       27507.5    
  22  0.301244E-01  -3.50242      -6553.34       6553.34       23410.8       29964.1    
  23  0.503253     -0.686663      -1284.81       1284.81       25013.3       26298.1    
  24  0.549007     -0.599644      -1121.99       1121.99       23905.3       25027.3    
  25  0.814230     -0.205513      -384.532       384.532       25055.5       25440.1    
  26  0.641489     -0.443963      -830.694       830.694       24467.3       25298.0    
  27  0.248696      -1.39152      -2603.66       2603.66       23858.9       26462.6    
  28  0.684472     -0.379107      -709.342       709.342       24689.2       25398.6    
  29  0.815126     -0.204413      -382.474       382.474       24940.8       25323.3    
  30  0.388210     -0.946208      -1770.44       1770.44       25038.7       26809.2    
  31  0.670538     -0.399675      -747.827       747.827       22554.5       23302.3    
  32  0.851104     -0.161221      -301.658       301.658       23886.1       24187.8    
  33  0.381078     -0.964752      -1805.13       1805.13       23924.6       25729.7    
  34  0.776256     -0.253273      -473.896       473.896       22921.6       23395.5    
  35  0.168040      -1.78355      -3337.18       3337.18       25138.6       28475.7    
  36  0.229069      -1.47373      -2757.48       2757.48       23850.4       26607.9    
  37  0.917563     -0.860337E-01  -160.977       160.977       24442.1       24603.1    
  38  0.161815      -1.82130      -3407.82       3407.82       24544.4       27952.2    
  39  0.355170      -1.03516      -1936.87       1936.87       23850.4       25787.3    
  40  0.221709      -1.50639      -2818.58       2818.58       26352.1       29170.7    
  41  0.424436     -0.856993      -1603.51       1603.51       23900.1       25503.6    
  42  0.337698      -1.08560      -2031.26       2031.26       23810.9       25842.2    
  43  0.574481     -0.554289      -1037.12       1037.12       24610.1       25647.2    
  44  0.614536     -0.486888      -911.009       911.009       27257.6       28168.6    
  45  0.345602      -1.06247      -1987.97       1987.97       24693.2       26681.1    
  46  0.330006      -1.10864      -2074.37       2074.37       24959.5       27033.9    
  47  0.934389     -0.678626E-01  -126.977       126.977       24645.4       24772.4    
  48  0.884466     -0.122771      -229.716       229.716       24174.3       24404.1    
  49  0.928979     -0.736686E-01  -137.840       137.840       24977.9       25115.7    
  50  0.788461     -0.237672      -444.705       444.705       24377.9       24822.6    
  51  0.963462     -0.372219E-01  -69.6454       69.6454       25083.9       25153.5    
  52  0.630201     -0.461716      -863.910       863.910       23946.9       24810.8    
  53  0.797085     -0.226794      -424.351       424.351       24472.4       24896.7    
loop,thermsimp(1:2)       74   335.252       1538.82    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175      24990.70          0.89          1.20         21.77          0.36          0.04         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24990.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       74
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       75
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      173     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -1836.33       1836.33       20123.2       21959.6    
   2  0.269095      -1.31269      -2456.16       2456.16       21294.9       23751.1    
   3  0.301960      -1.19746      -2240.55       2240.55       22554.5       24795.0    
   4  0.927593     -0.751619E-01  -140.634       140.634       22921.6       23062.2    
   5  0.783450     -0.244048      -456.635       456.635       22997.0       23453.6    
   6  0.716705     -0.333091      -623.243       623.243       23886.1       24509.3    
   7  0.728578     -0.316661      -592.501       592.501       23866.1       24458.6    
   8  0.752541     -0.284300      -531.949       531.949       24174.3       24706.3    
   9  0.111710      -2.19185      -4101.14       4101.14       24442.1       28543.2    
  10  0.202752E-01  -3.89836      -7294.17       7294.17       24288.9       31583.1    
  11  0.967738     -0.327937E-01  -61.3599       61.3599       24645.4       24706.8    
  12  0.530869     -0.633240      -1184.85       1184.85       24100.2       25285.1    
  13  0.752699E-01  -2.58668      -4839.90       4839.90       23946.9       28786.8    
  14  0.658334     -0.418043      -782.195       782.195       24377.9       25160.1    
  15  0.383542     -0.958305      -1793.07       1793.07       24472.4       26265.5    
  16  0.280803      -1.27010      -2376.47       2376.47       23903.8       26280.3    
  17  0.976909     -0.233616E-01  -43.7115       43.7115       23905.3       23949.0    
  18  0.611898     -0.491189      -919.058       919.058       24395.5       25314.5    
  19  0.860469     -0.150278      -281.184       281.184       24977.9       25259.1    
  20  0.375446     -0.979641      -1832.99       1832.99       25083.9       26916.8    
  21  0.964573     -0.360702E-01  -67.4905       67.4905       24467.3       24534.8    
  22  0.865663     -0.144259      -269.921       269.921       24947.8       25217.8    
  23  0.498009     -0.697137      -1304.40       1304.40       24940.8       26245.2    
  24  0.732547     -0.311228      -582.335       582.335       24689.2       25271.6    
  25  0.293766      -1.22497      -2292.03       2292.03       25055.5       27347.5    
  26  0.805097     -0.216793      -405.639       405.639       23900.1       24305.7    
  27  0.236791      -1.44058      -2695.45       2695.45       24932.5       27627.9    
  28  0.759809     -0.274688      -513.966       513.966       24610.1       25124.1    
  29  0.279804      -1.27367      -2383.14       2383.14       24028.8       26412.0    
  30  0.862550     -0.147862      -276.664       276.664       23924.6       24201.2    
  31  0.784800     -0.242327      -453.414       453.414       23850.4       24303.8    
  32  0.231425      -1.46350      -2738.33       2738.33       24125.7       26864.0    
  33  0.839725     -0.174681      -326.844       326.844       23810.9       24137.8    
  34  0.204862      -1.58542      -2966.46       2966.46       23480.0       26446.5    
  35  0.741170     -0.299525      -560.438       560.438       23762.8       24323.3    
  36  0.838703     -0.175898      -329.121       329.121       24879.4       25208.6    
  37  0.287711      -1.24580      -2331.00       2331.00       25013.3       27344.3    
  38  0.937479     -0.645611E-01  -120.799       120.799       24626.5       24747.3    
  39  0.188655      -1.66783      -3120.66       3120.66       23617.5       26738.1    
  40  0.818317     -0.200505      -375.163       375.163       23858.9       24234.1    
  41  0.903487     -0.101493      -189.902       189.902       24482.8       24672.7    
  42  0.148828      -1.90496      -3564.36       3564.36       23850.4       27414.8    
  43  0.573616E-01  -2.85838      -5348.28       5348.28       24693.2       30041.5    
  44  0.792726E-01  -2.53486      -4742.95       4742.95       25038.7       29781.7    
  45  0.150401      -1.89445      -3544.69       3544.69       24959.5       28504.2    
  46  0.511444     -0.670518      -1254.60       1254.60       25131.3       26385.9    
  47  0.179810      -1.71585      -3210.51       3210.51       24544.4       27754.9    
  48  0.167282      -1.78808      -3345.65       3345.65       27257.6       30603.3    
  49  0.589016     -0.529302      -990.370       990.370       23294.8       24285.2    
  50  0.974997     -0.253206E-01  -47.3771       47.3771       25138.6       25185.9    
  51  0.750240     -0.287363      -537.680       537.680       24118.2       24655.9    
  52  0.695153     -0.363624      -680.372       680.372       26352.1       27032.5    
  53  0.166976      -1.78991      -3349.07       3349.07       24990.7       28339.8    
loop,thermsimp(1:2)       75   1836.33       2456.16    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176      26463.82          0.89          1.20         21.84          0.27          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  26463.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       75
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       76
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      174     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -5615.46       5615.46       20123.2       25738.7    
   2  0.604222     -0.503814      -942.680       942.680       22921.6       23864.3    
   3  0.106168      -2.24273      -4196.34       4196.34       22997.0       27193.4    
   4  0.342113      -1.07261      -2006.95       2006.95       21294.9       23301.9    
   5  0.473442     -0.747725      -1399.06       1399.06       23905.3       25304.4    
   6  0.100866E-01  -4.59655      -8600.55       8600.55       23810.9       32411.5    
   7  0.911848     -0.922817E-01  -172.667       172.667       23924.6       24097.2    
   8  0.633547     -0.456421      -854.003       854.003       23858.9       24712.9    
   9  0.729024     -0.316048      -591.354       591.354       23294.8       23886.2    
  10  0.620163     -0.477772      -893.954       893.954       23850.4       24744.3    
  11  0.867018     -0.142695      -266.995       266.995       23900.1       24167.1    
  12  0.969344E-01  -2.33372      -4366.59       4366.59       23762.8       28129.4    
  13  0.358466      -1.02592      -1919.59       1919.59       23866.1       25785.7    
  14  0.953168     -0.479638E-01  -89.7444       89.7444       23886.1       23975.9    
  15  0.684510     -0.379052      -709.239       709.239       24467.3       25176.6    
  16  0.482047     -0.729713      -1365.36       1365.36       24118.2       25483.6    
  17  0.974791     -0.255318E-01  -47.7723       47.7723       24482.8       24530.6    
  18  0.978669     -0.215619E-01  -40.3443       40.3443       24174.3       24214.7    
  19  0.929785     -0.728022E-01  -136.219       136.219       24645.4       24781.6    
  20  0.715020     -0.335444      -627.645       627.645       24626.5       25254.2    
  21  0.598247     -0.513752      -961.275       961.275       22554.5       23515.8    
  22  0.107080      -2.23418      -4180.35       4180.35       24610.1       28790.5    
  23  0.559093     -0.581439      -1087.92       1087.92       24377.9       25465.8    
  24  0.933094     -0.692491E-01  -129.571       129.571       25138.6       25268.1    
  25  0.470169E-01  -3.05725      -5720.38       5720.38       24879.4       30599.8    
  26  0.166768      -1.79115      -3351.40       3351.40       24947.8       28299.2    
  27  0.331277      -1.10480      -2067.18       2067.18       24977.9       27045.1    
  28  0.961755     -0.389952E-01  -72.9635       72.9635       24689.2       24762.2    
  29  0.464366E-01  -3.06967      -5743.62       5743.62       24100.2       29843.9    
  30  0.966136E-03  -6.94221      -12989.5       12989.5       24395.5       37385.0    
  31  0.941012     -0.607999E-01  -113.762       113.762       24940.8       25054.6    
  32  0.201947E-01  -3.90233      -7301.61       7301.61       24472.4       31774.0    
  33  0.679249     -0.386768      -723.677       723.677       23903.8       24627.5    
  34  0.318772      -1.14328      -2139.17       2139.17       25131.3       27270.5    
  35  0.388100     -0.946493      -1770.97       1770.97       24028.8       25799.8    
  36  0.658606     -0.417629      -781.420       781.420       23480.0       24261.4    
  37  0.774362     -0.255715      -478.466       478.466       23617.5       24095.9    
  38  0.704871     -0.349740      -654.394       654.394       24125.7       24780.1    
  39  0.274189      -1.29394      -2421.07       2421.07       25083.9       27504.9    
  40  0.881806     -0.125783      -235.351       235.351       26352.1       26587.4    
  41  0.198448      -1.61723      -3025.97       3025.97       25013.3       28039.3    
  42  0.342590      -1.07122      -2004.35       2004.35       25055.5       27059.9    
  43  0.603787     -0.504534      -944.027       944.027       23850.4       24794.5    
  44  0.667409     -0.404353      -756.580       756.580       24932.5       25689.1    
  45  0.317014      -1.14881      -2149.52       2149.52       24544.4       26693.9    
  46  0.368458     -0.998429      -1868.15       1868.15       24990.7       26858.9    
  47  0.139912      -1.96674      -3679.95       3679.95       24959.5       28639.4    
  48  0.537645     -0.620557      -1161.12       1161.12       24442.1       25603.2    
  49  0.159021      -1.83872      -3440.41       3440.41       23946.9       27387.3    
  50  0.729011     -0.316067      -591.389       591.389       25038.7       25630.1    
  51  0.802486     -0.220041      -411.717       411.717       24693.2       25104.9    
  52  0.249203      -1.38949      -2599.85       2599.85       27257.6       29857.5    
  53  0.282362      -1.26456      -2366.11       2366.11       26463.8       28829.9    
loop,thermsimp(1:2)       76   5615.46       942.680    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177      23989.76          0.92          1.21         21.82          0.28          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178      43284.54          0.91          1.20         21.77          0.34          0.04         24.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23989.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       76
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       77
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      176     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -965.927       965.927       21294.9       22260.8    
   2  0.476930     -0.740385      -1385.32       1385.32       22554.5       23939.8    
   3  0.845382     -0.167966      -314.279       314.279       22921.6       23235.9    
   4  0.397814     -0.921770      -1724.71       1724.71       23294.8       25019.5    
   5  0.249923      -1.38660      -2594.46       2594.46       23886.1       26480.6    
   6  0.591552     -0.525005      -982.331       982.331       23617.5       24599.8    
   7  0.143111      -1.94414      -3637.65       3637.65       23924.6       27562.2    
   8  0.306099      -1.18385      -2215.08       2215.08       23900.1       26115.1    
   9  0.441827     -0.816836      -1528.37       1528.37       24174.3       25702.7    
  10  0.504521     -0.684146      -1280.10       1280.10       23480.0       24760.1    
  11  0.127660      -2.05839      -3851.42       3851.42       24482.8       28334.2    
  12  0.333524      -1.09804      -2054.53       2054.53       23903.8       25958.4    
  13  0.130890      -2.03340      -3804.66       3804.66       23858.9       27663.6    
  14  0.307732      -1.17853      -2205.12       2205.12       23850.4       26055.5    
  15  0.154434E-01  -4.17057      -7803.51       7803.51       24689.2       32492.7    
  16  0.357863      -1.02761      -1922.74       1922.74       24125.7       26048.4    
  17  0.271898      -1.30233      -2436.77       2436.77       24645.4       27082.2    
  18  0.906228E-01  -2.40105      -4492.57       4492.57       23850.4       28343.0    
  19  0.344142      -1.06670      -1995.89       1995.89       24940.8       26936.7    
  20  0.392886     -0.934237      -1748.04       1748.04       24693.2       26441.2    
  21  0.454318     -0.788958      -1476.21       1476.21       24467.3       25943.6    
  22  0.384129     -0.956778      -1790.21       1790.21       24626.5       26416.8    
  23  0.354037      -1.03835      -1942.85       1942.85       25138.6       27081.4    
  24  0.154212      -1.86943      -3497.87       3497.87       23905.3       27403.2    
  25  0.816320     -0.202949      -379.736       379.736       24377.9       24757.6    
  26  0.994970     -0.504291E-02  -9.43572       9.43572       24118.2       24127.6    
  27  0.374719E-01  -3.28416      -6144.96       6144.96       24442.1       30587.1    
  28  0.227113      -1.48231      -2773.52       2773.52       25038.7       27812.2    
  29  0.410587     -0.890167      -1665.58       1665.58       24932.5       26598.1    
  30  0.104540E-01  -4.56077      -8533.60       8533.60       20123.2       28656.8    
  31  0.994826     -0.518730E-02  -9.70588       9.70588       23866.1       23875.8    
  32  0.738930     -0.302553      -566.102       566.102       24028.8       24594.9    
  33  0.715904     -0.334209      -625.334       625.334       26352.1       26977.4    
  34  0.128324      -2.05320      -3841.71       3841.71       24544.4       28386.1    
  35  0.856095     -0.155374      -290.717       290.717       24990.7       25281.4    
  36  0.423967     -0.858099      -1605.58       1605.58       24977.9       26583.5    
  37  0.504650     -0.683890      -1279.62       1279.62       25055.5       26335.1    
  38  0.347036      -1.05833      -1980.22       1980.22       22997.0       24977.2    
  39  0.906779     -0.978566E-01  -183.098       183.098       25131.3       25314.4    
  40  0.616911     -0.483030      -903.792       903.792       23946.9       24850.7    
  41  0.540209     -0.615800      -1152.22       1152.22       25083.9       26236.1    
  42  0.772932     -0.257564      -481.924       481.924       25013.3       25495.2    
  43  0.544989     -0.606989      -1135.73       1135.73       23762.8       24898.6    
  44  0.951523     -0.496917E-01  -92.9776       92.9776       24947.8       25040.8    
  45  0.172505      -1.75733      -3288.12       3288.12       24959.5       28247.6    
  46  0.871391     -0.137665      -257.583       257.583       24610.1       24867.7    
  47  0.127604      -2.05882      -3852.23       3852.23       26463.8       30316.1    
  48  0.785934     -0.240882      -450.712       450.712       24100.2       24551.0    
  49  0.815977     -0.203369      -380.522       380.522       27257.6       27638.1    
  50  0.350587      -1.04815      -1961.17       1961.17       24879.4       26840.6    
  51  0.739645     -0.301584      -564.291       564.291       24472.4       25036.7    
  52  0.996274     -0.373345E-02  -6.98561       6.98561       23810.9       23817.9    
  53  0.303822      -1.19131      -2229.05       2229.05       23989.8       26218.8    
loop,thermsimp(1:2)       77   965.927       1385.32    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179      23947.00          0.91          1.18         21.82          0.25          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23947.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       77
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       78
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      177     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -112.029       112.029       21294.9       21406.9    
   2  0.368209     -0.999105      -1869.41       1869.41       22921.6       24791.0    
   3  0.508630     -0.676034      -1264.92       1264.92       23810.9       25075.9    
   4  0.744324     -0.295279      -552.493       552.493       23866.1       24418.6    
   5  0.401586     -0.912333      -1707.05       1707.05       22554.5       24261.5    
   6  0.712794     -0.338563      -633.481       633.481       24118.2       24751.7    
   7  0.186976      -1.67678      -3137.39       3137.39       24100.2       27237.6    
   8  0.688451     -0.373311      -698.498       698.498       24028.8       24727.3    
   9  0.668652     -0.402492      -753.097       753.097       23617.5       24370.6    
  10  0.656767     -0.420426      -786.655       786.655       24377.9       25164.6    
  11  0.853336     -0.158602      -296.759       296.759       23480.0       23776.8    
  12  0.556440     -0.586195      -1096.82       1096.82       23946.9       25043.7    
  13  0.258558E-01  -3.65522      -6839.24       6839.24       24610.1       31449.3    
  14  0.121003E-01  -4.41452      -8259.96       8259.96       23762.8       32022.8    
  15  0.150890      -1.89120      -3538.60       3538.60       22997.0       26535.6    
  16  0.820074     -0.198360      -371.150       371.150       23294.8       23666.0    
  17  0.151452      -1.88748      -3531.65       3531.65       24472.4       28004.0    
  18  0.305465      -1.18592      -2218.96       2218.96       24947.8       27166.8    
  19  0.533202     -0.628854      -1176.64       1176.64       24990.7       26167.3    
  20  0.143416      -1.94201      -3633.67       3633.67       25131.3       28765.0    
  21  0.687081     -0.375303      -702.224       702.224       25013.3       25715.5    
  22  0.546247     -0.604685      -1131.42       1131.42       24174.3       25305.8    
  23  0.356987      -1.03006      -1927.32       1927.32       24467.3       26394.7    
  24  0.545718     -0.605653      -1133.23       1133.23       23903.8       25037.1    
  25  0.789688     -0.236117      -441.795       441.795       24125.7       24567.5    
  26  0.752086     -0.284904      -533.081       533.081       23850.4       24383.5    
  27  0.388816     -0.944650      -1767.52       1767.52       23900.1       25667.6    
  28  0.988428     -0.116395E-01  -21.7786       21.7786       23989.8       24011.5    
  29  0.124991      -2.07952      -3890.96       3890.96       25083.9       28974.8    
  30  0.568214     -0.565257      -1057.65       1057.65       25055.5       26113.2    
  31  0.551032     -0.595962      -1115.10       1115.10       24626.5       25741.6    
  32  0.423622     -0.858913      -1607.10       1607.10       24693.2       26300.3    
  33  0.647554     -0.434553      -813.087       813.087       23886.1       24699.2    
  34  0.686255     -0.376506      -704.476       704.476       24977.9       25682.4    
  35  0.548072     -0.601349      -1125.18       1125.18       24932.5       26057.7    
  36  0.880777     -0.126951      -237.536       237.536       24879.4       25117.0    
  37  0.894918     -0.111023      -207.733       207.733       24940.8       25148.5    
  38  0.241077      -1.42264      -2661.88       2661.88       26352.1       29014.0    
  39  0.546141     -0.604877      -1131.78       1131.78       25138.6       26270.3    
  40  0.266590      -1.32204      -2473.66       2473.66       24645.4       27119.1    
  41  0.575085     -0.553238      -1035.16       1035.16       23905.3       24940.5    
  42  0.907139     -0.974596E-01  -182.355       182.355       23924.6       24106.9    
  43  0.469109     -0.756920      -1416.26       1416.26       27257.6       28673.9    
  44  0.738008     -0.303801      -568.438       568.438       23858.9       24427.4    
  45  0.557598     -0.584116      -1092.93       1092.93       25038.7       26131.7    
  46  0.305677      -1.18523      -2217.66       2217.66       24959.5       27177.2    
  47  0.392927     -0.934131      -1747.84       1747.84       24482.8       26230.6    
  48  0.121997      -2.10376      -3936.31       3936.31       23850.4       27786.8    
  49  0.712082     -0.339563      -635.351       635.351       24544.4       25179.7    
  50  0.342132      -1.07256      -2006.85       2006.85       20123.2       22130.1    
  51  0.288307      -1.24373      -2327.13       2327.13       26463.8       28790.9    
  52  0.554777     -0.589188      -1102.42       1102.42       24442.1       25544.5    
  53  0.116597E-01  -4.45161      -8329.36       8329.36       23947.0       32276.4    
loop,thermsimp(1:2)       78   112.029       1869.41    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180      24689.24          0.89          1.18         21.86          0.22          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24689.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       78
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       79
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      178     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -4952.26       4952.26       21294.9       26247.2    
   2  0.952063     -0.491245E-01  -91.9162       91.9162       20123.2       20215.2    
   3  0.207928      -1.57057      -2938.66       2938.66       23294.8       26233.5    
   4  0.564009     -0.572686      -1071.54       1071.54       23480.0       24551.6    
   5  0.461636     -0.772979      -1446.31       1446.31       23989.8       25436.1    
   6  0.683812     -0.380072      -711.147       711.147       23924.6       24635.7    
   7  0.153569      -1.87360      -3505.67       3505.67       22554.5       26060.2    
   8  0.605650     -0.501453      -938.263       938.263       23617.5       24555.7    
   9  0.257296      -1.35753      -2540.06       2540.06       23850.4       26390.4    
  10  0.517987     -0.657805      -1230.81       1230.81       23866.1       25096.9    
  11  0.571129     -0.560140      -1048.07       1048.07       23858.9       24907.0    
  12  0.735134     -0.307703      -575.739       575.739       24125.7       24701.4    
  13  0.766340E-02  -4.87130      -9114.63       9114.63       23886.1       33000.7    
  14  0.435932     -0.830269      -1553.51       1553.51       24028.8       25582.3    
  15  0.513945     -0.665639      -1245.47       1245.47       24118.2       25363.7    
  16  0.447046     -0.805095      -1506.40       1506.40       22921.6       24428.0    
  17  0.244813      -1.40726      -2633.10       2633.10       23905.3       26538.4    
  18  0.183933      -1.69318      -3168.09       3168.09       23903.8       27071.9    
  19  0.413164     -0.883910      -1653.87       1653.87       23946.9       25600.7    
  20  0.869613     -0.139707      -261.405       261.405       23810.9       24072.3    
  21  0.853260     -0.158691      -296.924       296.924       24879.4       25176.4    
  22  0.138067      -1.98001      -3704.78       3704.78       24940.8       28645.6    
  23  0.940528     -0.613134E-01  -114.723       114.723       24377.9       24492.6    
  24  0.694939     -0.363931      -680.947       680.947       24544.4       25225.3    
  25  0.962776     -0.379346E-01  -70.9790       70.9790       24174.3       24245.3    
  26  0.378266     -0.972158      -1818.99       1818.99       24442.1       26261.1    
  27  0.855922     -0.155576      -291.096       291.096       23900.1       24191.2    
  28  0.393452     -0.932797      -1745.34       1745.34       24977.9       26723.2    
  29  0.253590      -1.37204      -2567.20       2567.20       25013.3       27580.5    
  30  0.777948     -0.251096      -469.822       469.822       24626.5       25096.4    
  31  0.654890     -0.423288      -792.010       792.010       24932.5       25724.5    
  32  0.690016E-01  -2.67363      -5002.59       5002.59       25055.5       30058.1    
  33  0.101034      -2.29229      -4289.08       4289.08       25038.7       29327.8    
  34  0.684533     -0.379019      -709.177       709.177       24990.7       25699.9    
  35  0.592603     -0.523230      -979.009       979.009       24482.8       25461.8    
  36  0.904830     -0.100009      -187.125       187.125       25138.6       25325.7    
  37  0.400244     -0.915681      -1713.32       1713.32       24693.2       26406.5    
  38  0.698191     -0.359263      -672.213       672.213       24467.3       25139.6    
  39  0.551449E-01  -2.89779      -5422.02       5422.02       22997.0       28419.0    
  40  0.500493     -0.692161      -1295.09       1295.09       24645.4       25940.5    
  41  0.289592      -1.23928      -2318.81       2318.81       24947.8       27266.6    
  42  0.447163     -0.804833      -1505.91       1505.91       24959.5       26465.4    
  43  0.690940     -0.369702      -691.744       691.744       24100.2       24792.0    
  44  0.631068     -0.460341      -861.339       861.339       23850.4       24711.8    
  45  0.926041     -0.768363E-01  -143.767       143.767       24472.4       24616.2    
  46  0.436187     -0.829684      -1552.41       1552.41       27257.6       28810.0    
  47  0.314139      -1.15792      -2166.57       2166.57       25131.3       27297.9    
  48  0.363110      -1.01305      -1895.50       1895.50       26463.8       28359.3    
  49  0.446982     -0.805238      -1506.67       1506.67       25083.9       26590.5    
  50  0.541529     -0.613360      -1147.65       1147.65       26352.1       27499.7    
  51  0.415529     -0.878202      -1643.19       1643.19       24610.1       26253.3    
  52  0.559792     -0.580190      -1085.59       1085.59       23762.8       24848.4    
  53  0.931332     -0.711389E-01  -133.107       133.107       24689.2       24822.3    
loop,thermsimp(1:2)       79   4952.26       91.9162    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181      24619.43          0.89          1.19         21.86          0.25          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24619.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       79
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       80
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      179     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -753.733       753.733       20123.2       20877.0    
   2  0.238500      -1.43339      -2681.99       2681.99       23810.9       26492.9    
   3  0.689211     -0.372208      -696.434       696.434       23900.1       24596.5    
   4  0.540774     -0.614753      -1150.26       1150.26       24174.3       25324.6    
   5  0.178857      -1.72117      -3220.46       3220.46       22921.6       26142.0    
   6  0.884253     -0.123012      -230.167       230.167       24377.9       24608.1    
   7  0.755546     -0.280314      -524.493       524.493       23480.0       24004.5    
   8  0.654086E-01  -2.72710      -5102.64       5102.64       23617.5       28720.1    
   9  0.802958     -0.219452      -410.614       410.614       24472.4       24883.0    
  10  0.840665     -0.173562      -324.749       324.749       23924.6       24249.3    
  11  0.864930     -0.145107      -271.507       271.507       24125.7       24397.2    
  12  0.728243     -0.317120      -593.360       593.360       23850.4       24443.8    
  13  0.453086     -0.791672      -1481.29       1481.29       24100.2       25581.5    
  14  0.702549E-01  -2.65563      -4968.91       4968.91       24689.2       29658.1    
  15  0.610595     -0.493321      -923.047       923.047       23762.8       24685.9    
  16  0.728410E-02  -4.92206      -9209.61       9209.61       23858.9       33068.5    
  17  0.913763     -0.901841E-01  -168.742       168.742       24626.5       24795.3    
  18  0.165001      -1.80180      -3371.33       3371.33       23866.1       27237.4    
  19  0.917747E-01  -2.38842      -4468.94       4468.94       24467.3       28936.3    
  20  0.338507      -1.08321      -2026.78       2026.78       24879.4       26906.2    
  21  0.357666      -1.02815      -1923.77       1923.77       24544.4       26468.1    
  22  0.389441     -0.943044      -1764.52       1764.52       25138.6       26903.1    
  23  0.879897     -0.127950      -239.406       239.406       24118.2       24357.6    
  24  0.418897     -0.870129      -1628.09       1628.09       23989.8       25617.8    
  25  0.838426     -0.176230      -329.741       329.741       24482.8       24812.5    
  26  0.185169      -1.68649      -3155.56       3155.56       24028.8       27184.4    
  27  0.200952      -1.60469      -3002.51       3002.51       23946.9       26949.4    
  28  0.877256     -0.130957      -245.031       245.031       24990.7       25235.7    
  29  0.386592     -0.950385      -1778.25       1778.25       24932.5       26710.7    
  30  0.888706     -0.117988      -220.767       220.767       24645.4       24866.2    
  31  0.105408      -2.24991      -4209.79       4209.79       22554.5       26764.3    
  32  0.994268     -0.574873E-02  -10.7564       10.7564       23294.8       23305.6    
  33  0.764077     -0.269087      -503.485       503.485       21294.9       21798.4    
  34  0.812108     -0.208121      -389.413       389.413       24610.1       24999.5    
  35  0.121669      -2.10645      -3941.36       3941.36       24442.1       28383.5    
  36  0.637909     -0.449559      -841.164       841.164       23850.4       24691.6    
  37  0.316007E-02  -5.75716      -10772.2       10772.2       24693.2       35465.3    
  38  0.229677      -1.47108      -2752.52       2752.52       24959.5       27712.0    
  39  0.521374     -0.651288      -1218.62       1218.62       23905.3       25123.9    
  40  0.391402     -0.938019      -1755.12       1755.12       25083.9       26839.0    
  41  0.327357      -1.11670      -2089.45       2089.45       24977.9       27067.3    
  42  0.963139     -0.375576E-01  -70.2736       70.2736       23903.8       23974.1    
  43  0.174261      -1.74720      -3269.16       3269.16       24947.8       28217.0    
  44  0.331602      -1.10382      -2065.34       2065.34       25131.3       27196.6    
  45  0.526338     -0.641812      -1200.89       1200.89       26352.1       27553.0    
  46  0.413265     -0.883667      -1653.42       1653.42       25013.3       26666.7    
  47  0.541510E-02  -5.21856      -9764.39       9764.39       26463.8       36228.2    
  48  0.781613     -0.246396      -461.028       461.028       22997.0       23458.0    
  49  0.656825     -0.420337      -786.488       786.488       24940.8       25727.3    
  50  0.584791     -0.536501      -1003.84       1003.84       27257.6       28261.5    
  51  0.811204     -0.209236      -391.499       391.499       25038.7       25430.2    
  52  0.421027     -0.865059      -1618.60       1618.60       25055.5       26674.1    
  53  0.663739     -0.409866      -766.896       766.896       24619.4       25386.3    
loop,thermsimp(1:2)       80   753.733       2681.99    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182      24266.32          0.89          1.18         21.87          0.21          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183      28620.07          0.91          1.16         21.80          0.30          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    24266.        1.560     -2.352      3.584     -102.6     0.8080    
                      0.7426      1.819     -99.70      3.268     0.2058    

                       2.493     -2.204      1.540      7000.      7000.    

                      -2.013      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.366     -4.532     -8.007      6.116    

                      -14.16     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.9156E-02 0.3164    -0.5746E-02 0.2269    

                     -0.2486    -0.6869E-01 0.1432     0.4919E-01 0.9918E-01



                     -0.3870    -0.3702      0.000     0.1597    -0.2674E-01

                     -0.2086E-01 0.1070    -0.7116    -0.7021E-01-0.2750    

                     -0.2895E-01 0.2373E-01-0.5699     -1.327      7000.    



                      -1.176     -1.136     -2.142     -1.982    -0.3807    

                     -0.3252      9.551      8.851    -0.1672E+05 -6.000    

                     -0.3023     -2.254      8.638      8.880    -0.1969E+05



                      -6.000     0.7097    -0.2458      8.868      8.754    

                     -0.1944E+05 -6.000    -0.5242    -0.5105      9.651    

                       8.807    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24266.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       80
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       81
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      181     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -2449.72       2449.72       20123.2       22573.0    
   2  0.879265     -0.128669      -240.750       240.750       21294.9       21535.7    
   3  0.684902     -0.378479      -708.167       708.167       23294.8       24003.0    
   4  0.893896     -0.112166      -209.872       209.872       22997.0       23206.9    
   5  0.476761     -0.740739      -1385.99       1385.99       23903.8       25289.8    
   6  0.755167     -0.280817      -525.432       525.432       23480.0       24005.4    
   7  0.452407     -0.793173      -1484.10       1484.10       23924.6       25408.7    
   8  0.723906     -0.323093      -604.535       604.535       24118.2       24722.7    
   9  0.451260     -0.795711      -1488.85       1488.85       24125.7       25614.6    
  10  0.668265     -0.403071      -754.181       754.181       23850.4       24604.6    
  11  0.777249     -0.251995      -471.505       471.505       23900.1       24371.6    
  12  0.342240      -1.07224      -2006.26       2006.26       24377.9       26384.2    
  13  0.639156     -0.447606      -837.510       837.510       23762.8       24600.4    
  14  0.166924      -1.79022      -3349.66       3349.66       23850.4       27200.0    
  15  0.375260     -0.980137      -1833.92       1833.92       24626.5       26460.5    
  16  0.299730      -1.20487      -2254.42       2254.42       24482.8       26737.2    
  17  0.407119     -0.898650      -1681.45       1681.45       24645.4       26326.9    
  18  0.762992E-01  -2.57309      -4814.48       4814.48       24472.4       29286.9    
  19  0.281066      -1.26917      -2374.72       2374.72       24610.1       26984.8    
  20  0.220512      -1.51180      -2828.71       2828.71       23905.3       26734.0    
  21  0.389846     -0.942004      -1762.57       1762.57       24990.7       26753.3    
  22  0.660048     -0.415443      -777.330       777.330       24174.3       24951.7    
  23  0.150026      -1.89695      -3549.36       3549.36       24619.4       28168.8    
  24  0.113767      -2.17360      -4066.99       4066.99       25038.7       29105.7    
  25  0.810589     -0.209994      -392.917       392.917       24100.2       24493.2    
  26  0.247911      -1.39468      -2609.58       2609.58       23989.8       26599.3    
  27  0.408875     -0.894345      -1673.40       1673.40       24940.8       26614.2    
  28  0.310528      -1.16948      -2188.20       2188.20       22921.6       25109.8    
  29  0.663027     -0.410939      -768.904       768.904       24544.4       25313.3    
  30  0.798362     -0.225193      -421.355       421.355       23810.9       24232.3    
  31  0.564885     -0.571133      -1068.64       1068.64       25013.3       26081.9    
  32  0.473510E-02  -5.35275      -10015.5       10015.5       25055.5       35071.0    
  33  0.933475E-01  -2.37143      -4437.15       4437.15       24932.5       29369.6    
  34  0.931702     -0.707423E-01  -132.365       132.365       22554.5       22686.9    
  35  0.341741      -1.07370      -2008.99       2008.99       25083.9       27092.8    
  36  0.171330      -1.76417      -3300.91       3300.91       25138.6       28439.5    
  37  0.355860      -1.03322      -1933.24       1933.24       24879.4       26812.7    
  38  0.469639     -0.755790      -1414.15       1414.15       23946.9       25361.0    
  39  0.805376     -0.216446      -404.989       404.989       24977.9       25382.9    
  40  0.651615     -0.428301      -801.389       801.389       24028.8       24830.2    
  41  0.126831      -2.06490      -3863.60       3863.60       25131.3       28994.9    
  42  0.715737     -0.334442      -625.771       625.771       23866.1       24491.8    
  43  0.444007     -0.811915      -1519.16       1519.16       26352.1       27871.3    
  44  0.887105     -0.119791      -224.140       224.140       24959.5       25183.6    
  45  0.492139     -0.708993      -1326.59       1326.59       24947.8       26274.4    
  46  0.590315     -0.527098      -986.247       986.247       27257.6       28243.9    
  47  0.313130      -1.16114      -2172.59       2172.59       24442.1       26614.7    
  48  0.824070     -0.193500      -362.056       362.056       23617.5       23979.5    
  49  0.785026     -0.242039      -452.876       452.876       24467.3       24920.2    
  50  0.105781      -2.24638      -4203.17       4203.17       24689.2       28892.4    
  51  0.644933     -0.438608      -820.674       820.674       23858.9       24679.6    
  52  0.656932     -0.420175      -786.185       786.185       24693.2       25479.4    
  53  0.418239     -0.871703      -1631.03       1631.03       24266.3       25897.4    
loop,thermsimp(1:2)       81   2449.72       240.750    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184      23529.64          0.91          1.18         21.88          0.23          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    185      22617.34          0.91          1.19         21.85          0.21          0.05         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  22617.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       81
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       82
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      183     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -8125.57       8125.57       21294.9       29420.5    
   2  0.906957E-01  -2.40025      -4491.07       4491.07       20123.2       24614.3    
   3  0.973677     -0.266758E-01  -49.9128       49.9128       22554.5       22604.4    
   4  0.764409     -0.268653      -502.672       502.672       22997.0       23499.7    
   5  0.647718     -0.434300      -812.613       812.613       23617.5       24430.1    
   6  0.450945     -0.796410      -1490.15       1490.15       23294.8       24785.0    
   7  0.342138      -1.07254      -2006.82       2006.82       23480.0       25486.8    
   8  0.491560     -0.710170      -1328.79       1328.79       23810.9       25139.7    
   9  0.728901     -0.316218      -591.671       591.671       23900.1       24491.7    
  10  0.361124      -1.01853      -1905.77       1905.77       23866.1       25771.8    
  11  0.187026      -1.67651      -3136.89       3136.89       24100.2       27237.1    
  12  0.560514     -0.578901      -1083.17       1083.17       23762.8       24846.0    
  13  0.218776      -1.51971      -2843.50       2843.50       23850.4       26693.9    
  14  0.109271      -2.21392      -4142.44       4142.44       23858.9       28001.4    
  15  0.263420E-01  -3.63659      -6804.38       6804.38       24118.2       30922.6    
  16  0.654642     -0.423667      -792.718       792.718       24028.8       24821.6    
  17  0.975959     -0.243343E-01  -45.5315       45.5315       24467.3       24512.9    
  18  0.107212      -2.23295      -4178.04       4178.04       24174.3       28352.4    
  19  0.972340     -0.280494E-01  -52.4829       52.4829       22921.6       22974.1    
  20  0.259158      -1.35032      -2526.56       2526.56       24959.5       27486.1    
  21  0.889970     -0.116568      -218.108       218.108       23903.8       24122.0    
  22  0.956672     -0.442943E-01  -82.8785       82.8785       24544.4       24627.2    
  23  0.299261      -1.20644      -2257.35       2257.35       23946.9       26204.2    
  24  0.114836      -2.16425      -4049.50       4049.50       24977.9       29027.4    
  25  0.728848     -0.316291      -591.808       591.808       23924.6       24516.4    
  26  0.650336     -0.430267      -805.067       805.067       24693.2       25498.2    
  27  0.816983     -0.202137      -378.217       378.217       24125.7       24503.9    
  28  0.507860     -0.677550      -1267.75       1267.75       24266.3       25534.1    
  29  0.920661     -0.826634E-01  -154.670       154.670       25013.3       25168.0    
  30  0.253772      -1.37132      -2565.86       2565.86       24947.8       27513.7    
  31  0.667512     -0.404198      -756.289       756.289       24645.4       25401.7    
  32  0.772715     -0.257844      -482.449       482.449       24377.9       24860.4    
  33  0.757620     -0.277573      -519.363       519.363       24626.5       25145.9    
  34  0.776421     -0.253060      -473.498       473.498       23989.8       24463.3    
  35  0.886642     -0.120314      -225.119       225.119       24940.8       25165.9    
  36  0.238693E-01  -3.73516      -6988.81       6988.81       24442.1       31430.9    
  37  0.303957      -1.19087      -2228.22       2228.22       23905.3       26133.5    
  38  0.875267     -0.133226      -249.278       249.278       24482.8       24732.1    
  39  0.144246      -1.93624      -3622.87       3622.87       24990.7       28613.6    
  40  0.993963     -0.605564E-02  -11.3306       11.3306       24879.4       24890.8    
  41  0.172168      -1.75928      -3291.77       3291.77       24610.1       27901.9    
  42  0.979713     -0.204952E-01  -38.3484       38.3484       25083.9       25122.2    
  43  0.938694     -0.632658E-01  -118.376       118.376       23850.4       23968.8    
  44  0.716061     -0.333990      -624.925       624.925       26352.1       26977.0    
  45  0.764601     -0.268402      -502.203       502.203       24619.4       25121.6    
  46  0.546951     -0.603396      -1129.01       1129.01       27257.6       28386.6    
  47  0.104442      -2.25912      -4227.01       4227.01       25138.6       29365.6    
  48  0.669980     -0.400508      -749.385       749.385       24689.2       25438.6    
  49  0.255048      -1.36630      -2556.47       2556.47       25131.3       27687.8    
  50  0.761153     -0.272921      -510.659       510.659       25038.7       25549.4    
  51  0.273269      -1.29730      -2427.36       2427.36       24472.4       26899.8    
  52  0.789047E-01  -2.53951      -4751.65       4751.65       24932.5       29684.1    
  53  0.723703     -0.323374      -605.061       605.061       22617.3       23222.4    
loop,thermsimp(1:2)       82   8125.57       4491.07    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186      23736.42          0.90          1.20         21.80          0.29          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    187      55011.32          0.91          1.20         21.82          0.26          0.04         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23736.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       82
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       83
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      185     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -927.529       927.529       22554.5       23482.0    
   2  0.266275      -1.32323      -2475.87       2475.87       22921.6       25397.5    
   3  0.545538     -0.605984      -1133.85       1133.85       22617.3       23751.2    
   4  0.196234      -1.62845      -3046.96       3046.96       22997.0       26044.0    
   5  0.786411     -0.240275      -449.576       449.576       23850.4       24300.0    
   6  0.453912     -0.789853      -1477.88       1477.88       23903.8       25381.7    
   7  0.900549     -0.104751      -195.998       195.998       23617.5       23813.5    
   8  0.339919      -1.07905      -2018.99       2018.99       23989.8       26008.8    
   9  0.511643     -0.670128      -1253.87       1253.87       23900.1       25153.9    
  10  0.628202     -0.464894      -869.856       869.856       24125.7       24995.6    
  11  0.672886E-01  -2.69876      -5049.62       5049.62       24467.3       29517.0    
  12  0.518493     -0.656829      -1228.98       1228.98       23924.6       25153.6    
  13  0.994926     -0.508642E-02  -9.51713       9.51713       20123.2       20132.8    
  14  0.733191     -0.310349      -580.690       580.690       24544.4       25125.0    
  15  0.952818     -0.483318E-01  -90.4331       90.4331       24482.8       24573.2    
  16  0.735955     -0.306586      -573.650       573.650       23294.8       23868.5    
  17  0.743149     -0.296859      -555.449       555.449       24028.8       24584.3    
  18  0.549375     -0.598975      -1120.73       1120.73       23762.8       24883.6    
  19  0.355140      -1.03524      -1937.03       1937.03       24377.9       26314.9    
  20  0.482165     -0.729469      -1364.90       1364.90       24879.4       26244.3    
  21  0.577197     -0.549571      -1028.30       1028.30       24619.4       25647.7    
  22  0.107316E-01  -4.53456      -8484.56       8484.56       25083.9       33568.4    
  23  0.923969     -0.790764E-01  -147.959       147.959       23810.9       23958.9    
  24  0.810451     -0.210164      -393.235       393.235       24626.5       25019.8    
  25  0.143346      -1.94249      -3634.57       3634.57       24940.8       28575.4    
  26  0.994184     -0.583318E-02  -10.9144       10.9144       25013.3       25024.2    
  27  0.870737     -0.138415      -258.987       258.987       24645.4       24904.4    
  28  0.970691     -0.297469E-01  -55.6591       55.6591       24689.2       24744.9    
  29  0.351269      -1.04620      -1957.54       1957.54       23480.0       25437.6    
  30  0.464982     -0.765756      -1432.80       1432.80       24693.2       26126.0    
  31  0.921785     -0.814432E-01  -152.387       152.387       24266.3       24418.7    
  32  0.110512      -2.20263      -4121.31       4121.31       25038.7       29160.0    
  33  0.261408      -1.34167      -2510.38       2510.38       23866.1       26376.5    
  34  0.908908     -0.955118E-01  -178.711       178.711       23905.3       24084.0    
  35  0.819412     -0.199168      -372.660       372.660       23946.9       24319.5    
  36  0.466482     -0.762536      -1426.77       1426.77       23850.4       25277.2    
  37  0.717237     -0.332349      -621.854       621.854       24472.4       25094.2    
  38  0.802331     -0.220234      -412.076       412.076       26352.1       26764.2    
  39  0.949390     -0.519355E-01  -97.1758       97.1758       24100.2       24197.4    
  40  0.258511      -1.35282      -2531.24       2531.24       24959.5       27490.7    
  41  0.270423      -1.30777      -2446.95       2446.95       24947.8       27394.8    
  42  0.366439      -1.00392      -1878.43       1878.43       25131.3       27009.7    
  43  0.934403     -0.678476E-01  -126.949       126.949       24610.1       24737.1    
  44  0.956654     -0.443133E-01  -82.9140       82.9140       23858.9       23941.9    
  45  0.377790     -0.973417      -1821.35       1821.35       24174.3       25995.7    
  46  0.203667      -1.59127      -2977.41       2977.41       27257.6       30235.0    
  47  0.673892     -0.394685      -738.490       738.490       24990.7       25729.2    
  48  0.347380      -1.05734      -1978.37       1978.37       24977.9       26956.2    
  49  0.144339      -1.93559      -3621.66       3621.66       25138.6       28760.2    
  50  0.728571     -0.316670      -592.517       592.517       21294.9       21887.4    
  51  0.243065      -1.41443      -2646.51       2646.51       24932.5       27579.0    
  52  0.686711     -0.375841      -703.232       703.232       24118.2       24821.4    
  53  0.159440      -1.83609      -3435.48       3435.48       23736.4       27171.9    
loop,thermsimp(1:2)       83   927.529       2475.87    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188      23462.19          0.90          1.19         21.88          0.20          0.04         24.21
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23462.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       83
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       84
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      186     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -1043.17       1043.17       20123.2       21166.4    
   2  0.468879     -0.757411      -1417.18       1417.18       21294.9       22712.1    
   3  0.886741E-01  -2.42279      -4533.25       4533.25       22554.5       27087.7    
   4  0.211783      -1.55219      -2904.29       2904.29       22617.3       25521.6    
   5  0.573306     -0.556336      -1040.95       1040.95       23617.5       24658.4    
   6  0.401711     -0.912021      -1706.47       1706.47       23294.8       25001.3    
   7  0.505706     -0.681800      -1275.71       1275.71       23858.9       25134.7    
   8  0.603045     -0.505763      -946.328       946.328       23810.9       24757.3    
   9  0.696575     -0.361580      -676.548       676.548       23905.3       24581.9    
  10  0.294614      -1.22209      -2286.64       2286.64       24100.2       26386.9    
  11  0.527550     -0.639511      -1196.58       1196.58       23850.4       25047.0    
  12  0.657157     -0.419832      -785.543       785.543       23946.9       24732.4    
  13  0.627866     -0.465428      -870.856       870.856       24266.3       25137.2    
  14  0.993353E-02  -4.61184      -8629.15       8629.15       24482.8       33111.9    
  15  0.885166E-01  -2.42456      -4536.57       4536.57       24028.8       28565.4    
  16  0.265764      -1.32515      -2479.47       2479.47       24610.1       27089.6    
  17  0.446403     -0.806534      -1509.09       1509.09       24689.2       26198.3    
  18  0.287864      -1.24527      -2330.01       2330.01       24118.2       26448.2    
  19  0.926928E-01  -2.37846      -4450.32       4450.32       23762.8       28213.2    
  20  0.394849     -0.929252      -1738.71       1738.71       24645.4       26384.1    
  21  0.540746     -0.614805      -1150.35       1150.35       24125.7       25276.1    
  22  0.846435     -0.166721      -311.950       311.950       24626.5       24938.5    
  23  0.417037     -0.874580      -1636.41       1636.41       25013.3       26649.7    
  24  0.210713      -1.55726      -2913.76       2913.76       24472.4       27386.2    
  25  0.764669     -0.268312      -502.035       502.035       24544.4       25046.4    
  26  0.219471E-01  -3.81912      -7145.91       7145.91       23924.6       31070.5    
  27  0.200728      -1.60581      -3004.60       3004.60       23900.1       26904.7    
  28  0.572660     -0.557463      -1043.06       1043.06       23850.4       24893.5    
  29  0.599083E-01  -2.81494      -5267.00       5267.00       23903.8       29170.8    
  30  0.214614      -1.53891      -2879.44       2879.44       22921.6       25801.0    
  31  0.489389     -0.714598      -1337.07       1337.07       23480.0       24817.1    
  32  0.162616      -1.81636      -3398.58       3398.58       24619.4       28018.0    
  33  0.710022     -0.342459      -640.771       640.771       24990.7       25631.5    
  34  0.753583     -0.282916      -529.361       529.361       24174.3       24703.7    
  35  0.743317     -0.296633      -555.026       555.026       23989.8       24544.8    
  36  0.155416      -1.86165      -3483.31       3483.31       22997.0       26480.3    
  37  0.643355     -0.441059      -825.260       825.260       24693.2       25518.4    
  38  0.656098     -0.421444      -788.559       788.559       24879.4       25668.0    
  39  0.327550      -1.11611      -2088.35       2088.35       24377.9       26466.3    
  40  0.192244      -1.64899      -3085.41       3085.41       23866.1       26951.5    
  41  0.433590     -0.835657      -1563.59       1563.59       26352.1       27915.7    
  42  0.788561     -0.237545      -444.468       444.468       24977.9       25422.4    
  43  0.978028     -0.222173E-01  -41.5705       41.5705       25131.3       25172.9    
  44  0.110322      -2.20435      -4124.54       4124.54       23736.4       27861.0    
  45  0.795332     -0.228995      -428.470       428.470       24947.8       25376.3    
  46  0.497518E-01  -3.00071      -5614.59       5614.59       24959.5       30574.1    
  47  0.852459     -0.159631      -298.683       298.683       24932.5       25231.2    
  48  0.133240      -2.01560      -3771.37       3771.37       24940.8       28712.2    
  49  0.671163     -0.398743      -746.083       746.083       25138.6       25884.6    
  50  0.245122      -1.40600      -2630.75       2630.75       25038.7       27669.5    
  51  0.820498     -0.197843      -370.182       370.182       24467.3       24837.5    
  52  0.422422     -0.861751      -1612.41       1612.41       27257.6       28870.0    
  53  0.946612E-01  -2.35745      -4411.00       4411.00       23462.2       27873.2    
loop,thermsimp(1:2)       84   1043.17       1417.18    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189      23830.28          0.89          1.18         21.86          0.21          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190      62546.93          0.90          1.21         21.85          0.31          0.04         24.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23830.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       84
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       85
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      188     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -3034.95       3034.95       20123.2       23158.2    
   2  0.793097     -0.231809      -433.736       433.736       21294.9       21728.6    
   3  0.261081      -1.34293      -2512.73       2512.73       23989.8       26502.5    
   4  0.912198     -0.918984E-01  -171.950       171.950       23905.3       24077.3    
   5  0.493539     -0.706153      -1321.27       1321.27       23617.5       24938.7    
   6  0.721001     -0.327115      -612.060       612.060       24174.3       24786.4    
   7  0.578790     -0.546816      -1023.14       1023.14       23946.9       24970.0    
   8  0.684127     -0.379612      -710.287       710.287       23810.9       24521.2    
   9  0.627712     -0.465674      -871.316       871.316       23480.0       24351.3    
  10  0.858540     -0.152522      -285.382       285.382       24467.3       24752.7    
  11  0.712254E-01  -2.64191      -4943.24       4943.24       23850.4       28793.7    
  12  0.927250     -0.755316E-01  -141.326       141.326       24626.5       24767.9    
  13  0.458073     -0.780727      -1460.81       1460.81       23294.8       24755.6    
  14  0.940004     -0.618714E-01  -115.767       115.767       24544.4       24660.1    
  15  0.322549      -1.13150      -2117.14       2117.14       23850.4       25967.5    
  16  0.939473     -0.624358E-01  -116.823       116.823       23858.9       23975.8    
  17  0.726080     -0.320095      -598.926       598.926       24266.3       24865.2    
  18  0.602088E-02  -5.11252      -9565.97       9565.97       25131.3       34697.3    
  19  0.735289     -0.307492      -575.345       575.345       24932.5       25507.8    
  20  0.847617     -0.165326      -309.340       309.340       24125.7       24435.0    
  21  0.747190E-01  -2.59402      -4853.64       4853.64       24947.8       29801.5    
  22  0.248374      -1.39282      -2606.08       2606.08       24977.9       27584.0    
  23  0.350184      -1.04930      -1963.32       1963.32       24693.2       26656.5    
  24  0.327739E-03  -8.02329      -15012.3       15012.3       22617.3       37629.6    
  25  0.130012      -2.04013      -3817.26       3817.26       24990.7       28808.0    
  26  0.609791     -0.494639      -925.513       925.513       24879.4       25804.9    
  27  0.793414     -0.231410      -432.989       432.989       22921.6       23354.6    
  28  0.962567     -0.381519E-01  -71.3855       71.3855       25138.6       25209.9    
  29  0.499469     -0.694211      -1298.93       1298.93       24689.2       25988.2    
  30  0.887491     -0.119357      -223.328       223.328       24645.4       24868.7    
  31  0.136374      -1.99236      -3727.87       3727.87       24100.2       27828.1    
  32  0.292356      -1.22978      -2301.03       2301.03       24118.2       26419.2    
  33  0.301564      -1.19877      -2243.01       2243.01       24377.9       26620.9    
  34  0.352543      -1.04258      -1950.76       1950.76       22997.0       24947.8    
  35  0.483726     -0.726236      -1358.85       1358.85       25013.3       26372.1    
  36  0.410499     -0.890381      -1665.98       1665.98       23900.1       25566.0    
  37  0.458111     -0.780644      -1460.65       1460.65       23866.1       25326.7    
  38  0.670071     -0.400372      -749.131       749.131       22554.5       23303.6    
  39  0.175486      -1.74020      -3256.06       3256.06       24610.1       27866.2    
  40  0.798907     -0.224511      -420.079       420.079       24472.4       24892.5    
  41  0.270487      -1.30753      -2446.51       2446.51       25038.7       27485.2    
  42  0.480368     -0.733202      -1371.88       1371.88       23736.4       25108.3    
  43  0.658406     -0.417933      -781.989       781.989       23462.2       24244.2    
  44  0.937976     -0.640304E-01  -119.806       119.806       26352.1       26471.9    
  45  0.710083     -0.342373      -640.610       640.610       24619.4       25260.0    
  46  0.567340     -0.566797      -1060.53       1060.53       23762.8       24823.4    
  47  0.201426      -1.60233      -2998.11       2998.11       24028.8       27026.9    
  48  0.660313     -0.415042      -776.579       776.579       24940.8       25717.4    
  49  0.524008     -0.646249      -1209.19       1209.19       27257.6       28466.8    
  50  0.513616     -0.666280      -1246.67       1246.67       23903.8       25150.5    
  51  0.951218     -0.500122E-01  -93.5773       93.5773       24959.5       25053.1    
  52  0.703465     -0.351737      -658.131       658.131       23924.6       24582.7    
  53  0.702859     -0.352600      -659.745       659.745       23830.3       24490.0    
loop,thermsimp(1:2)       85   3034.95       433.736    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191      26132.03          0.91          1.21         21.72          0.37          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  26132.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       85
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       86
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      189     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -1433.20       1433.20       21294.9       22728.1    
   2  0.948887     -0.524654E-01  -98.1674       98.1674       20123.2       20221.4    
   3  0.532332     -0.630488      -1179.70       1179.70       22554.5       23734.2    
   4  0.374267     -0.982785      -1838.88       1838.88       22921.6       24760.5    
   5  0.694531     -0.364519      -682.047       682.047       23858.9       24541.0    
   6  0.414371     -0.880994      -1648.42       1648.42       23905.3       25553.7    
   7  0.208827E-01  -3.86883      -7238.92       7238.92       23462.2       30701.1    
   8  0.627187     -0.466511      -872.882       872.882       23480.0       24352.9    
   9  0.148799E-01  -4.20774      -7873.05       7873.05       24125.7       31998.8    
  10  0.809008     -0.211946      -396.570       396.570       23830.3       24226.9    
  11  0.647680     -0.434359      -812.724       812.724       23810.9       24623.7    
  12  0.289351      -1.24012      -2320.37       2320.37       23924.6       26244.9    
  13  0.222457      -1.50302      -2812.29       2812.29       24544.4       27356.6    
  14  0.374268     -0.982782      -1838.87       1838.87       24467.3       26306.2    
  15  0.785765     -0.241097      -451.114       451.114       23294.8       23745.9    
  16  0.298051      -1.21049      -2264.94       2264.94       24626.5       26891.5    
  17  0.725075     -0.321480      -601.518       601.518       24174.3       24775.9    
  18  0.386364     -0.950976      -1779.36       1779.36       23762.8       25542.2    
  19  0.631686     -0.459363      -859.507       859.507       24266.3       25125.8    
  20  0.688282     -0.373557      -698.958       698.958       24645.4       25344.4    
  21  0.373817     -0.983990      -1841.13       1841.13       24472.4       26313.5    
  22  0.219845      -1.51483      -2834.39       2834.39       23617.5       26451.8    
  23  0.926271     -0.765889E-01  -143.304       143.304       22997.0       23140.3    
  24  0.618127     -0.481061      -900.108       900.108       23946.9       24847.0    
  25  0.176216      -1.73604      -3248.29       3248.29       24959.5       28207.8    
  26  0.742943     -0.297136      -555.968       555.968       23736.4       24292.4    
  27  0.357690      -1.02809      -1923.64       1923.64       23903.8       25827.5    
  28  0.478359     -0.737394      -1379.73       1379.73       25138.6       26518.3    
  29  0.395976     -0.926401      -1733.38       1733.38       24619.4       26352.8    
  30  0.803186     -0.219169      -410.084       410.084       23866.1       24276.2    
  31  0.231845      -1.46168      -2734.94       2734.94       24932.5       27667.4    
  32  0.808968     -0.211996      -396.664       396.664       23900.1       24296.7    
  33  0.579217     -0.546078      -1021.76       1021.76       24940.8       25962.6    
  34  0.384357     -0.956183      -1789.10       1789.10       24879.4       26668.5    
  35  0.856367     -0.155057      -290.125       290.125       23850.4       24140.5    
  36  0.265661      -1.32553      -2480.19       2480.19       24689.2       27169.4    
  37  0.288915      -1.24162      -2323.19       2323.19       25013.3       27336.5    
  38  0.224915      -1.49203      -2791.73       2791.73       24118.2       26909.9    
  39  0.685944     -0.376959      -705.324       705.324       26352.1       27057.4    
  40  0.265936      -1.32450      -2478.25       2478.25       23989.8       26468.0    
  41  0.412966     -0.884389      -1654.77       1654.77       24377.9       26032.7    
  42  0.440796     -0.819173      -1532.74       1532.74       24693.2       26225.9    
  43  0.572522     -0.557705      -1043.51       1043.51       24028.8       25072.4    
  44  0.798412     -0.225131      -421.240       421.240       25038.7       25460.0    
  45  0.127097      -2.06281      -3859.69       3859.69       24977.9       28837.6    
  46  0.243397      -1.41306      -2643.96       2643.96       24100.2       26744.2    
  47  0.322195      -1.13260      -2119.19       2119.19       24610.1       26729.3    
  48  0.512728     -0.668011      -1249.91       1249.91       27257.6       28507.5    
  49  0.786191     -0.240556      -450.101       450.101       23850.4       24300.5    
  50  0.733079     -0.310501      -580.975       580.975       24990.7       25571.7    
  51  0.601364     -0.508554      -951.549       951.549       24947.8       25899.4    
  52  0.348529      -1.05403      -1972.19       1972.19       25131.3       27103.5    
  53  0.923986     -0.790584E-01  -147.925       147.925       26132.0       26280.0    
loop,thermsimp(1:2)       86   1433.20       98.1674    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192      24732.78          0.91          1.18         21.78          0.32          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24732.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       86
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       87
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      190     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -3177.92       3177.92       20123.2       23301.2    
   2  0.721345     -0.326637      -611.167       611.167       21294.9       21906.1    
   3  0.842493     -0.171390      -320.685       320.685       22997.0       23317.7    
   4  0.260540      -1.34500      -2516.61       2516.61       22554.5       25071.1    
   5  0.782605     -0.245127      -458.654       458.654       23294.8       23753.5    
   6  0.208492      -1.56785      -2933.59       2933.59       23850.4       26784.0    
   7  0.290568E-01  -3.53850      -6620.84       6620.84       23830.3       30451.1    
   8  0.673682     -0.394997      -739.073       739.073       23866.1       24605.1    
   9  0.399393     -0.917808      -1717.30       1717.30       23736.4       25453.7    
  10  0.966971     -0.335863E-01  -62.8430       62.8430       23900.1       23962.9    
  11  0.390645     -0.939956      -1758.74       1758.74       23850.4       25609.2    
  12  0.259548      -1.34881      -2523.75       2523.75       23480.0       26003.8    
  13  0.260765      -1.34413      -2514.99       2514.99       23858.9       26373.9    
  14  0.110601E-01  -4.50441      -8428.15       8428.15       23810.9       32239.1    
  15  0.727710     -0.317852      -594.729       594.729       22921.6       23516.3    
  16  0.717076     -0.332574      -622.275       622.275       24174.3       24796.6    
  17  0.612129     -0.490811      -918.351       918.351       23946.9       24865.2    
  18  0.589376     -0.528691      -989.227       989.227       24028.8       25018.1    
  19  0.541615     -0.613199      -1147.35       1147.35       24266.3       25413.7    
  20  0.330403      -1.10744      -2072.12       2072.12       24645.4       26717.5    
  21  0.229530      -1.47172      -2753.72       2753.72       25038.7       27792.4    
  22  0.564010     -0.572684      -1071.54       1071.54       23762.8       24834.4    
  23  0.454226     -0.789161      -1476.59       1476.59       23905.3       25381.9    
  24  0.579528     -0.545541      -1020.76       1020.76       24990.7       26011.5    
  25  0.245500      -1.40446      -2627.86       2627.86       23903.8       26531.7    
  26  0.708019     -0.345284      -646.056       646.056       24947.8       25593.9    
  27  0.300215      -1.20326      -2251.40       2251.40       24940.8       27192.2    
  28  0.721461     -0.326478      -610.868       610.868       24377.9       24988.8    
  29  0.326772      -1.11849      -2092.80       2092.80       24693.2       26786.0    
  30  0.580879     -0.543212      -1016.40       1016.40       23924.6       24941.0    
  31  0.963075     -0.376241E-01  -70.3980       70.3980       26132.0       26202.4    
  32  0.656935     -0.420170      -786.174       786.174       24467.3       25253.5    
  33  0.908335     -0.961416E-01  -179.889       179.889       24472.4       24652.3    
  34  0.765938     -0.266654      -498.934       498.934       24619.4       25118.4    
  35  0.497301     -0.698561      -1307.07       1307.07       23617.5       24924.5    
  36  0.833603     -0.181997      -340.533       340.533       23989.8       24330.3    
  37  0.433057     -0.836886      -1565.89       1565.89       25138.6       26704.4    
  38  0.349547      -1.05112      -1966.73       1966.73       24879.4       26846.2    
  39  0.142838      -1.94604      -3641.22       3641.22       24610.1       28251.3    
  40  0.326780      -1.11847      -2092.75       2092.75       24100.2       26193.0    
  41  0.707709     -0.345723      -646.878       646.878       24626.5       25273.4    
  42  0.914339     -0.895538E-01  -167.563       167.563       24118.2       24285.8    
  43  0.392800     -0.934454      -1748.44       1748.44       26352.1       28100.5    
  44  0.434772     -0.832933      -1558.49       1558.49       25131.3       26689.8    
  45  0.229545      -1.47165      -2753.59       2753.59       24689.2       27442.8    
  46  0.661281     -0.413577      -773.839       773.839       25013.3       25787.1    
  47  0.459966     -0.776602      -1453.09       1453.09       24544.4       25997.4    
  48  0.352439      -1.04288      -1951.31       1951.31       24932.5       26883.8    
  49  0.490345     -0.712647      -1333.42       1333.42       24959.5       26292.9    
  50  0.837788     -0.176990      -331.164       331.164       27257.6       27588.8    
  51  0.247493      -1.39637      -2612.74       2612.74       24977.9       27590.6    
  52  0.221382      -1.50787      -2821.35       2821.35       23462.2       26283.5    
  53  0.374412     -0.982399      -1838.15       1838.15       24732.8       26570.9    
loop,thermsimp(1:2)       87   3177.92       611.167    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193      24527.28          0.91          1.19         21.82          0.30          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194      30298.41          0.91          1.18         21.74          0.34          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  24527.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       87
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       88
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      192     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -2831.54       2831.54       21294.9       24126.4    
   2  0.246752E-01  -3.70196      -6926.69       6926.69       20123.2       27049.9    
   3  0.679039     -0.387076      -724.254       724.254       22997.0       23721.3    
   4  0.709027     -0.343862      -643.395       643.395       22921.6       23565.0    
   5  0.577754     -0.548608      -1026.49       1026.49       23294.8       24321.3    
   6  0.738694     -0.302871      -566.699       566.699       23900.1       24466.8    
   7  0.181723      -1.70527      -3190.71       3190.71       24118.2       27308.9    
   8  0.103748      -2.26579      -4239.49       4239.49       23989.8       28229.3    
   9  0.456811E-02  -5.38866      -10082.6       10082.6       23866.1       33948.7    
  10  0.303247      -1.19321      -2232.60       2232.60       24472.4       26705.0    
  11  0.284736      -1.25619      -2350.45       2350.45       24174.3       26524.8    
  12  0.900494     -0.104812      -196.112       196.112       23762.8       23959.0    
  13  0.691792     -0.368470      -689.439       689.439       23946.9       24636.3    
  14  0.502714     -0.687735      -1286.81       1286.81       23617.5       24904.3    
  15  0.305219      -1.18673      -2220.47       2220.47       23924.6       26145.0    
  16  0.412005     -0.886720      -1659.13       1659.13       24377.9       26037.0    
  17  0.412225     -0.886186      -1658.13       1658.13       24028.8       25687.0    
  18  0.121697      -2.10622      -3940.93       3940.93       22554.5       26495.4    
  19  0.465374     -0.764915      -1431.22       1431.22       24619.4       26050.6    
  20  0.273016      -1.29823      -2429.09       2429.09       24467.3       26896.4    
  21  0.502763     -0.687636      -1286.63       1286.63       24626.5       25913.2    
  22  0.516442     -0.660793      -1236.40       1236.40       23905.3       25141.7    
  23  0.554333     -0.589990      -1103.92       1103.92       24266.3       25370.2    
  24  0.192397E-01  -3.95078      -7392.25       7392.25       23736.4       31128.7    
  25  0.451279E-01  -3.09825      -5797.11       5797.11       24947.8       30744.9    
  26  0.457340     -0.782327      -1463.80       1463.80       23850.4       25314.2    
  27  0.325184      -1.12336      -2101.91       2101.91       25013.3       27115.2    
  28  0.700952     -0.355315      -664.826       664.826       24544.4       25209.2    
  29  0.961087     -0.396906E-01  -74.2646       74.2646       23480.0       23554.3    
  30  0.195966E-02  -6.23498      -11666.2       11666.2       24990.7       36656.9    
  31  0.766376     -0.266082      -497.863       497.863       24100.2       24598.1    
  32  0.398846     -0.919180      -1719.87       1719.87       26132.0       27851.9    
  33  0.675249     -0.392674      -734.727       734.727       23462.2       24196.9    
  34  0.189468      -1.66354      -3112.62       3112.62       24959.5       28072.1    
  35  0.444608     -0.810562      -1516.63       1516.63       23858.9       25375.6    
  36  0.514006     -0.665520      -1245.25       1245.25       23903.8       25149.1    
  37  0.575199     -0.553039      -1034.78       1034.78       24732.8       25767.6    
  38  0.121449      -2.10826      -3944.75       3944.75       25131.3       29076.0    
  39  0.209130      -1.56480      -2927.87       2927.87       25138.6       28066.4    
  40  0.466284E-01  -3.06555      -5735.90       5735.90       24645.4       30381.3    
  41  0.386630E-01  -3.25287      -6086.41       6086.41       23850.4       29936.8    
  42  0.335751E-01  -3.39397      -6350.42       6350.42       24693.2       31043.6    
  43  0.878126     -0.129965      -243.176       243.176       24879.4       25122.6    
  44  0.652938     -0.426273      -797.593       797.593       24932.5       25730.1    
  45  0.932456E-01  -2.37252      -4439.19       4439.19       24940.8       29380.0    
  46  0.662683     -0.411458      -769.874       769.874       24689.2       25459.1    
  47  0.204704      -1.58619      -2967.90       2967.90       27257.6       30225.5    
  48  0.985446     -0.146609E-01  -27.4319       27.4319       24977.9       25005.3    
  49  0.105847      -2.24576      -4202.01       4202.01       25038.7       29240.7    
  50  0.843201     -0.170550      -319.114       319.114       26352.1       26671.2    
  51  0.364087      -1.01036      -1890.48       1890.48       24610.1       26500.6    
  52  0.650651E-01  -2.73237      -5112.50       5112.50       23830.3       28942.8    
  53  0.968103     -0.324171E-01  -60.6552       60.6552       24527.3       24587.9    
loop,thermsimp(1:2)       88   2831.54       6926.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195      23512.33          0.91          1.19         21.87          0.22          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196      26349.03          0.91          1.16         21.61          0.36          0.05         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23512.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       88
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       89
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      194     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -246.088       246.088       23480.0       23726.1    
   2  0.765270     -0.267527      -500.566       500.566       22921.6       23422.1    
   3  0.215687      -1.53393      -2870.11       2870.11       22997.0       25867.1    
   4  0.999601E-01  -2.30298      -4309.08       4309.08       23762.8       28071.9    
   5  0.706519     -0.347405      -650.025       650.025       21294.9       21944.9    
   6  0.201358      -1.60267      -2998.74       2998.74       23462.2       26460.9    
   7  0.450677     -0.797005      -1491.27       1491.27       23294.8       24786.1    
   8  0.897557     -0.108078      -202.224       202.224       23900.1       24102.3    
   9  0.161166      -1.82532      -3415.33       3415.33       24527.3       27942.6    
  10  0.972556E-01  -2.33041      -4360.40       4360.40       24100.2       28460.6    
  11  0.742112     -0.298255      -558.060       558.060       23946.9       24504.9    
  12  0.172377      -1.75807      -3289.50       3289.50       23617.5       26907.0    
  13  0.658751     -0.417410      -781.010       781.010       24977.9       25758.9    
  14  0.725340     -0.321114      -600.833       600.833       24879.4       25480.3    
  15  0.501488     -0.690175      -1291.38       1291.38       23905.3       25196.7    
  16  0.845372     -0.167978      -314.302       314.302       23903.8       24218.2    
  17  0.132369      -2.02216      -3783.64       3783.64       24544.4       28328.0    
  18  0.734515E-01  -2.61113      -4885.65       4885.65       23850.4       28736.1    
  19  0.391205     -0.938523      -1756.06       1756.06       24266.3       26022.4    
  20  0.376983     -0.975555      -1825.35       1825.35       23858.9       25684.3    
  21  0.315463      -1.15371      -2158.70       2158.70       24689.2       26847.9    
  22  0.267113      -1.32008      -2469.99       2469.99       24028.8       26498.8    
  23  0.965292     -0.353243E-01  -66.0949       66.0949       24932.5       24998.6    
  24  0.954592     -0.464714E-01  -86.9521       86.9521       24732.8       24819.7    
  25  0.992414     -0.761515E-02  -14.2486       14.2486       24626.5       24640.8    
  26  0.867953E-02  -4.74679      -8881.65       8881.65       24377.9       33259.6    
  27  0.829585     -0.186829      -349.574       349.574       24619.4       24969.0    
  28  0.349695      -1.05069      -1965.94       1965.94       23924.6       25890.5    
  29  0.673511     -0.395251      -739.549       739.549       22554.5       23294.0    
  30  0.340696      -1.07676      -2014.72       2014.72       24610.1       26624.8    
  31  0.558731     -0.582087      -1089.13       1089.13       24174.3       25263.5    
  32  0.747295     -0.291295      -545.038       545.038       26352.1       26897.1    
  33  0.123287      -2.09324      -3916.64       3916.64       24472.4       28389.0    
  34  0.355051      -1.03549      -1937.50       1937.50       24467.3       26404.8    
  35  0.511895     -0.669636      -1252.95       1252.95       20123.2       21376.2    
  36  0.571856E-01  -2.86145      -5354.03       5354.03       25013.3       30367.3    
  37  0.507517     -0.678226      -1269.02       1269.02       24118.2       25387.2    
  38  0.326770      -1.11850      -2092.81       2092.81       26132.0       28224.8    
  39  0.736001     -0.306523      -573.532       573.532       25138.6       25712.1    
  40  0.970046     -0.304120E-01  -56.9035       56.9035       24959.5       25016.4    
  41  0.673510     -0.395253      -739.552       739.552       23989.8       24729.3    
  42  0.335032      -1.09353      -2046.09       2046.09       23830.3       25876.4    
  43  0.872321E-01  -2.43918      -4563.92       4563.92       25131.3       29695.2    
  44  0.749956     -0.287741      -538.388       538.388       25038.7       25577.1    
  45  0.159001      -1.83884      -3440.64       3440.64       24940.8       28381.4    
  46  0.529687     -0.635468      -1189.02       1189.02       23850.4       25039.4    
  47  0.142415      -1.94901      -3646.77       3646.77       27257.6       30904.4    
  48  0.803387     -0.218919      -409.616       409.616       24645.4       25055.0    
  49  0.709133     -0.343713      -643.117       643.117       24947.8       25590.9    
  50  0.261172      -1.34258      -2512.08       2512.08       24693.2       27205.3    
  51  0.106599      -2.23868      -4188.77       4188.77       23736.4       27925.2    
  52  0.955666     -0.453468E-01  -84.8477       84.8477       23866.1       23950.9    
  53  0.376236     -0.977539      -1829.06       1829.06       23512.3       25341.4    
loop,thermsimp(1:2)       89   246.088       500.566    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197      23863.96          0.91          1.19         21.80          0.31          0.04         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23863.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       89
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       90
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      195     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -3459.92       3459.92       20123.2       23583.2    
   2  0.894146     -0.111886      -209.348       209.348       21294.9       21504.3    
   3  0.721270     -0.326741      -611.362       611.362       22554.5       23165.8    
   4  0.536866     -0.622006      -1163.83       1163.83       22921.6       24085.4    
   5  0.418107     -0.872017      -1631.62       1631.62       23480.0       25111.6    
   6  0.391189     -0.938564      -1756.14       1756.14       23866.1       25622.2    
   7  0.799669     -0.223558      -418.296       418.296       23900.1       24318.4    
   8  0.595070     -0.519076      -971.237       971.237       23903.8       24875.1    
   9  0.384356E-03  -7.86394      -14714.1       14714.1       23946.9       38661.0    
  10  0.654302     -0.424187      -793.691       793.691       24626.5       25420.2    
  11  0.873355     -0.135413      -253.370       253.370       23989.8       24243.1    
  12  0.303212      -1.19332      -2232.81       2232.81       23294.8       25527.6    
  13  0.434159     -0.834344      -1561.13       1561.13       24732.8       26293.9    
  14  0.970825     -0.296089E-01  -55.4009       55.4009       24619.4       24674.8    
  15  0.405896     -0.901659      -1687.08       1687.08       24932.5       26619.6    
  16  0.250423      -1.38461      -2590.72       2590.72       24959.5       27550.2    
  17  0.517030     -0.659654      -1234.27       1234.27       23850.4       25084.7    
  18  0.165468      -1.79897      -3366.04       3366.04       24645.4       28011.4    
  19  0.679403     -0.386541      -723.251       723.251       23905.3       24628.6    
  20  0.554013     -0.590567      -1105.00       1105.00       24174.3       25279.3    
  21  0.211764E-01  -3.85487      -7212.80       7212.80       23512.3       30725.1    
  22  0.453828     -0.790038      -1478.23       1478.23       24118.2       25596.4    
  23  0.377409     -0.974426      -1823.24       1823.24       24879.4       26702.7    
  24  0.496879     -0.699408      -1308.65       1308.65       25038.7       26347.4    
  25  0.214619      -1.53889      -2879.40       2879.40       24947.8       27827.2    
  26  0.724154     -0.322751      -603.896       603.896       23858.9       24462.8    
  27  0.385609     -0.952932      -1783.02       1783.02       25138.6       26921.6    
  28  0.777864     -0.251204      -470.024       470.024       24977.9       25447.9    
  29  0.709283     -0.343500      -642.719       642.719       22997.0       23639.7    
  30  0.191760      -1.65151      -3090.12       3090.12       23830.3       26920.4    
  31  0.347616      -1.05666      -1977.10       1977.10       23924.6       25901.7    
  32  0.191581      -1.65244      -3091.87       3091.87       24266.3       27358.2    
  33  0.770989     -0.260081      -486.635       486.635       24467.3       24954.0    
  34  0.788566E-01  -2.54012      -4752.79       4752.79       23462.2       28215.0    
  35  0.229474      -1.47197      -2754.18       2754.18       24028.8       26783.0    
  36  0.339326      -1.08079      -2022.26       2022.26       24610.1       26632.4    
  37  0.220886      -1.51011      -2825.54       2825.54       24689.2       27514.8    
  38  0.223644      -1.49770      -2802.33       2802.33       26352.1       29154.4    
  39  0.138287      -1.97842      -3701.80       3701.80       23617.5       27319.3    
  40  0.796402     -0.227651      -425.955       425.955       24693.2       25119.1    
  41  0.104384      -2.25968      -4228.06       4228.06       23736.4       27964.5    
  42  0.919642     -0.837713E-01  -156.743       156.743       24527.3       24684.0    
  43  0.360767      -1.01952      -1907.62       1907.62       23762.8       25670.5    
  44  0.924300     -0.787181E-01  -147.288       147.288       26132.0       26279.3    
  45  0.561139     -0.577786      -1081.09       1081.09       24544.4       25625.4    
  46  0.509073E-01  -2.97775      -5571.63       5571.63       24940.8       30512.4    
  47  0.715469     -0.334817      -626.473       626.473       24472.4       25098.9    
  48  0.294040E-01  -3.52662      -6598.62       6598.62       24100.2       30698.9    
  49  0.264026E-02  -5.93688      -11108.4       11108.4       23850.4       34958.9    
  50  0.634029     -0.455661      -852.581       852.581       25131.3       25983.9    
  51  0.319148      -1.14210      -2136.97       2136.97       25013.3       27150.3    
  52  0.495674     -0.701836      -1313.20       1313.20       27257.6       28570.8    
  53  0.838343     -0.176328      -329.926       329.926       23864.0       24193.9    
loop,thermsimp(1:2)       90   3459.92       209.348    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198      24099.78          0.91          1.18         21.71          0.36          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24099.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       90
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       91
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      196     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -4255.13       4255.13       21294.9       25550.0    
   2  0.846291     -0.166892      -312.269       312.269       22554.5       22866.8    
   3  0.167054      -1.78944      -3348.19       3348.19       20123.2       23471.4    
   4  0.786038     -0.240750      -450.465       450.465       22997.0       23447.5    
   5  0.680218     -0.385341      -721.008       721.008       22921.6       23642.6    
   6  0.843894     -0.169729      -317.578       317.578       23864.0       24181.5    
   7  0.295559      -1.21889      -2280.65       2280.65       23989.8       26270.4    
   8  0.383493     -0.958433      -1793.31       1793.31       23900.1       25693.4    
   9  0.867247     -0.142431      -266.501       266.501       23858.9       24125.4    
  10  0.241960      -1.41898      -2655.04       2655.04       23905.3       26560.4    
  11  0.486925     -0.719645      -1346.52       1346.52       24619.4       25965.9    
  12  0.750166     -0.287460      -537.864       537.864       24527.3       25065.1    
  13  0.507045     -0.679156      -1270.76       1270.76       23903.8       25174.6    
  14  0.237743      -1.43656      -2687.94       2687.94       24467.3       27155.3    
  15  0.256837E-01  -3.66190      -6851.73       6851.73       23850.4       30702.1    
  16  0.776460     -0.253010      -473.403       473.403       24472.4       24945.8    
  17  0.316300      -1.15106      -2153.74       2153.74       23480.0       25633.8    
  18  0.493161     -0.706919      -1322.71       1322.71       24693.2       26015.9    
  19  0.807271     -0.214096      -400.592       400.592       24174.3       24574.9    
  20  0.338915      -1.08201      -2024.53       2024.53       24626.5       26651.1    
  21  0.132986      -2.01751      -3774.94       3774.94       24977.9       28752.8    
  22  0.409975     -0.891659      -1668.37       1668.37       23294.8       24963.2    
  23  0.525021     -0.644317      -1205.57       1205.57       24118.2       25323.8    
  24  0.393064     -0.933783      -1747.19       1747.19       23866.1       25613.3    
  25  0.176068      -1.73689      -3249.87       3249.87       24544.4       27794.2    
  26  0.965490     -0.351191E-01  -65.7110       65.7110       23762.8       23828.6    
  27  0.387767     -0.947350      -1772.57       1772.57       23924.6       25697.2    
  28  0.936248     -0.658753E-01  -123.258       123.258       25131.3       25254.6    
  29  0.914720     -0.891370E-01  -166.783       166.783       26132.0       26298.8    
  30  0.332171      -1.10211      -2062.14       2062.14       24732.8       26794.9    
  31  0.845314E-01  -2.47063      -4622.77       4622.77       25038.7       29661.5    
  32  0.687741     -0.374343      -700.429       700.429       24932.5       25632.9    
  33  0.899776     -0.105610      -197.605       197.605       24610.1       24807.7    
  34  0.558791     -0.581980      -1088.93       1088.93       24879.4       25968.4    
  35  0.882799     -0.124658      -233.246       233.246       24028.8       24262.1    
  36  0.235569      -1.44575      -2705.13       2705.13       23830.3       26535.4    
  37  0.533400     -0.628484      -1175.95       1175.95       25138.6       26314.5    
  38  0.147169      -1.91617      -3585.32       3585.32       25013.3       28598.6    
  39  0.966208E-01  -2.33696      -4372.66       4372.66       23617.5       27990.1    
  40  0.952887     -0.482588E-01  -90.2964       90.2964       24266.3       24356.6    
  41  0.155551      -1.86078      -3481.68       3481.68       24689.2       28170.9    
  42  0.645067     -0.438401      -820.287       820.287       24959.5       25779.8    
  43  0.394254     -0.930759      -1741.53       1741.53       24947.8       26689.4    
  44  0.546893     -0.603501      -1129.20       1129.20       23736.4       24865.6    
  45  0.390314     -0.940803      -1760.32       1760.32       24645.4       26405.7    
  46  0.311561      -1.16616      -2181.99       2181.99       23462.2       25644.2    
  47  0.752427E-01  -2.58704      -4840.57       4840.57       27257.6       32098.2    
  48  0.144673      -1.93328      -3617.34       3617.34       26352.1       29969.4    
  49  0.297567      -1.21212      -2267.98       2267.98       24940.8       27208.8    
  50  0.544131     -0.608565      -1138.68       1138.68       24100.2       25238.9    
  51  0.750603E-01  -2.58946      -4845.11       4845.11       23512.3       28357.4    
  52  0.127547      -2.05927      -3853.08       3853.08       23850.4       27703.5    
  53  0.839209     -0.175296      -327.993       327.993       24099.8       24427.8    
loop,thermsimp(1:2)       91   4255.13       312.269    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199      21067.91          0.90          1.20         21.78          0.33          0.04         24.24
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200      48389.12          0.90          1.19         21.78          0.34          0.04         24.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  21067.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       91
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       92
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      198     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -2844.80       2844.80       22554.5       25399.3    
   2  0.389473     -0.942961      -1764.36       1764.36       22997.0       24761.4    
   3  0.919121     -0.843378E-01  -157.803       157.803       20123.2       20281.0    
   4  0.970518     -0.299250E-01  -55.9923       55.9923       22921.6       22977.6    
   5  0.713317     -0.337830      -632.109       632.109       23762.8       24395.0    
   6  0.639607     -0.446902      -836.193       836.193       23858.9       24695.1    
   7  0.712661     -0.338749      -633.828       633.828       23864.0       24497.8    
   8  0.212311      -1.54970      -2899.63       2899.63       24028.8       26928.5    
   9  0.831769     -0.184200      -344.655       344.655       24266.3       24611.0    
  10  0.794875     -0.229571      -429.547       429.547       24099.8       24529.3    
  11  0.909815     -0.945137E-01  -176.843       176.843       24174.3       24351.2    
  12  0.753651E-01  -2.58541      -4837.53       4837.53       24610.1       29447.6    
  13  0.676081     -0.391442      -732.423       732.423       23736.4       24468.8    
  14  0.597437     -0.515107      -963.810       963.810       24472.4       25436.2    
  15  0.146947      -1.91768      -3588.15       3588.15       23294.8       26883.0    
  16  0.854910     -0.156760      -293.311       293.311       24527.3       24820.6    
  17  0.984999     -0.151146E-01  -28.2807       28.2807       23903.8       23932.1    
  18  0.533419     -0.628448      -1175.88       1175.88       24100.2       25276.1    
  19  0.383774     -0.957703      -1791.95       1791.95       25131.3       26923.2    
  20  0.691729     -0.368561      -689.610       689.610       24118.2       24807.8    
  21  0.313732E-01  -3.46180      -6477.33       6477.33       21294.9       27772.2    
  22  0.415635     -0.877947      -1642.72       1642.72       23866.1       25508.8    
  23  0.288746      -1.24221      -2324.28       2324.28       24932.5       27256.8    
  24  0.176464      -1.73464      -3245.66       3245.66       23480.0       26725.7    
  25  0.881312     -0.126344      -236.401       236.401       23462.2       23698.6    
  26  0.962783     -0.379267E-01  -70.9642       70.9642       23900.1       23971.0    
  27  0.415450     -0.878393      -1643.55       1643.55       23924.6       25568.1    
  28  0.271836      -1.30256      -2437.20       2437.20       24959.5       27396.7    
  29  0.926655     -0.761736E-01  -142.527       142.527       24619.4       24762.0    
  30  0.277790      -1.28089      -2396.66       2396.66       24879.4       27276.1    
  31  0.189974      -1.66087      -3107.63       3107.63       24693.2       27800.8    
  32  0.410540     -0.890281      -1665.79       1665.79       23989.8       25655.6    
  33  0.952387     -0.487839E-01  -91.2789       91.2789       26132.0       26223.3    
  34  0.896015     -0.109798      -205.441       205.441       25138.6       25344.0    
  35  0.121549E-01  -4.41002      -8251.53       8251.53       24645.4       32896.9    
  36  0.723911     -0.323087      -604.525       604.525       23830.3       24434.8    
  37  0.759053     -0.275683      -515.827       515.827       23905.3       24421.1    
  38  0.969929     -0.305320E-01  -57.1281       57.1281       24626.5       24683.7    
  39  0.852636     -0.159422      -298.293       298.293       24947.8       25246.1    
  40  0.730471     -0.314065      -587.644       587.644       24732.8       25320.4    
  41  0.528358     -0.637981      -1193.72       1193.72       24467.3       25661.1    
  42  0.404403     -0.905344      -1693.98       1693.98       24940.8       26634.8    
  43  0.232822      -1.45748      -2727.07       2727.07       23850.4       26577.5    
  44  0.847643     -0.165296      -309.282       309.282       24544.4       24853.6    
  45  0.429393E-01  -3.14797      -5890.12       5890.12       23617.5       29507.6    
  46  0.673157     -0.395777      -740.534       740.534       24689.2       25429.8    
  47  0.806068E-01  -2.51817      -4711.72       4711.72       23512.3       28224.0    
  48  0.926018     -0.768619E-01  -143.815       143.815       25013.3       25157.1    
  49  0.167973      -1.78395      -3337.93       3337.93       24977.9       28315.8    
  50  0.780773     -0.247471      -463.040       463.040       25038.7       25501.8    
  51  0.565702E-01  -2.87227      -5374.27       5374.27       26352.1       31726.4    
  52  0.646011     -0.436939      -817.552       817.552       23850.4       24667.9    
  53  0.455316     -0.786763      -1472.10       1472.10       21067.9       22540.0    
loop,thermsimp(1:2)       92   2844.80       1764.36    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201      23366.96          0.89          1.18         21.76          0.35          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202      55901.87          0.91          1.21         21.81          0.32          0.05         24.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    55902.        1.744     -1.759      4.457     -102.6     0.5441    
                      0.2926      1.647     -99.70      4.105    -0.3534    

                      0.2555     -2.468      1.540      7000.      7000.    

                      -1.823      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -14.21     -6.148     -9.411      3.928    

                      -15.91     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5412E-01 0.2914    -0.1381     0.3061    

                     -0.2486     0.1046E-01 0.5906E-01 0.9604E-02-0.3590E-01



                     -0.3211     0.3346      0.000     0.3062E-03-0.1462    

                       1.675     0.1134    -0.7116    -0.9968E-01 0.1099    

                      0.7656E-01 0.5636E-01-0.6525     -1.449      7000.    



                      -1.110     -1.143     -2.142     -1.982    -0.3807    

                     -0.3252      9.519      8.903    -0.1672E+05 -6.000    

                     -0.1704     -2.123      8.607      8.890    -0.1969E+05



                      -6.000     0.6063    -0.9596      8.906      8.743    

                     -0.1944E+05 -6.000    -0.7002     -1.018      9.703    

                       8.525    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23366.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       92
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       93
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      200     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -3567.29       3567.29       20123.2       23690.5    
   2  0.695074     -0.363738      -680.585       680.585       21067.9       21748.5    
   3  0.541180     -0.614003      -1148.85       1148.85       22921.6       24070.4    
   4  0.189791      -1.66183      -3109.43       3109.43       23462.2       26571.6    
   5  0.245553      -1.40424      -2627.46       2627.46       23903.8       26531.3    
   6  0.641474     -0.443986      -830.737       830.737       23900.1       24730.8    
   7  0.308462      -1.17616      -2200.69       2200.69       24174.3       26375.0    
   8  0.478005     -0.738133      -1381.11       1381.11       23762.8       25144.0    
   9  0.395759     -0.926951      -1734.41       1734.41       23905.3       25639.7    
  10  0.438776E-01  -3.12635      -5849.67       5849.67       23830.3       29680.0    
  11  0.294628E-01  -3.52463      -6594.89       6594.89       23736.4       30331.3    
  12  0.331052E-01  -3.40806      -6376.79       6376.79       23864.0       30240.7    
  13  0.916325E-01  -2.38997      -4471.84       4471.84       24099.8       28571.6    
  14  0.985908     -0.141919E-01  -26.5542       26.5542       24266.3       24292.9    
  15  0.511724     -0.669970      -1253.57       1253.57       23850.4       25104.0    
  16  0.185695      -1.68365      -3150.26       3150.26       24626.5       27776.8    
  17  0.830711     -0.185474      -347.037       347.037       23858.9       24206.0    
  18  0.765179E-04  -9.47799      -17734.1       17734.1       22997.0       40731.2    
  19  0.129365      -2.04512      -3826.60       3826.60       24619.4       28446.0    
  20  0.796363     -0.227700      -426.046       426.046       24118.2       24544.3    
  21  0.589256     -0.528895      -989.609       989.609       24527.3       25516.9    
  22  0.770995     -0.260073      -486.619       486.619       24544.4       25031.0    
  23  0.685430     -0.377709      -706.727       706.727       25013.3       25720.0    
  24  0.487688     -0.718080      -1343.59       1343.59       24947.8       26291.4    
  25  0.114898      -2.16371      -4048.50       4048.50       24100.2       28148.7    
  26  0.165093      -1.80124      -3370.28       3370.28       24732.8       28103.1    
  27  0.302275      -1.19642      -2238.61       2238.61       25138.6       27377.2    
  28  0.123669      -2.09014      -3910.84       3910.84       22554.5       26465.3    
  29  0.960526     -0.402739E-01  -75.3559       75.3559       24689.2       24764.6    
  30  0.744557     -0.294966      -551.907       551.907       24472.4       25024.3    
  31  0.418436     -0.871232      -1630.15       1630.15       25038.7       26668.9    
  32  0.624411     -0.470947      -881.183       881.183       23866.1       24747.3    
  33  0.920055     -0.833222E-01  -155.903       155.903       23924.6       24080.5    
  34  0.330507      -1.10713      -2071.53       2071.53       23989.8       26061.3    
  35  0.889566     -0.117022      -218.958       218.958       24467.3       24686.3    
  36  0.269410      -1.31152      -2453.97       2453.97       26132.0       28586.0    
  37  0.458780     -0.779184      -1457.92       1457.92       23850.4       25308.4    
  38  0.952588     -0.485730E-01  -90.8842       90.8842       24940.8       25031.7    
  39  0.213836      -1.54254      -2886.24       2886.24       23480.0       26366.3    
  40  0.460697     -0.775015      -1450.12       1450.12       23294.8       24744.9    
  41  0.571693     -0.559153      -1046.22       1046.22       25131.3       26177.5    
  42  0.201363      -1.60265      -2998.69       2998.69       24028.8       27027.5    
  43  0.707817     -0.345570      -646.592       646.592       24932.5       25579.1    
  44  0.927118     -0.756745E-01  -141.594       141.594       24879.4       25021.0    
  45  0.288916      -1.24162      -2323.18       2323.18       24959.5       27282.7    
  46  0.702737     -0.352773      -660.069       660.069       21294.9       21955.0    
  47  0.253190      -1.37362      -2570.16       2570.16       24693.2       27263.3    
  48  0.709086     -0.343779      -643.240       643.240       23512.3       24155.6    
  49  0.399421     -0.917738      -1717.17       1717.17       24977.9       26695.1    
  50  0.837301     -0.177572      -332.253       332.253       24610.1       24942.4    
  51  0.906694     -0.979507E-01  -183.274       183.274       23617.5       23800.7    
  52  0.479547     -0.734913      -1375.09       1375.09       26352.1       27727.2    
  53  0.573668     -0.555704      -1039.77       1039.77       23367.0       24406.7    
loop,thermsimp(1:2)       93   3567.29       680.585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203      25196.50          0.90          1.18         21.81          0.23          0.04         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25196.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       93
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       94
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      201     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -321.149       321.149       21067.9       21389.1    
   2  0.478368     -0.737375      -1379.69       1379.69       21294.9       22674.6    
   3  0.283498      -1.26055      -2358.60       2358.60       20123.2       22481.8    
   4  0.520516     -0.652935      -1221.70       1221.70       23617.5       24839.2    
   5  0.703282E-01  -2.65458      -4966.95       4966.95       22921.6       27888.5    
   6  0.914137     -0.897748E-01  -167.977       167.977       23924.6       24092.6    
   7  0.479535     -0.734938      -1375.13       1375.13       23512.3       24887.5    
   8  0.921875     -0.813456E-01  -152.205       152.205       23858.9       24011.1    
   9  0.739547     -0.301718      -564.541       564.541       24266.3       24830.9    
  10  0.790753     -0.234770      -439.275       439.275       23367.0       23806.2    
  11  0.212247E-01  -3.85259      -7208.53       7208.53       24118.2       31326.7    
  12  0.286971      -1.24837      -2335.82       2335.82       24467.3       26803.2    
  13  0.695666     -0.362886      -678.991       678.991       23900.1       24579.1    
  14  0.534590     -0.626255      -1171.78       1171.78       23294.8       24466.6    
  15  0.945577     -0.559603E-01  -104.707       104.707       23866.1       23970.8    
  16  0.619446     -0.478930      -896.120       896.120       24689.2       25585.4    
  17  0.291083E-01  -3.53673      -6617.53       6617.53       24610.1       31227.6    
  18  0.372584E-01  -3.28988      -6155.65       6155.65       24879.4       31035.1    
  19  0.713241     -0.337936      -632.307       632.307       24472.4       25104.7    
  20  0.280281      -1.27196      -2379.95       2379.95       24544.4       26924.3    
  21  0.254796      -1.36729      -2558.32       2558.32       24940.8       27499.1    
  22  0.498598     -0.695955      -1302.19       1302.19       23850.4       25152.6    
  23  0.515261E-01  -2.96567      -5549.02       5549.02       23762.8       29311.9    
  24  0.347627      -1.05662      -1977.04       1977.04       23850.4       25827.5    
  25  0.696212     -0.362102      -677.524       677.524       24527.3       25204.8    
  26  0.707749E-01  -2.64825      -4955.11       4955.11       24932.5       29887.6    
  27  0.364523E-01  -3.31175      -6196.57       6196.57       23905.3       30101.9    
  28  0.895087E-02  -4.71600      -8824.06       8824.06       25013.3       33837.3    
  29  0.333194      -1.09903      -2056.38       2056.38       23989.8       26046.1    
  30  0.451375     -0.795457      -1488.37       1488.37       25131.3       26619.7    
  31  0.849961E-01  -2.46515      -4612.51       4612.51       24947.8       29560.3    
  32  0.524791     -0.644756      -1206.39       1206.39       23480.0       24686.4    
  33  0.641068     -0.444619      -831.922       831.922       24174.3       25006.3    
  34  0.757376     -0.277895      -519.966       519.966       22554.5       23074.5    
  35  0.760597     -0.273651      -512.025       512.025       23903.8       24415.9    
  36  0.709070     -0.343801      -643.281       643.281       23462.2       24105.5    
  37  0.794718     -0.229768      -429.916       429.916       25038.7       25468.6    
  38  0.869679     -0.139632      -261.263       261.263       24977.9       25239.1    
  39  0.229100E-01  -3.77618      -7065.57       7065.57       24028.8       31094.4    
  40  0.935590     -0.665776E-01  -124.572       124.572       24693.2       24817.7    
  41  0.889453     -0.117149      -219.195       219.195       24959.5       25178.7    
  42  0.529054     -0.636665      -1191.26       1191.26       25138.6       26329.8    
  43  0.907902     -0.966186E-01  -180.782       180.782       26352.1       26532.9    
  44  0.693802     -0.365568      -684.010       684.010       24626.5       25310.6    
  45  0.883803     -0.123521      -231.119       231.119       24732.8       24963.9    
  46  0.275134E-01  -3.59308      -6722.97       6722.97       24100.2       30823.2    
  47  0.324767      -1.12465      -2104.31       2104.31       24619.4       26723.7    
  48  0.853326     -0.158614      -296.781       296.781       24099.8       24396.6    
  49  0.325639      -1.12197      -2099.30       2099.30       26132.0       28231.3    
  50  0.773280     -0.257115      -481.084       481.084       23830.3       24311.4    
  51  0.108890      -2.21741      -4148.97       4148.97       23864.0       28012.9    
  52  0.188532E-01  -3.97107      -7430.23       7430.23       23736.4       31166.6    
  53  0.970927     -0.295045E-01  -55.2055       55.2055       25196.5       25251.7    
loop,thermsimp(1:2)       94   321.149       1379.69    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204      23343.74          0.91          1.18         21.77          0.34          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23343.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       94
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:       95
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      202     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -551.673       551.673       21067.9       21619.6    
   2  0.739179     -0.302215      -565.471       565.471       20123.2       20688.7    
   3  0.131167      -2.03128      -3800.70       3800.70       21294.9       25095.6    
   4  0.523356     -0.647493      -1211.52       1211.52       22554.5       23766.0    
   5  0.660412     -0.414891      -776.298       776.298       23367.0       24143.3    
   6  0.433074E-01  -3.13943      -5874.15       5874.15       23866.1       29740.2    
   7  0.480352     -0.733236      -1371.95       1371.95       23858.9       25230.9    
   8  0.808114     -0.213053      -398.640       398.640       23924.6       24323.2    
   9  0.723804     -0.323235      -604.800       604.800       23462.2       24067.0    
  10  0.322682      -1.13109      -2116.36       2116.36       23830.3       25946.6    
  11  0.898907     -0.106576      -199.413       199.413       24099.8       24299.2    
  12  0.359972      -1.02173      -1911.74       1911.74       23903.8       25815.6    
  13  0.879118     -0.128836      -241.063       241.063       23294.8       23535.9    
  14  0.963559     -0.371220E-01  -69.4584       69.4584       23900.1       23969.5    
  15  0.662848     -0.411210      -769.409       769.409       23480.0       24249.4    
  16  0.648402     -0.433244      -810.637       810.637       24693.2       25503.8    
  17  0.375343     -0.979916      -1833.51       1833.51       24266.3       26099.8    
  18  0.812441     -0.207712      -388.648       388.648       23617.5       24006.1    
  19  0.248177E-01  -3.69620      -6915.91       6915.91       23512.3       30428.2    
  20  0.653530     -0.425366      -795.897       795.897       24732.8       25528.7    
  21  0.712244     -0.339334      -634.924       634.924       24174.3       24809.3    
  22  0.358229      -1.02658      -1920.82       1920.82       24472.4       26393.2    
  23  0.325518      -1.12234      -2099.99       2099.99       23850.4       25950.4    
  24  0.770349     -0.260912      -488.188       488.188       24959.5       25447.7    
  25  0.633518E-01  -2.75905      -5162.43       5162.43       24527.3       29689.7    
  26  0.168796      -1.77907      -3328.79       3328.79       24977.9       28306.7    
  27  0.562007     -0.576241      -1078.20       1078.20       25196.5       26274.7    
  28  0.156316      -1.85588      -3472.51       3472.51       24626.5       28099.1    
  29  0.967732     -0.328002E-01  -61.3721       61.3721       25038.7       25100.1    
  30  0.538071     -0.619766      -1159.64       1159.64       24689.2       25848.9    
  31  0.967495     -0.330453E-01  -61.8307       61.8307       23850.4       23912.3    
  32  0.771619     -0.259265      -485.107       485.107       23989.8       24474.9    
  33  0.246044      -1.40225      -2623.73       2623.73       25138.6       27762.3    
  34  0.700731     -0.355631      -665.417       665.417       26352.1       27017.5    
  35  0.382714     -0.960468      -1797.12       1797.12       25131.3       26928.4    
  36  0.580395     -0.544047      -1017.96       1017.96       24619.4       25637.4    
  37  0.305131      -1.18701      -2221.01       2221.01       24467.3       26688.3    
  38  0.624250     -0.471204      -881.664       881.664       24544.4       25426.0    
  39  0.575432     -0.552634      -1034.03       1034.03       24940.8       25974.8    
  40  0.701335     -0.354770      -663.806       663.806       22921.6       23585.4    
  41  0.290211      -1.23715      -2314.81       2314.81       23864.0       26178.8    
  42  0.140976      -1.95916      -3665.76       3665.76       26132.0       29797.8    
  43  0.275714      -1.28839      -2410.69       2410.69       23762.8       26173.5    
  44  0.856479     -0.154925      -289.879       289.879       24947.8       25237.7    
  45  0.994286     -0.573084E-02  -10.7229       10.7229       24932.5       24943.2    
  46  0.913008     -0.910102E-01  -170.288       170.288       23905.3       24075.6    
  47  0.204063      -1.58933      -2973.77       2973.77       24100.2       27074.0    
  48  0.388833     -0.944605      -1767.44       1767.44       24879.4       26646.9    
  49  0.781619     -0.246387      -461.012       461.012       24028.8       24489.8    
  50  0.373421     -0.985049      -1843.11       1843.11       23736.4       25579.5    
  51  0.834918     -0.180422      -337.585       337.585       24610.1       24947.7    
  52  0.174969      -1.74315      -3261.58       3261.58       24118.2       27379.8    
  53  0.531353     -0.632329      -1183.14       1183.14       23343.7       24526.9    
loop,thermsimp(1:2)       95   551.673       565.471    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205      24799.65          0.92          1.20         21.76          0.38          0.04         24.30
Just calling func    0   0         24.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24799.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:       95
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   1072.43    

hmean,hstd :    24093.7       1072.43    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    24093.7       1072.43    
h(1),h(best1),h(np1) :    20123.2       20123.2       24799.6    
htherm(1),htherm(best1),htherm(np1) :    20688.7       20688.7       30428.2    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        1
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      203     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -7277.85       7277.85       20123.2       27401.1    
   2  0.977100     -0.231667E-01  -43.3468       43.3468       21067.9       21111.3    
   3  0.491467     -0.710361      -1329.15       1329.15       23294.8       24624.0    
   4  0.802113E-01  -2.52309      -4720.92       4720.92       22921.6       27642.5    
   5  0.891044     -0.115361      -215.851       215.851       22554.5       22770.3    
   6  0.397551     -0.922433      -1725.95       1725.95       23850.4       25576.4    
   7  0.121203      -2.11029      -3948.54       3948.54       23900.1       27848.6    
   8  0.789985E-01  -2.53833      -4749.43       4749.43       23617.5       28366.9    
   9  0.921855     -0.813679E-01  -152.246       152.246       23462.2       23614.4    
  10  0.252671      -1.37567      -2573.99       2573.99       23905.3       26479.3    
  11  0.787271     -0.239182      -447.531       447.531       23367.0       23814.5    
  12  0.634653     -0.454676      -850.739       850.739       23480.0       24330.8    
  13  0.706648     -0.347222      -649.683       649.683       24099.8       24749.5    
  14  0.349740E-01  -3.35315      -6274.04       6274.04       23924.6       30198.6    
  15  0.686787     -0.375731      -703.025       703.025       23989.8       24692.8    
  16  0.309348      -1.17329      -2195.32       2195.32       24028.8       26224.2    
  17  0.703748     -0.351336      -657.380       657.380       23343.7       24001.1    
  18  0.985092     -0.150207E-01  -28.1051       28.1051       24174.3       24202.4    
  19  0.440741     -0.819298      -1532.98       1532.98       24932.5       26465.5    
  20  0.796112     -0.228015      -426.636       426.636       24610.1       25036.7    
  21  0.451938     -0.794210      -1486.04       1486.04       21294.9       22780.9    
  22  0.230902      -1.46576      -2742.57       2742.57       25038.7       27781.3    
  23  0.760212     -0.274159      -512.975       512.975       23858.9       24371.9    
  24  0.250434E-02  -5.98973      -11207.3       11207.3       24947.8       36155.1    
  25  0.627913E-01  -2.76794      -5179.05       5179.05       24544.4       29723.4    
  26  0.263128      -1.33511      -2498.12       2498.12       24959.5       27457.6    
  27  0.177986      -1.72605      -3229.59       3229.59       24693.2       27922.8    
  28  0.919776     -0.836247E-01  -156.469       156.469       24732.8       24889.2    
  29  0.854272     -0.157506      -294.708       294.708       23736.4       24031.1    
  30  0.648187     -0.433576      -811.258       811.258       24619.4       25430.7    
  31  0.853797     -0.158061      -295.747       295.747       23903.8       24199.6    
  32  0.484551     -0.724533      -1355.66       1355.66       24689.2       26044.9    
  33  0.423817     -0.858454      -1606.24       1606.24       23830.3       25436.5    
  34  0.932015     -0.704065E-01  -131.737       131.737       23850.4       23982.1    
  35  0.161906      -1.82074      -3406.76       3406.76       24940.8       28347.6    
  36  0.812519     -0.207617      -388.469       388.469       24266.3       24654.8    
  37  0.346838      -1.05890      -1981.29       1981.29       23762.8       25744.1    
  38  0.477141     -0.739943      -1384.50       1384.50       23864.0       25248.5    
  39  0.931946     -0.704808E-01  -131.876       131.876       25196.5       25328.4    
  40  0.189794      -1.66182      -3109.40       3109.40       24472.4       27581.8    
  41  0.361902      -1.01638      -1901.74       1901.74       24879.4       26781.2    
  42  0.775630E-02  -4.85925      -9092.08       9092.08       24467.3       33559.4    
  43  0.292497      -1.22930      -2300.13       2300.13       25131.3       27431.4    
  44  0.264300      -1.33067      -2489.80       2489.80       26352.1       28841.9    
  45  0.529597     -0.635638      -1189.33       1189.33       24100.2       25289.6    
  46  0.163272      -1.81234      -3391.04       3391.04       24118.2       27509.2    
  47  0.212593      -1.54838      -2897.15       2897.15       25138.6       28035.7    
  48  0.359173      -1.02395      -1915.90       1915.90       24626.5       26542.4    
  49  0.993707     -0.631295E-02  -11.8121       11.8121       24977.9       24989.7    
  50  0.261479      -1.34140      -2509.88       2509.88       24527.3       27037.2    
  51  0.441392     -0.817822      -1530.22       1530.22       23866.1       25396.3    
  52  0.624656     -0.470554      -880.448       880.448       26132.0       27012.5    
  53  0.646784     -0.435743      -815.313       815.313       24799.6       25615.0    
loop,thermsimp(1:2)        1   7277.85       43.3468    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206      23485.13          0.91          1.18         21.77          0.36          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23485.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:        1
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        2
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      204     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -2785.43       2785.43       21067.9       23853.3    
   2  0.726663     -0.319292      -597.423       597.423       22554.5       23151.9    
   3  0.929061     -0.735808E-01  -137.676       137.676       21294.9       21432.6    
   4  0.764703     -0.268268      -501.953       501.953       23462.2       23964.1    
   5  0.119617      -2.12346      -3973.18       3973.18       23367.0       27340.1    
   6  0.369672     -0.995138      -1861.99       1861.99       23850.4       25712.4    
   7  0.875806     -0.132611      -248.127       248.127       23343.7       23591.9    
   8  0.657886     -0.418723      -783.467       783.467       23736.4       24519.9    
   9  0.387095E-01  -3.25167      -6084.16       6084.16       23903.8       29988.0    
  10  0.454078     -0.789485      -1477.20       1477.20       24174.3       25651.5    
  11  0.890470     -0.116006      -217.057       217.057       23480.0       23697.1    
  12  0.118445      -2.13331      -3991.60       3991.60       23858.9       27850.5    
  13  0.190238      -1.65948      -3105.03       3105.03       23294.8       26399.8    
  14  0.435624     -0.830976      -1554.83       1554.83       24266.3       25821.2    
  15  0.768655     -0.263114      -492.308       492.308       23989.8       24482.1    
  16  0.870896E-01  -2.44082      -4566.98       4566.98       24099.8       28666.8    
  17  0.936453     -0.656556E-01  -122.847       122.847       24732.8       24855.6    
  18  0.159312      -1.83689      -3436.98       3436.98       24977.9       28414.9    
  19  0.988165     -0.119051E-01  -22.2755       22.2755       24610.1       24632.4    
  20  0.713347     -0.337787      -632.028       632.028       23864.0       24496.0    
  21  0.417075     -0.874489      -1636.25       1636.25       24100.2       25736.5    
  22  0.719048     -0.329827      -617.134       617.134       25196.5       25813.6    
  23  0.785519     -0.241411      -451.702       451.702       23866.1       24317.8    
  24  0.356994      -1.03004      -1927.29       1927.29       24619.4       26546.7    
  25  0.357951      -1.02736      -1922.28       1922.28       23830.3       25752.6    
  26  0.154816      -1.86552      -3490.55       3490.55       23850.4       27341.0    
  27  0.246912      -1.39872      -2617.13       2617.13       24799.6       27416.8    
  28  0.553458     -0.591570      -1106.88       1106.88       23762.8       24869.7    
  29  0.729602     -0.315256      -589.872       589.872       24689.2       25279.1    
  30  0.605470     -0.501750      -938.819       938.819       24028.8       24967.7    
  31  0.278987E-01  -3.57918      -6696.95       6696.95       24932.5       31629.4    
  32  0.187991      -1.67136      -3127.27       3127.27       23905.3       27032.6    
  33  0.543158     -0.610355      -1142.03       1142.03       24626.5       25768.6    
  34  0.996749     -0.325625E-02  -6.09272       6.09272       24879.4       24885.5    
  35  0.540727     -0.614841      -1150.42       1150.42       26132.0       27282.5    
  36  0.833271E-01  -2.48498      -4649.62       4649.62       24527.3       29176.9    
  37  0.404538     -0.905011      -1693.35       1693.35       20123.2       21816.6    
  38  0.147302      -1.91527      -3583.64       3583.64       25131.3       28714.9    
  39  0.364226E-01  -3.31257      -6198.10       6198.10       24959.5       31157.6    
  40  0.381304     -0.964158      -1804.02       1804.02       24118.2       25922.2    
  41  0.737758     -0.304140      -569.072       569.072       24472.4       25041.5    
  42  0.179374      -1.71828      -3215.05       3215.05       22921.6       26136.6    
  43  0.281757      -1.26671      -2370.13       2370.13       25038.7       27408.9    
  44  0.192633      -1.64697      -3081.62       3081.62       23900.1       26981.7    
  45  0.954983     -0.460617E-01  -86.1854       86.1854       24693.2       24779.4    
  46  0.710258     -0.342127      -640.150       640.150       25138.6       25778.7    
  47  0.831769     -0.184201      -344.656       344.656       24940.8       25285.4    
  48  0.912541     -0.915218E-01  -171.245       171.245       23617.5       23788.7    
  49  0.221543      -1.50714      -2819.99       2819.99       26352.1       29172.1    
  50  0.690803E-02  -4.97507      -9308.79       9308.79       24544.4       33853.2    
  51  0.162616      -1.81637      -3398.58       3398.58       23924.6       27323.2    
  52  0.869433     -0.139913      -261.790       261.790       24467.3       24729.1    
  53  0.541563     -0.613295      -1147.53       1147.53       23485.1       24632.7    
loop,thermsimp(1:2)        2   2785.43       597.423    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207      23988.48          0.90          1.19         21.83          0.31          0.05         24.27
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23988.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:        2
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        3
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      205     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -1643.18       1643.18       21294.9       22938.1    
   2  0.117190E-02  -6.74913      -12628.2       12628.2       20123.2       32751.4    
   3  0.432199     -0.838870      -1569.60       1569.60       22554.5       24124.1    
   4  0.466381     -0.762753      -1427.18       1427.18       23343.7       24770.9    
   5  0.696685     -0.361422      -676.252       676.252       23480.0       24156.3    
   6  0.193714      -1.64137      -3071.15       3071.15       23617.5       26688.6    
   7  0.535145     -0.625217      -1169.84       1169.84       21067.9       22237.7    
   8  0.812984     -0.207044      -387.398       387.398       23462.2       23849.6    
   9  0.956789     -0.441723E-01  -82.6502       82.6502       23866.1       23948.7    
  10  0.496711E-01  -3.00233      -5617.62       5617.62       23989.8       29607.4    
  11  0.206308E-01  -3.88097      -7261.64       7261.64       23864.0       31125.6    
  12  0.423434     -0.859358      -1607.93       1607.93       23736.4       25344.4    
  13  0.216826      -1.52866      -2860.26       2860.26       24610.1       27470.4    
  14  0.792422     -0.232661      -435.330       435.330       23485.1       23920.5    
  15  0.265940      -1.32449      -2478.23       2478.23       24467.3       26945.6    
  16  0.993400     -0.662201E-02  -12.3904       12.3904       24693.2       24705.6    
  17  0.645200E-01  -2.74078      -5128.24       5128.24       24732.8       29861.0    
  18  0.651527     -0.428436      -801.641       801.641       23762.8       24564.5    
  19  0.858875     -0.152131      -284.651       284.651       24879.4       25164.1    
  20  0.126056      -2.07103      -3875.07       3875.07       24028.8       27903.9    
  21  0.772661E-01  -2.56050      -4790.92       4790.92       24472.4       29263.3    
  22  0.441429     -0.817737      -1530.06       1530.06       24689.2       26219.3    
  23  0.166586      -1.79224      -3353.44       3353.44       24940.8       28294.2    
  24  0.217490      -1.52560      -2854.54       2854.54       24174.3       27028.9    
  25  0.632871     -0.457488      -856.000       856.000       23850.4       24706.4    
  26  0.201694      -1.60100      -2995.62       2995.62       24100.2       27095.9    
  27  0.282690      -1.26341      -2363.94       2363.94       23830.3       26194.2    
  28  0.255086E-01  -3.66874      -6864.54       6864.54       24626.5       31491.1    
  29  0.562308     -0.575706      -1077.20       1077.20       25138.6       26215.8    
  30  0.283366E-01  -3.56360      -6667.81       6667.81       25196.5       31864.3    
  31  0.404254E-01  -3.20830      -6003.00       6003.00       24266.3       30269.3    
  32  0.170475      -1.76917      -3310.27       3310.27       24118.2       27428.5    
  33  0.141712      -1.95396      -3656.02       3656.02       22921.6       26577.6    
  34  0.773173     -0.257253      -481.342       481.342       23294.8       23776.1    
  35  0.255978      -1.36266      -2549.66       2549.66       24619.4       27169.1    
  36  0.823739     -0.193902      -362.807       362.807       23900.1       24262.9    
  37  0.166307      -1.79392      -3356.58       3356.58       23905.3       27261.9    
  38  0.676319     -0.391090      -731.763       731.763       26132.0       26863.8    
  39  0.144546      -1.93416      -3618.98       3618.98       23924.6       27543.6    
  40  0.593436     -0.521826      -976.383       976.383       23367.0       24343.3    
  41  0.762921     -0.270600      -506.317       506.317       23850.4       24356.8    
  42  0.855796     -0.155724      -291.372       291.372       25038.7       25330.1    
  43  0.433555     -0.835737      -1563.74       1563.74       24799.6       26363.4    
  44  0.252891      -1.37480      -2572.36       2572.36       23858.9       26431.3    
  45  0.942909     -0.587850E-01  -109.992       109.992       24977.9       25087.9    
  46  0.432313     -0.838605      -1569.10       1569.10       24099.8       25668.9    
  47  0.975713     -0.245869E-01  -46.0042       46.0042       25131.3       25177.3    
  48  0.541226     -0.613919      -1148.70       1148.70       26352.1       27500.8    
  49  0.255057      -1.36627      -2556.41       2556.41       24527.3       27083.7    
  50  0.202141      -1.59879      -2991.47       2991.47       23903.8       26895.3    
  51  0.949562     -0.517549E-01  -96.8379       96.8379       24959.5       25056.3    
  52  0.255660E-01  -3.66649      -6860.33       6860.33       24932.5       31792.8    
  53  0.306802      -1.18155      -2210.79       2210.79       23988.5       26199.3    
loop,thermsimp(1:2)        3   1643.18       12628.2    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208      21805.41          0.90          1.18         21.87          0.21          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209      24234.50          0.91          1.18         21.82          0.25          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  21805.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:        3
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        4
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      207     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -787.054       787.054       21067.9       21855.0    
   2  0.880966     -0.126736      -237.134       237.134       21294.9       21532.0    
   3  0.854972     -0.156687      -293.175       293.175       23294.8       23588.0    
   4  0.797101     -0.226774      -424.314       424.314       23462.2       23886.5    
   5  0.158477      -1.84214      -3446.81       3446.81       23485.1       26931.9    
   6  0.593839     -0.521148      -975.113       975.113       23866.1       24841.2    
   7  0.817101     -0.201993      -377.946       377.946       22554.5       22932.4    
   8  0.997190     -0.281377E-02  -5.26481       5.26481       23480.0       23485.3    
   9  0.402857     -0.909174      -1701.14       1701.14       23900.1       25601.2    
  10  0.690455     -0.370405      -693.060       693.060       23367.0       24060.0    
  11  0.609635     -0.494895      -925.992       925.992       23850.4       24776.4    
  12  0.491117     -0.711073      -1330.48       1330.48       23762.8       25093.3    
  13  0.990676     -0.936814E-02  -17.5286       17.5286       24693.2       24710.7    
  14  0.976919     -0.233519E-01  -43.6934       43.6934       23850.4       23894.1    
  15  0.692556     -0.367366      -687.374       687.374       23343.7       24031.1    
  16  0.549694     -0.598394      -1119.65       1119.65       24959.5       26079.1    
  17  0.538267E-01  -2.92199      -5467.29       5467.29       24977.9       30445.2    
  18  0.602193     -0.507178      -948.974       948.974       24879.4       25828.4    
  19  0.537276     -0.621243      -1162.40       1162.40       25131.3       26293.7    
  20  0.338220      -1.08406      -2028.37       2028.37       25038.7       27067.1    
  21  0.306772      -1.18165      -2210.97       2210.97       23736.4       25947.4    
  22  0.895389     -0.110497      -206.750       206.750       24099.8       24306.5    
  23  0.120096      -2.11946      -3965.70       3965.70       23830.3       27796.0    
  24  0.680166     -0.385418      -721.150       721.150       23988.5       24709.6    
  25  0.369434     -0.995782      -1863.20       1863.20       25138.6       27001.8    
  26  0.235484      -1.44611      -2705.80       2705.80       24689.2       27395.0    
  27  0.260836      -1.34386      -2514.49       2514.49       24799.6       27314.1    
  28  0.720259     -0.328144      -613.987       613.987       23858.9       24472.9    
  29  0.695069     -0.363744      -680.597       680.597       22921.6       23602.2    
  30  0.105076      -2.25307      -4215.70       4215.70       23617.5       27833.2    
  31  0.968349     -0.321628E-01  -60.1794       60.1794       26132.0       26192.2    
  32  0.974131     -0.262091E-01  -49.0395       49.0395       23903.8       23952.9    
  33  0.647785E-01  -2.73678      -5120.76       5120.76       24467.3       29588.1    
  34  0.910402     -0.938690E-01  -175.637       175.637       24174.3       24350.0    
  35  0.488733     -0.715939      -1339.58       1339.58       24527.3       25866.9    
  36  0.377436E-01  -3.27694      -6131.44       6131.44       24100.2       30231.7    
  37  0.154608      -1.86686      -3493.06       3493.06       24619.4       28112.5    
  38  0.277804      -1.28084      -2396.56       2396.56       23905.3       26301.9    
  39  0.969547     -0.309263E-01  -57.8658       57.8658       24118.2       24176.1    
  40  0.380083     -0.967367      -1810.03       1810.03       24610.1       26420.1    
  41  0.751822     -0.285256      -533.739       533.739       26352.1       26885.8    
  42  0.137692      -1.98274      -3709.88       3709.88       23924.6       27634.5    
  43  0.293470      -1.22598      -2293.92       2293.92       24028.8       26322.8    
  44  0.433705     -0.835390      -1563.09       1563.09       24940.8       26503.9    
  45  0.418034     -0.872194      -1631.95       1631.95       24472.4       26104.3    
  46  0.166728      -1.79139      -3351.85       3351.85       23989.8       27341.6    
  47  0.921960     -0.812537E-01  -152.033       152.033       24732.8       24884.8    
  48  0.412601     -0.885275      -1656.43       1656.43       24266.3       25922.7    
  49  0.925181     -0.777655E-01  -145.506       145.506       23864.0       24009.5    
  50  0.687711     -0.374386      -700.510       700.510       24626.5       25327.1    
  51  0.729890     -0.314862      -589.134       589.134       24932.5       25521.6    
  52  0.355028      -1.03556      -1937.62       1937.62       25196.5       27134.1    
  53  0.123338      -2.09283      -3915.87       3915.87       21805.4       25721.3    
loop,thermsimp(1:2)        4   787.054       237.134    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210      23671.79          0.90          1.18         21.81          0.30          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    211      22894.86          0.91          1.17         21.87          0.20          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  22894.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:        4
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        5
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      209     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -863.829       863.829       21294.9       22158.7    
   2  0.876370     -0.131967      -246.921       246.921       21067.9       21314.8    
   3  0.840080     -0.174259      -326.053       326.053       22554.5       22880.5    
   4  0.608986E-01  -2.79854      -5236.32       5236.32       23480.0       28716.3    
   5  0.311901      -1.16507      -2179.94       2179.94       23294.8       25474.7    
   6  0.937552E-01  -2.36707      -4428.99       4428.99       22921.6       27350.6    
   7  0.608418     -0.496893      -929.731       929.731       23462.2       24391.9    
   8  0.297707      -1.21164      -2267.09       2267.09       23850.4       26117.5    
   9  0.365777      -1.00573      -1881.81       1881.81       23903.8       25785.7    
  10  0.194673      -1.63643      -3061.91       3061.91       23864.0       26925.9    
  11  0.941388     -0.604003E-01  -113.014       113.014       23343.7       23456.8    
  12  0.984881     -0.152343E-01  -28.5047       28.5047       23367.0       23395.5    
  13  0.750245     -0.287355      -537.666       537.666       24118.2       24655.9    
  14  0.437446     -0.826803      -1547.02       1547.02       24099.8       25646.8    
  15  0.174754      -1.74437      -3263.88       3263.88       24174.3       27438.2    
  16  0.300465E-01  -3.50501      -6558.17       6558.17       23858.9       30417.1    
  17  0.372924     -0.986380      -1845.60       1845.60       23988.5       25834.1    
  18  0.803506     -0.218771      -409.339       409.339       24693.2       25102.5    
  19  0.232583      -1.45851      -2729.00       2729.00       23850.4       26579.4    
  20  0.383368     -0.958759      -1793.92       1793.92       23866.1       25660.0    
  21  0.622786     -0.473552      -886.057       886.057       24732.8       25618.8    
  22  0.356422      -1.03164      -1930.29       1930.29       23762.8       25693.1    
  23  0.919964     -0.834212E-01  -156.088       156.088       24626.5       24782.6    
  24  0.550740     -0.596492      -1116.09       1116.09       24932.5       26048.6    
  25  0.402627     -0.909745      -1702.21       1702.21       23900.1       25602.3    
  26  0.256265      -1.36154      -2547.57       2547.57       21805.4       24353.0    
  27  0.763510     -0.269828      -504.873       504.873       24879.4       25384.3    
  28  0.388963     -0.944271      -1766.81       1766.81       24527.3       26294.1    
  29  0.981923     -0.182423E-01  -34.1329       34.1329       24266.3       24300.5    
  30  0.656629     -0.420635      -787.046       787.046       23736.4       24523.5    
  31  0.932472     -0.699161E-01  -130.819       130.819       24959.5       25090.3    
  32  0.336775      -1.08834      -2036.38       2036.38       24472.4       26508.8    
  33  0.810758     -0.209786      -392.528       392.528       26132.0       26524.6    
  34  0.557014     -0.585166      -1094.90       1094.90       25131.3       26226.2    
  35  0.652747     -0.426565      -798.141       798.141       23905.3       24703.5    
  36  0.890774     -0.115665      -216.419       216.419       24028.8       24245.3    
  37  0.703035     -0.352349      -659.276       659.276       24610.1       25269.4    
  38  0.534296     -0.626805      -1172.81       1172.81       24940.8       26113.6    
  39  0.604162     -0.503914      -942.866       942.866       26352.1       27295.0    
  40  0.545557     -0.605948      -1133.78       1133.78       23485.1       24618.9    
  41  0.371346     -0.990620      -1853.54       1853.54       25138.6       26992.1    
  42  0.491801     -0.709680      -1327.87       1327.87       25038.7       26366.6    
  43  0.879731     -0.128139      -239.760       239.760       25196.5       25436.3    
  44  0.995113     -0.489866E-02  -9.16581       9.16581       24799.6       24808.8    
  45  0.467927     -0.759444      -1420.99       1420.99       23989.8       25410.7    
  46  0.355083      -1.03540      -1937.33       1937.33       24689.2       26626.6    
  47  0.216960      -1.52804      -2859.10       2859.10       23924.6       26783.7    
  48  0.276988      -1.28378      -2402.06       2402.06       23830.3       26232.3    
  49  0.905458     -0.993144E-01  -185.826       185.826       23617.5       23803.3    
  50  0.704241     -0.350635      -656.068       656.068       24619.4       25275.5    
  51  0.784564     -0.242627      -453.977       453.977       24467.3       24921.3    
  52  0.329376      -1.11055      -2077.94       2077.94       24100.2       26178.2    
  53  0.845894     -0.167361      -313.147       313.147       22894.9       23208.0    
loop,thermsimp(1:2)        5   863.829       246.921    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212      24067.08          0.91          1.18         21.80          0.29          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24067.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1871.09               209
loop is:        5
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    1871.09               209
loop is:        6
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    935.544               261

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      210     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -1433.80       1433.80       21067.9       22501.7    
   2  0.942431     -0.592928E-01  -55.4710       55.4710       21294.9       21350.4    
   3  0.193824      -1.64081      -1535.04       1535.04       22554.5       24089.5    
   4  0.162512      -1.81700      -1699.89       1699.89       22894.9       24594.7    
   5  0.625243     -0.469616      -439.346       439.346       23367.0       23806.3    
   6  0.499178     -0.694793      -650.009       650.009       23343.7       23993.8    
   7  0.706095     -0.348006      -325.575       325.575       23617.5       23943.0    
   8  0.527414     -0.639770      -598.532       598.532       24028.8       24627.4    
   9  0.575748     -0.552085      -516.499       516.499       24266.3       24782.8    
  10  0.490522     -0.712286      -666.375       666.375       21805.4       22471.8    
  11  0.306517      -1.18248      -1106.26       1106.26       23462.2       24568.5    
  12  0.798470     -0.225057      -210.551       210.551       23736.4       23947.0    
  13  0.333550      -1.09796      -1027.19       1027.19       23485.1       24512.3    
  14  0.166731      -1.79138      -1675.91       1675.91       24118.2       25794.1    
  15  0.443580     -0.812878      -760.483       760.483       23905.3       24665.8    
  16  0.669985     -0.400500      -374.685       374.685       24626.5       25001.2    
  17  0.339921      -1.07904      -1009.49       1009.49       24799.6       25809.1    
  18  0.201260      -1.60316      -1499.82       1499.82       24467.3       25967.2    
  19  0.772250     -0.258447      -241.788       241.788       24959.5       25201.3    
  20  0.401372E-01  -3.21545      -3008.20       3008.20       24693.2       27701.4    
  21  0.940962     -0.608526E-01  -56.9303       56.9303       24610.1       24667.0    
  22  0.115324      -2.16001      -2020.79       2020.79       24619.4       26640.2    
  23  0.939991E-01  -2.36447      -2212.07       2212.07       24879.4       27091.5    
  24  0.412221     -0.886196      -829.075       829.075       23989.8       24818.8    
  25  0.136462      -1.99171      -1863.33       1863.33       25196.5       27059.8    
  26  0.310095      -1.17088      -1095.41       1095.41       23294.8       24390.2    
  27  0.985727     -0.143755E-01  -13.4489       13.4489       23900.1       23913.5    
  28  0.900161     -0.105182      -98.4020       98.4020       24732.8       24831.2    
  29  0.250220      -1.38542      -1296.12       1296.12       24099.8       25395.9    
  30  0.780405     -0.247942      -231.961       231.961       23866.1       24098.0    
  31  0.228719      -1.47526      -1380.17       1380.17       23762.8       25143.0    
  32  0.407088     -0.898727      -840.798       840.798       23903.8       24744.6    
  33  0.975627     -0.246749E-01  -23.0845       23.0845       23988.5       24011.6    
  34  0.885140     -0.122009      -114.145       114.145       24932.5       25046.6    
  35  0.896135     -0.109664      -102.596       102.596       24940.8       25043.4    
  36  0.856661     -0.154713      -144.741       144.741       23850.4       23995.1    
  37  0.258643      -1.35231      -1265.14       1265.14       24100.2       25365.4    
  38  0.336283      -1.08980      -1019.56       1019.56       25131.3       26150.9    
  39  0.868205     -0.141327      -132.218       132.218       23830.3       23962.5    
  40  0.937935     -0.640747E-01  -59.9447       59.9447       24527.3       24587.2    
  41  0.418906     -0.870109      -814.025       814.025       25038.7       25852.7    
  42  0.351040      -1.04685      -979.378       979.378       24472.4       25451.8    
  43  0.611628E-01  -2.79422      -2614.11       2614.11       26132.0       28746.1    
  44  0.153518      -1.87394      -1753.15       1753.15       23850.4       25603.6    
  45  0.938341     -0.636423E-01  -59.5401       59.5401       24689.2       24748.8    
  46  0.598133     -0.513942      -480.815       480.815       23924.6       24405.4    
  47  0.795771     -0.228444      -213.720       213.720       23864.0       24077.7    
  48  0.295375      -1.21951      -1140.91       1140.91       25138.6       26279.5    
  49  0.804738     -0.217239      -203.237       203.237       26352.1       26555.3    
  50  0.260094      -1.34671      -1259.91       1259.91       22921.6       24181.5    
  51  0.640517     -0.445479      -416.765       416.765       24174.3       24591.1    
  52  0.221872      -1.50566      -1408.61       1408.61       23480.0       24888.6    
  53  0.837141     -0.177762      -166.305       166.305       24067.1       24233.4    
loop,thermsimp(1:2)        6   1433.80       55.4710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213      22936.78          0.89          1.16         21.88          0.20          0.04         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  22936.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:        6
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:        7
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      211     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -1245.20       1245.20       21294.9       22540.1    
   2  0.401807     -0.911784      -853.013       853.013       21805.4       22658.4    
   3  0.418885     -0.870159      -814.071       814.071       21067.9       21882.0    
   4  0.753378     -0.283189      -264.935       264.935       23367.0       23631.9    
   5  0.792066     -0.233111      -218.085       218.085       23900.1       24118.1    
   6  0.868474     -0.141017      -131.928       131.928       23617.5       23749.4    
   7  0.318670      -1.14360      -1069.89       1069.89       23736.4       24806.3    
   8  0.863267     -0.147031      -137.554       137.554       23830.3       23967.8    
   9  0.589255     -0.528896      -494.805       494.805       23343.7       23838.5    
  10  0.632079E-01  -2.76133      -2583.34       2583.34       23850.4       26433.7    
  11  0.992270     -0.775975E-02  -7.25958       7.25958       23988.5       23995.7    
  12  0.466140     -0.763269      -714.071       714.071       23864.0       24578.0    
  13  0.177509      -1.72873      -1617.30       1617.30       22554.5       24171.8    
  14  0.933326     -0.690005E-01  -64.5530       64.5530       23866.1       23930.6    
  15  0.876357     -0.131982      -123.474       123.474       22921.6       23045.1    
  16  0.673496     -0.395274      -369.796       369.796       24067.1       24436.9    
  17  0.648708     -0.432773      -404.878       404.878       23294.8       23699.7    
  18  0.400813     -0.914259      -855.330       855.330       23924.6       24779.9    
  19  0.763164     -0.270282      -252.861       252.861       23485.1       23738.0    
  20  0.196240      -1.62842      -1523.46       1523.46       23462.2       24985.6    
  21  0.923666     -0.794046E-01  -74.2865       74.2865       24527.3       24601.6    
  22  0.999600     -0.400298E-03 -0.374496      0.374496       24174.3       24174.7    
  23  0.379715     -0.968335      -905.920       905.920       22894.9       23800.8    
  24  0.197375      -1.62265      -1518.06       1518.06       24028.8       25546.9    
  25  0.760736     -0.273468      -255.842       255.842       23905.3       24161.2    
  26  0.392182     -0.936030      -875.697       875.697       24610.1       25485.8    
  27  0.256208      -1.36177      -1273.99       1273.99       23903.8       25177.8    
  28  0.251796      -1.37914      -1290.24       1290.24       24689.2       25979.5    
  29  0.332089E-01  -3.40494      -3185.47       3185.47       24266.3       27451.8    
  30  0.970457     -0.299883E-01  -28.0554       28.0554       23989.8       24017.8    
  31  0.467370E-01  -3.06322      -2865.77       2865.77       24732.8       27598.6    
  32  0.716125     -0.333901      -312.379       312.379       23480.0       23792.4    
  33  0.757897     -0.277208      -259.340       259.340       24626.5       24885.9    
  34  0.765628     -0.267059      -249.845       249.845       24940.8       25190.6    
  35  0.323816      -1.12758      -1054.90       1054.90       24932.5       25987.4    
  36  0.909845     -0.944807E-01  -88.3909       88.3909       23762.8       23851.2    
  37  0.515782     -0.662071      -619.396       619.396       24959.5       25578.9    
  38  0.464370     -0.767074      -717.631       717.631       24100.2       24817.9    
  39  0.445707     -0.808094      -756.008       756.008       24099.8       24855.8    
  40  0.786320     -0.240391      -224.897       224.897       24472.4       24697.3    
  41  0.631860     -0.459087      -429.496       429.496       23850.4       24279.9    
  42  0.672488     -0.396772      -371.197       371.197       24118.2       24489.4    
  43  0.251717E-02  -5.98462      -5598.87       5598.87       24799.6       30398.5    
  44  0.245023      -1.40640      -1315.75       1315.75       25038.7       26354.5    
  45  0.252688      -1.37560      -1286.93       1286.93       24467.3       25754.3    
  46  0.268946      -1.31324      -1228.60       1228.60       25131.3       26359.9    
  47  0.550357     -0.597189      -558.696       558.696       25138.6       25697.3    
  48  0.826205     -0.190912      -178.607       178.607       26352.1       26530.7    
  49  0.964276     -0.363780E-01  -34.0332       34.0332       24619.4       24653.5    
  50  0.415479     -0.878324      -821.710       821.710       25196.5       26018.2    
  51  0.599143E-01  -2.81484      -2633.41       2633.41       24879.4       27512.8    
  52  0.348555      -1.05396      -986.024       986.024       24693.2       25679.2    
  53  0.243819      -1.41133      -1320.36       1320.36       22936.8       24257.1    
loop,thermsimp(1:2)        7   1245.20       853.013    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214      23459.60          0.90          1.17         21.88          0.18          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23459.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:        7
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:        8
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      212     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -2101.31       2101.31       21067.9       23169.2    
   2  0.476819     -0.740619      -692.882       692.882       21294.9       21987.8    
   3  0.564430     -0.571938      -535.073       535.073       21805.4       22340.5    
   4  0.211741      -1.55239      -1452.33       1452.33       22921.6       24373.9    
   5  0.154226E-01  -4.17192      -3903.01       3903.01       23367.0       27270.0    
   6  0.489577     -0.714213      -668.177       668.177       23294.8       23963.0    
   7  0.583965     -0.537914      -503.242       503.242       23485.1       23988.4    
   8  0.430258     -0.843370      -789.009       789.009       23617.5       24406.5    
   9  0.280982      -1.26946      -1187.64       1187.64       23480.0       24667.7    
  10  0.535183     -0.625146      -584.852       584.852       22894.9       23479.7    
  11  0.306750      -1.18172      -1105.55       1105.55       23343.7       24449.3    
  12  0.924930     -0.780370E-01  -73.0070       73.0070       23762.8       23835.9    
  13  0.829670E-01  -2.48931      -2328.86       2328.86       23866.1       26194.9    
  14  0.330275      -1.10783      -1036.42       1036.42       23830.3       24866.7    
  15  0.229751      -1.47076      -1375.96       1375.96       23988.5       25364.4    
  16  0.455737     -0.785839      -735.187       735.187       23989.8       24724.9    
  17  0.830949     -0.185187      -173.251       173.251       23900.1       24073.3    
  18  0.148624      -1.90634      -1783.46       1783.46       23905.3       25688.8    
  19  0.883001     -0.124429      -116.409       116.409       22554.5       22670.9    
  20  0.668001     -0.403466      -377.460       377.460       24174.3       24551.8    
  21  0.610583     -0.493341      -461.542       461.542       22936.8       23398.3    
  22  0.689050     -0.372441      -348.435       348.435       23850.4       24198.9    
  23  0.124417      -2.08412      -1949.78       1949.78       24067.1       26016.9    
  24  0.785584E-01  -2.54391      -2379.94       2379.94       24118.2       26498.2    
  25  0.936565     -0.655366E-01  -61.3123       61.3123       23864.0       23925.3    
  26  0.483719     -0.726252      -679.440       679.440       24527.3       25206.7    
  27  0.715685     -0.334515      -312.954       312.954       24619.4       24932.4    
  28  0.786437     -0.240243      -224.758       224.758       24472.4       24697.2    
  29  0.361023      -1.01881      -953.145       953.145       23924.6       24877.7    
  30  0.325559      -1.12221      -1049.88       1049.88       23736.4       24786.3    
  31  0.850460     -0.161978      -151.537       151.537       24100.2       24251.8    
  32  0.301358      -1.19946      -1122.14       1122.14       24099.8       25221.9    
  33  0.304725      -1.18834      -1111.75       1111.75       24626.5       25738.3    
  34  0.887065     -0.119838      -112.113       112.113       23462.2       23574.3    
  35  0.762822     -0.270730      -253.280       253.280       23903.8       24157.1    
  36  0.364130      -1.01024      -945.128       945.128       24940.8       25885.9    
  37  0.762041     -0.271754      -254.238       254.238       24610.1       24864.3    
  38  0.941180     -0.606207E-01  -56.7133       56.7133       24028.8       24085.6    
  39  0.449403     -0.799835      -748.280       748.280       24959.5       25707.8    
  40  0.743855     -0.295910      -276.836       276.836       24693.2       24970.0    
  41  0.743104     -0.296920      -277.781       277.781       25138.6       25416.3    
  42  0.350527      -1.04832      -980.746       980.746       24467.3       25448.1    
  43  0.607240     -0.498831      -466.678       466.678       24689.2       25155.9    
  44  0.557347     -0.584567      -546.888       546.888       24932.5       25479.4    
  45  0.217970      -1.52340      -1425.20       1425.20       25196.5       26621.7    
  46  0.364570      -1.00904      -943.997       943.997       25038.7       25982.7    
  47  0.330900      -1.10594      -1034.65       1034.65       25131.3       26166.0    
  48  0.861127     -0.149514      -139.877       139.877       23850.4       23990.3    
  49  0.710764E-01  -2.64400      -2473.58       2473.58       26352.1       28825.7    
  50  0.264543      -1.32975      -1244.04       1244.04       24266.3       25510.4    
  51  0.985836     -0.142654E-01  -13.3459       13.3459       24879.4       24892.8    
  52  0.296563      -1.21550      -1137.15       1137.15       24732.8       25869.9    
  53  0.875112     -0.133403      -124.804       124.804       23459.6       23584.4    
loop,thermsimp(1:2)        8   2101.31       692.882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215      22703.90          0.91          1.18         21.84          0.22          0.04         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  22703.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:        8
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:        9
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      213     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -415.445       415.445       21294.9       21710.4    
   2  0.805197     -0.216668      -202.702       202.702       21805.4       22008.1    
   3  0.976428     -0.238543E-01  -22.3167       22.3167       22554.5       22576.8    
   4  0.599028     -0.512447      -479.417       479.417       21067.9       21547.3    
   5  0.591081     -0.525802      -491.911       491.911       22936.8       23428.7    
   6  0.151500      -1.88717      -1765.53       1765.53       22894.9       24660.4    
   7  0.565682     -0.569723      -533.000       533.000       23462.2       23995.2    
   8  0.345258      -1.06346      -994.916       994.916       23459.6       24454.5    
   9  0.658101     -0.418397      -391.429       391.429       23762.8       24154.3    
  10  0.691977E-01  -2.67079      -2498.64       2498.64       23864.0       26362.6    
  11  0.289062      -1.24111      -1161.12       1161.12       23294.8       24455.9    
  12  0.949819     -0.514835E-01  -48.1651       48.1651       23485.1       23533.3    
  13  0.791632     -0.233658      -218.597       218.597       23850.4       24069.0    
  14  0.400532     -0.914962      -855.987       855.987       23900.1       24756.0    
  15  0.241886      -1.41929      -1327.81       1327.81       24028.8       25356.6    
  16  0.383016     -0.959678      -897.821       897.821       23903.8       24801.7    
  17  0.993978     -0.604041E-02  -5.65106       5.65106       23850.4       23856.1    
  18  0.807089     -0.214322      -200.507       200.507       24100.2       24300.7    
  19  0.732161     -0.311755      -291.660       291.660       22921.6       23213.2    
  20  0.176507      -1.73440      -1622.60       1622.60       23617.5       25240.1    
  21  0.628098     -0.465059      -435.083       435.083       23343.7       23778.8    
  22  0.383392     -0.958697      -896.903       896.903       24174.3       25071.2    
  23  0.906421     -0.982517E-01  -91.9188       91.9188       23480.0       23571.9    
  24  0.329288      -1.11082      -1039.22       1039.22       24472.4       25511.6    
  25  0.869436     -0.139911      -130.893       130.893       23989.8       24120.7    
  26  0.354994      -1.03565      -968.899       968.899       23736.4       24705.3    
  27  0.127935      -2.05623      -1923.70       1923.70       24610.1       26533.8    
  28  0.840123     -0.174207      -162.978       162.978       23830.3       23993.3    
  29  0.625861     -0.468627      -438.421       438.421       23924.6       24363.0    
  30  0.488384     -0.716653      -670.460       670.460       24879.4       25549.9    
  31  0.888226E-01  -2.42111      -2265.06       2265.06       24619.4       26884.5    
  32  0.262955      -1.33577      -1249.67       1249.67       24693.2       25942.8    
  33  0.153205E-01  -4.17856      -3909.23       3909.23       24689.2       28598.5    
  34  0.432355     -0.838509      -784.462       784.462       24527.3       25311.7    
  35  0.225273      -1.49044      -1394.37       1394.37       24099.8       25494.2    
  36  0.812147     -0.208074      -194.663       194.663       23988.5       24183.1    
  37  0.832805E-01  -2.48554      -2325.33       2325.33       25138.6       27463.9    
  38  0.442280     -0.815813      -763.228       763.228       24467.3       25230.6    
  39  0.106639      -2.23831      -2094.04       2094.04       24932.5       27026.5    
  40  0.143053      -1.94454      -1819.20       1819.20       24266.3       26085.5    
  41  0.871774     -0.137225      -128.380       128.380       23905.3       24033.7    
  42  0.137692      -1.98273      -1854.93       1854.93       24959.5       26814.4    
  43  0.366512      -1.00372      -939.028       939.028       24626.5       25565.6    
  44  0.617157     -0.482633      -451.524       451.524       24732.8       25184.3    
  45  0.420337     -0.866700      -810.835       810.835       24940.8       25751.6    
  46  0.935846     -0.663044E-01  -62.0307       62.0307       25038.7       25100.8    
  47  0.979912     -0.202925E-01  -18.9845       18.9845       24067.1       24086.1    
  48  0.692793     -0.367024      -343.367       343.367       25131.3       25474.7    
  49  0.155424      -1.86160      -1741.61       1741.61       23866.1       25607.7    
  50  0.703218     -0.352088      -329.394       329.394       24118.2       24447.6    
  51  0.396734     -0.924489      -864.900       864.900       25196.5       26061.4    
  52  0.247863      -1.39488      -1304.97       1304.97       23367.0       24671.9    
  53  0.176690      -1.73336      -1621.63       1621.63       22703.9       24325.5    
loop,thermsimp(1:2)        9   415.445       202.702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216      23752.77          0.90          1.18         21.80          0.28          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23752.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:        9
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       10
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      214     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -170.760       170.760       21067.9       21238.7    
   2  0.367543      -1.00091      -936.399       936.399       21294.9       22231.3    
   3  0.528755     -0.637231      -596.157       596.157       21805.4       22401.6    
   4  0.776829     -0.252535      -236.258       236.258       22554.5       22790.7    
   5  0.149594E-01  -4.20242      -3931.54       3931.54       22921.6       26853.1    
   6  0.892228     -0.114033      -106.683       106.683       22936.8       23043.5    
   7  0.191037      -1.65529      -1548.59       1548.59       23485.1       25033.7    
   8  0.516533     -0.660616      -618.035       618.035       23480.0       24098.0    
   9  0.273230      -1.29744      -1213.81       1213.81       23343.7       24557.6    
  10  0.822225     -0.195741      -183.124       183.124       23850.4       24033.6    
  11  0.359850      -1.02207      -956.189       956.189       23830.3       24786.5    
  12  0.611658     -0.491581      -459.896       459.896       23462.2       23922.1    
  13  0.249481      -1.38837      -1298.88       1298.88       23905.3       25204.2    
  14  0.441252     -0.818139      -765.405       765.405       23850.4       24615.8    
  15  0.910514E-01  -2.39633      -2241.87       2241.87       24067.1       26309.0    
  16  0.745146     -0.294175      -275.214       275.214       23989.8       24265.0    
  17  0.758301     -0.276675      -258.842       258.842       23762.8       24021.7    
  18  0.638521     -0.448601      -419.686       419.686       23988.5       24408.2    
  19  0.150180      -1.89592      -1773.72       1773.72       24100.2       25874.0    
  20  0.144147      -1.93692      -1812.08       1812.08       22703.9       24516.0    
  21  0.104928      -2.25448      -2109.16       2109.16       23924.6       26033.7    
  22  0.398120     -0.921002      -861.638       861.638       24118.2       24979.8    
  23  0.802258     -0.220325      -206.124       206.124       23459.6       23665.7    
  24  0.399299     -0.918044      -858.870       858.870       23294.8       24153.7    
  25  0.493060     -0.707124      -661.545       661.545       22894.9       23556.4    
  26  0.504407     -0.684372      -640.260       640.260       23367.0       24007.2    
  27  0.762058     -0.271733      -254.218       254.218       23736.4       23990.6    
  28  0.430267     -0.843350      -788.991       788.991       23900.1       24689.1    
  29  0.993832     -0.618725E-02  -5.78844       5.78844       23903.8       23909.6    
  30  0.705390     -0.349005      -326.509       326.509       24174.3       24500.8    
  31  0.969760     -0.307069E-01  -28.7276       28.7276       25038.7       25067.5    
  32  0.245618      -1.40398      -1313.48       1313.48       24732.8       26046.3    
  33  0.685790     -0.377184      -352.872       352.872       24467.3       24820.2    
  34  0.905089     -0.997222E-01  -93.2944       93.2944       23617.5       23710.7    
  35  0.414065     -0.881732      -824.899       824.899       24527.3       25352.2    
  36  0.714747E-01  -2.63841      -2468.35       2468.35       24028.8       26497.2    
  37  0.694510     -0.364548      -341.051       341.051       25131.3       25472.4    
  38  0.770213E-01  -2.56367      -2398.43       2398.43       24099.8       26498.2    
  39  0.846173     -0.167031      -156.265       156.265       24472.4       24628.7    
  40  0.485012     -0.723582      -676.943       676.943       24879.4       25556.4    
  41  0.345787      -1.06193      -993.485       993.485       24626.5       25620.0    
  42  0.851861     -0.160332      -149.997       149.997       23866.1       24016.1    
  43  0.774151     -0.255989      -239.489       239.489       24940.8       25180.3    
  44  0.512382     -0.668685      -625.584       625.584       24693.2       25318.8    
  45  0.839798     -0.174594      -163.341       163.341       25196.5       25359.8    
  46  0.430550     -0.842692      -788.375       788.375       24266.3       25054.7    
  47  0.988263     -0.118067E-01  -11.0457       11.0457       23864.0       23875.0    
  48  0.349495      -1.05127      -983.505       983.505       24610.1       25593.6    
  49  0.290701      -1.23546      -1155.83       1155.83       24959.5       26115.3    
  50  0.210466      -1.55843      -1457.98       1457.98       24619.4       26077.4    
  51  0.361038      -1.01877      -953.105       953.105       24932.5       25885.6    
  52  0.168890      -1.77851      -1663.87       1663.87       25138.6       26802.4    
  53  0.176000      -1.73727      -1625.29       1625.29       23752.8       25378.1    
loop,thermsimp(1:2)       10   170.760       936.399    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217      27178.92          0.91          1.21         21.73          0.45          0.04         24.35
Just calling func    0   0         24.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  27178.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       10
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       11
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      215     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -78.6208       78.6208       21067.9       21146.5    
   2  0.309089      -1.17413      -1098.45       1098.45       21294.9       22393.4    
   3  0.237901      -1.43590      -1343.35       1343.35       21805.4       23148.8    
   4  0.542467     -0.611627      -572.204       572.204       22554.5       23126.7    
   5  0.523672     -0.646889      -605.193       605.193       22936.8       23542.0    
   6  0.850058     -0.162450      -151.979       151.979       22894.9       23046.8    
   7  0.589343     -0.528746      -494.665       494.665       23459.6       23954.3    
   8  0.979269     -0.209490E-01  -19.5987       19.5987       23617.5       23637.1    
   9  0.110419      -2.20347      -2061.45       2061.45       23864.0       25925.4    
  10  0.557914     -0.583550      -545.936       545.936       23903.8       24449.8    
  11  0.474464     -0.745569      -697.512       697.512       23462.2       24159.7    
  12  0.312482      -1.16321      -1088.23       1088.23       23736.4       24824.7    
  13  0.297011      -1.21399      -1135.74       1135.74       23367.0       24502.7    
  14  0.857571     -0.153651      -143.748       143.748       23866.1       24009.8    
  15  0.792567     -0.232479      -217.494       217.494       23762.8       23980.3    
  16  0.963006     -0.376958E-01  -35.2661       35.2661       23850.4       23885.7    
  17  0.294103      -1.22382      -1144.94       1144.94       23480.0       24625.0    
  18  0.403484     -0.907618      -849.116       849.116       23294.8       24143.9    
  19  0.449313     -0.800035      -748.468       748.468       23989.8       24738.2    
  20  0.721912     -0.325852      -304.849       304.849       23988.5       24293.3    
  21  0.512488     -0.668479      -625.391       625.391       24174.3       24799.7    
  22  0.885190     -0.121953      -114.092       114.092       22703.9       22818.0    
  23  0.694751E-01  -2.66679      -2494.90       2494.90       23343.7       25838.6    
  24  0.820879     -0.197380      -184.657       184.657       23850.4       24035.0    
  25  0.211527      -1.55340      -1453.28       1453.28       24472.4       25925.7    
  26  0.937420     -0.646236E-01  -60.4582       60.4582       23900.1       23960.5    
  27  0.515756E-01  -2.96471      -2773.61       2773.61       23830.3       26603.9    
  28  0.695222     -0.363525      -340.093       340.093       24467.3       24807.4    
  29  0.718776     -0.330205      -308.921       308.921       24118.2       24427.1    
  30  0.536080     -0.623471      -583.284       583.284       23485.1       24068.4    
  31  0.585855     -0.534682      -500.219       500.219       24266.3       24766.5    
  32  0.693572     -0.365900      -342.316       342.316       25038.7       25381.0    
  33  0.700823     -0.355500      -332.585       332.585       24940.8       25273.4    
  34  0.250985      -1.38236      -1293.26       1293.26       23905.3       25198.6    
  35  0.290600      -1.23581      -1156.15       1156.15       24693.2       25849.3    
  36  0.828609     -0.188007      -175.889       175.889       24527.3       24703.2    
  37  0.225820      -1.48802      -1392.11       1392.11       25196.5       26588.6    
  38  0.999674     -0.326354E-03 -0.305318      0.305318       23752.8       23753.1    
  39  0.878216     -0.129862      -121.492       121.492       25131.3       25252.8    
  40  0.685898E-01  -2.67961      -2506.89       2506.89       24879.4       27386.3    
  41  0.273860      -1.29514      -1211.66       1211.66       24610.1       25821.8    
  42  0.697655     -0.360030      -336.824       336.824       24626.5       24963.4    
  43  0.293168      -1.22701      -1147.92       1147.92       24100.2       25248.2    
  44  0.319476      -1.14107      -1067.52       1067.52       24932.5       26000.0    
  45  0.874681     -0.133896      -125.266       125.266       23924.6       24049.8    
  46  0.408697     -0.894781      -837.106       837.106       24732.8       25569.9    
  47  0.142130E-01  -4.25360      -3979.43       3979.43       24619.4       28598.9    
  48  0.164528      -1.80468      -1688.35       1688.35       24959.5       26647.8    
  49  0.652669     -0.426685      -399.182       399.182       24067.1       24466.3    
  50  0.492107     -0.709060      -663.357       663.357       24028.8       24692.2    
  51  0.542705     -0.611189      -571.794       571.794       24099.8       24671.6    
  52  0.798603     -0.224891      -210.396       210.396       25138.6       25349.0    
  53  0.474092E-01  -3.04894      -2852.42       2852.42       27178.9       30031.3    
loop,thermsimp(1:2)       11   78.6208       1098.45    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218      22921.58          0.90          1.16         21.80          0.23          0.04         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219      52325.98          0.91          1.13         21.61          0.44          0.04         24.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  22921.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       11
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       12
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      217     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -253.224       253.224       21067.9       21321.1    
   2  0.482922E-01  -3.03048      -2835.15       2835.15       21294.9       24130.1    
   3  0.612960     -0.489456      -457.908       457.908       22703.9       23161.8    
   4  0.910127     -0.941714E-01  -88.1015       88.1015       22894.9       22983.0    
   5  0.362433      -1.01492      -949.499       949.499       22554.5       23504.0    
   6  0.476779     -0.740702      -692.959       692.959       21805.4       22498.4    
   7  0.179006E-01  -4.02292      -3763.62       3763.62       22936.8       26700.4    
   8  0.589646     -0.528233      -494.185       494.185       23617.5       24111.6    
   9  0.926206     -0.766581E-01  -71.7170       71.7170       23752.8       23824.5    
  10  0.492629     -0.707999      -662.364       662.364       23850.4       24512.8    
  11  0.661123     -0.413815      -387.142       387.142       23459.6       23846.7    
  12  0.542248     -0.612032      -572.582       572.582       23900.1       24472.6    
  13  0.216527      -1.53004      -1431.42       1431.42       23762.8       25194.3    
  14  0.549832     -0.598143      -559.589       559.589       23866.1       24425.7    
  15  0.429556     -0.845003      -790.537       790.537       23850.4       24640.9    
  16  0.264838      -1.32864      -1243.00       1243.00       23924.6       25167.6    
  17  0.251706      -1.37949      -1290.58       1290.58       23485.1       24775.7    
  18  0.701724     -0.354215      -331.383       331.383       23294.8       23626.2    
  19  0.324289      -1.12612      -1053.53       1053.53       23462.2       24515.7    
  20  0.160749E-02  -6.43308      -6018.43       6018.43       23988.5       30006.9    
  21  0.533627     -0.628058      -587.576       587.576       24118.2       24705.8    
  22  0.883065     -0.124357      -116.341       116.341       23903.8       24020.2    
  23  0.484824     -0.723969      -677.304       677.304       24067.1       24744.4    
  24  0.724157     -0.322747      -301.944       301.944       23367.0       23668.9    
  25  0.847375     -0.165612      -154.938       154.938       23480.0       23635.0    
  26  0.167586      -1.78626      -1671.12       1671.12       24099.8       25770.9    
  27  0.890079     -0.116445      -108.939       108.939       24028.8       24137.8    
  28  0.235223      -1.44722      -1353.94       1353.94       24527.3       25881.2    
  29  0.206112      -1.57934      -1477.54       1477.54       23989.8       25467.3    
  30  0.463385     -0.769198      -719.618       719.618       24266.3       24985.9    
  31  0.487880E-01  -3.02027      -2825.59       2825.59       24174.3       26999.9    
  32  0.244157      -1.40994      -1319.06       1319.06       24467.3       25786.4    
  33  0.770602     -0.260583      -243.787       243.787       23736.4       23980.2    
  34  0.264159      -1.33120      -1245.40       1245.40       24626.5       25871.9    
  35  0.189030E-01  -3.96843      -3712.64       3712.64       23905.3       27618.0    
  36  0.635342     -0.453592      -424.355       424.355       24100.2       24524.6    
  37  0.139550      -1.96933      -1842.39       1842.39       25131.3       26973.7    
  38  0.561566     -0.577026      -539.833       539.833       24940.8       25480.6    
  39  0.951789     -0.494118E-01  -46.2269       46.2269       25138.6       25184.8    
  40  0.527693     -0.639242      -598.038       598.038       25038.7       25636.8    
  41  0.925337     -0.775972E-01  -72.5956       72.5956       24732.8       24805.4    
  42  0.795352     -0.228971      -214.212       214.212       24610.1       24824.3    
  43  0.530799     -0.633371      -592.547       592.547       23343.7       23936.3    
  44  0.642763     -0.441979      -413.491       413.491       24693.2       25106.7    
  45  0.485146     -0.723305      -676.684       676.684       23864.0       24540.6    
  46  0.795896     -0.228287      -213.573       213.573       24472.4       24686.0    
  47  0.519140     -0.655581      -613.325       613.325       24932.5       25545.8    
  48  0.694073E-01  -2.66776      -2495.81       2495.81       25196.5       27692.3    
  49  0.401486     -0.912583      -853.761       853.761       23830.3       24684.0    
  50  0.587982E-01  -2.83364      -2651.00       2651.00       24959.5       27610.5    
  51  0.752652     -0.284152      -265.836       265.836       24879.4       25145.3    
  52  0.139929      -1.96662      -1839.86       1839.86       24619.4       26459.3    
  53  0.136759      -1.98953      -1861.29       1861.29       22921.6       24782.9    
loop,thermsimp(1:2)       12   253.224       2835.15    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220      24207.61          0.91          1.18         21.75          0.38          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221      23928.25          0.91          1.18         21.75          0.31          0.04         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23928.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       12
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       13
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      219     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -489.181       489.181       21067.9       21557.1    
   2  0.691791     -0.368472      -344.721       344.721       21805.4       22150.1    
   3  0.688173     -0.373715      -349.627       349.627       22894.9       23244.5    
   4  0.439966     -0.821058      -768.135       768.135       22703.9       23472.0    
   5  0.945690     -0.558403E-01  -52.2410       52.2410       22554.5       22606.7    
   6  0.238956      -1.43147      -1339.21       1339.21       23294.8       24634.0    
   7  0.280830E-01  -3.57259      -3342.31       3342.31       23480.0       26822.3    
   8  0.902031E-01  -2.40569      -2250.63       2250.63       23367.0       25617.6    
   9  0.198361      -1.61767      -1513.40       1513.40       23752.8       25266.2    
  10  0.201288      -1.60302      -1499.69       1499.69       23459.6       24959.3    
  11  0.710033     -0.342444      -320.371       320.371       23343.7       23664.1    
  12  0.182913      -1.69874      -1589.25       1589.25       23736.4       25325.7    
  13  0.817316     -0.201730      -188.727       188.727       23903.8       24092.6    
  14  0.894732     -0.111231      -104.061       104.061       23617.5       23721.5    
  15  0.854000     -0.157824      -147.651       147.651       21294.9       21442.6    
  16  0.248066      -1.39406      -1304.21       1304.21       24028.8       25333.0    
  17  0.670877     -0.399170      -373.441       373.441       23866.1       24239.5    
  18  0.701473     -0.354573      -331.718       331.718       23900.1       24231.8    
  19  0.199467      -1.61210      -1508.19       1508.19       23850.4       25358.6    
  20  0.391533     -0.937685      -877.245       877.245       23462.2       24339.4    
  21  0.586761     -0.533138      -498.773       498.773       24100.2       24599.0    
  22  0.163799      -1.80912      -1692.51       1692.51       23864.0       25556.5    
  23  0.955964     -0.450353E-01  -42.1325       42.1325       23850.4       23892.5    
  24  0.365727      -1.00587      -941.033       941.033       23830.3       24771.3    
  25  0.733577     -0.309822      -289.852       289.852       24472.4       24762.2    
  26  0.111597      -2.19286      -2051.52       2051.52       24118.2       26169.7    
  27  0.714895     -0.335619      -313.986       313.986       24067.1       24381.1    
  28  0.816688     -0.202498      -189.446       189.446       23485.1       23674.6    
  29  0.480603     -0.732714      -685.486       685.486       22921.6       23607.1    
  30  0.573891     -0.555316      -519.522       519.522       24732.8       25252.3    
  31  0.204452      -1.58742      -1485.10       1485.10       24610.1       26095.2    
  32  0.845356E-01  -2.47058      -2311.34       2311.34       24266.3       26577.7    
  33  0.524789E-01  -2.94734      -2757.37       2757.37       24693.2       27450.5    
  34  0.631781     -0.459213      -429.614       429.614       24879.4       25309.0    
  35  0.620363     -0.477450      -446.675       446.675       23924.6       24371.3    
  36  0.553551     -0.591402      -553.282       553.282       25138.6       25691.8    
  37  0.546271     -0.604640      -565.667       565.667       23762.8       24328.5    
  38  0.402204     -0.910797      -852.090       852.090       23989.8       24841.9    
  39  0.735174     -0.307648      -287.818       287.818       24940.8       25228.6    
  40  0.359565      -1.02286      -956.930       956.930       24932.5       25889.4    
  41  0.564111     -0.572504      -535.603       535.603       25038.7       25574.3    
  42  0.412661     -0.885128      -828.076       828.076       24099.8       24927.9    
  43  0.795853     -0.228341      -213.623       213.623       24467.3       24681.0    
  44  0.909991E-01  -2.39691      -2242.41       2242.41       24626.5       26869.0    
  45  0.830687     -0.185502      -173.545       173.545       24527.3       24700.8    
  46  0.592588     -0.523256      -489.529       489.529       24619.4       25109.0    
  47  0.489472     -0.714427      -668.378       668.378       22936.8       23605.2    
  48  0.992056     -0.797586E-02  -7.46176       7.46176       25131.3       25138.8    
  49  0.808208     -0.212936      -199.211       199.211       24174.3       24373.5    
  50  0.212569      -1.54849      -1448.68       1448.68       24959.5       26408.2    
  51  0.214041      -1.54159      -1442.22       1442.22       23905.3       25347.5    
  52  0.586527     -0.533536      -499.146       499.146       25196.5       25695.7    
  53  0.603460     -0.505075      -472.520       472.520       23928.3       24400.8    
loop,thermsimp(1:2)       13   489.181       344.721    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222      23334.95          0.90          1.17         21.89          0.19          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    23335.        2.257     -2.441      5.080     -102.6     0.2780    
                      0.2598      2.431     -99.70      3.203    -0.1529    

                       3.037     -2.909      1.540      7000.      7000.    

                      -1.944      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -10.34     -6.867     -7.727      4.433    

                      -13.97     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3538E-01 0.3620    -0.3286E-01 0.4385    

                     -0.2486     0.1429     0.1428    -0.5195E-02 0.6292E-01



                     -0.3127    -0.2132      0.000     0.1998    -0.4866E-01

                      0.6675E-01 0.9687E-01-0.7116    -0.2845E-01 0.3370    

                     -0.6307E-01 0.1216    -0.5211     -1.575      7000.    



                     -0.9994     -1.094     -2.142     -1.982    -0.3807    

                     -0.3252      9.630      8.576    -0.1672E+05 -6.000    

                      0.5040E-01 -1.902      8.569      8.980    -0.1969E+05



                      -6.000     0.9012    -0.4845      8.855      8.700    

                     -0.1944E+05 -6.000    -0.3907    -0.6130      9.792    

                       8.502    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23334.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       13
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       14
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      220     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -1012.08       1012.08       21294.9       22307.0    
   2  0.649641     -0.431335      -403.533       403.533       21067.9       21471.4    
   3  0.930116     -0.724456E-01  -67.7760       67.7760       21805.4       21873.2    
   4  0.297326      -1.21293      -1134.75       1134.75       22554.5       23689.2    
   5  0.751734     -0.285373      -266.978       266.978       22894.9       23161.8    
   6  0.409056     -0.893902      -836.285       836.285       22703.9       23540.2    
   7  0.115094      -2.16201      -2022.65       2022.65       22936.8       24959.4    
   8  0.606681     -0.499753      -467.540       467.540       22921.6       23389.1    
   9  0.140571      -1.96204      -1835.58       1835.58       23343.7       25179.3    
  10  0.447669E-01  -3.10629      -2906.07       2906.07       23485.1       26391.2    
  11  0.517394     -0.658951      -616.477       616.477       23617.5       24233.9    
  12  0.587057     -0.532633      -498.302       498.302       23850.4       24348.7    
  13  0.384993E-01  -3.25712      -3047.17       3047.17       23903.8       26951.0    
  14  0.829105E-01  -2.48999      -2329.50       2329.50       23900.1       26229.6    
  15  0.382179     -0.961866      -899.868       899.868       23866.1       24765.9    
  16  0.269516      -1.31113      -1226.62       1226.62       23762.8       24989.5    
  17  0.879580     -0.128311      -120.040       120.040       23462.2       23582.2    
  18  0.760503E-01  -2.57636      -2410.30       2410.30       23924.6       26334.9    
  19  0.482544     -0.728684      -681.715       681.715       24174.3       24856.1    
  20  0.561499     -0.577145      -539.945       539.945       24067.1       24607.0    
  21  0.254621      -1.36798      -1279.80       1279.80       23928.3       25208.1    
  22  0.479261     -0.735511      -688.102       688.102       24100.2       24788.3    
  23  0.638455     -0.448704      -419.782       419.782       23294.8       23714.6    
  24  0.289082      -1.24105      -1161.05       1161.05       24467.3       25628.4    
  25  0.656024     -0.421558      -394.386       394.386       24527.3       24921.7    
  26  0.597431     -0.515117      -481.914       481.914       24472.4       24954.3    
  27  0.859562     -0.151333      -141.579       141.579       23830.3       23971.9    
  28  0.554826     -0.589100      -551.129       551.129       23989.8       24540.9    
  29  0.128413      -2.05250      -1920.21       1920.21       24099.8       26020.0    
  30  0.311170      -1.16742      -1092.17       1092.17       23459.6       24551.8    
  31  0.606679     -0.499755      -467.543       467.543       24619.4       25087.0    
  32  0.923238     -0.798686E-01  -74.7205       74.7205       25131.3       25206.0    
  33  0.734154     -0.309037      -289.118       289.118       24940.8       25229.9    
  34  0.988670     -0.113947E-01  -10.6603       10.6603       24732.8       24743.4    
  35  0.136308      -1.99284      -1864.39       1864.39       23752.8       25617.2    
  36  0.345839      -1.06178      -993.345       993.345       24879.4       25872.8    
  37  0.349440      -1.05142      -983.653       983.653       23736.4       24720.1    
  38  0.625658E-01  -2.77154      -2592.89       2592.89       24028.8       26621.7    
  39  0.394804     -0.929365      -869.461       869.461       23905.3       24774.8    
  40  0.899667E-02  -4.71090      -4407.25       4407.25       23850.4       28257.7    
  41  0.823946     -0.193651      -181.169       181.169       23864.0       24045.1    
  42  0.834235     -0.181240      -169.558       169.558       25038.7       25208.3    
  43  0.777534     -0.251627      -235.408       235.408       23367.0       23602.4    
  44  0.384993     -0.954531      -893.005       893.005       25138.6       26031.6    
  45  0.247443E-01  -3.69916      -3460.73       3460.73       25196.5       28657.2    
  46  0.810695     -0.209863      -196.336       196.336       24932.5       25128.8    
  47  0.893618     -0.112477      -105.227       105.227       24610.1       24715.3    
  48  0.545617     -0.605837      -566.787       566.787       24118.2       24685.0    
  49  0.587193     -0.532402      -498.086       498.086       24959.5       25457.6    
  50  0.991207     -0.883185E-02  -8.26259       8.26259       24266.3       24274.6    
  51  0.477440     -0.739316      -691.663       691.663       23480.0       24171.7    
  52  0.444858     -0.810000      -757.790       757.790       24626.5       25384.3    
  53  0.103440      -2.26876      -2122.53       2122.53       23335.0       25457.5    
loop,thermsimp(1:2)       14   1012.08       403.533    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223      23137.03          0.89          1.19         21.86          0.32          0.04         24.31
Just calling func    0   0         24.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23137.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       14
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       15
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      221     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -1417.71       1417.71       21067.9       22485.6    
   2  0.894567E-01  -2.41400      -2258.40       2258.40       21805.4       24063.8    
   3  0.863615     -0.146628      -137.177       137.177       21294.9       21432.1    
   4  0.807990     -0.213206      -199.463       199.463       22894.9       23094.3    
   5  0.318173      -1.14516      -1071.35       1071.35       22921.6       23992.9    
   6  0.464606     -0.766566      -717.156       717.156       22703.9       23421.1    
   7  0.574933     -0.553501      -517.824       517.824       23462.2       23980.0    
   8  0.974939     -0.253802E-01  -23.7443       23.7443       23367.0       23390.7    
   9  0.415757     -0.877653      -821.083       821.083       22554.5       23375.6    
  10  0.187109      -1.67606      -1568.03       1568.03       23294.8       24862.8    
  11  0.730515E-01  -2.61659      -2447.93       2447.93       23830.3       26278.2    
  12  0.209185      -1.56454      -1463.69       1463.69       23864.0       25327.7    
  13  0.496690     -0.699790      -654.684       654.684       23480.0       24134.7    
  14  0.862986     -0.147356      -137.858       137.858       23617.5       23755.3    
  15  0.888200     -0.118558      -110.916       110.916       24266.3       24377.2    
  16  0.380888     -0.965250      -903.034       903.034       23850.4       24753.4    
  17  0.135305      -2.00022      -1871.29       1871.29       23989.8       25861.1    
  18  0.927079     -0.757167E-01  -70.8363       70.8363       23459.6       23530.4    
  19  0.603067     -0.505727      -473.129       473.129       24067.1       24540.2    
  20  0.136202      -1.99362      -1865.12       1865.12       24118.2       25983.3    
  21  0.954653     -0.464076E-01  -43.4163       43.4163       24610.1       24653.5    
  22  0.151192      -1.88920      -1767.43       1767.43       23736.4       25503.9    
  23  0.449259     -0.800155      -748.580       748.580       24732.8       25481.4    
  24  0.780874     -0.247341      -231.399       231.399       23866.1       24097.5    
  25  0.456238     -0.784740      -734.159       734.159       23905.3       24639.5    
  26  0.163284      -1.81227      -1695.45       1695.45       24100.2       25795.7    
  27  0.821444     -0.196692      -184.014       184.014       24174.3       24358.3    
  28  0.861448     -0.149141      -139.528       139.528       24527.3       24666.8    
  29  0.924167     -0.788621E-01  -73.7789       73.7789       24472.4       24546.2    
  30  0.195059      -1.63445      -1529.10       1529.10       22936.8       24465.9    
  31  0.375134     -0.980472      -917.275       917.275       23762.8       24680.1    
  32  0.909862     -0.944628E-01  -88.3741       88.3741       24619.4       24707.8    
  33  0.831459     -0.184574      -172.677       172.677       24932.5       25105.2    
  34  0.627278     -0.466365      -436.305       436.305       23343.7       23780.0    
  35  0.918890     -0.845891E-01  -79.1368       79.1368       25131.3       25210.4    
  36  0.475784     -0.742791      -694.913       694.913       23928.3       24623.2    
  37  0.344524      -1.06559      -996.908       996.908       25038.7       26035.6    
  38  0.286778      -1.24905      -1168.54       1168.54       24940.8       26109.3    
  39  0.336148      -1.09020      -1019.93       1019.93       24626.5       25646.5    
  40  0.709840     -0.342716      -320.626       320.626       23335.0       23655.6    
  41  0.219827      -1.51491      -1417.27       1417.27       24959.5       26376.8    
  42  0.347594      -1.05672      -988.608       988.608       23752.8       24741.4    
  43  0.905734     -0.990099E-01  -92.6281       92.6281       24467.3       24560.0    
  44  0.826231     -0.190881      -178.577       178.577       24879.4       25058.0    
  45  0.400277     -0.915599      -856.583       856.583       24099.8       24956.4    
  46  0.555153     -0.588512      -550.579       550.579       25138.6       25689.1    
  47  0.864397     -0.145723      -136.331       136.331       23900.1       24036.4    
  48  0.277380E-01  -3.58495      -3353.88       3353.88       23924.6       27278.5    
  49  0.993968     -0.605015E-02  -5.66018       5.66018       23485.1       23490.8    
  50  0.717076     -0.332573      -311.137       311.137       24028.8       24340.0    
  51  0.736253     -0.306182      -286.446       286.446       23903.8       24190.3    
  52  0.278813      -1.27722      -1194.89       1194.89       23850.4       25045.3    
  53  0.646460     -0.436245      -408.126       408.126       23137.0       23545.2    
loop,thermsimp(1:2)       15   1417.71       2258.40    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224      23372.08          0.91          1.19         21.75          0.36          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23372.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       15
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       16
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      222     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -1367.96       1367.96       21294.9       22662.9    
   2  0.641193     -0.444425      -415.779       415.779       21067.9       21483.7    
   3  0.353033      -1.04119      -974.083       974.083       22894.9       23868.9    
   4  0.928955     -0.736953E-01  -68.9452       68.9452       22554.5       22623.4    
   5  0.350257      -1.04909      -981.468       981.468       23367.0       24348.4    
   6  0.682617     -0.381821      -357.210       357.210       22703.9       23061.1    
   7  0.162763      -1.81546      -1698.44       1698.44       23485.1       25183.6    
   8  0.874032     -0.134639      -125.960       125.960       23459.6       23585.6    
   9  0.518909     -0.656027      -613.742       613.742       23137.0       23750.8    
  10  0.461984     -0.772226      -722.451       722.451       23335.0       24057.4    
  11  0.449468     -0.799691      -748.146       748.146       23617.5       24365.6    
  12  0.523281     -0.647637      -605.893       605.893       23343.7       23949.6    
  13  0.637377     -0.450394      -421.364       421.364       23462.2       23883.6    
  14  0.596329     -0.516963      -483.642       483.642       22921.6       23405.2    
  15  0.286246      -1.25090      -1170.27       1170.27       23900.1       25070.3    
  16  0.590425     -0.526913      -492.951       492.951       21805.4       22298.4    
  17  0.853637     -0.158249      -148.049       148.049       23866.1       24014.1    
  18  0.245572      -1.40416      -1313.66       1313.66       23480.0       24793.7    
  19  0.375654     -0.979088      -915.979       915.979       23903.8       24819.8    
  20  0.281654      -1.26708      -1185.40       1185.40       24028.8       25214.2    
  21  0.443392     -0.813302      -760.879       760.879       24174.3       24935.2    
  22  0.442934     -0.814335      -761.846       761.846       24266.3       25028.2    
  23  0.171790      -1.76149      -1647.95       1647.95       22936.8       24584.7    
  24  0.802582     -0.219921      -205.746       205.746       24067.1       24272.8    
  25  0.162733      -1.81564      -1698.61       1698.61       24472.4       26171.0    
  26  0.838320     -0.176355      -164.988       164.988       24467.3       24632.3    
  27  0.210754      -1.55706      -1456.70       1456.70       23928.3       25385.0    
  28  0.240377      -1.42554      -1333.66       1333.66       23905.3       25239.0    
  29  0.173042E-01  -4.05680      -3795.32       3795.32       24610.1       28405.4    
  30  0.640146     -0.446059      -417.307       417.307       24527.3       24944.6    
  31  0.749210     -0.288736      -270.125       270.125       23762.8       24033.0    
  32  0.666162     -0.406222      -380.039       380.039       24619.4       24999.5    
  33  0.601746     -0.507920      -475.181       475.181       23752.8       24227.9    
  34  0.677044     -0.390020      -364.880       364.880       23850.4       24215.3    
  35  0.290379      -1.23657      -1156.86       1156.86       23294.8       24451.7    
  36  0.439723     -0.821610      -768.652       768.652       24099.8       24868.4    
  37  0.680091     -0.385528      -360.678       360.678       23850.4       24211.1    
  38  0.803784     -0.218425      -204.346       204.346       24879.4       25083.8    
  39  0.507823     -0.677622      -633.945       633.945       24932.5       25566.4    
  40  0.894573     -0.111408      -104.227       104.227       25131.3       25235.5    
  41  0.826908     -0.190062      -177.811       177.811       23864.0       24041.8    
  42  0.815562     -0.203878      -190.737       190.737       24732.8       24923.5    
  43  0.352457      -1.04283      -975.611       975.611       23736.4       24712.0    
  44  0.104059      -2.26279      -2116.94       2116.94       24626.5       26743.5    
  45  0.601892     -0.507677      -474.954       474.954       25138.6       25613.5    
  46  0.988184     -0.118862E-01  -11.1200       11.1200       24100.2       24111.4    
  47  0.733912     -0.309366      -289.425       289.425       23989.8       24279.2    
  48  0.107394      -2.23125      -2087.43       2087.43       24118.2       26205.6    
  49  0.592150     -0.523995      -490.220       490.220       25038.7       25528.9    
  50  0.821901     -0.196136      -183.493       183.493       24940.8       25124.3    
  51  0.400070E-01  -3.21870      -3011.24       3011.24       23830.3       26841.5    
  52  0.271211      -1.30486      -1220.75       1220.75       24959.5       26180.2    
  53  0.296309      -1.21635      -1137.95       1137.95       23372.1       24510.0    
loop,thermsimp(1:2)       16   1367.96       415.779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225      23342.75          0.91          1.19         21.79          0.32          0.04         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23342.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       16
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       17
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      223     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -236.156       236.156       21067.9       21304.1    
   2  0.350417      -1.04863      -981.040       981.040       21805.4       22786.4    
   3  0.533846     -0.627648      -587.192       587.192       22554.5       23141.7    
   4  0.622955     -0.473280      -442.774       442.774       21294.9       21737.7    
   5  0.661091E-01  -2.71645      -2541.36       2541.36       22703.9       25245.3    
   6  0.759206     -0.275482      -257.725       257.725       22921.6       23179.3    
   7  0.430535     -0.842727      -788.408       788.408       23459.6       24248.0    
   8  0.257678      -1.35604      -1268.64       1268.64       23137.0       24405.7    
   9  0.296561      -1.21550      -1137.15       1137.15       22894.9       24032.0    
  10  0.805929     -0.215760      -201.853       201.853       23462.2       23664.0    
  11  0.421616     -0.863661      -807.992       807.992       23343.7       24151.7    
  12  0.767803     -0.264223      -247.192       247.192       23866.1       24113.3    
  13  0.605260     -0.502097      -469.734       469.734       23762.8       24232.6    
  14  0.566784     -0.567776      -531.180       531.180       23864.0       24395.1    
  15  0.292740      -1.22847      -1149.29       1149.29       23335.0       24484.2    
  16  0.898463     -0.107069      -100.168       100.168       24100.2       24200.4    
  17  0.218067      -1.52295      -1424.79       1424.79       23850.4       25275.2    
  18  0.856756     -0.154603      -144.637       144.637       23850.4       23995.0    
  19  0.338883      -1.08210      -1012.35       1012.35       23752.8       24765.1    
  20  0.796034     -0.228113      -213.410       213.410       24067.1       24280.5    
  21  0.778636     -0.250212      -234.084       234.084       23989.8       24223.8    
  22  0.575989     -0.551667      -516.109       516.109       23367.0       23883.1    
  23  0.355531      -1.03414      -967.486       967.486       23617.5       24584.9    
  24  0.164949      -1.80212      -1685.96       1685.96       23294.8       24980.8    
  25  0.315998      -1.15202      -1077.76       1077.76       23372.1       24449.8    
  26  0.330933      -1.10584      -1034.56       1034.56       22936.8       23971.3    
  27  0.429436     -0.845283      -790.799       790.799       24467.3       25258.1    
  28  0.464808     -0.766130      -716.748       716.748       23736.4       24453.2    
  29  0.192211      -1.64916      -1542.86       1542.86       23480.0       25022.9    
  30  0.866849     -0.142891      -133.680       133.680       23903.8       24037.5    
  31  0.474973     -0.744498      -696.510       696.510       24099.8       24796.3    
  32  0.667713     -0.403897      -377.863       377.863       24732.8       25110.6    
  33  0.994155     -0.586200E-02  -5.48416       5.48416       24174.3       24179.8    
  34  0.577739     -0.548634      -513.271       513.271       24527.3       25040.6    
  35  0.381919     -0.962546      -900.503       900.503       24619.4       25519.9    
  36  0.733204     -0.310331      -290.328       290.328       24266.3       24556.6    
  37  0.492382     -0.708500      -662.833       662.833       23900.1       24562.9    
  38  0.188899E-01  -3.96913      -3713.29       3713.29       24879.4       28592.7    
  39  0.741920E-01  -2.60110      -2433.44       2433.44       24940.8       27374.2    
  40  0.210592      -1.55783      -1457.42       1457.42       23485.1       24942.6    
  41  0.682838     -0.381498      -356.908       356.908       24028.8       24385.7    
  42  0.656831     -0.420328      -393.235       393.235       25131.3       25524.5    
  43  0.444670     -0.810424      -758.187       758.187       23905.3       24663.5    
  44  0.872301     -0.136621      -127.815       127.815       23928.3       24056.1    
  45  0.932741     -0.696282E-01  -65.1402       65.1402       25038.7       25103.9    
  46  0.601727     -0.507951      -475.211       475.211       24932.5       25407.7    
  47  0.940344     -0.615097E-01  -57.5450       57.5450       25138.6       25196.1    
  48  0.208477E-01  -3.87051      -3621.03       3621.03       24472.4       28093.4    
  49  0.257831      -1.35545      -1268.08       1268.08       24959.5       26227.6    
  50  0.522803     -0.648550      -606.747       606.747       24118.2       24725.0    
  51  0.676437     -0.390915      -365.718       365.718       24626.5       24992.3    
  52  0.612346     -0.490458      -458.844       458.844       23830.3       24289.1    
  53  0.206854      -1.57574      -1474.18       1474.18       23342.7       24816.9    
loop,thermsimp(1:2)       17   236.156       981.040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226      22973.37          0.91          1.17         21.86          0.22          0.04         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  22973.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       17
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       18
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      224     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -1333.59       1333.59       21067.9       22401.5    
   2  0.711556E-02  -4.94547      -4626.70       4626.70       21294.9       25921.6    
   3  0.909796     -0.945347E-01  -88.4414       88.4414       21805.4       21893.9    
   4  0.659218     -0.416702      -389.843       389.843       22554.5       22944.3    
   5  0.833482     -0.182144      -170.403       170.403       22921.6       23092.0    
   6  0.726295E-01  -2.62238      -2453.35       2453.35       23462.2       25915.5    
   7  0.687091     -0.375288      -351.098       351.098       23367.0       23718.1    
   8  0.860775     -0.149922      -140.258       140.258       22936.8       23077.0    
   9  0.846215     -0.166982      -156.219       156.219       23850.4       24006.6    
  10  0.398551     -0.919919      -860.625       860.625       22894.9       23755.5    
  11  0.416092     -0.876849      -820.331       820.331       23903.8       24724.2    
  12  0.463389     -0.769189      -719.610       719.610       23928.3       24647.9    
  13  0.207356      -1.57332      -1471.91       1471.91       23866.1       25338.0    
  14  0.133003      -2.01738      -1887.35       1887.35       23343.7       25231.1    
  15  0.464971     -0.765779      -716.420       716.420       24174.3       24890.8    
  16  0.568281     -0.565140      -528.713       528.713       24100.2       24629.0    
  17  0.638811     -0.448147      -419.261       419.261       23989.8       24409.0    
  18  0.865664     -0.144259      -134.960       134.960       23762.8       23897.8    
  19  0.475002     -0.744436      -696.453       696.453       23459.6       24156.1    
  20  0.537086     -0.621597      -581.531       581.531       24067.1       24648.6    
  21  0.782345     -0.245459      -229.638       229.638       23830.3       24059.9    
  22  0.725469     -0.320937      -300.250       300.250       24028.8       24329.1    
  23  0.701426E-01  -2.65723      -2485.95       2485.95       23864.0       26349.9    
  24  0.297043      -1.21388      -1135.64       1135.64       23137.0       24272.7    
  25  0.444870     -0.809973      -757.765       757.765       23372.1       24129.8    
  26  0.685684     -0.377338      -353.016       353.016       23736.4       24089.4    
  27  0.651244     -0.428871      -401.228       401.228       23335.0       23736.2    
  28  0.269082      -1.31274      -1228.12       1228.12       24266.3       25494.4    
  29  0.177107      -1.73100      -1619.43       1619.43       23900.1       25519.5    
  30  0.766464     -0.265968      -248.824       248.824       23617.5       23866.3    
  31  0.801833     -0.220855      -206.619       206.619       23905.3       24111.9    
  32  0.759414     -0.275209      -257.470       257.470       24118.2       24375.7    
  33  0.566307     -0.568618      -531.967       531.967       23752.8       24284.7    
  34  0.297948      -1.21084      -1132.79       1132.79       24099.8       25232.6    
  35  0.430097E-01  -3.14633      -2943.53       2943.53       23342.7       26286.3    
  36  0.529414     -0.635984      -594.990       594.990       23485.1       24080.1    
  37  0.717133     -0.332494      -311.062       311.062       23294.8       23605.9    
  38  0.209457      -1.56323      -1462.47       1462.47       24626.5       26089.0    
  39  0.732428     -0.311390      -291.319       291.319       23480.0       23771.3    
  40  0.697782     -0.359849      -336.654       336.654       24527.3       24863.9    
  41  0.977227     -0.230362E-01  -21.5513       21.5513       25038.7       25060.3    
  42  0.744700     -0.294773      -275.773       275.773       24732.8       25008.6    
  43  0.713341     -0.337796      -316.023       316.023       25138.6       25454.6    
  44  0.497823     -0.697510      -652.551       652.551       22703.9       23356.5    
  45  0.968758     -0.317404E-01  -29.6945       29.6945       24467.3       24497.0    
  46  0.287665      -1.24596      -1165.65       1165.65       23850.4       25016.1    
  47  0.964672     -0.359674E-01  -33.6490       33.6490       24932.5       24966.1    
  48  0.733769     -0.309561      -289.608       289.608       24619.4       24909.0    
  49  0.692680     -0.367187      -343.520       343.520       25131.3       25474.8    
  50  0.328873      -1.11208      -1040.40       1040.40       24959.5       25999.9    
  51  0.744920     -0.294478      -275.497       275.497       24940.8       25216.3    
  52  0.655188     -0.422834      -395.579       395.579       24472.4       24868.0    
  53  0.255467      -1.36466      -1276.70       1276.70       22973.4       24250.1    
loop,thermsimp(1:2)       18   1333.59       4626.70    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227      23467.09          0.88          1.18         21.89          0.23          0.04         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23467.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       18
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       19
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      225     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -304.475       304.475       21805.4       22109.9    
   2  0.240049      -1.42691      -1334.94       1334.94       21067.9       22402.8    
   3  0.365543      -1.00637      -941.504       941.504       22554.5       23496.0    
   4  0.399010     -0.918769      -859.549       859.549       22936.8       23796.3    
   5  0.685268     -0.377945      -353.584       353.584       22921.6       23275.2    
   6  0.335805E-01  -3.39381      -3175.06       3175.06       22703.9       25879.0    
   7  0.820520     -0.197817      -185.066       185.066       23294.8       23479.9    
   8  0.756560     -0.278973      -260.992       260.992       23367.0       23627.9    
   9  0.869461     -0.139882      -130.866       130.866       23335.0       23465.8    
  10  0.787378     -0.239047      -223.638       223.638       22894.9       23118.5    
  11  0.330926      -1.10586      -1034.58       1034.58       23480.0       24514.6    
  12  0.339084E-01  -3.38409      -3165.97       3165.97       23617.5       26783.4    
  13  0.672805     -0.396300      -370.756       370.756       23762.8       24133.6    
  14  0.822413     -0.195513      -182.911       182.911       23850.4       24033.3    
  15  0.928870     -0.737865E-01  -69.0304       69.0304       23830.3       23899.3    
  16  0.778944     -0.249816      -233.714       233.714       23485.1       23718.8    
  17  0.301602E-01  -3.50123      -3275.56       3275.56       23736.4       27012.0    
  18  0.292626      -1.22886      -1149.65       1149.65       23905.3       25055.0    
  19  0.149515      -1.90036      -1777.87       1777.87       23372.1       25150.0    
  20  0.500330E-01  -2.99507      -2802.02       2802.02       23459.6       26261.6    
  21  0.759114E-01  -2.57819      -2412.01       2412.01       22973.4       25385.4    
  22  0.613440     -0.488673      -457.175       457.175       23137.0       23594.2    
  23  0.132502      -2.02116      -1890.88       1890.88       23752.8       25643.6    
  24  0.189750E-02  -6.26722      -5863.26       5863.26       24028.8       29892.1    
  25  0.507622     -0.678018      -634.316       634.316       24118.2       24752.5    
  26  0.378733     -0.970924      -908.341       908.341       23989.8       24898.1    
  27  0.139411      -1.97033      -1843.33       1843.33       24467.3       26310.7    
  28  0.298599      -1.20865      -1130.75       1130.75       24100.2       25231.0    
  29  0.767617     -0.264464      -247.418       247.418       23928.3       24175.7    
  30  0.656077     -0.421478      -394.311       394.311       24067.1       24461.4    
  31  0.701883     -0.353988      -331.171       331.171       23903.8       24235.0    
  32  0.940950     -0.608655E-01  -56.9423       56.9423       24527.3       24584.2    
  33  0.621043     -0.476355      -445.651       445.651       24472.4       24918.0    
  34  0.622910     -0.473353      -442.842       442.842       24174.3       24617.2    
  35  0.525019     -0.644320      -602.790       602.790       24619.4       25222.2    
  36  0.871126     -0.137969      -129.076       129.076       24932.5       25061.6    
  37  0.475532     -0.743322      -695.410       695.410       24732.8       25428.2    
  38  0.320094      -1.13914      -1065.72       1065.72       23850.4       24916.2    
  39  0.688986     -0.372534      -348.522       348.522       25038.7       25387.2    
  40  0.831218     -0.184863      -172.947       172.947       24940.8       25113.7    
  41  0.639633     -0.446861      -418.058       418.058       23343.7       23761.8    
  42  0.628257     -0.464807      -434.847       434.847       24099.8       24534.6    
  43  0.925835     -0.770596E-01  -72.0926       72.0926       23866.1       23938.2    
  44  0.611089     -0.492512      -460.766       460.766       25138.6       25599.3    
  45  0.423003E-01  -3.16296      -2959.09       2959.09       25131.3       28090.4    
  46  0.430763     -0.842198      -787.913       787.913       24266.3       25054.2    
  47  0.374764     -0.981459      -918.198       918.198       23900.1       24818.3    
  48  0.109336      -2.21333      -2070.66       2070.66       23462.2       25532.9    
  49  0.642636E-02  -5.04735      -4722.01       4722.01       21294.9       26016.9    
  50  0.232984      -1.45679      -1362.89       1362.89       24959.5       26322.4    
  51  0.169005E-01  -4.08041      -3817.40       3817.40       24626.5       28444.0    
  52  0.183441      -1.69586      -1586.55       1586.55       23342.7       24929.3    
  53  0.257429      -1.35701      -1269.54       1269.54       23467.1       24736.6    
loop,thermsimp(1:2)       19   304.475       1334.94    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228      23901.79          0.90          1.18         21.75          0.34          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23901.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       19
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       20
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      226     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -1090.11       1090.11       21805.4       22895.5    
   2  0.362384      -1.01505      -949.624       949.624       21067.9       22017.5    
   3  0.900627     -0.104664      -97.9179       97.9179       22894.9       22992.8    
   4  0.233893      -1.45289      -1359.24       1359.24       22921.6       24280.8    
   5  0.183338      -1.69642      -1587.08       1587.08       23335.0       24922.0    
   6  0.351708      -1.04495      -977.599       977.599       23294.8       24272.4    
   7  0.979617     -0.205938E-01  -19.2664       19.2664       22554.5       22573.8    
   8  0.801294     -0.221527      -207.249       207.249       23137.0       23344.3    
   9  0.423893     -0.858275      -802.954       802.954       23367.0       24169.9    
  10  0.486446     -0.720630      -674.181       674.181       23485.1       24159.3    
  11  0.430531     -0.842736      -788.416       788.416       23343.7       24132.2    
  12  0.214629      -1.53884      -1439.65       1439.65       22936.8       24376.4    
  13  0.860310     -0.150463      -140.765       140.765       23830.3       23971.0    
  14  0.450659     -0.797045      -745.670       745.670       23866.1       24611.7    
  15  0.867432     -0.142218      -133.051       133.051       23850.4       23983.4    
  16  0.850327     -0.162134      -151.683       151.683       23762.8       23914.5    
  17  0.914193     -0.897130E-01  -83.9305       83.9305       23928.3       24012.2    
  18  0.908448     -0.960172E-01  -89.8283       89.8283       23903.8       23993.7    
  19  0.349788E-01  -3.35301      -3136.89       3136.89       24067.1       27204.0    
  20  0.825048     -0.192314      -179.918       179.918       23480.0       23659.9    
  21  0.628933     -0.463730      -433.840       433.840       24099.8       24533.6    
  22  0.756366     -0.279229      -261.231       261.231       24527.3       24788.5    
  23  0.545707     -0.605674      -566.634       566.634       24174.3       24741.0    
  24  0.653619     -0.425231      -397.822       397.822       23467.1       23864.9    
  25  0.781643     -0.246357      -230.477       230.477       24118.2       24348.7    
  26  0.444411     -0.811005      -758.731       758.731       23900.1       24658.8    
  27  0.223111      -1.50008      -1403.39       1403.39       23989.8       25393.2    
  28  0.143901      -1.93863      -1813.67       1813.67       23850.4       25664.1    
  29  0.419282E-01  -3.17180      -2967.35       2967.35       24472.4       27439.7    
  30  0.407367     -0.898040      -840.155       840.155       23342.7       24182.9    
  31  0.722138     -0.325538      -304.555       304.555       24266.3       24570.9    
  32  0.290143      -1.23738      -1157.62       1157.62       23905.3       25062.9    
  33  0.236931E-01  -3.74257      -3501.34       3501.34       24932.5       28433.8    
  34  0.198981      -1.61454      -1510.48       1510.48       24940.8       26451.3    
  35  0.765966     -0.266617      -249.432       249.432       23372.1       23621.5    
  36  0.522733     -0.648684      -606.872       606.872       24619.4       25226.3    
  37  0.297579E-01  -3.51466      -3288.12       3288.12       24100.2       27388.4    
  38  0.175475      -1.74026      -1628.09       1628.09       22973.4       24601.5    
  39  0.311931      -1.16497      -1089.88       1089.88       25038.7       26128.6    
  40  0.310920      -1.16822      -1092.92       1092.92       24732.8       25825.7    
  41  0.122272      -2.10150      -1966.05       1966.05       23462.2       25428.2    
  42  0.949359     -0.519686E-01  -48.6189       48.6189       25138.6       25187.2    
  43  0.500750     -0.691648      -647.067       647.067       23752.8       24399.8    
  44  0.729401E-01  -2.61812      -2449.36       2449.36       22703.9       25153.3    
  45  0.952528     -0.486360E-01  -45.5011       45.5011       21294.9       21340.4    
  46  0.718842     -0.330114      -308.836       308.836       23459.6       23768.4    
  47  0.529396     -0.636019      -595.024       595.024       24467.3       25062.4    
  48  0.314661      -1.15626      -1081.73       1081.73       24959.5       26041.2    
  49  0.947465     -0.539649E-01  -50.4865       50.4865       23617.5       23667.9    
  50  0.613869     -0.487974      -456.521       456.521       23736.4       24192.9    
  51  0.303056      -1.19384      -1116.89       1116.89       25131.3       26248.2    
  52  0.749186     -0.288769      -270.156       270.156       24626.5       24896.7    
  53  0.671119E-01  -2.70139      -2527.27       2527.27       23901.8       26429.1    
loop,thermsimp(1:2)       20   1090.11       949.624    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229      22767.22          0.90          1.18         21.88          0.21          0.04         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  22767.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       20
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       21
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      227     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -1104.20       1104.20       21294.9       22399.1    
   2  0.575213     -0.553015      -517.369       517.369       21067.9       21585.3    
   3  0.632244     -0.458480      -428.928       428.928       22554.5       22983.4    
   4  0.819203     -0.199424      -186.569       186.569       21805.4       21992.0    
   5  0.137693E-02  -6.58790      -6163.26       6163.26       22894.9       29058.1    
   6  0.367814      -1.00018      -935.711       935.711       23137.0       24072.7    
   7  0.452636     -0.792666      -741.574       741.574       23372.1       24113.7    
   8  0.278102      -1.27977      -1197.28       1197.28       23480.0       24677.3    
   9  0.417803     -0.872745      -816.491       816.491       23617.5       24433.9    
  10  0.682140     -0.382521      -357.865       357.865       23459.6       23817.5    
  11  0.204733      -1.58605      -1483.82       1483.82       23467.1       24950.9    
  12  0.637442     -0.450292      -421.268       421.268       23762.8       24184.1    
  13  0.114518      -2.16702      -2027.34       2027.34       23830.3       25857.6    
  14  0.724207     -0.322678      -301.880       301.880       23850.4       24152.3    
  15  0.461399     -0.773492      -723.636       723.636       23903.8       24627.5    
  16  0.731739     -0.312332      -292.200       292.200       23928.3       24220.5    
  17  0.773272     -0.257124      -240.551       240.551       23343.7       23584.3    
  18  0.789195     -0.236742      -221.483       221.483       23485.1       23706.6    
  19  0.762001     -0.271807      -254.287       254.287       23367.0       23621.2    
  20  0.933384     -0.689386E-01  -64.4950       64.4950       23342.7       23407.2    
  21  0.694037     -0.365230      -341.689       341.689       23736.4       24078.1    
  22  0.423570     -0.859038      -803.667       803.667       23294.8       24098.5    
  23  0.272919      -1.29858      -1214.88       1214.88       22921.6       24136.5    
  24  0.535843     -0.623914      -583.699       583.699       24118.2       24701.9    
  25  0.902288     -0.102822      -96.1941       96.1941       22936.8       23033.0    
  26  0.479374     -0.735275      -687.881       687.881       23752.8       24440.6    
  27  0.494900E-01  -3.00599      -2812.23       2812.23       24099.8       26912.0    
  28  0.921867     -0.813539E-01  -76.1101       76.1101       24266.3       24342.4    
  29  0.132425      -2.02174      -1891.42       1891.42       22973.4       24864.8    
  30  0.640539     -0.445446      -416.734       416.734       23866.1       24282.8    
  31  0.215363      -1.53543      -1436.46       1436.46       23900.1       25336.5    
  32  0.437204E-01  -3.12994      -2928.19       2928.19       24174.3       27102.5    
  33  0.166028      -1.79560      -1679.86       1679.86       24527.3       26207.1    
  34  0.425825     -0.853727      -798.699       798.699       24626.5       25425.2    
  35  0.810393     -0.210235      -196.684       196.684       23335.0       23531.6    
  36  0.855958     -0.155534      -145.509       145.509       24467.3       24612.8    
  37  0.830452     -0.185786      -173.811       173.811       23905.3       24079.1    
  38  0.658784     -0.417359      -390.458       390.458       22703.9       23094.4    
  39  0.910965     -0.932509E-01  -87.2403       87.2403       25138.6       25225.8    
  40  0.603480     -0.505043      -472.489       472.489       24619.4       25091.9    
  41  0.702610     -0.352953      -330.203       330.203       23989.8       24320.0    
  42  0.329065      -1.11150      -1039.86       1039.86       23462.2       24502.0    
  43  0.790497     -0.235094      -219.940       219.940       23850.4       24070.4    
  44  0.641572     -0.443834      -415.226       415.226       24732.8       25148.0    
  45  0.650683     -0.429733      -402.034       402.034       24959.5       25361.5    
  46  0.194049E-02  -6.24481      -5842.30       5842.30       25038.7       30881.0    
  47  0.662053     -0.412409      -385.827       385.827       25131.3       25517.1    
  48  0.294846      -1.22130      -1142.58       1142.58       23901.8       25044.4    
  49  0.709874     -0.342668      -320.581       320.581       24940.8       25261.4    
  50  0.700314     -0.356226      -333.265       333.265       24067.1       24400.3    
  51  0.639811E-01  -2.74917      -2571.97       2571.97       24100.2       26672.2    
  52  0.251451      -1.38051      -1291.53       1291.53       24472.4       25763.9    
  53  0.828691     -0.187907      -175.796       175.796       22767.2       22943.0    
loop,thermsimp(1:2)       21   1104.20       517.369    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230      23003.00          0.91          1.21         21.74          0.38          0.04         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23003.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       21
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       22
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      228     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -164.343       164.343       21067.9       21232.2    
   2  0.801853     -0.220830      -206.596       206.596       21805.4       22012.0    
   3  0.768645     -0.263126      -246.165       246.165       21294.9       21541.1    
   4  0.855557     -0.156003      -145.948       145.948       22767.2       22913.2    
   5  0.845591     -0.167720      -156.909       156.909       22554.5       22711.4    
   6  0.350050      -1.04968      -982.020       982.020       22936.8       23918.8    
   7  0.927608     -0.751463E-01  -70.3026       70.3026       22703.9       22774.2    
   8  0.655345E-01  -2.72518      -2549.52       2549.52       23342.7       25892.3    
   9  0.355481      -1.03428      -967.618       967.618       23335.0       24302.6    
  10  0.728523     -0.316737      -296.321       296.321       23343.7       23640.1    
  11  0.573220     -0.556486      -520.617       520.617       23367.0       23887.6    
  12  0.112478      -2.18499      -2044.16       2044.16       23485.1       25529.3    
  13  0.338739      -1.08253      -1012.75       1012.75       23459.6       24472.4    
  14  0.239648      -1.42858      -1336.50       1336.50       23850.4       25186.9    
  15  0.918959     -0.845134E-01  -79.0659       79.0659       23137.0       23216.1    
  16  0.283771      -1.25959      -1178.40       1178.40       23736.4       24914.8    
  17  0.414404     -0.880913      -824.132       824.132       23905.3       24729.4    
  18  0.716403     -0.333512      -312.015       312.015       23294.8       23606.8    
  19  0.317726      -1.14657      -1072.66       1072.66       23372.1       24444.7    
  20  0.339005      -1.08174      -1012.02       1012.02       22921.6       23933.6    
  21  0.163059      -1.81364      -1696.74       1696.74       23850.4       25547.1    
  22  0.477081     -0.740069      -692.367       692.367       23762.8       24455.2    
  23  0.105851      -2.24573      -2100.98       2100.98       23928.3       26029.2    
  24  0.840431     -0.173840      -162.635       162.635       23866.1       24028.7    
  25  0.235315      -1.44683      -1353.57       1353.57       23989.8       25343.3    
  26  0.865464     -0.144489      -135.176       135.176       24266.3       24401.5    
  27  0.909462     -0.949026E-01  -88.7855       88.7855       24067.1       24155.9    
  28  0.152105E-01  -4.18577      -3915.97       3915.97       23617.5       27533.4    
  29  0.962485     -0.382371E-01  -35.7725       35.7725       23752.8       23788.5    
  30  0.259410      -1.34934      -1262.37       1262.37       23462.2       24724.6    
  31  0.364880      -1.00819      -943.202       943.202       24467.3       25410.5    
  32  0.467235     -0.760923      -711.876       711.876       23903.8       24615.7    
  33  0.844908     -0.168527      -157.665       157.665       23480.0       23637.7    
  34  0.188232      -1.67008      -1562.43       1562.43       24118.2       25680.6    
  35  0.496585     -0.700000      -654.881       654.881       22973.4       23628.3    
  36  0.410505     -0.890367      -832.977       832.977       23467.1       24300.1    
  37  0.533875     -0.627594      -587.141       587.141       23901.8       24488.9    
  38  0.610668     -0.493202      -461.412       461.412       24619.4       25080.8    
  39  0.241933      -1.41910      -1327.63       1327.63       24732.8       26060.4    
  40  0.642629     -0.442188      -413.686       413.686       25138.6       25552.2    
  41  0.775072     -0.254799      -238.376       238.376       24940.8       25179.2    
  42  0.345343      -1.06322      -994.685       994.685       23900.1       24894.7    
  43  0.844097     -0.169488      -158.563       158.563       24959.5       25118.1    
  44  0.426886     -0.851239      -796.371       796.371       24626.5       25422.9    
  45  0.594109     -0.520693      -487.131       487.131       25131.3       25618.4    
  46  0.489527     -0.714316      -668.274       668.274       24472.4       25140.7    
  47  0.313882      -1.15874      -1084.05       1084.05       23830.3       24914.3    
  48  0.687066     -0.375325      -351.133       351.133       24527.3       24878.4    
  49  0.394505     -0.930124      -870.172       870.172       24100.2       24970.4    
  50  0.971200     -0.292233E-01  -27.3396       27.3396       24099.8       24127.1    
  51  0.916939     -0.867145E-01  -81.1252       81.1252       24174.3       24255.5    
  52  0.968457     -0.320511E-01  -29.9852       29.9852       22894.9       22924.8    
  53  0.437414     -0.826876      -773.579       773.579       23003.0       23776.6    
loop,thermsimp(1:2)       22   164.343       206.596    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231      24090.27          0.89          1.19         21.74          0.39          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24090.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       22
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       23
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      229     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -153.856       153.856       21067.9       21221.8    
   2  0.848474     -0.164316      -153.725       153.725       21294.9       21448.6    
   3  0.146795      -1.91872      -1795.04       1795.04       21805.4       23600.5    
   4  0.398624     -0.919738      -860.455       860.455       22554.5       23414.9    
   5  0.888093     -0.118679      -111.029       111.029       22703.9       22814.9    
   6  0.475009     -0.744421      -696.438       696.438       22767.2       23463.7    
   7  0.120824      -2.11342      -1977.20       1977.20       22894.9       24872.1    
   8  0.270052      -1.30914      -1224.76       1224.76       23137.0       24361.8    
   9  0.201748E-01  -3.90332      -3651.73       3651.73       23294.8       26946.5    
  10  0.999386     -0.614559E-03 -0.574946      0.574946       22973.4       22973.9    
  11  0.212655      -1.54808      -1448.30       1448.30       23480.0       24928.3    
  12  0.197911      -1.61994      -1515.52       1515.52       23343.7       24859.3    
  13  0.786394     -0.240297      -224.809       224.809       23003.0       23227.8    
  14  0.781263     -0.246844      -230.933       230.933       23752.8       23983.7    
  15  0.788011     -0.238244      -222.887       222.887       23367.0       23589.8    
  16  0.956387     -0.445927E-01  -41.7184       41.7184       22936.8       22978.5    
  17  0.717415     -0.332100      -310.694       310.694       22921.6       23232.3    
  18  0.808756     -0.212258      -198.577       198.577       23866.1       24064.6    
  19  0.756838     -0.278606      -260.648       260.648       24099.8       24360.4    
  20  0.570684     -0.560919      -524.764       524.764       24067.1       24591.8    
  21  0.946031     -0.554796E-01  -51.9036       51.9036       24174.3       24226.2    
  22  0.678634E-01  -2.69026      -2516.85       2516.85       23467.1       25983.9    
  23  0.631502     -0.459654      -430.026       430.026       23335.0       23765.0    
  24  0.114784E-01  -4.46729      -4179.34       4179.34       24266.3       28445.7    
  25  0.549681     -0.598417      -559.845       559.845       23372.1       23931.9    
  26  0.846433     -0.166725      -155.978       155.978       23762.8       23918.8    
  27  0.441841     -0.816805      -764.157       764.157       23459.6       24223.8    
  28  0.299100      -1.20698      -1129.18       1129.18       23901.8       25031.0    
  29  0.378130     -0.972517      -909.832       909.832       23903.8       24813.7    
  30  0.830469     -0.185764      -173.791       173.791       23462.2       23636.0    
  31  0.675108     -0.392883      -367.559       367.559       23905.3       24272.9    
  32  0.997619     -0.238377E-02  -2.23012       2.23012       24527.3       24529.5    
  33  0.897623     -0.108005      -101.043       101.043       23900.1       24001.1    
  34  0.591811E-01  -2.82715      -2644.92       2644.92       23830.3       26475.2    
  35  0.229825      -1.47044      -1375.66       1375.66       23736.4       25112.1    
  36  0.654017     -0.424622      -397.253       397.253       24100.2       24497.5    
  37  0.305777      -1.18490      -1108.53       1108.53       24619.4       25728.0    
  38  0.936135     -0.659954E-01  -61.7416       61.7416       24959.5       25021.2    
  39  0.698153     -0.359317      -336.156       336.156       24472.4       24808.6    
  40  0.829975     -0.186360      -174.348       174.348       24940.8       25115.1    
  41  0.951351     -0.498721E-01  -46.6575       46.6575       23850.4       23897.1    
  42  0.883299     -0.124092      -116.094       116.094       23989.8       24105.9    
  43  0.910087     -0.942154E-01  -88.1426       88.1426       24467.3       24555.5    
  44  0.590840     -0.526210      -492.292       492.292       24626.5       25118.8    
  45  0.146785      -1.91879      -1795.11       1795.11       23485.1       25280.2    
  46  0.830381E-01  -2.48846      -2328.06       2328.06       23850.4       26178.5    
  47  0.289482      -1.23966      -1159.76       1159.76       25138.6       26298.3    
  48  0.594462     -0.520098      -486.574       486.574       25131.3       25617.9    
  49  0.241311      -1.42167      -1330.03       1330.03       24118.2       25448.2    
  50  0.612368     -0.490422      -458.811       458.811       23342.7       23801.6    
  51  0.952207     -0.489727E-01  -45.8161       45.8161       23928.3       23974.1    
  52  0.857144     -0.154149      -144.213       144.213       24732.8       24877.0    
  53  0.221746      -1.50622      -1409.14       1409.14       24090.3       25499.4    
loop,thermsimp(1:2)       23   153.856       153.725    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232      25471.08          0.90          1.20         21.76          0.36          0.04         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  25471.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       23
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       24
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      230     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -2135.41       2135.41       21067.9       23203.3    
   2  0.372115     -0.988552      -924.834       924.834       21294.9       22219.7    
   3  0.732875     -0.310780      -290.748       290.748       22703.9       22994.6    
   4  0.341646      -1.07398      -1004.75       1004.75       22973.4       23978.1    
   5  0.406512     -0.900141      -842.121       842.121       22936.8       23778.9    
   6  0.271848      -1.30251      -1218.56       1218.56       23003.0       24221.6    
   7  0.738418     -0.303245      -283.699       283.699       22921.6       23205.3    
   8  0.903199     -0.101813      -95.2504       95.2504       22554.5       22649.7    
   9  0.511789     -0.669842      -626.667       626.667       22767.2       23393.9    
  10  0.202674      -1.59616      -1493.28       1493.28       23367.0       24860.2    
  11  0.325695      -1.12179      -1049.49       1049.49       21805.4       22854.9    
  12  0.719720     -0.328893      -307.694       307.694       23462.2       23769.9    
  13  0.715609     -0.334622      -313.053       313.053       23335.0       23648.0    
  14  0.973328     -0.270339E-01  -25.2914       25.2914       23342.7       23368.0    
  15  0.373998     -0.983504      -920.111       920.111       23850.4       24770.6    
  16  0.977965     -0.222815E-01  -20.8453       20.8453       23762.8       23783.7    
  17  0.105495      -2.24909      -2104.12       2104.12       23372.1       25476.2    
  18  0.729809     -0.314973      -294.671       294.671       23928.3       24222.9    
  19  0.378008     -0.972839      -910.134       910.134       23752.8       24662.9    
  20  0.678326     -0.388127      -363.110       363.110       23900.1       24263.2    
  21  0.671993     -0.397507      -371.886       371.886       23866.1       24238.0    
  22  0.515926     -0.661792      -619.136       619.136       23989.8       24608.9    
  23  0.363490      -1.01200      -946.774       946.774       23459.6       24406.4    
  24  0.206319      -1.57833      -1476.60       1476.60       24174.3       25650.9    
  25  0.755157E-01  -2.58341      -2416.90       2416.90       23905.3       26322.2    
  26  0.413763     -0.882461      -825.581       825.581       24099.8       24925.4    
  27  0.279023      -1.27646      -1194.18       1194.18       23137.0       24331.2    
  28  0.506422     -0.680385      -636.530       636.530       24100.2       24736.8    
  29  0.643082E-02  -5.04665      -4721.36       4721.36       24527.3       29248.6    
  30  0.285888E-01  -3.55474      -3325.61       3325.61       24467.3       27793.0    
  31  0.660419     -0.414880      -388.138       388.138       24067.1       24455.2    
  32  0.739369     -0.301959      -282.496       282.496       24472.4       24754.9    
  33  0.270269      -1.30834      -1224.01       1224.01       23903.8       25127.9    
  34  0.663889     -0.409640      -383.236       383.236       23343.7       23727.0    
  35  0.898739E-01  -2.40935      -2254.05       2254.05       22894.9       25148.9    
  36  0.832427     -0.183410      -171.588       171.588       24732.8       24904.4    
  37  0.723106     -0.324200      -303.303       303.303       23480.0       23783.3    
  38  0.986274     -0.138207E-01  -12.9299       12.9299       24959.5       24972.4    
  39  0.812861     -0.207195      -193.840       193.840       23901.8       24095.6    
  40  0.553236     -0.591971      -553.815       553.815       23736.4       24290.2    
  41  0.693785E-01  -2.66818      -2496.20       2496.20       24940.8       27437.0    
  42  0.117256      -2.14340      -2005.24       2005.24       24626.5       26631.8    
  43  0.807809     -0.213430      -199.673       199.673       23485.1       23684.8    
  44  0.900249     -0.105084      -98.3104       98.3104       24118.2       24216.5    
  45  0.753470     -0.283066      -264.820       264.820       24090.3       24355.1    
  46  0.127159      -2.06232      -1929.39       1929.39       25131.3       27060.7    
  47  0.535389     -0.624762      -584.492       584.492       24619.4       25203.9    
  48  0.957281     -0.436582E-01  -40.8441       40.8441       23467.1       23507.9    
  49  0.227700      -1.47973      -1384.35       1384.35       23850.4       25234.7    
  50  0.636404     -0.451921      -422.792       422.792       25138.6       25561.4    
  51  0.905015     -0.998042E-01  -93.3711       93.3711       23830.3       23923.7    
  52  0.555191     -0.588444      -550.515       550.515       23294.8       23845.3    
  53  0.687780     -0.374286      -350.161       350.161       25471.1       25821.2    
loop,thermsimp(1:2)       24   2135.41       924.834    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233      23118.27          0.90          1.19         21.77          0.32          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234      28929.19          0.91          1.18         21.82          0.22          0.04         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1  23118.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       24
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       25
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      232     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -35.4837       35.4837       21294.9       21330.4    
   2  0.355374      -1.03458      -967.898       967.898       22554.5       23522.4    
   3  0.294461      -1.22261      -1143.80       1143.80       21805.4       22949.2    
   4  0.644538     -0.439222      -410.911       410.911       22703.9       23114.8    
   5  0.741622     -0.298915      -279.648       279.648       21067.9       21347.6    
   6  0.805913E-01  -2.51837      -2356.04       2356.04       22921.6       25277.6    
   7  0.498180     -0.696794      -651.881       651.881       23342.7       23994.6    
   8  0.771004     -0.260061      -243.299       243.299       22767.2       23010.5    
   9  0.753480     -0.283053      -264.808       264.808       23467.1       23731.9    
  10  0.460525     -0.775387      -725.409       725.409       23335.0       24060.4    
  11  0.918626     -0.848759E-01  -79.4051       79.4051       23485.1       23564.5    
  12  0.355379      -1.03457      -967.885       967.885       23343.7       24311.6    
  13  0.664646     -0.408501      -382.171       382.171       23462.2       23844.4    
  14  0.328018      -1.11469      -1042.84       1042.84       22936.8       23979.6    
  15  0.529583     -0.635665      -594.692       594.692       23480.0       24074.7    
  16  0.259823      -1.34775      -1260.88       1260.88       23762.8       25023.7    
  17  0.463690E-01  -3.07112      -2873.17       2873.17       23294.8       26168.0    
  18  0.366509      -1.00373      -939.035       939.035       23830.3       24769.3    
  19  0.794534     -0.229999      -215.174       215.174       22973.4       23188.5    
  20  0.669373     -0.401413      -375.539       375.539       23901.8       24277.3    
  21  0.798901     -0.224518      -210.047       210.047       24118.2       24328.3    
  22  0.610403     -0.493636      -461.818       461.818       23003.0       23464.8    
  23  0.267818      -1.31745      -1232.53       1232.53       23928.3       25160.8    
  24  0.663049     -0.410906      -384.421       384.421       23866.1       24250.5    
  25  0.782871     -0.244788      -229.010       229.010       23900.1       24129.1    
  26  0.706545     -0.347368      -324.978       324.978       23736.4       24061.4    
  27  0.120119      -2.11927      -1982.67       1982.67       23137.0       25119.7    
  28  0.270575      -1.30721      -1222.95       1222.95       24090.3       25313.2    
  29  0.505391     -0.682422      -638.436       638.436       23459.6       24098.0    
  30  0.665734     -0.406865      -380.640       380.640       24067.1       24447.7    
  31  0.836788     -0.178185      -166.700       166.700       23989.8       24156.5    
  32  0.866983     -0.142736      -133.536       133.536       23752.8       23886.3    
  33  0.552904     -0.592571      -554.376       554.376       24100.2       24654.6    
  34  0.554153     -0.590314      -552.265       552.265       24472.4       25024.7    
  35  0.592407E-01  -2.82615      -2643.98       2643.98       23850.4       26494.4    
  36  0.902163     -0.102960      -96.3232       96.3232       23367.0       23463.3    
  37  0.266638E-01  -3.62445      -3390.83       3390.83       24732.8       28123.6    
  38  0.897053     -0.108640      -101.638       101.638       24099.8       24201.4    
  39  0.840496     -0.173763      -162.563       162.563       24959.5       25122.1    
  40  0.288358      -1.24355      -1163.40       1163.40       23903.8       25067.2    
  41  0.835972E-01  -2.48175      -2321.78       2321.78       22894.9       25216.6    
  42  0.412070     -0.886563      -829.419       829.419       24619.4       25448.8    
  43  0.725010     -0.321570      -300.843       300.843       23850.4       24151.2    
  44  0.316556      -1.15026      -1076.11       1076.11       23372.1       24448.2    
  45  0.486178     -0.721181      -674.696       674.696       25138.6       25813.3    
  46  0.143341      -1.94253      -1817.32       1817.32       24174.3       25991.7    
  47  0.956913     -0.440430E-01  -41.2042       41.2042       25471.1       25512.3    
  48  0.362697      -1.01419      -948.816       948.816       23905.3       24854.1    
  49  0.951746     -0.494572E-01  -46.2694       46.2694       24626.5       24672.8    
  50  0.511140     -0.671112      -627.854       627.854       25131.3       25759.2    
  51  0.364891E-01  -3.31074      -3097.34       3097.34       24940.8       28038.1    
  52  0.377076     -0.975308      -912.443       912.443       24467.3       25379.8    
  53  0.670030E-01  -2.70302      -2528.79       2528.79       23118.3       25647.1    
loop,thermsimp(1:2)       25   35.4837       967.898    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235      23131.54          0.90          1.18         21.80          0.29          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  23131.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       25
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       26
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      233     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -11.7456       11.7456       21294.9       21306.7    
   2  0.516099     -0.661457      -618.822       618.822       21067.9       21686.7    
   3  0.202206      -1.59847      -1495.44       1495.44       21805.4       23300.8    
   4  0.240260      -1.42603      -1334.12       1334.12       22767.2       24101.3    
   5  0.717263E-01  -2.63490      -2465.06       2465.06       22703.9       25169.0    
   6  0.395382     -0.927902      -868.093       868.093       22973.4       23841.5    
   7  0.494348     -0.704516      -659.106       659.106       23367.0       24026.1    
   8  0.970815     -0.296196E-01  -27.7105       27.7105       23003.0       23030.7    
   9  0.992795     -0.723105E-02  -6.76497       6.76497       22554.5       22561.3    
  10  0.387320     -0.948503      -887.366       887.366       23485.1       24372.5    
  11  0.586568     -0.533466      -499.081       499.081       23467.1       23966.2    
  12  0.119144      -2.12742      -1990.30       1990.30       23462.2       25452.5    
  13  0.145144      -1.93003      -1805.63       1805.63       23752.8       25558.4    
  14  0.767931     -0.264056      -247.036       247.036       22936.8       23183.8    
  15  0.415014     -0.879442      -822.756       822.756       23342.7       24165.5    
  16  0.994477     -0.553801E-02  -5.18105       5.18105       23335.0       23340.1    
  17  0.757243     -0.278071      -260.148       260.148       23736.4       23996.6    
  18  0.669290     -0.401537      -375.656       375.656       23480.0       23855.7    
  19  0.112026      -2.18903      -2047.93       2047.93       23459.6       25507.5    
  20  0.434244     -0.834148      -780.382       780.382       23900.1       24680.4    
  21  0.491828     -0.709627      -663.887       663.887       23850.4       24514.3    
  22  0.517535     -0.658677      -616.221       616.221       23989.8       24606.0    
  23  0.411147     -0.888804      -831.515       831.515       24099.8       24931.3    
  24  0.250164      -1.38564      -1296.33       1296.33       23866.1       25162.4    
  25  0.109742E-01  -4.51221      -4221.37       4221.37       23901.8       28123.2    
  26  0.559459     -0.580786      -543.350       543.350       23343.7       23887.1    
  27  0.289677      -1.23899      -1159.13       1159.13       24118.2       25277.3    
  28  0.835809     -0.179356      -167.795       167.795       24067.1       24234.9    
  29  0.236182      -1.44315      -1350.13       1350.13       23372.1       24722.2    
  30  0.700988     -0.355264      -332.365       332.365       24100.2       24432.6    
  31  0.886914     -0.120007      -112.272       112.272       24626.5       24738.8    
  32  0.182911      -1.69875      -1589.26       1589.26       23830.3       25419.5    
  33  0.693089     -0.366597      -342.968       342.968       23905.3       24248.3    
  34  0.108523      -2.22079      -2077.64       2077.64       23762.8       25840.5    
  35  0.141600      -1.95475      -1828.75       1828.75       24472.4       26301.1    
  36  0.168348E-01  -4.08431      -3821.05       3821.05       23903.8       27724.9    
  37  0.419419E-01  -3.17147      -2967.05       2967.05       23137.0       26104.1    
  38  0.244896      -1.40692      -1316.24       1316.24       24959.5       26275.7    
  39  0.360662      -1.01981      -954.081       954.081       23928.3       24882.3    
  40  0.927013     -0.757879E-01  -70.9029       70.9029       22894.9       22965.8    
  41  0.869067     -0.140335      -131.289       131.289       22921.6       23052.9    
  42  0.827083     -0.189851      -177.614       177.614       24090.3       24267.9    
  43  0.928403     -0.742893E-01  -69.5009       69.5009       24467.3       24536.8    
  44  0.513193     -0.667103      -624.104       624.104       24619.4       25243.5    
  45  0.809080     -0.211858      -198.202       198.202       25471.1       25669.3    
  46  0.341224E-02  -5.68039      -5314.25       5314.25       23118.3       28432.5    
  47  0.734431     -0.308659      -288.764       288.764       25131.3       25420.1    
  48  0.688454     -0.373307      -349.245       349.245       25138.6       25487.8    
  49  0.990614     -0.943067E-02  -8.82280       8.82280       24174.3       24183.2    
  50  0.143408      -1.94206      -1816.88       1816.88       23294.8       25111.7    
  51  0.868596     -0.140878      -131.797       131.797       23850.4       23982.2    
  52  0.244103      -1.41016      -1319.27       1319.27       24940.8       26260.1    
  53  0.207986      -1.57029      -1469.07       1469.07       23131.5       24600.6    
loop,thermsimp(1:2)       26   11.7456       618.822    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236      24514.76          0.90          1.18         21.76          0.36          0.04         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2  24514.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    935.544               261
loop is:       26
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    7484.35      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    935.544               261
loop is:       27
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      234     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -1507.53       1507.53       21294.9       22802.4    
   2  0.983274     -0.168677E-01  -15.7804       15.7804       21067.9       21083.7    
   3  0.569108     -0.563685      -527.352       527.352       22554.5       23081.8    
   4  0.411179     -0.888728      -831.444       831.444       22894.9       23726.3    
   5  0.889241     -0.117387      -109.820       109.820       23003.0       23112.8    
   6  0.109537      -2.21149      -2068.95       2068.95       22921.6       24990.5    
   7  0.658027     -0.418509      -391.534       391.534       22936.8       23328.3    
   8  0.427534     -0.849722      -794.952       794.952       21805.4       22600.4    
   9  0.277803      -1.28084      -1198.28       1198.28       23335.0       24533.2    
  10  0.568421     -0.564892      -528.482       528.482       22973.4       23501.9    
  11  0.368489     -0.998346      -933.996       933.996       23480.0       24414.0    
  12  0.100945E-01  -4.59576      -4299.54       4299.54       23343.7       27643.3    
  13  0.811445     -0.208939      -195.471       195.471       23467.1       23662.6    
  14  0.135138      -2.00146      -1872.45       1872.45       23850.4       25722.9    
  15  0.600340     -0.510258      -477.369       477.369       23736.4       24213.8    
