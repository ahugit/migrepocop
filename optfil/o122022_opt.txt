nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    514.066      0.500000    
Tfreq:   63
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    514.066      0.500000    
Tfreq:   63
 Estimating   63 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       1713.55         74.06          1.17         40.35          0.41          0.04        116.04
iter,obj,time:      3       1835.98         69.05          1.23         40.88          0.21          0.05        111.42
iter,obj,time:      4       1703.70         69.00          1.19         40.44          0.29          0.05        110.97
iter,obj,time:      5       1943.19         69.11          1.15         40.59          0.28          0.05        111.17
iter,obj,time:      6       1790.22         68.92          1.18         40.62          0.16          0.05        110.93
iter,obj,time:      7       1998.98         68.76          1.14         40.61          0.28          0.05        110.83
iter,obj,time:      8       2092.67         68.79          1.17         40.68          0.29          0.05        110.99
iter,obj,time:      9       1986.20         69.05          1.17         40.58          0.28          0.05        111.13
iter,obj,time:     10       1897.70         69.02          1.17         40.40          0.29          0.05        110.92
iter,obj,time:     11       1848.90         69.01          1.17         40.47          0.29          0.05        110.98
iter,obj,time:     12       1352.25         69.03          1.20         40.43          0.24          0.05        110.94
iter,obj,time:     13       1958.45         69.02          1.19         40.39          0.25          0.05        110.90
iter,obj,time:     14       1867.17         68.96          1.19         40.42          0.23          0.05        110.85
iter,obj,time:     15       1618.35         69.03          1.20         40.46          0.30          0.05        111.04
iter,obj,time:     16       1822.10         69.03          1.22         40.40          0.26          0.05        110.95
iter,obj,time:     17       1740.78         69.02          1.18         40.47          0.34          0.04        111.05
iter,obj,time:     18       1717.77         69.15          1.19         40.34          0.34          0.05        111.06
iter,obj,time:     19       1843.55         69.14          1.20         40.45          0.22          0.05        111.05
iter,obj,time:     20       3238.44         69.21          1.16         40.39          0.30          0.04        111.11
iter,obj,time:     21       1721.08         69.08          1.20         40.44          0.19          0.05        110.97
iter,obj,time:     22       1456.43         69.17          1.18         40.44          0.32          0.05        111.15
iter,obj,time:     23       1825.77         69.07          1.19         40.48          0.29          0.04        111.09
iter,obj,time:     24       1789.28         68.99          1.19         40.85          0.45          0.05        111.52
iter,obj,time:     25       1761.85         68.75          1.17         40.73          0.19          0.05        110.89
iter,obj,time:     26       1764.77         68.90          1.19         40.66          0.11          0.05        110.91
iter,obj,time:     27       1770.52         69.02          1.21         40.67          0.00          0.04        110.95
iter,obj,time:     28       1688.88         69.13          1.21         40.43          0.15          0.05        110.97
iter,obj,time:     29       1745.28         68.98          1.21         40.57          0.26          0.04        111.05
iter,obj,time:     30       1771.81         68.96          1.22         40.77          0.02          0.05        111.02
iter,obj,time:     31       1768.15         68.97          1.24         40.71          0.05          0.05        111.02
iter,obj,time:     32       1838.47         68.86          1.20         40.94          0.02          0.05        111.07
iter,obj,time:     33       1783.37         68.98          1.24         40.62          0.01          0.04        110.90
iter,obj,time:     34       1761.42         68.86          1.13         40.64          0.05          0.04        110.72
iter,obj,time:     35       2035.33         68.89          1.14         40.77          0.03          0.04        110.86
iter,obj,time:     36       2074.91         68.74          1.08         40.69          0.32          0.05        110.87
iter,obj,time:     37       1802.34         68.77          1.14         40.73          0.27          0.04        110.97
iter,obj,time:     38       2155.99         68.94          1.14         40.61          0.17          0.05        110.92
iter,obj,time:     39       1757.50         68.98          1.18         40.50          0.29          0.05        111.00
iter,obj,time:     40       1691.76         69.04          1.20         40.45          0.26          0.05        111.00
iter,obj,time:     41       1632.99         68.96          1.17         40.50          0.34          0.05        111.01
iter,obj,time:     42       1987.78         68.87          1.14         40.61          0.36          0.05        111.03
iter,obj,time:     43       1832.49         69.01          1.20         40.86          0.21          0.05        111.32
iter,obj,time:     44       2125.36         68.80          1.15         40.95          0.33          0.04        111.27
iter,obj,time:     45       2024.84         69.21          1.26         40.77          0.00          0.05        111.29
iter,obj,time:     46       2214.87         68.99          1.15         40.33          0.34          0.05        110.86
iter,obj,time:     47       2074.74         68.98          1.18         40.48          0.22          0.05        110.91
iter,obj,time:     48       1995.16         69.00          1.23         40.44          0.05          0.05        110.76
iter,obj,time:     49       1991.50         68.83          1.16         40.73          0.05          0.05        110.82
iter,obj,time:     50       1730.22         68.98          1.24         41.01          0.00          0.05        111.28
iter,obj,time:     51       1739.04         68.81          1.16         40.66          0.18          0.05        110.86
iter,obj,time:     52       1644.66         69.00          1.17         40.40          0.34          0.05        110.95
iter,obj,time:     53       1744.49         69.03          1.14         40.36          0.48          0.05        111.05
iter,obj,time:     54       2179.75         69.00          1.14         40.73          0.33          0.05        111.25
iter,obj,time:     55       2381.96         69.05          1.13         40.45          0.18          0.05        110.86
iter,obj,time:     56       1491.51         68.98          1.20         40.58          0.20          0.05        111.00
iter,obj,time:     57       1863.70         68.53          1.08         40.59          0.74          0.05        110.99
iter,obj,time:     58       1708.53         68.79          1.17         40.72          0.12          0.05        110.83
iter,obj,time:     59       1788.40         68.98          1.17         40.73          0.02          0.05        110.96
iter,obj,time:     60       1479.12         69.02          1.22         40.82          0.04          0.05        111.15
iter,obj,time:     61       1842.53         69.11          1.15         40.21          0.32          0.05        110.84
iter,obj,time:     62       1518.97         68.94          1.10         40.34          0.55          0.05        110.98
iter,obj,time:     63       2512.88         69.03          1.13         40.41          0.38          0.05        110.99
iter,obj,time:     64       1518.51         69.00          1.13         40.87          0.39          0.04        111.44
iter,obj,time:     65       2515.97         68.98          1.13         40.32          0.37          0.05        110.85

    1    1713.6       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    2    1836.0       -1.087     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    3    1703.7       0.9125     -5.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    4    1943.2       0.9125     -3.269     0.4264     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    5    1790.2       0.9125     -3.269      2.426     -102.6     -1.755    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    6    1999.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      -1.932     0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    7    2092.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 -1.137     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    8    1986.2       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70     0.9485     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

    9    1897.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     -1.625    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   10    1848.9       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                     -0.3996     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   11    1352.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     -1.160      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   12    1958.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      2.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   13    1867.2       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966     0.1082E+05  7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   14    1618.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.454      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   15    1822.1       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.448      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   16    1740.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      1044.    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   17    1717.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                     -0.8385     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   18    1843.6       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338      1.875     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   19    3238.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125      3.702     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   20    1721.1       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298      1.149      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   21    1456.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      6.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   22    1825.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                       2.098     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   23    1789.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      9820.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   24    1761.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000     0.1647E+05



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   25    1764.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       7193.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   26    1770.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.     0.1201E+05  8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   27    1688.9       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.     0.1607E+05  3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   28    1745.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      6781.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   29    1771.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      8566.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   30    1768.2       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       8550.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   31    1838.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.5612     0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   32    1783.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.6164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   33    1761.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5592     0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   34    2035.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.7107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   35    2074.9       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.7185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   36    1802.3       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.6739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   37    2156.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.7270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   38    1757.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.6296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   39    1691.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                     -0.7306    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   40    1633.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     0.1741      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   41    1987.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5599     0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   42    1832.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.5469    

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   43    2125.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.6081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   44    2024.8       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.6523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   45    2214.9       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.7207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   46    2074.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.7800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   47    1995.2       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.6076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   48    1991.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.6622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   49    1730.2       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.2019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   50    1739.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019    -0.8259      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   51    1644.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -1.541     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   52    1744.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.187     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   53    2179.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -1.628     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   54    2382.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -1.764    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   55    1491.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.500      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   56    1863.7       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      9.200    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   57    1708.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1848E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   58    1788.4       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -5.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   59    1479.1       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.500      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   60    1842.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      9.200    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   61    1519.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      9.300      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   62    2512.9       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.700    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.100    -0.1891E+05 -6.000    

   63    1518.5       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      9.300    

                       9.100    -0.1891E+05 -6.000    

   64    2516.0       0.9125     -3.269      2.426     -102.6     0.2447    
                      0.6828E-01 0.8631     -99.70      2.949     0.3751    

                       1.600     0.8397      1.966      7213.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.948      0.000      0.000      7000.      43.94    

                      -1.338     -3.125     -1.298     -3.851      1.025    

                      -2.902     -3.949      4910.      0.000      8237.    



                       3597.      6005.      8037.      3390.      4283.    

                       4275.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031    -0.1259      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.126      7000.    



                      -2.041     -1.687     -2.128     -2.264    -0.3807    

                     -0.3252      9.100      8.600    -0.1598E+05 -6.000    

                       0.000      0.000      9.100      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.900      9.100    

                     -0.1944E+05 -6.000      0.000      0.000      8.900    

                       9.700    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          64          64

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        1
neval is:       64


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       64     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -758.717       758.717       1713.55       2472.27    
   2  0.709707     -0.342904      -176.275       176.275       1835.98       2012.25    
   3  0.151889      -1.88460      -968.810       968.810       1703.70       2672.51    
   4  0.456170E-01  -3.08747      -1587.17       1587.17       1943.19       3530.36    
   5  0.882557     -0.124932      -64.2231       64.2231       1790.22       1854.45    
   6  0.711292     -0.340672      -175.128       175.128       1998.98       2174.11    
   7  0.241669      -1.42019      -730.070       730.070       2092.67       2822.74    
   8  0.682871     -0.381450      -196.090       196.090       1986.20       2182.29    
   9  0.500657     -0.691834      -355.648       355.648       1897.70       2253.35    
  10  0.494633     -0.703939      -361.871       361.871       1848.90       2210.77    
  11  0.437126     -0.827535      -425.407       425.407       1352.25       1777.66    
  12  0.462981     -0.770069      -395.866       395.866       1958.45       2354.32    
  13  0.988878     -0.111840E-01  -5.74931       5.74931       1867.17       1872.92    
  14  0.878158     -0.129929      -66.7921       66.7921       1618.35       1685.14    
  15  0.825605     -0.191638      -98.5148       98.5148       1822.10       1920.62    
  16  0.966665     -0.339033E-01  -17.4285       17.4285       1740.78       1758.21    
  17  0.340930      -1.07608      -553.174       553.174       1717.77       2270.94    
  18  0.288920      -1.24161      -638.268       638.268       1843.55       2481.82    
  19  0.442843     -0.814539      -418.727       418.727       3238.44       3657.17    
  20  0.878635     -0.129386      -66.5128       66.5128       1721.08       1787.59    
  21  0.198777E-01  -3.91816      -2014.19       2014.19       1456.43       3470.62    
  22  0.315829      -1.15255      -592.488       592.488       1825.77       2418.26    
  23  0.208690      -1.56690      -805.492       805.492       1789.28       2594.77    
  24  0.849393     -0.163234      -83.9128       83.9128       1761.85       1845.76    
  25  0.945818     -0.557056E-01  -28.6363       28.6363       1764.77       1793.41    
  26  0.567839     -0.565917      -290.919       290.919       1770.52       2061.44    
  27  0.718388     -0.330745      -170.025       170.025       1688.88       1858.90    
  28  0.115406      -2.15930      -1110.02       1110.02       1745.28       2855.30    
  29  0.659869E-01  -2.71830      -1397.38       1397.38       1771.81       3169.19    
  30  0.171393      -1.76380      -906.708       906.708       1768.15       2674.86    
  31  0.161953      -1.82045      -935.832       935.832       1838.47       2774.31    
  32  0.455406     -0.786566      -404.346       404.346       1783.37       2187.71    
  33  0.788693     -0.237378      -122.028       122.028       1761.42       1883.45    
  34  0.157754      -1.84672      -949.335       949.335       2035.33       2984.67    
  35  0.126279      -2.06926      -1063.74       1063.74       2074.91       3138.64    
  36  0.646962     -0.435467      -223.859       223.859       1802.34       2026.20    
  37  0.730769     -0.313658      -161.241       161.241       2155.99       2317.23    
  38  0.443446E-01  -3.11577      -1601.71       1601.71       1757.50       3359.21    
  39  0.219048      -1.51847      -780.591       780.591       1691.76       2472.35    
  40  0.311223E-01  -3.46983      -1783.72       1783.72       1632.99       3416.71    
  41  0.864417     -0.145700      -74.8995       74.8995       1987.78       2062.68    
  42  0.372606     -0.987233      -507.503       507.503       1832.49       2340.00    
  43  0.599250E-01  -2.81466      -1446.92       1446.92       2125.36       3572.28    
  44  0.250528      -1.38418      -711.561       711.561       2024.84       2736.40    
  45  0.404968E-01  -3.20653      -1648.37       1648.37       2214.87       3863.24    
  46  0.792822     -0.232156      -119.344       119.344       2074.74       2194.08    
  47  0.826691     -0.190324      -97.8391       97.8391       1995.16       2093.00    
  48  0.258424      -1.35316      -695.611       695.611       1991.50       2687.11    
  49  0.713620     -0.337405      -173.449       173.449       1730.22       1903.67    
  50  0.936186     -0.659413E-01  -33.8982       33.8982       1739.04       1772.94    
  51  0.655367E-01  -2.72514      -1400.90       1400.90       1644.66       3045.56    
  52  0.178790      -1.72154      -884.987       884.987       1744.49       2629.48    
  53  0.110644E-01  -4.50403      -2315.37       2315.37       2179.75       4495.11    
  54  0.459577     -0.777448      -399.660       399.660       2381.96       2781.62    
  55  0.210706      -1.55729      -800.551       800.551       1491.51       2292.06    
  56  0.667378     -0.404399      -207.888       207.888       1863.70       2071.59    
  57  0.787749     -0.238575      -122.643       122.643       1708.53       1831.17    
  58  0.774339E-01  -2.55833      -1315.15       1315.15       1788.40       3103.55    
  59  0.154999      -1.86434      -958.393       958.393       1479.12       2437.51    
  60  0.510712     -0.671950      -345.427       345.427       1842.53       2187.95    
  61  0.628107     -0.465044      -239.063       239.063       1518.97       1758.03    
  62  0.850273     -0.162197      -83.3801       83.3801       2512.88       2596.26    
  63  0.355976      -1.03289      -530.974       530.974       1518.51       2049.49    
  64  0.531318     -0.632394      -325.092       325.092       2515.97       2841.06    
loop,thermsimp(1:2)        1   758.717       176.275    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     66       1814.86         69.02          1.14         40.33          0.11          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1814.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        1
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        2
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       65     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -535.679       535.679       1618.35       2154.03    
   2  0.440787     -0.819193      -421.119       421.119       1518.97       1940.09    
   3  0.685789     -0.377185      -193.898       193.898       1740.78       1934.68    
   4  0.673104     -0.395856      -203.496       203.496       1739.04       1942.53    
   5  0.655536     -0.422301      -217.091       217.091       1352.25       1569.35    
   6  0.422838     -0.860766      -442.490       442.490       1721.08       2163.57    
   7  0.300870      -1.20108      -617.433       617.433       1764.77       2382.20    
   8  0.776987     -0.252331      -129.715       129.715       1708.53       1838.24    
   9  0.170551      -1.76872      -909.239       909.239       1761.85       2671.08    
  10  0.587497     -0.531884      -273.424       273.424       1790.22       2063.65    
  11  0.250425      -1.38459      -711.773       711.773       1688.88       2400.65    
  12  0.776362E-01  -2.55572      -1313.81       1313.81       1867.17       3180.98    
  13  0.766647     -0.265729      -136.602       136.602       1761.42       1898.02    
  14  0.480193     -0.733568      -377.102       377.102       1730.22       2107.33    
  15  0.434643     -0.833231      -428.336       428.336       1822.10       2250.44    
  16  0.815924E-01  -2.50602      -1288.26       1288.26       1835.98       3124.23    
  17  0.724257E-01  -2.62519      -1349.52       1349.52       1802.34       3151.86    
  18  0.573795     -0.555483      -285.555       285.555       1518.51       1804.07    
  19  0.196096      -1.62915      -837.490       837.490       1770.52       2608.01    
  20  0.240673      -1.42432      -732.192       732.192       1987.78       2719.97    
  21  0.194228      -1.63872      -842.412       842.412       1863.70       2706.11    
  22  0.236387      -1.44229      -741.430       741.430       1995.16       2736.59    
  23  0.261662      -1.34070      -689.208       689.208       1998.98       2688.19    
  24  0.146321      -1.92195      -988.011       988.011       1986.20       2974.21    
  25  0.169637      -1.77410      -912.002       912.002       1783.37       2695.37    
  26  0.886717     -0.120229      -61.8057       61.8057       1842.53       1904.33    
  27  0.253412      -1.37274      -705.679       705.679       2074.74       2780.42    
  28  0.470820     -0.753279      -387.235       387.235       1848.90       2236.13    
  29  0.329871      -1.10905      -570.127       570.127       1897.70       2467.83    
  30  0.726784     -0.319126      -164.052       164.052       1717.77       1881.82    
  31  0.612351     -0.490450      -252.124       252.124       1491.51       1743.63    
  32  0.146573      -1.92023      -987.126       987.126       2155.99       3143.11    
  33  0.812633     -0.207476      -106.656       106.656       1832.49       1939.15    
  34  0.486789     -0.719925      -370.089       370.089       1958.45       2328.54    
  35  0.653508     -0.425400      -218.684       218.684       1825.77       2044.45    
  36  0.180127      -1.71409      -881.157       881.157       1479.12       2360.27    
  37  0.155218      -1.86292      -957.666       957.666       1713.55       2671.22    
  38  0.830615     -0.185589      -95.4049       95.4049       1691.76       1787.16    
  39  0.728345     -0.316980      -162.949       162.949       1843.55       2006.50    
  40  0.262318      -1.33820      -687.922       687.922       1789.28       2477.20    
  41  0.234222      -1.45148      -746.158       746.158       2512.88       3259.04    
  42  0.250201      -1.38549      -712.234       712.234       1744.49       2456.72    
  43  0.898433     -0.107103      -55.0582       55.0582       1703.70       1758.76    
  44  0.580277     -0.544250      -279.781       279.781       1768.15       2047.93    
  45  0.823617     -0.194050      -99.7542       99.7542       1991.50       2091.26    
  46  0.820676     -0.197627      -101.593       101.593       2024.84       2126.43    
  47  0.502494     -0.688171      -353.765       353.765       1838.47       2192.24    
  48  0.751016     -0.286329      -147.192       147.192       2381.96       2529.15    
  49  0.360461      -1.02037      -524.538       524.538       2092.67       2617.21    
  50  0.948712     -0.526497E-01  -27.0654       27.0654       2515.97       2543.04    
  51  0.452918     -0.792045      -407.163       407.163       1745.28       2152.44    
  52  0.182886      -1.69889      -873.344       873.344       2035.33       2908.68    
  53  0.986780     -0.133085E-01  -6.84146       6.84146       1644.66       1651.50    
  54  0.720276     -0.328121      -168.676       168.676       1788.40       1957.07    
  55  0.999574     -0.426396E-03 -0.219196      0.219196       2074.91       2075.13    
  56  0.573447     -0.556089      -285.867       285.867       1771.81       2057.67    
  57  0.441160E-01  -3.12093      -1604.37       1604.37       1757.50       3361.87    
  58  0.596470     -0.516726      -265.631       265.631       1632.99       1898.62    
  59  0.561679E-01  -2.87941      -1480.21       1480.21       1456.43       2936.64    
  60  0.664610     -0.408554      -210.024       210.024       1943.19       2153.21    
  61  0.875363     -0.133117      -68.4307       68.4307       2125.36       2193.79    
  62  0.969943     -0.305184E-01  -15.6884       15.6884       3238.44       3254.13    
  63  0.692714     -0.367138      -188.733       188.733       2214.87       2403.61    
  64  0.107969      -2.22591      -1144.26       1144.26       1814.86       2959.12    
loop,thermsimp(1:2)        2   535.679       421.119    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       1793.12         69.04          1.16         40.60          0.38          0.05        111.22
Just calling func    0   0        111.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68       2616.02         69.09          1.16         40.31          0.15          0.04        110.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1793.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        2
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        3
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       67     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -917.299       917.299       1352.25       2269.55    
   2  0.274399      -1.29317      -664.776       664.776       1644.66       2309.43    
   3  0.597410E-01  -2.81774      -1448.50       1448.50       1491.51       2940.01    
   4  0.283115E-01  -3.56449      -1832.38       1832.38       1703.70       3536.08    
   5  0.901069     -0.104174      -53.5523       53.5523       1691.76       1745.31    
   6  0.717939     -0.331371      -170.347       170.347       1518.51       1688.86    
   7  0.294866      -1.22123      -627.795       627.795       1708.53       2336.32    
   8  0.935651     -0.665127E-01  -34.1919       34.1919       1717.77       1751.96    
   9  0.314362      -1.15721      -594.882       594.882       1761.42       2356.30    
  10  0.807729     -0.213529      -109.768       109.768       1632.99       1742.76    
  11  0.757191     -0.278140      -142.982       142.982       1842.53       1985.51    
  12  0.508654     -0.675987      -347.502       347.502       1740.78       2088.28    
  13  0.722060     -0.325647      -167.404       167.404       1832.49       1999.90    
  14  0.424032     -0.857947      -441.041       441.041       1518.97       1960.01    
  15  0.786154     -0.240602      -123.686       123.686       1739.04       1862.72    
  16  0.399894     -0.916557      -471.170       471.170       1788.40       2259.57    
  17  0.757416     -0.277843      -142.830       142.830       1843.55       1986.38    
  18  0.637270     -0.450563      -231.619       231.619       1825.77       2057.39    
  19  0.586055     -0.534342      -274.687       274.687       1768.15       2042.84    
  20  0.821724     -0.196351      -100.937       100.937       1771.81       1872.74    
  21  0.921558     -0.816897E-01  -41.9939       41.9939       1790.22       1832.22    
  22  0.985596     -0.145083E-01  -7.45824       7.45824       2074.91       2082.37    
  23  0.257194      -1.35793      -698.063       698.063       1991.50       2689.57    
  24  0.921438E-01  -2.38440      -1225.74       1225.74       1730.22       2955.96    
  25  0.114653      -2.16584      -1113.39       1113.39       2024.84       3138.22    
  26  0.379827     -0.968040      -497.637       497.637       1745.28       2242.91    
  27  0.541451     -0.613503      -315.381       315.381       1943.19       2258.57    
  28  0.544274     -0.608302      -312.707       312.707       1618.35       1931.05    
  29  0.934365     -0.678883E-01  -34.8991       34.8991       1721.08       1755.98    
  30  0.266419E-01  -3.62527      -1863.63       1863.63       1838.47       3702.10    
  31  0.919572     -0.838466E-01  -43.1027       43.1027       2125.36       2168.46    
  32  0.864639     -0.145444      -74.7676       74.7676       1848.90       1923.66    
  33  0.341156      -1.07542      -552.835       552.835       1822.10       2374.94    
  34  0.803175     -0.219182      -112.674       112.674       1958.45       2071.13    
  35  0.699424     -0.357498      -183.778       183.778       1479.12       1662.89    
  36  0.223868E-01  -3.79928      -1953.08       1953.08       1764.77       3717.85    
  37  0.605689     -0.501389      -257.747       257.747       1688.88       1946.63    
  38  0.312349      -1.16363      -598.184       598.184       2214.87       2813.06    
  39  0.437501     -0.826675      -424.966       424.966       1744.49       2169.46    
  40  0.303330      -1.19293      -613.246       613.246       1897.70       2510.95    
  41  0.129735      -2.04226      -1049.86       1049.86       1789.28       2839.14    
  42  0.954352     -0.467224E-01  -24.0184       24.0184       2381.96       2405.97    
  43  0.519807     -0.654297      -336.352       336.352       2515.97       2852.32    
  44  0.950560     -0.507036E-01  -26.0650       26.0650       1770.52       1796.59    
  45  0.443941     -0.812064      -417.454       417.454       2092.67       2510.12    
  46  0.911446     -0.927229E-01  -47.6657       47.6657       1761.85       1809.51    
  47  0.782475     -0.245293      -126.097       126.097       1713.55       1839.65    
  48  0.412534     -0.885438      -455.173       455.173       1998.98       2454.15    
  49  0.843850     -0.169780      -87.2782       87.2782       1783.37       1870.64    
  50  0.149432      -1.90091      -977.195       977.195       1863.70       2840.90    
  51  0.292747      -1.22845      -631.503       631.503       1987.78       2619.28    
  52  0.579908E-02  -5.15006      -2647.47       2647.47       1995.16       4642.63    
  53  0.164431      -1.80526      -928.024       928.024       2074.74       3002.76    
  54  0.963795     -0.368765E-01  -18.9570       18.9570       2035.33       2054.29    
  55  0.536638     -0.622432      -319.971       319.971       1456.43       1776.40    
  56  0.231620      -1.46266      -751.903       751.903       1814.86       2566.76    
  57  0.452632E-01  -3.09526      -1591.17       1591.17       1986.20       3577.37    
  58  0.241294      -1.42174      -730.868       730.868       1835.98       2566.84    
  59  0.757653     -0.277529      -142.668       142.668       2155.99       2298.66    
  60  0.504715     -0.683762      -351.499       351.499       1802.34       2153.84    
  61  0.878562     -0.129469      -66.5558       66.5558       1867.17       1933.73    
  62  0.874452     -0.134158      -68.9662       68.9662       3238.44       3307.41    
  63  0.370953     -0.991680      -509.789       509.789       2512.88       3022.67    
  64  0.757717     -0.277446      -142.625       142.625       1793.12       1935.74    
loop,thermsimp(1:2)        3   917.299       664.776    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69       1715.30         69.09          1.16         40.71          0.05          0.05        111.06
Just calling func    0   0        111.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70       2179.41         69.05          1.17         40.41          0.26          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1715.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        3
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        4
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       69     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -63.8274       63.8274       1479.12       1542.94    
   2  0.114178      -2.16999      -1115.52       1115.52       1518.51       2634.03    
   3  0.217017      -1.52778      -785.379       785.379       1632.99       2418.37    
   4  0.138317      -1.97821      -1016.93       1016.93       1691.76       2708.69    
   5  0.832728     -0.183048      -94.0988       94.0988       1717.77       1811.87    
   6  0.390825     -0.939496      -482.963       482.963       1721.08       2204.05    
   7  0.283633      -1.26007      -647.761       647.761       1456.43       2104.19    
   8  0.725809     -0.320468      -164.742       164.742       1770.52       1935.27    
   9  0.506121     -0.680979      -350.068       350.068       1761.85       2111.91    
  10  0.216234      -1.53139      -787.237       787.237       1790.22       2577.46    
  11  0.637942     -0.449509      -231.077       231.077       1713.55       1944.63    
  12  0.536707     -0.622302      -319.904       319.904       1739.04       2058.94    
  13  0.231844      -1.46169      -751.406       751.406       1783.37       2534.77    
  14  0.491379     -0.710540      -365.265       365.265       1771.81       2137.07    
  15  0.825774     -0.191434      -98.4099       98.4099       1848.90       1947.31    
  16  0.671593     -0.398102      -204.651       204.651       1618.35       1823.00    
  17  0.549103     -0.599470      -308.167       308.167       1867.17       2175.34    
  18  0.659287     -0.416597      -214.158       214.158       1793.12       2007.28    
  19  0.205012      -1.58469      -814.633       814.633       1688.88       2503.51    
  20  0.400541E-02  -5.52011      -2837.70       2837.70       1518.97       4356.67    
  21  0.750831     -0.286575      -147.318       147.318       1842.53       1989.84    
  22  0.619921     -0.478162      -245.807       245.807       1843.55       2089.36    
  23  0.435226     -0.831889      -427.646       427.646       1832.49       2260.14    
  24  0.460974     -0.774414      -398.100       398.100       1768.15       2166.25    
  25  0.891582E-01  -2.41734      -1242.67       1242.67       2035.33       3278.01    
  26  0.589618E-01  -2.83087      -1455.25       1455.25       1825.77       3281.02    
  27  0.541391     -0.613613      -315.438       315.438       1958.45       2273.89    
  28  0.545108E-01  -2.90936      -1495.60       1495.60       2074.91       3570.51    
  29  0.744722     -0.294744      -151.518       151.518       1740.78       1892.30    
  30  0.712477     -0.339008      -174.272       174.272       1802.34       1976.61    
  31  0.563836     -0.572992      -294.555       294.555       2125.36       2419.91    
  32  0.161455      -1.82353      -937.413       937.413       1744.49       2681.90    
  33  0.640738     -0.445135      -228.829       228.829       1745.28       1974.11    
  34  0.157494      -1.84837      -950.182       950.182       1943.19       2893.37    
  35  0.695323     -0.363378      -186.800       186.800       1788.40       1975.20    
  36  0.792798     -0.232186      -119.359       119.359       1352.25       1471.61    
  37  0.940634     -0.612017E-01  -31.4617       31.4617       2155.99       2187.45    
  38  0.750008     -0.287672      -147.882       147.882       1644.66       1792.54    
  39  0.298939E-01  -3.51010      -1804.42       1804.42       1708.53       3512.95    
  40  0.633510     -0.456480      -234.661       234.661       1761.42       1996.08    
  41  0.465723     -0.764164      -392.831       392.831       1822.10       2214.93    
  42  0.916259     -0.874560E-01  -44.9581       44.9581       2381.96       2426.91    
  43  0.451376     -0.795456      -408.917       408.917       1998.98       2407.90    
  44  0.414090     -0.881672      -453.238       453.238       2092.67       2545.91    
  45  0.273092      -1.29795      -667.230       667.230       1897.70       2564.93    
  46  0.361379      -1.01783      -523.230       523.230       1814.86       2338.09    
  47  0.548848     -0.599934      -308.405       308.405       1835.98       2144.38    
  48  0.832309     -0.183552      -94.3579       94.3579       1987.78       2082.14    
  49  0.673017     -0.395985      -203.562       203.562       1991.50       2195.06    
  50  0.692516     -0.367425      -188.880       188.880       2214.87       2403.75    
  51  0.354468E-01  -3.33972      -1716.84       1716.84       1789.28       3506.12    
  52  0.987850     -0.122240E-01  -6.28392       6.28392       1863.70       1869.99    
  53  0.659676     -0.416007      -213.855       213.855       2515.97       2729.83    
  54  0.276145      -1.28683      -661.516       661.516       1491.51       2153.02    
  55  0.426927     -0.851141      -437.543       437.543       1730.22       2167.77    
  56  0.221817      -1.50590      -774.132       774.132       2074.74       2848.87    
  57  0.911956     -0.921634E-01  -47.3781       47.3781       2512.88       2560.25    
  58  0.791973     -0.233228      -119.894       119.894       2024.84       2144.73    
  59  0.805447     -0.216358      -111.222       111.222       3238.44       3349.67    
  60  0.887840     -0.118963      -61.1550       61.1550       1703.70       1764.86    
  61  0.978176     -0.220657E-01  -11.3432       11.3432       1986.20       1997.55    
  62  0.539899     -0.616372      -316.856       316.856       1838.47       2155.33    
  63  0.313742      -1.15918      -595.897       595.897       1764.77       2360.67    
  64  0.355768      -1.03348      -531.275       531.275       1715.30       2246.57    
loop,thermsimp(1:2)        4   63.8274       1115.52    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       1871.71         68.96          1.18         40.76          0.12          0.05        111.07
Just calling func    0   0        111.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1871.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        4
neval is:       70
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        5
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       70     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -16.6186       16.6186       1352.25       1368.87    
   2  0.384676     -0.955353      -491.114       491.114       1479.12       1970.23    
   3  0.472770     -0.749146      -385.111       385.111       1703.70       2088.81    
   4  0.131186      -2.03114      -1044.14       1044.14       1644.66       2688.80    
   5  0.387497     -0.948046      -487.358       487.358       1717.77       2205.13    
   6  0.474858     -0.744739      -382.845       382.845       1618.35       2001.19    
   7  0.654056     -0.424563      -218.253       218.253       1863.70       2081.96    
   8  0.375266     -0.980119      -503.846       503.846       1740.78       2244.62    
   9  0.605577     -0.501574      -257.842       257.842       1770.52       2028.37    
  10  0.485605     -0.722360      -371.341       371.341       1713.55       2084.89    
  11  0.503843     -0.685490      -352.387       352.387       1848.90       2201.28    
  12  0.374521     -0.982108      -504.868       504.868       1745.28       2250.15    
  13  0.955542E-01  -2.34806      -1207.06       1207.06       1788.40       2995.46    
  14  0.902567     -0.102512      -52.6980       52.6980       1802.34       1855.04    
  15  0.347215      -1.05781      -543.784       543.784       1842.53       2386.31    
  16  0.893138     -0.113014      -58.0967       58.0967       1761.42       1819.52    
  17  0.561145     -0.577776      -297.015       297.015       1986.20       2283.22    
  18  0.667287     -0.404536      -207.958       207.958       1793.12       2001.08    
  19  0.601102     -0.508991      -261.655       261.655       1739.04       2000.69    
  20  0.569928     -0.562245      -289.031       289.031       1987.78       2276.81    
  21  0.655926     -0.421708      -216.786       216.786       1843.55       2060.34    
  22  0.355892      -1.03313      -531.095       531.095       1456.43       1987.53    
  23  0.208013      -1.57015      -807.162       807.162       1761.85       2569.01    
  24  0.879772     -0.128093      -65.8481       65.8481       1771.81       1837.65    
  25  0.114206E-01  -4.47233      -2299.07       2299.07       1835.98       4135.05    
  26  0.950245     -0.510357E-01  -26.2357       26.2357       2024.84       2051.07    
  27  0.321268      -1.13548      -583.711       583.711       1491.51       2075.22    
  28  0.379005     -0.970207      -498.750       498.750       1838.47       2337.22    
  29  0.117960      -2.13741      -1098.77       1098.77       1768.15       2866.92    
  30  0.822558     -0.195337      -100.416       100.416       1730.22       1830.64    
  31  0.671085     -0.398860      -205.040       205.040       1867.17       2072.21    
  32  0.220279      -1.51286      -777.710       777.710       2155.99       2933.70    
  33  0.836335     -0.178727      -91.8772       91.8772       1991.50       2083.38    
  34  0.982442E-01  -2.32030      -1192.79       1192.79       1721.08       2913.87    
  35  0.912526     -0.915389E-01  -47.0570       47.0570       1822.10       1869.16    
  36  0.758802     -0.276015      -141.890       141.890       1715.30       1857.19    
  37  0.562651     -0.575096      -295.637       295.637       1832.49       2128.13    
  38  0.248142      -1.39375      -716.482       716.482       1958.45       2674.94    
  39  0.864881     -0.145163      -74.6234       74.6234       1814.86       1889.48    
  40  0.495151     -0.702893      -361.333       361.333       1764.77       2126.10    
  41  0.112352E-01  -4.48870      -2307.49       2307.49       2214.87       4522.36    
  42  0.745500     -0.293700      -150.981       150.981       1998.98       2149.96    
  43  0.405071     -0.903693      -464.558       464.558       1632.99       2097.55    
  44  0.617259     -0.482466      -248.020       248.020       2125.36       2373.38    
  45  0.992755     -0.727089E-02  -3.73772       3.73772       2381.96       2385.69    
  46  0.888739     -0.117952      -60.6352       60.6352       1688.88       1749.51    
  47  0.976701     -0.235748E-01  -12.1190       12.1190       1783.37       1795.49    
  48  0.461976     -0.772242      -396.983       396.983       2092.67       2489.65    
  49  0.150581      -1.89325      -973.256       973.256       2512.88       3486.13    
  50  0.726286E-01  -2.62240      -1348.08       1348.08       1897.70       3245.79    
  51  0.280837      -1.26998      -652.854       652.854       1790.22       2443.08    
  52  0.727959     -0.317510      -163.221       163.221       1518.51       1681.74    
  53  0.565225     -0.570532      -293.291       293.291       1744.49       2037.78    
  54  0.884775     -0.122422      -62.9332       62.9332       1691.76       1754.69    
  55  0.289837      -1.23844      -636.639       636.639       2515.97       3152.61    
  56  0.282389      -1.26447      -650.021       650.021       2074.74       2724.76    
  57  0.737455     -0.304550      -156.559       156.559       1943.19       2099.75    
  58  0.436668E-02  -5.43375      -2793.31       2793.31       2035.33       4828.64    
  59  0.809492     -0.211348      -108.647       108.647       1825.77       1934.41    
  60  0.957786E-01  -2.34572      -1205.85       1205.85       3238.44       4444.30    
  61  0.335750      -1.09139      -561.046       561.046       1789.28       2350.33    
  62  0.687327     -0.374945      -192.746       192.746       1708.53       1901.28    
  63  0.340103      -1.07851      -554.423       554.423       2074.91       2629.33    
  64  0.902520     -0.102564      -52.7246       52.7246       1871.71       1924.43    
loop,thermsimp(1:2)        5   16.6186       491.114    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72       1902.66         69.06          1.26         40.53          0.00          0.05        110.90
Just calling func    0   0        110.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1902.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        5
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        6
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       71     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -110.720       110.720       1352.25       1462.97    
   2  0.337878      -1.08507      -557.798       557.798       1518.51       2076.31    
   3  0.930612     -0.719127E-01  -36.9679       36.9679       1688.88       1725.85    
   4  0.843645     -0.170024      -87.4034       87.4034       1691.76       1779.16    
   5  0.757799     -0.277337      -142.569       142.569       1783.37       1925.94    
   6  0.627925     -0.465335      -239.213       239.213       1761.42       2000.63    
   7  0.412314     -0.885971      -455.447       455.447       1730.22       2185.67    
   8  0.282274      -1.26488      -650.230       650.230       1771.81       2422.04    
   9  0.426609E-01  -3.15447      -1621.61       1621.61       1802.34       3423.95    
  10  0.484876     -0.723862      -372.113       372.113       1715.30       2087.41    
  11  0.372210     -0.988296      -508.049       508.049       1822.10       2330.15    
  12  0.740507     -0.300421      -154.436       154.436       1814.86       1969.29    
  13  0.361519      -1.01744      -523.032       523.032       1708.53       2231.56    
  14  0.421034     -0.865042      -444.689       444.689       1871.71       2316.40    
  15  0.780595     -0.247699      -127.334       127.334       1825.77       1953.10    
  16  0.758410     -0.276531      -142.155       142.155       1479.12       1621.27    
  17  0.522921E-01  -2.95091      -1516.96       1516.96       1456.43       2973.39    
  18  0.609673     -0.494833      -254.377       254.377       1739.04       1993.41    
  19  0.204029      -1.58949      -817.103       817.103       1793.12       2610.22    
  20  0.516385     -0.660902      -339.747       339.747       1618.35       1958.09    
  21  0.323918      -1.12726      -579.488       579.488       1770.52       2350.01    
  22  0.671820     -0.397765      -204.478       204.478       1744.49       1948.97    
  23  0.850344     -0.162114      -83.3372       83.3372       2024.84       2108.17    
  24  0.515631     -0.662364      -340.499       340.499       1843.55       2184.05    
  25  0.919408     -0.840249E-01  -43.1943       43.1943       1867.17       1910.36    
  26  0.516519     -0.660643      -339.614       339.614       1491.51       1831.12    
  27  0.986900     -0.131869E-01  -6.77892       6.77892       1863.70       1870.48    
  28  0.127351      -2.06081      -1059.39       1059.39       1991.50       3050.89    
  29  0.775028E-01  -2.55744      -1314.69       1314.69       1713.55       3028.25    
  30  0.778307     -0.250634      -128.842       128.842       1703.70       1832.55    
  31  0.548570     -0.600441      -308.666       308.666       1632.99       1941.66    
  32  0.191672      -1.65197      -849.221       849.221       1943.19       2792.41    
  33  0.593733     -0.521326      -267.996       267.996       1764.77       2032.77    
  34  0.612853     -0.489631      -251.703       251.703       1832.49       2084.19    
  35  0.872749     -0.136107      -69.9679       69.9679       1998.98       2068.95    
  36  0.291105E-01  -3.53666      -1818.08       1818.08       1848.90       3666.97    
  37  0.310804      -1.16859      -600.733       600.733       1717.77       2318.50    
  38  0.238051      -1.43527      -737.824       737.824       1740.78       2478.60    
  39  0.600295     -0.510334      -262.345       262.345       1745.28       2007.62    
  40  0.856575     -0.154813      -79.5842       79.5842       1987.78       2067.36    
  41  0.127990      -2.05580      -1056.82       1056.82       1986.20       3043.02    
  42  0.390396E-01  -3.24318      -1667.21       1667.21       1838.47       3505.68    
  43  0.469298E-01  -3.05910      -1572.58       1572.58       1789.28       3361.86    
  44  0.170208      -1.77073      -910.274       910.274       2125.36       3035.63    
  45  0.457801     -0.781320      -401.650       401.650       2381.96       2783.61    
  46  0.451589     -0.794982      -408.673       408.673       1842.53       2251.20    
  47  0.601844     -0.507757      -261.020       261.020       1790.22       2051.24    
  48  0.923684     -0.793857E-01  -40.8095       40.8095       2092.67       2133.48    
  49  0.113154      -2.17901      -1120.15       1120.15       1761.85       2882.00    
  50  0.652894     -0.426340      -219.167       219.167       2074.91       2294.08    
  51  0.600010     -0.510809      -262.589       262.589       1958.45       2221.04    
  52  0.768679     -0.263082      -135.241       135.241       1644.66       1779.90    
  53  0.999310     -0.690144E-03 -0.354779      0.354779       2074.74       2075.09    
  54  0.798907     -0.224511      -115.413       115.413       1768.15       1883.56    
  55  0.246243      -1.40144      -720.431       720.431       1721.08       2441.51    
  56  0.798424     -0.225115      -115.724       115.724       2155.99       2271.71    
  57  0.120926      -2.11257      -1086.00       1086.00       1788.40       2874.40    
  58  0.771675     -0.259192      -133.242       133.242       2515.97       2649.21    
  59  0.670629     -0.399540      -205.390       205.390       1897.70       2103.09    
  60  0.127505      -2.05960      -1058.77       1058.77       2512.88       3571.65    
  61  0.375387     -0.979799      -503.681       503.681       1835.98       2339.66    
  62  0.572534E-01  -2.86027      -1470.37       1470.37       3238.44       4708.81    
  63  0.358654      -1.02540      -527.121       527.121       2214.87       2741.99    
  64  0.903087     -0.101937      -52.4023       52.4023       1902.66       1955.07    
loop,thermsimp(1:2)        6   110.720       557.798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73       1635.29         68.99          1.22         40.52          0.00          0.04        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74       1584.73         69.01          1.15         40.66          0.08          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1584.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        6
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        7
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       73     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1099.84       1099.84       1352.25       2452.10    
   2  0.421875     -0.863045      -443.662       443.662       1479.12       1922.78    
   3  0.700103     -0.356528      -183.279       183.279       1688.88       1872.16    
   4  0.209367      -1.56367      -803.828       803.828       1691.76       2495.59    
   5  0.117251      -2.14344      -1101.87       1101.87       1644.66       2746.53    
   6  0.898330     -0.107218      -55.1169       55.1169       1491.51       1546.62    
   7  0.209806      -1.56157      -802.751       802.751       1703.70       2506.45    
   8  0.917155     -0.864790E-01  -44.4559       44.4559       1863.70       1908.16    
   9  0.120514E-01  -4.41857      -2271.44       2271.44       1768.15       4039.59    
  10  0.189983      -1.66082      -853.773       853.773       1867.17       2720.94    
  11  0.257131      -1.35817      -698.188       698.188       1783.37       2481.55    
  12  0.913158E-01  -2.39343      -1230.38       1230.38       1632.99       2863.37    
  13  0.336531      -1.08906      -559.851       559.851       1744.49       2304.34    
  14  0.318351      -1.14460      -588.400       588.400       1825.77       2414.17    
  15  0.919606     -0.838101E-01  -43.0839       43.0839       1902.66       1945.75    
  16  0.719771E-01  -2.63141      -1352.72       1352.72       1618.35       2971.06    
  17  0.788730E-01  -2.53992      -1305.68       1305.68       1814.86       3120.54    
  18  0.905929     -0.987941E-01  -50.7867       50.7867       1739.04       1789.82    
  19  0.665501     -0.407215      -209.336       209.336       1761.42       1970.76    
  20  0.812159     -0.208059      -106.956       106.956       1745.28       1852.23    
  21  0.412726E-01  -3.18756      -1638.61       1638.61       1764.77       3403.39    
  22  0.256064      -1.36233      -700.326       700.326       1790.22       2490.55    
  23  0.277519      -1.28187      -658.964       658.964       1987.78       2646.74    
  24  0.279550      -1.27457      -655.215       655.215       1998.98       2654.19    
  25  0.857884     -0.153286      -78.7992       78.7992       2074.74       2153.54    
  26  0.205158      -1.58398      -814.268       814.268       1518.51       2332.78    
  27  0.482085     -0.729635      -375.081       375.081       1832.49       2207.57    
  28  0.494966E-01  -3.00585      -1545.21       1545.21       1715.30       3260.50    
  29  0.338791      -1.08237      -556.411       556.411       1897.70       2454.11    
  30  0.249491E-01  -3.69092      -1897.37       1897.37       2024.84       3922.21    
  31  0.480710     -0.732491      -376.549       376.549       2092.67       2469.22    
  32  0.908951E-01  -2.39805      -1232.76       1232.76       1843.55       3076.31    
  33  0.283223      -1.26152      -648.506       648.506       1730.22       2378.73    
  34  0.277734      -1.28109      -658.565       658.565       1958.45       2617.02    
  35  0.504407     -0.684372      -351.813       351.813       1708.53       2060.34    
  36  0.251881      -1.37880      -708.793       708.793       1842.53       2551.32    
  37  0.568193     -0.565294      -290.598       290.598       2155.99       2446.59    
  38  0.186135      -1.68128      -864.289       864.289       2074.91       2939.20    
  39  0.964582     -0.360604E-01  -18.5374       18.5374       1871.71       1890.25    
  40  0.493045     -0.707155      -363.524       363.524       1717.77       2081.29    
  41  0.477950     -0.738248      -379.508       379.508       1822.10       2201.61    
  42  0.114879      -2.16388      -1112.37       1112.37       1835.98       2948.35    
  43  0.324003      -1.12700      -579.353       579.353       1770.52       2349.88    
  44  0.720573     -0.327708      -168.464       168.464       1771.81       1940.27    
  45  0.934913     -0.673019E-01  -34.5976       34.5976       1721.08       1755.68    
  46  0.516467     -0.660745      -339.666       339.666       1740.78       2080.44    
  47  0.351513      -1.04551      -537.460       537.460       1793.12       2330.58    
  48  0.310221      -1.17047      -601.700       601.700       2515.97       3117.67    
  49  0.467571     -0.760204      -390.795       390.795       2214.87       2605.67    
  50  0.700644     -0.355756      -182.882       182.882       2381.96       2564.84    
  51  0.608579E-01  -2.79921      -1438.98       1438.98       1943.19       3382.17    
  52  0.360106      -1.02136      -525.045       525.045       1788.40       2313.44    
  53  0.355744      -1.03354      -531.310       531.310       1761.85       2293.16    
  54  0.356778      -1.03064      -529.817       529.817       1456.43       1986.25    
  55  0.209214      -1.56440      -804.204       804.204       1713.55       2517.76    
  56  0.513034     -0.667413      -343.094       343.094       2125.36       2468.45    
  57  0.131750      -2.02685      -1041.93       1041.93       1986.20       3028.14    
  58  0.860948     -0.149721      -76.9663       76.9663       1991.50       2068.47    
  59  0.245301      -1.40527      -722.400       722.400       1789.28       2511.68    
  60  0.411604     -0.887695      -456.333       456.333       1802.34       2258.67    
  61  0.444838     -0.810046      -416.417       416.417       1838.47       2254.89    
  62  0.173997      -1.74872      -898.956       898.956       2512.88       3411.83    
  63  0.616177     -0.484222      -248.922       248.922       1848.90       2097.82    
  64  0.794601     -0.229915      -118.192       118.192       1584.73       1702.92    
loop,thermsimp(1:2)        7   1099.84       443.662    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75       1696.82         69.10          1.16         40.36          0.24          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     76       1624.05         69.03          1.14         40.33          0.37          0.04        110.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1624.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        7
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        8
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       75     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -369.443       369.443       1491.51       1860.95    
   2  0.568497     -0.564760      -290.324       290.324       1584.73       1875.05    
   3  0.632037E-01  -2.76139      -1419.54       1419.54       1721.08       3140.62    
   4  0.184325      -1.69105      -869.312       869.312       1739.04       2608.35    
   5  0.949772     -0.515332E-01  -26.4914       26.4914       1745.28       1771.77    
   6  0.512179     -0.669081      -343.952       343.952       1688.88       2032.83    
   7  0.573767     -0.555532      -285.580       285.580       1871.71       2157.29    
   8  0.590189     -0.527312      -271.073       271.073       1863.70       2134.78    
   9  0.323917      -1.12727      -579.490       579.490       1479.12       2058.61    
  10  0.246420E-01  -3.70330      -1903.74       1903.74       1771.81       3675.55    
  11  0.923153E-01  -2.38255      -1224.79       1224.79       1902.66       3127.45    
  12  0.236043      -1.44374      -742.179       742.179       1761.42       2503.60    
  13  0.885388     -0.121730      -62.5770       62.5770       1456.43       1519.01    
  14  0.617726     -0.481710      -247.631       247.631       1708.53       1956.16    
  15  0.349992      -1.04985      -539.690       539.690       1991.50       2531.19    
  16  0.892028     -0.114257      -58.7358       58.7358       1740.78       1799.51    
  17  0.382423     -0.961227      -494.134       494.134       1717.77       2211.90    
  18  0.850527     -0.161899      -83.2270       83.2270       1848.90       1932.12    
  19  0.653461     -0.425472      -218.721       218.721       2074.74       2293.46    
  20  0.413959     -0.881988      -453.400       453.400       1822.10       2275.50    
  21  0.807813     -0.213424      -109.714       109.714       1832.49       1942.21    
  22  0.348045      -1.05542      -542.557       542.557       1838.47       2381.03    
  23  0.435267     -0.831795      -427.597       427.597       1802.34       2229.94    
  24  0.434284     -0.834056      -428.760       428.760       1761.85       2190.60    
  25  0.983564     -0.165728E-01  -8.51953       8.51953       1744.49       1753.01    
  26  0.545923     -0.605277      -311.152       311.152       1788.40       2099.55    
  27  0.227140      -1.48219      -761.942       761.942       1793.12       2555.06    
  28  0.965085     -0.355395E-01  -18.2697       18.2697       1518.51       1536.78    
  29  0.183882      -1.69346      -870.549       870.549       1770.52       2641.07    
  30  0.187300E-02  -6.28022      -3228.44       3228.44       1730.22       4958.67    
  31  0.428736     -0.846914      -435.369       435.369       1825.77       2261.14    
  32  0.459764     -0.777041      -399.451       399.451       2155.99       2555.44    
  33  0.914786     -0.890649E-01  -45.7852       45.7852       1352.25       1398.04    
  34  0.872236     -0.136696      -70.2705       70.2705       1897.70       1967.97    
  35  0.789367     -0.236524      -121.589       121.589       2125.36       2246.95    
  36  0.619233E-01  -2.78186      -1430.06       1430.06       2092.67       3522.73    
  37  0.138004E-01  -4.28306      -2201.77       2201.77       1783.37       3985.14    
  38  0.287035      -1.24815      -641.631       641.631       1790.22       2431.85    
  39  0.138758E-01  -4.27761      -2198.97       2198.97       1691.76       3890.73    
  40  0.593330     -0.522005      -268.345       268.345       1703.70       1972.05    
  41  0.399445     -0.917679      -471.747       471.747       1789.28       2261.03    
  42  0.982947     -0.172001E-01  -8.84201       8.84201       1713.55       1722.39    
  43  0.259534      -1.34887      -693.406       693.406       1842.53       2535.93    
  44  0.816592E-01  -2.50520      -1287.84       1287.84       2381.96       3669.79    
  45  0.166083      -1.79527      -922.886       922.886       2214.87       3137.76    
  46  0.967370     -0.331741E-01  -17.0537       17.0537       1958.45       1975.51    
  47  0.371024     -0.991488      -509.690       509.690       1987.78       2497.47    
  48  0.941964     -0.597885E-01  -30.7352       30.7352       1998.98       2029.71    
  49  0.130219      -2.03854      -1047.94       1047.94       1867.17       2915.11    
  50  0.599455     -0.511734      -263.065       263.065       1644.66       1907.72    
  51  0.519323     -0.655230      -336.831       336.831       1632.99       1969.82    
  52  0.829175     -0.187324      -96.2971       96.2971       2074.91       2171.21    
  53  0.341525      -1.07433      -552.278       552.278       1835.98       2388.25    
  54  0.686480     -0.376178      -193.380       193.380       1618.35       1811.73    
  55  0.273157      -1.29771      -667.108       667.108       1986.20       2653.31    
  56  0.472999     -0.748662      -384.862       384.862       1843.55       2228.41    
  57  0.591611     -0.524905      -269.836       269.836       2515.97       2785.81    
  58  0.253673      -1.37171      -705.149       705.149       1814.86       2520.01    
  59  0.522398     -0.649326      -333.796       333.796       1715.30       2049.09    
  60  0.927744     -0.749995E-01  -38.5547       38.5547       1943.19       1981.74    
  61  0.470581     -0.753787      -387.496       387.496       1764.77       2152.27    
  62  0.365015      -1.00782      -518.084       518.084       2512.88       3030.96    
  63  0.732288     -0.311582      -160.174       160.174       2024.84       2185.01    
  64  0.536772E-01  -2.92477      -1503.52       1503.52       1624.05       3127.57    
loop,thermsimp(1:2)        8   369.443       290.324    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77       1552.58         69.10          1.17         40.38          0.31          0.05        111.00
Just calling func    0   0        111.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1552.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        8
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:        9
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       76     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1250.40       1250.40       1352.25       2602.65    
   2  0.192227      -1.64908      -847.735       847.735       1456.43       2304.17    
   3  0.872733     -0.136126      -69.9778       69.9778       1518.51       1588.49    
   4  0.444113     -0.811675      -417.255       417.255       1713.55       2130.81    
   5  0.194382      -1.63793      -842.005       842.005       1744.49       2586.49    
   6  0.358074      -1.02702      -527.954       527.954       1745.28       2273.23    
   7  0.461693     -0.772855      -397.298       397.298       1740.78       2138.08    
   8  0.180202      -1.71368      -880.944       880.944       1618.35       2499.29    
   9  0.944954     -0.566187E-01  -29.1058       29.1058       1491.51       1520.61    
  10  0.738770     -0.302769      -155.643       155.643       1584.73       1740.37    
  11  0.822491E-01  -2.49800      -1284.14       1284.14       1644.66       2928.80    
  12  0.313602      -1.15963      -596.126       596.126       1848.90       2445.02    
  13  0.978185     -0.220567E-01  -11.3386       11.3386       1832.49       1843.83    
  14  0.540591E-01  -2.91768      -1499.88       1499.88       1708.53       3208.41    
  15  0.872885     -0.135951      -69.8878       69.8878       1897.70       1967.59    
  16  0.209079      -1.56504      -804.534       804.534       1632.99       2437.52    
  17  0.789205E-01  -2.53931      -1305.37       1305.37       1703.70       3009.08    
  18  0.746404     -0.292489      -150.358       150.358       1958.45       2108.81    
  19  0.110219      -2.20529      -1133.66       1133.66       1943.19       3076.85    
  20  0.656016     -0.421570      -216.715       216.715       1998.98       2215.69    
  21  0.665675     -0.406953      -209.201       209.201       1688.88       1898.08    
  22  0.563292     -0.573957      -295.052       295.052       1715.30       2010.35    
  23  0.615044     -0.486062      -249.868       249.868       1479.12       1728.98    
  24  0.128081      -2.05509      -1056.45       1056.45       1788.40       2844.85    
  25  0.459916     -0.776711      -399.281       399.281       1863.70       2262.98    
  26  0.433297     -0.836332      -429.930       429.930       1764.77       2194.70    
  27  0.225675      -1.48866      -765.269       765.269       1871.71       2636.98    
  28  0.808805     -0.212197      -109.083       109.083       2074.91       2183.99    
  29  0.578238     -0.547770      -281.590       281.590       2024.84       2306.43    
  30  0.569572     -0.562871      -289.353       289.353       1761.85       2051.20    
  31  0.291272      -1.23350      -634.099       634.099       1717.77       2351.87    
  32  0.144426      -1.93499      -994.710       994.710       1843.55       2838.26    
  33  0.908321     -0.961572E-01  -49.4311       49.4311       1802.34       1851.77    
  34  0.593166     -0.522281      -268.487       268.487       2125.36       2393.84    
  35  0.327630      -1.11587      -573.632       573.632       1789.28       2362.91    
  36  0.823214E-01  -2.49712      -1283.69       1283.69       1825.77       3109.45    
  37  0.742531     -0.297691      -153.033       153.033       1822.10       1975.13    
  38  0.476201E-01  -3.04450      -1565.07       1565.07       2074.74       3639.81    
  39  0.183829      -1.69375      -870.699       870.699       1838.47       2709.17    
  40  0.417257     -0.874053      -449.321       449.321       1835.98       2285.30    
  41  0.647723E-01  -2.73688      -1406.94       1406.94       1790.22       3197.16    
  42  0.123950E-01  -4.39046      -2256.99       2256.99       1987.78       4244.77    
  43  0.281372E-01  -3.57066      -1835.56       1835.56       1761.42       3596.98    
  44  0.883044     -0.124380      -63.9395       63.9395       1814.86       1878.80    
  45  0.445413     -0.808754      -415.753       415.753       1991.50       2407.25    
  46  0.418101     -0.872031      -448.281       448.281       1842.53       2290.81    
  47  0.301534      -1.19887      -616.300       616.300       1793.12       2409.42    
  48  0.674500     -0.393783      -202.430       202.430       2155.99       2358.42    
  49  0.732783     -0.310905      -159.826       159.826       1739.04       1898.86    
  50  0.970355     -0.300929E-01  -15.4698       15.4698       1770.52       1785.99    
  51  0.981589     -0.185824E-01  -9.55258       9.55258       1986.20       1995.75    
  52  0.677253     -0.389711      -200.337       200.337       2515.97       2716.31    
  53  0.800731     -0.222230      -114.241       114.241       1867.17       1981.41    
  54  0.529544     -0.635738      -326.811       326.811       2512.88       2839.69    
  55  0.814619     -0.205035      -105.401       105.401       1902.66       2008.06    
  56  0.909218     -0.951702E-01  -48.9237       48.9237       1624.05       1672.97    
  57  0.269472      -1.31129      -674.090       674.090       2214.87       2888.96    
  58  0.166504      -1.79274      -921.584       921.584       1721.08       2642.67    
  59  0.328775      -1.11238      -571.837       571.837       2092.67       2664.51    
  60  0.333602      -1.09781      -564.346       564.346       2381.96       2946.30    
  61  0.213893      -1.54228      -792.833       792.833       1771.81       2564.64    
  62  0.401720     -0.911999      -468.828       468.828       1691.76       2160.59    
  63  0.453769     -0.790168      -406.198       406.198       1783.37       2189.56    
  64  0.649690E-01  -2.73384      -1405.38       1405.38       1552.58       2957.95    
loop,thermsimp(1:2)        9   1250.40       847.735    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78       1718.33         69.19          1.16         40.23          0.24          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79       2771.61         69.09          1.23         40.60          0.00          0.04        110.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1718.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:        9
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       10
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       78     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -252.581       252.581       1491.51       1744.09    
   2  0.877337     -0.130865      -67.2731       67.2731       1518.51       1585.79    
   3  0.821280     -0.196891      -101.215       101.215       1624.05       1725.26    
   4  0.989636     -0.104181E-01  -5.35559       5.35559       1479.12       1484.47    
   5  0.492813     -0.707625      -363.766       363.766       1584.73       1948.50    
   6  0.904083     -0.100835      -51.8356       51.8356       1770.52       1822.36    
   7  0.490620     -0.712086      -366.059       366.059       1832.49       2198.55    
   8  0.572439     -0.557850      -286.771       286.771       1802.34       2089.11    
   9  0.588753     -0.529749      -272.326       272.326       1814.86       2087.18    
  10  0.341799      -1.07353      -551.866       551.866       1688.88       2240.74    
  11  0.449605     -0.799385      -410.937       410.937       1739.04       2149.97    
  12  0.740720     -0.300132      -154.288       154.288       1897.70       2051.99    
  13  0.173164E-01  -4.05610      -2085.10       2085.10       1822.10       3907.20    
  14  0.828389     -0.188272      -96.7842       96.7842       1867.17       1963.95    
  15  0.110451      -2.20318      -1132.58       1132.58       1986.20       3118.78    
  16  0.646816     -0.435693      -223.975       223.975       1902.66       2126.64    
  17  0.857676     -0.153529      -78.9238       78.9238       1715.30       1794.22    
  18  0.691202E-02  -4.97449      -2557.22       2557.22       1761.85       4319.06    
  19  0.530885     -0.633210      -325.512       325.512       1958.45       2283.97    
  20  0.742957     -0.297117      -152.738       152.738       1713.55       1866.29    
  21  0.883526E-01  -2.42642      -1247.34       1247.34       1740.78       2988.12    
  22  0.599138     -0.512263      -263.337       263.337       1691.76       1955.10    
  23  0.476407     -0.741482      -381.171       381.171       2074.91       2456.08    
  24  0.509994E-01  -2.97594      -1529.83       1529.83       1783.37       3313.20    
  25  0.669768     -0.400824      -206.050       206.050       1764.77       1970.82    
  26  0.874430     -0.134183      -68.9788       68.9788       1998.98       2067.96    
  27  0.830739     -0.185440      -95.3281       95.3281       1863.70       1959.03    
  28  0.166673      -1.79172      -921.064       921.064       1745.28       2666.34    
  29  0.578742     -0.546898      -281.141       281.141       1835.98       2117.12    
  30  0.433531     -0.835791      -429.652       429.652       1842.53       2272.18    
  31  0.979127     -0.210935E-01  -10.8434       10.8434       1456.43       1467.28    
  32  0.310252      -1.17037      -601.648       601.648       2024.84       2626.48    
  33  0.686879     -0.375597      -193.082       193.082       1717.77       1910.85    
  34  0.243104      -1.41427      -727.026       727.026       2155.99       2883.02    
  35  0.459407     -0.777818      -399.850       399.850       1789.28       2189.13    
  36  0.332163      -1.10213      -566.567       566.567       2125.36       2691.92    
  37  0.512243     -0.668956      -343.887       343.887       1991.50       2335.39    
  38  0.323240      -1.12936      -580.566       580.566       1793.12       2373.69    
  39  0.667455     -0.404284      -207.828       207.828       1632.99       1840.82    
  40  0.460037     -0.776449      -399.146       399.146       1848.90       2248.04    
  41  0.227415      -1.48098      -761.320       761.320       1618.35       2379.67    
  42  0.636494     -0.451780      -232.245       232.245       1771.81       2004.05    
  43  0.432078     -0.839149      -431.378       431.378       1744.49       2175.87    
  44  0.609015     -0.495913      -254.932       254.932       1352.25       1607.19    
  45  0.427755     -0.849205      -436.547       436.547       1871.71       2308.26    
  46  0.496712     -0.699745      -359.715       359.715       1721.08       2080.80    
  47  0.295308      -1.21974      -627.025       627.025       2092.67       2719.69    
  48  0.928979     -0.736692E-01  -37.8708       37.8708       1838.47       1876.34    
  49  0.245696E-01  -3.70625      -1905.25       1905.25       2515.97       4421.23    
  50  0.833617E-01  -2.48457      -1277.23       1277.23       1843.55       3120.78    
  51  0.499690     -0.693767      -356.642       356.642       2512.88       2869.52    
  52  0.320552      -1.13771      -584.858       584.858       1788.40       2373.26    
  53  0.151030E-01  -4.19286      -2155.41       2155.41       2214.87       4370.28    
  54  0.551054     -0.595922      -306.343       306.343       1644.66       1951.00    
  55  0.786630     -0.239997      -123.374       123.374       2381.96       2505.33    
  56  0.793760E-01  -2.53356      -1302.42       1302.42       1552.58       2854.99    
  57  0.456771     -0.783574      -402.809       402.809       1703.70       2106.51    
  58  0.613263     -0.488962      -251.358       251.358       1943.19       2194.55    
  59  0.407581     -0.897515      -461.382       461.382       1825.77       2287.15    
  60  0.214329      -1.54024      -791.785       791.785       1790.22       2582.01    
  61  0.543052     -0.610551      -313.863       313.863       1708.53       2022.39    
  62  0.861407     -0.149188      -76.6925       76.6925       1761.42       1838.11    
  63  0.727563     -0.318055      -163.501       163.501       2074.74       2238.24    
  64  0.954867     -0.461830E-01  -23.7411       23.7411       1718.33       1742.07    
loop,thermsimp(1:2)       10   252.581       67.2731    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80       1826.93         68.86          1.13         40.46          0.46          0.05        110.97
Just calling func    0   0        110.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1826.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       10
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       11
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       79     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -529.815       529.815       1456.43       1986.25    
   2  0.318207      -1.14505      -588.634       588.634       1479.12       2067.75    
   3  0.410972E-01  -3.19181      -1640.80       1640.80       1518.51       3159.32    
   4  0.217948      -1.52350      -783.178       783.178       1352.25       2135.43    
   5  0.460755     -0.774888      -398.344       398.344       1624.05       2022.39    
   6  0.694214     -0.364975      -187.621       187.621       1718.33       1905.95    
   7  0.237764      -1.43648      -738.443       738.443       1491.51       2229.95    
   8  0.635477     -0.453379      -233.067       233.067       1715.30       1948.36    
   9  0.882831E-01  -2.42721      -1247.74       1247.74       1770.52       3018.27    
  10  0.889613     -0.116969      -60.1297       60.1297       1761.42       1821.55    
  11  0.236395      -1.44225      -741.412       741.412       1632.99       2374.40    
  12  0.785560     -0.241359      -124.074       124.074       1713.55       1837.63    
  13  0.253594      -1.37202      -705.310       705.310       1838.47       2543.78    
  14  0.767743     -0.264300      -135.868       135.868       1717.77       1853.64    
  15  0.425111     -0.855405      -439.735       439.735       1584.73       2024.47    
  16  0.334680E-01  -3.39717      -1746.37       1746.37       1644.66       3391.02    
  17  0.737903     -0.303943      -156.247       156.247       1691.76       1848.01    
  18  0.530906     -0.633170      -325.491       325.491       1863.70       2189.19    
  19  0.811772     -0.208536      -107.201       107.201       1867.17       1974.37    
  20  0.781494     -0.246548      -126.742       126.742       1764.77       1891.51    
  21  0.668871     -0.402164      -206.739       206.739       1771.81       1978.55    
  22  0.609633     -0.494898      -254.410       254.410       1708.53       1962.94    
  23  0.732795E-01  -2.61347      -1343.50       1343.50       1897.70       3241.20    
  24  0.999755     -0.244962E-03 -0.125927      0.125927       1998.98       1999.11    
  25  0.556911     -0.585350      -300.909       300.909       1721.08       2021.99    
  26  0.381942     -0.962485      -494.781       494.781       1814.86       2309.64    
  27  0.230973      -1.46546      -753.341       753.341       1802.34       2555.68    
  28  0.791084     -0.234351      -120.472       120.472       1703.70       1824.18    
  29  0.122039      -2.10341      -1081.29       1081.29       1835.98       2917.27    
  30  0.411383     -0.888231      -456.609       456.609       1902.66       2359.27    
  31  0.753656     -0.282819      -145.388       145.388       1739.04       1884.43    
  32  0.846821     -0.166266      -85.4718       85.4718       1744.49       1829.96    
  33  0.577745     -0.548622      -282.028       282.028       1789.28       2071.31    
  34  0.859903     -0.150936      -77.5910       77.5910       1943.19       2020.78    
  35  0.915816     -0.879395E-01  -45.2067       45.2067       1832.49       1877.70    
  36  0.220499      -1.51186      -777.196       777.196       2074.74       2851.93    
  37  0.539962     -0.616256      -316.796       316.796       1688.88       2005.67    
  38  0.810725     -0.209827      -107.865       107.865       1848.90       1956.76    
  39  0.901567     -0.103621      -53.2679       53.2679       1842.53       1895.79    
  40  0.196148      -1.62888      -837.354       837.354       1958.45       2795.81    
  41  0.413437     -0.883250      -454.049       454.049       1825.77       2279.82    
  42  0.192892      -1.64562      -845.959       845.959       1871.71       2717.67    
  43  0.194290      -1.63840      -842.247       842.247       1991.50       2833.75    
  44  0.988313     -0.117563E-01  -6.04352       6.04352       1788.40       1794.44    
  45  0.917980     -0.855792E-01  -43.9933       43.9933       1793.12       1837.11    
  46  0.136083      -1.99449      -1025.30       1025.30       1618.35       2643.65    
  47  0.847126     -0.165905      -85.2863       85.2863       2074.91       2160.20    
  48  0.513003     -0.667474      -343.125       343.125       2381.96       2725.08    
  49  0.562161     -0.575967      -296.085       296.085       1790.22       2086.31    
  50  0.926079     -0.767957E-01  -39.4780       39.4780       2024.84       2064.32    
  51  0.890313     -0.116182      -59.7252       59.7252       1745.28       1805.00    
  52  0.857665     -0.153542      -78.9304       78.9304       2125.36       2204.29    
  53  0.599877     -0.511031      -262.704       262.704       2092.67       2355.37    
  54  0.835330     -0.179929      -92.4951       92.4951       1552.58       1645.07    
  55  0.323336      -1.12906      -580.413       580.413       2512.88       3093.29    
  56  0.305042      -1.18731      -610.353       610.353       2155.99       2766.34    
  57  0.980883     -0.193016E-01  -9.92230       9.92230       1740.78       1750.70    
  58  0.129682      -2.04267      -1050.07       1050.07       1986.20       3036.27    
  59  0.738352     -0.303335      -155.934       155.934       1843.55       1999.49    
  60  0.383117     -0.959416      -493.203       493.203       1783.37       2276.57    
  61  0.524900     -0.644547      -331.340       331.340       1822.10       2153.44    
  62  0.594829     -0.519481      -267.047       267.047       1761.85       2028.89    
  63  0.596925     -0.515963      -265.239       265.239       2214.87       2480.11    
  64  0.462523     -0.771060      -396.375       396.375       1826.93       2223.31    
loop,thermsimp(1:2)       11   529.815       588.634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       1674.94         69.29          1.23         40.41          0.00          0.05        110.97
Just calling func    0   0        110.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    1674.9       0.8203     -3.361      2.334     -102.6     0.1525    
                     -0.2393E-01 0.7709     -99.70      2.856     0.2829    

                       1.508     0.7475      2.012      7380.      7000.    

                      -1.931      0.000      0.000      0.000     -1.221    



                      -1.925      0.000      0.000      7000.      90.05    

                      -1.315     -2.895     -1.821     -3.621      1.255    

                      -2.672     -3.949      5136.      0.000      8616.    



                       3762.      6281.      8408.      3547.      4481.    

                       3866.     0.8425E-01 0.1394     0.8227E-01 0.1937    

                     -0.2486     0.2415     0.1969     0.2501     0.1087    



                      -1.017    -0.1120      0.000     0.4965E-01 0.6998E-01

                      0.1312     0.1754    -0.7116     0.2438     0.3030    

                      0.8800E-01 0.1853    -0.5086     -1.112      7000.    



                      -2.534     -1.664     -2.150     -2.241    -0.3807    

                     -0.3252      9.118      8.628    -0.1609E+05 -5.954    

                       0.000      0.000      9.118      8.628    -0.1969E+05



                      -6.000      0.000      0.000      8.885      9.128    

                     -0.1944E+05 -6.000      0.000      0.000      8.918    

                       9.089    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1674.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       11
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       12
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       80     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1324.90       1324.90       1552.58       2877.48    
   2  0.804470     -0.217571      -111.846       111.846       1740.78       1852.62    
   3  0.984017     -0.161120E-01  -8.28263       8.28263       1788.40       1796.68    
   4  0.587639     -0.531643      -273.299       273.299       1745.28       2018.58    
   5  0.523810     -0.646626      -332.408       332.408       1761.42       2093.83    
   6  0.930607     -0.719181E-01  -36.9706       36.9706       1703.70       1740.67    
   7  0.360114E-01  -3.32392      -1708.71       1708.71       1744.49       3453.20    
   8  0.963815     -0.368556E-01  -18.9462       18.9462       1793.12       1812.07    
   9  0.201264E-01  -3.90572      -2007.80       2007.80       1713.55       3721.35    
  10  0.954897     -0.461522E-01  -23.7253       23.7253       1691.76       1715.49    
  11  0.374160     -0.983071      -505.363       505.363       1717.77       2223.13    
  12  0.174967      -1.74316      -896.097       896.097       1832.49       2728.59    
  13  0.381618     -0.963335      -495.218       495.218       1739.04       2234.26    
  14  0.191097      -1.65498      -850.767       850.767       1764.77       2615.54    
  15  0.425287     -0.854991      -439.522       439.522       1842.53       2282.05    
  16  0.426180     -0.852893      -438.443       438.443       1718.33       2156.77    
  17  0.615671     -0.485042      -249.344       249.344       1715.30       1964.64    
  18  0.787264     -0.239192      -122.960       122.960       1848.90       1971.86    
  19  0.812636     -0.207472      -106.654       106.654       1708.53       1815.18    
  20  0.917241E-01  -2.38897      -1228.09       1228.09       1867.17       3095.26    
  21  0.671310     -0.398525      -204.868       204.868       1771.81       1976.67    
  22  0.548174     -0.601162      -309.037       309.037       1456.43       1765.47    
  23  0.134851      -2.00359      -1029.98       1029.98       1998.98       3028.95    
  24  0.373236     -0.985545      -506.635       506.635       1843.55       2350.19    
  25  0.578774     -0.546843      -281.113       281.113       1688.88       1969.99    
  26  0.910021     -0.942872E-01  -48.4698       48.4698       1943.19       1991.66    
  27  0.192323      -1.64858      -847.478       847.478       1721.08       2568.56    
  28  0.366342      -1.00419      -516.219       516.219       1624.05       2140.26    
  29  0.686994     -0.375430      -192.996       192.996       1584.73       1777.73    
  30  0.486551     -0.720414      -370.340       370.340       1761.85       2132.19    
  31  0.256801      -1.35945      -698.849       698.849       2024.84       2723.69    
  32  0.284977      -1.25535      -645.331       645.331       1479.12       2124.45    
  33  0.903072     -0.101953      -52.4103       52.4103       1789.28       1841.69    
  34  0.226450      -1.48523      -763.506       763.506       1790.22       2553.73    
  35  0.446078     -0.807261      -414.985       414.985       1352.25       1767.24    
  36  0.152634      -1.87971      -966.296       966.296       1822.10       2788.40    
  37  0.511955     -0.669518      -344.177       344.177       2074.91       2419.09    
  38  0.513138     -0.667210      -342.990       342.990       1863.70       2206.69    
  39  0.637309     -0.450501      -231.587       231.587       2125.36       2356.94    
  40  0.861477     -0.149107      -76.6508       76.6508       1826.93       1903.58    
  41  0.817364     -0.201671      -103.672       103.672       1491.51       1595.18    
  42  0.793820     -0.230898      -118.697       118.697       1783.37       1902.06    
  43  0.253309      -1.37315      -705.887       705.887       1825.77       2531.65    
  44  0.702532     -0.353065      -181.499       181.499       1814.86       1996.35    
  45  0.822324     -0.195620      -100.562       100.562       2092.67       2193.23    
  46  0.720485     -0.327831      -168.527       168.527       1902.66       2071.19    
  47  0.881589     -0.126029      -64.7874       64.7874       1632.99       1697.78    
  48  0.584479     -0.537035      -276.071       276.071       2214.87       2490.94    
  49  0.697197     -0.360688      -185.417       185.417       1838.47       2023.89    
  50  0.320931      -1.13653      -584.251       584.251       1802.34       2386.59    
  51  0.780071     -0.248371      -127.679       127.679       1618.35       1746.03    
  52  0.318322E-01  -3.44728      -1772.13       1772.13       1871.71       3643.84    
  53  0.693387     -0.366167      -188.234       188.234       2381.96       2570.19    
  54  0.332128      -1.10223      -566.621       566.621       2155.99       2722.61    
  55  0.891883E-01  -2.41701      -1242.50       1242.50       1958.45       3200.95    
  56  0.960735     -0.400567E-01  -20.5918       20.5918       1991.50       2012.09    
  57  0.726634     -0.319332      -164.158       164.158       2074.74       2238.90    
  58  0.867850     -0.141737      -72.8620       72.8620       1835.98       1908.84    
  59  0.960075     -0.407444E-01  -20.9453       20.9453       1770.52       1791.47    
  60  0.303374E-01  -3.49537      -1796.85       1796.85       1986.20       3783.05    
  61  0.159557      -1.83535      -943.492       943.492       2512.88       3456.37    
  62  0.487506     -0.718453      -369.332       369.332       1518.51       1887.85    
  63  0.978612E-01  -2.32420      -1194.79       1194.79       1897.70       3092.50    
  64  0.405010     -0.903843      -464.635       464.635       1674.94       2139.58    
loop,thermsimp(1:2)       12   1324.90       111.846    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82       1572.89         69.04          1.12         40.43          0.50          0.05        111.14
Just calling func    0   0        111.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83       1508.93         69.01          1.13         40.37          0.46          0.05        111.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1508.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       12
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       13
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       82     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -70.1528       70.1528       1491.51       1561.66    
   2  0.311340      -1.16687      -599.848       599.848       1632.99       2232.84    
   3  0.293828      -1.22476      -629.608       629.608       1691.76       2321.37    
   4  0.586668     -0.533296      -274.149       274.149       1703.70       1977.85    
   5  0.360311      -1.02079      -524.752       524.752       1618.35       2143.10    
   6  0.315643      -1.15314      -592.791       592.791       1456.43       2049.22    
   7  0.481464     -0.730923      -375.743       375.743       1352.25       1728.00    
   8  0.720279     -0.328116      -168.673       168.673       1584.73       1753.40    
   9  0.551471     -0.595166      -305.954       305.954       1770.52       2076.48    
  10  0.524434     -0.645435      -331.796       331.796       1788.40       2120.19    
  11  0.781600     -0.246412      -126.672       126.672       1793.12       1919.79    
  12  0.353648      -1.03945      -534.347       534.347       1708.53       2242.88    
  13  0.451044     -0.796190      -409.294       409.294       1789.28       2198.58    
  14  0.325353      -1.12284      -577.216       577.216       1740.78       2317.99    
  15  0.312157      -1.16425      -598.500       598.500       1518.51       2117.01    
  16  0.432418     -0.838362      -430.973       430.973       1783.37       2214.34    
  17  0.296543      -1.21556      -624.879       624.879       1826.93       2451.81    
  18  0.705416     -0.348967      -179.392       179.392       1835.98       2015.37    
  19  0.146505      -1.92069      -987.363       987.363       1715.30       2702.66    
  20  0.471608     -0.751607      -386.375       386.375       1688.88       2075.25    
  21  0.633095     -0.457134      -234.997       234.997       1848.90       2083.89    
  22  0.754855     -0.281230      -144.571       144.571       1771.81       1916.38    
  23  0.444501E-01  -3.11339      -1600.49       1600.49       1943.19       3543.68    
  24  0.160973      -1.82652      -938.950       938.950       1814.86       2753.81    
  25  0.943694     -0.579536E-01  -29.7920       29.7920       1991.50       2021.29    
  26  0.187304      -1.67502      -861.073       861.073       1745.28       2606.35    
  27  0.840922     -0.173257      -89.0653       89.0653       1838.47       1927.54    
  28  0.888648     -0.118054      -60.6874       60.6874       1902.66       1963.35    
  29  0.920614E-01  -2.38530      -1226.20       1226.20       1761.42       2987.62    
  30  0.906493     -0.981722E-01  -50.4670       50.4670       1479.12       1529.58    
  31  0.221761      -1.50616      -774.264       774.264       1761.85       2536.11    
  32  0.248725      -1.39141      -715.275       715.275       1674.94       2390.22    
  33  0.315928      -1.15224      -592.328       592.328       1624.05       2216.37    
  34  0.949967     -0.513283E-01  -26.3861       26.3861       1718.33       1744.71    
  35  0.802748     -0.219715      -112.948       112.948       2092.67       2205.62    
  36  0.558987     -0.581628      -298.995       298.995       1863.70       2162.70    
  37  0.638133     -0.449209      -230.923       230.923       1717.77       1948.69    
  38  0.637852     -0.449648      -231.149       231.149       1739.04       1970.19    
  39  0.382908     -0.959961      -493.483       493.483       2074.74       2568.22    
  40  0.982834     -0.173149E-01  -8.90102       8.90102       1842.53       1851.43    
  41  0.497022     -0.699120      -359.394       359.394       1843.55       2202.95    
  42  0.263620      -1.33325      -685.376       685.376       2125.36       2810.73    
  43  0.296939      -1.21423      -624.194       624.194       1802.34       2426.54    
  44  0.784161     -0.243141      -124.991       124.991       2074.91       2199.90    
  45  0.545321     -0.606380      -311.719       311.719       2214.87       2526.59    
  46  0.770080     -0.261260      -134.305       134.305       1825.77       1960.07    
  47  0.358755      -1.02511      -526.976       526.976       1790.22       2317.20    
  48  0.325126      -1.12354      -577.575       577.575       1721.08       2298.66    
  49  0.599396     -0.511832      -263.116       263.116       2381.96       2645.07    
  50  0.323708      -1.12791      -579.822       579.822       1764.77       2344.59    
  51  0.329142      -1.11127      -571.263       571.263       2155.99       2727.25    
  52  0.685661     -0.377371      -193.994       193.994       2024.84       2218.83    
  53  0.360361      -1.02065      -524.680       524.680       1832.49       2357.17    
  54  0.665281     -0.407545      -209.505       209.505       1822.10       2031.61    
  55  0.983321     -0.168196E-01  -8.64639       8.64639       1552.58       1561.22    
  56  0.644247     -0.439672      -226.021       226.021       1998.98       2225.00    
  57  0.735645     -0.307008      -157.822       157.822       1897.70       2055.52    
  58  0.680276     -0.385257      -198.048       198.048       1867.17       2065.22    
  59  0.864073     -0.146098      -75.1040       75.1040       1958.45       2033.56    
  60  0.788785     -0.237262      -121.968       121.968       1744.49       1866.46    
  61  0.429383     -0.845405      -434.594       434.594       2512.88       2947.47    
  62  0.798857     -0.224573      -115.445       115.445       1871.71       1987.15    
  63  0.946983     -0.544737E-01  -28.0031       28.0031       1713.55       1741.56    
  64  0.229664      -1.47114      -756.261       756.261       1508.93       2265.19    
loop,thermsimp(1:2)       13   70.1528       599.848    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84       1603.01         69.05          1.13         40.88          0.25          0.05        111.36
Just calling func    0   0        111.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85       1535.02         69.00          1.23         40.48          0.00          0.05        110.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1535.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       13
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       14
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       84     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -547.675       547.675       1479.12       2026.79    
   2  0.267720      -1.31781      -677.443       677.443       1552.58       2230.02    
   3  0.279825      -1.27359      -654.710       654.710       1491.51       2146.22    
   4  0.281095      -1.26906      -652.382       652.382       1352.25       2004.64    
   5  0.245867      -1.40297      -721.217       721.217       1713.55       2434.77    
   6  0.914239     -0.896636E-01  -46.0930       46.0930       1718.33       1764.42    
   7  0.180116      -1.71415      -881.188       881.188       1584.73       2465.92    
   8  0.567917     -0.565780      -290.848       290.848       1842.53       2133.37    
   9  0.431941     -0.839465      -431.541       431.541       1744.49       2176.03    
  10  0.877920     -0.130199      -66.9311       66.9311       1771.81       1838.74    
  11  0.280355      -1.27170      -653.736       653.736       1793.12       2446.86    
  12  0.486947     -0.719601      -369.922       369.922       1838.47       2208.40    
  13  0.216546      -1.52995      -786.496       786.496       1717.77       2504.27    
  14  0.483718E-02  -5.33142      -2740.70       2740.70       1825.77       4566.47    
  15  0.785152E-03  -7.14963      -3675.38       3675.38       1902.66       5578.05    
  16  0.300781      -1.20137      -617.584       617.584       1739.04       2356.62    
  17  0.869691     -0.139618      -71.7727       71.7727       1703.70       1775.48    
  18  0.694261E-01  -2.66749      -1371.27       1371.27       1871.71       3242.98    
  19  0.635475     -0.453382      -233.068       233.068       1835.98       2069.04    
  20  0.894977     -0.110958      -57.0395       57.0395       1991.50       2048.54    
  21  0.442267     -0.815841      -419.396       419.396       1822.10       2241.50    
  22  0.283362      -1.26103      -648.252       648.252       1958.45       2606.71    
  23  0.518611     -0.656601      -337.536       337.536       1456.43       1793.97    
  24  0.858122E-01  -2.45559      -1262.34       1262.34       1897.70       3160.04    
  25  0.461153     -0.774026      -397.901       397.901       1867.17       2265.07    
  26  0.180026      -1.71465      -881.445       881.445       1688.88       2570.32    
  27  0.446938E-01  -3.10792      -1597.68       1597.68       1770.52       3368.20    
  28  0.152352      -1.88156      -967.246       967.246       1848.90       2816.14    
  29  0.163937E-01  -4.11086      -2113.25       2113.25       1518.51       3631.77    
  30  0.721347     -0.326635      -167.912       167.912       1788.40       1956.31    
  31  0.813323     -0.206626      -106.220       106.220       1618.35       1724.57    
  32  0.569343     -0.563273      -289.559       289.559       1863.70       2153.26    
  33  0.275899      -1.28772      -661.973       661.973       1789.28       2451.25    
  34  0.933187     -0.691492E-01  -35.5473       35.5473       2074.91       2110.46    
  35  0.716570     -0.333279      -171.327       171.327       1843.55       2014.88    
  36  0.405413     -0.902848      -464.123       464.123       2092.67       2556.79    
  37  0.907528     -0.970314E-01  -49.8805       49.8805       1783.37       1833.25    
  38  0.554651     -0.589416      -302.999       302.999       1624.05       1927.04    
  39  0.419962     -0.867592      -445.999       445.999       2024.84       2470.84    
  40  0.824173     -0.193375      -99.4075       99.4075       1998.98       2098.39    
  41  0.865647     -0.144278      -74.1686       74.1686       1632.99       1707.16    
  42  0.300944      -1.20083      -617.307       617.307       1708.53       2325.84    
  43  0.339688      -1.07973      -555.052       555.052       1508.93       2063.99    
  44  0.217032      -1.52771      -785.345       785.345       1721.08       2506.43    
  45  0.792618E-01  -2.53500      -1303.16       1303.16       1790.22       3093.38    
  46  0.997677     -0.232582E-02  -1.19562       1.19562       1740.78       1741.97    
  47  0.174239      -1.74733      -898.241       898.241       1691.76       2590.00    
  48  0.834084     -0.181422      -93.2626       93.2626       1764.77       1858.03    
  49  0.324404      -1.12577      -578.718       578.718       1832.49       2411.21    
  50  0.927598     -0.751564E-01  -38.6354       38.6354       1674.94       1713.58    
  51  0.981384     -0.187911E-01  -9.65988       9.65988       1802.34       1812.00    
  52  0.849105     -0.163572      -84.0868       84.0868       1826.93       1911.02    
  53  0.148698      -1.90584      -979.727       979.727       2214.87       3194.60    
  54  0.389930     -0.941789      -484.142       484.142       1761.85       2245.99    
  55  0.183568      -1.69517      -871.429       871.429       2074.74       2946.17    
  56  0.661220     -0.413669      -212.653       212.653       1745.28       1957.93    
  57  0.242183      -1.41806      -728.976       728.976       2381.96       3110.93    
  58  0.182262      -1.70231      -875.101       875.101       1715.30       2590.40    
  59  0.299801      -1.20464      -619.263       619.263       2155.99       2775.25    
  60  0.950117     -0.511698E-01  -26.3046       26.3046       1814.86       1841.16    
  61  0.184593      -1.68960      -868.567       868.567       2125.36       2993.92    
  62  0.730970     -0.313382      -161.099       161.099       2512.88       2673.98    
  63  0.753232E-01  -2.58597      -1329.36       1329.36       1761.42       3090.78    
  64  0.501460     -0.690231      -354.824       354.824       1535.02       1889.84    
loop,thermsimp(1:2)       14   547.675       677.443    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86       1989.46         69.09          1.23         40.52          0.00          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87      53546.03         68.88          1.18         40.93          0.00          0.05        111.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1989.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       14
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       15
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       86     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -755.625       755.625       1632.99       2388.61    
   2  0.322822      -1.13066      -581.231       581.231       1674.94       2256.17    
   3  0.327586      -1.11601      -573.700       573.700       1618.35       2192.05    
   4  0.799078     -0.224296      -115.303       115.303       1740.78       1856.08    
   5  0.698072     -0.359433      -184.772       184.772       1718.33       1903.10    
   6  0.733871     -0.309421      -159.063       159.063       1703.70       1862.77    
   7  0.823872     -0.193740      -99.5953       99.5953       1456.43       1556.03    
   8  0.800045     -0.223087      -114.681       114.681       1802.34       1917.02    
   9  0.162010      -1.82010      -935.649       935.649       1783.37       2719.02    
  10  0.113138      -2.17915      -1120.23       1120.23       1771.81       2892.03    
  11  0.973966     -0.263784E-01  -13.5602       13.5602       1814.86       1828.42    
  12  0.998107     -0.189521E-02 -0.974260      0.974260       1764.77       1765.75    
  13  0.631351     -0.459893      -236.415       236.415       1535.02       1771.43    
  14  0.698229     -0.359208      -184.657       184.657       1826.93       2011.59    
  15  0.359252      -1.02373      -526.265       526.265       1624.05       2150.31    
  16  0.936266     -0.658562E-01  -33.8544       33.8544       1788.40       1822.25    
  17  0.843107     -0.170662      -87.7314       87.7314       1745.28       1833.01    
  18  0.181284      -1.70769      -877.866       877.866       1352.25       2230.12    
  19  0.354246      -1.03777      -533.480       533.480       1843.55       2377.03    
  20  0.981540     -0.186324E-01  -9.57828       9.57828       1479.12       1488.69    
  21  0.582284E-01  -2.84338      -1461.69       1461.69       1991.50       3453.19    
  22  0.935088     -0.671143E-01  -34.5012       34.5012       1508.93       1543.43    
  23  0.682144     -0.382515      -196.638       196.638       1835.98       2032.61    
  24  0.441439     -0.817715      -420.359       420.359       1998.98       2419.34    
  25  0.325829      -1.12138      -576.464       576.464       2074.91       2651.37    
  26  0.956968E-01  -2.34657      -1206.29       1206.29       1842.53       3048.82    
  27  0.465124E-01  -3.06804      -1577.17       1577.17       1491.51       3068.68    
  28  0.645503     -0.437726      -225.020       225.020       1863.70       2088.72    
  29  0.184751      -1.68875      -868.126       868.126       1744.49       2612.62    
  30  0.676303     -0.391115      -201.059       201.059       1838.47       2039.53    
  31  0.408248     -0.895880      -460.542       460.542       1552.58       2013.12    
  32  0.215511      -1.53474      -788.960       788.960       1822.10       2611.06    
  33  0.762109     -0.271666      -139.654       139.654       1761.85       1901.50    
  34  0.445022     -0.809632      -416.204       416.204       1867.17       2283.37    
  35  0.667113     -0.404797      -208.092       208.092       1708.53       1916.62    
  36  0.995785     -0.422376E-02  -2.17129       2.17129       1739.04       1741.21    
  37  0.278840      -1.27712      -656.523       656.523       1832.49       2489.02    
  38  0.624255     -0.471196      -242.226       242.226       1713.55       1955.78    
  39  0.368212     -0.999097      -513.602       513.602       1793.12       2306.72    
  40  0.330266      -1.10786      -569.512       569.512       1789.28       2358.79    
  41  0.969155     -0.313304E-01  -16.1059       16.1059       1584.73       1600.84    
  42  0.686816     -0.375688      -193.128       193.128       2024.84       2217.97    
  43  0.201053      -1.60419      -824.657       824.657       1717.77       2542.43    
  44  0.481166     -0.731544      -376.062       376.062       1721.08       2097.14    
  45  0.992829     -0.719725E-02  -3.69986       3.69986       2092.67       2096.37    
  46  0.665697     -0.406921      -209.184       209.184       1688.88       1898.06    
  47  0.991934E-02  -4.61327      -2371.52       2371.52       1691.76       4063.28    
  48  0.211644      -1.55285      -798.267       798.267       1715.30       2513.56    
  49  0.908243E-01  -2.39883      -1233.16       1233.16       1958.45       3191.61    
  50  0.643762     -0.440426      -226.408       226.408       2512.88       2739.28    
  51  0.568794E-01  -2.86682      -1473.74       1473.74       2155.99       3629.72    
  52  0.159466      -1.83592      -943.785       943.785       1848.90       2792.68    
  53  0.918851     -0.846310E-01  -43.5059       43.5059       2074.74       2118.24    
  54  0.865178     -0.144820      -74.4470       74.4470       2125.36       2199.80    
  55  0.826009     -0.191150      -98.2637       98.2637       1761.42       1859.69    
  56  0.665816E-02  -5.01191      -2576.45       2576.45       1790.22       4366.68    
  57  0.998155     -0.184716E-02 -0.949560      0.949560       2381.96       2382.91    
  58  0.875957E-01  -2.43502      -1251.76       1251.76       1897.70       3149.46    
  59  0.546955     -0.603388      -310.181       310.181       2214.87       2525.05    
  60  0.953933     -0.471617E-01  -24.2442       24.2442       1871.71       1895.95    
  61  0.131488      -2.02884      -1042.96       1042.96       1770.52       2813.48    
  62  0.415197     -0.879003      -451.866       451.866       1518.51       1970.38    
  63  0.543800E-02  -5.21434      -2680.52       2680.52       1825.77       4506.28    
  64  0.821907     -0.196128      -100.823       100.823       1989.46       2090.29    
loop,thermsimp(1:2)       15   755.625       581.231    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88       1579.98         68.88          1.20         40.58          0.00          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89       1500.10         69.07          1.25         40.51          0.00          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1500.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       15
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       16
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       88     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -300.084       300.084       1479.12       1779.20    
   2  0.850944     -0.161409      -82.9749       82.9749       1508.93       1591.91    
   3  0.343999      -1.06712      -548.568       548.568       1456.43       2005.00    
   4  0.481777E-02  -5.33544      -2742.77       2742.77       1584.73       4327.50    
   5  0.146991      -1.91738      -985.661       985.661       1739.04       2724.70    
   6  0.545677     -0.605728      -311.384       311.384       1764.77       2076.15    
   7  0.761940     -0.271888      -139.768       139.768       1535.02       1674.79    
   8  0.944477     -0.571238E-01  -29.3654       29.3654       1788.40       1817.76    
   9  0.965249     -0.353688E-01  -18.1819       18.1819       1814.86       1833.04    
  10  0.634176     -0.455429      -234.121       234.121       1745.28       1979.40    
  11  0.793205     -0.231673      -119.095       119.095       1740.78       1859.87    
  12  0.743605     -0.296246      -152.290       152.290       1761.42       1913.71    
  13  0.983069E-01  -2.31966      -1192.46       1192.46       1703.70       2896.16    
  14  0.618437     -0.480560      -247.039       247.039       1871.71       2118.75    
  15  0.429182     -0.845875      -434.835       434.835       1688.88       2123.71    
  16  0.771528     -0.259382      -133.339       133.339       1761.85       1895.18    
  17  0.218286      -1.52195      -782.381       782.381       1718.33       2500.71    
  18  0.556408     -0.586254      -301.373       301.373       1708.53       2009.90    
  19  0.526292     -0.641899      -329.979       329.979       1802.34       2132.32    
  20  0.665532     -0.407169      -209.312       209.312       1713.55       1922.86    
  21  0.261756      -1.34034      -689.025       689.025       1518.51       2207.54    
  22  0.975508     -0.247971E-01  -12.7473       12.7473       1826.93       1839.68    
  23  0.257613      -1.35630      -697.226       697.226       1552.58       2249.80    
  24  0.981555E-01  -2.32120      -1193.25       1193.25       1835.98       3029.23    
  25  0.955054     -0.459870E-01  -23.6403       23.6403       1838.47       1862.11    
  26  0.887906     -0.118890      -61.1172       61.1172       1863.70       1924.82    
  27  0.407043     -0.898837      -462.062       462.062       1989.46       2451.53    
  28  0.876870     -0.131396      -67.5463       67.5463       2092.67       2160.22    
  29  0.957152     -0.437935E-01  -22.5128       22.5128       1721.08       1743.59    
  30  0.827730     -0.189068      -97.1933       97.1933       2074.74       2171.93    
  31  0.289027      -1.24124      -638.077       638.077       1624.05       2262.12    
  32  0.125230      -2.07760      -1068.02       1068.02       1618.35       2686.37    
  33  0.242443      -1.41699      -728.425       728.425       2125.36       2853.78    
  34  0.654103     -0.424490      -218.216       218.216       2024.84       2243.05    
  35  0.811871     -0.208414      -107.138       107.138       1352.25       1459.39    
  36  0.145201E-01  -4.23222      -2175.64       2175.64       1674.94       3850.58    
  37  0.344449      -1.06581      -547.896       547.896       1867.17       2415.07    
  38  0.265532      -1.32602      -681.661       681.661       1793.12       2474.78    
  39  0.811851     -0.208438      -107.151       107.151       1789.28       1896.43    
  40  0.983290E-01  -2.31944      -1192.34       1192.34       1843.55       3035.90    
  41  0.347314      -1.05753      -543.638       543.638       2381.96       2925.59    
  42  0.923773     -0.792888E-01  -40.7597       40.7597       1632.99       1673.75    
  43  0.690375     -0.370520      -190.472       190.472       1998.98       2189.45    
  44  0.227523      -1.48051      -761.077       761.077       1832.49       2593.57    
  45  0.652275     -0.427289      -219.655       219.655       1715.30       1934.95    
  46  0.669640     -0.401014      -206.148       206.148       2214.87       2421.02    
  47  0.288804      -1.24201      -638.473       638.473       1717.77       2356.24    
  48  0.404648     -0.904738      -465.095       465.095       1822.10       2287.20    
  49  0.371042     -0.991440      -509.665       509.665       1744.49       2254.15    
  50  0.308424      -1.17628      -604.686       604.686       2074.91       2679.60    
  51  0.911221     -0.929703E-01  -47.7929       47.7929       1783.37       1831.16    
  52  0.615436     -0.485425      -249.540       249.540       2512.88       2762.42    
  53  0.780328     -0.248041      -127.509       127.509       1848.90       1976.41    
  54  0.127539      -2.05933      -1058.63       1058.63       1770.52       2829.15    
  55  0.709081     -0.343786      -176.729       176.729       1771.81       1948.53    
  56  0.974925     -0.253942E-01  -13.0543       13.0543       1842.53       1855.58    
  57  0.834943     -0.180392      -92.7331       92.7331       1491.51       1584.24    
  58  0.696274     -0.362013      -186.098       186.098       1897.70       2083.80    
  59  0.623965     -0.471660      -242.464       242.464       1958.45       2200.92    
  60  0.620467     -0.477282      -245.355       245.355       1991.50       2236.86    
  61  0.983840E-01  -2.31888      -1192.06       1192.06       2155.99       3348.04    
  62  0.452904     -0.792074      -407.178       407.178       1691.76       2098.94    
  63  0.731276     -0.312965      -160.885       160.885       1790.22       1951.11    
  64  0.136630      -1.99048      -1023.24       1023.24       1500.10       2523.33    
loop,thermsimp(1:2)       16   300.084       82.9749    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       3441.54         69.22          1.21         40.76          0.00          0.05        111.25
Just calling func    0   0        111.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3441.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       16
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       17
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       89     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -154.933       154.933       1352.25       1507.19    
   2  0.527958     -0.638738      -328.353       328.353       1491.51       1819.86    
   3  0.326119      -1.12049      -576.007       576.007       1508.93       2084.94    
   4  0.647061     -0.435314      -223.780       223.780       1632.99       1856.77    
   5  0.419805     -0.867966      -446.192       446.192       1535.02       1981.21    
   6  0.218417      -1.52135      -782.073       782.073       1721.08       2503.15    
   7  0.168864      -1.77866      -914.350       914.350       1479.12       2393.46    
   8  0.761417     -0.272575      -140.121       140.121       1788.40       1928.52    
   9  0.383989     -0.957143      -492.034       492.034       1783.37       2275.40    
  10  0.104774      -2.25595      -1159.71       1159.71       1814.86       2974.56    
  11  0.167912      -1.78432      -917.257       917.257       1826.93       2744.19    
  12  0.997930     -0.207190E-02  -1.06509       1.06509       1842.53       1843.59    
  13  0.493294     -0.706650      -363.265       363.265       1740.78       2104.04    
  14  0.483048     -0.727639      -374.055       374.055       1838.47       2212.53    
  15  0.715967     -0.334121      -171.760       171.760       1761.85       1933.61    
  16  0.595423E-01  -2.82107      -1450.21       1450.21       1789.28       3239.50    
  17  0.636569     -0.451662      -232.184       232.184       1761.42       1993.61    
  18  0.482980     -0.727779      -374.126       374.126       1713.55       2087.68    
  19  0.500121     -0.692905      -356.199       356.199       1863.70       2219.90    
  20  0.426980     -0.851018      -437.479       437.479       1715.30       2152.78    
  21  0.546576     -0.604082      -310.538       310.538       1771.81       2082.34    
  22  0.142720      -1.94687      -1000.82       1000.82       1790.22       2791.04    
  23  0.473622     -0.747346      -384.185       384.185       1848.90       2233.08    
  24  0.892718E-01  -2.41607      -1242.02       1242.02       1745.28       2987.30    
  25  0.660659     -0.414518      -213.089       213.089       1456.43       1669.52    
  26  0.328755      -1.11244      -571.869       571.869       1708.53       2280.40    
  27  0.544150     -0.608530      -312.825       312.825       1764.77       2077.60    
  28  0.199068      -1.61411      -829.759       829.759       1897.70       2727.46    
  29  0.685070     -0.378234      -194.437       194.437       1691.76       1886.20    
  30  0.500258     -0.692632      -356.058       356.058       1871.71       2227.77    
  31  0.130607      -2.03556      -1046.41       1046.41       1688.88       2735.29    
  32  0.982013E-01  -2.32074      -1193.01       1193.01       1802.34       2995.35    
  33  0.581494E-01  -2.84474      -1462.38       1462.38       2092.67       3555.05    
  34  0.841391     -0.172699      -88.7788       88.7788       2074.74       2163.52    
  35  0.838937E-01  -2.47820      -1273.96       1273.96       1998.98       3272.94    
  36  0.729848     -0.314919      -161.889       161.889       1958.45       2120.34    
  37  0.748292     -0.289962      -149.060       149.060       1518.51       1667.57    
  38  0.229216      -1.47309      -757.265       757.265       1991.50       2748.77    
  39  0.710713     -0.341487      -175.547       175.547       2024.84       2200.38    
  40  0.511506     -0.670395      -344.627       344.627       1552.58       1897.20    
  41  0.106756      -2.23721      -1150.07       1150.07       1744.49       2894.56    
  42  0.583466     -0.538770      -276.963       276.963       1624.05       1901.01    
  43  0.993140E-01  -2.30947      -1187.22       1187.22       1822.10       3009.32    
  44  0.461224     -0.773871      -397.820       397.820       1717.77       2115.59    
  45  0.574465     -0.554316      -284.955       284.955       1867.17       2152.12    
  46  0.715977     -0.334107      -171.753       171.753       2214.87       2386.63    
  47  0.877584     -0.130583      -67.1282       67.1282       1989.46       2056.59    
  48  0.492354     -0.708558      -364.245       364.245       1793.12       2157.36    
  49  0.874926     -0.133616      -68.6877       68.6877       1718.33       1787.01    
  50  0.800367     -0.222685      -114.475       114.475       1500.10       1614.57    
  51  0.507308     -0.678636      -348.864       348.864       1832.49       2181.36    
  52  0.727831     -0.317686      -163.312       163.312       2074.91       2238.22    
  53  0.899777E-01  -2.40819      -1237.97       1237.97       1618.35       2856.32    
  54  0.392780     -0.934505      -480.397       480.397       1739.04       2219.43    
  55  0.585301     -0.535629      -275.349       275.349       2512.88       2788.23    
  56  0.522884     -0.648395      -333.318       333.318       1770.52       2103.84    
  57  0.559213     -0.581225      -298.788       298.788       2125.36       2424.14    
  58  0.116989      -2.14568      -1103.02       1103.02       1703.70       2806.72    
  59  0.411020     -0.889113      -457.063       457.063       2381.96       2839.02    
  60  0.484202     -0.725253      -372.828       372.828       1835.98       2208.80    
  61  0.771761     -0.259080      -133.184       133.184       1843.55       1976.74    
  62  0.908486     -0.959755E-01  -49.3377       49.3377       2155.99       2205.33    
  63  0.340814      -1.07642      -553.350       553.350       1674.94       2228.29    
  64  0.519873     -0.654172      -336.287       336.287       3441.54       3777.82    
loop,thermsimp(1:2)       17   154.933       328.353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91       1584.73         69.08          1.26         40.52          0.00          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     92       1768.80         69.03          1.25         40.60          0.00          0.05        110.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1584.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       17
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       18
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       91     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -493.547       493.547       1352.25       1845.80    
   2  0.293468      -1.22599      -630.239       630.239       1500.10       2130.33    
   3  0.954036     -0.470539E-01  -24.1888       24.1888       1518.51       1542.70    
   4  0.452934     -0.792010      -407.145       407.145       1456.43       1863.58    
   5  0.251692      -1.37955      -709.179       709.179       1718.33       2427.51    
   6  0.881081     -0.126605      -65.0835       65.0835       1491.51       1556.59    
   7  0.855311     -0.156290      -80.3432       80.3432       1842.53       1922.87    
   8  0.576474     -0.550824      -283.160       283.160       1632.99       1916.15    
   9  0.433835     -0.835090      -429.291       429.291       1691.76       2121.05    
  10  0.298626      -1.20856      -621.282       621.282       1552.58       2173.86    
  11  0.269991      -1.30937      -673.101       673.101       1624.05       2297.15    
  12  0.884826     -0.122364      -62.9032       62.9032       1788.40       1851.30    
  13  0.664124     -0.409287      -210.400       210.400       1761.85       1972.25    
  14  0.580836     -0.543287      -279.285       279.285       1843.55       2122.84    
  15  0.285501      -1.25351      -644.386       644.386       1535.02       2179.40    
  16  0.690757     -0.369967      -190.188       190.188       1761.42       1951.61    
  17  0.578320     -0.547628      -281.517       281.517       1989.46       2270.98    
  18  0.563230     -0.574067      -295.108       295.108       1764.77       2059.88    
  19  0.681565     -0.383363      -197.074       197.074       1771.81       1968.88    
  20  0.453362     -0.791065      -406.659       406.659       1508.93       1915.59    
  21  0.645457     -0.437797      -225.057       225.057       1713.55       1938.61    
  22  0.982222E-01  -2.32052      -1192.90       1192.90       1770.52       2963.43    
  23  0.843064     -0.170712      -87.7574       87.7574       1740.78       1828.54    
  24  0.505683     -0.681845      -350.513       350.513       1717.77       2068.28    
  25  0.350376      -1.04875      -539.126       539.126       1958.45       2497.58    
  26  0.367167      -1.00194      -515.063       515.063       1867.17       2382.23    
  27  0.268175      -1.31611      -676.569       676.569       1715.30       2391.87    
  28  0.989085E-01  -2.31356      -1189.32       1189.32       1793.12       2982.44    
  29  0.349392      -1.05156      -540.572       540.572       2074.74       2615.31    
  30  0.945468     -0.560755E-01  -28.8265       28.8265       1832.49       1861.32    
  31  0.305400      -1.18613      -609.750       609.750       2024.84       2634.59    
  32  0.942706     -0.590006E-01  -30.3302       30.3302       2155.99       2186.32    
  33  0.778346     -0.250584      -128.817       128.817       1835.98       1964.79    
  34  0.256449      -1.36083      -699.554       699.554       1838.47       2538.03    
  35  0.338120      -1.08436      -557.430       557.430       1739.04       2296.47    
  36  0.644609     -0.439112      -225.732       225.732       1863.70       2089.44    
  37  0.420837     -0.865509      -444.929       444.929       1871.71       2316.64    
  38  0.793406     -0.231421      -118.965       118.965       1674.94       1793.91    
  39  0.685561     -0.377517      -194.069       194.069       1848.90       2042.97    
  40  0.278740      -1.27748      -656.707       656.707       2074.91       2731.62    
  41  0.414078     -0.881700      -453.252       453.252       1783.37       2236.62    
  42  0.999720     -0.280334E-03 -0.144110      0.144110       1708.53       1708.67    
  43  0.714259     -0.336509      -172.988       172.988       2214.87       2387.86    
  44  0.713371     -0.337753      -173.628       173.628       1479.12       1652.74    
  45  0.451360     -0.795490      -408.934       408.934       2125.36       2534.29    
  46  0.887280     -0.119595      -61.4797       61.4797       1721.08       1782.56    
  47  0.234319      -1.45107      -745.947       745.947       1897.70       2643.65    
  48  0.277567E-01  -3.58428      -1842.55       1842.55       1688.88       3531.43    
  49  0.582411     -0.540579      -277.893       277.893       1826.93       2104.82    
  50  0.969019     -0.314707E-01  -16.1780       16.1780       1991.50       2007.68    
  51  0.441889     -0.816696      -419.835       419.835       2512.88       2932.71    
  52  0.150247      -1.89548      -974.400       974.400       1790.22       2764.62    
  53  0.901555E-01  -2.40622      -1236.96       1236.96       1703.70       2940.66    
  54  0.274120      -1.29419      -665.299       665.299       2381.96       3047.25    
  55  0.166801      -1.79095      -920.668       920.668       1618.35       2539.02    
  56  0.783053     -0.244555      -125.717       125.717       1744.49       1870.21    
  57  0.541655     -0.613126      -315.187       315.187       1814.86       2130.04    
  58  0.113786      -2.17344      -1117.29       1117.29       1745.28       2862.57    
  59  0.794080     -0.230571      -118.529       118.529       1802.34       1920.87    
  60  0.266758      -1.32141      -679.293       679.293       1822.10       2501.39    
  61  0.637690     -0.449903      -231.280       231.280       1789.28       2020.56    
  62  0.912681     -0.913685E-01  -46.9694       46.9694       1998.98       2045.95    
  63  0.303728      -1.19162      -612.573       612.573       2092.67       2705.24    
  64  0.318303      -1.14475      -588.478       588.478       1584.73       2173.21    
loop,thermsimp(1:2)       18   493.547       630.239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93       1573.00         68.73          1.16         40.74          0.13          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     94       1593.33         68.80          1.18         40.64          0.00          0.05        110.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1573.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       18
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       19
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       93     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -535.302       535.302       1518.51       2053.82    
   2  0.270835E-01  -3.60883      -1855.18       1855.18       1491.51       3346.68    
   3  0.923755     -0.793087E-01  -40.7699       40.7699       1479.12       1519.89    
   4  0.535520     -0.624517      -321.043       321.043       1708.53       2029.57    
   5  0.629344     -0.463078      -238.052       238.052       1721.08       1959.13    
   6  0.572648E-01  -2.86007      -1470.26       1470.26       1674.94       3145.21    
   7  0.353113E-01  -3.34355      -1718.81       1718.81       1740.78       3459.58    
   8  0.580838     -0.543283      -279.283       279.283       1352.25       1631.54    
   9  0.370403     -0.993164      -510.552       510.552       1788.40       2298.95    
  10  0.443010     -0.814162      -418.533       418.533       1832.49       2251.03    
  11  0.188704      -1.66757      -857.243       857.243       1456.43       2313.68    
  12  0.177608      -1.72818      -888.398       888.398       1744.49       2632.89    
  13  0.694998     -0.363847      -187.041       187.041       1508.93       1695.97    
  14  0.160742      -1.82796      -939.690       939.690       1632.99       2572.68    
  15  0.290050      -1.23770      -636.261       636.261       1802.34       2438.60    
  16  0.441138E-01  -3.12098      -1604.39       1604.39       1842.53       3446.92    
  17  0.372461     -0.987622      -507.703       507.703       1713.55       2221.26    
  18  0.652779     -0.426517      -219.258       219.258       1761.42       1980.68    
  19  0.998108     -0.189387E-02 -0.973576      0.973576       1835.98       1836.95    
  20  0.741140     -0.299566      -153.997       153.997       1771.81       1925.80    
  21  0.623042     -0.473141      -243.226       243.226       1761.85       2005.07    
  22  0.504617     -0.683955      -351.598       351.598       1991.50       2343.10    
  23  0.872499     -0.136394      -70.1156       70.1156       1789.28       1859.40    
  24  0.142620      -1.94757      -1001.18       1001.18       1848.90       2850.08    
  25  0.580285     -0.544236      -279.773       279.773       1998.98       2278.75    
  26  0.860063E-01  -2.45334      -1261.18       1261.18       1764.77       3025.95    
  27  0.401846     -0.911687      -468.667       468.667       1717.77       2186.44    
  28  0.161242      -1.82485      -938.094       938.094       1863.70       2801.80    
  29  0.550753     -0.596469      -306.625       306.625       1826.93       2133.55    
  30  0.815012     -0.204553      -105.153       105.153       1691.76       1796.91    
  31  0.438663     -0.824024      -423.602       423.602       1843.55       2267.16    
  32  0.542283     -0.611968      -314.592       314.592       1814.86       2129.45    
  33  0.943132E-01  -2.36113      -1213.78       1213.78       1500.10       2713.87    
  34  0.236587      -1.44144      -740.994       740.994       1584.73       2325.73    
  35  0.283068      -1.26207      -648.786       648.786       1552.58       2201.36    
  36  0.973178     -0.271886E-01  -13.9767       13.9767       1535.02       1548.99    
  37  0.596723     -0.516302      -265.413       265.413       2155.99       2421.40    
  38  0.595114     -0.519003      -266.802       266.802       1783.37       2050.17    
  39  0.948736     -0.526250E-01  -27.0527       27.0527       1989.46       2016.52    
  40  0.216072E-01  -3.83473      -1971.30       1971.30       1739.04       3710.34    
  41  0.440213     -0.820496      -421.789       421.789       1624.05       2045.83    
  42  0.905197     -0.996023E-01  -51.2022       51.2022       1871.71       1922.91    
  43  0.158396      -1.84266      -947.249       947.249       1867.17       2814.42    
  44  0.287789      -1.24553      -640.283       640.283       2214.87       2855.15    
  45  0.238244      -1.43446      -737.408       737.408       1715.30       2452.70    
  46  0.363881      -1.01093      -519.683       519.683       1718.33       2238.01    
  47  0.828805     -0.187771      -96.5266       96.5266       1958.45       2054.98    
  48  0.587140     -0.532492      -273.736       273.736       1822.10       2095.84    
  49  0.141687      -1.95414      -1004.56       1004.56       2125.36       3129.91    
  50  0.879115     -0.128839      -66.2317       66.2317       1838.47       1904.71    
  51  0.742190     -0.298150      -153.269       153.269       1618.35       1771.62    
  52  0.218958      -1.51887      -780.801       780.801       2074.74       2855.54    
  53  0.333192      -1.09904      -564.978       564.978       2024.84       2589.81    
  54  0.356774      -1.03065      -529.824       529.824       1897.70       2427.52    
  55  0.739597     -0.301650      -155.068       155.068       2092.67       2247.74    
  56  0.224658E-01  -3.79576      -1951.27       1951.27       2074.91       4026.18    
  57  0.338214      -1.08408      -557.286       557.286       1790.22       2347.51    
  58  0.227014      -1.48275      -762.229       762.229       1745.28       2507.51    
  59  0.289792E-01  -3.54118      -1820.40       1820.40       2512.88       4333.27    
  60  0.871226     -0.137854      -70.8661       70.8661       1703.70       1774.57    
  61  0.159622      -1.83495      -943.285       943.285       1770.52       2713.81    
  62  0.581826     -0.541584      -278.410       278.410       1793.12       2071.53    
  63  0.733467E-02  -4.91514      -2526.71       2526.71       2381.96       4908.66    
  64  0.646078     -0.436835      -224.562       224.562       1573.00       1797.56    
loop,thermsimp(1:2)       19   535.302       1855.18    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95       1716.14         68.69          1.14         41.33          0.11          0.05        111.32
Just calling func    0   0        111.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96       3084.14         68.59          1.14         40.71          0.21          0.05        110.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1716.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       19
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       20
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       95     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -321.786       321.786       1479.12       1800.90    
   2  0.288348      -1.24359      -639.287       639.287       1535.02       2174.30    
   3  0.910112E-01  -2.39677      -1232.10       1232.10       1352.25       2584.35    
   4  0.213812      -1.54266      -793.027       793.027       1508.93       2301.96    
   5  0.575222     -0.552999      -284.278       284.278       1618.35       1902.62    
   6  0.855707     -0.155827      -80.1054       80.1054       1703.70       1783.81    
   7  0.818692     -0.200047      -102.838       102.838       1691.76       1794.60    
   8  0.309911      -1.17147      -602.213       602.213       1573.00       2175.21    
   9  0.773438     -0.256910      -132.069       132.069       1835.98       1968.04    
  10  0.440502E-01  -3.12243      -1605.13       1605.13       1789.28       3394.41    
  11  0.211655      -1.55280      -798.240       798.240       1838.47       2636.71    
  12  0.713577     -0.337465      -173.479       173.479       1871.71       2045.19    
  13  0.927405     -0.753650E-01  -38.7426       38.7426       1771.81       1810.55    
  14  0.360229      -1.02101      -524.868       524.868       1721.08       2245.95    
  15  0.911872     -0.922553E-01  -47.4253       47.4253       1761.42       1808.85    
  16  0.800691     -0.222280      -114.267       114.267       1761.85       1876.11    
  17  0.169830      -1.77296      -911.418       911.418       1989.46       2900.88    
  18  0.581014     -0.542980      -279.128       279.128       1708.53       1987.66    
  19  0.869395     -0.139958      -71.9474       71.9474       1624.05       1695.99    
  20  0.773880     -0.256338      -131.775       131.775       1783.37       1915.14    
  21  0.496085     -0.701008      -360.364       360.364       1518.51       1878.88    
  22  0.530037     -0.634809      -326.333       326.333       1958.45       2284.79    
  23  0.239414      -1.42956      -734.889       734.889       1793.12       2528.01    
  24  0.595728     -0.517972      -266.272       266.272       1822.10       2088.37    
  25  0.170793      -1.76730      -908.511       908.511       1814.86       2723.37    
  26  0.983027     -0.171183E-01  -8.79993       8.79993       1826.93       1835.73    
  27  0.608714     -0.496407      -255.186       255.186       1717.77       1972.96    
  28  0.518727     -0.656378      -337.422       337.422       1552.58       1890.00    
  29  0.887918     -0.118876      -61.1100       61.1100       1713.55       1774.66    
  30  0.140498      -1.96256      -1008.89       1008.89       1718.33       2727.21    
  31  0.256308      -1.36138      -699.837       699.837       2092.67       2792.51    
  32  0.887238     -0.119642      -61.5037       61.5037       1832.49       1894.00    
  33  0.306042      -1.18403      -608.671       608.671       1843.55       2452.22    
  34  0.993873     -0.614632E-02  -3.15961       3.15961       1998.98       2002.14    
  35  0.275412E-01  -3.59207      -1846.56       1846.56       1788.40       3634.96    
  36  0.698960     -0.358161      -184.118       184.118       1456.43       1640.55    
  37  0.268424      -1.31519      -676.092       676.092       1584.73       2260.82    
  38  0.580935E-01  -2.84570      -1462.88       1462.88       1991.50       3454.38    
  39  0.242705      -1.41591      -727.871       727.871       1790.22       2518.09    
  40  0.443517     -0.813019      -417.945       417.945       2155.99       2573.93    
  41  0.904179     -0.100728      -51.7807       51.7807       1897.70       1949.48    
  42  0.454025     -0.789603      -405.908       405.908       1802.34       2208.25    
  43  0.592994     -0.522572      -268.636       268.636       1715.30       1983.93    
  44  0.401796     -0.911812      -468.731       468.731       1745.28       2214.01    
  45  0.130776      -2.03427      -1045.75       1045.75       1632.99       2678.74    
  46  0.709753     -0.342839      -176.242       176.242       2024.84       2201.08    
  47  0.388071     -0.946568      -486.598       486.598       1744.49       2231.09    
  48  0.362521      -1.01467      -521.608       521.608       1770.52       2292.13    
  49  0.285379      -1.25394      -644.606       644.606       1500.10       2144.70    
  50  0.286508      -1.24999      -642.576       642.576       1863.70       2506.28    
  51  0.951542     -0.496714E-01  -25.5344       25.5344       1867.17       1892.70    
  52  0.122933      -2.09612      -1077.54       1077.54       1848.90       2926.44    
  53  0.210928      -1.55624      -800.008       800.008       2214.87       3014.88    
  54  0.860093     -0.150715      -77.4774       77.4774       2074.74       2152.22    
  55  0.997563     -0.243951E-02  -1.25407       1.25407       1764.77       1766.03    
  56  0.750720     -0.286722      -147.394       147.394       2125.36       2272.75    
  57  0.667101     -0.404814      -208.101       208.101       1674.94       1883.04    
  58  0.508750E-01  -2.97838      -1531.09       1531.09       1491.51       3022.59    
  59  0.552474     -0.593349      -305.021       305.021       1842.53       2147.55    
  60  0.514478     -0.664602      -341.649       341.649       1740.78       2082.43    
  61  0.539834     -0.616494      -316.919       316.919       1739.04       2055.96    
  62  0.610888     -0.492841      -253.353       253.353       2074.91       2328.26    
  63  0.328075      -1.11451      -572.933       572.933       2512.88       3085.81    
  64  0.894692     -0.111276      -57.2033       57.2033       1716.14       1773.34    
loop,thermsimp(1:2)       20   321.786       639.287    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97       1590.44         68.82          1.12         40.47          0.37          0.05        110.83
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98       1706.34         68.87          1.17         40.60          0.15          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1590.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       20
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       21
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       97     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -623.358       623.358       1456.43       2079.79    
   2  0.663536     -0.410173      -210.856       210.856       1624.05       1834.90    
   3  0.263982      -1.33188      -684.672       684.672       1764.77       2449.44    
   4  0.792402     -0.232686      -119.616       119.616       1716.14       1835.75    
   5  0.624731     -0.470434      -241.834       241.834       1713.55       1955.39    
   6  0.170977      -1.76622      -907.956       907.956       1703.70       2611.66    
   7  0.362487      -1.01477      -521.657       521.657       1691.76       2213.42    
   8  0.659245     -0.416659      -214.190       214.190       1479.12       1693.31    
   9  0.746481E-03  -7.20014      -3701.35       3701.35       1761.42       5462.77    
  10  0.690046     -0.370998      -190.717       190.717       1771.81       1962.52    
  11  0.905636     -0.991173E-01  -50.9528       50.9528       1826.93       1877.88    
  12  0.317643      -1.14683      -589.545       589.545       1761.85       2351.39    
  13  0.321948      -1.13336      -582.624       582.624       1518.51       2101.14    
  14  0.293974      -1.22426      -629.353       629.353       1674.94       2304.30    
  15  0.679275     -0.386729      -198.804       198.804       1552.58       1751.38    
  16  0.180340      -1.71291      -880.550       880.550       1867.17       2747.72    
  17  0.539600     -0.616927      -317.141       317.141       1832.49       2149.63    
  18  0.260315      -1.34586      -691.861       691.861       1618.35       2310.21    
  19  0.256777      -1.35955      -698.897       698.897       1783.37       2482.26    
  20  0.518851     -0.656138      -337.298       337.298       1897.70       2235.00    
  21  0.485887     -0.721780      -371.042       371.042       1835.98       2207.02    
  22  0.562814     -0.574805      -295.488       295.488       1717.77       2013.26    
  23  0.906369     -0.983082E-01  -50.5369       50.5369       1715.30       1765.83    
  24  0.332143      -1.10219      -566.598       566.598       1708.53       2275.13    
  25  0.912001E-01  -2.39470      -1231.03       1231.03       1998.98       3230.01    
  26  0.302569      -1.19545      -614.538       614.538       1871.71       2486.25    
  27  0.362040      -1.01600      -522.291       522.291       1739.04       2261.33    
  28  0.630870     -0.460656      -236.807       236.807       1740.78       1977.59    
  29  0.685312     -0.377881      -194.256       194.256       1822.10       2016.36    
  30  0.329910      -1.10894      -570.067       570.067       1500.10       2070.16    
  31  0.906630E-01  -2.40061      -1234.07       1234.07       1842.53       3076.59    
  32  0.339749      -1.07955      -554.960       554.960       2074.74       2629.70    
  33  0.783039     -0.244573      -125.726       125.726       1535.02       1660.74    
  34  0.322673      -1.13112      -581.469       581.469       1573.00       2154.47    
  35  0.255311      -1.36527      -701.839       701.839       2024.84       2726.68    
  36  0.645921     -0.437078      -224.687       224.687       1802.34       2027.03    
  37  0.240122      -1.42661      -733.370       733.370       1745.28       2478.65    
  38  0.224638      -1.49326      -767.636       767.636       1744.49       2512.13    
  39  0.682659     -0.381760      -196.250       196.250       1721.08       1917.33    
  40  0.533856     -0.627629      -322.643       322.643       1584.73       1907.37    
  41  0.439620E-02  -5.42701      -2789.84       2789.84       2125.36       4915.20    
  42  0.409891     -0.891863      -458.476       458.476       1958.45       2416.93    
  43  0.379406     -0.969149      -498.206       498.206       1770.52       2268.73    
  44  0.982111     -0.180514E-01  -9.27961       9.27961       1508.93       1518.21    
  45  0.243530      -1.41251      -726.125       726.125       2074.91       2801.03    
  46  0.709323     -0.343445      -176.553       176.553       1843.55       2020.11    
  47  0.212014      -1.55110      -797.369       797.369       1863.70       2661.07    
  48  0.530919     -0.633146      -325.479       325.479       1790.22       2115.70    
  49  0.439600     -0.821890      -422.506       422.506       1793.12       2215.63    
  50  0.304385      -1.18946      -611.461       611.461       2155.99       2767.45    
  51  0.850253     -0.162221      -83.3923       83.3923       1352.25       1435.65    
  52  0.686564     -0.376055      -193.317       193.317       1838.47       2031.79    
  53  0.894299     -0.111715      -57.4287       57.4287       1632.99       1690.42    
  54  0.724097E-02  -4.92800      -2533.32       2533.32       1814.86       4348.17    
  55  0.666382     -0.405892      -208.655       208.655       1718.33       1926.98    
  56  0.216072      -1.53214      -787.623       787.623       2092.67       2880.29    
  57  0.481454     -0.730944      -375.753       375.753       1989.46       2365.22    
  58  0.107413      -2.23107      -1146.92       1146.92       1848.90       2995.81    
  59  0.943557     -0.580990E-01  -29.8667       29.8667       2214.87       2244.74    
  60  0.259811      -1.34780      -692.858       692.858       1491.51       2184.37    
  61  0.526852     -0.640836      -329.432       329.432       2512.88       2842.31    
  62  0.306319E-01  -3.48571      -1791.89       1791.89       1789.28       3581.17    
  63  0.180513      -1.71195      -880.057       880.057       1991.50       2871.56    
  64  0.901495     -0.103701      -53.3091       53.3091       1590.44       1643.74    
loop,thermsimp(1:2)       21   623.358       210.856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99       1822.64         68.72          1.14         40.86          0.05          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1822.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       21
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       22
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       98     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -492.459       492.459       1352.25       1844.71    
   2  0.741480     -0.299107      -153.760       153.760       1508.93       1662.69    
   3  0.138898      -1.97401      -1014.77       1014.77       1590.44       2605.21    
   4  0.751974E-01  -2.58764      -1330.22       1330.22       1535.02       2865.23    
   5  0.824485     -0.192996      -99.2127       99.2127       1632.99       1732.20    
   6  0.982900     -0.172482E-01  -8.86673       8.86673       1479.12       1487.98    
   7  0.693409     -0.366136      -188.218       188.218       1552.58       1740.80    
   8  0.941572     -0.602045E-01  -30.9491       30.9491       1715.30       1746.25    
   9  0.812713     -0.207378      -106.606       106.606       1624.05       1730.65    
  10  0.879507     -0.128393      -66.0026       66.0026       1716.14       1782.14    
  11  0.418958     -0.869984      -447.229       447.229       1826.93       2274.16    
  12  0.314952      -1.15533      -593.918       593.918       1584.73       2178.65    
  13  0.812426     -0.207731      -106.787       106.787       1721.08       1827.87    
  14  0.213788      -1.54277      -793.085       793.085       1718.33       2511.41    
  15  0.521629     -0.650798      -334.553       334.553       1713.55       2048.11    
  16  0.287143      -1.24777      -641.439       641.439       1771.81       2413.24    
  17  0.518340     -0.657125      -337.805       337.805       1740.78       2078.58    
  18  0.712802E-02  -4.94372      -2541.40       2541.40       1717.77       4259.17    
  19  0.579935     -0.544838      -280.083       280.083       1822.10       2102.18    
  20  0.508101E-02  -5.28224      -2715.42       2715.42       1843.55       4558.98    
  21  0.984466     -0.156557E-01  -8.04808       8.04808       1802.34       1810.39    
  22  0.394325     -0.930579      -478.379       478.379       1838.47       2316.85    
  23  0.837309     -0.177562      -91.2786       91.2786       1500.10       1591.37    
  24  0.683519     -0.380501      -195.603       195.603       1456.43       1652.04    
  25  0.892337     -0.113912      -58.5582       58.5582       1518.51       1577.07    
  26  0.297675      -1.21175      -622.921       622.921       1790.22       2413.14    
  27  0.566054     -0.569065      -292.537       292.537       1832.49       2125.03    
  28  0.325499E-01  -3.42498      -1760.67       1760.67       1573.00       3333.67    
  29  0.721169     -0.326882      -168.039       168.039       1491.51       1659.55    
  30  0.370449     -0.993040      -510.488       510.488       1835.98       2346.46    
  31  0.398952     -0.918913      -472.382       472.382       1691.76       2164.14    
  32  0.942469     -0.592518E-01  -30.4593       30.4593       1793.12       1823.58    
  33  0.379045     -0.970101      -498.696       498.696       1897.70       2396.40    
  34  0.218373      -1.52155      -782.177       782.177       2214.87       2997.05    
  35  0.413944     -0.882024      -453.418       453.418       1739.04       2192.46    
  36  0.452532     -0.792896      -407.601       407.601       1770.52       2178.12    
  37  0.938896     -0.630505E-01  -32.4121       32.4121       1708.53       1740.94    
  38  0.389299     -0.943409      -484.974       484.974       1674.94       2159.92    
  39  0.943794     -0.578471E-01  -29.7372       29.7372       1618.35       1648.08    
  40  0.706887     -0.346884      -178.321       178.321       1761.85       1940.17    
  41  0.274873      -1.29145      -663.888       663.888       1989.46       2653.35    
  42  0.343864      -1.06751      -548.770       548.770       1958.45       2507.22    
  43  0.869527E-01  -2.44239      -1255.55       1255.55       1764.77       3020.32    
  44  0.859615     -0.151271      -77.7631       77.7631       1745.28       1823.04    
  45  0.264079      -1.33151      -684.482       684.482       1783.37       2467.85    
  46  0.494871     -0.703457      -361.623       361.623       1871.71       2233.33    
  47  0.112943      -2.18087      -1121.11       1121.11       1744.49       2865.60    
  48  0.358273      -1.02646      -527.668       527.668       1703.70       2231.37    
  49  0.215257      -1.53592      -789.565       789.565       2074.74       2864.30    
  50  0.441681     -0.817166      -420.077       420.077       1863.70       2283.78    
  51  0.888276     -0.118473      -60.9030       60.9030       2024.84       2085.74    
  52  0.780286     -0.248095      -127.537       127.537       1867.17       1994.71    
  53  0.488747     -0.715911      -368.025       368.025       2155.99       2524.01    
  54  0.683795     -0.380097      -195.395       195.395       2074.91       2270.30    
  55  0.466986     -0.761456      -391.438       391.438       2512.88       2904.32    
  56  0.900497     -0.104809      -53.8786       53.8786       1991.50       2045.38    
  57  0.876058     -0.132323      -68.0225       68.0225       2092.67       2160.69    
  58  0.413808     -0.882354      -453.588       453.588       1848.90       2302.48    
  59  0.268165      -1.31615      -676.589       676.589       1842.53       2519.11    
  60  0.637465     -0.450255      -231.461       231.461       1998.98       2230.44    
  61  0.476344     -0.741616      -381.239       381.239       1789.28       2170.52    
  62  0.878474     -0.129569      -66.6071       66.6071       1814.86       1881.46    
  63  0.185973      -1.68216      -864.739       864.739       2125.36       2990.10    
  64  0.802667E-03  -7.12757      -3664.04       3664.04       1822.64       5486.68    
loop,thermsimp(1:2)       22   492.459       153.760    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       1763.11         68.69          1.08         40.65          0.27          0.04        110.74
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1763.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       22
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       23
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       99     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -573.591       573.591       1479.12       2052.71    
   2  0.736029     -0.306486      -157.554       157.554       1518.51       1676.07    
   3  0.608436     -0.496864      -255.421       255.421       1500.10       1755.52    
   4  0.584882     -0.536346      -275.717       275.717       1618.35       1894.06    
   5  0.617514     -0.482053      -247.807       247.807       1456.43       1704.24    
   6  0.376473     -0.976909      -502.195       502.195       1491.51       1993.70    
   7  0.535145     -0.625218      -321.403       321.403       1508.93       1830.34    
   8  0.341783      -1.07358      -551.890       551.890       1624.05       2175.94    
   9  0.804208E-01  -2.52048      -1295.69       1295.69       1632.99       2928.68    
  10  0.660499     -0.414760      -213.214       213.214       1552.58       1765.79    
  11  0.739860E-01  -2.60388      -1338.57       1338.57       1708.53       3047.09    
  12  0.203251      -1.59331      -819.067       819.067       1715.30       2534.36    
  13  0.637025     -0.450946      -231.816       231.816       1716.14       1947.95    
  14  0.687460     -0.374752      -192.647       192.647       1802.34       1994.99    
  15  0.663581     -0.410105      -210.821       210.821       1745.28       1956.10    
  16  0.579690     -0.545263      -280.301       280.301       1793.12       2073.42    
  17  0.775653     -0.254050      -130.599       130.599       1721.08       1851.68    
  18  0.284124      -1.25834      -646.872       646.872       1352.25       1999.13    
  19  0.317710      -1.14662      -589.436       589.436       1814.86       2404.29    
  20  0.958871     -0.419990E-01  -21.5903       21.5903       1761.85       1783.44    
  21  0.582932     -0.539685      -277.434       277.434       1867.17       2144.60    
  22  0.905476     -0.992942E-01  -51.0438       51.0438       1991.50       2042.55    
  23  0.225214      -1.49070      -766.319       766.319       1713.55       2479.87    
  24  0.618260     -0.480846      -247.186       247.186       1740.78       1987.96    
  25  0.608706     -0.496420      -255.193       255.193       2024.84       2280.03    
  26  0.651052     -0.429165      -220.619       220.619       1822.10       2042.72    
  27  0.138439E-02  -6.58249      -3383.84       3383.84       1832.49       5216.33    
  28  0.157375      -1.84913      -950.572       950.572       1674.94       2625.51    
  29  0.168063      -1.78342      -916.794       916.794       2092.67       3009.46    
  30  0.924354     -0.786598E-01  -40.4363       40.4363       1691.76       1732.20    
  31  0.985585     -0.145204E-01  -7.46445       7.46445       1789.28       1796.75    
  32  0.540844E-01  -2.91721      -1499.64       1499.64       1770.52       3270.16    
  33  0.535345     -0.624843      -321.211       321.211       1584.73       1905.94    
  34  0.736351     -0.306048      -157.329       157.329       1739.04       1896.37    
  35  0.283062E-01  -3.56467      -1832.48       1832.48       1998.98       3831.46    
  36  0.690743     -0.369987      -190.198       190.198       1703.70       1893.90    
  37  0.260994      -1.34326      -690.522       690.522       1871.71       2562.23    
  38  0.243637      -1.41208      -725.901       725.901       2074.91       2800.81    
  39  0.850226     -0.162253      -83.4088       83.4088       1826.93       1910.34    
  40  0.589307     -0.528809      -271.843       271.843       1863.70       2135.55    
  41  0.515087     -0.663420      -341.042       341.042       1848.90       2189.94    
  42  0.348855      -1.05310      -541.363       541.363       1838.47       2379.84    
  43  0.791407     -0.233943      -120.262       120.262       1835.98       1956.24    
  44  0.370775     -0.992160      -510.035       510.035       1897.70       2407.74    
  45  0.676021     -0.391531      -201.273       201.273       1790.22       1991.50    
  46  0.125601      -2.07465      -1066.50       1066.50       1771.81       2838.31    
  47  0.582904     -0.539733      -277.458       277.458       1783.37       2060.82    
  48  0.818994     -0.199679      -102.648       102.648       1958.45       2061.10    
  49  0.291406      -1.23304      -633.863       633.863       1718.33       2352.19    
  50  0.887104     -0.119794      -61.5818       61.5818       1842.53       1904.11    
  51  0.666242     -0.406102      -208.763       208.763       2155.99       2364.75    
  52  0.931047     -0.714460E-01  -36.7280       36.7280       1590.44       1627.16    
  53  0.169651      -1.77401      -911.958       911.958       1989.46       2901.42    
  54  0.228429      -1.47653      -759.034       759.034       2074.74       2833.77    
  55  0.453181     -0.791463      -406.864       406.864       1535.02       1941.88    
  56  0.376518     -0.976789      -502.134       502.134       1744.49       2246.62    
  57  0.551543     -0.595035      -305.887       305.887       2512.88       2818.76    
  58  0.837469     -0.177371      -91.1805       91.1805       2125.36       2216.54    
  59  0.436148     -0.829773      -426.558       426.558       2214.87       2641.43    
  60  0.245765      -1.40338      -721.429       721.429       1764.77       2486.20    
  61  0.727782     -0.317754      -163.346       163.346       1573.00       1736.35    
  62  0.677441     -0.389433      -200.194       200.194       1717.77       1917.96    
  63  0.835222     -0.180057      -92.5614       92.5614       1843.55       1936.11    
  64  0.964839     -0.357941E-01  -18.4005       18.4005       1763.11       1781.51    
loop,thermsimp(1:2)       23   573.591       157.554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101       1747.80         68.67          1.11         40.80          0.24          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102       3022.58         68.83          1.16         40.71          0.24          0.05        110.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    1747.8       0.7883     -3.393      2.613     -102.6     0.1204    
                     -0.5597E-01 0.7388     -99.70      3.155     0.2509    

                       1.476     0.7155      2.028      7437.      7000.    

                      -1.923      0.000      0.000      0.000     -1.221    



                      -1.917      0.000      0.000      7000.      106.1    

                      -1.307     -2.815     -2.047     -3.541      1.335    

                      -3.300     -3.949      5215.      0.000      8748.    



                       3820.      6378.      7985.      3601.      4549.    

                       3689.     0.9226E-01 0.1475     0.9028E-01 0.2243    

                     -0.2486     0.2496     0.2049     0.2581     0.1014    



                      -1.012    -0.1072      0.000     0.4415E-01-0.4379    

                      0.1392     0.1834    -0.7116     0.2518     0.3110    

                      0.8119E-01 0.1933    -0.5122     -1.107      7000.    



                      -2.054     -1.656     -2.158     -2.266    -0.3807    

                     -0.3252      9.125      8.637    -0.1613E+05 -6.002    

                       0.000      0.000      9.125      8.637    -0.1969E+05



                      -6.000      0.000      0.000      8.880      9.137    

                     -0.1944E+05 -6.000      0.000      0.000      8.925    

                       9.083    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1747.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       23
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       24
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      101     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -633.693       633.693       1590.44       2224.13    
   2  0.991852     -0.818183E-02  -4.20600       4.20600       1518.51       1522.72    
   3  0.317368      -1.14769      -589.990       589.990       1456.43       2046.42    
   4  0.737330     -0.304720      -156.646       156.646       1691.76       1848.41    
   5  0.834641     -0.180753      -92.9190       92.9190       1573.00       1665.92    
   6  0.464401     -0.767007      -394.292       394.292       1500.10       1894.39    
   7  0.592116     -0.524053      -269.398       269.398       1552.58       1821.98    
   8  0.464372     -0.767069      -394.324       394.324       1763.11       2157.44    
   9  0.636055E-01  -2.75505      -1416.28       1416.28       1761.85       3178.12    
  10  0.712927     -0.338376      -173.948       173.948       1789.28       1963.23    
  11  0.265597      -1.32578      -681.536       681.536       1508.93       2190.47    
  12  0.152318      -1.88178      -967.361       967.361       1721.08       2688.44    
  13  0.629580     -0.462703      -237.860       237.860       1703.70       1941.56    
  14  0.849464     -0.163150      -83.8696       83.8696       1618.35       1702.22    
  15  0.487816     -0.717817      -369.005       369.005       1739.04       2108.04    
  16  0.374667     -0.981718      -504.668       504.668       1842.53       2347.19    
  17  0.657383     -0.419488      -215.644       215.644       1584.73       1800.38    
  18  0.846901     -0.166172      -85.4232       85.4232       1826.93       1912.35    
  19  0.201185      -1.60353      -824.321       824.321       1717.77       2542.09    
  20  0.771980     -0.258797      -133.039       133.039       1843.55       1976.59    
  21  0.507739     -0.677788      -348.428       348.428       1535.02       1883.44    
  22  0.280262      -1.27203      -653.908       653.908       1716.14       2370.04    
  23  0.285359      -1.25401      -644.642       644.642       1745.28       2389.92    
  24  0.246191      -1.40165      -720.538       720.538       1835.98       2556.51    
  25  0.559989E-01  -2.88242      -1481.76       1481.76       1740.78       3222.53    
  26  0.330462      -1.10726      -569.206       569.206       1790.22       2359.43    
  27  0.899405     -0.106022      -54.5024       54.5024       1491.51       1546.01    
  28  0.637003     -0.450981      -231.834       231.834       1802.34       2034.18    
  29  0.699726E-01  -2.65965      -1367.24       1367.24       1352.25       2719.49    
  30  0.677191     -0.389802      -200.384       200.384       1991.50       2191.89    
  31  0.649507     -0.431542      -221.841       221.841       1822.10       2043.94    
  32  0.527986     -0.638685      -328.326       328.326       1479.12       1807.44    
  33  0.374870E-01  -3.28376      -1688.07       1688.07       1783.37       3471.44    
  34  0.448697     -0.801407      -411.976       411.976       1958.45       2370.43    
  35  0.809612     -0.211200      -108.571       108.571       1793.12       1901.69    
  36  0.836235     -0.178846      -91.9385       91.9385       1863.70       1955.64    
  37  0.198161      -1.61867      -832.105       832.105       1867.17       2699.27    
  38  0.222702      -1.50192      -772.086       772.086       1624.05       2396.13    
  39  0.888863     -0.117812      -60.5631       60.5631       1848.90       1909.46    
  40  0.868267     -0.141256      -72.6148       72.6148       2125.36       2197.97    
  41  0.164066      -1.80749      -929.167       929.167       1744.49       2673.66    
  42  0.163797      -1.80912      -930.009       930.009       2024.84       2954.85    
  43  0.883498     -0.123867      -63.6756       63.6756       1718.33       1782.00    
  44  0.749983     -0.287705      -147.899       147.899       2155.99       2303.89    
  45  0.666691     -0.405428      -208.417       208.417       1838.47       2046.89    
  46  0.978530     -0.217038E-01  -11.1572       11.1572       1814.86       1826.01    
  47  0.442024     -0.816391      -419.679       419.679       1897.70       2317.38    
  48  0.228080      -1.47806      -759.820       759.820       1713.55       2473.37    
  49  0.226174      -1.48645      -764.133       764.133       1764.77       2528.90    
  50  0.388394     -0.945736      -486.171       486.171       1715.30       2201.47    
  51  0.257425      -1.35703      -697.601       697.601       1871.71       2569.31    
  52  0.707288     -0.346317      -178.030       178.030       1674.94       1852.97    
  53  0.518387     -0.657032      -337.758       337.758       2214.87       2552.63    
  54  0.628700     -0.464102      -238.579       238.579       2074.91       2313.49    
  55  0.981249     -0.189295E-01  -9.73102       9.73102       2512.88       2522.61    
  56  0.928260     -0.744431E-01  -38.2687       38.2687       2074.74       2113.01    
  57  0.752004E-02  -4.89018      -2513.88       2513.88       1771.81       4285.68    
  58  0.930611     -0.719140E-01  -36.9685       36.9685       1989.46       2026.43    
  59  0.552686     -0.592965      -304.823       304.823       1632.99       1937.81    
  60  0.695877     -0.362583      -186.391       186.391       2092.67       2279.06    
  61  0.432533     -0.838096      -430.836       430.836       1708.53       2139.37    
  62  0.127859      -2.05683      -1057.35       1057.35       1770.52       2827.87    
  63  0.304427      -1.18932      -611.391       611.391       1998.98       2610.37    
  64  0.938376     -0.636043E-01  -32.6968       32.6968       1747.80       1780.49    
loop,thermsimp(1:2)       24   633.693       4.20600    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       1571.00         68.90          1.16         40.65          0.39          0.05        111.15
Just calling func    0   0        111.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104       1504.39         68.81          1.17         40.59          0.38          0.05        111.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1504.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       24
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       25
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      103     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -989.485       989.485       1518.51       2508.00    
   2  0.438196     -0.825090      -424.151       424.151       1491.51       1915.66    
   3  0.637359     -0.450422      -231.547       231.547       1573.00       1804.55    
   4  0.122813      -2.09709      -1078.04       1078.04       1618.35       2696.39    
   5  0.926899     -0.759107E-01  -39.0231       39.0231       1747.80       1786.82    
   6  0.456580     -0.783992      -403.024       403.024       1718.33       2121.35    
   7  0.988763     -0.113008E-01  -5.80938       5.80938       1584.73       1590.54    
   8  0.499609     -0.693930      -356.726       356.726       1479.12       1835.84    
   9  0.432617     -0.837902      -430.737       430.737       1552.58       1983.31    
  10  0.403570     -0.907406      -466.466       466.466       1814.86       2281.32    
  11  0.435824     -0.830517      -426.940       426.940       1691.76       2118.70    
  12  0.504807     -0.683579      -351.405       351.405       1674.94       2026.35    
  13  0.778763     -0.250048      -128.541       128.541       1535.02       1663.56    
  14  0.429140     -0.845972      -434.885       434.885       1500.10       1934.98    
  15  0.597763     -0.514562      -264.519       264.519       1793.12       2057.64    
  16  0.425932     -0.853476      -438.743       438.743       1848.90       2287.64    
  17  0.825778     -0.191430      -98.4075       98.4075       1826.93       1925.34    
  18  0.448772     -0.801241      -411.891       411.891       1632.99       2044.88    
  19  0.701335     -0.354770      -182.375       182.375       1703.70       1886.08    
  20  0.425857     -0.853651      -438.833       438.833       1863.70       2302.54    
  21  0.800815     -0.222126      -114.187       114.187       1789.28       1903.47    
  22  0.724239     -0.322634      -165.855       165.855       1843.55       2009.41    
  23  0.312194      -1.16413      -598.440       598.440       1989.46       2587.90    
  24  0.796592     -0.227412      -116.905       116.905       1802.34       1919.25    
  25  0.164146      -1.80700      -928.918       928.918       1822.10       2751.02    
  26  0.503041     -0.687083      -353.206       353.206       1456.43       1809.64    
  27  0.640838     -0.444978      -228.748       228.748       1838.47       2067.22    
  28  0.327752      -1.11550      -573.439       573.439       1739.04       2312.48    
  29  0.720325     -0.328053      -168.641       168.641       2074.74       2243.38    
  30  0.447570     -0.803922      -413.269       413.269       1708.53       2121.80    
  31  0.377461     -0.974289      -500.849       500.849       1763.11       2263.96    
  32  0.951264     -0.499633E-01  -25.6844       25.6844       1508.93       1534.62    
  33  0.610405     -0.493632      -253.760       253.760       1991.50       2245.26    
  34  0.564697     -0.571466      -293.771       293.771       2125.36       2419.13    
  35  0.993998     -0.601974E-02  -3.09454       3.09454       1715.30       1718.39    
  36  0.908032     -0.964757E-01  -49.5948       49.5948       1590.44       1640.03    
  37  0.731210     -0.313055      -160.931       160.931       2092.67       2253.60    
  38  0.818812     -0.199901      -102.762       102.762       2155.99       2258.75    
  39  0.423172     -0.859976      -442.085       442.085       2074.91       2516.99    
  40  0.554414     -0.589843      -303.218       303.218       1897.70       2200.92    
  41  0.244903E-01  -3.70948      -1906.92       1906.92       1842.53       3749.44    
  42  0.337898      -1.08501      -557.767       557.767       1790.22       2347.99    
  43  0.634521E-01  -2.75747      -1417.52       1417.52       1716.14       3133.66    
  44  0.824978     -0.192398      -98.9054       98.9054       1958.45       2057.36    
  45  0.954123     -0.469622E-01  -24.1417       24.1417       1745.28       1769.42    
  46  0.807852     -0.213376      -109.689       109.689       1624.05       1733.73    
  47  0.335430      -1.09234      -561.535       561.535       1713.55       2275.09    
  48  0.266194      -1.32353      -680.382       680.382       2512.88       3193.26    
  49  0.797818     -0.225874      -116.114       116.114       1764.77       1880.89    
  50  0.710601     -0.341644      -175.627       175.627       1717.77       1893.40    
  51  0.469059     -0.757026      -389.161       389.161       2214.87       2604.03    
  52  0.256457E-01  -3.66338      -1883.22       1883.22       1835.98       3719.19    
  53  0.620630     -0.477020      -245.220       245.220       1871.71       2116.93    
  54  0.600237     -0.510431      -262.395       262.395       1998.98       2261.37    
  55  0.959467     -0.413769E-01  -21.2704       21.2704       1744.49       1765.76    
  56  0.541492     -0.613428      -315.342       315.342       1721.08       2036.42    
  57  0.577789     -0.548547      -281.989       281.989       1867.17       2149.16    
  58  0.701570     -0.354435      -182.203       182.203       1352.25       1534.46    
  59  0.274557E-01  -3.59518      -1848.16       1848.16       1770.52       3618.68    
  60  0.584746     -0.536578      -275.836       275.836       2024.84       2300.67    
  61  0.131184      -2.03115      -1044.15       1044.15       1761.85       2805.99    
  62  0.986883     -0.132037E-01  -6.78758       6.78758       1740.78       1747.57    
  63  0.257198      -1.35791      -698.054       698.054       1783.37       2481.42    
  64  0.831173     -0.184917      -95.0596       95.0596       1504.39       1599.45    
loop,thermsimp(1:2)       25   989.485       424.151    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105       1649.67         69.81          1.37         40.11          0.00          0.05        111.33
Just calling func    0   0        111.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106       3660.20         68.79          1.16         41.08          0.11          0.05        111.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1649.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       25
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       26
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      105     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -127.039       127.039       1352.25       1479.29    
   2  0.928800     -0.738619E-01  -37.9699       37.9699       1508.93       1546.90    
   3  0.727994     -0.317462      -163.197       163.197       1584.73       1747.93    
   4  0.109723E-01  -4.51238      -2319.66       2319.66       1504.39       3824.06    
   5  0.160096      -1.83198      -941.758       941.758       1590.44       2532.19    
   6  0.497079     -0.699006      -359.335       359.335       1535.02       1894.35    
   7  0.789473     -0.236389      -121.520       121.520       1715.30       1836.82    
   8  0.763780     -0.269476      -138.528       138.528       1624.05       1762.57    
   9  0.217288      -1.52653      -784.738       784.738       1740.78       2525.52    
  10  0.867642     -0.141976      -72.9853       72.9853       1744.49       1817.47    
  11  0.740966     -0.299800      -154.117       154.117       1745.28       1899.39    
  12  0.999757     -0.242662E-03 -0.124744      0.124744       1747.80       1747.92    
  13  0.587476     -0.531920      -273.442       273.442       1573.00       1846.44    
  14  0.703619     -0.351518      -180.704       180.704       1456.43       1637.14    
  15  0.740946     -0.299828      -154.131       154.131       1479.12       1633.25    
  16  0.335927      -1.09086      -560.774       560.774       1764.77       2325.55    
  17  0.736553     -0.305774      -157.188       157.188       1703.70       1860.89    
  18  0.597397     -0.515174      -264.833       264.833       1717.77       1982.60    
  19  0.126601      -2.06672      -1062.43       1062.43       1789.28       2851.71    
  20  0.990194     -0.985477E-02  -5.06600       5.06600       1491.51       1496.57    
  21  0.716453     -0.333443      -171.412       171.412       1802.34       1973.75    
  22  0.279233E-01  -3.57829      -1839.48       1839.48       1826.93       3666.41    
  23  0.413932     -0.882054      -453.434       453.434       1500.10       1953.53    
  24  0.109516      -2.21168      -1136.95       1136.95       1552.58       2689.53    
  25  0.440749     -0.819279      -421.163       421.163       1843.55       2264.72    
  26  0.412115     -0.886453      -455.695       455.695       1674.94       2130.64    
  27  0.146963      -1.91758      -985.761       985.761       1721.08       2706.84    
  28  0.345919      -1.06155      -545.706       545.706       1632.99       2178.70    
  29  0.343614      -1.06824      -549.143       549.143       1958.45       2507.60    
  30  0.600334E-01  -2.81285      -1445.99       1445.99       1793.12       3239.11    
  31  0.751538     -0.285634      -146.835       146.835       1838.47       1985.31    
  32  0.878119     -0.129973      -66.8149       66.8149       1871.71       1938.52    
  33  0.544046     -0.608721      -312.923       312.923       1691.76       2004.68    
  34  0.931023     -0.714714E-01  -36.7410       36.7410       1718.33       1755.07    
  35  0.131968      -2.02520      -1041.09       1041.09       1708.53       2749.61    
  36  0.826694E-01  -2.49291      -1281.52       1281.52       1867.17       3148.69    
  37  0.174702E-02  -6.34984      -3264.24       3264.24       1897.70       5161.94    
  38  0.233470      -1.45470      -747.814       747.814       2074.74       2822.55    
  39  0.232927      -1.45703      -749.009       749.009       1991.50       2740.51    
  40  0.958279     -0.426163E-01  -21.9076       21.9076       2092.67       2114.58    
  41  0.820100     -0.198330      -101.954       101.954       2155.99       2257.94    
  42  0.305797      -1.18483      -609.083       609.083       1998.98       2608.06    
  43  0.260853      -1.34380      -690.801       690.801       1763.11       2453.91    
  44  0.960408     -0.403967E-01  -20.7666       20.7666       1713.55       1734.32    
  45  0.318957      -1.14270      -587.422       587.422       1814.86       2402.28    
  46  0.146887      -1.91809      -986.026       986.026       1848.90       2834.92    
  47  0.787623     -0.238735      -122.726       122.726       2024.84       2147.56    
  48  0.452412     -0.793163      -407.738       407.738       1863.70       2271.44    
  49  0.218339      -1.52170      -782.256       782.256       1739.04       2521.29    
  50  0.177672      -1.72782      -888.212       888.212       1790.22       2678.44    
  51  0.928922     -0.737304E-01  -37.9023       37.9023       2125.36       2163.26    
  52  0.341447      -1.07456      -552.396       552.396       1783.37       2335.76    
  53  0.462674     -0.770732      -396.207       396.207       1518.51       1914.72    
  54  0.125513      -2.07534      -1066.86       1066.86       2074.91       3141.77    
  55  0.354899      -1.03592      -532.532       532.532       1989.46       2522.00    
  56  0.341830      -1.07344      -551.821       551.821       2214.87       2766.69    
  57  0.604983     -0.502555      -258.346       258.346       1618.35       1876.69    
  58  0.223932      -1.49641      -769.254       769.254       1822.10       2591.36    
  59  0.146473      -1.92091      -987.475       987.475       1761.85       2749.32    
  60  0.997224     -0.277992E-02  -1.42906       1.42906       1716.14       1717.56    
  61  0.430465     -0.842888      -433.300       433.300       2512.88       2946.18    
  62  0.712472     -0.339015      -174.276       174.276       1770.52       1944.80    
  63  0.303370      -1.19280      -613.179       613.179       1835.98       2449.15    
  64  0.676458E-01  -2.69347      -1384.62       1384.62       1649.67       3034.29    
loop,thermsimp(1:2)       26   127.039       37.9699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       1539.50         68.84          1.16         40.62          0.49          0.04        111.16
Just calling func    0   0        111.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1539.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       26
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       27
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      106     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -102.953       102.953       1352.25       1455.21    
   2  0.309452      -1.17295      -602.975       602.975       1491.51       2094.48    
   3  0.303638      -1.19192      -612.725       612.725       1508.93       2121.66    
   4  0.754457     -0.281757      -144.842       144.842       1479.12       1623.96    
   5  0.623133     -0.472996      -243.151       243.151       1456.43       1699.58    
   6  0.989422E-01  -2.31322      -1189.15       1189.15       1716.14       2905.28    
   7  0.695126     -0.363662      -186.946       186.946       1713.55       1900.50    
   8  0.832210E-01  -2.48626      -1278.10       1278.10       1747.80       3025.90    
   9  0.869521     -0.139813      -71.8732       71.8732       1584.73       1656.60    
  10  0.488136     -0.717160      -368.668       368.668       1718.33       2086.99    
  11  0.579877     -0.544940      -280.135       280.135       1624.05       1904.18    
  12  0.480435     -0.733064      -376.843       376.843       1744.49       2121.33    
  13  0.792626     -0.232404      -119.471       119.471       1715.30       1834.77    
  14  0.870230     -0.138998      -71.4540       71.4540       1573.00       1644.45    
  15  0.886361     -0.120631      -62.0121       62.0121       1703.70       1765.72    
  16  0.358181      -1.02672      -527.801       527.801       1618.35       2146.15    
  17  0.560125     -0.579594      -297.950       297.950       1535.02       1832.97    
  18  0.546151     -0.604859      -310.937       310.937       1745.28       2056.21    
  19  0.732086     -0.311858      -160.315       160.315       1518.51       1678.83    
  20  0.590102     -0.527460      -271.149       271.149       1871.71       2142.86    
  21  0.867355     -0.142307      -73.1554       73.1554       1770.52       1843.68    
  22  0.749758     -0.288005      -148.054       148.054       1500.10       1648.15    
  23  0.721970     -0.325772      -167.468       167.468       1802.34       1969.81    
  24  0.596865     -0.516065      -265.291       265.291       1717.77       1983.06    
  25  0.878161     -0.129925      -66.7899       66.7899       1838.47       1905.26    
  26  0.558752E-01  -2.88463      -1482.89       1482.89       1691.76       3174.65    
  27  0.555543     -0.587810      -302.173       302.173       2092.67       2394.84    
  28  0.597562     -0.514897      -264.691       264.691       1674.94       1939.63    
  29  0.995329     -0.468202E-02  -2.40687       2.40687       2024.84       2027.24    
  30  0.206787      -1.57606      -810.201       810.201       2125.36       2935.56    
  31  0.645457     -0.437797      -225.057       225.057       1632.99       1858.05    
  32  0.871352     -0.137710      -70.7918       70.7918       2155.99       2226.78    
  33  0.701360     -0.354733      -182.356       182.356       1843.55       2025.91    
  34  0.936151     -0.659784E-01  -33.9173       33.9173       1863.70       1897.62    
  35  0.590091     -0.527478      -271.159       271.159       1764.77       2035.93    
  36  0.750433     -0.287105      -147.591       147.591       1783.37       1930.96    
  37  0.326255      -1.12007      -575.792       575.792       1814.86       2390.65    
  38  0.873133     -0.135668      -69.7422       69.7422       1835.98       1905.72    
  39  0.621627     -0.475415      -244.394       244.394       1763.11       2007.51    
  40  0.153041      -1.87705      -964.927       964.927       1958.45       2923.38    
  41  0.196696      -1.62610      -835.921       835.921       1739.04       2574.96    
  42  0.365028      -1.00778      -518.066       518.066       1989.46       2507.53    
  43  0.398429     -0.920226      -473.057       473.057       1740.78       2213.83    
  44  0.549691     -0.598399      -307.617       307.617       1590.44       1898.05    
  45  0.994179     -0.583795E-02  -3.00109       3.00109       1822.10       1825.10    
  46  0.147335E-01  -4.21763      -2168.14       2168.14       1998.98       4167.12    
  47  0.224737      -1.49282      -767.410       767.410       1790.22       2557.63    
  48  0.182172      -1.70281      -875.355       875.355       1552.58       2427.93    
  49  0.230919      -1.46569      -753.461       753.461       1721.08       2474.54    
  50  0.491818     -0.709647      -364.805       364.805       1991.50       2356.31    
  51  0.370754     -0.992217      -510.065       510.065       1761.85       2271.91    
  52  0.785622     -0.241279      -124.033       124.033       1708.53       1832.56    
  53  0.476284     -0.741742      -381.304       381.304       2214.87       2596.18    
  54  0.958799     -0.420736E-01  -21.6286       21.6286       2074.74       2096.37    
  55  0.305133      -1.18701      -610.200       610.200       1848.90       2459.10    
  56  0.270329      -1.30812      -672.458       672.458       1789.28       2461.74    
  57  0.130426      -2.03695      -1047.13       1047.13       2512.88       3560.00    
  58  0.222171      -1.50431      -773.313       773.313       1649.67       2422.98    
  59  0.233872      -1.45298      -746.928       746.928       2074.91       2821.84    
  60  0.916355E-02  -4.69252      -2412.27       2412.27       1867.17       4279.44    
  61  0.400634     -0.914708      -470.220       470.220       1793.12       2263.34    
  62  0.354647E-01  -3.33922      -1716.58       1716.58       1826.93       3543.51    
  63  0.453450     -0.790870      -406.559       406.559       1504.39       1910.95    
  64  0.411527     -0.887880      -456.429       456.429       1539.50       1995.93    
loop,thermsimp(1:2)       27   102.953       602.975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108       2025.02         68.88          1.18         40.55          0.46          0.05        111.11
Just calling func    0   0        111.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2025.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       27
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       28
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      107     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -109.178       109.178       1352.25       1461.43    
   2  0.162004E-01  -4.12272      -2119.35       2119.35       1479.12       3598.47    
   3  0.446841E-01  -3.10814      -1597.79       1597.79       1573.00       3170.79    
   4  0.757954     -0.277132      -142.464       142.464       1500.10       1642.56    
   5  0.525315     -0.643757      -330.934       330.934       1584.73       1915.66    
   6  0.229940      -1.46994      -755.645       755.645       1518.51       2274.16    
   7  0.273310E-01  -3.59973      -1850.50       1850.50       1456.43       3306.93    
   8  0.228047      -1.47820      -759.893       759.893       1703.70       2463.60    
   9  0.963384E-01  -2.33989      -1202.86       1202.86       1822.10       3024.96    
  10  0.495504     -0.702179      -360.966       360.966       1708.53       2069.50    
  11  0.930436     -0.721018E-01  -37.0651       37.0651       1535.02       1572.08    
  12  0.138744      -1.97513      -1015.35       1015.35       1715.30       2730.64    
  13  0.676381     -0.390999      -200.999       200.999       1770.52       1971.52    
  14  0.763696     -0.269586      -138.585       138.585       1632.99       1771.57    
  15  0.282468      -1.26419      -649.877       649.877       1863.70       2513.58    
  16  0.359172      -1.02395      -526.379       526.379       1590.44       2116.82    
  17  0.392258     -0.935834      -481.081       481.081       1713.55       2194.63    
  18  0.524686     -0.644955      -331.549       331.549       1624.05       1955.59    
  19  0.850465     -0.161972      -83.2643       83.2643       1838.47       1921.74    
  20  0.227056      -1.48256      -762.132       762.132       1835.98       2598.11    
  21  0.942039     -0.597082E-01  -30.6939       30.6939       1504.39       1535.09    
  22  0.807336     -0.214016      -110.018       110.018       1783.37       1893.38    
  23  0.345853      -1.06174      -545.805       545.805       1674.94       2220.75    
  24  0.762940     -0.270575      -139.094       139.094       1802.34       1941.43    
  25  0.589959     -0.527702      -271.273       271.273       1717.77       1989.04    
  26  0.563539     -0.573518      -294.826       294.826       1539.50       1834.33    
  27  0.812044     -0.208201      -107.029       107.029       1763.11       1870.14    
  28  0.735850     -0.306729      -157.679       157.679       1843.55       2001.23    
  29  0.396292     -0.925605      -475.822       475.822       2024.84       2500.66    
  30  0.623568     -0.472298      -242.792       242.792       1764.77       2007.56    
  31  0.925937     -0.769486E-01  -39.5566       39.5566       1745.28       1784.83    
  32  0.880074     -0.127749      -65.6716       65.6716       1718.33       1784.00    
  33  0.379958     -0.967693      -497.458       497.458       1491.51       1988.97    
  34  0.842940E-01  -2.47344      -1271.51       1271.51       2074.74       3346.25    
  35  0.199092      -1.61399      -829.696       829.696       1744.49       2574.19    
  36  0.625899     -0.468566      -240.874       240.874       1508.93       1749.81    
  37  0.888337     -0.118405      -60.8677       60.8677       1871.71       1932.58    
  38  0.959633     -0.412048E-01  -21.1820       21.1820       1618.35       1639.53    
  39  0.289813      -1.23852      -636.680       636.680       1740.78       2377.46    
  40  0.889440     -0.117163      -60.2296       60.2296       2155.99       2216.22    
  41  0.797260     -0.226575      -116.474       116.474       1793.12       1909.59    
  42  0.451097     -0.796073      -409.234       409.234       1761.85       2171.08    
  43  0.609578     -0.494989      -254.457       254.457       1991.50       2245.96    
  44  0.910850     -0.933770E-01  -48.0019       48.0019       1814.86       1862.86    
  45  0.448191     -0.802536      -412.556       412.556       2092.67       2505.23    
  46  0.831229     -0.184850      -95.0248       95.0248       1649.67       1744.70    
  47  0.246260      -1.40137      -720.396       720.396       1552.58       2272.97    
  48  0.280480      -1.27125      -653.507       653.507       1848.90       2502.40    
  49  0.161513      -1.82317      -937.229       937.229       1789.28       2726.51    
  50  0.337020      -1.08761      -559.105       559.105       1721.08       2280.19    
  51  0.160136      -1.83173      -941.629       941.629       1989.46       2931.09    
  52  0.268039      -1.31662      -676.831       676.831       1790.22       2467.05    
  53  0.907744     -0.967928E-01  -49.7579       49.7579       1739.04       1788.80    
  54  0.237998      -1.43549      -737.938       737.938       2214.87       2952.81    
  55  0.932063     -0.703547E-01  -36.1670       36.1670       2074.91       2111.08    
  56  0.304233      -1.18996      -611.719       611.719       1716.14       2327.85    
  57  0.471578     -0.751672      -386.409       386.409       1958.45       2344.86    
  58  0.985625     -0.144798E-01  -7.44357       7.44357       2125.36       2132.80    
  59  0.576194     -0.551311      -283.410       283.410       1747.80       2031.21    
  60  0.561463     -0.577209      -296.724       296.724       1691.76       1988.48    
  61  0.762775     -0.270792      -139.205       139.205       1826.93       1966.13    
  62  0.728042     -0.317397      -163.163       163.163       2512.88       2676.04    
  63  0.246589      -1.40003      -719.709       719.709       1998.98       2718.69    
  64  0.128678      -2.05044      -1054.06       1054.06       2025.02       3079.08    
loop,thermsimp(1:2)       28   109.178       2119.35    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109       1807.25         68.85          1.14         40.59          0.45          0.05        111.08
Just calling func    0   0        111.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1807.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       28
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       29
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      108     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -1107.89       1107.89       1352.25       2460.14    
   2  0.685048     -0.378267      -194.454       194.454       1504.39       1698.85    
   3  0.739526     -0.301746      -155.117       155.117       1535.02       1690.13    
   4  0.161448      -1.82357      -937.436       937.436       1618.35       2555.78    
   5  0.819608     -0.198929      -102.263       102.263       1500.10       1602.36    
   6  0.750679     -0.286777      -147.422       147.422       1649.67       1797.09    
   7  0.797409     -0.226388      -116.378       116.378       1508.93       1625.31    
   8  0.193123      -1.64443      -845.345       845.345       1632.99       2478.33    
   9  0.189346E-01  -3.96676      -2039.18       2039.18       1718.33       3757.50    
  10  0.715264     -0.335103      -172.265       172.265       1745.28       1917.54    
  11  0.384856     -0.954886      -490.874       490.874       1739.04       2229.91    
  12  0.268023      -1.31668      -676.862       676.862       1539.50       2216.36    
  13  0.777164     -0.252104      -129.598       129.598       1814.86       1944.45    
  14  0.707495E-01  -2.64861      -1361.56       1361.56       1763.11       3124.67    
  15  0.233610      -1.45410      -747.504       747.504       1783.37       2530.87    
  16  0.193057      -1.64477      -845.521       845.521       1793.12       2638.64    
  17  0.486879     -0.719739      -369.994       369.994       1584.73       1954.72    
  18  0.735370     -0.307381      -158.014       158.014       1838.47       1996.49    
  19  0.147509      -1.91387      -983.854       983.854       1871.71       2855.56    
  20  0.739111     -0.302308      -155.406       155.406       1802.34       1957.75    
  21  0.886241     -0.120766      -62.0816       62.0816       1624.05       1686.13    
  22  0.158672      -1.84092      -946.352       946.352       1826.93       2773.28    
  23  0.143658      -1.94032      -997.453       997.453       1770.52       2767.98    
  24  0.637431E-02  -5.05548      -2598.85       2598.85       1691.76       4290.61    
  25  0.753372     -0.283196      -145.582       145.582       1491.51       1637.09    
  26  0.555831     -0.587292      -301.907       301.907       1717.77       2019.68    
  27  0.280013      -1.27292      -654.364       654.364       1843.55       2497.92    
  28  0.811304     -0.209112      -107.498       107.498       1764.77       1872.27    
  29  0.972296E-02  -4.63327      -2381.80       2381.80       1747.80       4129.60    
  30  0.713459     -0.337631      -173.565       173.565       1708.53       1882.09    
  31  0.194621      -1.63670      -841.371       841.371       2074.91       2916.28    
  32  0.492587     -0.708083      -364.001       364.001       1590.44       1954.44    
  33  0.759094E-01  -2.57821      -1325.37       1325.37       2125.36       3450.73    
  34  0.494544     -0.704119      -361.964       361.964       1761.85       2123.81    
  35  0.297023      -1.21395      -624.049       624.049       1713.55       2337.60    
  36  0.429878E-01  -3.14684      -1617.68       1617.68       2155.99       3773.67    
  37  0.490931     -0.711452      -365.733       365.733       1674.94       2040.68    
  38  0.534417     -0.626578      -322.102       322.102       1991.50       2313.60    
  39  0.254967      -1.36662      -702.532       702.532       1552.58       2255.11    
  40  0.995945     -0.406335E-02  -2.08883       2.08883       1518.51       1520.60    
  41  0.428814E-01  -3.14932      -1618.96       1618.96       1721.08       3340.04    
  42  0.332915      -1.09987      -565.405       565.405       1716.14       2281.54    
  43  0.657266     -0.419666      -215.736       215.736       1958.45       2174.19    
  44  0.301071      -1.20041      -617.089       617.089       1740.78       2357.87    
  45  0.998178     -0.182349E-02 -0.937396      0.937396       1703.70       1704.64    
  46  0.533372     -0.628536      -323.109       323.109       1790.22       2113.33    
  47  0.244746      -1.40753      -723.565       723.565       2024.84       2748.40    
  48  0.345321      -1.06328      -546.597       546.597       1848.90       2395.49    
  49  0.339541      -1.08016      -555.274       555.274       2092.67       2647.94    
  50  0.456434     -0.784311      -403.188       403.188       1863.70       2266.89    
  51  0.510210     -0.672933      -345.932       345.932       1744.49       2090.42    
  52  0.678441     -0.387958      -199.436       199.436       1835.98       2035.41    
  53  0.802552     -0.219958      -113.073       113.073       2512.88       2625.95    
  54  0.542503     -0.611562      -314.383       314.383       1998.98       2313.36    
  55  0.887113     -0.119783      -61.5765       61.5765       1789.28       1850.86    
  56  0.631934     -0.458971      -235.941       235.941       1715.30       1951.24    
  57  0.776760     -0.252624      -129.866       129.866       1989.46       2119.33    
  58  0.764990     -0.267893      -137.715       137.715       2214.87       2352.59    
  59  0.329328      -1.11070      -570.973       570.973       1822.10       2393.07    
  60  0.304425      -1.18933      -611.394       611.394       2025.02       2636.41    
  61  0.992863     -0.716266E-02  -3.68208       3.68208       1573.00       1576.68    
  62  0.545111     -0.606767      -311.918       311.918       1456.43       1768.35    
  63  0.215175      -1.53630      -789.761       789.761       2074.74       2864.50    
  64  0.486479     -0.720562      -370.416       370.416       1807.25       2177.66    
loop,thermsimp(1:2)       29   1107.89       194.454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110       1532.92         68.86          1.14         40.69          0.51          0.05        111.25
Just calling func    0   0        111.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    111       1449.54         68.81          1.15         40.85          0.22          0.05        111.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1449.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       29
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       30
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      110     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -1659.38       1659.38       1518.51       3177.89    
   2  0.712690     -0.338709      -174.119       174.119       1573.00       1747.12    
   3  0.284498      -1.25703      -646.196       646.196       1500.10       2146.29    
   4  0.132414      -2.02182      -1039.35       1039.35       1508.93       2548.28    
   5  0.868558     -0.140920      -72.4423       72.4423       1491.51       1563.95    
   6  0.695240     -0.363498      -186.862       186.862       1624.05       1810.91    
   7  0.777362     -0.251849      -129.467       129.467       1535.02       1664.48    
   8  0.302494      -1.19569      -614.665       614.665       1504.39       2119.06    
   9  0.710188     -0.342225      -175.926       175.926       1703.70       1879.63    
  10  0.884530     -0.122698      -63.0750       63.0750       1456.43       1519.51    
  11  0.146421E-01  -4.22386      -2171.34       2171.34       1649.67       3821.01    
  12  0.834801     -0.180562      -92.8206       92.8206       1789.28       1882.10    
  13  0.414011     -0.881863      -453.336       453.336       1764.77       2218.11    
  14  0.655777     -0.421935      -216.902       216.902       1708.53       1925.43    
  15  0.530106     -0.634679      -326.267       326.267       1745.28       2071.54    
  16  0.325231      -1.12322      -577.409       577.409       1814.86       2392.27    
  17  0.293550      -1.22571      -630.095       630.095       1715.30       2345.39    
  18  0.194161      -1.63907      -842.590       842.590       1590.44       2433.03    
  19  0.589029E-01  -2.83186      -1455.76       1455.76       1584.73       3040.50    
  20  0.385142     -0.954143      -490.492       490.492       1802.34       2292.83    
  21  0.287461      -1.24667      -640.870       640.870       1838.47       2479.34    
  22  0.528518     -0.637678      -327.809       327.809       1717.77       2045.58    
  23  0.517042     -0.659630      -339.093       339.093       1835.98       2175.07    
  24  0.453375     -0.791035      -406.644       406.644       1674.94       2081.59    
  25  0.695596     -0.362986      -186.599       186.599       1744.49       1931.09    
  26  0.645178     -0.438228      -225.278       225.278       1790.22       2015.50    
  27  0.696076     -0.362297      -186.245       186.245       1989.46       2175.71    
  28  0.483522     -0.726659      -373.550       373.550       1761.85       2135.40    
  29  0.155396E-01  -4.16436      -2140.76       2140.76       1958.45       4099.21    
  30  0.883154     -0.124256      -63.8758       63.8758       1807.25       1871.12    
  31  0.525944     -0.642561      -330.319       330.319       1539.50       1869.82    
  32  0.746799     -0.291959      -150.086       150.086       1739.04       1889.12    
  33  0.458658     -0.779449      -400.688       400.688       1552.58       1953.27    
  34  0.614284     -0.487298      -250.503       250.503       1863.70       2114.21    
  35  0.581412     -0.542295      -278.776       278.776       1716.14       1994.91    
  36  0.820935     -0.197312      -101.431       101.431       1998.98       2100.41    
  37  0.852366     -0.159739      -82.1164       82.1164       1991.50       2073.62    
  38  0.527059     -0.640443      -329.230       329.230       1713.55       2042.78    
  39  0.376404     -0.977092      -502.290       502.290       2214.87       2717.16    
  40  0.729525E-01  -2.61795      -1345.80       1345.80       1740.78       3086.57    
  41  0.342258      -1.07219      -551.177       551.177       1822.10       2373.28    
  42  0.955065     -0.459761E-01  -23.6347       23.6347       1848.90       1872.53    
  43  0.508654E-01  -2.97857      -1531.18       1531.18       1352.25       2883.44    
  44  0.471716     -0.751379      -386.258       386.258       1632.99       2019.25    
  45  0.137118      -1.98691      -1021.41       1021.41       1843.55       2864.96    
  46  0.844826     -0.168625      -86.6841       86.6841       1783.37       1870.05    
  47  0.841708     -0.172322      -88.5848       88.5848       1618.35       1706.93    
  48  0.360396E-01  -3.32314      -1708.31       1708.31       2512.88       4221.19    
  49  0.953282     -0.478444E-01  -24.5952       24.5952       2025.02       2049.61    
  50  0.503408     -0.686355      -352.831       352.831       1793.12       2145.95    
  51  0.593854     -0.521122      -267.891       267.891       2092.67       2360.56    
  52  0.524910     -0.644528      -331.330       331.330       2024.84       2356.17    
  53  0.730244     -0.314377      -161.610       161.610       1770.52       1932.13    
  54  0.828919     -0.187632      -96.4554       96.4554       1826.93       1923.38    
  55  0.151629      -1.88632      -969.690       969.690       1871.71       2841.40    
  56  0.431672     -0.840089      -431.861       431.861       2074.74       2506.60    
  57  0.449333     -0.799990      -411.248       411.248       2074.91       2486.16    
  58  0.116759      -2.14764      -1104.03       1104.03       1763.11       2867.14    
  59  0.578588     -0.547165      -281.279       281.279       1721.08       2002.36    
  60  0.119282      -2.12627      -1093.04       1093.04       2125.36       3218.40    
  61  0.643272E-01  -2.74377      -1410.48       1410.48       1718.33       3128.81    
  62  0.906211     -0.984834E-01  -50.6270       50.6270       2155.99       2206.62    
  63  0.811859     -0.208429      -107.146       107.146       1747.80       1854.94    
  64  0.119821      -2.12175      -1090.72       1090.72       1449.54       2540.26    
loop,thermsimp(1:2)       30   1659.38       174.119    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    112       1714.12         68.81          1.15         40.61          0.45          0.05        111.07
Just calling func    0   0        111.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    113       3235.33         68.74          1.14         40.55          0.50          0.04        110.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1714.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       30
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       31
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      112     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -715.573       715.573       1456.43       2172.01    
   2  0.247647      -1.39575      -717.508       717.508       1491.51       2209.02    
   3  0.396263     -0.925678      -475.860       475.860       1535.02       2010.88    
   4  0.386461     -0.950723      -488.734       488.734       1618.35       2107.08    
   5  0.729285     -0.315691      -162.286       162.286       1573.00       1735.29    
   6  0.665866     -0.406667      -209.054       209.054       1624.05       1833.10    
   7  0.385122     -0.954194      -490.519       490.519       1747.80       2238.32    
   8  0.625701     -0.468883      -241.037       241.037       1539.50       1780.54    
   9  0.392668     -0.934792      -480.545       480.545       1783.37       2263.91    
  10  0.698356     -0.359026      -184.563       184.563       1807.25       1991.81    
  11  0.537534E-01  -2.92335      -1502.79       1502.79       1848.90       3351.69    
  12  0.289307      -1.24027      -637.579       637.579       1703.70       2341.28    
  13  0.138460E-01  -4.27976      -2200.08       2200.08       1789.28       3989.36    
  14  0.824110     -0.193451      -99.4464       99.4464       1739.04       1838.48    
  15  0.560983     -0.578065      -297.163       297.163       1826.93       2124.09    
  16  0.116087E-01  -4.45600      -2290.68       2290.68       1708.53       3999.21    
  17  0.218033      -1.52311      -782.978       782.978       1744.49       2527.47    
  18  0.893705E-01  -2.41497      -1241.45       1241.45       1770.52       3011.97    
  19  0.304886      -1.18782      -610.616       610.616       1552.58       2163.19    
  20  0.179833      -1.71573      -881.998       881.998       1716.14       2598.13    
  21  0.867378     -0.142281      -73.1417       73.1417       1721.08       1794.22    
  22  0.243287      -1.41351      -726.639       726.639       1790.22       2516.86    
  23  0.772489     -0.258138      -132.700       132.700       1632.99       1765.69    
  24  0.321011      -1.13628      -584.123       584.123       1713.55       2297.68    
  25  0.499417     -0.694314      -356.923       356.923       1717.77       2074.69    
  26  0.396806     -0.924307      -475.155       475.155       2025.02       2500.17    
  27  0.580203E-01  -2.84696      -1463.53       1463.53       1745.28       3208.80    
  28  0.854206     -0.157583      -81.0080       81.0080       1991.50       2072.51    
  29  0.914649     -0.892145E-01  -45.8621       45.8621       1674.94       1720.80    
  30  0.167601      -1.78617      -918.209       918.209       1998.98       2917.19    
  31  0.350137      -1.04943      -539.477       539.477       1863.70       2403.18    
  32  0.522932     -0.648304      -333.271       333.271       1504.39       1837.66    
  33  0.538779     -0.618450      -317.924       317.924       1761.85       2079.77    
  34  0.693066     -0.366629      -188.472       188.472       1793.12       1981.59    
  35  0.361961      -1.01622      -522.403       522.403       1500.10       2022.50    
  36  0.310665      -1.16904      -600.964       600.964       1835.98       2436.94    
  37  0.818669     -0.200076      -102.852       102.852       1989.46       2092.32    
  38  0.582861     -0.539807      -277.496       277.496       2155.99       2433.48    
  39  0.401728     -0.911979      -468.817       468.817       1764.77       2233.59    
  40  0.171089      -1.76557      -907.621       907.621       1802.34       2709.96    
  41  0.980174     -0.200248E-01  -10.2941       10.2941       1715.30       1725.59    
  42  0.495496     -0.702196      -360.975       360.975       2024.84       2385.81    
  43  0.436683     -0.828549      -425.929       425.929       2092.67       2518.60    
  44  0.910411     -0.938588E-01  -48.2496       48.2496       1822.10       1870.35    
  45  0.649932     -0.430887      -221.504       221.504       1814.86       2036.36    
  46  0.755226     -0.280738      -144.318       144.318       1590.44       1734.75    
  47  0.927352     -0.754221E-01  -38.7719       38.7719       1838.47       1877.25    
  48  0.848028     -0.164842      -84.7396       84.7396       2074.91       2159.65    
  49  0.146193      -1.92283      -988.462       988.462       2074.74       3063.20    
  50  0.571278     -0.559879      -287.815       287.815       1449.54       1737.35    
  51  0.244418      -1.40888      -724.256       724.256       1508.93       2233.19    
  52  0.979014     -0.212091E-01  -10.9029       10.9029       2214.87       2225.78    
  53  0.235747      -1.44500      -742.823       742.823       1871.71       2614.53    
  54  0.486927     -0.719642      -369.943       369.943       1843.55       2213.50    
  55  0.694010     -0.365269      -187.772       187.772       1763.11       1950.89    
  56  0.392305     -0.935716      -481.020       481.020       1352.25       1833.27    
  57  0.334373      -1.09550      -563.159       563.159       1584.73       2147.89    
  58  0.526166     -0.642138      -330.101       330.101       1740.78       2070.88    
  59  0.701539     -0.354479      -182.225       182.225       1718.33       1900.55    
  60  0.447845     -0.803307      -412.953       412.953       1518.51       1931.47    
  61  0.927856     -0.748784E-01  -38.4924       38.4924       2125.36       2163.85    
  62  0.453274     -0.791258      -406.759       406.759       1649.67       2056.43    
  63  0.291736      -1.23190      -633.280       633.280       1958.45       2591.73    
  64  0.497643E-02  -5.30304      -2726.11       2726.11       1714.12       4440.24    
loop,thermsimp(1:2)       31   715.573       717.508    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114       2517.14         68.90          1.17         40.60          0.00          0.04        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2517.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       31
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       32
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      113     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -2.02418       2.02418       1674.94       1676.97    
   2  0.758684E-02  -4.88134      -2509.33       2509.33       1715.30       4224.63    
   3  0.404439     -0.905254      -465.360       465.360       1590.44       2055.80    
   4  0.947917E-01  -2.35607      -1211.18       1211.18       1573.00       2784.18    
   5  0.834417     -0.181022      -93.0574       93.0574       1449.54       1542.60    
   6  0.891274     -0.115104      -59.1709       59.1709       1632.99       1692.16    
   7  0.744451     -0.295108      -151.705       151.705       1539.50       1691.20    
   8  0.559638     -0.580466      -298.398       298.398       1721.08       2019.48    
   9  0.821724     -0.196351      -100.937       100.937       1624.05       1724.98    
  10  0.847292     -0.165710      -85.1856       85.1856       1352.25       1437.44    
  11  0.661676     -0.412979      -212.299       212.299       1504.39       1716.69    
  12  0.993427     -0.659478E-02  -3.39015       3.39015       1739.04       1742.43    
  13  0.425996     -0.853326      -438.666       438.666       1822.10       2260.77    
  14  0.673132     -0.395813      -203.474       203.474       1838.47       2041.95    
  15  0.234810      -1.44898      -744.870       744.870       1718.33       2463.20    
  16  0.122926      -2.09617      -1077.57       1077.57       1518.51       2596.08    
  17  0.523553     -0.647118      -332.661       332.661       1763.11       2095.77    
  18  0.959317     -0.415333E-01  -21.3509       21.3509       1793.12       1814.47    
  19  0.321726      -1.13406      -582.979       582.979       1807.25       2390.22    
  20  0.493112     -0.707018      -363.454       363.454       1535.02       1898.47    
  21  0.416134     -0.876748      -450.706       450.706       1500.10       1950.80    
  22  0.409432     -0.892985      -459.053       459.053       1814.86       2273.91    
  23  0.657956     -0.418617      -215.197       215.197       1649.67       1864.87    
  24  0.904324     -0.100567      -51.6983       51.6983       1740.78       1792.48    
  25  0.714426     -0.336276      -172.868       172.868       1991.50       2164.37    
  26  0.150521      -1.89365      -973.461       973.461       1717.77       2691.23    
  27  0.758740     -0.276096      -141.932       141.932       1761.85       1903.78    
  28  0.359105      -1.02414      -526.476       526.476       1989.46       2515.94    
  29  0.666937     -0.405060      -208.227       208.227       1618.35       1826.57    
  30  0.343213      -1.06940      -549.744       549.744       1826.93       2376.67    
  31  0.484849     -0.723918      -372.142       372.142       1584.73       1956.87    
  32  0.874661     -0.133919      -68.8431       68.8431       2074.91       2143.75    
  33  0.994710     -0.530415E-02  -2.72668       2.72668       1552.58       1555.30    
  34  0.821923     -0.196109      -100.813       100.813       2125.36       2226.17    
  35  0.954096E-02  -4.65216      -2391.52       2391.52       1456.43       3847.95    
  36  0.240030      -1.42699      -733.567       733.567       1491.51       2225.07    
  37  0.279003      -1.27653      -656.221       656.221       1843.55       2499.77    
  38  0.553830     -0.590898      -303.761       303.761       2214.87       2518.63    
  39  0.400809     -0.914271      -469.996       469.996       1508.93       1978.93    
  40  0.146125      -1.92330      -988.701       988.701       1764.77       2753.47    
  41  0.811879     -0.208403      -107.133       107.133       1747.80       1854.93    
  42  0.349149      -1.05226      -540.930       540.930       1783.37       2324.30    
  43  0.897422     -0.108229      -55.6368       55.6368       1713.55       1769.19    
  44  0.114492      -2.16725      -1114.11       1114.11       1703.70       2817.81    
  45  0.831901E-01  -2.48663      -1278.29       1278.29       2024.84       3303.13    
  46  0.721169     -0.326882      -168.039       168.039       1863.70       2031.74    
  47  0.801724     -0.220991      -113.604       113.604       2155.99       2269.59    
  48  0.466569     -0.762349      -391.898       391.898       1835.98       2227.87    
  49  0.103404      -2.26911      -1166.47       1166.47       2025.02       3191.49    
  50  0.417206     -0.874175      -449.383       449.383       1790.22       2239.61    
  51  0.267666      -1.31802      -677.547       677.547       2092.67       2770.22    
  52  0.670232     -0.400131      -205.694       205.694       1744.49       1950.18    
  53  0.161265      -1.82470      -938.018       938.018       1958.45       2896.47    
  54  0.414706     -0.880185      -452.473       452.473       1716.14       2168.61    
  55  0.501015     -0.691119      -355.281       355.281       1871.71       2226.99    
  56  0.516090     -0.661474      -340.041       340.041       1802.34       2142.38    
  57  0.424740     -0.856278      -440.183       440.183       1998.98       2439.16    
  58  0.303796      -1.19140      -612.457       612.457       1770.52       2382.98    
  59  0.803455     -0.218834      -112.495       112.495       2074.74       2187.23    
  60  0.416256     -0.876456      -450.556       450.556       1745.28       2195.83    
  61  0.760689     -0.273531      -140.613       140.613       1848.90       1989.51    
  62  0.995587     -0.442238E-02  -2.27340       2.27340       1789.28       1791.55    
  63  0.961804     -0.389449E-01  -20.0202       20.0202       1708.53       1728.55    
  64  0.321618      -1.13439      -583.152       583.152       2517.14       3100.30    
loop,thermsimp(1:2)       32   2.02418       2509.33    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115       1859.36         68.81          1.17         40.58          0.24          0.05        110.85
Just calling func    0   0        110.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1859.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       32
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       33
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      114     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -404.138       404.138       1352.25       1756.39    
   2  0.588265E-01  -2.83316      -1456.43       1456.43       1449.54       2905.97    
   3  0.787103E-01  -2.54198      -1306.75       1306.75       1552.58       2859.32    
   4  0.597713     -0.514644      -264.561       264.561       1674.94       1939.50    
   5  0.110741      -2.20056      -1131.23       1131.23       1539.50       2670.73    
   6  0.677861     -0.388813      -199.875       199.875       1632.99       1832.86    
   7  0.307724      -1.17855      -605.853       605.853       1504.39       2110.25    
   8  0.550587     -0.596770      -306.779       306.779       1624.05       1930.82    
   9  0.601295     -0.508669      -261.489       261.489       1708.53       1970.02    
  10  0.487121     -0.719243      -369.738       369.738       1739.04       2108.78    
  11  0.146295      -1.92213      -988.100       988.100       1713.55       2701.65    
  12  0.714050     -0.336802      -173.138       173.138       1789.28       1962.42    
  13  0.723089     -0.324223      -166.672       166.672       1740.78       1907.45    
  14  0.805432     -0.216376      -111.232       111.232       1793.12       1904.35    
  15  0.123280      -2.09329      -1076.09       1076.09       1618.35       2694.44    
  16  0.853039     -0.158950      -81.7109       81.7109       1747.80       1829.51    
  17  0.288289      -1.24379      -639.390       639.390       1649.67       2289.06    
  18  0.705126     -0.349379      -179.604       179.604       1535.02       1714.62    
  19  0.772420     -0.258227      -132.746       132.746       1761.85       1894.59    
  20  0.962845     -0.378631E-01  -19.4641       19.4641       1744.49       1763.95    
  21  0.245802      -1.40323      -721.351       721.351       1500.10       2221.45    
  22  0.752702     -0.284087      -146.039       146.039       1584.73       1730.77    
  23  0.729896     -0.314853      -161.855       161.855       1508.93       1670.79    
  24  0.869278     -0.140092      -72.0167       72.0167       1848.90       1920.91    
  25  0.597817E-01  -2.81706      -1448.15       1448.15       1721.08       3169.23    
  26  0.984108     -0.160195E-01  -8.23509       8.23509       1863.70       1871.94    
  27  0.278288      -1.27910      -657.541       657.541       1838.47       2496.01    
  28  0.588278     -0.530555      -272.740       272.740       1590.44       1863.18    
  29  0.807614     -0.213671      -109.841       109.841       1763.11       1872.95    
  30  0.428679     -0.847047      -435.438       435.438       1802.34       2237.78    
  31  0.452991     -0.791883      -407.080       407.080       2074.91       2481.99    
  32  0.678742     -0.387514      -199.208       199.208       1991.50       2190.71    
  33  0.504500     -0.684188      -351.718       351.718       1716.14       2067.85    
  34  0.894800     -0.111155      -57.1410       57.1410       2074.74       2131.88    
  35  0.854311     -0.157461      -80.9451       80.9451       1745.28       1826.22    
  36  0.756230     -0.279410      -143.635       143.635       1491.51       1635.14    
  37  0.744369     -0.295219      -151.762       151.762       2125.36       2277.12    
  38  0.435758     -0.830668      -427.018       427.018       1871.71       2298.73    
  39  0.677387     -0.389513      -200.235       200.235       1835.98       2036.21    
  40  0.504989     -0.683219      -351.219       351.219       1790.22       2141.44    
  41  0.325676      -1.12185      -576.706       576.706       1822.10       2398.81    
  42  0.147207      -1.91591      -984.906       984.906       2155.99       3140.89    
  43  0.432041     -0.839234      -431.422       431.422       1814.86       2246.28    
  44  0.615972     -0.484555      -249.093       249.093       1783.37       2032.46    
  45  0.150867      -1.89136      -972.282       972.282       1826.93       2799.21    
  46  0.464307     -0.767210      -394.396       394.396       1770.52       2164.92    
  47  0.379753     -0.968234      -497.736       497.736       1807.25       2304.98    
  48  0.886192     -0.120822      -62.1104       62.1104       1998.98       2061.09    
  49  0.231751E-01  -3.76468      -1935.29       1935.29       1718.33       3653.62    
  50  0.257662      -1.35611      -697.128       697.128       1843.55       2540.68    
  51  0.470381E-01  -3.05680      -1571.40       1571.40       1989.46       3560.86    
  52  0.972366     -0.280233E-01  -14.4058       14.4058       2214.87       2229.28    
  53  0.242054      -1.41860      -729.251       729.251       1518.51       2247.77    
  54  0.660577     -0.414642      -213.153       213.153       1717.77       1930.92    
  55  0.234396      -1.45074      -745.777       745.777       1764.77       2510.55    
  56  0.891547     -0.114797      -59.0133       59.0133       2092.67       2151.68    
  57  0.408879E-01  -3.19692      -1643.43       1643.43       1573.00       3216.43    
  58  0.577007     -0.549901      -282.685       282.685       1703.70       1986.39    
  59  0.851462     -0.160801      -82.6622       82.6622       1958.45       2041.12    
  60  0.733240     -0.310283      -159.506       159.506       2517.14       2676.65    
  61  0.219002E-01  -3.82126      -1964.38       1964.38       2025.02       3989.40    
  62  0.293643      -1.22539      -629.931       629.931       2024.84       2654.77    
  63  0.552105     -0.594017      -305.364       305.364       1456.43       1761.80    
  64  0.638007E-01  -2.75199      -1414.70       1414.70       1859.36       3274.07    
loop,thermsimp(1:2)       33   404.138       1456.43    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116       1883.66         68.80          1.16         40.70          0.24          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117       6599.98         68.74          1.18         40.65          0.00          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1883.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       33
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       34
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      116     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -1203.81       1203.81       1491.51       2695.32    
   2  0.298819      -1.20792      -620.950       620.950       1508.93       2129.88    
   3  0.706385     -0.347595      -178.687       178.687       1535.02       1713.70    
   4  0.958764     -0.421100E-01  -21.6473       21.6473       1584.73       1606.38    
   5  0.306496      -1.18255      -607.909       607.909       1352.25       1960.16    
   6  0.905447     -0.993270E-01  -51.0606       51.0606       1456.43       1507.49    
   7  0.234113      -1.45195      -746.398       746.398       1744.49       2490.89    
   8  0.704141     -0.350777      -180.322       180.322       1745.28       1925.60    
   9  0.908200     -0.962902E-01  -49.4995       49.4995       1747.80       1797.30    
  10  0.656383     -0.421011      -216.427       216.427       1632.99       1849.42    
  11  0.967894     -0.326327E-01  -16.7754       16.7754       1590.44       1607.21    
  12  0.754670     -0.281475      -144.697       144.697       1863.70       2008.40    
  13  0.488960     -0.715475      -367.801       367.801       1763.11       2130.91    
  14  0.451577     -0.795009      -408.687       408.687       1761.85       2170.53    
  15  0.387599E-01  -3.25037      -1670.90       1670.90       1793.12       3464.02    
  16  0.210942E-02  -6.16134      -3167.33       3167.33       1740.78       4908.11    
  17  0.656530     -0.420787      -216.312       216.312       1848.90       2065.21    
  18  0.181246      -1.70790      -877.974       877.974       1624.05       2502.02    
  19  0.758879     -0.275913      -141.837       141.837       1717.77       1859.61    
  20  0.392052     -0.936362      -481.352       481.352       1674.94       2156.29    
  21  0.406710     -0.899654      -462.481       462.481       1789.28       2251.76    
  22  0.830107     -0.186201      -95.7194       95.7194       1708.53       1804.25    
  23  0.311833      -1.16529      -599.035       599.035       1703.70       2302.74    
  24  0.945407     -0.561396E-01  -28.8595       28.8595       1783.37       1812.23    
  25  0.303319      -1.19297      -613.265       613.265       1835.98       2449.24    
  26  0.284230      -1.25797      -646.680       646.680       1958.45       2605.13    
  27  0.292492      -1.22932      -631.950       631.950       1998.98       2630.93    
  28  0.401496     -0.912557      -469.114       469.114       1716.14       2185.25    
  29  0.379648     -0.968510      -497.878       497.878       1739.04       2236.92    
  30  0.723496E-01  -2.62625      -1350.06       1350.06       1504.39       2854.46    
  31  0.940338     -0.615157E-01  -31.6231       31.6231       2074.74       2106.36    
  32  0.766237     -0.266264      -136.877       136.877       1790.22       1927.10    
  33  0.984920     -0.151946E-01  -7.81102       7.81102       2092.67       2100.48    
  34  0.552546     -0.593218      -304.953       304.953       1770.52       2075.48    
  35  0.735557     -0.307128      -157.884       157.884       1991.50       2149.39    
  36  0.142195      -1.95056      -1002.71       1002.71       1500.10       2502.81    
  37  0.304783      -1.18816      -610.790       610.790       2214.87       2825.66    
  38  0.868582     -0.140894      -72.4287       72.4287       1802.34       1874.77    
  39  0.382741     -0.960397      -493.707       493.707       1814.86       2308.56    
  40  0.273812      -1.29531      -665.877       665.877       1518.51       2184.39    
  41  0.601920     -0.507631      -260.956       260.956       2125.36       2386.31    
  42  0.827744     -0.189051      -97.1849       97.1849       1649.67       1746.86    
  43  0.881186E-01  -2.42907      -1248.70       1248.70       1871.71       3120.41    
  44  0.386744     -0.949994      -488.359       488.359       1807.25       2295.60    
  45  0.852312     -0.159803      -82.1492       82.1492       1822.10       1904.25    
  46  0.830189     -0.186102      -95.6689       95.6689       2074.91       2170.58    
  47  0.216531      -1.53002      -786.532       786.532       1838.47       2625.01    
  48  0.835540     -0.179677      -92.3659       92.3659       1764.77       1857.14    
  49  0.962152     -0.385824E-01  -19.8339       19.8339       1843.55       1863.39    
  50  0.866477     -0.143320      -73.6757       73.6757       2024.84       2098.51    
  51  0.640111     -0.446114      -229.332       229.332       1539.50       1768.83    
  52  0.103467      -2.26850      -1166.16       1166.16       2517.14       3683.30    
  53  0.746080     -0.292923      -150.582       150.582       1618.35       1768.93    
  54  0.154266      -1.86908      -960.829       960.829       1713.55       2674.38    
  55  0.479981     -0.734008      -377.329       377.329       1826.93       2204.26    
  56  0.641740     -0.443572      -228.025       228.025       1552.58       1780.60    
  57  0.282342      -1.26463      -650.106       650.106       1449.54       2099.64    
  58  0.691857     -0.368376      -189.370       189.370       2155.99       2345.36    
  59  0.774818     -0.255127      -131.152       131.152       1721.08       1852.23    
  60  0.950647     -0.506124E-01  -26.0181       26.0181       1573.00       1599.02    
  61  0.946272E-01  -2.35781      -1212.07       1212.07       1859.36       3071.43    
  62  0.936976     -0.650979E-01  -33.4646       33.4646       1989.46       2022.93    
  63  0.339755      -1.07953      -554.950       554.950       1718.33       2273.28    
  64  0.781991     -0.245913      -126.415       126.415       1883.66       2010.08    
loop,thermsimp(1:2)       34   1203.81       620.950    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118       1509.76         68.89          1.18         40.63          0.03          0.04        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119       1425.50         68.86          1.15         40.63          0.40          0.05        111.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1425.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       34
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       35
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      118     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -542.482       542.482       1456.43       1998.91    
   2  0.175000      -1.74297      -896.002       896.002       1573.00       2469.00    
   3  0.131587      -2.02809      -1042.57       1042.57       1584.73       2627.30    
   4  0.301717      -1.19826      -615.987       615.987       1590.44       2206.42    
   5  0.166877      -1.79050      -920.435       920.435       1535.02       2455.45    
   6  0.481073     -0.731736      -376.160       376.160       1649.67       2025.83    
   7  0.706381     -0.347600      -178.690       178.690       1539.50       1718.19    
   8  0.702617     -0.352943      -181.436       181.436       1618.35       1799.78    
   9  0.552795     -0.592767      -304.722       304.722       1552.58       1857.30    
  10  0.495420     -0.702349      -361.054       361.054       1747.80       2108.85    
  11  0.479343     -0.735339      -378.013       378.013       1708.53       2086.54    
  12  0.462659     -0.770765      -396.224       396.224       1783.37       2179.59    
  13  0.631315E-01  -2.76253      -1420.12       1420.12       1632.99       3053.11    
  14  0.785681     -0.241205      -123.995       123.995       1721.08       1845.08    
  15  0.767932     -0.264055      -135.742       135.742       1764.77       1900.51    
  16  0.262689E-01  -3.63937      -1870.88       1870.88       1717.77       3588.65    
  17  0.871353     -0.137708      -70.7910       70.7910       1843.55       1914.34    
  18  0.618350     -0.480701      -247.112       247.112       1802.34       2049.45    
  19  0.196090      -1.62918      -837.508       837.508       1822.10       2659.61    
  20  0.925050     -0.779078E-01  -40.0498       40.0498       1745.28       1785.33    
  21  0.903269     -0.101735      -52.2986       52.2986       1790.22       1842.52    
  22  0.958828     -0.420436E-01  -21.6132       21.6132       1352.25       1373.87    
  23  0.969274     -0.312081E-01  -16.0430       16.0430       1863.70       1879.75    
  24  0.313932      -1.15858      -595.586       595.586       1883.66       2479.25    
  25  0.106324      -2.24126      -1152.16       1152.16       1989.46       3141.62    
  26  0.718705     -0.330304      -169.798       169.798       1848.90       2018.69    
  27  0.751116     -0.286195      -147.123       147.123       1770.52       1917.65    
  28  0.996391     -0.361592E-02  -1.85882       1.85882       2024.84       2026.70    
  29  0.313387      -1.16032      -596.480       596.480       1449.54       2046.02    
  30  0.305057      -1.18726      -610.328       610.328       2092.67       2703.00    
  31  0.408833     -0.894447      -459.805       459.805       2074.74       2534.54    
  32  0.589856     -0.527877      -271.364       271.364       1508.93       1780.30    
  33  0.808683     -0.212349      -109.161       109.161       1763.11       1872.27    
  34  0.481635     -0.730569      -375.561       375.561       1991.50       2367.06    
  35  0.677481     -0.389374      -200.164       200.164       1674.94       1875.11    
  36  0.673605     -0.395111      -203.113       203.113       1761.85       1964.96    
  37  0.409374E-01  -3.19571      -1642.81       1642.81       2074.91       3717.71    
  38  0.362144      -1.01571      -522.144       522.144       1518.51       2040.66    
  39  0.364718E-01  -3.31122      -1702.18       1702.18       1716.14       3418.32    
  40  0.280272      -1.27199      -653.889       653.889       1826.93       2480.82    
  41  0.532528     -0.630120      -323.923       323.923       1739.04       2062.96    
  42  0.901591     -0.103595      -53.2545       53.2545       1789.28       1842.54    
  43  0.262858      -1.33614      -686.864       686.864       1718.33       2405.19    
  44  0.168755      -1.77931      -914.683       914.683       1807.25       2721.93    
  45  0.504619     -0.683952      -351.596       351.596       1703.70       2055.30    
  46  0.900650     -0.104639      -53.7912       53.7912       1814.86       1868.65    
  47  0.438495     -0.824406      -423.799       423.799       2155.99       2579.79    
  48  0.984597     -0.155233E-01  -7.98002       7.98002       2125.36       2133.34    
  49  0.469739     -0.755579      -388.417       388.417       1835.98       2224.39    
  50  0.252111      -1.37789      -708.324       708.324       1744.49       2452.81    
  51  0.764692     -0.268282      -137.915       137.915       1624.05       1761.96    
  52  0.848445     -0.164351      -84.4870       84.4870       1500.10       1584.58    
  53  0.705739     -0.348509      -179.157       179.157       1958.45       2137.61    
  54  0.449895     -0.798741      -410.606       410.606       1838.47       2249.08    
  55  0.742135     -0.298224      -153.307       153.307       1998.98       2152.29    
  56  0.305311      -1.18642      -609.900       609.900       1713.55       2323.45    
  57  0.798408     -0.225136      -115.735       115.735       1491.51       1607.24    
  58  0.807590     -0.213700      -109.856       109.856       2214.87       2324.73    
  59  0.768432     -0.263404      -135.407       135.407       1504.39       1639.80    
  60  0.895397     -0.110488      -56.7983       56.7983       1859.36       1916.16    
  61  0.585964     -0.534497      -274.767       274.767       1871.71       2146.48    
  62  0.785258     -0.241743      -124.272       124.272       1793.12       1917.39    
  63  0.311021      -1.16790      -600.375       600.375       2517.14       3117.52    
  64  0.803571     -0.218690      -112.421       112.421       1425.50       1537.92    
loop,thermsimp(1:2)       35   542.482       896.002    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       1778.10         68.87          1.16         40.56          0.12          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1778.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       35
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       36
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      119     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -1326.18       1326.18       1352.25       2678.43    
   2  0.962370     -0.383559E-01  -19.7174       19.7174       1425.50       1445.22    
   3  0.356737      -1.03076      -529.876       529.876       1500.10       2029.97    
   4  0.884319     -0.122937      -63.1978       63.1978       1491.51       1554.70    
   5  0.919725E-01  -2.38627      -1226.70       1226.70       1504.39       2731.09    
   6  0.900184     -0.105156      -54.0571       54.0571       1539.50       1593.56    
   7  0.390055     -0.941468      -483.977       483.977       1624.05       2108.02    
   8  0.263976      -1.33190      -684.683       684.683       1508.93       2193.62    
   9  0.898455     -0.107078      -55.0453       55.0453       1745.28       1800.32    
  10  0.697674E-01  -2.66259      -1368.75       1368.75       1618.35       2987.09    
  11  0.888938     -0.117727      -60.5196       60.5196       1790.22       1850.74    
  12  0.824147     -0.193406      -99.4234       99.4234       1789.28       1888.70    
  13  0.941109     -0.606968E-01  -31.2022       31.2022       1721.08       1752.28    
  14  0.885654     -0.121429      -62.4224       62.4224       1552.58       1615.00    
  15  0.798208     -0.225386      -115.863       115.863       1814.86       1930.72    
  16  0.365331      -1.00695      -517.640       517.640       1763.11       2280.75    
  17  0.519490     -0.654907      -336.665       336.665       1674.94       2011.61    
  18  0.922741     -0.804065E-01  -41.3342       41.3342       1863.70       1905.04    
  19  0.877443     -0.130744      -67.2108       67.2108       1764.77       1831.98    
  20  0.584844     -0.536410      -275.750       275.750       1843.55       2119.30    
  21  0.671390     -0.398406      -204.807       204.807       1859.36       2064.17    
  22  0.203335      -1.59290      -818.855       818.855       1793.12       2611.97    
  23  0.330236E-01  -3.41053      -1753.24       1753.24       1770.52       3523.76    
  24  0.879725     -0.128146      -65.8757       65.8757       1761.85       1827.72    
  25  0.833976     -0.181550      -93.3289       93.3289       1456.43       1549.76    
  26  0.901698     -0.103475      -53.1931       53.1931       1848.90       1902.09    
  27  0.692847     -0.366946      -188.634       188.634       1649.67       1838.31    
  28  0.550572     -0.596797      -306.793       306.793       2024.84       2331.63    
  29  0.158383E-01  -4.14532      -2130.97       2130.97       1518.51       3649.48    
  30  0.503246     -0.686677      -352.997       352.997       1449.54       1802.53    
  31  0.648812     -0.432612      -222.391       222.391       1802.34       2024.73    
  32  0.306980      -1.18097      -607.098       607.098       1703.70       2310.80    
  33  0.205188      -1.58383      -814.193       814.193       1739.04       2553.23    
  34  0.265146      -1.32748      -682.410       682.410       1708.53       2390.94    
  35  0.272730E-01  -3.60186      -1851.59       1851.59       1747.80       3599.39    
  36  0.262990E-01  -3.63823      -1870.29       1870.29       2125.36       3995.64    
  37  0.492753     -0.707748      -363.829       363.829       1958.45       2322.28    
  38  0.255065      -1.36624      -702.335       702.335       1871.71       2574.04    
  39  0.623259     -0.472794      -243.047       243.047       1998.98       2242.03    
  40  0.949296     -0.520343E-01  -26.7491       26.7491       1783.37       1810.12    
  41  0.982394     -0.177630E-01  -9.13134       9.13134       1590.44       1599.57    
  42  0.566450     -0.568366      -292.177       292.177       1835.98       2128.15    
  43  0.557613     -0.584090      -300.261       300.261       1838.47       2138.73    
  44  0.900731     -0.104549      -53.7450       53.7450       1713.55       1767.30    
  45  0.671339     -0.398481      -204.845       204.845       2214.87       2419.72    
  46  0.650454     -0.430084      -221.092       221.092       1991.50       2212.59    
  47  0.749315     -0.288595      -148.357       148.357       1718.33       1866.68    
  48  0.667497     -0.404220      -207.796       207.796       1744.49       1952.29    
  49  0.132870      -2.01838      -1037.58       1037.58       1535.02       2572.60    
  50  0.964787     -0.358480E-01  -18.4282       18.4282       1573.00       1591.43    
  51  0.835780     -0.179390      -92.2181       92.2181       1883.66       1975.88    
  52  0.601609     -0.508148      -261.221       261.221       1826.93       2088.15    
  53  0.937321     -0.647298E-01  -33.2754       33.2754       2074.74       2108.01    
  54  0.467877     -0.759550      -390.459       390.459       2155.99       2546.45    
  55  0.953249     -0.478789E-01  -24.6129       24.6129       1584.73       1609.34    
  56  0.827724     -0.189076      -97.1974       97.1974       1822.10       1919.30    
  57  0.624780     -0.470355      -241.794       241.794       2092.67       2334.46    
  58  0.821535     -0.196581      -101.055       101.055       1807.25       1908.30    
  59  0.625285     -0.469548      -241.379       241.379       1632.99       1874.37    
  60  0.581213     -0.542638      -278.952       278.952       2517.14       2796.09    
  61  0.855886E-01  -2.45820      -1263.68       1263.68       1989.46       3253.14    
  62  0.262334      -1.33814      -687.890       687.890       1716.14       2404.03    
  63  0.978265     -0.219749E-01  -11.2966       11.2966       1717.77       1729.07    
  64  0.600842     -0.509423      -261.877       261.877       1778.10       2039.98    
loop,thermsimp(1:2)       36   1326.18       19.7174    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121       1743.72         69.02          1.18         40.62          0.00          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122       3504.86         68.89          1.18         40.98          0.00          0.05        111.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    1743.7       0.7358     -3.446      2.704     -102.6     0.6798E-01
                     -0.1084     0.6864     -99.70      3.255     0.3599    

                       1.424     0.6630      2.054      7497.      7000.    

                      -1.910      0.000      0.000      0.000     -1.221    



                      -1.904      0.000      0.000      7000.    -0.8048    

                      -1.294     -2.684     -2.405     -3.410      1.466    

                      -3.496     -3.949      5344.      0.000      8964.    



                       3914.      6535.      7940.      3690.      3926.    

                       3408.     0.1054     0.1606     0.1034     0.2294    

                     -0.2486     0.2304     0.2181     0.2712     0.8948E-01



                      -1.049    -0.9938E-01  0.000     0.3565E-01 0.4541E-01

                     -0.3636     0.1965    -0.7116     0.2649     0.3242    

                      0.1054     0.2064    -0.5177     -1.099      7000.    



                      -2.061     -1.643     -2.171     -2.269    -0.3807    

                     -0.3252      9.135      8.653    -0.1620E+05 -6.006    

                       0.000      0.000      9.103      8.603    -0.1969E+05



                      -6.000      0.000      0.000      8.870      9.153    

                     -0.1944E+05 -6.000      0.000      0.000      8.935    

                       9.073    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1743.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       36
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       37
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      121     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -32.2651       32.2651       1425.50       1457.77    
   2  0.112532E-01  -4.48710      -2306.67       2306.67       1456.43       3763.10    
   3  0.907929     -0.965891E-01  -49.6531       49.6531       1491.51       1541.16    
   4  0.478640     -0.736807      -378.767       378.767       1573.00       1951.77    
   5  0.737686     -0.304237      -156.398       156.398       1539.50       1695.90    
   6  0.114880      -2.16387      -1112.37       1112.37       1590.44       2702.81    
   7  0.309837      -1.17171      -602.336       602.336       1584.73       2187.07    
   8  0.469091     -0.756958      -389.126       389.126       1552.58       1941.70    
   9  0.721151     -0.326907      -168.052       168.052       1717.77       1885.82    
  10  0.557251     -0.584740      -300.595       300.595       1721.08       2021.68    
  11  0.581534     -0.542085      -278.668       278.668       1713.55       1992.22    
  12  0.501412     -0.690326      -354.873       354.873       1745.28       2100.15    
  13  0.783062     -0.244543      -125.711       125.711       1449.54       1575.25    
  14  0.571322     -0.559803      -287.775       287.775       1783.37       2071.14    
  15  0.902729E-01  -2.40492      -1236.29       1236.29       1761.85       2998.13    
  16  0.695403E-01  -2.66585      -1370.42       1370.42       1764.77       3135.19    
  17  0.128872      -2.04894      -1053.29       1053.29       1649.67       2702.96    
  18  0.940828E-01  -2.36358      -1215.04       1215.04       1790.22       3005.26    
  19  0.326350      -1.11979      -575.643       575.643       1718.33       2293.97    
  20  0.102915      -2.27385      -1168.91       1168.91       1632.99       2801.90    
  21  0.324524      -1.12540      -578.527       578.527       1789.28       2367.81    
  22  0.259454      -1.34918      -693.566       693.566       1848.90       2542.46    
  23  0.782812     -0.244863      -125.876       125.876       1863.70       1989.58    
  24  0.383591     -0.958178      -492.567       492.567       1807.25       2299.81    
  25  0.626880     -0.466999      -240.068       240.068       1822.10       2062.17    
  26  0.292269      -1.23008      -632.342       632.342       1814.86       2447.20    
  27  0.448852     -0.801062      -411.799       411.799       1744.49       2156.29    
  28  0.685432     -0.377706      -194.166       194.166       1883.66       2077.83    
  29  0.995399     -0.461118E-02  -2.37045       2.37045       1674.94       1677.31    
  30  0.163323      -1.81203      -931.502       931.502       1802.34       2733.84    
  31  0.952940     -0.482038E-01  -24.7799       24.7799       1500.10       1524.88    
  32  0.861306     -0.149306      -76.7530       76.7530       1778.10       1854.85    
  33  0.587276     -0.532261      -273.617       273.617       1859.36       2132.98    
  34  0.908704     -0.957357E-01  -49.2145       49.2145       1826.93       1876.14    
  35  0.585935     -0.534546      -274.792       274.792       2074.74       2349.53    
  36  0.429836     -0.844352      -434.053       434.053       1624.05       2058.10    
  37  0.726203     -0.319926      -164.463       164.463       1843.55       2008.02    
  38  0.151145E-01  -4.19210      -2155.01       2155.01       1835.98       3990.99    
  39  0.927869     -0.748646E-01  -38.4853       38.4853       1838.47       1876.96    
  40  0.961645     -0.391099E-01  -20.1051       20.1051       1508.93       1529.04    
  41  0.253977      -1.37051      -704.532       704.532       1991.50       2696.03    
  42  0.768038     -0.263917      -135.670       135.670       1998.98       2134.65    
  43  0.569441E-01  -2.86569      -1473.15       1473.15       1763.11       3236.26    
  44  0.103919      -2.26415      -1163.92       1163.92       1703.70       2867.62    
  45  0.312226      -1.16403      -598.387       598.387       1958.45       2556.84    
  46  0.473636E-02  -5.35249      -2751.53       2751.53       2024.84       4776.37    
  47  0.192099      -1.64975      -848.078       848.078       2092.67       2940.75    
  48  0.799429     -0.223858      -115.078       115.078       1708.53       1823.61    
  49  0.164379      -1.80558      -928.188       928.188       1716.14       2644.32    
  50  0.421896     -0.862996      -443.637       443.637       2214.87       2658.51    
  51  0.361660      -1.01705      -522.831       522.831       2155.99       2678.82    
  52  0.346541      -1.05975      -544.784       544.784       1739.04       2283.82    
  53  0.728715     -0.316473      -162.688       162.688       1535.02       1697.71    
  54  0.305329      -1.18637      -609.870       609.870       1871.71       2481.58    
  55  0.547244     -0.602861      -309.910       309.910       1793.12       2103.03    
  56  0.942790     -0.589122E-01  -30.2847       30.2847       1352.25       1382.54    
  57  0.846801     -0.166290      -85.4840       85.4840       1504.39       1589.88    
  58  0.961806     -0.389424E-01  -20.0190       20.0190       2517.14       2537.16    
  59  0.101104      -2.29161      -1178.04       1178.04       1618.35       2796.38    
  60  0.181736      -1.70520      -876.586       876.586       1989.46       2866.05    
  61  0.298004      -1.21065      -622.353       622.353       1770.52       2392.88    
  62  0.840699E-01  -2.47611      -1272.88       1272.88       1747.80       3020.68    
  63  0.796444     -0.227598      -117.000       117.000       1518.51       1635.51    
  64  0.294043      -1.22403      -629.232       629.232       1743.72       2372.95    
loop,thermsimp(1:2)       37   32.2651       2306.67    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123       1576.52         68.93          1.17         40.58          0.29          0.05        111.02
Just calling func    0   0        111.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1576.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       37
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       38
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      122     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -508.681       508.681       1352.25       1860.94    
   2  0.687927     -0.374072      -192.298       192.298       1425.50       1617.80    
   3  0.288957      -1.24148      -638.201       638.201       1500.10       2138.30    
   4  0.192838      -1.64590      -846.102       846.102       1508.93       2355.04    
   5  0.369869     -0.994607      -511.294       511.294       1491.51       2002.80    
   6  0.735973     -0.306562      -157.593       157.593       1449.54       1607.13    
   7  0.637144     -0.450760      -231.720       231.720       1504.39       1736.11    
   8  0.703934     -0.351071      -180.473       180.473       1518.51       1698.99    
   9  0.864279     -0.145859      -74.9812       74.9812       1674.94       1749.92    
  10  0.473452     -0.747705      -384.369       384.369       1539.50       1923.87    
  11  0.242010      -1.41877      -729.344       729.344       1535.02       2264.36    
  12  0.510769     -0.671838      -345.369       345.369       1708.53       2053.90    
  13  0.829624     -0.186782      -96.0185       96.0185       1778.10       1874.12    
  14  0.228911      -1.47442      -757.951       757.951       1826.93       2584.88    
  15  0.310006      -1.17116      -602.056       602.056       1838.47       2440.53    
  16  0.248341      -1.39295      -716.070       716.070       1717.77       2433.84    
  17  0.723214     -0.324050      -166.583       166.583       1552.58       1719.16    
  18  0.420900     -0.865360      -444.852       444.852       1573.00       2017.85    
  19  0.133903      -2.01064      -1033.60       1033.60       1863.70       2897.30    
  20  0.571916     -0.558763      -287.241       287.241       1713.55       2000.79    
  21  0.609104     -0.495766      -254.856       254.856       1843.55       2098.41    
  22  0.582057     -0.541186      -278.205       278.205       1721.08       1999.29    
  23  0.440731     -0.819321      -421.185       421.185       1624.05       2045.23    
  24  0.211006      -1.55587      -799.820       799.820       1822.10       2621.92    
  25  0.665769     -0.406813      -209.129       209.129       1783.37       1992.50    
  26  0.766062     -0.266493      -136.995       136.995       1883.66       2020.66    
  27  0.321416E-01  -3.43760      -1767.15       1767.15       1745.28       3512.43    
  28  0.165897E-01  -4.09897      -2107.14       2107.14       1793.12       3900.26    
  29  0.634553     -0.454835      -233.815       233.815       1859.36       2093.18    
  30  0.981834     -0.183335E-01  -9.42464       9.42464       1998.98       2008.40    
  31  0.511720     -0.669978      -344.413       344.413       1744.49       2088.90    
  32  0.426358     -0.852477      -438.229       438.229       1584.73       2022.96    
  33  0.500527     -0.692094      -355.782       355.782       1739.04       2094.82    
  34  0.100483      -2.29777      -1181.21       1181.21       1718.33       2899.53    
  35  0.837324     -0.177545      -91.2697       91.2697       1807.25       1898.51    
  36  0.257741      -1.35580      -696.971       696.971       2074.74       2771.71    
  37  0.437184     -0.827401      -425.339       425.339       1789.28       2214.62    
  38  0.707529     -0.345976      -177.855       177.855       1743.72       1921.58    
  39  0.538379     -0.619193      -318.306       318.306       1770.52       2088.83    
  40  0.611820     -0.491317      -252.569       252.569       1814.86       2067.43    
  41  0.404533     -0.905022      -465.241       465.241       1871.71       2336.95    
  42  0.902499     -0.102588      -52.7371       52.7371       2517.14       2569.88    
  43  0.704299     -0.350552      -180.207       180.207       1848.90       2029.10    
  44  0.511818     -0.669786      -344.314       344.314       1958.45       2302.77    
  45  0.748131     -0.290178      -149.171       149.171       1716.14       1865.31    
  46  0.296598      -1.21538      -624.785       624.785       2214.87       2839.66    
  47  0.805122     -0.216762      -111.430       111.430       2155.99       2267.42    
  48  0.525063     -0.644236      -331.180       331.180       1991.50       2322.68    
  49  0.192567      -1.64731      -846.827       846.827       1590.44       2437.26    
  50  0.991898     -0.813527E-02  -4.18207       4.18207       1649.67       1653.85    
  51  0.238175      -1.43475      -737.556       737.556       1802.34       2539.90    
  52  0.627675     -0.465733      -239.417       239.417       1618.35       1857.76    
  53  0.328849      -1.11216      -571.721       571.721       1632.99       2204.71    
  54  0.697651     -0.360037      -185.083       185.083       1989.46       2174.55    
  55  0.154345      -1.86857      -960.567       960.567       1703.70       2664.27    
  56  0.196838      -1.62537      -835.550       835.550       2092.67       2928.22    
  57  0.397903     -0.921546      -473.736       473.736       1761.85       2235.58    
  58  0.746135E-01  -2.59543      -1334.22       1334.22       1790.22       3124.45    
  59  0.283843      -1.25934      -647.381       647.381       1747.80       2395.18    
  60  0.540853E-02  -5.21978      -2683.31       2683.31       1764.77       4448.08    
  61  0.534720     -0.626011      -321.811       321.811       1763.11       2084.92    
  62  0.909816     -0.945126E-01  -48.5857       48.5857       1456.43       1505.02    
  63  0.190142      -1.65998      -853.341       853.341       1835.98       2689.32    
  64  0.150854      -1.89144      -972.326       972.326       1576.52       2548.85    
loop,thermsimp(1:2)       38   508.681       192.298    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       1494.17         68.79          1.16         40.62          0.49          0.05        111.11
Just calling func    0   0        111.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125       1405.15         68.78          1.15         40.89          0.34          0.05        111.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1405.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       38
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       39
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      124     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -165.837       165.837       1456.43       1622.27    
   2  0.309663      -1.17227      -602.624       602.624       1449.54       2052.16    
   3  0.688114     -0.373801      -192.158       192.158       1425.50       1617.66    
   4  0.677876     -0.388791      -199.864       199.864       1649.67       1849.54    
   5  0.283701      -1.25984      -647.639       647.639       1518.51       2166.15    
   6  0.183733      -1.69427      -870.966       870.966       1552.58       2423.54    
   7  0.243414      -1.41299      -726.371       726.371       1504.39       2230.76    
   8  0.785389     -0.241576      -124.186       124.186       1674.94       1799.13    
   9  0.258033      -1.35467      -696.389       696.389       1618.35       2314.74    
  10  0.137887      -1.98132      -1018.53       1018.53       1352.25       2370.79    
  11  0.386520     -0.950573      -488.657       488.657       1716.14       2204.79    
  12  0.882934     -0.124505      -64.0039       64.0039       1778.10       1842.10    
  13  0.395106     -0.928602      -477.362       477.362       1807.25       2284.61    
  14  0.107633      -2.22903      -1145.87       1145.87       1743.72       2889.59    
  15  0.434094     -0.834495      -428.985       428.985       1539.50       1968.49    
  16  0.558484     -0.582529      -299.458       299.458       1783.37       2082.82    
  17  0.102706      -2.27589      -1169.96       1169.96       1721.08       2891.04    
  18  0.325804      -1.12146      -576.503       576.503       1713.55       2290.06    
  19  0.693871     -0.365469      -187.875       187.875       1491.51       1679.38    
  20  0.832622     -0.183176      -94.1644       94.1644       1998.98       2093.14    
  21  0.691207     -0.369316      -189.853       189.853       1573.00       1762.85    
  22  0.903946     -0.100985      -51.9131       51.9131       1883.66       1935.58    
  23  0.258785E-01  -3.65434      -1878.57       1878.57       1584.73       3463.30    
  24  0.247338      -1.39700      -718.150       718.150       1848.90       2567.05    
  25  0.861464     -0.149122      -76.6587       76.6587       1624.05       1700.70    
  26  0.954919     -0.461290E-01  -23.7133       23.7133       1708.53       1732.24    
  27  0.579638     -0.545352      -280.347       280.347       1814.86       2095.20    
  28  0.537182     -0.621418      -319.450       319.450       1763.11       2082.56    
  29  0.407710     -0.897199      -461.219       461.219       1770.52       2231.74    
  30  0.958466     -0.424211E-01  -21.8072       21.8072       1744.49       1766.30    
  31  0.884674     -0.122536      -62.9916       62.9916       1859.36       1922.36    
  32  0.395055     -0.928731      -477.429       477.429       1739.04       2216.47    
  33  0.325425      -1.12262      -577.102       577.102       1843.55       2420.66    
  34  0.679842     -0.385895      -198.376       198.376       1500.10       1698.47    
  35  0.765292     -0.267498      -137.511       137.511       1989.46       2126.98    
  36  0.217460      -1.52574      -784.331       784.331       1632.99       2417.32    
  37  0.181189      -1.70822      -878.135       878.135       1789.28       2667.42    
  38  0.518456     -0.656899      -337.690       337.690       1761.85       2099.53    
  39  0.249864E-01  -3.68942      -1896.61       1896.61       1535.02       3431.62    
  40  0.336654      -1.08870      -559.664       559.664       2155.99       2715.65    
  41  0.873801     -0.134903      -69.3489       69.3489       1958.45       2027.80    
  42  0.478904     -0.736255      -378.484       378.484       1991.50       2369.99    
  43  0.819950     -0.198512      -102.048       102.048       1871.71       1973.76    
  44  0.966813     -0.337500E-01  -17.3497       17.3497       1508.93       1526.28    
  45  0.514109     -0.665319      -342.018       342.018       1747.80       2089.82    
  46  0.483734     -0.726221      -373.325       373.325       1717.77       2091.10    
  47  0.227743E-01  -3.78212      -1944.26       1944.26       1590.44       3534.70    
  48  0.409495     -0.892830      -458.973       458.973       1838.47       2297.45    
  49  0.198361      -1.61767      -831.588       831.588       1802.34       2633.93    
  50  0.925767     -0.771331E-01  -39.6515       39.6515       1576.52       1616.17    
  51  0.842113     -0.171842      -88.3379       88.3379       2517.14       2605.48    
  52  0.347114E-01  -3.36069      -1727.61       1727.61       1826.93       3554.54    
  53  0.215814      -1.53334      -788.237       788.237       1822.10       2610.34    
  54  0.219309      -1.51727      -779.979       779.979       1703.70       2483.68    
  55  0.940126     -0.617416E-01  -31.7392       31.7392       1835.98       1867.71    
  56  0.663408     -0.410365      -210.955       210.955       2074.74       2285.69    
  57  0.630947     -0.460533      -236.744       236.744       2214.87       2451.62    
  58  0.719671     -0.328961      -169.107       169.107       1863.70       2032.81    
  59  0.939094     -0.628392E-01  -32.3035       32.3035       1718.33       1750.63    
  60  0.901520     -0.103673      -53.2949       53.2949       2092.67       2145.96    
  61  0.771028     -0.260031      -133.673       133.673       1790.22       1923.90    
  62  0.320616      -1.13751      -584.755       584.755       1745.28       2330.03    
  63  0.893890     -0.112173      -57.6641       57.6641       1793.12       1850.78    
  64  0.874332     -0.134295      -69.0364       69.0364       1405.15       1474.19    
loop,thermsimp(1:2)       39   165.837       602.624    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126       2332.44         68.88          1.16         40.74          0.15          0.05        110.99
Just calling func    0   0        110.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127       6218.40         68.75          1.17         40.64          0.18          0.05        110.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2332.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       39
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       40
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      126     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -23.8679       23.8679       1405.15       1429.02    
   2  0.450411     -0.797594      -410.016       410.016       1508.93       1918.95    
   3  0.691912E-01  -2.67088      -1373.01       1373.01       1576.52       2949.53    
   4  0.740935     -0.299842      -154.138       154.138       1425.50       1579.64    
   5  0.452531     -0.792898      -407.602       407.602       1456.43       1864.03    
   6  0.461330     -0.773642      -397.703       397.703       1491.51       1889.21    
   7  0.102999      -2.27303      -1168.49       1168.49       1500.10       2668.59    
   8  0.475106     -0.744217      -382.577       382.577       1624.05       2006.62    
   9  0.240275      -1.42597      -733.042       733.042       1708.53       2441.57    
  10  0.276707E-01  -3.58738      -1844.15       1844.15       1718.33       3562.48    
  11  0.132701E-01  -4.32224      -2221.92       2221.92       1573.00       3794.92    
  12  0.997219     -0.278509E-02  -1.43172       1.43172       1744.49       1745.92    
  13  0.563305     -0.573934      -295.040       295.040       1674.94       1969.98    
  14  0.347949      -1.05570      -542.699       542.699       1778.10       2320.80    
  15  0.546018     -0.605103      -311.063       311.063       1649.67       1960.73    
  16  0.343968      -1.06721      -548.614       548.614       1793.12       2341.73    
  17  0.945234     -0.563230E-01  -28.9537       28.9537       1835.98       1864.93    
  18  0.346208      -1.06072      -545.278       545.278       1859.36       2404.64    
  19  0.406433     -0.900337      -462.832       462.832       1790.22       2253.06    
  20  0.632259     -0.458455      -235.676       235.676       1883.66       2119.34    
  21  0.983930     -0.162002E-01  -8.32797       8.32797       1539.50       1547.83    
  22  0.200798      -1.60546      -825.311       825.311       1871.71       2697.02    
  23  0.223962      -1.49628      -769.185       769.185       1958.45       2727.64    
  24  0.594322     -0.520335      -267.486       267.486       1863.70       2131.19    
  25  0.875298     -0.133191      -68.4689       68.4689       1449.54       1518.01    
  26  0.327822      -1.11529      -573.330       573.330       1763.11       2336.44    
  27  0.215105      -1.53663      -789.928       789.928       1783.37       2573.29    
  28  0.905181     -0.996198E-01  -51.2112       51.2112       1747.80       1799.01    
  29  0.699086     -0.357981      -184.026       184.026       1717.77       1901.80    
  30  0.747401     -0.291154      -149.672       149.672       1998.98       2148.65    
  31  0.699189     -0.357834      -183.950       183.950       1814.86       1998.81    
  32  0.563488     -0.573610      -294.873       294.873       1761.85       2056.72    
  33  0.155576      -1.86062      -956.483       956.483       1989.46       2945.95    
  34  0.380593     -0.966025      -496.600       496.600       2092.67       2589.27    
  35  0.626112     -0.468226      -240.699       240.699       1518.51       1759.21    
  36  0.372369     -0.987870      -507.830       507.830       1716.14       2223.97    
  37  0.517531     -0.658686      -338.608       338.608       1739.04       2077.65    
  38  0.673247     -0.395643      -203.386       203.386       1504.39       1707.78    
  39  0.741527     -0.299044      -153.728       153.728       1770.52       1924.25    
  40  0.280982      -1.26947      -652.589       652.589       1807.25       2459.83    
  41  0.331745      -1.10339      -567.215       567.215       2074.74       2641.95    
  42  0.712030     -0.339635      -174.595       174.595       1713.55       1888.15    
  43  0.200581      -1.60654      -825.865       825.865       1838.47       2664.34    
  44  0.989915     -0.101357E-01  -5.21042       5.21042       1618.35       1623.56    
  45  0.808031     -0.213155      -109.576       109.576       1745.28       1854.85    
  46  0.893446     -0.112670      -57.9197       57.9197       1991.50       2049.42    
  47  0.364885      -1.00817      -518.267       518.267       1352.25       1870.52    
  48  0.923731     -0.793347E-01  -40.7833       40.7833       1632.99       1673.77    
  49  0.504880     -0.683434      -351.330       351.330       1843.55       2194.88    
  50  0.724988     -0.321600      -165.324       165.324       1552.58       1717.90    
  51  0.927322     -0.754540E-01  -38.7883       38.7883       2214.87       2253.66    
  52  0.857721     -0.153476      -78.8970       78.8970       1703.70       1782.60    
  53  0.943333     -0.583361E-01  -29.9886       29.9886       1848.90       1878.89    
  54  0.794551     -0.229978      -118.224       118.224       2517.14       2635.37    
  55  0.732400     -0.311429      -160.095       160.095       1822.10       1982.20    
  56  0.143434      -1.94188      -998.255       998.255       1802.34       2800.60    
  57  0.859384     -0.151540      -77.9014       77.9014       1789.28       1867.18    
  58  0.677471     -0.389389      -200.171       200.171       2155.99       2356.16    
  59  0.258745      -1.35191      -694.971       694.971       1743.72       2438.69    
  60  0.380926E-01  -3.26773      -1679.83       1679.83       1721.08       3400.91    
  61  0.563373     -0.573814      -294.978       294.978       1535.02       1830.00    
  62  0.985538     -0.145678E-01  -7.48879       7.48879       1584.73       1592.22    
  63  0.647297     -0.434951      -223.593       223.593       1590.44       1814.03    
  64  0.608092     -0.497430      -255.712       255.712       2332.44       2588.15    
loop,thermsimp(1:2)       40   23.8679       410.016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128       1558.02         68.78          1.16         40.62          0.20          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129       1687.26         68.81          1.19         40.87          0.00          0.04        110.92
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1558.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    514.066               127
loop is:       40
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    514.066               127
loop is:       41
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    257.033               190

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      128     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -264.055       264.055       1405.15       1669.20    
   2  0.414955     -0.879585      -226.082       226.082       1449.54       1675.62    
   3  0.407443     -0.897854      -230.778       230.778       1539.50       1770.28    
   4  0.883897     -0.123414      -31.7216       31.7216       1425.50       1457.23    
   5  0.520045     -0.653840      -168.059       168.059       1584.73       1752.79    
   6  0.634521     -0.454885      -116.920       116.920       1618.35       1735.27    
   7  0.344406      -1.06594      -273.980       273.980       1632.99       1906.97    
   8  0.545595     -0.605879      -155.731       155.731       1504.39       1660.12    
   9  0.766876     -0.265430      -68.2241       68.2241       1552.58       1620.80    
  10  0.639043     -0.447783      -115.095       115.095       1744.49       1859.58    
  11  0.850701     -0.161694      -41.5608       41.5608       1518.51       1560.07    
  12  0.832060     -0.183851      -47.2558       47.2558       1703.70       1750.96    
  13  0.728209     -0.317167      -81.5223       81.5223       1747.80       1829.32    
  14  0.531327     -0.632378      -162.542       162.542       1590.44       1752.98    
  15  0.188974E-01  -3.96873      -1020.09       1020.09       1535.02       2555.11    
  16  0.246817      -1.39911      -359.616       359.616       1745.28       2104.89    
  17  0.935336     -0.668496E-01  -17.1825       17.1825       1456.43       1473.62    
  18  0.730823     -0.313585      -80.6015       80.6015       1835.98       1916.58    
  19  0.482288     -0.729213      -187.432       187.432       1789.28       1976.71    
  20  0.782974E-04  -9.45500      -2430.25       2430.25       1352.25       3782.50    
  21  0.258744      -1.35192      -347.487       347.487       1848.90       2196.38    
  22  0.389044     -0.944063      -242.655       242.655       1713.55       1956.21    
  23  0.611459E-01  -2.79449      -718.277       718.277       1491.51       2209.78    
  24  0.124922      -2.08006      -534.645       534.645       1717.77       2252.42    
  25  0.253683      -1.37167      -352.564       352.564       1508.93       1861.50    
  26  0.781437     -0.246621      -63.3897       63.3897       1770.52       1833.91    
  27  0.835634     -0.179565      -46.1541       46.1541       1649.67       1695.83    
  28  0.542030     -0.612434      -157.416       157.416       1674.94       1832.36    
  29  0.463443     -0.769071      -197.677       197.677       1822.10       2019.78    
  30  0.120587      -2.11538      -543.723       543.723       1814.86       2358.58    
  31  0.733316     -0.310178      -79.7260       79.7260       1624.05       1703.77    
  32  0.955530     -0.454889E-01  -11.6921       11.6921       1991.50       2003.19    
  33  0.419735     -0.868132      -223.139       223.139       1761.85       1984.98    
  34  0.284829      -1.25587      -322.799       322.799       1739.04       2061.84    
  35  0.924079     -0.789582E-01  -20.2949       20.2949       1883.66       1903.96    
  36  0.432674     -0.837770      -215.334       215.334       1863.70       2079.04    
  37  0.155293      -1.86244      -478.708       478.708       1998.98       2477.69    
  38  0.634342     -0.455168      -116.993       116.993       1843.55       1960.55    
  39  0.935635     -0.665293E-01  -17.1002       17.1002       1716.14       1733.24    
  40  0.931832     -0.706024E-01  -18.1471       18.1471       1790.22       1808.37    
  41  0.875970     -0.132424      -34.0373       34.0373       2214.87       2248.91    
  42  0.273544      -1.29629      -333.190       333.190       1778.10       2111.29    
  43  0.799596     -0.223649      -57.4852       57.4852       1763.11       1820.60    
  44  0.772883     -0.257628      -66.2188       66.2188       1793.12       1859.34    
  45  0.274276      -1.29362      -332.503       332.503       2155.99       2488.49    
  46  0.116034      -2.15387      -553.616       553.616       1859.36       2412.98    
  47  0.700214     -0.356369      -91.5986       91.5986       1743.72       1835.32    
  48  0.704184E-01  -2.65330      -681.986       681.986       1708.53       2390.52    
  49  0.699980E-01  -2.65929      -683.525       683.525       1807.25       2490.77    
  50  0.186964      -1.67684      -431.003       431.003       1783.37       2214.37    
  51  0.342641      -1.07107      -275.301       275.301       2332.44       2607.74    
  52  0.989806     -0.102462E-01  -2.63360       2.63360       2092.67       2095.30    
  53  0.216227      -1.53143      -393.627       393.627       2517.14       2910.77    
  54  0.233793      -1.45332      -373.551       373.551       2074.74       2448.29    
  55  0.404477     -0.905159      -232.656       232.656       1838.47       2071.13    
  56  0.164502      -1.80483      -463.901       463.901       1500.10       1964.00    
  57  0.561765E-01  -2.87926      -740.064       740.064       1871.71       2611.77    
  58  0.169196E-01  -4.07928      -1048.51       1048.51       1958.45       3006.96    
  59  0.486948     -0.719597      -184.960       184.960       1802.34       1987.30    
  60  0.640730     -0.445148      -114.418       114.418       1989.46       2103.88    
  61  0.940004     -0.618708E-01  -15.9028       15.9028       1576.52       1592.42    
  62  0.216981      -1.52795      -392.733       392.733       1721.08       2113.81    
  63  0.131817      -2.02634      -520.837       520.837       1718.33       2239.16    
  64  0.996981     -0.302401E-02 -0.777270      0.777270       1558.02       1558.80    
loop,thermsimp(1:2)       41   264.055       226.082    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130       1805.63         68.70          1.15         40.77          0.32          0.05        110.99
Just calling func    0   0        110.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1805.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       41
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       42
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      129     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -741.142       741.142       1425.50       2166.65    
   2  0.688513     -0.373221      -95.9302       95.9302       1456.43       1552.36    
   3  0.530653     -0.633647      -162.868       162.868       1558.02       1720.89    
   4  0.542886     -0.610856      -157.010       157.010       1518.51       1675.52    
   5  0.603382     -0.505205      -129.854       129.854       1576.52       1706.38    
   6  0.478412     -0.737283      -189.506       189.506       1552.58       1742.08    
   7  0.809657     -0.211144      -54.2711       54.2711       1504.39       1558.66    
   8  0.764585     -0.268422      -68.9932       68.9932       1405.15       1474.14    
   9  0.228600      -1.47578      -379.324       379.324       1449.54       1828.86    
  10  0.495526     -0.702136      -180.472       180.472       1649.67       1830.14    
  11  0.368264     -0.998954      -256.764       256.764       1624.05       1880.81    
  12  0.407647     -0.897355      -230.650       230.650       1716.14       1946.79    
  13  0.316165      -1.15149      -295.971       295.971       1618.35       1914.32    
  14  0.458518     -0.779756      -200.423       200.423       1703.70       1904.13    
  15  0.643610     -0.440663      -113.265       113.265       1584.73       1698.00    
  16  0.316553E-01  -3.45285      -887.496       887.496       1590.44       2477.93    
  17  0.570171     -0.561819      -144.406       144.406       1539.50       1683.91    
  18  0.448642E-01  -3.10412      -797.860       797.860       1790.22       2588.08    
  19  0.128957      -2.04828      -526.475       526.475       1763.11       2289.59    
  20  0.159422      -1.83620      -471.964       471.964       1747.80       2219.76    
  21  0.154083      -1.87026      -480.719       480.719       1674.94       2155.66    
  22  0.696997     -0.360974      -92.7822       92.7822       1770.52       1863.31    
  23  0.579421     -0.545727      -140.270       140.270       1743.72       1883.99    
  24  0.528206     -0.638269      -164.056       164.056       1793.12       1957.18    
  25  0.322914      -1.13037      -290.542       290.542       1744.49       2035.03    
  26  0.369562     -0.995437      -255.860       255.860       1508.93       1764.79    
  27  0.134248      -2.00806      -516.139       516.139       1883.66       2399.80    
  28  0.950150     -0.511358E-01  -13.1436       13.1436       1632.99       1646.13    
  29  0.138040      -1.98021      -508.980       508.980       1835.98       2344.96    
  30  0.316838      -1.14936      -295.424       295.424       1713.55       2008.98    
  31  0.151783      -1.88530      -484.585       484.585       1843.55       2328.14    
  32  0.338674      -1.08272      -278.294       278.294       1500.10       1778.39    
  33  0.814165     -0.205592      -52.8440       52.8440       1789.28       1842.12    
  34  0.578183     -0.547865      -140.819       140.819       1761.85       1902.66    
  35  0.208707      -1.56682      -402.725       402.725       1802.34       2205.07    
  36  0.540561     -0.615147      -158.113       158.113       1991.50       2149.62    
  37  0.910129     -0.941686E-01  -24.2044       24.2044       1822.10       1846.31    
  38  0.907740     -0.967972E-01  -24.8801       24.8801       1739.04       1763.92    
  39  0.549661     -0.598453      -153.822       153.822       1838.47       1992.30    
  40  0.193889      -1.64047      -421.655       421.655       1863.70       2285.36    
  41  0.807651     -0.213625      -54.9087       54.9087       2092.67       2147.58    
  42  0.613777     -0.488124      -125.464       125.464       1989.46       2114.93    
  43  0.664452     -0.408793      -105.073       105.073       1745.28       1850.35    
  44  0.584630     -0.536776      -137.969       137.969       1778.10       1916.07    
  45  0.618915     -0.479787      -123.321       123.321       1721.08       1844.40    
  46  0.542097     -0.612311      -157.384       157.384       1848.90       2006.28    
  47  0.133641      -2.01260      -517.304       517.304       1491.51       2008.81    
  48  0.479627     -0.734747      -188.854       188.854       1783.37       1972.22    
  49  0.225939      -1.48749      -382.334       382.334       1718.33       2100.66    
  50  0.324869      -1.12433      -288.990       288.990       2214.87       2503.86    
  51  0.669051     -0.401895      -103.300       103.300       1717.77       1821.07    
  52  0.602039     -0.507434      -130.427       130.427       1814.86       1945.28    
  53  0.143076      -1.94438      -499.770       499.770       1708.53       2208.30    
  54  0.897604     -0.108026      -27.7663       27.7663       1859.36       1887.13    
  55  0.165810      -1.79691      -461.866       461.866       2074.74       2536.60    
  56  0.468567     -0.758077      -194.851       194.851       1998.98       2193.83    
  57  0.641740     -0.443572      -114.013       114.013       2155.99       2270.00    
  58  0.904980     -0.998426E-01  -25.6628       25.6628       1807.25       1832.91    
  59  0.674132     -0.394330      -101.356       101.356       1535.02       1636.37    
  60  0.756363     -0.279234      -71.7722       71.7722       2332.44       2404.21    
  61  0.113892      -2.17251      -558.406       558.406       1871.71       2430.12    
  62  0.835916     -0.179227      -46.0673       46.0673       2517.14       2563.21    
  63  0.284183      -1.25814      -323.382       323.382       1958.45       2281.84    
  64  0.276674      -1.28492      -330.266       330.266       1805.63       2135.89    
loop,thermsimp(1:2)       42   741.142       95.9302    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131       1781.59         68.71          1.16         40.75          0.00          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132      44771.04         68.58          1.14         41.16          0.00          0.05        110.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1781.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       42
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       43
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      131     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -61.0439       61.0439       1405.15       1466.19    
   2  0.796559     -0.227454      -58.4632       58.4632       1456.43       1514.90    
   3  0.784232     -0.243051      -62.4720       62.4720       1504.39       1566.87    
   4  0.503549     -0.686074      -176.344       176.344       1535.02       1711.36    
   5  0.468337     -0.758566      -194.976       194.976       1632.99       1827.97    
   6  0.198518      -1.61688      -415.591       415.591       1518.51       1934.10    
   7  0.857529     -0.153700      -39.5060       39.5060       1539.50       1579.01    
   8  0.845427     -0.167913      -43.1591       43.1591       1584.73       1627.89    
   9  0.710919     -0.341197      -87.6988       87.6988       1576.52       1664.22    
  10  0.934107     -0.681640E-01  -17.5204       17.5204       1558.02       1575.54    
  11  0.565087     -0.570775      -146.708       146.708       1552.58       1699.29    
  12  0.147377      -1.91476      -492.157       492.157       1739.04       2231.19    
  13  0.471965     -0.750851      -192.994       192.994       1508.93       1701.93    
  14  0.287319      -1.24716      -320.561       320.561       1500.10       1820.66    
  15  0.526906     -0.640733      -164.690       164.690       1717.77       1882.46    
  16  0.176999      -1.73161      -445.081       445.081       1449.54       1894.62    
  17  0.868579     -0.140897      -36.2151       36.2151       1649.67       1685.89    
  18  0.621282     -0.475971      -122.340       122.340       1807.25       1929.59    
  19  0.181881      -1.70440      -438.088       438.088       1789.28       2227.37    
  20  0.565209     -0.570560      -146.653       146.653       1721.08       1867.74    
  21  0.927617     -0.751364E-01  -19.3125       19.3125       1822.10       1841.41    
  22  0.296120      -1.21699      -312.806       312.806       1745.28       2058.08    
  23  0.152389      -1.88132      -483.560       483.560       1770.52       2254.08    
  24  0.508731     -0.675835      -173.712       173.712       1624.05       1797.76    
  25  0.389654     -0.942496      -242.252       242.252       1743.72       1985.97    
  26  0.770754     -0.260386      -66.9278       66.9278       1859.36       1926.29    
  27  0.144347      -1.93554      -497.496       497.496       1761.85       2259.34    
  28  0.690124     -0.370884      -95.3295       95.3295       1703.70       1799.03    
  29  0.882429     -0.125077      -32.1489       32.1489       1618.35       1650.50    
  30  0.781105     -0.247045      -63.4988       63.4988       1778.10       1841.60    
  31  0.331946      -1.10278      -283.451       283.451       1814.86       2098.31    
  32  0.157011      -1.85144      -475.880       475.880       1716.14       2192.02    
  33  0.734200     -0.308973      -79.4163       79.4163       1793.12       1872.54    
  34  0.563390     -0.573784      -147.481       147.481       1783.37       1930.85    
  35  0.349498      -1.05126      -270.208       270.208       1838.47       2108.68    
  36  0.256822      -1.35937      -349.403       349.403       1848.90       2198.30    
  37  0.563556     -0.573488      -147.405       147.405       1491.51       1638.91    
  38  0.945419E-01  -2.35871      -606.267       606.267       1713.55       2319.82    
  39  0.571450     -0.559577      -143.830       143.830       1744.49       1888.32    
  40  0.583029E-01  -2.84210      -730.514       730.514       1718.33       2448.84    
  41  0.428808     -0.846746      -217.642       217.642       1989.46       2207.11    
  42  0.628450     -0.464499      -119.391       119.391       1805.63       1925.02    
  43  0.152789      -1.87869      -482.886       482.886       2092.67       2575.56    
  44  0.787004E-01  -2.54211      -653.405       653.405       1991.50       2644.91    
  45  0.170927E-01  -4.06911      -1045.89       1045.89       1674.94       2720.84    
  46  0.531078     -0.632847      -162.663       162.663       1425.50       1588.17    
  47  0.206082E-01  -3.88206      -997.818       997.818       1998.98       2996.80    
  48  0.909565     -0.947891E-01  -24.3639       24.3639       1802.34       1826.71    
  49  0.456291     -0.784625      -201.674       201.674       1708.53       1910.20    
  50  0.997425E-02  -4.60775      -1184.34       1184.34       1747.80       2932.14    
  51  0.251070      -1.38202      -355.225       355.225       2155.99       2511.21    
  52  0.548517     -0.600536      -154.358       154.358       1958.45       2112.81    
  53  0.210242      -1.55950      -400.842       400.842       1863.70       2264.55    
  54  0.848361     -0.164449      -42.2689       42.2689       1763.11       1805.38    
  55  0.160491E-01  -4.13210      -1062.09       1062.09       1843.55       2905.64    
  56  0.407967     -0.896570      -230.448       230.448       1835.98       2066.42    
  57  0.859929     -0.150905      -38.7877       38.7877       1883.66       1922.45    
  58  0.406052     -0.901274      -231.657       231.657       2332.44       2564.10    
  59  0.743169     -0.296832      -76.2957       76.2957       1871.71       1948.00    
  60  0.434823     -0.832817      -214.061       214.061       1590.44       1804.50    
  61  0.559897     -0.580003      -149.080       149.080       2214.87       2363.95    
  62  0.277128      -1.28328      -329.844       329.844       2074.74       2404.58    
  63  0.839691     -0.174721      -44.9092       44.9092       2517.14       2562.05    
  64  0.641867     -0.443375      -113.962       113.962       1781.59       1895.55    
loop,thermsimp(1:2)       43   61.0439       58.4632    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133       1844.95         68.90          1.18         40.60          0.00          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1844.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       43
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       44
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      132     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -579.332       579.332       1405.15       1984.48    
   2  0.780131E-01  -2.55088      -655.660       655.660       1456.43       2112.09    
   3  0.723689     -0.323394      -83.1230       83.1230       1504.39       1587.52    
   4  0.439896     -0.821218      -211.080       211.080       1558.02       1769.10    
   5  0.967364     -0.331803E-01  -8.52843       8.52843       1539.50       1548.03    
   6  0.235884      -1.44441      -371.262       371.262       1425.50       1796.77    
   7  0.311956      -1.16489      -299.416       299.416       1584.73       1884.15    
   8  0.600573     -0.509870      -131.053       131.053       1491.51       1622.56    
   9  0.781739     -0.246234      -63.2903       63.2903       1618.35       1681.64    
  10  0.505036     -0.683126      -175.586       175.586       1576.52       1752.11    
  11  0.896130     -0.109670      -28.1888       28.1888       1649.67       1677.86    
  12  0.545040     -0.606897      -155.992       155.992       1552.58       1708.57    
  13  0.338019      -1.08465      -278.792       278.792       1508.93       1787.73    
  14  0.200467      -1.60711      -413.079       413.079       1535.02       1948.10    
  15  0.548763     -0.600089      -154.243       154.243       1624.05       1778.29    
  16  0.897241     -0.108431      -27.8703       27.8703       1703.70       1731.57    
  17  0.229905      -1.47009      -377.861       377.861       1590.44       1968.30    
  18  0.387828     -0.947193      -243.460       243.460       1763.11       2006.57    
  19  0.789400     -0.236482      -60.7837       60.7837       1500.10       1560.88    
  20  0.495667     -0.701851      -180.399       180.399       1802.34       1982.74    
  21  0.818926     -0.199761      -51.3452       51.3452       1632.99       1684.33    
  22  0.181319      -1.70750      -438.883       438.883       1822.10       2260.98    
  23  0.901986     -0.103156      -26.5146       26.5146       1778.10       1804.62    
  24  0.933790E-01  -2.37109      -609.448       609.448       1721.08       2330.53    
  25  0.171523      -1.76304      -453.159       453.159       1793.12       2246.28    
  26  0.648450     -0.433170      -111.339       111.339       1717.77       1829.11    
  27  0.777448     -0.251739      -64.7051       64.7051       1744.49       1809.19    
  28  0.777670     -0.251453      -64.6317       64.6317       1449.54       1514.17    
  29  0.972420     -0.279672E-01  -7.18850       7.18850       1781.59       1788.78    
  30  0.825305     -0.192002      -49.3508       49.3508       1708.53       1757.88    
  31  0.470649     -0.753642      -193.711       193.711       1883.66       2077.37    
  32  0.263953      -1.33198      -342.363       342.363       1805.63       2147.99    
  33  0.857551     -0.153675      -39.4996       39.4996       1859.36       1898.86    
  34  0.950157     -0.511279E-01  -13.1415       13.1415       1807.25       1820.39    
  35  0.866482     -0.143314      -36.8364       36.8364       1783.37       1820.20    
  36  0.904889     -0.999433E-01  -25.6887       25.6887       1518.51       1544.20    
  37  0.297565      -1.21212      -311.555       311.555       1871.71       2183.26    
  38  0.902696     -0.102369      -26.3123       26.3123       1743.72       1770.03    
  39  0.800054     -0.223076      -57.3379       57.3379       1745.28       1802.61    
  40  0.534162     -0.627057      -161.174       161.174       1835.98       1997.15    
  41  0.593018     -0.522530      -134.307       134.307       1814.86       1949.16    
  42  0.682417E-01  -2.68470      -690.056       690.056       1838.47       2528.53    
  43  0.336048      -1.09050      -280.295       280.295       1958.45       2238.75    
  44  0.576540     -0.550710      -141.551       141.551       1716.14       1857.69    
  45  0.217955      -1.52347      -391.581       391.581       1848.90       2240.48    
  46  0.281607      -1.26724      -325.723       325.723       1989.46       2315.19    
  47  0.306631      -1.18211      -303.841       303.841       1789.28       2093.12    
  48  0.676335E-01  -2.69365      -692.357       692.357       1739.04       2431.39    
  49  0.145631      -1.92668      -495.220       495.220       1770.52       2265.74    
  50  0.820952     -0.197291      -50.7103       50.7103       1761.85       1812.56    
  51  0.224137      -1.49550      -384.392       384.392       1863.70       2248.10    
  52  0.738282     -0.303430      -77.9915       77.9915       1713.55       1791.54    
  53  0.364089      -1.01036      -259.695       259.695       2214.87       2474.57    
  54  0.321068      -1.13610      -292.015       292.015       2074.74       2366.75    
  55  0.179504      -1.71756      -441.469       441.469       1718.33       2159.79    
  56  0.808596     -0.212456      -54.6082       54.6082       2155.99       2210.60    
  57  0.974692     -0.256343E-01  -6.58885       6.58885       2517.14       2523.73    
  58  0.559434     -0.580830      -149.292       149.292       2332.44       2481.73    
  59  0.443035E-01  -3.11669      -801.092       801.092       2092.67       2893.76    
  60  0.711672     -0.340139      -87.4268       87.4268       1991.50       2078.93    
  61  0.578255     -0.547741      -140.787       140.787       1674.94       1815.73    
  62  0.102770      -2.27527      -584.818       584.818       1843.55       2428.37    
  63  0.813100     -0.206901      -53.1803       53.1803       1747.80       1800.98    
  64  0.612419     -0.490339      -126.033       126.033       1844.95       1970.98    
loop,thermsimp(1:2)       44   579.332       655.660    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       1604.04         68.80          1.15         40.50          0.47          0.05        110.97
Just calling func    0   0        110.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135       1569.48         68.78          1.14         40.68          0.33          0.05        110.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1569.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       44
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       45
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      134     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -35.0237       35.0237       1449.54       1484.56    
   2  0.990306     -0.974175E-02  -2.50395       2.50395       1518.51       1521.02    
   3  0.488656     -0.716096      -184.060       184.060       1539.50       1723.56    
   4  0.865115E-01  -2.44748      -629.082       629.082       1500.10       2129.18    
   5  0.234262      -1.45132      -373.036       373.036       1504.39       1877.43    
   6  0.906541     -0.981186E-01  -25.2197       25.2197       1491.51       1516.73    
   7  0.680454     -0.384995      -98.9563       98.9563       1649.67       1748.63    
   8  0.575574     -0.552388      -141.982       141.982       1618.35       1760.33    
   9  0.537443E-02  -5.22610      -1343.28       1343.28       1632.99       2976.27    
  10  0.421676     -0.863518      -221.953       221.953       1552.58       1774.53    
  11  0.297588      -1.21204      -311.535       311.535       1703.70       2015.24    
  12  0.119337      -2.12581      -546.402       546.402       1576.52       2122.92    
  13  0.958276     -0.426192E-01  -10.9545       10.9545       1708.53       1719.48    
  14  0.115549      -2.15806      -554.692       554.692       1558.02       2112.71    
  15  0.104220      -2.26125      -581.217       581.217       1743.72       2324.94    
  16  0.719503     -0.329194      -84.6137       84.6137       1624.05       1708.66    
  17  0.875656     -0.132782      -34.1293       34.1293       1508.93       1543.06    
  18  0.578760     -0.546868      -140.563       140.563       1781.59       1922.15    
  19  0.923704     -0.793639E-01  -20.3991       20.3991       1713.55       1733.95    
  20  0.457980     -0.780930      -200.725       200.725       1425.50       1626.23    
  21  0.783173     -0.244401      -62.8192       62.8192       1747.80       1810.62    
  22  0.764479     -0.268561      -69.0290       69.0290       1745.28       1814.31    
  23  0.496891     -0.699384      -179.765       179.765       1778.10       1957.87    
  24  0.554859     -0.589041      -151.403       151.403       1744.49       1895.89    
  25  0.734503E-02  -4.91373      -1262.99       1262.99       1761.85       3024.84    
  26  0.117643      -2.14010      -550.077       550.077       1674.94       2225.02    
  27  0.145440      -1.92799      -495.557       495.557       1783.37       2278.92    
  28  0.375449     -0.979633      -251.798       251.798       1807.25       2059.04    
  29  0.954324E-01  -2.34934      -603.857       603.857       1717.77       2321.63    
  30  0.449085     -0.800543      -205.766       205.766       1716.14       1921.90    
  31  0.354483      -1.03709      -266.567       266.567       1584.73       1851.30    
  32  0.153971      -1.87099      -480.906       480.906       1859.36       2340.27    
  33  0.871598     -0.137427      -35.3232       35.3232       1535.02       1570.34    
  34  0.633061     -0.457188      -117.512       117.512       1814.86       1932.37    
  35  0.947022E-01  -2.35702      -605.831       605.831       1590.44       2196.27    
  36  0.793812     -0.230909      -59.3512       59.3512       1844.95       1904.30    
  37  0.760585     -0.273667      -70.3414       70.3414       1802.34       1872.68    
  38  0.124312      -2.08496      -535.904       535.904       1405.15       1941.05    
  39  0.961605E-03  -6.94691      -1785.58       1785.58       1835.98       3621.56    
  40  0.672529     -0.396710      -101.967       101.967       1763.11       1865.08    
  41  0.749847E-01  -2.59047      -665.836       665.836       1883.66       2549.50    
  42  0.982441     -0.177147E-01  -4.55327       4.55327       1991.50       1996.06    
  43  0.340727      -1.07667      -276.740       276.740       1789.28       2066.02    
  44  0.915043     -0.887846E-01  -22.8206       22.8206       1456.43       1479.25    
  45  0.150614      -1.89303      -486.572       486.572       1805.63       2292.20    
  46  0.892785     -0.113409      -29.1499       29.1499       1718.33       1747.48    
  47  0.844073     -0.169516      -43.5711       43.5711       1871.71       1915.28    
  48  0.469949     -0.755131      -194.094       194.094       2155.99       2350.08    
  49  0.389072     -0.943991      -242.637       242.637       1958.45       2201.09    
  50  0.738049     -0.303745      -78.0724       78.0724       1848.90       1926.97    
  51  0.250173      -1.38560      -356.146       356.146       1793.12       2149.27    
  52  0.383245     -0.959081      -246.515       246.515       1863.70       2110.22    
  53  0.384434     -0.955983      -245.719       245.719       1822.10       2067.82    
  54  0.479018E-01  -3.03860      -781.021       781.021       1770.52       2551.54    
  55  0.819285     -0.199323      -51.2327       51.2327       1989.46       2040.70    
  56  0.568165     -0.565344      -145.312       145.312       1721.08       1866.39    
  57  0.918732     -0.847606E-01  -21.7863       21.7863       2074.74       2096.52    
  58  0.374258     -0.982809      -252.614       252.614       1843.55       2096.17    
  59  0.966524     -0.340496E-01  -8.75188       8.75188       1739.04       1747.79    
  60  0.505261     -0.682680      -175.471       175.471       2214.87       2390.34    
  61  0.283819      -1.25942      -323.712       323.712       2332.44       2656.15    
  62  0.448920     -0.800911      -205.860       205.860       2517.14       2723.00    
  63  0.398648     -0.919676      -236.387       236.387       1838.47       2074.86    
  64  0.625742     -0.468817      -120.501       120.501       1569.48       1689.98    
loop,thermsimp(1:2)       45   35.0237       2.50395    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       1469.94         68.78          1.15         40.59          0.47          0.05        111.03
Just calling func    0   0        111.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137       1503.34         68.81          1.16         40.72          0.30          0.05        111.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1469.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       45
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       46
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      136     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -624.534       624.534       1456.43       2080.97    
   2  0.312747      -1.16236      -298.765       298.765       1449.54       1748.30    
   3  0.317683      -1.14670      -294.740       294.740       1491.51       1786.25    
   4  0.693053     -0.366649      -94.2409       94.2409       1518.51       1612.76    
   5  0.361881      -1.01644      -261.258       261.258       1508.93       1770.19    
   6  0.127478      -2.05981      -529.439       529.439       1535.02       2064.46    
   7  0.718706     -0.330302      -84.8986       84.8986       1425.50       1510.40    
   8  0.609419E-01  -2.79783      -719.135       719.135       1569.48       2288.61    
   9  0.320798      -1.13695      -292.232       292.232       1624.05       1916.28    
  10  0.343503      -1.06856      -274.655       274.655       1708.53       1983.18    
  11  0.671828     -0.397753      -102.236       102.236       1539.50       1641.74    
  12  0.616702     -0.483369      -124.242       124.242       1713.55       1837.79    
  13  0.806358E-01  -2.51781      -647.161       647.161       1718.33       2365.49    
  14  0.997284     -0.271972E-02 -0.699059      0.699059       1739.04       1739.74    
  15  0.554344     -0.589969      -151.642       151.642       1649.67       1801.31    
  16  0.411057     -0.889023      -228.508       228.508       1618.35       1846.86    
  17  0.846258E-01  -2.46952      -634.747       634.747       1552.58       2187.32    
  18  0.737439     -0.304571      -78.2849       78.2849       1747.80       1826.08    
  19  0.393790     -0.931939      -239.539       239.539       1745.28       1984.82    
  20  0.965947     -0.346467E-01  -8.90534       8.90534       1584.73       1593.64    
  21  0.150166      -1.89601      -487.338       487.338       1763.11       2250.45    
  22  0.212005      -1.55114      -398.695       398.695       1721.08       2119.78    
  23  0.615060     -0.486036      -124.927       124.927       1802.34       1927.27    
  24  0.382142     -0.961962      -247.256       247.256       1504.39       1751.65    
  25  0.249044      -1.39013      -357.309       357.309       1744.49       2101.80    
  26  0.245943      -1.40266      -360.529       360.529       1844.95       2205.48    
  27  0.108882      -2.21749      -569.969       569.969       1871.71       2441.68    
  28  0.199835      -1.61026      -413.891       413.891       1716.14       2130.03    
  29  0.863954     -0.146235      -37.5873       37.5873       1781.59       1819.18    
  30  0.392842     -0.934347      -240.158       240.158       1848.90       2089.05    
  31  0.770596     -0.260592      -66.9806       66.9806       1814.86       1881.84    
  32  0.149868      -1.89800      -487.849       487.849       1405.15       1893.00    
  33  0.234154      -1.45178      -373.154       373.154       1778.10       2151.25    
  34  0.611512     -0.491821      -126.414       126.414       1991.50       2117.92    
  35  0.518093E-01  -2.96019      -760.865       760.865       1703.70       2464.57    
  36  0.567953     -0.565716      -145.408       145.408       1989.46       2134.87    
  37  0.190847      -1.65628      -425.720       425.720       1807.25       2232.96    
  38  0.104561      -2.25798      -580.376       580.376       1789.28       2369.66    
  39  0.135276      -2.00044      -514.178       514.178       1822.10       2336.28    
  40  0.262364      -1.33802      -343.916       343.916       1838.47       2182.39    
  41  0.463951     -0.767976      -197.395       197.395       1843.55       2040.95    
  42  0.419672     -0.868282      -223.177       223.177       2074.74       2297.92    
  43  0.897011     -0.108687      -27.9361       27.9361       1863.70       1891.64    
  44  0.818933     -0.199754      -51.3432       51.3432       1558.02       1609.36    
  45  0.136906      -1.98846      -511.101       511.101       1576.52       2087.62    
  46  0.561722     -0.576748      -148.243       148.243       1500.10       1648.34    
  47  0.991681     -0.835368E-02  -2.14717       2.14717       1793.12       1795.27    
  48  0.653388     -0.425585      -109.389       109.389       1590.44       1699.83    
  49  0.578557     -0.547219      -140.653       140.653       1958.45       2099.11    
  50  0.784121     -0.243191      -62.5082       62.5082       1674.94       1737.45    
  51  0.827307     -0.189579      -48.7281       48.7281       1783.37       1832.09    
  52  0.994261     -0.575522E-02  -1.47928       1.47928       1805.63       1807.10    
  53  0.274030      -1.29452      -332.734       332.734       1717.77       2050.50    
  54  0.879777     -0.128087      -32.9225       32.9225       1743.72       1776.64    
  55  0.694576E-01  -2.66704      -685.517       685.517       1859.36       2544.88    
  56  0.431517E-01  -3.14303      -807.863       807.863       2155.99       2963.85    
  57  0.620633     -0.477015      -122.609       122.609       2214.87       2337.48    
  58  0.166702      -1.79155      -460.487       460.487       1883.66       2344.15    
  59  0.785136E-01  -2.54448      -654.016       654.016       1770.52       2424.54    
  60  0.440162     -0.820613      -210.925       210.925       2332.44       2543.36    
  61  0.924092     -0.789432E-01  -20.2910       20.2910       2517.14       2537.43    
  62  0.957397     -0.435372E-01  -11.1905       11.1905       1632.99       1644.18    
  63  0.817312     -0.201734      -51.8523       51.8523       1761.85       1813.70    
  64  0.345978      -1.06138      -272.809       272.809       1469.94       1742.75    
loop,thermsimp(1:2)       46   624.534       298.765    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138       1649.82         68.76          1.15         40.70          0.26          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139       2963.89         68.74          1.17         40.65          0.51          0.05        111.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1649.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       46
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       47
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      138     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -815.378       815.378       1425.50       2240.88    
   2  0.581082     -0.542864      -139.534       139.534       1584.73       1724.26    
   3  0.690143     -0.370857      -95.3224       95.3224       1558.02       1653.34    
   4  0.958690     -0.421877E-01  -10.8436       10.8436       1518.51       1529.36    
   5  0.947492     -0.539367E-01  -13.8635       13.8635       1539.50       1553.36    
   6  0.253816E-01  -3.67373      -944.270       944.270       1632.99       2577.26    
   7  0.811950     -0.208316      -53.5441       53.5441       1500.10       1553.64    
   8  0.448512     -0.801821      -206.094       206.094       1590.44       1796.53    
   9  0.625244     -0.469613      -120.706       120.706       1674.94       1795.65    
  10  0.557627     -0.584065      -150.124       150.124       1739.04       1889.16    
  11  0.762657     -0.270947      -69.6424       69.6424       1469.94       1539.58    
  12  0.579328     -0.545887      -140.311       140.311       1449.54       1589.85    
  13  0.168395      -1.78144      -457.890       457.890       1504.39       1962.28    
  14  0.993282     -0.674111E-02  -1.73269       1.73269       1508.93       1510.67    
  15  0.573458     -0.556070      -142.928       142.928       1743.72       1886.65    
  16  0.900456     -0.104854      -26.9508       26.9508       1491.51       1518.46    
  17  0.961937     -0.388068E-01  -9.97462       9.97462       1793.12       1803.09    
  18  0.685702     -0.377312      -96.9817       96.9817       1649.67       1746.65    
  19  0.335644      -1.09171      -280.604       280.604       1805.63       2086.23    
  20  0.726392     -0.319666      -82.1646       82.1646       1761.85       1844.01    
  21  0.523515     -0.647189      -166.349       166.349       1781.59       1947.94    
  22  0.877914     -0.130206      -33.4673       33.4673       1747.80       1781.26    
  23  0.893563     -0.112539      -28.9262       28.9262       1783.37       1812.29    
  24  0.829449     -0.186994      -48.0637       48.0637       1713.55       1761.62    
  25  0.454457     -0.788653      -202.710       202.710       1618.35       1821.06    
  26  0.261407      -1.34168      -344.855       344.855       1814.86       2159.71    
  27  0.144225      -1.93638      -497.714       497.714       1863.70       2361.42    
  28  0.963744     -0.369299E-01  -9.49219       9.49219       1405.15       1414.64    
  29  0.267843      -1.31735      -338.604       338.604       1624.05       1962.65    
  30  0.251943E-01  -3.68114      -946.174       946.174       1802.34       2748.51    
  31  0.321532      -1.13466      -291.645       291.645       1708.53       2000.17    
  32  0.440903     -0.818930      -210.492       210.492       1745.28       1955.77    
  33  0.214416      -1.53984      -395.789       395.789       1843.55       2239.34    
  34  0.212185      -1.55030      -398.478       398.478       1717.77       2116.25    
  35  0.948253E-01  -2.35572      -605.497       605.497       1535.02       2140.51    
  36  0.507627     -0.678008      -174.270       174.270       1456.43       1630.70    
  37  0.415074     -0.879299      -226.009       226.009       1576.52       1802.53    
  38  0.768069     -0.263876      -67.8249       67.8249       1848.90       1916.72    
  39  0.462999E-01  -3.07261      -789.763       789.763       1958.45       2748.22    
  40  0.835390     -0.179856      -46.2290       46.2290       1744.49       1790.72    
  41  0.678734     -0.387526      -99.6071       99.6071       1991.50       2091.11    
  42  0.363569      -1.01179      -260.062       260.062       1721.08       1981.14    
  43  0.677161     -0.389846      -100.203       100.203       1716.14       1816.34    
  44  0.506668     -0.679899      -174.756       174.756       1989.46       2164.22    
  45  0.875658     -0.132779      -34.1286       34.1286       1778.10       1812.23    
  46  0.924863     -0.781102E-01  -20.0769       20.0769       1838.47       1858.55    
  47  0.794570E-01  -2.53254      -650.946       650.946       1552.58       2203.52    
  48  0.449212     -0.800261      -205.693       205.693       1844.95       2050.64    
  49  0.658987     -0.417051      -107.196       107.196       1807.25       1914.44    
  50  0.674357     -0.393995      -101.270       101.270       1763.11       1864.38    
  51  0.436334     -0.829348      -213.170       213.170       1569.48       1782.65    
  52  0.331871      -1.10301      -283.509       283.509       2074.74       2358.25    
  53  0.233029      -1.45659      -374.393       374.393       1822.10       2196.49    
  54  0.207666      -1.57183      -404.011       404.011       2214.87       2618.88    
  55  0.801765     -0.220940      -56.7889       56.7889       1883.66       1940.45    
  56  0.614336E-01  -2.78980      -717.070       717.070       1718.33       2435.40    
  57  0.167288      -1.78804      -459.585       459.585       1789.28       2248.87    
  58  0.718808     -0.330162      -84.8624       84.8624       1770.52       1855.39    
  59  0.981938     -0.182272E-01  -4.68500       4.68500       1871.71       1876.39    
  60  0.759328     -0.275322      -70.7668       70.7668       1703.70       1774.47    
  61  0.290749      -1.23530      -317.512       317.512       2517.14       2834.66    
  62  0.887200     -0.119685      -30.7630       30.7630       2332.44       2363.20    
  63  0.186280      -1.68051      -431.945       431.945       1859.36       2291.31    
  64  0.427708     -0.849315      -218.302       218.302       1649.82       1868.13    
loop,thermsimp(1:2)       47   815.378       139.534    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       1597.26         68.89          1.15         40.62          0.44          0.05        111.15
Just calling func    0   0        111.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1597.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       47
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       48
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      139     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -145.923       145.923       1405.15       1551.07    
   2  0.216137      -1.53184      -393.734       393.734       1508.93       1902.67    
   3  0.476425     -0.741444      -190.576       190.576       1491.51       1682.08    
   4  0.184047      -1.69256      -435.045       435.045       1518.51       1953.56    
   5  0.722630     -0.324858      -83.4993       83.4993       1469.94       1553.44    
   6  0.887750     -0.119065      -30.6036       30.6036       1539.50       1570.10    
   7  0.236344      -1.44247      -370.762       370.762       1500.10       1870.86    
   8  0.798055     -0.225578      -57.9808       57.9808       1449.54       1507.52    
   9  0.425454     -0.854597      -219.660       219.660       1456.43       1676.09    
  10  0.605701     -0.501368      -128.868       128.868       1558.02       1686.89    
  11  0.742456     -0.297792      -76.5424       76.5424       1584.73       1661.27    
  12  0.378462E-01  -3.27423      -841.584       841.584       1649.67       2491.26    
  13  0.341910      -1.07321      -275.850       275.850       1713.55       1989.40    
  14  0.794971E-01  -2.53203      -650.816       650.816       1703.70       2354.52    
  15  0.586423     -0.533715      -137.182       137.182       1747.80       1884.98    
  16  0.990523     -0.952170E-02  -2.44739       2.44739       1569.48       1571.92    
  17  0.348475      -1.05419      -270.961       270.961       1744.49       2015.45    
  18  0.998034     -0.196755E-02 -0.505725      0.505725       1674.94       1675.45    
  19  0.616072     -0.484391      -124.504       124.504       1590.44       1714.94    
  20  0.427239     -0.850411      -218.584       218.584       1576.52       1795.10    
  21  0.598160     -0.513898      -132.089       132.089       1793.12       1925.21    
  22  0.642831     -0.441873      -113.576       113.576       1778.10       1891.68    
  23  0.392766     -0.934541      -240.208       240.208       1783.37       2023.57    
  24  0.738407     -0.303260      -77.9479       77.9479       1716.14       1794.08    
  25  0.334341      -1.09559      -281.604       281.604       1618.35       1899.95    
  26  0.997912     -0.208996E-02 -0.537188      0.537188       1761.85       1762.38    
  27  0.492305E-01  -3.01124      -773.989       773.989       1770.52       2544.51    
  28  0.304734      -1.18832      -305.436       305.436       1838.47       2143.91    
  29  0.159886      -1.83330      -471.218       471.218       1763.11       2234.33    
  30  0.991331     -0.870666E-02  -2.23790       2.23790       1649.82       1652.06    
  31  0.735164     -0.307662      -79.0793       79.0793       1871.71       1950.79    
  32  0.279948      -1.27315      -327.242       327.242       1743.72       2070.96    
  33  0.457260     -0.782502      -201.129       201.129       1739.04       1940.17    
  34  0.678170     -0.388358      -99.8207       99.8207       1807.25       1907.07    
  35  0.689603     -0.371639      -95.5235       95.5235       1848.90       1944.42    
  36  0.468470     -0.758283      -194.904       194.904       1883.66       2078.57    
  37  0.937429     -0.646141E-01  -16.6080       16.6080       1781.59       1798.20    
  38  0.115915      -2.15490      -553.880       553.880       1745.28       2299.16    
  39  0.125789      -2.07315      -532.867       532.867       1504.39       2037.26    
  40  0.137562      -1.98368      -509.872       509.872       1624.05       2133.92    
  41  0.273901      -1.29499      -332.854       332.854       1721.08       2053.94    
  42  0.934963     -0.672484E-01  -17.2851       17.2851       1708.53       1725.81    
  43  0.450296     -0.797850      -205.074       205.074       1844.95       2050.02    
  44  0.681645     -0.383246      -98.5069       98.5069       1805.63       1904.13    
  45  0.282914E-01  -3.56520      -916.373       916.373       1991.50       2907.88    
  46  0.962226     -0.385062E-01  -9.89736       9.89736       1717.77       1727.67    
  47  0.771412     -0.259533      -66.7084       66.7084       1535.02       1601.73    
  48  0.778208     -0.250761      -64.4540       64.4540       1814.86       1879.31    
  49  0.945686     -0.558450E-01  -14.3540       14.3540       1989.46       2003.82    
  50  0.648669     -0.432833      -111.252       111.252       1822.10       1933.35    
  51  0.214283      -1.54046      -395.948       395.948       1552.58       1948.53    
  52  0.692999     -0.366726      -94.2608       94.2608       1843.55       1937.81    
  53  0.966323     -0.342573E-01  -8.80525       8.80525       1425.50       1434.31    
  54  0.975007     -0.253104E-01  -6.50561       6.50561       1789.28       1795.79    
  55  0.947991E-01  -2.35600      -605.568       605.568       1859.36       2464.93    
  56  0.195092      -1.63429      -420.065       420.065       2074.74       2494.80    
  57  0.459282     -0.778091      -199.995       199.995       1863.70       2063.70    
  58  0.563954     -0.572782      -147.224       147.224       2332.44       2479.66    
  59  0.482884     -0.727978      -187.114       187.114       1718.33       1905.44    
  60  0.270357      -1.30801      -336.203       336.203       1632.99       1969.19    
  61  0.184282      -1.69129      -434.716       434.716       2214.87       2649.59    
  62  0.486455     -0.720611      -185.221       185.221       1958.45       2143.68    
  63  0.348603      -1.05382      -270.867       270.867       1802.34       2073.21    
  64  0.556175     -0.586673      -150.794       150.794       1597.26       1748.06    
loop,thermsimp(1:2)       48   145.923       393.734    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141       1548.55         68.84          1.15         40.50          0.46          0.04        110.99
Just calling func    0   0        110.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    1548.6       0.7937     -3.525      2.849     -102.6     0.1440    
                     -0.3722E-01 0.8903     -99.70      3.415     0.3685    

                       1.344     0.7439      2.094      7622.      7000.    

                      -1.890      0.000      0.000      0.000     -1.221    



                      -1.884      0.000      0.000      7000.     -33.73    

                      -1.274     -2.485     -2.910     -3.211      1.665    

                      -3.809     -3.949      5539.      0.000      9292.    



                       3424.      6774.      8506.      3825.      3694.    

                       3012.     0.1252     0.1804     0.1233     0.2399    

                     -0.2486     0.2327     0.2379     0.2578     0.7143E-01



                      -1.062    -0.8745E-01  0.000     0.2445E-01 0.4033E-01

                      0.1238     0.1695    -0.7116     0.2848     0.3440    

                      0.1079    -0.2896    -0.5250     -1.087      7000.    



                      -2.073     -1.623     -2.190     -2.275    -0.3807    

                     -0.3252      9.151      8.677    -0.1630E+05 -6.018    

                       0.000      0.000      9.102      8.600    -0.1969E+05



                      -6.000      0.000      0.000      8.857      9.138    

                     -0.1944E+05 -6.000      0.000      0.000      8.951    

                       9.111    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1548.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       48
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       49
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      140     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -439.378       439.378       1425.50       1864.88    
   2  0.335083      -1.09338      -281.034       281.034       1449.54       1730.57    
   3  0.585160     -0.535871      -137.736       137.736       1405.15       1542.89    
   4  0.445729     -0.808044      -207.694       207.694       1469.94       1677.64    
   5  0.963605     -0.370741E-01  -9.52926       9.52926       1539.50       1549.03    
   6  0.538074     -0.619758      -159.298       159.298       1569.48       1728.77    
   7  0.971443     -0.289729E-01  -7.44700       7.44700       1535.02       1542.46    
   8  0.817136     -0.201950      -51.9078       51.9078       1649.82       1701.73    
   9  0.216943      -1.52812      -392.778       392.778       1584.73       1977.51    
  10  0.572311     -0.558074      -143.443       143.443       1674.94       1818.39    
  11  0.511761     -0.669897      -172.186       172.186       1456.43       1628.62    
  12  0.331920E-01  -3.40545      -875.312       875.312       1491.51       2366.82    
  13  0.662680     -0.411462      -105.759       105.759       1558.02       1663.78    
  14  0.578679     -0.547007      -140.599       140.599       1590.44       1731.03    
  15  0.473979     -0.746592      -191.899       191.899       1708.53       1900.43    
  16  0.243750      -1.41161      -362.831       362.831       1717.77       2080.60    
  17  0.784227     -0.243057      -62.4738       62.4738       1597.26       1659.74    
  18  0.215065      -1.53682      -395.012       395.012       1761.85       2156.86    
  19  0.813272     -0.206689      -53.1260       53.1260       1716.14       1769.26    
  20  0.877336     -0.130865      -33.6367       33.6367       1576.52       1610.16    
  21  0.911070     -0.931357E-01  -23.9389       23.9389       1789.28       1813.22    
  22  0.424500     -0.856844      -220.237       220.237       1781.59       2001.83    
  23  0.122508      -2.09958      -539.661       539.661       1500.10       2039.76    
  24  0.173199      -1.75331      -450.660       450.660       1814.86       2265.52    
  25  0.243010      -1.41465      -363.613       363.613       1747.80       2111.41    
  26  0.618804     -0.479966      -123.367       123.367       1778.10       1901.47    
  27  0.365303      -1.00703      -258.839       258.839       1618.35       1877.19    
  28  0.178054      -1.72567      -443.554       443.554       1508.93       1952.49    
  29  0.416122     -0.876776      -225.360       225.360       1805.63       2030.99    
  30  0.789287     -0.236625      -60.8205       60.8205       1718.33       1779.15    
  31  0.786736     -0.239863      -61.6527       61.6527       1807.25       1868.90    
  32  0.295880      -1.21780      -313.015       313.015       1793.12       2106.13    
  33  0.418649     -0.870722      -223.804       223.804       1822.10       2045.90    
  34  0.706992     -0.346736      -89.1225       89.1225       1843.55       1932.68    
  35  0.281863      -1.26633      -325.489       325.489       1739.04       2064.53    
  36  0.357290      -1.02921      -264.541       264.541       1848.90       2113.44    
  37  0.174180      -1.74767      -449.208       449.208       1552.58       2001.79    
  38  0.190924      -1.65588      -425.616       425.616       1871.71       2297.32    
  39  0.630369     -0.461449      -118.608       118.608       1518.51       1637.12    
  40  0.252261      -1.37729      -354.009       354.009       1632.99       1987.00    
  41  0.359213      -1.02384      -263.161       263.161       1713.55       1976.71    
  42  0.740344     -0.300640      -77.2745       77.2745       1989.46       2066.74    
  43  0.283211      -1.26156      -324.263       324.263       1744.49       2068.75    
  44  0.965119     -0.355039E-01  -9.12566       9.12566       1783.37       1792.49    
  45  0.389600     -0.942634      -242.288       242.288       1504.39       1746.68    
  46  0.598383     -0.513525      -131.993       131.993       1844.95       1976.94    
  47  0.631795     -0.459190      -118.027       118.027       1721.08       1839.11    
  48  0.997460     -0.254363E-02 -0.653797      0.653797       1863.70       1864.36    
  49  0.192532      -1.64749      -423.460       423.460       1743.72       2167.18    
  50  0.769348     -0.262212      -67.3970       67.3970       1802.34       1869.74    
  51  0.740745     -0.300099      -77.1353       77.1353       1883.66       1960.80    
  52  0.590587     -0.526639      -135.364       135.364       1624.05       1759.41    
  53  0.628310E-01  -2.76731      -711.289       711.289       1958.45       2669.74    
  54  0.515529     -0.662562      -170.300       170.300       1838.47       2008.77    
  55  0.306025      -1.18409      -304.350       304.350       1763.11       2067.46    
  56  0.686790     -0.375726      -96.5740       96.5740       1745.28       1841.85    
  57  0.357910      -1.02747      -264.095       264.095       1703.70       1967.80    
  58  0.267469      -1.31875      -338.962       338.962       1859.36       2198.33    
  59  0.410193     -0.891128      -229.049       229.049       2332.44       2561.49    
  60  0.490314     -0.712709      -183.190       183.190       1649.67       1832.86    
  61  0.395217     -0.928320      -238.609       238.609       2074.74       2313.35    
  62  0.641491E-01  -2.74655      -705.953       705.953       1770.52       2476.48    
  63  0.610173     -0.494012      -126.977       126.977       2214.87       2341.85    
  64  0.657523     -0.419276      -107.768       107.768       1548.55       1656.32    
loop,thermsimp(1:2)       49   439.378       281.034    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       2513.47         68.79          1.16         40.70          0.45          0.04        111.14
Just calling func    0   0        111.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2513.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       49
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       50
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      141     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -886.949       886.949       1535.02       2421.97    
   2  0.601445     -0.508421      -130.681       130.681       1405.15       1535.83    
   3  0.651191     -0.428952      -110.255       110.255       1539.50       1649.75    
   4  0.187303      -1.67503      -430.537       430.537       1576.52       2007.06    
   5  0.664603     -0.408566      -105.015       105.015       1456.43       1561.45    
   6  0.945236     -0.563208E-01  -14.4763       14.4763       1518.51       1532.99    
   7  0.865870     -0.144020      -37.0179       37.0179       1548.55       1585.57    
   8  0.674117     -0.394351      -101.361       101.361       1597.26       1698.63    
   9  0.959689E-01  -2.34373      -602.416       602.416       1558.02       2160.43    
  10  0.663337     -0.410472      -105.505       105.505       1469.94       1575.45    
  11  0.384854     -0.954891      -245.438       245.438       1649.82       1895.26    
  12  0.892338     -0.113910      -29.2787       29.2787       1569.48       1598.75    
  13  0.470837     -0.753243      -193.608       193.608       1449.54       1643.15    
  14  0.262618      -1.33706      -343.667       343.667       1590.44       1934.10    
  15  0.877143     -0.131085      -33.6931       33.6931       1504.39       1538.09    
  16  0.262102      -1.33902      -344.173       344.173       1624.05       1968.22    
  17  0.306130      -1.18375      -304.262       304.262       1716.14       2020.40    
  18  0.251844      -1.37895      -354.435       354.435       1718.33       2072.76    
  19  0.371147     -0.991157      -254.760       254.760       1783.37       2038.13    
  20  0.244393E-01  -3.71156      -953.994       953.994       1789.28       2743.28    
  21  0.550903     -0.596197      -153.242       153.242       1674.94       1828.18    
  22  0.509078     -0.675154      -173.537       173.537       1649.67       1823.21    
  23  0.741178     -0.299515      -76.9852       76.9852       1721.08       1798.07    
  24  0.585965     -0.534496      -137.383       137.383       1745.28       1882.66    
  25  0.602491     -0.506683      -130.234       130.234       1863.70       1993.94    
  26  0.532366     -0.630423      -162.040       162.040       1425.50       1587.54    
  27  0.264247      -1.33087      -342.077       342.077       1807.25       2149.32    
  28  0.468512     -0.758194      -194.881       194.881       1802.34       1997.22    
  29  0.338122      -1.08435      -278.714       278.714       1618.35       1897.06    
  30  0.815455     -0.204008      -52.4369       52.4369       1708.53       1760.97    
  31  0.126007      -2.07142      -532.423       532.423       1778.10       2310.52    
  32  0.391435     -0.937937      -241.081       241.081       1843.55       2084.63    
  33  0.477179     -0.739864      -190.169       190.169       1508.93       1699.10    
  34  0.926058     -0.768180E-01  -19.7447       19.7447       1883.66       1903.41    
  35  0.305992E-01  -3.48678      -896.218       896.218       1703.70       2599.92    
  36  0.142122      -1.95107      -501.489       501.489       1713.55       2215.04    
  37  0.934627E-01  -2.37019      -609.218       609.218       1844.95       2454.17    
  38  0.933240     -0.690924E-01  -17.7590       17.7590       1584.73       1602.49    
  39  0.551354     -0.595378      -153.032       153.032       1632.99       1786.02    
  40  0.167646      -1.78590      -459.035       459.035       1552.58       2011.61    
  41  0.657770     -0.418900      -107.671       107.671       1781.59       1889.26    
  42  0.937012     -0.650587E-01  -16.7222       16.7222       1838.47       1855.20    
  43  0.435130     -0.832109      -213.880       213.880       1805.63       2019.50    
  44  0.346278E-01  -3.36310      -864.427       864.427       1500.10       2364.52    
  45  0.529273     -0.636251      -163.538       163.538       1822.10       1985.64    
  46  0.543808     -0.609159      -156.574       156.574       1739.04       1895.61    
  47  0.476993     -0.740254      -190.270       190.270       1989.46       2179.73    
  48  0.602365     -0.506891      -130.288       130.288       1763.11       1893.40    
  49  0.429141     -0.845970      -217.442       217.442       1744.49       1961.93    
  50  0.161300E-01  -4.12707      -1060.79       1060.79       1717.77       2778.56    
  51  0.806405     -0.215169      -55.3056       55.3056       1793.12       1848.43    
  52  0.577848E-01  -2.85103      -732.808       732.808       1747.80       2480.61    
  53  0.992308     -0.772154E-02  -1.98469       1.98469       1848.90       1850.88    
  54  0.130687      -2.03495      -523.050       523.050       1761.85       2284.90    
  55  0.844072     -0.169518      -43.5716       43.5716       1743.72       1787.29    
  56  0.900890     -0.104372      -26.8272       26.8272       1859.36       1886.19    
  57  0.886923E-01  -2.42258      -622.683       622.683       1814.86       2437.54    
  58  0.675479     -0.392334      -100.843       100.843       1871.71       1972.55    
  59  0.486368     -0.720791      -185.267       185.267       2074.74       2260.01    
  60  0.868319E-01  -2.44378      -628.132       628.132       2214.87       2843.00    
  61  0.536051     -0.623527      -160.267       160.267       1491.51       1651.77    
  62  0.916344     -0.873636E-01  -22.4553       22.4553       1770.52       1792.98    
  63  0.264660E-01  -3.63190      -933.517       933.517       2332.44       3265.95    
  64  0.765006     -0.267871      -68.8517       68.8517       2513.47       2582.33    
loop,thermsimp(1:2)       50   886.949       130.681    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143       1766.20         68.84          1.15         40.60          0.30          0.05        110.94
Just calling func    0   0        110.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1766.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       50
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       51
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      142     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -18.8479       18.8479       1518.51       1537.36    
   2  0.669511     -0.401208      -103.124       103.124       1405.15       1508.27    
   3  0.863337E-01  -2.44954      -629.611       629.611       1504.39       2134.00    
   4  0.279945      -1.27316      -327.245       327.245       1456.43       1783.68    
   5  0.832640     -0.183154      -47.0766       47.0766       1469.94       1517.02    
   6  0.848933     -0.163775      -42.0956       42.0956       1548.55       1590.65    
   7  0.141794      -1.95338      -502.084       502.084       1425.50       1927.59    
   8  0.208764      -1.56655      -402.656       402.656       1569.48       1972.13    
   9  0.755787     -0.279996      -71.9682       71.9682       1584.73       1656.70    
  10  0.177416      -1.72926      -444.477       444.477       1449.54       1894.01    
  11  0.405148     -0.903503      -232.230       232.230       1539.50       1771.73    
  12  0.640380     -0.445693      -114.558       114.558       1491.51       1606.06    
  13  0.548060     -0.601370      -154.572       154.572       1597.26       1751.84    
  14  0.773287     -0.257105      -66.0844       66.0844       1508.93       1575.02    
  15  0.180768      -1.71054      -439.665       439.665       1708.53       2148.19    
  16  0.135846      -1.99624      -513.098       513.098       1632.99       2146.09    
  17  0.601016     -0.509133      -130.864       130.864       1743.72       1874.58    
  18  0.302263      -1.19646      -307.529       307.529       1770.52       2078.05    
  19  0.189428      -1.66374      -427.637       427.637       1721.08       2148.72    
  20  0.737158     -0.304953      -78.3830       78.3830       1649.67       1728.05    
  21  0.790680     -0.234862      -60.3672       60.3672       1674.94       1735.31    
  22  0.177192E-01  -4.03310      -1036.64       1036.64       1793.12       2829.76    
  23  0.236042      -1.44375      -371.090       371.090       1848.90       2219.99    
  24  0.459229     -0.778206      -200.025       200.025       1838.47       2038.50    
  25  0.586479E-01  -2.83620      -728.998       728.998       1745.28       2474.27    
  26  0.263766      -1.33269      -342.546       342.546       1859.36       2201.91    
  27  0.942550     -0.591663E-01  -15.2077       15.2077       1781.59       1796.80    
  28  0.106855      -2.23628      -574.797       574.797       1763.11       2337.91    
  29  0.710700     -0.341505      -87.7779       87.7779       1649.82       1737.60    
  30  0.207109E-01  -3.87709      -996.541       996.541       1739.04       2735.58    
  31  0.901203     -0.104025      -26.7379       26.7379       1618.35       1645.09    
  32  0.949751     -0.515555E-01  -13.2515       13.2515       1883.66       1896.92    
  33  0.343487      -1.06861      -274.667       274.667       1590.44       1865.10    
  34  0.875043     -0.133483      -34.3095       34.3095       1744.49       1778.80    
  35  0.122447E-01  -4.40266      -1131.63       1131.63       1624.05       2755.67    
  36  0.820650     -0.197659      -50.8048       50.8048       1871.71       1922.51    
  37  0.748866     -0.289195      -74.3327       74.3327       1822.10       1896.43    
  38  0.594525     -0.519992      -133.655       133.655       1863.70       1997.36    
  39  0.927863E-01  -2.37746      -611.085       611.085       1802.34       2413.43    
  40  0.631335     -0.459918      -118.214       118.214       1576.52       1694.74    
  41  0.282620      -1.26365      -324.800       324.800       1552.58       1877.38    
  42  0.707811     -0.345578      -88.8248       88.8248       1805.63       1894.45    
  43  0.930463     -0.720730E-01  -18.5251       18.5251       1716.14       1734.66    
  44  0.988563     -0.115032E-01  -2.95671       2.95671       1783.37       1786.32    
  45  0.869439     -0.139907      -35.9608       35.9608       1718.33       1754.29    
  46  0.693921     -0.365397      -93.9190       93.9190       1843.55       1937.47    
  47  0.731753     -0.312312      -80.2745       80.2745       1807.25       1887.52    
  48  0.848712     -0.164035      -42.1624       42.1624       1558.02       1600.18    
  49  0.174447      -1.74613      -448.814       448.814       1989.46       2438.28    
  50  0.313212      -1.16087      -298.383       298.383       1713.55       2011.94    
  51  0.880789     -0.126937      -32.6270       32.6270       2074.74       2107.37    
  52  0.441967     -0.816520      -209.873       209.873       1761.85       1971.72    
  53  0.624106     -0.471435      -121.174       121.174       1778.10       1899.27    
  54  0.447426     -0.804244      -206.717       206.717       1500.10       1706.81    
  55  0.681696     -0.383171      -98.4877       98.4877       1535.02       1633.50    
  56  0.336384      -1.08950      -280.038       280.038       1814.86       2094.89    
  57  0.197044      -1.62433      -417.506       417.506       1844.95       2262.45    
  58  0.186834E-01  -3.98012      -1023.02       1023.02       1747.80       2770.82    
  59  0.467980     -0.759329      -195.173       195.173       2513.47       2708.65    
  60  0.607270     -0.498782      -128.203       128.203       1703.70       1831.91    
  61  0.299128      -1.20689      -310.209       310.209       1789.28       2099.49    
  62  0.166354      -1.79364      -461.023       461.023       1717.77       2178.79    
  63  0.542834     -0.610952      -157.035       157.035       2214.87       2371.91    
  64  0.811476     -0.208901      -53.6944       53.6944       1766.20       1819.89    
loop,thermsimp(1:2)       51   18.8479       103.124    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144       1561.64         68.83          1.14         40.79          0.50          0.05        111.31
Just calling func    0   0        111.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1561.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       51
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       52
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      143     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -107.569       107.569       1405.15       1512.72    
   2  0.385391     -0.953496      -245.080       245.080       1469.94       1715.02    
   3  0.323679      -1.12800      -289.934       289.934       1518.51       1808.45    
   4  0.402516E-01  -3.21260      -825.745       825.745       1508.93       2334.68    
   5  0.866022     -0.143846      -36.9730       36.9730       1548.55       1585.53    
   6  0.560147     -0.579555      -148.965       148.965       1558.02       1706.98    
   7  0.389098     -0.943925      -242.620       242.620       1491.51       1734.13    
   8  0.470755     -0.753417      -193.653       193.653       1535.02       1728.67    
   9  0.794299     -0.230295      -59.1934       59.1934       1618.35       1677.54    
  10  0.897132     -0.108553      -27.9016       27.9016       1584.73       1612.63    
  11  0.359474      -1.02311      -262.974       262.974       1576.52       1839.50    
  12  0.604694     -0.503032      -129.296       129.296       1500.10       1629.39    
  13  0.101554      -2.28717      -587.877       587.877       1649.67       2237.55    
  14  0.274480      -1.29288      -332.312       332.312       1716.14       2048.45    
  15  0.916086     -0.876445E-01  -22.5275       22.5275       1674.94       1697.47    
  16  0.820070E-01  -2.50095      -642.827       642.827       1649.82       2292.65    
  17  0.975902     -0.243929E-01  -6.26978       6.26978       1597.26       1603.53    
  18  0.131665      -2.02750      -521.134       521.134       1718.33       2239.46    
  19  0.751313     -0.285933      -73.4943       73.4943       1539.50       1612.99    
  20  0.775324     -0.254475      -65.4083       65.4083       1744.49       1809.90    
  21  0.237000      -1.43969      -370.049       370.049       1456.43       1826.48    
  22  0.113641      -2.17471      -558.971       558.971       1783.37       2342.34    
  23  0.762281     -0.271440      -69.7690       69.7690       1781.59       1851.36    
  24  0.783730     -0.243690      -62.6364       62.6364       1766.20       1828.83    
  25  0.492891     -0.707468      -181.843       181.843       1703.70       1885.55    
  26  0.471904     -0.750980      -193.027       193.027       1590.44       1783.46    
  27  0.855781     -0.155740      -40.0304       40.0304       1743.72       1783.75    
  28  0.636473     -0.451814      -116.131       116.131       1552.58       1668.71    
  29  0.433340     -0.836232      -214.939       214.939       1807.25       2022.18    
  30  0.482236     -0.729321      -187.459       187.459       1449.54       1637.00    
  31  0.855143E-01  -2.45907      -632.063       632.063       1805.63       2437.69    
  32  0.916579     -0.871071E-01  -22.3894       22.3894       1822.10       1844.49    
  33  0.232519      -1.45878      -374.955       374.955       1883.66       2258.62    
  34  0.283977      -1.25886      -323.569       323.569       1778.10       2101.67    
  35  0.401228E-01  -3.21581      -826.570       826.570       1871.71       2698.28    
  36  0.235231      -1.44719      -371.975       371.975       1425.50       1797.48    
  37  0.233426      -1.45489      -373.954       373.954       1843.55       2217.51    
  38  0.903594     -0.101376      -26.0569       26.0569       1761.85       1787.90    
  39  0.857571     -0.153651      -39.4933       39.4933       1569.48       1608.97    
  40  0.444085     -0.811739      -208.644       208.644       1863.70       2072.35    
  41  0.151055      -1.89011      -485.821       485.821       1713.55       2199.37    
  42  0.745694     -0.293440      -75.4237       75.4237       1838.47       1913.90    
  43  0.470647E-01  -3.05623      -785.552       785.552       1770.52       2556.08    
  44  0.344459      -1.06578      -273.941       273.941       1814.86       2088.80    
  45  0.592738     -0.523004      -134.429       134.429       1789.28       1923.71    
  46  0.754292     -0.281975      -72.4769       72.4769       2074.74       2147.22    
  47  0.162950      -1.81431      -466.338       466.338       1504.39       1970.73    
  48  0.939100     -0.628333E-01  -16.1502       16.1502       1632.99       1649.14    
  49  0.966845     -0.337175E-01  -8.66651       8.66651       1708.53       1717.20    
  50  0.287323      -1.24715      -320.558       320.558       1721.08       2041.64    
  51  0.835081     -0.180227      -46.3242       46.3242       1717.77       1764.09    
  52  0.836052     -0.179064      -46.0253       46.0253       1859.36       1905.39    
  53  0.382321     -0.961495      -247.136       247.136       1848.90       2096.03    
  54  0.873869     -0.134824      -34.6543       34.6543       1844.95       1879.60    
  55  0.169635      -1.77411      -456.004       456.004       1763.11       2219.12    
  56  0.511680     -0.670055      -172.226       172.226       2214.87       2387.10    
  57  0.687848     -0.374188      -96.1785       96.1785       1802.34       1898.52    
  58  0.659885     -0.415689      -106.846       106.846       1989.46       2096.31    
  59  0.615967     -0.484562      -124.548       124.548       1745.28       1869.83    
  60  0.600029     -0.510778      -131.287       131.287       2513.47       2644.76    
  61  0.166513      -1.79268      -460.778       460.778       1739.04       2199.82    
  62  0.730640     -0.313835      -80.6660       80.6660       1624.05       1704.71    
  63  0.168194      -1.78264      -458.197       458.197       1747.80       2205.99    
  64  0.562652E-01  -2.87768      -739.658       739.658       1561.64       2301.30    
loop,thermsimp(1:2)       52   107.569       245.080    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       1441.50         68.77          1.16         40.67          0.47          0.05        111.12
Just calling func    0   0        111.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146       2072.58         68.74          1.14         40.73          0.09          0.05        110.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1441.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       52
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       53
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      145     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -139.239       139.239       1405.15       1544.39    
   2  0.307993      -1.17768      -302.702       302.702       1548.55       1851.26    
   3  0.551684     -0.594779      -152.878       152.878       1597.26       1750.14    
   4  0.969976     -0.304835E-01  -7.83527       7.83527       1569.48       1577.31    
   5  0.401714     -0.912015      -234.418       234.418       1584.73       1819.15    
   6  0.336211      -1.09002      -280.170       280.170       1539.50       1819.67    
   7  0.649191     -0.432028      -111.045       111.045       1500.10       1611.14    
   8  0.426986     -0.851005      -218.736       218.736       1449.54       1668.27    
   9  0.479997     -0.733976      -188.656       188.656       1632.99       1821.65    
  10  0.441527     -0.817516      -210.129       210.129       1552.58       1762.71    
  11  0.218988      -1.51874      -390.366       390.366       1618.35       2008.71    
  12  0.935549     -0.666221E-01  -17.1241       17.1241       1674.94       1692.07    
  13  0.159996      -1.83261      -471.041       471.041       1624.05       2095.09    
  14  0.486870     -0.719759      -185.002       185.002       1558.02       1743.02    
  15  0.835520     -0.179701      -46.1890       46.1890       1469.94       1516.13    
  16  0.643759     -0.440431      -113.205       113.205       1708.53       1821.73    
  17  0.177188      -1.73054      -444.807       444.807       1535.02       1979.82    
  18  0.408356     -0.895617      -230.203       230.203       1491.51       1721.71    
  19  0.463768     -0.768371      -197.497       197.497       1717.77       1915.27    
  20  0.616820     -0.483178      -124.193       124.193       1590.44       1714.63    
  21  0.377083     -0.975289      -250.681       250.681       1743.72       1994.40    
  22  0.278016      -1.28008      -329.022       329.022       1761.85       2090.87    
  23  0.746435     -0.292446      -75.1683       75.1683       1425.50       1500.67    
  24  0.872234     -0.136697      -35.1357       35.1357       1518.51       1553.65    
  25  0.887073E-01  -2.42241      -622.640       622.640       1744.49       2367.13    
  26  0.124913      -2.08014      -534.664       534.664       1456.43       1991.10    
  27  0.918160     -0.853835E-01  -21.9464       21.9464       1766.20       1788.14    
  28  0.924603     -0.783912E-01  -20.1491       20.1491       1576.52       1596.67    
  29  0.863214     -0.147092      -37.8076       37.8076       1822.10       1859.91    
  30  0.823499E-02  -4.79936      -1233.59       1233.59       1781.59       3015.19    
  31  0.548113     -0.601275      -154.547       154.547       1745.28       1899.82    
  32  0.800553     -0.222452      -57.1775       57.1775       1844.95       1902.12    
  33  0.180829      -1.71020      -439.578       439.578       1703.70       2143.28    
  34  0.968975E-01  -2.33410      -599.941       599.941       1802.34       2402.28    
  35  0.749847     -0.287886      -73.9963       73.9963       1859.36       1933.36    
  36  0.902028     -0.103110      -26.5026       26.5026       1838.47       1864.98    
  37  0.312083      -1.16449      -299.311       299.311       1789.28       2088.59    
  38  0.472691     -0.749313      -192.598       192.598       1504.39       1696.99    
  39  0.970346     -0.301026E-01  -7.73735       7.73735       1807.25       1814.98    
  40  0.485853     -0.721850      -185.539       185.539       1721.08       1906.62    
  41  0.604658     -0.503092      -129.311       129.311       1716.14       1845.45    
  42  0.172238      -1.75888      -452.090       452.090       1863.70       2315.79    
  43  0.359079E-01  -3.32680      -855.097       855.097       1814.86       2669.95    
  44  0.464923     -0.765884      -196.857       196.857       1848.90       2045.75    
  45  0.293512      -1.22584      -315.080       315.080       1989.46       2304.54    
  46  0.572788     -0.557239      -143.229       143.229       1778.10       1921.33    
  47  0.931713     -0.707300E-01  -18.1799       18.1799       2074.74       2092.92    
  48  0.983012     -0.171340E-01  -4.40401       4.40401       1713.55       1717.96    
  49  0.572194     -0.558278      -143.496       143.496       1739.04       1882.53    
  50  0.272189      -1.30126      -334.466       334.466       1747.80       2082.26    
  51  0.521081     -0.651849      -167.547       167.547       1843.55       2011.10    
  52  0.560075     -0.579685      -148.998       148.998       1763.11       1912.11    
  53  0.442251     -0.815877      -209.707       209.707       1649.67       1859.38    
  54  0.541873     -0.612723      -157.490       157.490       1718.33       1875.82    
  55  0.619019     -0.479619      -123.278       123.278       1883.66       2006.94    
  56  0.554460     -0.589760      -151.588       151.588       1649.82       1801.41    
  57  0.942853     -0.588454E-01  -15.1252       15.1252       1561.64       1576.77    
  58  0.289656E-01  -3.54165      -910.320       910.320       1508.93       2419.25    
  59  0.420166     -0.867105      -222.874       222.874       1783.37       2006.24    
  60  0.304886      -1.18782      -305.308       305.308       2214.87       2520.18    
  61  0.799970     -0.223182      -57.3650       57.3650       1805.63       1862.99    
  62  0.330194      -1.10808      -284.812       284.812       1770.52       2055.34    
  63  0.193095      -1.64457      -422.709       422.709       2513.47       2936.18    
  64  0.151812      -1.88511      -484.536       484.536       1441.50       1926.04    
loop,thermsimp(1:2)       53   139.239       302.702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       1826.29         68.85          1.15         40.70          0.34          0.05        111.09
Just calling func    0   0        111.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1826.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       53
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       54
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      146     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -146.308       146.308       1425.50       1571.81    
   2  0.698829     -0.358349      -92.1075       92.1075       1469.94       1562.05    
   3  0.550231     -0.597418      -153.556       153.556       1405.15       1558.71    
   4  0.844966     -0.168459      -43.2994       43.2994       1518.51       1561.81    
   5  0.139804      -1.96751      -505.715       505.715       1561.64       2067.36    
   6  0.119451      -2.12485      -546.156       546.156       1569.48       2115.63    
   7  0.474112     -0.746312      -191.827       191.827       1576.52       1768.35    
   8  0.293024      -1.22750      -315.508       315.508       1500.10       1815.60    
   9  0.760137     -0.274256      -70.4928       70.4928       1449.54       1520.03    
  10  0.216376      -1.53074      -393.450       393.450       1674.94       2068.39    
  11  0.837069     -0.177849      -45.7130       45.7130       1504.39       1550.11    
  12  0.969258     -0.312245E-01  -8.02574       8.02574       1590.44       1598.46    
  13  0.335918      -1.09089      -280.394       280.394       1713.55       1993.95    
  14  0.966643     -0.339265E-01  -8.72023       8.72023       1491.51       1500.23    
  15  0.723887     -0.323119      -83.0523       83.0523       1558.02       1641.07    
  16  0.459929E-01  -3.07927      -791.473       791.473       1597.26       2388.74    
  17  0.536724     -0.622271      -159.944       159.944       1552.58       1712.52    
  18  0.432574     -0.838001      -215.394       215.394       1766.20       1981.59    
  19  0.160308      -1.83066      -470.539       470.539       1649.82       2120.36    
  20  0.885158     -0.121989      -31.3552       31.3552       1807.25       1838.60    
  21  0.753783     -0.282650      -72.6505       72.6505       1584.73       1657.38    
  22  0.135562      -1.99832      -513.635       513.635       1539.50       2053.13    
  23  0.817964     -0.200937      -51.6474       51.6474       1632.99       1684.64    
  24  0.286617      -1.24961      -321.191       321.191       1708.53       2029.72    
  25  0.319126      -1.14217      -293.575       293.575       1716.14       2009.71    
  26  0.104479E-01  -4.56135      -1172.42       1172.42       1548.55       2720.97    
  27  0.671407     -0.398379      -102.397       102.397       1649.67       1752.07    
  28  0.782955     -0.244680      -62.8909       62.8909       1822.10       1884.99    
  29  0.186689      -1.67831      -431.382       431.382       1805.63       2237.01    
  30  0.462519     -0.771067      -198.190       198.190       1838.47       2036.66    
  31  0.203171      -1.59371      -409.635       409.635       1718.33       2127.96    
  32  0.851762E-01  -2.46303      -633.081       633.081       1739.04       2372.12    
  33  0.702824     -0.352649      -90.6423       90.6423       1745.28       1835.92    
  34  0.747923     -0.290456      -74.6567       74.6567       1844.95       1919.60    
  35  0.224450      -1.49410      -384.034       384.034       1721.08       2105.12    
  36  0.243563E-02  -6.01755      -1546.71       1546.71       1763.11       3309.82    
  37  0.160790      -1.82766      -469.768       469.768       1717.77       2187.54    
  38  0.880431     -0.127343      -32.7314       32.7314       1778.10       1810.83    
  39  0.507306     -0.678640      -174.433       174.433       1441.50       1615.94    
  40  0.266019      -1.32419      -340.360       340.360       1859.36       2199.72    
  41  0.310751      -1.16876      -300.411       300.411       1535.02       1835.43    
  42  0.945006     -0.565640E-01  -14.5388       14.5388       1456.43       1470.97    
  43  0.265699E-01  -3.62797      -932.509       932.509       1743.72       2676.23    
  44  0.652842     -0.426420      -109.604       109.604       1783.37       1892.97    
  45  0.799409     -0.223882      -57.5451       57.5451       1883.66       1941.21    
  46  0.543529     -0.609672      -156.706       156.706       1618.35       1775.05    
  47  0.361947      -1.01626      -261.212       261.212       1843.55       2104.77    
  48  0.398721     -0.919492      -236.340       236.340       1848.90       2085.24    
  49  0.349489      -1.05128      -270.214       270.214       1770.52       2040.74    
  50  0.948739     -0.526212E-01  -13.5254       13.5254       1747.80       1761.32    
  51  0.346176      -1.06081      -272.663       272.663       1789.28       2061.94    
  52  0.678244     -0.388248      -99.7925       99.7925       1761.85       1861.64    
  53  0.858518     -0.152547      -39.2097       39.2097       2074.74       2113.95    
  54  0.835860E-01  -2.48188      -637.925       637.925       1624.05       2261.97    
  55  0.762568     -0.271063      -69.6722       69.6722       1703.70       1773.38    
  56  0.273927      -1.29489      -332.830       332.830       1989.46       2322.29    
  57  0.729557     -0.315318      -81.0472       81.0472       1863.70       1944.75    
  58  0.320381      -1.13825      -292.567       292.567       1744.49       2037.06    
  59  0.818134     -0.200729      -51.5939       51.5939       1802.34       1853.94    
  60  0.639548     -0.446993      -114.892       114.892       1508.93       1623.83    
  61  0.976107     -0.241828E-01  -6.21577       6.21577       2214.87       2221.09    
  62  0.232128      -1.46046      -375.388       375.388       1814.86       2190.24    
  63  0.215412      -1.53520      -394.598       394.598       2513.47       2908.07    
  64  0.770868     -0.260238      -66.8898       66.8898       1826.29       1893.18    
loop,thermsimp(1:2)       54   146.308       92.1075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148       1730.88         68.79          1.15         40.58          0.50          0.05        111.08
Just calling func    0   0        111.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1730.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       54
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       55
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      147     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -421.032       421.032       1456.43       1877.46    
   2  0.875287     -0.133204      -34.2377       34.2377       1491.51       1525.74    
   3  0.103612      -2.26710      -582.719       582.719       1449.54       2032.26    
   4  0.159072      -1.83840      -472.529       472.529       1504.39       1976.92    
   5  0.118738      -2.13084      -547.695       547.695       1405.15       1952.84    
   6  0.294105      -1.22382      -314.561       314.561       1518.51       1833.08    
   7  0.967643     -0.328919E-01  -8.45431       8.45431       1469.94       1478.40    
   8  0.675183     -0.392772      -100.955       100.955       1425.50       1526.46    
   9  0.170112      -1.77130      -455.282       455.282       1590.44       2045.72    
  10  0.990992     -0.904902E-02  -2.32590       2.32590       1441.50       1443.83    
  11  0.198513      -1.61690      -415.597       415.597       1508.93       1924.53    
  12  0.404817E-01  -3.20690      -824.280       824.280       1558.02       2382.30    
  13  0.834933E-01  -2.48299      -638.210       638.210       1584.73       2222.94    
  14  0.458935     -0.778848      -200.189       200.189       1632.99       1833.18    
  15  0.929311     -0.733118E-01  -18.8436       18.8436       1552.58       1571.42    
  16  0.593071     -0.522440      -134.284       134.284       1649.67       1783.96    
  17  0.963359E-01  -2.33991      -601.435       601.435       1747.80       2349.23    
  18  0.383119E-01  -3.26200      -838.440       838.440       1576.52       2414.96    
  19  0.841843     -0.172161      -44.2511       44.2511       1703.70       1747.95    
  20  0.874261     -0.134376      -34.5392       34.5392       1618.35       1652.89    
  21  0.706443     -0.347513      -89.3223       89.3223       1778.10       1867.42    
  22  0.423649E-01  -3.16143      -812.593       812.593       1500.10       2312.69    
  23  0.904835     -0.100003      -25.7040       25.7040       1535.02       1560.72    
  24  0.728800     -0.316356      -81.3139       81.3139       1745.28       1826.59    
  25  0.764304     -0.268790      -69.0879       69.0879       1807.25       1876.33    
  26  0.578519     -0.547284      -140.670       140.670       1802.34       1943.01    
  27  0.321737      -1.13402      -291.481       291.481       1761.85       2053.33    
  28  0.592944     -0.522656      -134.340       134.340       1822.10       1956.44    
  29  0.159596      -1.83511      -471.684       471.684       1783.37       2255.05    
  30  0.797332     -0.226484      -58.2138       58.2138       1826.29       1884.50    
  31  0.263979      -1.33189      -342.339       342.339       1844.95       2187.29    
  32  0.449355     -0.799942      -205.612       205.612       1883.66       2089.28    
  33  0.859901     -0.150938      -38.7960       38.7960       1863.70       1902.50    
  34  0.730093     -0.314584      -80.8584       80.8584       1766.20       1847.06    
  35  0.484666     -0.724295      -186.168       186.168       1713.55       1899.72    
  36  0.180217      -1.71359      -440.450       440.450       1716.14       2156.59    
  37  0.857397     -0.153854      -39.5456       39.5456       1708.53       1748.07    
  38  0.502370     -0.688418      -176.946       176.946       1838.47       2015.42    
  39  0.245408      -1.40484      -361.089       361.089       1744.49       2105.58    
  40  0.134540      -2.00590      -515.581       515.581       1770.52       2286.10    
  41  0.468137     -0.758995      -195.087       195.087       1539.50       1734.59    
  42  0.864548E-01  -2.44813      -629.251       629.251       1789.28       2418.53    
  43  0.178791      -1.72154      -442.492       442.492       1561.64       2004.13    
  44  0.690351     -0.370555      -95.2448       95.2448       1674.94       1770.19    
  45  0.731648     -0.312455      -80.3113       80.3113       1848.90       1929.21    
  46  0.857623     -0.153591      -39.4779       39.4779       1843.55       1883.03    
  47  0.754956     -0.281095      -72.2508       72.2508       1721.08       1793.33    
  48  0.355557      -1.03407      -265.790       265.790       2074.74       2340.53    
  49  0.200964      -1.60463      -412.443       412.443       1569.48       1981.92    
  50  0.243499      -1.41264      -363.096       363.096       1649.82       2012.92    
  51  0.796288     -0.227794      -58.5507       58.5507       1718.33       1776.88    
  52  0.256937      -1.35892      -349.288       349.288       1717.77       2067.06    
  53  0.591760     -0.524655      -134.854       134.854       1814.86       1949.71    
  54  0.799227     -0.224110      -57.6036       57.6036       1859.36       1916.97    
  55  0.115295E-01  -4.46285      -1147.10       1147.10       2214.87       3361.97    
  56  0.559205     -0.581239      -149.398       149.398       1805.63       1955.02    
  57  0.742198     -0.298139      -76.6316       76.6316       1624.05       1700.68    
  58  0.543157     -0.610356      -156.882       156.882       1989.46       2146.35    
  59  0.100933      -2.29330      -589.453       589.453       1739.04       2328.49    
  60  0.201228      -1.60332      -412.105       412.105       1597.26       2009.37    
  61  0.602159E-01  -2.80982      -722.216       722.216       1743.72       2465.94    
  62  0.107777      -2.22769      -572.591       572.591       1548.55       2121.15    
  63  0.131787E-01  -4.32915      -1112.74       1112.74       2513.47       3626.21    
  64  0.756826     -0.278622      -71.6150       71.6150       1730.88       1802.50    
loop,thermsimp(1:2)       55   421.032       34.2377    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149       1977.89         68.87          1.17         40.65          0.31          0.05        111.05
Just calling func    0   0        111.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1977.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       55
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       56
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      148     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -502.983       502.983       1441.50       1944.49    
   2  0.197548      -1.62177      -416.850       416.850       1469.94       1886.79    
   3  0.774000     -0.256183      -65.8475       65.8475       1491.51       1557.35    
   4  0.170284      -1.77029      -455.023       455.023       1425.50       1880.53    
   5  0.250636      -1.38376      -355.671       355.671       1535.02       1890.69    
   6  0.907951     -0.965652E-01  -24.8204       24.8204       1552.58       1577.40    
   7  0.611678     -0.491549      -126.344       126.344       1618.35       1744.69    
   8  0.735945E-02  -4.91177      -1262.49       1262.49       1624.05       2886.53    
   9  0.309131      -1.17399      -301.754       301.754       1539.50       1841.25    
  10  0.577854     -0.548434      -140.965       140.965       1703.70       1844.67    
  11  0.931529     -0.709274E-01  -18.2307       18.2307       1708.53       1726.76    
  12  0.665703     -0.406912      -104.590       104.590       1674.94       1779.53    
  13  0.585695     -0.534955      -137.501       137.501       1718.33       1855.83    
  14  0.295001      -1.22078      -313.780       313.780       1649.67       1963.45    
  15  0.317712E-01  -3.44920      -886.557       886.557       1721.08       2607.64    
  16  0.222963      -1.50075      -385.742       385.742       1730.88       2116.62    
  17  0.325931      -1.12107      -288.152       288.152       1745.28       2033.43    
  18  0.785098     -0.241947      -62.1883       62.1883       1518.51       1580.70    
  19  0.550467     -0.596988      -153.446       153.446       1632.99       1786.43    
  20  0.780222     -0.248176      -63.7895       63.7895       1766.20       1829.99    
  21  0.130712      -2.03476      -523.000       523.000       1778.10       2301.10    
  22  0.873397     -0.135365      -34.7932       34.7932       1807.25       1842.04    
  23  0.366975      -1.00246      -257.666       257.666       1456.43       1714.10    
  24  0.813244     -0.206724      -53.1349       53.1349       1843.55       1896.69    
  25  0.782660E-01  -2.54764      -654.828       654.828       1826.29       2481.12    
  26  0.700327     -0.356208      -91.5572       91.5572       1713.55       1805.11    
  27  0.437766     -0.826071      -212.327       212.327       1863.70       2076.03    
  28  0.508966E-01  -2.97796      -765.433       765.433       1859.36       2624.80    
  29  0.276850      -1.28428      -330.102       330.102       1508.93       1839.04    
  30  0.792031     -0.233154      -59.9283       59.9283       1848.90       1908.83    
  31  0.174747      -1.74441      -448.372       448.372       1802.34       2250.71    
  32  0.469718     -0.755623      -194.220       194.220       1814.86       2009.08    
  33  0.252316      -1.37707      -353.953       353.953       1405.15       1759.10    
  34  0.980061     -0.201409E-01  -5.17686       5.17686       1805.63       1810.80    
  35  0.838300     -0.176379      -45.3353       45.3353       1822.10       1867.44    
  36  0.369385     -0.995915      -255.983       255.983       1504.39       1760.38    
  37  0.923139     -0.799751E-01  -20.5562       20.5562       1569.48       1590.03    
  38  0.592446     -0.523496      -134.556       134.556       1561.64       1696.20    
  39  0.348787      -1.05329      -270.731       270.731       1597.26       1868.00    
  40  0.569584     -0.562850      -144.671       144.671       1649.82       1794.49    
  41  0.543034E-01  -2.91317      -748.780       748.780       1838.47       2587.25    
  42  0.582662     -0.540148      -138.836       138.836       1449.54       1588.37    
  43  0.702825     -0.352648      -90.6421       90.6421       1590.44       1681.08    
  44  0.941375     -0.604140E-01  -15.5284       15.5284       1761.85       1777.37    
  45  0.258857      -1.35148      -347.375       347.375       1717.77       2065.15    
  46  0.116535      -2.14956      -552.508       552.508       1883.66       2436.17    
  47  0.102671      -2.27622      -585.064       585.064       1744.49       2329.55    
  48  0.172023      -1.76013      -452.410       452.410       1548.55       2000.96    
  49  0.434982E-01  -3.13504      -805.808       805.808       1989.46       2795.27    
  50  0.852122     -0.160026      -41.1320       41.1320       1716.14       1757.27    
  51  0.583521     -0.538675      -138.457       138.457       1844.95       1983.40    
  52  0.843374     -0.170345      -43.7842       43.7842       1584.73       1628.52    
  53  0.194743      -1.63607      -420.525       420.525       1783.37       2203.89    
  54  0.191808      -1.65126      -424.428       424.428       1770.52       2194.95    
  55  0.656555     -0.420749      -108.146       108.146       1500.10       1608.24    
  56  0.468384E-01  -3.06105      -786.791       786.791       1739.04       2525.83    
  57  0.812217     -0.207988      -53.4597       53.4597       2074.74       2128.20    
  58  0.852265     -0.159858      -41.0886       41.0886       1747.80       1788.89    
  59  0.340213      -1.07818      -277.128       277.128       1558.02       1835.15    
  60  0.655911     -0.421730      -108.398       108.398       1576.52       1684.92    
  61  0.329724      -1.10950      -285.178       285.178       1789.28       2074.46    
  62  0.362242      -1.01544      -261.002       261.002       1743.72       2004.72    
  63  0.273539      -1.29631      -333.195       333.195       2214.87       2548.07    
  64  0.524351     -0.645594      -165.939       165.939       1977.89       2143.83    
loop,thermsimp(1:2)       56   502.983       416.850    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150       1537.79         68.80          1.16         40.98          0.10          0.05        111.09
Just calling func    0   0        111.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151       2005.49         68.86          1.17         40.73          0.14          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1537.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       56
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       57
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      150     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -105.919       105.919       1491.51       1597.43    
   2  0.724212     -0.322671      -82.9371       82.9371       1552.58       1635.51    
   3  0.633711     -0.456163      -117.249       117.249       1518.51       1635.76    
   4  0.448566     -0.801700      -206.063       206.063       1449.54       1655.60    
   5  0.964228     -0.364273E-01  -9.36302       9.36302       1569.48       1578.84    
   6  0.714306     -0.336444      -86.4773       86.4773       1500.10       1586.57    
   7  0.528330     -0.638035      -163.996       163.996       1584.73       1748.73    
   8  0.654127     -0.424453      -109.098       109.098       1590.44       1699.53    
   9  0.368899     -0.997232      -256.321       256.321       1576.52       1832.84    
  10  0.227697      -1.47974      -380.342       380.342       1561.64       1941.98    
  11  0.612266     -0.490588      -126.097       126.097       1456.43       1582.53    
  12  0.313777      -1.15907      -297.920       297.920       1708.53       2006.45    
  13  0.258526      -1.35276      -347.704       347.704       1618.35       1966.05    
  14  0.119298      -2.12613      -546.486       546.486       1716.14       2262.62    
  15  0.213331      -1.54491      -397.092       397.092       1405.15       1802.24    
  16  0.294218      -1.22343      -314.463       314.463       1504.39       1818.86    
  17  0.352988      -1.04132      -267.654       267.654       1761.85       2029.50    
  18  0.348706      -1.05353      -270.791       270.791       1674.94       1945.73    
  19  0.449249     -0.800179      -205.672       205.672       1632.99       1838.66    
  20  0.879121     -0.128833      -33.1143       33.1143       1747.80       1780.91    
  21  0.464081     -0.767695      -197.323       197.323       1649.82       1847.15    
  22  0.497582     -0.697995      -179.408       179.408       1713.55       1892.96    
  23  0.920207     -0.831566E-01  -21.3740       21.3740       1805.63       1827.00    
  24  0.811773     -0.208535      -53.6004       53.6004       1766.20       1819.80    
  25  0.190651      -1.65731      -425.983       425.983       1558.02       1984.00    
  26  0.645174     -0.438235      -112.641       112.641       1508.93       1621.57    
  27  0.668343     -0.402954      -103.573       103.573       1539.50       1643.07    
  28  0.765111     -0.267735      -68.8167       68.8167       1807.25       1876.06    
  29  0.991779     -0.825499E-02  -2.12180       2.12180       1703.70       1705.83    
  30  0.136888      -1.98859      -511.134       511.134       1718.33       2229.46    
  31  0.645145E-01  -2.74086      -704.493       704.493       1822.10       2526.59    
  32  0.408515E-01  -3.19781      -821.943       821.943       1597.26       2419.21    
  33  0.264109      -1.33140      -342.212       342.212       1425.50       1767.72    
  34  0.382737     -0.960407      -246.856       246.856       1469.94       1716.80    
  35  0.402738E-02  -5.51464      -1417.44       1417.44       1535.02       2952.46    
  36  0.318074      -1.14547      -294.424       294.424       1843.55       2137.98    
  37  0.245237      -1.40553      -361.268       361.268       1848.90       2210.16    
  38  0.519766     -0.654377      -168.196       168.196       1441.50       1609.70    
  39  0.255147      -1.36592      -351.086       351.086       1649.67       2000.76    
  40  0.833841     -0.181712      -46.7060       46.7060       1844.95       1891.65    
  41  0.696242E-01  -2.66464      -684.901       684.901       1548.55       2233.46    
  42  0.487295     -0.718886      -184.777       184.777       1743.72       1928.50    
  43  0.276229E-01  -3.58911      -922.520       922.520       1814.86       2737.38    
  44  0.638327     -0.448905      -115.383       115.383       1745.28       1860.66    
  45  0.206684      -1.57657      -405.229       405.229       1717.77       2123.00    
  46  0.736003     -0.306521      -78.7861       78.7861       1789.28       1868.07    
  47  0.217444E-01  -3.82840      -984.024       984.024       1863.70       2847.73    
  48  0.956929     -0.440260E-01  -11.3161       11.3161       1730.88       1742.20    
  49  0.883561     -0.123795      -31.8193       31.8193       2074.74       2106.56    
  50  0.700901     -0.355388      -91.3465       91.3465       1977.89       2069.24    
  51  0.201997      -1.59950      -411.124       411.124       1770.52       2181.65    
  52  0.412152     -0.886362      -227.824       227.824       1783.37       2011.19    
  53  0.890450     -0.116029      -29.8232       29.8232       1802.34       1832.16    
  54  0.417423     -0.873654      -224.558       224.558       1778.10       2002.66    
  55  0.426501     -0.852140      -219.028       219.028       1744.49       1963.52    
  56  0.983871     -0.162605E-01  -4.17948       4.17948       1883.66       1887.84    
  57  0.384350     -0.956201      -245.775       245.775       1826.29       2072.06    
  58  0.155937      -1.85830      -477.645       477.645       1739.04       2216.68    
  59  0.361264      -1.01815      -261.697       261.697       2214.87       2476.57    
  60  0.538177     -0.619568      -159.249       159.249       1838.47       1997.72    
  61  0.514362E-01  -2.96741      -762.723       762.723       1721.08       2483.81    
  62  0.994100     -0.591759E-02  -1.52102       1.52102       1859.36       1860.89    
  63  0.622557     -0.473920      -121.813       121.813       1989.46       2111.28    
  64  0.703606     -0.351537      -90.3567       90.3567       1537.79       1628.15    
loop,thermsimp(1:2)       57   105.919       82.9371    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       7340.48         68.77          1.15         40.75          0.35          0.04        111.06
Just calling func    0   0        111.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153       2417.99         68.82          1.14         40.55          0.39          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2417.99
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       57
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       58
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      152     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -729.706       729.706       1569.48       2299.18    
   2  0.104884      -2.25490      -579.585       579.585       1456.43       2036.02    
   3  0.784254     -0.243023      -62.4648       62.4648       1500.10       1562.56    
   4  0.813133     -0.206861      -53.1701       53.1701       1491.51       1544.68    
   5  0.490778     -0.711764      -182.947       182.947       1441.50       1624.45    
   6  0.168573      -1.78039      -457.618       457.618       1508.93       1966.55    
   7  0.450161     -0.798149      -205.151       205.151       1537.79       1742.94    
   8  0.828233     -0.188461      -48.4406       48.4406       1552.58       1601.02    
   9  0.994731     -0.528342E-02  -1.35801       1.35801       1518.51       1519.87    
  10  0.813340     -0.206606      -53.1046       53.1046       1539.50       1592.60    
  11  0.776133     -0.253432      -65.1403       65.1403       1449.54       1514.68    
  12  0.729556     -0.315319      -81.0473       81.0473       1590.44       1671.48    
  13  0.530451     -0.634028      -162.966       162.966       1703.70       1866.67    
  14  0.752564E-01  -2.58685      -664.907       664.907       1469.94       2134.85    
  15  0.918457     -0.850597E-01  -21.8632       21.8632       1730.88       1752.74    
  16  0.162642      -1.81621      -466.825       466.825       1584.73       2051.56    
  17  0.725851     -0.320411      -82.3561       82.3561       1425.50       1507.86    
  18  0.322292      -1.13230      -291.038       291.038       1747.80       2038.84    
  19  0.838064     -0.176661      -45.4077       45.4077       1405.15       1450.56    
  20  0.346062E-01  -3.36372      -864.587       864.587       1504.39       2368.98    
  21  0.442915     -0.814377      -209.322       209.322       1766.20       1975.52    
  22  0.143708      -1.93997      -498.637       498.637       1805.63       2304.26    
  23  0.940845     -0.609769E-01  -15.6731       15.6731       1802.34       1818.01    
  24  0.972503     -0.278816E-01  -7.16650       7.16650       1576.52       1583.69    
  25  0.291831      -1.23158      -316.557       316.557       1632.99       1949.55    
  26  0.211976      -1.55128      -398.731       398.731       1649.82       2048.55    
  27  0.695427     -0.363229      -93.3619       93.3619       1745.28       1838.64    
  28  0.982540E-01  -2.32020      -596.368       596.368       1859.36       2455.73    
  29  0.730742     -0.313695      -80.6299       80.6299       1789.28       1869.91    
  30  0.417794     -0.872766      -224.330       224.330       1807.25       2031.57    
  31  0.868385     -0.141121      -36.2726       36.2726       1883.66       1919.94    
  32  0.300897      -1.20099      -308.693       308.693       1844.95       2153.64    
  33  0.917219     -0.864093E-01  -22.2100       22.2100       1713.55       1735.76    
  34  0.304394      -1.18943      -305.723       305.723       1743.72       2049.44    
  35  0.856500     -0.154901      -39.8148       39.8148       1561.64       1601.46    
  36  0.310652      -1.16908      -300.492       300.492       1674.94       1975.43    
  37  0.846275     -0.166911      -42.9017       42.9017       1744.49       1787.39    
  38  0.206825      -1.57588      -405.054       405.054       1618.35       2023.40    
  39  0.606376     -0.500256      -128.582       128.582       1558.02       1686.60    
  40  0.840015     -0.174336      -44.8100       44.8100       1838.47       1883.28    
  41  0.348835      -1.05315      -270.695       270.695       1649.67       1920.37    
  42  0.857325     -0.153939      -39.5673       39.5673       1778.10       1817.67    
  43  0.308035E-01  -3.48013      -894.507       894.507       1708.53       2603.04    
  44  0.400632     -0.914711      -235.111       235.111       1783.37       2018.48    
  45  0.242237      -1.41784      -364.431       364.431       1761.85       2126.28    
  46  0.407771     -0.897050      -230.572       230.572       1977.89       2208.46    
  47  0.430691     -0.842364      -216.515       216.515       1826.29       2042.80    
  48  0.415503     -0.878266      -225.743       225.743       2074.74       2300.48    
  49  0.593575     -0.521591      -134.066       134.066       1989.46       2123.53    
  50  0.973620     -0.267342E-01  -6.87156       6.87156       1717.77       1724.64    
  51  0.510257     -0.672840      -172.942       172.942       1843.55       2016.50    
  52  0.796475     -0.227560      -58.4903       58.4903       1770.52       1829.01    
  53  0.213576      -1.54376      -396.798       396.798       1848.90       2245.69    
  54  0.865534     -0.144409      -37.1178       37.1178       1739.04       1776.16    
  55  0.920053     -0.833240E-01  -21.4170       21.4170       1718.33       1739.74    
  56  0.534624     -0.626192      -160.952       160.952       1548.55       1709.51    
  57  0.963687     -0.369888E-01  -9.50733       9.50733       1716.14       1725.64    
  58  0.498139     -0.696877      -179.120       179.120       1597.26       1776.38    
  59  0.987058     -0.130264E-01  -3.34822       3.34822       2214.87       2218.22    
  60  0.488276E-01  -3.01946      -776.101       776.101       1721.08       2497.18    
  61  0.597381E-01  -2.81779      -724.264       724.264       1822.10       2546.36    
  62  0.589016     -0.529301      -136.048       136.048       1814.86       1950.90    
  63  0.680503     -0.384923      -98.9380       98.9380       1863.70       1962.64    
  64  0.793494     -0.231310      -59.4543       59.4543       2417.99       2477.44    
loop,thermsimp(1:2)       58   729.706       579.585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       1453.78         68.80          1.13         40.59          0.53          0.05        111.11
Just calling func    0   0        111.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155       1512.49         68.73          1.15         40.82          0.07          0.05        110.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1453.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       58
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       59
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      154     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -284.938       284.938       1405.15       1690.09    
   2  0.939148     -0.627826E-01  -16.1372       16.1372       1425.50       1441.64    
   3  0.130906      -2.03328      -522.619       522.619       1449.54       1972.16    
   4  0.664370     -0.408916      -105.105       105.105       1518.51       1623.62    
   5  0.490908     -0.711498      -182.879       182.879       1491.51       1674.39    
   6  0.711731     -0.340055      -87.4053       87.4053       1500.10       1587.50    
   7  0.676080     -0.391444      -100.614       100.614       1576.52       1677.13    
   8  0.611139     -0.492432      -126.571       126.571       1539.50       1666.07    
   9  0.614246     -0.487359      -125.267       125.267       1552.58       1677.84    
  10  0.988045     -0.120275E-01  -3.09147       3.09147       1561.64       1564.73    
  11  0.232883      -1.45722      -374.553       374.553       1441.50       1816.06    
  12  0.450825     -0.796675      -204.772       204.772       1590.44       1795.21    
  13  0.493319     -0.706599      -181.619       181.619       1558.02       1739.64    
  14  0.191184      -1.65452      -425.266       425.266       1548.55       1973.82    
  15  0.894136     -0.111897      -28.7613       28.7613       1717.77       1746.53    
  16  0.391751     -0.937128      -240.873       240.873       1716.14       1957.01    
  17  0.236278      -1.44275      -370.834       370.834       1713.55       2084.39    
  18  0.496874E-01  -3.00200      -771.614       771.614       1718.33       2489.94    
  19  0.784524     -0.242678      -62.3763       62.3763       1537.79       1600.17    
  20  0.292328      -1.22988      -316.120       316.120       1730.88       2047.00    
  21  0.832247E-01  -2.48621      -639.038       639.038       1739.04       2378.08    
  22  0.423133     -0.860069      -221.066       221.066       1597.26       1818.33    
  23  0.234472      -1.45042      -372.805       372.805       1744.49       2117.29    
  24  0.868463     -0.141031      -36.2495       36.2495       1778.10       1814.35    
  25  0.122969      -2.09582      -538.695       538.695       1802.34       2341.04    
  26  0.811771     -0.208537      -53.6009       53.6009       1770.52       1824.12    
  27  0.786834     -0.239738      -61.6206       61.6206       1745.28       1806.90    
  28  0.163144      -1.81312      -466.031       466.031       1703.70       2169.73    
  29  0.571103     -0.560186      -143.986       143.986       1789.28       1933.27    
  30  0.769982     -0.261388      -67.1852       67.1852       1838.47       1905.66    
  31  0.471769     -0.751265      -193.100       193.100       1883.66       2076.76    
  32  0.584935     -0.536254      -137.835       137.835       1649.67       1787.51    
  33  0.416140     -0.876734      -225.349       225.349       1632.99       1858.34    
  34  0.106525E-01  -4.54196      -1167.43       1167.43       1814.86       2982.29    
  35  0.595424     -0.518482      -133.267       133.267       1863.70       1996.97    
  36  0.302400      -1.19600      -307.412       307.412       1508.93       1816.35    
  37  0.629701     -0.462510      -118.880       118.880       1674.94       1793.82    
  38  0.939026E-01  -2.36550      -608.011       608.011       1766.20       2374.21    
  39  0.911727     -0.924151E-01  -23.7537       23.7537       1843.55       1867.31    
  40  0.289502      -1.23959      -318.616       318.616       1783.37       2101.98    
  41  0.326571      -1.11911      -287.647       287.647       1618.35       1905.99    
  42  0.972366     -0.280231E-01  -7.20285       7.20285       1807.25       1814.45    
  43  0.823413     -0.194297      -49.9407       49.9407       1456.43       1506.37    
  44  0.790717     -0.234815      -60.3552       60.3552       1747.80       1808.15    
  45  0.167922      -1.78426      -458.613       458.613       1826.29       2284.90    
  46  0.804665     -0.217329      -55.8608       55.8608       1649.82       1705.68    
  47  0.154714      -1.86617      -479.668       479.668       1743.72       2223.39    
  48  0.240456      -1.42522      -366.328       366.328       1584.73       1951.06    
  49  0.351787      -1.04473      -268.530       268.530       1989.46       2257.99    
  50  0.666429E-01  -2.70841      -696.150       696.150       1761.85       2457.99    
  51  0.484113     -0.725437      -186.461       186.461       1469.94       1656.40    
  52  0.298509      -1.20896      -310.741       310.741       1844.95       2155.69    
  53  0.982136     -0.180253E-01  -4.63309       4.63309       1977.89       1982.52    
  54  0.799723     -0.223490      -57.4443       57.4443       2214.87       2272.32    
  55  0.559799     -0.580177      -149.125       149.125       1848.90       1998.02    
  56  0.492929     -0.707390      -181.823       181.823       1569.48       1751.30    
  57  0.655290     -0.422678      -108.642       108.642       2074.74       2183.38    
  58  0.426949     -0.851091      -218.758       218.758       1805.63       2024.38    
  59  0.575269     -0.552918      -142.118       142.118       1504.39       1646.51    
  60  0.252283      -1.37721      -353.987       353.987       1859.36       2213.35    
  61  0.628464     -0.464477      -119.386       119.386       2417.99       2537.37    
  62  0.847342E-01  -2.46824      -634.418       634.418       1721.08       2355.50    
  63  0.701567     -0.354439      -91.1025       91.1025       1822.10       1913.20    
  64  0.171664      -1.76222      -452.948       452.948       1453.78       1906.73    
loop,thermsimp(1:2)       59   284.938       16.1372    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       1758.00         68.79          1.18         40.95          0.38          0.05        111.34
Just calling func    0   0        111.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    157       2327.75         68.83          1.11         40.65          0.36          0.05        111.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1758.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       59
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       60
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      156     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -305.941       305.941       1425.50       1731.45    
   2  0.843344     -0.170380      -43.7932       43.7932       1456.43       1500.23    
   3  0.457815     -0.781289      -200.817       200.817       1561.64       1762.46    
   4  0.933709     -0.685899E-01  -17.6299       17.6299       1500.10       1517.73    
   5  0.887159     -0.119731      -30.7747       30.7747       1537.79       1568.57    
   6  0.786211     -0.240530      -61.8242       61.8242       1518.51       1580.34    
   7  0.794803     -0.229661      -59.0305       59.0305       1504.39       1563.42    
   8  0.573435E-01  -2.85870      -734.779       734.779       1469.94       2204.72    
   9  0.647106     -0.435245      -111.872       111.872       1539.50       1651.37    
  10  0.110118      -2.20620      -567.067       567.067       1491.51       2058.57    
  11  0.339548      -1.08014      -277.631       277.631       1576.52       1854.15    
  12  0.635246     -0.453742      -116.627       116.627       1552.58       1669.20    
  13  0.488392     -0.716638      -184.200       184.200       1405.15       1589.35    
  14  0.602571     -0.506549      -130.200       130.200       1649.82       1780.02    
  15  0.710041     -0.342433      -88.0166       88.0166       1558.02       1646.03    
  16  0.585763     -0.534840      -137.472       137.472       1717.77       1855.24    
  17  0.288010      -1.24476      -319.944       319.944       1569.48       1889.42    
  18  0.455238     -0.786934      -202.268       202.268       1649.67       1851.94    
  19  0.723984     -0.322986      -83.0180       83.0180       1674.94       1757.96    
  20  0.554067     -0.590470      -151.770       151.770       1590.44       1742.21    
  21  0.646516     -0.436157      -112.107       112.107       1745.28       1857.38    
  22  0.271985      -1.30201      -334.659       334.659       1747.80       2082.46    
  23  0.901636E-02  -4.70871      -1210.29       1210.29       1778.10       2988.40    
  24  0.383616     -0.958114      -246.267       246.267       1807.25       2053.51    
  25  0.443516     -0.813022      -208.973       208.973       1441.50       1650.48    
  26  0.223023      -1.50048      -385.673       385.673       1508.93       1894.61    
  27  0.123255      -2.09350      -538.098       538.098       1597.26       2135.36    
  28  0.817485     -0.201523      -51.7980       51.7980       1770.52       1822.32    
  29  0.333893      -1.09693      -281.948       281.948       1632.99       1914.94    
  30  0.867877     -0.141706      -36.4231       36.4231       1843.55       1879.98    
  31  0.365747      -1.00581      -258.527       258.527       1838.47       2097.00    
  32  0.429445     -0.845262      -217.260       217.260       1618.35       1835.61    
  33  0.856620     -0.154761      -39.7787       39.7787       1453.78       1493.56    
  34  0.729532     -0.315352      -81.0559       81.0559       1822.10       1903.16    
  35  0.315845      -1.15251      -296.232       296.232       1789.28       2085.51    
  36  0.547596     -0.602217      -154.790       154.790       1584.73       1739.52    
  37  0.752130     -0.284846      -73.2149       73.2149       1716.14       1789.35    
  38  0.806451     -0.215112      -55.2909       55.2909       1449.54       1504.83    
  39  0.618613     -0.480275      -123.447       123.447       1548.55       1672.00    
  40  0.630350     -0.461480      -118.615       118.615       1977.89       2096.51    
  41  0.251741      -1.37935      -354.540       354.540       1863.70       2218.24    
  42  0.846504     -0.166640      -42.8319       42.8319       1848.90       1891.73    
  43  0.830791     -0.185377      -47.6479       47.6479       1805.63       1853.27    
  44  0.566838     -0.567681      -145.913       145.913       1730.88       1876.79    
  45  0.499450E-01  -2.99683      -770.285       770.285       1883.66       2653.95    
  46  0.976301     -0.239838E-01  -6.16464       6.16464       1713.55       1719.72    
  47  0.401049     -0.913672      -234.844       234.844       1783.37       2018.21    
  48  0.709931E-01  -2.64517      -679.897       679.897       1744.49       2424.39    
  49  0.920370E-02  -4.68815      -1205.01       1205.01       1844.95       3049.96    
  50  0.379723     -0.968314      -248.889       248.889       1703.70       1952.59    
  51  0.207569      -1.57229      -404.131       404.131       2074.74       2478.87    
  52  0.745673     -0.293468      -75.4309       75.4309       1859.36       1934.80    
  53  0.915877     -0.878737E-01  -22.5864       22.5864       1743.72       1766.31    
  54  0.836769     -0.178207      -45.8051       45.8051       1989.46       2035.27    
  55  0.769684E-01  -2.56436      -659.125       659.125       2214.87       2874.00    
  56  0.797754     -0.225955      -58.0779       58.0779       1826.29       1884.37    
  57  0.555189     -0.588446      -151.250       151.250       1802.34       1953.59    
  58  0.134224      -2.00825      -516.186       516.186       1721.08       2237.27    
  59  0.796234     -0.227862      -58.5681       58.5681       1766.20       1824.77    
  60  0.628721     -0.464068      -119.281       119.281       1739.04       1858.32    
  61  0.460391     -0.775679      -199.375       199.375       1761.85       1961.22    
  62  0.137302      -1.98558      -510.358       510.358       1718.33       2228.68    
  63  0.504249     -0.684686      -175.987       175.987       2417.99       2593.97    
  64  0.548486     -0.600594      -154.373       154.373       1758.00       1912.37    
loop,thermsimp(1:2)       60   305.941       43.7932    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       1863.09         68.75          1.14         40.96          0.10          0.05        111.01
Just calling func    0   0        111.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1863.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       60
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       61
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      157     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -47.9914       47.9914       1453.78       1501.77    
   2  0.735850     -0.306729      -78.8395       78.8395       1456.43       1535.27    
   3  0.828786     -0.187793      -48.2691       48.2691       1449.54       1497.81    
   4  0.592078     -0.524118      -134.716       134.716       1500.10       1634.81    
   5  0.691797E-01  -2.67105      -686.547       686.547       1504.39       2190.94    
   6  0.772335     -0.258337      -66.4011       66.4011       1537.79       1604.19    
   7  0.504563     -0.684063      -175.827       175.827       1518.51       1694.34    
   8  0.700615     -0.355797      -91.4515       91.4515       1405.15       1496.60    
   9  0.764596     -0.268408      -68.9896       68.9896       1558.02       1627.01    
  10  0.459614     -0.777368      -199.809       199.809       1441.50       1641.31    
  11  0.931193     -0.712882E-01  -18.3234       18.3234       1539.50       1557.82    
  12  0.502482E-01  -2.99078      -768.729       768.729       1552.58       2321.31    
  13  0.498197     -0.696760      -179.090       179.090       1548.55       1727.64    
  14  0.551534E-01  -2.89764      -744.788       744.788       1713.55       2458.34    
  15  0.172209      -1.75905      -452.133       452.133       1425.50       1877.64    
  16  0.238868E-01  -3.73443      -959.872       959.872       1584.73       2544.60    
  17  0.699366     -0.357581      -91.9100       91.9100       1590.44       1682.35    
  18  0.764093     -0.269066      -69.1589       69.1589       1674.94       1744.10    
  19  0.465633     -0.764357      -196.465       196.465       1561.64       1758.11    
  20  0.209906      -1.56110      -401.254       401.254       1743.72       2144.97    
  21  0.216891      -1.52836      -392.839       392.839       1649.82       2042.66    
  22  0.795854E-01  -2.53092      -650.531       650.531       1716.14       2366.67    
  23  0.701683     -0.354273      -91.0599       91.0599       1770.52       1861.58    
  24  0.574425     -0.554385      -142.495       142.495       1766.20       1908.69    
  25  0.674968     -0.393090      -101.037       101.037       1618.35       1719.38    
  26  0.684189     -0.379521      -97.5495       97.5495       1649.67       1747.22    
  27  0.541862     -0.612745      -157.496       157.496       1805.63       1963.12    
  28  0.668027     -0.403426      -103.694       103.694       1576.52       1680.21    
  29  0.353251      -1.04058      -267.462       267.462       1717.77       1985.23    
  30  0.778708     -0.250119      -64.2889       64.2889       1745.28       1809.57    
  31  0.829283     -0.187194      -48.1150       48.1150       1739.04       1787.15    
  32  0.679297     -0.386697      -99.3938       99.3938       1730.88       1830.27    
  33  0.536301     -0.623060      -160.147       160.147       1843.55       2003.70    
  34  0.247738      -1.39538      -358.659       358.659       1826.29       2184.95    
  35  0.271399      -1.30416      -335.213       335.213       1569.48       1904.69    
  36  0.284124      -1.25835      -323.436       323.436       1848.90       2172.33    
  37  0.664442     -0.408808      -105.077       105.077       1508.93       1614.01    
  38  0.874508     -0.134094      -34.4665       34.4665       1822.10       1856.57    
  39  0.916444     -0.872538E-01  -22.4271       22.4271       1758.00       1780.43    
  40  0.295165      -1.22022      -313.637       313.637       1632.99       1946.63    
  41  0.242592      -1.41637      -364.055       364.055       1859.36       2223.42    
  42  0.396124     -0.926028      -238.020       238.020       1703.70       1941.72    
  43  0.509193E-01  -2.97751      -765.319       765.319       1802.34       2567.66    
  44  0.778911     -0.249858      -64.2217       64.2217       1761.85       1826.07    
  45  0.351009      -1.04694      -269.099       269.099       1783.37       2052.47    
  46  0.480934     -0.732025      -188.155       188.155       1989.46       2177.62    
  47  0.908579     -0.958731E-01  -24.6426       24.6426       1807.25       1831.89    
  48  0.898885     -0.106600      -27.3997       27.3997       1491.51       1518.91    
  49  0.561121     -0.577819      -148.518       148.518       1747.80       1896.32    
  50  0.851109     -0.161215      -41.4377       41.4377       1789.28       1830.72    
  51  0.975854     -0.244425E-01  -6.28253       6.28253       1977.89       1984.17    
  52  0.187829      -1.67223      -429.817       429.817       1838.47       2268.29    
  53  0.962131     -0.386049E-01  -9.92272       9.92272       1597.26       1607.19    
  54  0.823812     -0.193813      -49.8163       49.8163       1469.94       1519.76    
  55  0.765207     -0.267609      -68.7844       68.7844       1863.70       1932.49    
  56  0.207984      -1.57030      -403.618       403.618       1718.33       2121.94    
  57  0.675792     -0.391869      -100.723       100.723       1721.08       1821.81    
  58  0.641275     -0.444296      -114.199       114.199       1744.49       1858.69    
  59  0.621346E-01  -2.77845      -714.154       714.154       2074.74       2788.89    
  60  0.911977E-01  -2.39473      -615.523       615.523       2417.99       3033.51    
  61  0.697078     -0.360859      -92.7526       92.7526       1883.66       1976.42    
  62  0.760976     -0.273154      -70.2095       70.2095       2214.87       2285.08    
  63  0.812117     -0.208111      -53.4914       53.4914       1778.10       1831.59    
  64  0.654868     -0.423322      -108.808       108.808       1863.09       1971.90    
loop,thermsimp(1:2)       61   47.9914       78.8395    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       1528.44         69.35          1.26         40.18          0.18          0.05        111.02
Just calling func    0   0        111.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160       1534.70         69.51          1.31         40.63          0.04          0.05        111.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1528.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       61
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       62
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      159     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -22.1605       22.1605       1405.15       1427.31    
   2  0.899579E-01  -2.40841      -619.042       619.042       1449.54       2068.58    
   3  0.997625     -0.237830E-02 -0.611302      0.611302       1453.78       1454.39    
   4  0.224083      -1.49574      -384.454       384.454       1491.51       1875.96    
   5  0.120769      -2.11388      -543.337       543.337       1469.94       2013.28    
   6  0.302676E-01  -3.49768      -899.018       899.018       1456.43       2355.45    
   7  0.315161      -1.15467      -296.788       296.788       1539.50       1836.29    
   8  0.155895      -1.85857      -477.715       477.715       1537.79       2015.51    
   9  0.467639     -0.760060      -195.360       195.360       1597.26       1792.62    
  10  0.277823      -1.28077      -329.200       329.200       1508.93       1838.13    
  11  0.712282     -0.339281      -87.2064       87.2064       1558.02       1645.22    
  12  0.929560     -0.730437E-01  -18.7746       18.7746       1500.10       1518.87    
  13  0.499024     -0.695101      -178.664       178.664       1441.50       1620.17    
  14  0.940347     -0.615066E-01  -15.8092       15.8092       1576.52       1592.33    
  15  0.714006     -0.336864      -86.5851       86.5851       1590.44       1677.02    
  16  0.162603      -1.81644      -466.886       466.886       1518.51       1985.40    
  17  0.663729     -0.409881      -105.353       105.353       1618.35       1723.70    
  18  0.314148      -1.15789      -297.616       297.616       1548.55       1846.17    
  19  0.497386     -0.698388      -179.509       179.509       1674.94       1854.45    
  20  0.368387     -0.998622      -256.679       256.679       1649.67       1906.35    
  21  0.326342      -1.11981      -287.828       287.828       1561.64       1849.47    
  22  0.442952     -0.814294      -209.300       209.300       1758.00       1967.30    
  23  0.929694     -0.729000E-01  -18.7377       18.7377       1739.04       1757.78    
  24  0.945450E-01  -2.35868      -606.258       606.258       1745.28       2351.54    
  25  0.407158     -0.898555      -230.958       230.958       1721.08       1952.04    
  26  0.706679     -0.347179      -89.2365       89.2365       1761.85       1851.08    
  27  0.657848     -0.418781      -107.641       107.641       1730.88       1838.52    
  28  0.968040     -0.324817E-01  -8.34887       8.34887       1789.28       1797.63    
  29  0.330387      -1.10749      -284.661       284.661       1778.10       2062.76    
  30  0.756161     -0.279501      -71.8410       71.8410       1807.25       1879.09    
  31  0.307772      -1.17840      -302.887       302.887       1822.10       2124.99    
  32  0.759008E-01  -2.57833      -662.715       662.715       1744.49       2407.20    
  33  0.615618E-01  -2.78771      -716.534       716.534       1770.52       2487.06    
  34  0.545984     -0.605166      -155.548       155.548       1425.50       1581.05    
  35  0.339865      -1.07921      -277.391       277.391       1747.80       2025.19    
  36  0.816477     -0.202757      -52.1152       52.1152       1569.48       1621.59    
  37  0.932889     -0.694691E-01  -17.8558       17.8558       1766.20       1784.05    
  38  0.667042     -0.404902      -104.073       104.073       1863.70       1967.78    
  39  0.583049     -0.539484      -138.665       138.665       1703.70       1842.37    
  40  0.210192      -1.55973      -400.903       400.903       1632.99       2033.89    
  41  0.158846      -1.83982      -472.895       472.895       1805.63       2278.52    
  42  0.360401      -1.02054      -262.312       262.312       1863.09       2125.40    
  43  0.508154     -0.676971      -174.004       174.004       1883.66       2057.67    
  44  0.873303     -0.135473      -34.8210       34.8210       1977.89       2012.71    
  45  0.650524     -0.429977      -110.518       110.518       1717.77       1828.29    
  46  0.805601     -0.216166      -55.5618       55.5618       1843.55       1899.12    
  47  0.312590E-03  -8.07062      -2074.41       2074.41       1649.82       3724.24    
  48  0.892261     -0.113997      -29.3009       29.3009       1783.37       1812.67    
  49  0.504672     -0.683846      -175.771       175.771       1718.33       1894.10    
  50  0.269834      -1.30995      -336.699       336.699       1743.72       2080.42    
  51  0.752889     -0.283838      -72.9556       72.9556       1848.90       1921.85    
  52  0.952800     -0.483498E-01  -12.4275       12.4275       1989.46       2001.89    
  53  0.147189E-01  -4.21863      -1084.33       1084.33       1826.29       2910.61    
  54  0.213392      -1.54462      -397.019       397.019       1504.39       1901.41    
  55  0.278061      -1.27992      -328.981       328.981       1859.36       2188.35    
  56  0.668800     -0.402271      -103.397       103.397       1838.47       1941.87    
  57  0.674989     -0.393058      -101.029       101.029       2214.87       2315.90    
  58  0.186370      -1.68002      -431.821       431.821       1552.58       1984.40    
  59  0.133078      -2.01682      -518.388       518.388       1716.14       2234.52    
  60  0.519821     -0.654270      -168.169       168.169       1713.55       1881.72    
  61  0.136847      -1.98889      -511.210       511.210       1584.73       2095.94    
  62  0.604880     -0.502725      -129.217       129.217       1802.34       1931.56    
  63  0.301519      -1.19892      -308.162       308.162       2074.74       2382.90    
  64  0.531506     -0.632040      -162.455       162.455       1528.44       1690.89    
loop,thermsimp(1:2)       62   22.1605       619.042    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161       2179.37         68.52          1.11         40.73          0.27          0.04        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    2179.4       0.9325     -3.308      2.424     -102.6     0.1013    
                     -0.4333E-01 0.9455     -99.70      3.075     0.3977    

                       1.562     0.8506      1.972      7270.      7000.    

                      -1.945      0.000      0.000      0.000     -1.221    



                      -1.938      0.000      0.000      7000.      12.78    

                      -1.329     -3.029     -1.683     -3.755      1.121    

                      -3.182     -3.949      5005.      0.000      8396.    



                       3511.      6121.      8098.      3456.      4087.    

                       4835.     0.7087E-01 0.1261     0.3072E-01 0.2155    

                     -0.2486     0.2159     0.1836     0.7225     0.1594    



                      -1.042    -0.1201      0.000     0.4419E-01 0.3926E-01

                      0.1059     0.1505    -0.7116     0.2304     0.2897    

                      0.1082     0.1283    -0.5118     -1.120      7000.    



                      -2.054     -1.678     -2.104     -2.273    -0.3807    

                     -0.3252      9.108      8.612    -0.1585E+05 -6.016    

                       0.000      0.000      9.096      8.593    -0.1969E+05



                      -6.000      0.000      0.000      8.921      9.058    

                     -0.1944E+05 -6.000      0.000      0.000      8.908    

                       9.046    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2179.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       62
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       63
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      160     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -124.036       124.036       1405.15       1529.19    
   2  0.828850     -0.187716      -48.2491       48.2491       1453.78       1502.03    
   3  0.138898      -1.97402      -507.388       507.388       1500.10       2007.48    
   4  0.174947      -1.74327      -448.079       448.079       1425.50       1873.58    
   5  0.452367E-01  -3.09585      -795.735       795.735       1576.52       2372.26    
   6  0.982229     -0.179305E-01  -4.60872       4.60872       1441.50       1446.11    
   7  0.855728     -0.155803      -40.0465       40.0465       1569.48       1609.52    
   8  0.350750      -1.04768      -269.289       269.289       1558.02       1827.31    
   9  0.880054     -0.127772      -32.8416       32.8416       1590.44       1623.28    
  10  0.106511      -2.23950      -575.626       575.626       1528.44       2104.07    
  11  0.336060      -1.09047      -280.286       280.286       1618.35       1898.63    
  12  0.904819     -0.100020      -25.7085       25.7085       1739.04       1764.75    
  13  0.765597     -0.267099      -68.6532       68.6532       1766.20       1834.85    
  14  0.551789     -0.594589      -152.829       152.829       1597.26       1750.09    
  15  0.832435     -0.183400      -47.1398       47.1398       1789.28       1836.42    
  16  0.353494      -1.03989      -267.286       267.286       1783.37       2050.65    
  17  0.510104     -0.673140      -173.019       173.019       1717.77       1890.79    
  18  0.523162     -0.647863      -166.522       166.522       1539.50       1706.02    
  19  0.953043     -0.480957E-01  -12.3622       12.3622       1508.93       1521.30    
  20  0.267001E-01  -3.62309      -931.253       931.253       1730.88       2662.13    
  21  0.280924      -1.26967      -326.347       326.347       1703.70       2030.05    
  22  0.956868     -0.440901E-01  -11.3326       11.3326       1548.55       1559.89    
  23  0.779725     -0.248814      -63.9533       63.9533       1561.64       1625.60    
  24  0.901061     -0.104183      -26.7784       26.7784       1761.85       1788.62    
  25  0.533391     -0.628501      -161.546       161.546       1674.94       1836.49    
  26  0.642536     -0.442333      -113.694       113.694       1491.51       1605.20    
  27  0.520565E-01  -2.95543      -759.642       759.642       1807.25       2566.89    
  28  0.330080      -1.10842      -284.900       284.900       1713.55       1998.45    
  29  0.280801      -1.27011      -326.460       326.460       1718.33       2044.79    
  30  0.144013      -1.93785      -498.091       498.091       1843.55       2341.64    
  31  0.201537      -1.60178      -411.710       411.710       1504.39       1916.10    
  32  0.920188     -0.831777E-01  -21.3794       21.3794       1649.67       1671.05    
  33  0.747222     -0.291393      -74.8976       74.8976       1848.90       1923.79    
  34  0.697959     -0.359595      -92.4278       92.4278       1802.34       1894.77    
  35  0.492949     -0.707349      -181.812       181.812       1838.47       2020.29    
  36  0.378001     -0.972857      -250.056       250.056       1721.08       1971.14    
  37  0.936484     -0.656225E-01  -16.8671       16.8671       1758.00       1774.87    
  38  0.458232     -0.780381      -200.584       200.584       1863.70       2064.29    
  39  0.286796      -1.24898      -321.030       321.030       1552.58       1873.61    
  40  0.524458     -0.645389      -165.886       165.886       1518.51       1684.40    
  41  0.126679      -2.06610      -531.055       531.055       1989.46       2520.52    
  42  0.645270     -0.438086      -112.602       112.602       1977.89       2090.49    
  43  0.996049     -0.395919E-02  -1.01764       1.01764       1469.94       1470.96    
  44  0.470695     -0.753545      -193.686       193.686       1537.79       1731.48    
  45  0.783048     -0.244561      -62.8602       62.8602       1747.80       1810.66    
  46  0.682425     -0.382103      -98.2130       98.2130       1632.99       1731.20    
  47  0.623779     -0.471960      -121.309       121.309       1883.66       2004.97    
  48  0.138146      -1.97945      -508.783       508.783       1778.10       2286.88    
  49  0.317697      -1.14666      -294.728       294.728       1449.54       1744.27    
  50  0.215616      -1.53426      -394.354       394.354       1743.72       2138.07    
  51  0.392653     -0.934829      -240.282       240.282       1584.73       1825.01    
  52  0.311957      -1.16489      -299.415       299.415       1822.10       2121.52    
  53  0.665567     -0.407116      -104.642       104.642       1863.09       1967.74    
  54  0.124333      -2.08479      -535.860       535.860       1859.36       2395.22    
  55  0.175373      -1.74084      -447.453       447.453       1716.14       2163.59    
  56  0.712195E-01  -2.64199      -679.078       679.078       1805.63       2484.70    
  57  0.626551E-01  -2.77011      -712.010       712.010       2214.87       2926.88    
  58  0.869671     -0.139640      -35.8921       35.8921       1745.28       1781.17    
  59  0.112950      -2.18081      -560.539       560.539       1456.43       2016.97    
  60  0.837299     -0.177574      -45.6423       45.6423       2074.74       2120.38    
  61  0.380546     -0.966149      -248.332       248.332       1744.49       1992.82    
  62  0.225371      -1.49001      -382.981       382.981       1770.52       2153.50    
  63  0.556139     -0.586737      -150.811       150.811       1826.29       1977.10    
  64  0.909618     -0.947309E-01  -24.3490       24.3490       2179.37       2203.71    
loop,thermsimp(1:2)       63   124.036       48.2491    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       1456.76         69.13          1.23         40.46          0.49          0.05        111.37
Just calling func    0   0        111.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    163       2091.37         68.66          1.13         40.24          1.05          0.05        111.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1456.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       63
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       64
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      162     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -52.0927       52.0927       1441.50       1493.60    
   2  0.209930      -1.56098      -401.224       401.224       1469.94       1871.17    
   3  0.710991     -0.341096      -87.6729       87.6729       1453.78       1541.45    
   4  0.967365     -0.331789E-01  -8.52807       8.52807       1508.93       1517.46    
   5  0.650635E-01  -2.73239      -702.315       702.315       1405.15       2107.46    
   6  0.578340     -0.547593      -140.749       140.749       1548.55       1689.30    
   7  0.928890E-01  -2.37635      -610.800       610.800       1491.51       2102.31    
   8  0.486974     -0.719546      -184.947       184.947       1569.48       1754.42    
   9  0.560625     -0.578703      -148.746       148.746       1590.44       1739.18    
  10  0.552834     -0.592698      -152.343       152.343       1561.64       1713.98    
  11  0.744529E-01  -2.59759      -667.666       667.666       1649.67       2317.34    
  12  0.937600     -0.644318E-01  -16.5611       16.5611       1518.51       1535.08    
  13  0.154459      -1.86783      -480.093       480.093       1539.50       2019.59    
  14  0.186893E-02  -6.28239      -1614.78       1614.78       1632.99       3247.77    
  15  0.250797      -1.38311      -355.505       355.505       1537.79       1893.30    
  16  0.924847E-01  -2.38071      -611.922       611.922       1449.54       2061.46    
  17  0.476680     -0.740911      -190.438       190.438       1597.26       1787.70    
  18  0.266527      -1.32228      -339.869       339.869       1739.04       2078.91    
  19  0.369755     -0.994916      -255.726       255.726       1758.00       2013.73    
  20  0.595561     -0.518252      -133.208       133.208       1745.28       1878.48    
  21  0.636070     -0.452447      -116.294       116.294       1761.85       1878.14    
  22  0.447294     -0.804540      -206.793       206.793       1747.80       1954.59    
  23  0.964945     -0.356839E-01  -9.17193       9.17193       1584.73       1593.90    
  24  0.752421     -0.284460      -73.1155       73.1155       1558.02       1631.13    
  25  0.705556     -0.348769      -89.6451       89.6451       1766.20       1855.84    
  26  0.943467     -0.581939E-01  -14.9577       14.9577       1789.28       1804.24    
  27  0.272564      -1.29988      -334.112       334.112       1674.94       2009.05    
  28  0.215815      -1.53333      -394.117       394.117       1425.50       1819.62    
  29  0.756955     -0.278452      -71.5713       71.5713       1552.58       1624.15    
  30  0.538381     -0.619189      -159.152       159.152       1717.77       1876.92    
  31  0.182967      -1.69845      -436.557       436.557       1802.34       2238.90    
  32  0.644758     -0.438881      -112.807       112.807       1618.35       1731.15    
  33  0.939477     -0.624320E-01  -16.0471       16.0471       1504.39       1520.44    
  34  0.663186     -0.410699      -105.563       105.563       1848.90       1954.46    
  35  0.795014     -0.229396      -58.9623       58.9623       1863.09       1922.06    
  36  0.630792     -0.460779      -118.435       118.435       1721.08       1839.52    
  37  0.151039      -1.89022      -485.848       485.848       1826.29       2312.14    
  38  0.668306     -0.403009      -103.587       103.587       1744.49       1848.08    
  39  0.683820     -0.380061      -97.6882       97.6882       1713.55       1811.24    
  40  0.122229      -2.10186      -540.247       540.247       1883.66       2423.91    
  41  0.664453     -0.408791      -105.073       105.073       1500.10       1605.17    
  42  0.548687     -0.600228      -154.278       154.278       1456.43       1610.71    
  43  0.931535     -0.709210E-01  -18.2290       18.2290       1838.47       1856.70    
  44  0.139742      -1.96796      -505.830       505.830       1703.70       2209.53    
  45  0.429142     -0.845967      -217.441       217.441       1718.33       1935.77    
  46  0.531147     -0.632717      -162.629       162.629       1783.37       1946.00    
  47  0.575558     -0.552416      -141.989       141.989       1863.70       2005.69    
  48  0.336537      -1.08905      -279.921       279.921       1977.89       2257.81    
  49  0.324486      -1.12551      -289.294       289.294       1528.44       1817.73    
  50  0.652768     -0.426534      -109.633       109.633       2074.74       2184.37    
  51  0.537860     -0.620158      -159.401       159.401       1822.10       1981.50    
  52  0.415288     -0.878782      -225.876       225.876       1743.72       1969.60    
  53  0.771827     -0.258995      -66.5703       66.5703       1770.52       1837.09    
  54  0.537995     -0.619906      -159.336       159.336       1716.14       1875.47    
  55  0.438537     -0.824310      -211.875       211.875       2179.37       2391.24    
  56  0.872114     -0.136835      -35.1710       35.1710       1778.10       1813.27    
  57  0.974519E-01  -2.32840      -598.475       598.475       1843.55       2442.03    
  58  0.245035      -1.40635      -361.479       361.479       1576.52       1938.00    
  59  0.285418      -1.25380      -322.268       322.268       1859.36       2181.63    
  60  0.598735     -0.512936      -131.841       131.841       1805.63       1937.47    
  61  0.440039     -0.820892      -210.996       210.996       1989.46       2200.46    
  62  0.115587      -2.15774      -554.609       554.609       1807.25       2361.85    
  63  0.479716     -0.734560      -188.806       188.806       1730.88       1919.69    
  64  0.423297     -0.859681      -220.966       220.966       1456.76       1677.73    
loop,thermsimp(1:2)       64   52.0927       401.224    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164       1463.97         69.32          1.25         40.13          0.34          0.05        111.08
Just calling func    0   0        111.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    165       1445.36         68.60          1.14         40.44          0.99          0.05        111.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1445.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       64
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       65
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      164     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -257.283       257.283       1441.50       1698.79    
   2  0.298218      -1.20993      -310.992       310.992       1508.93       1819.93    
   3  0.374092     -0.983254      -252.729       252.729       1504.39       1757.12    
   4  0.417366     -0.873791      -224.593       224.593       1518.51       1743.11    
   5  0.299382      -1.20604      -309.991       309.991       1453.78       1763.77    
   6  0.373029     -0.986099      -253.460       253.460       1584.73       1838.19    
   7  0.628224     -0.464858      -119.484       119.484       1500.10       1619.58    
   8  0.111397      -2.19465      -564.098       564.098       1456.43       2020.53    
   9  0.983555     -0.165818E-01  -4.26206       4.26206       1552.58       1556.84    
  10  0.394578     -0.929938      -239.025       239.025       1558.02       1797.04    
  11  0.410639     -0.890042      -228.770       228.770       1456.76       1685.53    
  12  0.700680     -0.355705      -91.4278       91.4278       1548.55       1639.98    
  13  0.223946      -1.49635      -384.612       384.612       1561.64       1946.25    
  14  0.651113E-01  -2.73166      -702.126       702.126       1618.35       2320.47    
  15  0.704010     -0.350963      -90.2091       90.2091       1590.44       1680.64    
  16  0.172411      -1.75787      -451.831       451.831       1569.48       2021.31    
  17  0.567412     -0.566670      -145.653       145.653       1597.26       1742.92    
  18  0.186334      -1.68021      -431.870       431.870       1789.28       2221.15    
  19  0.677524     -0.389310      -100.066       100.066       1713.55       1813.62    
  20  0.362270      -1.01537      -260.982       260.982       1778.10       2039.08    
  21  0.603880     -0.504381      -129.642       129.642       1528.44       1658.08    
  22  0.782208     -0.245635      -63.1362       63.1362       1425.50       1488.64    
  23  0.129808      -2.04170      -524.784       524.784       1770.52       2295.31    
  24  0.284816      -1.25591      -322.811       322.811       1721.08       2043.89    
  25  0.246930      -1.39865      -359.499       359.499       1744.49       2103.99    
  26  0.256917      -1.35900      -349.308       349.308       1766.20       2115.51    
  27  0.240545      -1.42485      -366.233       366.233       1838.47       2204.71    
  28  0.218018      -1.52318      -391.507       391.507       1469.94       1861.45    
  29  0.235583E-01  -3.74828      -963.431       963.431       1716.14       2679.57    
  30  0.114660      -2.16578      -556.677       556.677       1717.77       2274.45    
  31  0.119129      -2.12755      -546.851       546.851       1761.85       2308.70    
  32  0.471707     -0.751398      -193.134       193.134       1745.28       1938.41    
  33  0.607413     -0.498546      -128.143       128.143       1537.79       1665.93    
  34  0.568731     -0.564347      -145.056       145.056       1730.88       1875.94    
  35  0.587492     -0.531893      -136.714       136.714       1863.09       1999.81    
  36  0.411259     -0.888533      -228.382       228.382       1718.33       1946.71    
  37  0.836192     -0.178897      -45.9823       45.9823       1805.63       1851.61    
  38  0.152977      -1.87747      -482.571       482.571       1576.52       2059.09    
  39  0.941831     -0.599291E-01  -15.4038       15.4038       1783.37       1798.77    
  40  0.936595     -0.655045E-01  -16.8368       16.8368       1848.90       1865.73    
  41  0.856621     -0.154759      -39.7782       39.7782       1747.80       1787.58    
  42  0.484786     -0.724047      -186.104       186.104       1743.72       1929.82    
  43  0.188261      -1.66993      -429.226       429.226       1822.10       2251.33    
  44  0.957606     -0.433189E-01  -11.1344       11.1344       1863.70       1874.84    
  45  0.234891      -1.44863      -372.347       372.347       1674.94       2047.29    
  46  0.758920     -0.275858      -70.9047       70.9047       1758.00       1828.90    
  47  0.135340      -1.99997      -514.057       514.057       1539.50       2053.56    
  48  0.779121E-01  -2.55217      -655.993       655.993       1449.54       2105.53    
  49  0.573767     -0.555531      -142.790       142.790       1739.04       1881.83    
  50  0.982512     -0.176424E-01  -4.53467       4.53467       1491.51       1496.04    
  51  0.109579      -2.21111      -568.328       568.328       1405.15       1973.48    
  52  0.714543     -0.336113      -86.3920       86.3920       1859.36       1945.76    
  53  0.573216     -0.556492      -143.037       143.037       2074.74       2217.78    
  54  0.389116     -0.943877      -242.608       242.608       1989.46       2232.07    
  55  0.149817      -1.89834      -487.937       487.937       1703.70       2191.64    
  56  0.623269     -0.472778      -121.519       121.519       1802.34       1923.86    
  57  0.682320E-02  -4.98743      -1281.93       1281.93       1977.89       3259.82    
  58  0.641698     -0.443637      -114.029       114.029       1826.29       1940.32    
  59  0.233363      -1.45516      -374.024       374.024       1649.67       2023.70    
  60  0.881483     -0.126150      -32.4247       32.4247       1807.25       1839.67    
  61  0.264921      -1.32832      -341.423       341.423       2179.37       2520.79    
  62  0.941652     -0.601200E-01  -15.4528       15.4528       1883.66       1899.12    
  63  0.179971      -1.71496      -440.800       440.800       1843.55       2284.35    
  64  0.381207E-01  -3.26700      -839.726       839.726       1445.36       2285.08    
loop,thermsimp(1:2)       65   257.283       310.992    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166       2414.84         68.61          1.15         40.59          0.62          0.05        111.01
Just calling func    0   0        111.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2414.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       65
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       66
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      165     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -350.768       350.768       1425.50       1776.27    
   2  0.513427E-01  -2.96923      -763.191       763.191       1491.51       2254.70    
   3  0.288453      -1.24322      -319.550       319.550       1552.58       1872.13    
   4  0.107044      -2.23452      -574.344       574.344       1500.10       2074.44    
   5  0.756779     -0.278684      -71.6309       71.6309       1548.55       1620.19    
   6  0.333762      -1.09733      -282.050       282.050       1528.44       1810.49    
   7  0.270335      -1.30809      -336.223       336.223       1537.79       1874.01    
   8  0.666278E-01  -2.70863      -696.208       696.208       1590.44       2286.64    
   9  0.517510     -0.658727      -169.314       169.314       1456.76       1626.08    
  10  0.719680     -0.328949      -84.5507       84.5507       1441.50       1526.06    
  11  0.401542     -0.912442      -234.528       234.528       1597.26       1831.79    
  12  0.408125     -0.896181      -230.348       230.348       1518.51       1748.86    
  13  0.481086     -0.731710      -188.073       188.073       1504.39       1692.47    
  14  0.166952E-01  -4.09263      -1051.94       1051.94       1453.78       2505.72    
  15  0.913266     -0.907286E-01  -23.3202       23.3202       1747.80       1771.12    
  16  0.972084     -0.283134E-01  -7.27748       7.27748       1558.02       1565.30    
  17  0.889421     -0.117184      -30.1202       30.1202       1783.37       1813.49    
  18  0.171754      -1.76169      -452.814       452.814       1713.55       2166.37    
  19  0.925876     -0.770155E-01  -19.7955       19.7955       1508.93       1528.73    
  20  0.992897     -0.712866E-02  -1.83230       1.83230       1758.00       1759.83    
  21  0.118575E-01  -4.43479      -1139.89       1139.89       1584.73       2724.62    
  22  0.492413     -0.708438      -182.092       182.092       1807.25       1989.34    
  23  0.952433     -0.487360E-01  -12.5268       12.5268       1805.63       1818.15    
  24  0.591826     -0.524543      -134.825       134.825       1469.94       1604.77    
  25  0.762199     -0.271548      -69.7967       69.7967       1848.90       1918.69    
  26  0.613492     -0.488588      -125.583       125.583       1863.70       1989.29    
  27  0.134863      -2.00350      -514.965       514.965       1730.88       2245.85    
  28  0.633670     -0.456227      -117.265       117.265       1739.04       1856.30    
  29  0.829625     -0.186782      -48.0091       48.0091       1883.66       1931.67    
  30  0.148219      -1.90906      -490.692       490.692       1802.34       2293.03    
  31  0.198093      -1.61902      -416.141       416.141       1743.72       2159.86    
  32  0.321318      -1.13532      -291.815       291.815       1745.28       2037.09    
  33  0.475408     -0.743582      -191.125       191.125       1826.29       2017.41    
  34  0.196520      -1.62699      -418.190       418.190       1859.36       2277.56    
  35  0.637413     -0.450337      -115.752       115.752       1561.64       1677.39    
  36  0.596751     -0.516255      -132.695       132.695       1718.33       1851.02    
  37  0.351361      -1.04594      -268.842       268.842       1405.15       1673.99    
  38  0.111764      -2.19136      -563.252       563.252       1863.09       2426.35    
  39  0.213579      -1.54375      -396.794       396.794       1456.43       1853.23    
  40  0.799647     -0.223585      -57.4688       57.4688       1569.48       1626.94    
  41  0.670682     -0.399460      -102.674       102.674       1649.67       1752.35    
  42  0.104235      -2.26111      -581.179       581.179       1778.10       2359.28    
  43  0.607160E-01  -2.80155      -720.090       720.090       1721.08       2441.17    
  44  0.462312     -0.771516      -198.305       198.305       1674.94       1873.25    
  45  0.269658      -1.31060      -336.867       336.867       1539.50       1876.37    
  46  0.678606     -0.387714      -99.6553       99.6553       1576.52       1676.18    
  47  0.669051     -0.401895      -103.300       103.300       1744.49       1847.79    
  48  0.551912     -0.594367      -152.772       152.772       1449.54       1602.31    
  49  0.116070E-01  -4.45614      -1145.38       1145.38       1766.20       2911.57    
  50  0.911337     -0.928428E-01  -23.8637       23.8637       1703.70       1727.57    
  51  0.302404      -1.19599      -307.409       307.409       1838.47       2145.88    
  52  0.527926     -0.638800      -164.193       164.193       2074.74       2238.93    
  53  0.204835      -1.58555      -407.538       407.538       1789.28       2196.82    
  54  0.761388     -0.272612      -70.0702       70.0702       1989.46       2059.53    
  55  0.189928      -1.66111      -426.960       426.960       1822.10       2249.06    
  56  0.423830     -0.858422      -220.643       220.643       1717.77       1938.41    
  57  0.895148     -0.110767      -28.4707       28.4707       1843.55       1872.02    
  58  0.109823      -2.20889      -567.757       567.757       1445.36       2013.11    
  59  0.960076     -0.407431E-01  -10.4723       10.4723       1770.52       1781.00    
  60  0.694180     -0.365024      -93.8232       93.8232       1761.85       1855.67    
  61  0.302866      -1.19446      -307.016       307.016       1618.35       1925.36    
  62  0.213503      -1.54410      -396.885       396.885       2179.37       2576.25    
  63  0.949162     -0.521754E-01  -13.4108       13.4108       1716.14       1729.55    
  64  0.912779     -0.912617E-01  -23.4573       23.4573       2414.84       2438.29    
loop,thermsimp(1:2)       66   350.768       763.191    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       2179.14         69.26          1.27         40.20          0.04          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2179.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       66
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       67
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      166     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -311.255       311.255       1441.50       1752.76    
   2  0.840396     -0.173882      -44.6933       44.6933       1508.93       1553.63    
   3  0.165782      -1.79708      -461.909       461.909       1558.02       2019.93    
   4  0.516202E-01  -2.96384      -761.805       761.805       1449.54       2211.34    
   5  0.163201      -1.81278      -465.943       465.943       1469.94       1935.88    
   6  0.201529      -1.60182      -411.721       411.721       1548.55       1960.28    
   7  0.791805     -0.233441      -60.0019       60.0019       1456.76       1516.76    
   8  0.306466      -1.18265      -303.979       303.979       1569.48       1873.45    
   9  0.625963     -0.468465      -120.411       120.411       1405.15       1525.56    
  10  0.255827      -1.36325      -350.401       350.401       1576.52       1926.92    
  11  0.275269      -1.29001      -331.574       331.574       1561.64       1893.22    
  12  0.546374     -0.604451      -155.364       155.364       1504.39       1659.76    
  13  0.738275E-01  -2.60602      -669.834       669.834       1703.70       2373.54    
  14  0.459460     -0.777704      -199.896       199.896       1716.14       1916.03    
  15  0.245891      -1.40287      -360.583       360.583       1518.51       1879.10    
  16  0.818144E-01  -2.50330      -643.431       643.431       1649.67       2293.10    
  17  0.791963     -0.233241      -59.9507       59.9507       1758.00       1817.95    
  18  0.652560     -0.426852      -109.715       109.715       1747.80       1857.51    
  19  0.743237     -0.296740      -76.2719       76.2719       1425.50       1501.78    
  20  0.146095      -1.92350      -494.403       494.403       1770.52       2264.93    
  21  0.747148     -0.291492      -74.9231       74.9231       1528.44       1603.36    
  22  0.935024E-01  -2.36977      -609.108       609.108       1783.37       2392.47    
  23  0.924202     -0.788243E-01  -20.2605       20.2605       1805.63       1825.89    
  24  0.193934      -1.64024      -421.595       421.595       1597.26       2018.86    
  25  0.112499      -2.18481      -561.567       561.567       1744.49       2306.06    
  26  0.609079     -0.495807      -127.439       127.439       1718.33       1845.76    
  27  0.387822     -0.947210      -243.464       243.464       1456.43       1699.90    
  28  0.151976      -1.88403      -484.259       484.259       1761.85       2246.10    
  29  0.820125     -0.198299      -50.9693       50.9693       1739.04       1790.01    
  30  0.100865      -2.29397      -589.626       589.626       1843.55       2433.18    
  31  0.246930      -1.39865      -359.499       359.499       1552.58       1912.08    
  32  0.101973      -2.28305      -586.818       586.818       1674.94       2261.76    
  33  0.389401     -0.943145      -242.419       242.419       1537.79       1780.21    
  34  0.573635     -0.555762      -142.849       142.849       1539.50       1682.35    
  35  0.730896E-01  -2.61607      -672.416       672.416       1848.90       2521.31    
  36  0.260104      -1.34667      -346.139       346.139       1618.35       1964.49    
  37  0.562102     -0.576073      -148.070       148.070       1883.66       2031.73    
  38  0.159056      -1.83850      -472.555       472.555       1717.77       2190.33    
  39  0.779134E-02  -4.85474      -1247.83       1247.83       1863.70       3111.53    
  40  0.693208     -0.366425      -94.1833       94.1833       1807.25       1901.43    
  41  0.600279     -0.510361      -131.180       131.180       1445.36       1576.54    
  42  0.419387     -0.868962      -223.352       223.352       1826.29       2049.64    
  43  0.952036     -0.491524E-01  -12.6338       12.6338       1745.28       1757.91    
  44  0.613955     -0.487834      -125.389       125.389       1989.46       2114.85    
  45  0.842752     -0.171082      -43.9738       43.9738       1500.10       1544.07    
  46  0.733219     -0.310311      -79.7602       79.7602       1838.47       1918.23    
  47  0.776088     -0.253489      -65.1551       65.1551       1743.72       1808.88    
  48  0.965215     -0.354047E-01  -9.10016       9.10016       1713.55       1722.65    
  49  0.487812     -0.717826      -184.505       184.505       1789.28       1973.79    
  50  0.864492     -0.145613      -37.4273       37.4273       2074.74       2112.17    
  51  0.334607      -1.09480      -281.399       281.399       1730.88       2012.28    
  52  0.267438      -1.31887      -338.992       338.992       1822.10       2161.09    
  53  0.333561      -1.09793      -282.204       282.204       1491.51       1773.71    
  54  0.593184     -0.522250      -134.235       134.235       1859.36       1993.60    
  55  0.832475     -0.183352      -47.1276       47.1276       1590.44       1637.56    
  56  0.642050     -0.443089      -113.889       113.889       1802.34       1916.23    
  57  0.799223     -0.224116      -57.6051       57.6051       1778.10       1835.71    
  58  0.184219      -1.69163      -434.805       434.805       1863.09       2297.90    
  59  0.478229     -0.737666      -189.605       189.605       2414.84       2604.44    
  60  0.604888     -0.502712      -129.213       129.213       1721.08       1850.30    
  61  0.575395     -0.552698      -142.062       142.062       1453.78       1595.84    
  62  0.325892E-01  -3.42377      -880.023       880.023       2179.37       3059.39    
  63  0.759877     -0.274599      -70.5810       70.5810       1584.73       1655.31    
  64  0.214378      -1.54002      -395.835       395.835       2179.14       2574.97    
loop,thermsimp(1:2)       67   311.255       44.6933    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168       1733.08         68.96          1.14         40.55          0.71          0.05        111.41
Just calling func    0   0        111.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169       4960.13         68.94          1.13         40.18          0.79          0.04        111.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1733.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       67
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       68
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      168     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -1198.41       1198.41       1425.50       2623.92    
   2  0.714357     -0.336373      -86.4589       86.4589       1456.76       1543.22    
   3  0.997096     -0.290808E-02 -0.747474      0.747474       1405.15       1405.90    
   4  0.905437     -0.993373E-01  -25.5330       25.5330       1500.10       1525.63    
   5  0.307060      -1.18071      -303.482       303.482       1508.93       1812.42    
   6  0.179061      -1.72003      -442.104       442.104       1445.36       1887.46    
   7  0.384312     -0.956301      -245.801       245.801       1453.78       1699.58    
   8  0.901101     -0.104138      -26.7670       26.7670       1528.44       1555.21    
   9  0.606170     -0.500594      -128.669       128.669       1590.44       1719.10    
  10  0.515234     -0.663133      -170.447       170.447       1584.73       1755.18    
  11  0.639447     -0.447152      -114.933       114.933       1504.39       1619.33    
  12  0.820429     -0.197928      -50.8739       50.8739       1539.50       1590.37    
  13  0.521739     -0.650587      -167.222       167.222       1456.43       1623.65    
  14  0.767979     -0.263993      -67.8549       67.8549       1713.55       1781.41    
  15  0.530366     -0.634187      -163.007       163.007       1441.50       1604.51    
  16  0.732471     -0.311332      -80.0226       80.0226       1745.28       1825.30    
  17  0.440461     -0.819933      -210.750       210.750       1491.51       1702.26    
  18  0.595715     -0.517993      -133.141       133.141       1537.79       1670.93    
  19  0.407958     -0.896592      -230.454       230.454       1739.04       1969.49    
  20  0.544683     -0.607550      -156.160       156.160       1743.72       1899.88    
  21  0.611386E-01  -2.79461      -718.307       718.307       1758.00       2476.31    
  22  0.135041      -2.00218      -514.625       514.625       1805.63       2320.25    
  23  0.547242     -0.602864      -154.956       154.956       1778.10       1933.06    
  24  0.214436      -1.53975      -395.765       395.765       1718.33       2114.09    
  25  0.340220      -1.07816      -277.123       277.123       1721.08       1998.21    
  26  0.270394      -1.30787      -336.167       336.167       1747.80       2083.96    
  27  0.605229     -0.502149      -129.069       129.069       1569.48       1698.54    
  28  0.630206     -0.461709      -118.674       118.674       1518.51       1637.19    
  29  0.942476     -0.592449E-01  -15.2279       15.2279       1561.64       1576.87    
  30  0.293125      -1.22716      -315.420       315.420       1807.25       2122.67    
  31  0.526210     -0.642056      -165.029       165.029       1552.58       1717.61    
  32  0.972201     -0.281927E-01  -7.24644       7.24644       1716.14       1723.38    
  33  0.570000     -0.562119      -144.483       144.483       1802.34       1946.82    
  34  0.752945     -0.283763      -72.9365       72.9365       1838.47       1911.41    
  35  0.333005      -1.09960      -282.633       282.633       1576.52       1859.15    
  36  0.430444     -0.842939      -216.663       216.663       1469.94       1686.60    
  37  0.106505      -2.23957      -575.642       575.642       1548.55       2124.20    
  38  0.327953      -1.11488      -286.562       286.562       1618.35       1904.91    
  39  0.586631     -0.533359      -137.091       137.091       1789.28       1926.37    
  40  0.563274     -0.573989      -147.534       147.534       1859.36       2006.90    
  41  0.802100     -0.220522      -56.6813       56.6813       1730.88       1787.56    
  42  0.594871     -0.519411      -133.506       133.506       1597.26       1730.77    
  43  0.816066     -0.203261      -52.2447       52.2447       1558.02       1610.26    
  44  0.170795E-01  -4.06987      -1046.09       1046.09       1883.66       2929.76    
  45  0.554958     -0.588864      -151.357       151.357       1826.29       1977.65    
  46  0.674023     -0.394492      -101.397       101.397       2074.74       2176.14    
  47  0.371758     -0.989512      -254.337       254.337       1989.46       2243.80    
  48  0.309440      -1.17299      -301.497       301.497       1822.10       2123.60    
  49  0.182337      -1.70190      -437.444       437.444       1717.77       2155.21    
  50  0.443504     -0.813049      -208.980       208.980       1449.54       1658.52    
  51  0.407824     -0.896918      -230.538       230.538       1761.85       1992.38    
  52  0.140254      -1.96430      -504.889       504.889       1674.94       2179.83    
  53  0.801043     -0.221840      -57.0202       57.0202       1770.52       1827.54    
  54  0.922923     -0.802099E-01  -20.6166       20.6166       1649.67       1670.29    
  55  0.982391     -0.177663E-01  -4.56652       4.56652       1863.09       1867.66    
  56  0.830509     -0.185717      -47.7354       47.7354       1744.49       1792.22    
  57  0.459056     -0.778583      -200.121       200.121       1703.70       1903.82    
  58  0.918078     -0.854734E-01  -21.9695       21.9695       1783.37       1805.34    
  59  0.858811E-01  -2.45479      -630.962       630.962       1843.55       2474.52    
  60  0.642813E-01  -2.74449      -705.423       705.423       1848.90       2554.32    
  61  0.328642      -1.11279      -286.023       286.023       2179.14       2465.16    
  62  0.238578      -1.43306      -368.344       368.344       2414.84       2783.18    
  63  0.183249      -1.69691      -436.161       436.161       2179.37       2615.53    
  64  0.575307     -0.552852      -142.101       142.101       1733.08       1875.18    
loop,thermsimp(1:2)       68   1198.41       86.4589    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170       1834.55         68.85          1.17         40.49          0.55          0.04        111.11
Just calling func    0   0        111.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1834.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       68
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       69
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      169     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -167.563       167.563       1405.15       1572.71    
   2  0.554375     -0.589913      -151.627       151.627       1500.10       1651.72    
   3  0.404373     -0.905418      -232.722       232.722       1456.76       1689.48    
   4  0.632877     -0.457478      -117.587       117.587       1528.44       1646.03    
   5  0.395261     -0.928209      -238.580       238.580       1561.64       1800.22    
   6  0.715068     -0.335378      -86.2033       86.2033       1539.50       1625.70    
   7  0.918313     -0.852174E-01  -21.9037       21.9037       1441.50       1463.41    
   8  0.529514E-01  -2.93838      -755.261       755.261       1558.02       2313.28    
   9  0.284219      -1.25801      -323.350       323.350       1504.39       1827.74    
  10  0.809402     -0.211460      -54.3522       54.3522       1456.43       1510.78    
  11  0.604758     -0.502928      -129.269       129.269       1518.51       1647.78    
  12  0.624772     -0.470369      -120.900       120.900       1449.54       1570.44    
  13  0.622683     -0.473718      -121.761       121.761       1649.67       1771.43    
  14  0.491656     -0.709976      -182.487       182.487       1537.79       1720.28    
  15  0.823484     -0.194211      -49.9186       49.9186       1469.94       1519.86    
  16  0.185629E-01  -3.98659      -1024.68       1024.68       1569.48       2594.16    
  17  0.911253     -0.929346E-01  -23.8873       23.8873       1453.78       1477.67    
  18  0.825116     -0.192231      -49.4097       49.4097       1491.51       1540.92    
  19  0.902913     -0.102129      -26.2506       26.2506       1552.58       1578.83    
  20  0.869925     -0.139348      -35.8171       35.8171       1590.44       1626.25    
  21  0.135445      -1.99919      -513.858       513.858       1716.14       2229.99    
  22  0.516840     -0.660022      -169.648       169.648       1597.26       1766.91    
  23  0.127583      -2.05899      -529.229       529.229       1584.73       2113.96    
  24  0.237062E-01  -3.74202      -961.822       961.822       1713.55       2675.38    
  25  0.456233     -0.784753      -201.707       201.707       1730.88       1932.59    
  26  0.547397     -0.602581      -154.883       154.883       1744.49       1899.37    
  27  0.231746E-02  -6.06728      -1559.49       1559.49       1783.37       3342.86    
  28  0.467213     -0.760969      -195.594       195.594       1508.93       1704.53    
  29  0.397333     -0.922981      -237.236       237.236       1745.28       1982.51    
  30  0.291343      -1.23325      -316.987       316.987       1770.52       2087.51    
  31  0.964262     -0.363922E-01  -9.35399       9.35399       1576.52       1585.87    
  32  0.260485      -1.34521      -345.763       345.763       1863.09       2208.86    
  33  0.868574     -0.140902      -36.2166       36.2166       1733.08       1769.29    
  34  0.832573     -0.183235      -47.0974       47.0974       1445.36       1492.45    
  35  0.240383      -1.42552      -366.406       366.406       1743.72       2110.13    
  36  0.878342     -0.129719      -33.3420       33.3420       1703.70       1737.05    
  37  0.168707      -1.77959      -457.414       457.414       1618.35       2075.76    
  38  0.348015      -1.05551      -271.301       271.301       1838.47       2109.77    
  39  0.846224     -0.166971      -42.9172       42.9172       1789.28       1832.20    
  40  0.842580     -0.171286      -44.0262       44.0262       1778.10       1822.13    
  41  0.230401      -1.46794      -377.308       377.308       1802.34       2179.65    
  42  0.441962     -0.816531      -209.875       209.875       1739.04       1948.91    
  43  0.772036     -0.258724      -66.5006       66.5006       1826.29       1892.79    
  44  0.970063     -0.303946E-01  -7.81241       7.81241       1761.85       1769.66    
  45  0.610535     -0.493419      -126.825       126.825       1721.08       1847.91    
  46  0.548201     -0.601114      -154.506       154.506       1859.36       2013.87    
  47  0.322533      -1.13155      -290.846       290.846       1747.80       2038.64    
  48  0.194318E-01  -3.94084      -1012.93       1012.93       1718.33       2731.25    
  49  0.219930      -1.51445      -389.262       389.262       1807.25       2196.51    
  50  0.538995E-01  -2.92063      -750.699       750.699       1822.10       2572.80    
  51  0.189941      -1.66104      -426.942       426.942       1548.55       1975.50    
  52  0.339787      -1.07944      -277.451       277.451       1717.77       1995.22    
  53  0.783417     -0.244091      -62.7393       62.7393       2074.74       2137.48    
  54  0.347888      -1.05587      -271.394       271.394       1674.94       1946.34    
  55  0.511342     -0.670716      -172.396       172.396       1989.46       2161.86    
  56  0.656791     -0.420389      -108.054       108.054       1805.63       1913.68    
  57  0.433072E-01  -3.13944      -806.938       806.938       2179.14       2986.08    
  58  0.940019     -0.618557E-01  -15.8989       15.8989       1843.55       1859.45    
  59  0.560131     -0.579584      -148.972       148.972       1758.00       1906.97    
  60  0.335604      -1.09182      -280.635       280.635       1848.90       2129.53    
  61  0.677192     -0.389801      -100.192       100.192       2179.37       2279.56    
  62  0.166447      -1.79308      -460.880       460.880       1425.50       1886.38    
  63  0.966787     -0.337766E-01  -8.68170       8.68170       2414.84       2423.52    
  64  0.501486     -0.690179      -177.399       177.399       1834.55       2011.95    
loop,thermsimp(1:2)       69   167.563       151.627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       1546.78         69.24          1.24         40.14          0.37          0.05        111.04
Just calling func    0   0        111.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172       2710.19         68.97          1.23         40.66          0.37          0.05        111.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1546.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       69
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       70
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      171     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -364.495       364.495       1441.50       1806.00    
   2  0.384023     -0.957054      -245.994       245.994       1453.78       1699.77    
   3  0.672379     -0.396933      -102.025       102.025       1445.36       1547.38    
   4  0.204591      -1.58674      -407.845       407.845       1456.43       1864.28    
   5  0.145151      -1.92998      -496.068       496.068       1469.94       1966.01    
   6  0.235757      -1.44495      -371.401       371.401       1491.51       1862.91    
   7  0.882595     -0.124889      -32.1006       32.1006       1449.54       1481.64    
   8  0.215562      -1.53451      -394.419       394.419       1405.15       1799.57    
   9  0.248905      -1.39068      -357.451       357.451       1552.58       1910.03    
  10  0.695481     -0.363152      -93.3419       93.3419       1576.52       1669.86    
  11  0.515786     -0.662063      -170.172       170.172       1539.50       1709.67    
  12  0.956817     -0.441428E-01  -11.3462       11.3462       1590.44       1601.78    
  13  0.256477      -1.36072      -349.749       349.749       1528.44       1878.19    
  14  0.870409     -0.138792      -35.6741       35.6741       1518.51       1554.19    
  15  0.296335      -1.21627      -312.620       312.620       1500.10       1812.72    
  16  0.563087     -0.574322      -147.620       147.620       1456.76       1604.38    
  17  0.860973     -0.149692      -38.4757       38.4757       1508.93       1547.41    
  18  0.336353      -1.08959      -280.061       280.061       1537.79       1817.85    
  19  0.432238     -0.838780      -215.594       215.594       1703.70       1919.30    
  20  0.411587     -0.887734      -228.177       228.177       1597.26       1825.44    
  21  0.685679     -0.377346      -96.9902       96.9902       1733.08       1830.07    
  22  0.178038E-01  -4.02835      -1035.42       1035.42       1761.85       2797.26    
  23  0.330516      -1.10710      -284.561       284.561       1649.67       1934.23    
  24  0.987115     -0.129685E-01  -3.33332       3.33332       1561.64       1564.98    
  25  0.702947     -0.352474      -90.5974       90.5974       1778.10       1868.70    
  26  0.159040      -1.83860      -472.580       472.580       1504.39       1976.97    
  27  0.329714      -1.10953      -285.186       285.186       1789.28       2074.47    
  28  0.542452     -0.611656      -157.216       157.216       1721.08       1878.30    
  29  0.484074     -0.725518      -186.482       186.482       1843.55       2030.04    
  30  0.574330     -0.554551      -142.538       142.538       1425.50       1568.04    
  31  0.987944     -0.121288E-01  -3.11751       3.11751       1826.29       1829.41    
  32  0.565195E-01  -2.87317      -738.499       738.499       1744.49       2482.99    
  33  0.662626     -0.411545      -105.781       105.781       1758.00       1863.78    
  34  0.462195     -0.771769      -198.370       198.370       1805.63       2003.99    
  35  0.413957     -0.881994      -226.701       226.701       1730.88       1957.58    
  36  0.627825     -0.465493      -119.647       119.647       1674.94       1794.59    
  37  0.373783E-01  -3.28667      -844.781       844.781       1739.04       2583.82    
  38  0.318481      -1.14419      -294.095       294.095       1548.55       1842.65    
  39  0.193037      -1.64487      -422.787       422.787       1745.28       2168.06    
  40  0.246573      -1.40010      -359.872       359.872       1717.77       2077.64    
  41  0.913643     -0.903152E-01  -23.2140       23.2140       1834.55       1857.77    
  42  0.593287     -0.522077      -134.191       134.191       1859.36       1993.56    
  43  0.323913      -1.12728      -289.748       289.748       1747.80       2037.55    
  44  0.270579E-01  -3.60978      -927.831       927.831       1618.35       2546.18    
  45  0.684823     -0.378595      -97.3114       97.3114       1770.52       1867.83    
  46  0.279340      -1.27532      -327.800       327.800       1838.47       2166.27    
  47  0.285511      -1.25348      -322.185       322.185       1743.72       2065.91    
  48  0.361874      -1.01646      -261.263       261.263       1584.73       1845.99    
  49  0.779291     -0.249370      -64.0964       64.0964       1848.90       1912.99    
  50  0.590933     -0.526053      -135.213       135.213       2074.74       2209.95    
  51  0.493821E-01  -3.00817      -773.198       773.198       1989.46       2762.66    
  52  0.736348     -0.306053      -78.6657       78.6657       1802.34       1881.01    
  53  0.300670      -1.20174      -308.887       308.887       1807.25       2116.13    
  54  0.329072      -1.11148      -285.686       285.686       1863.09       2148.78    
  55  0.238483      -1.43346      -368.445       368.445       1716.14       2084.58    
  56  0.296796      -1.21471      -312.220       312.220       2179.37       2491.59    
  57  0.878745     -0.129261      -33.2243       33.2243       1558.02       1591.24    
  58  0.493874     -0.705475      -181.330       181.330       2414.84       2596.17    
  59  0.112522      -2.18461      -561.517       561.517       1822.10       2383.62    
  60  0.642649     -0.442156      -113.649       113.649       1569.48       1683.12    
  61  0.688378     -0.373417      -95.9806       95.9806       1713.55       1809.53    
  62  0.879214     -0.128727      -33.0871       33.0871       1718.33       1751.41    
  63  0.621151E-01  -2.77877      -714.234       714.234       2179.14       2893.37    
  64  0.270748      -1.30657      -335.831       335.831       1546.78       1882.61    
loop,thermsimp(1:2)       70   364.495       245.994    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1758.52         69.30          1.27         40.26          0.04          0.05        110.92
Just calling func    0   0        110.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1758.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       70
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       71
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      172     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -54.0653       54.0653       1449.54       1503.60    
   2  0.601567     -0.508218      -130.629       130.629       1445.36       1575.98    
   3  0.190401      -1.65862      -426.321       426.321       1508.93       1935.25    
   4  0.827263     -0.189632      -48.7417       48.7417       1518.51       1567.26    
   5  0.581677     -0.541840      -139.271       139.271       1561.64       1700.91    
   6  0.680336     -0.385169      -99.0011       99.0011       1425.50       1524.50    
   7  0.641383     -0.444128      -114.156       114.156       1558.02       1672.17    
   8  0.593931     -0.520992      -133.912       133.912       1590.44       1724.35    
   9  0.326400      -1.11963      -287.782       287.782       1456.76       1744.54    
  10  0.964323     -0.363286E-01  -9.33765       9.33765       1576.52       1585.86    
  11  0.481751     -0.730328      -187.718       187.718       1569.48       1757.19    
  12  0.230624E-01  -3.76955      -968.899       968.899       1453.78       2422.68    
  13  0.214859      -1.53777      -395.259       395.259       1539.50       1934.76    
  14  0.325804      -1.12146      -288.252       288.252       1718.33       2006.58    
  15  0.668745     -0.402353      -103.418       103.418       1674.94       1778.36    
  16  0.803263     -0.219073      -56.3089       56.3089       1405.15       1461.46    
  17  0.465531     -0.764577      -196.521       196.521       1441.50       1638.03    
  18  0.589796     -0.527978      -135.708       135.708       1713.55       1849.26    
  19  0.783335     -0.244195      -62.7662       62.7662       1500.10       1562.86    
  20  0.937099     -0.649659E-01  -16.6984       16.6984       1537.79       1554.49    
  21  0.504081     -0.685019      -176.072       176.072       1597.26       1773.34    
  22  0.368431E-01  -3.30109      -848.488       848.488       1826.29       2674.78    
  23  0.462712     -0.770651      -198.083       198.083       1733.08       1931.16    
  24  0.172447      -1.75767      -451.778       451.778       1548.55       2000.33    
  25  0.361979      -1.01617      -261.189       261.189       1584.73       1845.92    
  26  0.616189     -0.484202      -124.456       124.456       1834.55       1959.01    
  27  0.495582     -0.702023      -180.443       180.443       1491.51       1671.95    
  28  0.492859     -0.707532      -181.859       181.859       1758.00       1939.86    
  29  0.189027      -1.66586      -428.182       428.182       1456.43       1884.61    
  30  0.336237      -1.08994      -280.150       280.150       1770.52       2050.67    
  31  0.997382     -0.262184E-02 -0.673898      0.673898       1778.10       1778.77    
  32  0.629287     -0.463168      -119.049       119.049       1528.44       1647.49    
  33  0.226178      -1.48644      -382.063       382.063       1721.08       2103.15    
  34  0.522315     -0.649483      -166.939       166.939       1802.34       1969.28    
  35  0.238835E-02  -6.03715      -1551.75       1551.75       1546.78       3098.53    
  36  0.123092E-01  -4.39741      -1130.28       1130.28       1552.58       2682.86    
  37  0.488141     -0.717152      -184.332       184.332       1848.90       2033.23    
  38  0.925188     -0.777584E-01  -19.9865       19.9865       1703.70       1723.69    
  39  0.676413     -0.390952      -100.487       100.487       1649.67       1750.16    
  40  0.638827     -0.448121      -115.182       115.182       1730.88       1846.06    
  41  0.789998     -0.235725      -60.5890       60.5890       1469.94       1530.53    
  42  0.453703E-01  -3.09290      -794.977       794.977       1504.39       2299.37    
  43  0.866893     -0.142840      -36.7146       36.7146       1859.36       1896.08    
  44  0.122493E-01  -4.40228      -1131.53       1131.53       1805.63       2937.16    
  45  0.172311      -1.75846      -451.981       451.981       1843.55       2295.53    
  46  0.899580     -0.105827      -27.2010       27.2010       1747.80       1775.00    
  47  0.857845     -0.153332      -39.4114       39.4114       1743.72       1783.13    
  48  0.176813      -1.73266      -445.351       445.351       1789.28       2234.63    
  49  0.795271E-01  -2.53166      -650.719       650.719       1717.77       2368.49    
  50  0.461368     -0.773559      -198.830       198.830       1716.14       1914.97    
  51  0.727625     -0.317970      -81.7287       81.7287       1807.25       1888.97    
  52  0.106879      -2.23606      -574.741       574.741       1863.09       2437.83    
  53  0.169411      -1.77543      -456.343       456.343       1838.47       2294.82    
  54  0.150923      -1.89099      -486.046       486.046       1745.28       2231.32    
  55  0.970144     -0.303104E-01  -7.79078       7.79078       2074.74       2082.53    
  56  0.819386     -0.199200      -51.2009       51.2009       1822.10       1873.30    
  57  0.855509     -0.156059      -40.1123       40.1123       1744.49       1784.60    
  58  0.248182      -1.39359      -358.199       358.199       2179.37       2537.56    
  59  0.632181     -0.458580      -117.870       117.870       1618.35       1736.22    
  60  0.626090     -0.468262      -120.359       120.359       1739.04       1859.40    
  61  0.122722      -2.09783      -539.211       539.211       2414.84       2954.05    
  62  0.656077     -0.421477      -108.333       108.333       1989.46       2097.80    
  63  0.811645     -0.208692      -53.6408       53.6408       1761.85       1815.49    
  64  0.241419E-05  -12.9341      -3324.50       3324.50       1758.52       5083.02    
loop,thermsimp(1:2)       71   54.0653       130.629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174       2179.14         68.70          1.16         40.88          0.31          0.05        111.09
Just calling func    0   0        111.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175       5616.84         69.14          1.27         40.37          0.04          0.05        110.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2179.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       71
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       72
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      174     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -35.6975       35.6975       1405.15       1440.85    
   2  0.470451     -0.754063      -193.819       193.819       1449.54       1643.36    
   3  0.615627     -0.485114      -124.690       124.690       1425.50       1550.19    
   4  0.291899      -1.23135      -316.497       316.497       1469.94       1786.44    
   5  0.584822     -0.536448      -137.885       137.885       1537.79       1675.68    
   6  0.681731     -0.383120      -98.4746       98.4746       1500.10       1598.57    
   7  0.680149     -0.385444      -99.0717       99.0717       1518.51       1617.59    
   8  0.560478     -0.578966      -148.813       148.813       1445.36       1594.17    
   9  0.392299     -0.935730      -240.513       240.513       1576.52       1817.03    
  10  0.586793     -0.533083      -137.020       137.020       1441.50       1578.52    
  11  0.461418     -0.773452      -198.803       198.803       1528.44       1727.24    
  12  0.142886      -1.94571      -500.112       500.112       1491.51       1991.62    
  13  0.960325     -0.404831E-01  -10.4055       10.4055       1558.02       1568.42    
  14  0.547176     -0.602984      -154.987       154.987       1561.64       1716.63    
  15  0.817596     -0.201386      -51.7629       51.7629       1703.70       1755.47    
  16  0.184065      -1.69247      -435.020       435.020       1590.44       2025.46    
  17  0.763954     -0.269247      -69.2054       69.2054       1618.35       1687.55    
  18  0.740640     -0.300240      -77.1716       77.1716       1456.76       1533.93    
  19  0.257299      -1.35751      -348.926       348.926       1649.67       1998.60    
  20  0.274950      -1.29117      -331.873       331.873       1569.48       1901.35    
  21  0.850599     -0.161814      -41.5916       41.5916       1597.26       1638.86    
  22  0.265651      -1.32557      -340.716       340.716       1747.80       2088.51    
  23  0.388810     -0.944665      -242.810       242.810       1674.94       1917.75    
  24  0.921262     -0.820106E-01  -21.0794       21.0794       1778.10       1799.18    
  25  0.622168     -0.474545      -121.974       121.974       1743.72       1865.69    
  26  0.831499     -0.184526      -47.4291       47.4291       1744.49       1791.92    
  27  0.777776     -0.251317      -64.5967       64.5967       1761.85       1826.44    
  28  0.519638     -0.654624      -168.260       168.260       1584.73       1752.99    
  29  0.343480      -1.06863      -274.672       274.672       1730.88       2005.55    
  30  0.379182     -0.969738      -249.255       249.255       1713.55       1962.81    
  31  0.509964     -0.673415      -173.090       173.090       1739.04       1912.13    
  32  0.457294E-01  -3.08501      -792.950       792.950       1822.10       2615.05    
  33  0.952238     -0.489400E-01  -12.5792       12.5792       1456.43       1469.01    
  34  0.198116      -1.61890      -416.111       416.111       1807.25       2223.36    
  35  0.863922     -0.146273      -37.5970       37.5970       1859.36       1896.96    
  36  0.765944     -0.266646      -68.5368       68.5368       1716.14       1784.67    
  37  0.849389     -0.163238      -41.9576       41.9576       1733.08       1775.03    
  38  0.488339     -0.716745      -184.227       184.227       1539.50       1723.73    
  39  0.969632     -0.308388E-01  -7.92659       7.92659       1508.93       1516.86    
  40  0.971690     -0.287184E-01  -7.38156       7.38156       1758.00       1765.38    
  41  0.690522     -0.370307      -95.1812       95.1812       1834.55       1929.74    
  42  0.266028      -1.32415      -340.351       340.351       1802.34       2142.69    
  43  0.581296     -0.542495      -139.439       139.439       1548.55       1687.99    
  44  0.636654     -0.451529      -116.058       116.058       1718.33       1834.38    
  45  0.947680     -0.537383E-01  -13.8125       13.8125       1848.90       1862.71    
  46  0.792806     -0.232176      -59.6770       59.6770       1770.52       1830.20    
  47  0.420588     -0.866101      -222.617       222.617       2074.74       2297.35    
  48  0.780043     -0.248407      -63.8487       63.8487       1989.46       2053.31    
  49  0.834700E-01  -2.48327      -638.282       638.282       1721.08       2359.36    
  50  0.707823     -0.345562      -88.8208       88.8208       1745.28       1834.10    
  51  0.836500     -0.178529      -45.8879       45.8879       1789.28       1835.17    
  52  0.111614      -2.19271      -563.598       563.598       1838.47       2402.07    
  53  0.690314     -0.370608      -95.2585       95.2585       1843.55       1938.81    
  54  0.200139      -1.60874      -413.500       413.500       1504.39       1917.89    
  55  0.182543E-01  -4.00336      -1028.99       1028.99       1717.77       2746.76    
  56  0.248611      -1.39187      -357.756       357.756       1453.78       1811.53    
  57  0.951106     -0.501293E-01  -12.8849       12.8849       1863.09       1875.98    
  58  0.576942     -0.550013      -141.372       141.372       2179.37       2320.74    
  59  0.335384      -1.09248      -280.803       280.803       1826.29       2107.09    
  60  0.137719E-01  -4.28512      -1101.42       1101.42       1552.58       2654.00    
  61  0.839758     -0.174642      -44.8888       44.8888       1805.63       1850.51    
  62  0.324640      -1.12504      -289.172       289.172       2414.84       2704.01    
  63  0.758550     -0.276346      -71.0301       71.0301       1546.78       1617.81    
  64  0.704737     -0.349931      -89.9438       89.9438       2179.14       2269.08    
loop,thermsimp(1:2)       72   35.6975       193.819    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       1365.09         68.52          1.12         40.87          0.56          0.05        111.12
Just calling func    0   0        111.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177       1433.35         68.49          1.11         40.65          0.89          0.05        111.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1365.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       72
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       73
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      176     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -76.7316       76.7316       1405.15       1481.88    
   2  0.823468     -0.194230      -49.9236       49.9236       1456.43       1506.36    
   3  0.352913      -1.04153      -267.709       267.709       1508.93       1776.64    
   4  0.268511      -1.31486      -337.963       337.963       1456.76       1794.72    
   5  0.137541      -1.98383      -509.911       509.911       1425.50       1935.41    
   6  0.953738     -0.473661E-01  -12.1747       12.1747       1558.02       1570.19    
   7  0.366602      -1.00348      -257.927       257.927       1441.50       1699.43    
   8  0.861530     -0.149046      -38.3097       38.3097       1445.36       1483.67    
   9  0.190086      -1.66028      -426.746       426.746       1500.10       1926.84    
  10  0.931621     -0.708293E-01  -18.2055       18.2055       1518.51       1536.72    
  11  0.135562      -1.99833      -513.636       513.636       1546.78       2060.42    
  12  0.577052     -0.549824      -141.323       141.323       1597.26       1738.59    
  13  0.937511     -0.645266E-01  -16.5855       16.5855       1449.54       1466.12    
  14  0.836727     -0.178258      -45.8181       45.8181       1537.79       1583.61    
  15  0.124731      -2.08159      -535.038       535.038       1618.35       2153.38    
  16  0.830758     -0.185417      -47.6583       47.6583       1548.55       1596.21    
  17  0.925849     -0.770442E-01  -19.8029       19.8029       1561.64       1581.44    
  18  0.945668     -0.558633E-01  -14.3587       14.3587       1539.50       1553.86    
  19  0.700762     -0.355587      -91.3976       91.3976       1528.44       1619.84    
  20  0.585168E-01  -2.83844      -729.573       729.573       1584.73       2314.30    
  21  0.241985      -1.41888      -364.699       364.699       1703.70       2068.40    
  22  0.426115     -0.853047      -219.261       219.261       1758.00       1977.26    
  23  0.730656     -0.313813      -80.6603       80.6603       1733.08       1813.74    
  24  0.227460      -1.48078      -380.610       380.610       1716.14       2096.75    
  25  0.824070     -0.193500      -49.7358       49.7358       1469.94       1519.68    
  26  0.912829     -0.912064E-01  -23.4431       23.4431       1744.49       1767.93    
  27  0.130860      -2.03363      -522.709       522.709       1778.10       2300.81    
  28  0.126999      -2.06358      -530.407       530.407       1453.78       1984.19    
  29  0.394828E-01  -3.23189      -830.702       830.702       1576.52       2407.22    
  30  0.927793     -0.749466E-01  -19.2637       19.2637       1761.85       1781.11    
  31  0.161762      -1.82163      -468.219       468.219       1770.52       2238.74    
  32  0.510374     -0.672611      -172.883       172.883       1745.28       1918.16    
  33  0.930607     -0.719186E-01  -18.4854       18.4854       1718.33       1736.81    
  34  0.825283E-01  -2.49461      -641.198       641.198       1789.28       2430.48    
  35  0.569143     -0.563624      -144.870       144.870       1805.63       1950.49    
  36  0.732951     -0.310676      -79.8540       79.8540       1848.90       1928.75    
  37  0.554950     -0.588877      -151.361       151.361       1743.72       1895.08    
  38  0.614368     -0.487160      -125.216       125.216       1863.09       1988.31    
  39  0.127889      -2.05659      -528.612       528.612       1859.36       2387.98    
  40  0.510007     -0.673330      -173.068       173.068       1569.48       1742.54    
  41  0.206107      -1.57936      -405.948       405.948       1739.04       2144.99    
  42  0.812962E-01  -2.50966      -645.064       645.064       1674.94       2320.01    
  43  0.711913     -0.339799      -87.3397       87.3397       1504.39       1591.73    
  44  0.649899     -0.430939      -110.765       110.765       1834.55       1945.32    
  45  0.102708      -2.27587      -584.973       584.973       1843.55       2428.53    
  46  0.152702      -1.87927      -483.034       483.034       1713.55       2196.59    
  47  0.827734     -0.189064      -48.5957       48.5957       1491.51       1540.10    
  48  0.558329     -0.582808      -149.801       149.801       1649.67       1799.47    
  49  0.174746      -1.74442      -448.374       448.374       1730.88       2179.26    
  50  0.107247      -2.23262      -573.858       573.858       1590.44       2164.29    
  51  0.988891     -0.111711E-01  -2.87133       2.87133       1989.46       1992.34    
  52  0.388651     -0.945075      -242.915       242.915       1747.80       1990.71    
  53  0.580190     -0.544399      -139.928       139.928       1826.29       1966.22    
  54  0.519409E-01  -2.95765      -760.213       760.213       1802.34       2562.55    
  55  0.418368     -0.871393      -223.977       223.977       1807.25       2031.22    
  56  0.435950     -0.830228      -213.396       213.396       2179.14       2392.53    
  57  0.226091      -1.48682      -382.161       382.161       2074.74       2456.90    
  58  0.371316     -0.990702      -254.643       254.643       2179.37       2434.01    
  59  0.113770      -2.17358      -558.682       558.682       1721.08       2279.76    
  60  0.335886      -1.09098      -280.419       280.419       1838.47       2118.89    
  61  0.733883     -0.309406      -79.5276       79.5276       1822.10       1901.63    
  62  0.127704      -2.05804      -528.985       528.985       1552.58       2081.56    
  63  0.205687      -1.58140      -406.472       406.472       2414.84       2821.31    
  64  0.315213      -1.15451      -296.746       296.746       1365.09       1661.84    
loop,thermsimp(1:2)       73   76.7316       49.9236    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178       1854.52         69.25          1.24         40.54          0.31          0.05        111.38
Just calling func    0   0        111.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1854.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       73
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       74
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      177     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -46.0538       46.0538       1449.54       1495.59    
   2  0.439366     -0.822423      -211.390       211.390       1405.15       1616.54    
   3  0.603094     -0.505682      -129.977       129.977       1445.36       1575.33    
   4  0.695854E-01  -2.66520      -685.044       685.044       1456.43       2141.48    
   5  0.273021      -1.29821      -333.682       333.682       1469.94       1803.62    
   6  0.418319     -0.871511      -224.007       224.007       1518.51       1742.52    
   7  0.688437     -0.373331      -95.9584       95.9584       1491.51       1587.47    
   8  0.400930     -0.913969      -234.920       234.920       1539.50       1774.42    
   9  0.569492     -0.563010      -144.712       144.712       1558.02       1702.73    
  10  0.812441     -0.207712      -53.3888       53.3888       1561.64       1615.03    
  11  0.222094      -1.50465      -386.746       386.746       1537.79       1924.54    
  12  0.695761     -0.362749      -93.2386       93.2386       1504.39       1597.63    
  13  0.909536E-01  -2.39741      -616.212       616.212       1548.55       2164.77    
  14  0.297191      -1.21338      -311.878       311.878       1528.44       1840.32    
  15  0.806729     -0.214767      -55.2023       55.2023       1365.09       1420.30    
  16  0.407021     -0.898891      -231.044       231.044       1441.50       1672.55    
  17  0.520426     -0.653107      -167.870       167.870       1718.33       1886.20    
  18  0.826852     -0.190129      -48.8695       48.8695       1597.26       1646.13    
  19  0.729268     -0.315714      -81.1489       81.1489       1569.48       1650.62    
  20  0.344086      -1.06687      -274.219       274.219       1744.49       2018.71    
  21  0.280849      -1.26994      -326.416       326.416       1508.93       1835.35    
  22  0.301244E-01  -3.50242      -900.238       900.238       1761.85       2662.08    
  23  0.503253     -0.686663      -176.495       176.495       1456.76       1633.26    
  24  0.549007     -0.599644      -154.128       154.128       1649.67       1803.80    
  25  0.814230     -0.205513      -52.8235       52.8235       1733.08       1785.90    
  26  0.641489     -0.443963      -114.113       114.113       1743.72       1857.83    
  27  0.248696      -1.39152      -357.667       357.667       1822.10       2179.77    
  28  0.684472     -0.379107      -97.4430       97.4430       1745.28       1842.72    
  29  0.815126     -0.204413      -52.5408       52.5408       1500.10       1552.64    
  30  0.388210     -0.946208      -243.207       243.207       1848.90       2092.10    
  31  0.670538     -0.399675      -102.730       102.730       1425.50       1528.23    
  32  0.851104     -0.161221      -41.4391       41.4391       1834.55       1875.99    
  33  0.381078     -0.964752      -247.973       247.973       1805.63       2053.60    
  34  0.776256     -0.253273      -65.0995       65.0995       1826.29       1891.39    
  35  0.168040      -1.78355      -458.431       458.431       1758.00       2216.43    
  36  0.229069      -1.47373      -378.797       378.797       1453.78       1832.58    
  37  0.917563     -0.860337E-01  -22.1135       22.1135       1863.09       1885.21    
  38  0.161815      -1.82130      -468.135       468.135       1747.80       2215.93    
  39  0.355170      -1.03516      -266.070       266.070       1989.46       2255.53    
  40  0.221709      -1.50639      -387.191       387.191       1807.25       2194.44    
  41  0.424436     -0.856993      -220.276       220.276       1546.78       1767.06    
  42  0.337698      -1.08560      -279.036       279.036       1703.70       1982.74    
  43  0.574481     -0.554289      -142.471       142.471       1552.58       1695.05    
  44  0.614536     -0.486888      -125.146       125.146       1716.14       1841.28    
  45  0.345602      -1.06247      -273.089       273.089       1838.47       2111.56    
  46  0.330006      -1.10864      -284.958       284.958       1739.04       2024.00    
  47  0.934389     -0.678626E-01  -17.4429       17.4429       1618.35       1635.79    
  48  0.884466     -0.122771      -31.5562       31.5562       1590.44       1621.99    
  49  0.928979     -0.736686E-01  -18.9353       18.9353       1730.88       1749.82    
  50  0.788461     -0.237672      -61.0895       61.0895       1713.55       1774.64    
  51  0.963462     -0.372219E-01  -9.56725       9.56725       1770.52       1780.09    
  52  0.630201     -0.461716      -118.676       118.676       1721.08       1839.76    
  53  0.797085     -0.226794      -58.2935       58.2935       1778.10       1836.39    
  54  0.389249     -0.943537      -242.520       242.520       1584.73       1827.25    
  55  0.660522     -0.414724      -106.598       106.598       1674.94       1781.54    
  56  0.520011     -0.653905      -168.075       168.075       1859.36       2027.44    
  57  0.270094      -1.30899      -336.453       336.453       2179.14       2515.59    
  58  0.218485      -1.52104      -390.956       390.956       1576.52       1967.48    
  59  0.391194     -0.938551      -241.238       241.238       1843.55       2084.79    
  60  0.740024     -0.301073      -77.3856       77.3856       1789.28       1866.67    
  61  0.184403      -1.69063      -434.549       434.549       2179.37       2613.91    
  62  0.309007E-01  -3.47698      -893.697       893.697       2074.74       2968.44    
  63  0.916682     -0.869952E-01  -22.3606       22.3606       1802.34       1824.70    
  64  0.268894      -1.31344      -337.597       337.597       1854.52       2192.12    
loop,thermsimp(1:2)       74   46.0538       211.390    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       1410.23         69.28          1.25         40.13          0.37          0.05        111.07
Just calling func    0   0        111.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180       2085.19         69.09          1.24         40.23          0.44          0.05        111.06
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1410.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       74
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       75
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      179     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -252.259       252.259       1365.09       1617.35    
   2  0.269095      -1.31269      -337.405       337.405       1449.54       1786.94    
   3  0.301960      -1.19746      -307.787       307.787       1425.50       1733.29    
   4  0.927593     -0.751619E-01  -19.3191       19.3191       1500.10       1519.41    
   5  0.783450     -0.244048      -62.7283       62.7283       1445.36       1508.08    
   6  0.716705     -0.333091      -85.6154       85.6154       1491.51       1577.12    
   7  0.728578     -0.316661      -81.3924       81.3924       1504.39       1585.79    
   8  0.752541     -0.284300      -73.0744       73.0744       1561.64       1634.72    
   9  0.111710      -2.19185      -563.377       563.377       1405.15       1968.53    
  10  0.202752E-01  -3.89836      -1002.01       1002.01       1590.44       2592.44    
  11  0.967738     -0.327937E-01  -8.42906       8.42906       1456.76       1465.19    
  12  0.530869     -0.633240      -162.764       162.764       1618.35       1781.11    
  13  0.752699E-01  -2.58668      -664.861       664.861       1597.26       2262.13    
  14  0.658334     -0.418043      -107.451       107.451       1569.48       1676.93    
  15  0.383542     -0.958305      -246.316       246.316       1441.50       1687.82    
  16  0.280803      -1.27010      -326.458       326.458       1552.58       1879.04    
  17  0.976909     -0.233616E-01  -6.00469       6.00469       1558.02       1564.02    
  18  0.611898     -0.491189      -126.252       126.252       1518.51       1644.77    
  19  0.860469     -0.150278      -38.6264       38.6264       1730.88       1769.51    
  20  0.375446     -0.979641      -251.800       251.800       1546.78       1798.58    
  21  0.964573     -0.360702E-01  -9.27123       9.27123       1539.50       1548.77    
  22  0.865663     -0.144259      -37.0793       37.0793       1713.55       1750.63    
  23  0.498009     -0.697137      -179.187       179.187       1770.52       1949.71    
  24  0.732547     -0.311228      -79.9958       79.9958       1674.94       1754.94    
  25  0.293766      -1.22497      -314.858       314.858       1733.08       2047.93    
  26  0.805097     -0.216793      -55.7230       55.7230       1469.94       1525.66    
  27  0.236791      -1.44058      -370.276       370.276       1649.67       2019.95    
  28  0.759809     -0.274688      -70.6039       70.6039       1802.34       1872.95    
  29  0.279804      -1.27367      -327.374       327.374       1584.73       1912.10    
  30  0.862550     -0.147862      -38.0055       38.0055       1453.78       1491.78    
  31  0.784800     -0.242327      -62.2859       62.2859       1508.93       1571.22    
  32  0.231425      -1.46350      -376.167       376.167       1778.10       2154.27    
  33  0.839725     -0.174681      -44.8988       44.8988       1721.08       1765.98    
  34  0.204862      -1.58542      -407.505       407.505       1528.44       1935.94    
  35  0.741170     -0.299525      -76.9879       76.9879       1716.14       1793.12    
  36  0.838703     -0.175898      -45.2116       45.2116       1745.28       1790.49    
  37  0.287711      -1.24580      -320.211       320.211       1743.72       2063.93    
  38  0.937479     -0.645611E-01  -16.5943       16.5943       1789.28       1805.88    
  39  0.188655      -1.66783      -428.688       428.688       1834.55       2263.24    
  40  0.818317     -0.200505      -51.5364       51.5364       1863.09       1914.63    
  41  0.903487     -0.101493      -26.0871       26.0871       1718.33       1744.41    
  42  0.148828      -1.90496      -489.639       489.639       1826.29       2315.93    
  43  0.573616E-01  -2.85838      -734.698       734.698       1537.79       2272.49    
  44  0.792726E-01  -2.53486      -651.543       651.543       1576.52       2228.06    
  45  0.150401      -1.89445      -486.937       486.937       1703.70       2190.64    
  46  0.511444     -0.670518      -172.345       172.345       1744.49       1916.83    
  47  0.179810      -1.71585      -441.031       441.031       1739.04       2180.07    
  48  0.167282      -1.78808      -459.595       459.595       1859.36       2318.96    
  49  0.589016     -0.529302      -136.048       136.048       1805.63       1941.67    
  50  0.974997     -0.253206E-01  -6.50824       6.50824       1843.55       1850.06    
  51  0.750240     -0.287363      -73.8616       73.8616       1848.90       1922.76    
  52  0.695153     -0.363624      -93.4633       93.4633       1838.47       1931.94    
  53  0.166976      -1.78991      -460.065       460.065       1456.43       1916.50    
  54  0.228686      -1.47540      -379.227       379.227       1548.55       1927.78    
  55  0.728220     -0.317152      -81.5185       81.5185       1822.10       1903.62    
  56  0.321968      -1.13330      -291.297       291.297       1854.52       2145.82    
  57  0.494283     -0.704647      -181.118       181.118       1807.25       1988.36    
  58  0.398916     -0.919004      -236.214       236.214       1747.80       1984.01    
  59  0.130321      -2.03776      -523.771       523.771       1758.00       2281.77    
  60  0.131470E-01  -4.33156      -1113.35       1113.35       1989.46       3102.82    
  61  0.868361E-03  -7.04890      -1811.80       1811.80       2179.14       3990.94    
  62  0.572113     -0.558419      -143.532       143.532       2179.37       2322.90    
  63  0.201897      -1.60000      -411.252       411.252       1761.85       2173.10    
  64  0.795960     -0.228206      -58.6565       58.6565       1410.23       1468.89    
loop,thermsimp(1:2)       75   252.259       337.405    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181       1695.14         69.27          1.27         40.40          0.04          0.05        111.03
Just calling func    0   0        111.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    1695.1       0.8838     -3.475      2.522     -102.6     0.2022    
                      0.3306E-01  1.023     -99.70      3.086     0.2948    

                       1.394     0.8371      2.057      7296.      7000.    

                      -1.903      0.000      0.000      0.000     -1.221    



                      -1.897      0.000      0.000      7000.      42.25    

                      -1.321     -2.610     -2.568     -3.336      1.540    

                      -3.126     -3.949      5416.      0.000      9085.    



                       3645.      6623.      9107.      3740.      4151.    

                       3430.     0.1127     0.1325     0.1024     0.2079    

                     -0.2486     0.2446     0.2254     0.2408     0.9137E-01



                      -1.032    -0.1009      0.000     0.3184E-01 0.6286E-01

                      0.1351     0.1800    -0.7116     0.2670     0.2993    

                      0.8845E-01 0.1731    -0.5202     -1.095      7000.    



                      -2.035     -1.636     -2.172     -2.250    -0.3807    

                     -0.3252      9.141      8.617    -0.1620E+05 -5.970    

                       0.000      0.000      9.118      8.623    -0.1969E+05



                      -6.000      0.000      0.000      8.872      9.111    

                     -0.1944E+05 -6.000      0.000      0.000      8.941    

                       8.510    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1695.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       75
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       76
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      180     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -771.400       771.400       1456.76       2228.16    
   2  0.604222     -0.503814      -129.497       129.497       1410.23       1539.73    
   3  0.106168      -2.24273      -576.455       576.455       1453.78       2030.23    
   4  0.342113      -1.07261      -275.697       275.697       1445.36       1721.05    
   5  0.473442     -0.747725      -192.190       192.190       1500.10       1692.29    
   6  0.100866E-01  -4.59655      -1181.46       1181.46       1469.94       2651.41    
   7  0.911848     -0.922817E-01  -23.7194       23.7194       1539.50       1563.22    
   8  0.633547     -0.456421      -117.315       117.315       1558.02       1675.33    
   9  0.729024     -0.316048      -81.2348       81.2348       1508.93       1590.17    
  10  0.620163     -0.477772      -122.803       122.803       1491.51       1614.31    
  11  0.867018     -0.142695      -36.6774       36.6774       1504.39       1541.07    
  12  0.969344E-01  -2.33372      -599.843       599.843       1365.09       1964.94    
  13  0.358466      -1.02592      -263.696       263.696       1561.64       1825.34    
  14  0.953168     -0.479638E-01  -12.3283       12.3283       1518.51       1530.84    
  15  0.684510     -0.379052      -97.4288       97.4288       1569.48       1666.90    
  16  0.482047     -0.729713      -187.560       187.560       1441.50       1629.07    
  17  0.974791     -0.255318E-01  -6.56252       6.56252       1425.50       1432.07    
  18  0.978669     -0.215619E-01  -5.54213       5.54213       1718.33       1723.87    
  19  0.929785     -0.728022E-01  -18.7126       18.7126       1713.55       1732.27    
  20  0.715020     -0.335444      -86.2202       86.2202       1674.94       1761.16    
  21  0.598247     -0.513752      -132.051       132.051       1721.08       1853.13    
  22  0.107080      -2.23418      -574.258       574.258       1730.88       2305.14    
  23  0.559093     -0.581439      -149.449       149.449       1618.35       1767.80    
  24  0.933094     -0.692491E-01  -17.7993       17.7993       1449.54       1467.34    
  25  0.470169E-01  -3.05725      -785.814       785.814       1745.28       2531.09    
  26  0.166768      -1.79115      -460.385       460.385       1716.14       2176.52    
  27  0.331277      -1.10480      -283.970       283.970       1546.78       1830.75    
  28  0.961755     -0.389952E-01  -10.0231       10.0231       1789.28       1799.30    
  29  0.464366E-01  -3.06967      -789.006       789.006       1843.55       2632.56    
  30  0.966136E-03  -6.94221      -1784.38       1784.38       1802.34       3586.72    
  31  0.941012     -0.607999E-01  -15.6276       15.6276       1552.58       1568.21    
  32  0.201947E-01  -3.90233      -1003.03       1003.03       1822.10       2825.13    
  33  0.679249     -0.386768      -99.4121       99.4121       1584.73       1684.14    
  34  0.318772      -1.14328      -293.860       293.860       1863.09       2156.95    
  35  0.388100     -0.946493      -243.280       243.280       1456.43       1699.71    
  36  0.658606     -0.417629      -107.344       107.344       1744.49       1851.83    
  37  0.774362     -0.255715      -65.7273       65.7273       1848.90       1914.62    
  38  0.704871     -0.349740      -89.8947       89.8947       1548.55       1638.45    
  39  0.274189      -1.29394      -332.585       332.585       1838.47       2171.06    
  40  0.881806     -0.125783      -32.3303       32.3303       1528.44       1560.77    
  41  0.198448      -1.61723      -415.680       415.680       1805.63       2221.31    
  42  0.342590      -1.07122      -275.339       275.339       1770.52       2045.86    
  43  0.603787     -0.504534      -129.682       129.682       1405.15       1534.83    
  44  0.667409     -0.404353      -103.932       103.932       1747.80       1851.73    
  45  0.317014      -1.14881      -295.282       295.282       1807.25       2102.53    
  46  0.368458     -0.998429      -256.629       256.629       1649.67       1906.30    
  47  0.139912      -1.96674      -505.518       505.518       1733.08       2238.59    
  48  0.537645     -0.620557      -159.504       159.504       1743.72       1903.22    
  49  0.159021      -1.83872      -472.612       472.612       1854.52       2327.13    
  50  0.729011     -0.316067      -81.2396       81.2396       1778.10       1859.34    
  51  0.802486     -0.220041      -56.5579       56.5579       1761.85       1818.40    
  52  0.249203      -1.38949      -357.144       357.144       1739.04       2096.18    
  53  0.282362      -1.26456      -325.035       325.035       1703.70       2028.74    
  54  0.803878     -0.218308      -56.1123       56.1123       1576.52       1632.63    
  55  0.183401      -1.69608      -435.948       435.948       1597.26       2033.21    
  56  0.144999      -1.93103      -496.338       496.338       1834.55       2330.89    
  57  0.821026     -0.197200      -50.6869       50.6869       1537.79       1588.48    
  58  0.391750     -0.937132      -240.874       240.874       1758.00       1998.87    
  59  0.605745     -0.501297      -128.850       128.850       1826.29       1955.14    
  60  0.759982E-01  -2.57705      -662.385       662.385       1859.36       2521.75    
  61  0.856619     -0.154762      -39.7789       39.7789       2179.37       2219.14    
  62  0.200085      -1.60901      -413.570       413.570       1590.44       2004.01    
  63  0.623969     -0.471654      -121.231       121.231       1989.46       2110.69    
  64  0.668527     -0.402679      -103.502       103.502       1695.14       1798.64    
loop,thermsimp(1:2)       76   771.400       129.497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       1494.23         69.20          1.25         40.34          0.18          0.05        111.01
Just calling func    0   0        111.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183      15950.20         69.29          1.25         40.21          0.18          0.05        110.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1494.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       76
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       77
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      182     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -132.690       132.690       1425.50       1558.19    
   2  0.476930     -0.740385      -190.303       190.303       1449.54       1639.84    
   3  0.845382     -0.167966      -43.1728       43.1728       1518.51       1561.69    
   4  0.397814     -0.921770      -236.925       236.925       1405.15       1642.07    
   5  0.249923      -1.38660      -356.403       356.403       1410.23       1766.64    
   6  0.591552     -0.525005      -134.944       134.944       1504.39       1639.34    
   7  0.143111      -1.94414      -499.707       499.707       1528.44       2028.15    
   8  0.306099      -1.18385      -304.288       304.288       1539.50       1843.79    
   9  0.441827     -0.816836      -209.954       209.954       1552.58       1762.53    
  10  0.504521     -0.684146      -175.848       175.848       1537.79       1713.64    
  11  0.127660      -2.05839      -529.073       529.073       1508.93       2038.01    
  12  0.333524      -1.09804      -282.233       282.233       1491.51       1773.74    
  13  0.130890      -2.03340      -522.650       522.650       1441.50       1964.15    
  14  0.307732      -1.17853      -302.920       302.920       1576.52       1879.44    
  15  0.154434E-01  -4.17057      -1071.97       1071.97       1548.55       2620.53    
  16  0.357863      -1.02761      -264.128       264.128       1569.48       1833.60    
  17  0.271898      -1.30233      -334.741       334.741       1558.02       1892.76    
  18  0.906228E-01  -2.40105      -617.149       617.149       1584.73       2201.88    
  19  0.344142      -1.06670      -274.177       274.177       1500.10       1774.27    
  20  0.392886     -0.934237      -240.130       240.130       1456.43       1696.56    
  21  0.454318     -0.788958      -202.788       202.788       1445.36       1648.14    
  22  0.384129     -0.956778      -245.923       245.923       1718.33       1964.25    
  23  0.354037      -1.03835      -266.891       266.891       1713.55       1980.44    
  24  0.154212      -1.86943      -480.505       480.505       1674.94       2155.45    
  25  0.816320     -0.202949      -52.1647       52.1647       1618.35       1670.51    
  26  0.994970     -0.504291E-02  -1.29619       1.29619       1695.14       1696.43    
  27  0.374719E-01  -3.28416      -844.139       844.139       1789.28       2633.42    
  28  0.227113      -1.48231      -381.001       381.001       1761.85       2142.85    
  29  0.410587     -0.890167      -228.802       228.802       1561.64       1790.44    
  30  0.104540E-01  -4.56077      -1172.27       1172.27       1546.78       2719.05    
  31  0.994826     -0.518730E-02  -1.33331       1.33331       1747.80       1749.13    
  32  0.738930     -0.302553      -77.7660       77.7660       1744.49       1822.26    
  33  0.715904     -0.334209      -85.9027       85.9027       1721.08       1806.98    
  34  0.128324      -2.05320      -527.740       527.740       1778.10       2305.84    
  35  0.856095     -0.155374      -39.9361       39.9361       1743.72       1783.66    
  36  0.423967     -0.858099      -220.560       220.560       1649.67       1870.23    
  37  0.504650     -0.683890      -175.782       175.782       1848.90       2024.68    
  38  0.347036      -1.05833      -272.025       272.025       1826.29       2098.31    
  39  0.906779     -0.978566E-01  -25.1524       25.1524       1365.09       1390.25    
  40  0.616911     -0.483030      -124.155       124.155       1758.00       1882.15    
  41  0.540209     -0.615800      -158.281       158.281       1590.44       1748.72    
  42  0.772932     -0.257564      -66.2024       66.2024       1703.70       1769.91    
  43  0.544989     -0.606989      -156.016       156.016       1453.78       1609.79    
  44  0.951523     -0.496917E-01  -12.7724       12.7724       1597.26       1610.04    
  45  0.172505      -1.75733      -451.692       451.692       1770.52       2222.22    
  46  0.871391     -0.137665      -35.3843       35.3843       1739.04       1774.42    
  47  0.127604      -2.05882      -529.185       529.185       1807.25       2336.43    
  48  0.785934     -0.240882      -61.9147       61.9147       1989.46       2051.38    
  49  0.815977     -0.203369      -52.2726       52.2726       1863.09       1915.37    
  50  0.350587      -1.04815      -269.408       269.408       1838.47       2107.88    
  51  0.739645     -0.301584      -77.5171       77.5171       1716.14       1793.65    
  52  0.996274     -0.373345E-02 -0.959619      0.959619       2179.37       2180.32    
  53  0.303822      -1.19131      -306.207       306.207       1805.63       2111.83    
  54  0.708260     -0.344944      -88.6621       88.6621       1456.76       1545.42    
  55  0.646268     -0.436541      -112.205       112.205       1733.08       1845.28    
  56  0.696585     -0.361566      -92.9344       92.9344       1730.88       1823.82    
  57  0.439732     -0.821591      -211.176       211.176       1854.52       2065.70    
  58  0.791452     -0.233886      -60.1164       60.1164       1834.55       1894.67    
  59  0.202743      -1.59581      -410.177       410.177       1859.36       2269.54    
  60  0.547790E-01  -2.90445      -746.539       746.539       1745.28       2491.82    
  61  0.663631     -0.410029      -105.391       105.391       1843.55       1948.94    
  62  0.838292     -0.176388      -45.3376       45.3376       1469.94       1515.28    
  63  0.450238     -0.797979      -205.107       205.107       1822.10       2027.21    
  64  0.209610      -1.56251      -401.616       401.616       1494.23       1895.84    
loop,thermsimp(1:2)       77   132.690       190.303    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184       1764.73         69.00          1.22         40.85          0.18          0.05        111.29
Just calling func    0   0        111.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1764.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       77
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       78
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      183     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -15.3895       15.3895       1365.09       1380.48    
   2  0.368209     -0.999105      -256.803       256.803       1469.94       1726.74    
   3  0.508630     -0.676034      -173.763       173.763       1456.76       1630.52    
   4  0.744324     -0.295279      -75.8965       75.8965       1425.50       1501.40    
   5  0.401586     -0.912333      -234.500       234.500       1518.51       1753.01    
   6  0.712794     -0.338563      -87.0219       87.0219       1453.78       1540.80    
   7  0.186976      -1.67678      -430.986       430.986       1597.26       2028.25    
   8  0.688451     -0.373311      -95.9533       95.9533       1504.39       1600.35    
   9  0.668652     -0.402492      -103.454       103.454       1449.54       1552.99    
  10  0.656767     -0.420426      -108.063       108.063       1405.15       1513.21    
  11  0.853336     -0.158602      -40.7660       40.7660       1445.36       1486.12    
  12  0.556440     -0.586195      -150.671       150.671       1618.35       1769.02    
  13  0.258558E-01  -3.65522      -939.512       939.512       1695.14       2634.65    
  14  0.121003E-01  -4.41452      -1134.68       1134.68       1456.43       2591.11    
  15  0.150890      -1.89120      -486.101       486.101       1537.79       2023.89    
  16  0.820074     -0.198360      -50.9852       50.9852       1590.44       1641.42    
  17  0.151452      -1.88748      -485.146       485.146       1747.80       2232.94    
  18  0.305465      -1.18592      -304.821       304.821       1552.58       1857.40    
  19  0.533202     -0.628854      -161.636       161.636       1410.23       1571.87    
  20  0.143416      -1.94201      -499.160       499.160       1703.70       2202.86    
  21  0.687081     -0.375303      -96.4651       96.4651       1491.51       1587.97    
  22  0.546247     -0.604685      -155.424       155.424       1500.10       1655.52    
  23  0.356987      -1.03006      -264.758       264.758       1739.04       2003.80    
  24  0.545718     -0.605653      -155.673       155.673       1743.72       1899.39    
  25  0.789688     -0.236117      -60.6898       60.6898       1561.64       1622.33    
  26  0.752086     -0.284904      -73.2298       73.2298       1716.14       1789.37    
  27  0.388816     -0.944650      -242.806       242.806       1721.08       1963.89    
  28  0.988428     -0.116395E-01  -2.99175       2.99175       1744.49       1747.48    
  29  0.124991      -2.07952      -534.504       534.504       1730.88       2265.39    
  30  0.568214     -0.565257      -145.290       145.290       1569.48       1714.77    
  31  0.551032     -0.595962      -153.182       153.182       1539.50       1692.68    
  32  0.423622     -0.858913      -220.769       220.769       1733.08       1953.84    
  33  0.647554     -0.434553      -111.694       111.694       1649.67       1761.37    
  34  0.686255     -0.376506      -96.7745       96.7745       1576.52       1673.30    
  35  0.548072     -0.601349      -154.567       154.567       1758.00       1912.57    
  36  0.880777     -0.126951      -32.6306       32.6306       1558.02       1590.65    
  37  0.894918     -0.111023      -28.5365       28.5365       1834.55       1863.09    
  38  0.241077      -1.42264      -365.665       365.665       1494.23       1859.89    
  39  0.546141     -0.604877      -155.473       155.473       1863.09       2018.57    
  40  0.266590      -1.32204      -339.809       339.809       1843.55       2183.36    
  41  0.575085     -0.553238      -142.200       142.200       1441.50       1583.71    
  42  0.907139     -0.974596E-01  -25.0503       25.0503       1718.33       1743.38    
  43  0.469109     -0.756920      -194.553       194.553       1713.55       1908.11    
  44  0.738008     -0.303801      -78.0868       78.0868       1848.90       1926.98    
  45  0.557598     -0.584116      -150.137       150.137       1822.10       1972.24    
  46  0.305677      -1.18523      -304.642       304.642       1528.44       1833.08    
  47  0.392927     -0.934131      -240.102       240.102       1508.93       1749.04    
  48  0.121997      -2.10376      -540.735       540.735       1989.46       2530.20    
  49  0.712082     -0.339563      -87.2788       87.2788       1854.52       1941.80    
  50  0.342132      -1.07256      -275.683       275.683       1826.29       2101.97    
  51  0.288307      -1.24373      -319.680       319.680       1838.47       2158.15    
  52  0.554777     -0.589188      -151.441       151.441       1805.63       1957.07    
  53  0.116597E-01  -4.45161      -1144.21       1144.21       1761.85       2906.06    
  54  0.844148     -0.169427      -43.5483       43.5483       1674.94       1718.49    
  55  0.910896     -0.933267E-01  -23.9880       23.9880       2179.37       2203.35    
  56  0.257100      -1.35829      -349.126       349.126       1584.73       1933.86    
  57  0.340199      -1.07823      -277.139       277.139       1770.52       2047.66    
  58  0.656010     -0.421580      -108.360       108.360       1859.36       1967.72    
  59  0.894739     -0.111224      -28.5882       28.5882       1778.10       1806.69    
  60  0.226933      -1.48310      -381.206       381.206       1807.25       2188.45    
  61  0.478182     -0.737763      -189.630       189.630       1745.28       1934.91    
  62  0.361863      -1.01649      -261.272       261.272       1548.55       1809.83    
  63  0.415757     -0.877654      -225.586       225.586       1789.28       2014.87    
  64  0.540919     -0.614487      -157.943       157.943       1764.73       1922.68    
loop,thermsimp(1:2)       78   15.3895       256.803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       1374.13         69.15          1.23         40.23          0.44          0.05        111.10
Just calling func    0   0        111.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186       1440.74         69.22          1.24         40.35          0.49          0.05        111.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1374.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       78
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       79
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      185     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -680.297       680.297       1365.09       2045.39    
   2  0.952063     -0.491245E-01  -12.6266       12.6266       1445.36       1457.98    
   3  0.207928      -1.57057      -403.687       403.687       1425.50       1829.19    
   4  0.564009     -0.572686      -147.199       147.199       1405.15       1552.35    
   5  0.461636     -0.772979      -198.681       198.681       1453.78       1652.46    
   6  0.683812     -0.380072      -97.6909       97.6909       1449.54       1547.23    
   7  0.153569      -1.87360      -481.578       481.578       1410.23       1891.81    
   8  0.605650     -0.501453      -128.890       128.890       1441.50       1570.39    
   9  0.257296      -1.35753      -348.930       348.930       1491.51       1840.44    
  10  0.517987     -0.657805      -169.077       169.077       1558.02       1727.10    
  11  0.571129     -0.560140      -143.975       143.975       1504.39       1648.37    
  12  0.735134     -0.307703      -79.0898       79.0898       1561.64       1640.73    
  13  0.766340E-02  -4.87130      -1252.08       1252.08       1456.76       2708.85    
  14  0.435932     -0.830269      -213.407       213.407       1590.44       1803.84    
  15  0.513945     -0.665639      -171.091       171.091       1500.10       1671.19    
  16  0.447046     -0.805095      -206.936       206.936       1576.52       1783.46    
  17  0.244813      -1.40726      -361.712       361.712       1539.50       1901.21    
  18  0.183933      -1.69318      -435.204       435.204       1569.48       2004.68    
  19  0.413164     -0.883910      -227.194       227.194       1674.94       1902.14    
  20  0.869613     -0.139707      -35.9094       35.9094       1469.94       1505.85    
  21  0.853260     -0.158691      -40.7887       40.7887       1718.33       1759.11    
  22  0.138067      -1.98001      -508.928       508.928       1744.49       2253.42    
  23  0.940528     -0.613134E-01  -15.7596       15.7596       1508.93       1524.69    
  24  0.694939     -0.363931      -93.5423       93.5423       1518.51       1612.06    
  25  0.962776     -0.379346E-01  -9.75045       9.75045       1649.67       1659.42    
  26  0.378266     -0.972158      -249.877       249.877       1618.35       1868.22    
  27  0.855922     -0.155576      -39.9881       39.9881       1716.14       1756.12    
  28  0.393452     -0.932797      -239.760       239.760       1778.10       2017.86    
  29  0.253590      -1.37204      -352.659       352.659       1548.55       1901.21    
  30  0.777948     -0.251096      -64.5399       64.5399       1528.44       1592.98    
  31  0.654890     -0.423288      -108.799       108.799       1552.58       1661.38    
  32  0.690016E-01  -2.67363      -687.210       687.210       1494.23       2181.44    
  33  0.101034      -2.29229      -589.195       589.195       1834.55       2423.75    
  34  0.684533     -0.379019      -97.4203       97.4203       1743.72       1841.14    
  35  0.592603     -0.523230      -134.487       134.487       1713.55       1848.04    
  36  0.904830     -0.100009      -25.7055       25.7055       1758.00       1783.70    
  37  0.400244     -0.915681      -235.360       235.360       1764.73       2000.09    
  38  0.698191     -0.359263      -92.3425       92.3425       1848.90       1941.24    
  39  0.551449E-01  -2.89779      -744.828       744.828       1584.73       2329.56    
  40  0.500493     -0.692161      -177.908       177.908       1745.28       1923.18    
  41  0.289592      -1.23928      -318.537       318.537       1854.52       2173.06    
  42  0.447163     -0.804833      -206.869       206.869       1733.08       1939.94    
  43  0.690940     -0.369702      -95.0255       95.0255       1805.63       1900.65    
  44  0.631068     -0.460341      -118.323       118.323       1721.08       1839.41    
  45  0.926041     -0.768363E-01  -19.7495       19.7495       1859.36       1879.11    
  46  0.436187     -0.829684      -213.256       213.256       1822.10       2035.36    
  47  0.314139      -1.15792      -297.623       297.623       1739.04       2036.66    
  48  0.363110      -1.01305      -260.387       260.387       1789.28       2049.67    
  49  0.446982     -0.805238      -206.973       206.973       1863.09       2070.07    
  50  0.541529     -0.613360      -157.654       157.654       1537.79       1695.44    
  51  0.415529     -0.878202      -225.727       225.727       1597.26       1822.99    
  52  0.559792     -0.580190      -149.128       149.128       1770.52       1919.65    
  53  0.931332     -0.711389E-01  -18.2850       18.2850       1826.29       1844.57    
  54  0.653342     -0.425655      -109.407       109.407       1838.47       1947.88    
  55  0.254324E-01  -3.67173      -943.756       943.756       1843.55       2787.31    
  56  0.365877      -1.00546      -258.436       258.436       1807.25       2065.68    
  57  0.187661      -1.67312      -430.046       430.046       1703.70       2133.75    
  58  0.592744     -0.522993      -134.426       134.426       2179.37       2313.79    
  59  0.211036      -1.55573      -399.873       399.873       1747.80       2147.67    
  60  0.718956     -0.329955      -84.8093       84.8093       1730.88       1815.69    
  61  0.170082      -1.77147      -455.327       455.327       1989.46       2444.79    
  62  0.190051      -1.66046      -426.794       426.794       1456.43       1883.23    
  63  0.275889      -1.28776      -330.996       330.996       1695.14       2026.13    
  64  0.670664     -0.399487      -102.681       102.681       1374.13       1476.81    
loop,thermsimp(1:2)       79   680.297       12.6266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       1358.95         69.38          1.26         40.21          0.36          0.05        111.26
Just calling func    0   0        111.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188       1339.96         69.44          1.27         40.16          0.03          0.05        110.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1339.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       79
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       80
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      187     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -103.541       103.541       1445.36       1548.90    
   2  0.238500      -1.43339      -368.427       368.427       1374.13       1742.55    
   3  0.689211     -0.372208      -95.6698       95.6698       1469.94       1565.61    
   4  0.540774     -0.614753      -158.012       158.012       1508.93       1666.95    
   5  0.178857      -1.72117      -442.398       442.398       1449.54       1891.94    
   6  0.884253     -0.123012      -31.6182       31.6182       1405.15       1436.77    
   7  0.755546     -0.280314      -72.0500       72.0500       1441.50       1513.55    
   8  0.654086E-01  -2.72710      -700.955       700.955       1528.44       2229.39    
   9  0.802958     -0.219452      -56.4065       56.4065       1518.51       1574.92    
  10  0.840665     -0.173562      -44.6110       44.6110       1561.64       1606.25    
  11  0.864930     -0.145107      -37.2972       37.2972       1504.39       1541.69    
  12  0.728243     -0.317120      -81.5103       81.5103       1453.78       1535.29    
  13  0.453086     -0.791672      -203.486       203.486       1649.67       1853.16    
  14  0.702549E-01  -2.65563      -682.583       682.583       1552.58       2235.16    
  15  0.610595     -0.493321      -126.800       126.800       1500.10       1626.90    
  16  0.728410E-02  -4.92206      -1265.13       1265.13       1537.79       2802.92    
  17  0.913763     -0.901841E-01  -23.1803       23.1803       1558.02       1581.20    
  18  0.165001      -1.80180      -463.123       463.123       1716.14       2179.26    
  19  0.917747E-01  -2.38842      -613.902       613.902       1718.33       2332.23    
  20  0.338507      -1.08321      -278.421       278.421       1576.52       1854.94    
  21  0.357666      -1.02815      -264.270       264.270       1758.00       2022.27    
  22  0.389441     -0.943044      -242.393       242.393       1590.44       1832.83    
  23  0.879897     -0.127950      -32.8874       32.8874       1730.88       1763.77    
  24  0.418897     -0.870129      -223.652       223.652       1597.26       1820.92    
  25  0.838426     -0.176230      -45.2968       45.2968       1425.50       1470.80    
  26  0.185169      -1.68649      -433.482       433.482       1721.08       2154.56    
  27  0.200952      -1.60469      -412.457       412.457       1491.51       1903.96    
  28  0.877256     -0.130957      -33.6602       33.6602       1743.72       1777.38    
  29  0.386592     -0.950385      -244.280       244.280       1826.29       2070.57    
  30  0.888706     -0.117988      -30.3269       30.3269       1713.55       1743.88    
  31  0.105408      -2.24991      -578.302       578.302       1618.35       2196.65    
  32  0.994268     -0.574873E-02  -1.47761       1.47761       1859.36       1860.84    
  33  0.764077     -0.269087      -69.1642       69.1642       1456.43       1525.60    
  34  0.812108     -0.208121      -53.4941       53.4941       1410.23       1463.73    
  35  0.121669      -2.10645      -541.428       541.428       1805.63       2347.05    
  36  0.637909     -0.449559      -115.551       115.551       1539.50       1655.05    
  37  0.316007E-02  -5.75716      -1479.78       1479.78       1548.55       3028.34    
  38  0.229677      -1.47108      -378.116       378.116       1674.94       2053.06    
  39  0.521374     -0.651288      -167.402       167.402       1770.52       1937.93    
  40  0.391402     -0.938019      -241.102       241.102       1745.28       1986.38    
  41  0.327357      -1.11670      -287.030       287.030       1733.08       2020.11    
  42  0.963139     -0.375576E-01  -9.65355       9.65355       1848.90       1858.55    
  43  0.174261      -1.74720      -449.088       449.088       1838.47       2287.56    
  44  0.331602      -1.10382      -283.718       283.718       1764.73       2048.45    
  45  0.526338     -0.641812      -164.967       164.967       1569.48       1734.44    
  46  0.413265     -0.883667      -227.132       227.132       1778.10       2005.23    
  47  0.541510E-02  -5.21856      -1341.34       1341.34       1695.14       3036.48    
  48  0.781613     -0.246396      -63.3318       63.3318       1822.10       1885.43    
  49  0.656825     -0.420337      -108.041       108.041       1739.04       1847.08    
  50  0.584791     -0.536501      -137.899       137.899       1365.09       1502.99    
  51  0.811204     -0.209236      -53.7805       53.7805       1789.28       1843.06    
  52  0.421027     -0.865059      -222.349       222.349       1807.25       2029.59    
  53  0.663739     -0.409866      -105.349       105.349       1863.09       1968.44    
  54  0.164765      -1.80323      -463.491       463.491       1703.70       2167.19    
  55  0.883187E-01  -2.42680      -623.768       623.768       1747.80       2371.57    
  56  0.825424     -0.191858      -49.3138       49.3138       1854.52       1903.83    
  57  0.201966E-01  -3.90224      -1003.00       1003.00       1494.23       2497.23    
  58  0.174898      -1.74355      -448.150       448.150       1744.49       2192.64    
  59  0.477008     -0.740222      -190.261       190.261       2179.37       2369.63    
  60  0.162167E-01  -4.12171      -1059.42       1059.42       1584.73       2644.15    
  61  0.378219     -0.972282      -249.908       249.908       1834.55       2084.46    
  62  0.980713     -0.194752E-01  -5.00578       5.00578       1989.46       1994.47    
  63  0.232487      -1.45892      -374.990       374.990       1456.76       1831.75    
  64  0.962055     -0.386832E-01  -9.94286       9.94286       1339.96       1349.91    
loop,thermsimp(1:2)       80   103.541       368.427    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189       2160.91         68.75          1.18         40.72          0.28          0.05        110.98
Just calling func    0   0        110.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2160.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       80
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       81
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      188     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -336.520       336.520       1339.96       1676.48    
   2  0.879265     -0.128669      -33.0721       33.0721       1405.15       1438.22    
   3  0.684902     -0.378479      -97.2816       97.2816       1410.23       1507.52    
   4  0.893896     -0.112166      -28.8303       28.8303       1425.50       1454.33    
   5  0.476761     -0.740739      -190.394       190.394       1365.09       1555.49    
   6  0.755167     -0.280817      -72.1791       72.1791       1441.50       1513.68    
   7  0.452407     -0.793173      -203.872       203.872       1456.43       1660.30    
   8  0.723906     -0.323093      -83.0456       83.0456       1453.78       1536.82    
   9  0.451260     -0.795711      -204.524       204.524       1504.39       1708.92    
  10  0.668265     -0.403071      -103.603       103.603       1445.36       1548.96    
  11  0.777249     -0.251995      -64.7710       64.7710       1469.94       1534.71    
  12  0.342240      -1.07224      -275.602       275.602       1518.51       1794.12    
  13  0.639156     -0.447606      -115.050       115.050       1558.02       1673.07    
  14  0.166924      -1.79022      -460.145       460.145       1561.64       2021.79    
  15  0.375260     -0.980137      -251.928       251.928       1500.10       1752.02    
  16  0.299730      -1.20487      -309.692       309.692       1539.50       1849.19    
  17  0.407119     -0.898650      -230.983       230.983       1508.93       1739.92    
  18  0.762992E-01  -2.57309      -661.370       661.370       1569.48       2230.85    
  19  0.281066      -1.26917      -326.217       326.217       1374.13       1700.34    
  20  0.220512      -1.51180      -388.583       388.583       1713.55       2102.14    
  21  0.389846     -0.942004      -242.126       242.126       1730.88       1973.01    
  22  0.660048     -0.415443      -106.783       106.783       1743.72       1850.50    
  23  0.150026      -1.89695      -487.578       487.578       1597.26       2084.84    
  24  0.113767      -2.17360      -558.687       558.687       1456.76       2015.45    
  25  0.810589     -0.209994      -53.9754       53.9754       1590.44       1644.41    
  26  0.247911      -1.39468      -358.480       358.480       1789.28       2147.76    
  27  0.408875     -0.894345      -229.876       229.876       1739.04       1968.91    
  28  0.310528      -1.16948      -300.595       300.595       1649.67       1950.27    
  29  0.663027     -0.410939      -105.625       105.625       1576.52       1682.15    
  30  0.798362     -0.225193      -57.8820       57.8820       1848.90       1906.78    
  31  0.564885     -0.571133      -146.800       146.800       1859.36       2006.16    
  32  0.473510E-02  -5.35275      -1375.83       1375.83       1822.10       3197.93    
  33  0.933475E-01  -2.37143      -609.535       609.535       1449.54       2059.07    
  34  0.931702     -0.707423E-01  -18.1831       18.1831       1854.52       1872.70    
  35  0.341741      -1.07370      -275.977       275.977       1491.51       1767.48    
  36  0.171330      -1.76417      -453.449       453.449       1770.52       2223.97    
  37  0.355860      -1.03322      -265.571       265.571       1863.09       2128.66    
  38  0.469639     -0.755790      -194.263       194.263       1745.28       1939.54    
  39  0.805376     -0.216446      -55.6337       55.6337       1989.46       2045.10    
  40  0.651615     -0.428301      -110.088       110.088       1778.10       1888.19    
  41  0.126831      -2.06490      -530.747       530.747       1733.08       2263.82    
  42  0.715737     -0.334442      -85.9627       85.9627       1758.00       1843.96    
  43  0.444007     -0.811915      -208.689       208.689       1807.25       2015.93    
  44  0.887105     -0.119791      -30.7903       30.7903       1764.73       1795.52    
  45  0.492139     -0.708993      -182.235       182.235       1674.94       1857.18    
  46  0.590315     -0.527098      -135.482       135.482       1826.29       1961.77    
  47  0.313130      -1.16114      -298.450       298.450       1834.55       2133.00    
  48  0.824070     -0.193500      -49.7359       49.7359       1721.08       1770.82    
  49  0.785026     -0.242039      -62.2120       62.2120       1703.70       1765.92    
  50  0.105781      -2.24638      -577.394       577.394       1716.14       2293.53    
  51  0.644933     -0.438608      -112.737       112.737       1744.49       1857.23    
  52  0.656932     -0.420175      -107.999       107.999       1618.35       1726.35    
  53  0.418239     -0.871703      -224.056       224.056       1528.44       1752.50    
  54  0.191132      -1.65479      -425.335       425.335       1552.58       1977.91    
  55  0.493587     -0.706055      -181.479       181.479       1838.47       2019.95    
  56  0.490289     -0.712761      -183.203       183.203       1718.33       1901.53    
  57  0.703124     -0.352222      -90.5327       90.5327       1805.63       1896.16    
  58  0.514219E-01  -2.96769      -762.794       762.794       2179.37       2942.16    
  59  0.967122     -0.334307E-01  -8.59280       8.59280       1747.80       1756.39    
  60  0.164565      -1.80445      -463.802       463.802       1494.23       1958.03    
  61  0.787129     -0.239363      -61.5242       61.5242       1584.73       1646.25    
  62  0.877224     -0.130993      -33.6695       33.6695       1537.79       1571.46    
  63  0.826666     -0.190355      -48.9274       48.9274       1548.55       1597.48    
  64  0.478850     -0.736368      -189.271       189.271       2160.91       2350.18    
loop,thermsimp(1:2)       81   336.520       33.0721    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190       1254.85         69.30          1.25         40.22          0.12          0.05        110.94
Just calling func    0   0        110.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191       1215.97         69.16          1.19         40.44          0.05          0.05        110.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1215.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       81
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       82
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      190     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -1116.22       1116.22       1405.15       2521.37    
   2  0.906957E-01  -2.40025      -616.942       616.942       1425.50       2042.45    
   3  0.973677     -0.266758E-01  -6.85657       6.85657       1410.23       1417.09    
   4  0.764409     -0.268653      -69.0526       69.0526       1441.50       1510.56    
   5  0.647718     -0.434300      -111.629       111.629       1469.94       1581.57    
   6  0.450945     -0.796410      -204.703       204.703       1453.78       1658.48    
   7  0.342138      -1.07254      -275.678       275.678       1445.36       1721.03    
   8  0.491560     -0.710170      -182.537       182.537       1365.09       1547.63    
   9  0.728901     -0.316218      -81.2784       81.2784       1537.79       1619.07    
  10  0.361124      -1.01853      -261.797       261.797       1548.55       1810.35    
  11  0.187026      -1.67651      -430.918       430.918       1590.44       2021.35    
  12  0.560514     -0.578901      -148.797       148.797       1584.73       1733.53    
  13  0.218776      -1.51971      -390.615       390.615       1456.43       1847.05    
  14  0.109271      -2.21392      -569.051       569.051       1558.02       2127.07    
  15  0.263420E-01  -3.63659      -934.724       934.724       1339.96       2274.69    
  16  0.654642     -0.423667      -108.896       108.896       1576.52       1685.42    
  17  0.975959     -0.243343E-01  -6.25471       6.25471       1374.13       1380.38    
  18  0.107212      -2.23295      -573.941       573.941       1504.39       2078.33    
  19  0.972340     -0.280494E-01  -7.20962       7.20962       1618.35       1625.56    
  20  0.259158      -1.35032      -347.076       347.076       1508.93       1856.01    
  21  0.889970     -0.116568      -29.9617       29.9617       1500.10       1530.06    
  22  0.956672     -0.442943E-01  -11.3851       11.3851       1528.44       1539.82    
  23  0.299261      -1.20644      -310.094       310.094       1747.80       2057.89    
  24  0.114836      -2.16425      -556.283       556.283       1703.70       2259.99    
  25  0.728848     -0.316291      -81.2971       81.2971       1491.51       1572.80    
  26  0.650336     -0.430267      -110.593       110.593       1721.08       1831.67    
  27  0.816983     -0.202137      -51.9560       51.9560       1518.51       1570.47    
  28  0.507860     -0.677550      -174.153       174.153       1764.73       1938.89    
  29  0.920661     -0.826634E-01  -21.2472       21.2472       1758.00       1779.25    
  30  0.253772      -1.37132      -352.475       352.475       1539.50       1891.97    
  31  0.667512     -0.404198      -103.892       103.892       1743.72       1847.61    
  32  0.772715     -0.257844      -66.2745       66.2745       1674.94       1741.22    
  33  0.757620     -0.277573      -71.3454       71.3454       1744.49       1815.83    
  34  0.776421     -0.253060      -65.0448       65.0448       1854.52       1919.56    
  35  0.886642     -0.120314      -30.9247       30.9247       1778.10       1809.03    
  36  0.238693E-01  -3.73516      -960.060       960.060       1805.63       2765.68    
  37  0.303957      -1.19087      -306.093       306.093       1718.33       2024.42    
  38  0.875267     -0.133226      -34.2435       34.2435       1848.90       1883.14    
  39  0.144246      -1.93624      -497.677       497.677       1745.28       2242.95    
  40  0.993963     -0.605564E-02  -1.55650       1.55650       1649.67       1651.23    
  41  0.172168      -1.75928      -452.194       452.194       1494.23       1946.42    
  42  0.979713     -0.204952E-01  -5.26795       5.26795       1826.29       1831.56    
  43  0.938694     -0.632658E-01  -16.2614       16.2614       1739.04       1755.30    
  44  0.716061     -0.333990      -85.8465       85.8465       1730.88       1816.73    
  45  0.764601     -0.268402      -68.9881       68.9881       1552.58       1621.57    
  46  0.546951     -0.603396      -155.093       155.093       1859.36       2014.46    
  47  0.104442      -2.25912      -580.668       580.668       1456.76       2037.43    
  48  0.669980     -0.400508      -102.944       102.944       1807.25       1910.19    
  49  0.255048      -1.36630      -351.185       351.185       1838.47       2189.66    
  50  0.761153     -0.272921      -70.1497       70.1497       1561.64       1631.79    
  51  0.273269      -1.29730      -333.449       333.449       1989.46       2322.91    
  52  0.789047E-01  -2.53951      -652.739       652.739       1449.54       2102.28    
  53  0.723703     -0.323374      -83.1178       83.1178       1597.26       1680.38    
  54  0.535422     -0.624699      -160.568       160.568       1713.55       1874.12    
  55  0.394266     -0.930730      -239.228       239.228       1863.09       2102.32    
  56  0.334209      -1.09599      -281.705       281.705       1834.55       2116.26    
  57  0.713084     -0.338156      -86.9172       86.9172       1789.28       1876.20    
  58  0.335811      -1.09121      -280.476       280.476       1770.52       2051.00    
  59  0.877329     -0.130873      -33.6387       33.6387       1569.48       1603.11    
  60  0.804760     -0.217212      -55.8306       55.8306       1733.08       1788.91    
  61  0.676806     -0.390371      -100.338       100.338       1716.14       1816.47    
  62  0.139025      -1.97310      -507.153       507.153       2160.91       2668.06    
  63  0.453238     -0.791339      -203.400       203.400       2179.37       2382.77    
  64  0.174629      -1.74509      -448.547       448.547       1215.97       1664.52    
loop,thermsimp(1:2)       82   1116.22       616.942    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192       1187.13         69.26          1.25         40.29          0.04          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193       1389.93         69.04          1.21         40.49          0.35          0.05        111.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1187.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    257.033               190
loop is:       82
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    257.033               190
loop is:       83
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    128.516               253

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      192     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -63.7077       63.7077       1374.13       1437.83    
   2  0.266275      -1.32323      -170.056       170.056       1410.23       1580.29    
   3  0.545538     -0.605984      -77.8789       77.8789       1441.50       1519.38    
   4  0.196234      -1.62845      -209.282       209.282       1500.10       1709.38    
   5  0.786411     -0.240275      -30.8794       30.8794       1528.44       1559.32    
   6  0.453912     -0.789853      -101.509       101.509       1365.09       1466.60    
   7  0.900549     -0.104751      -13.4622       13.4622       1518.51       1531.98    
   8  0.339919      -1.07905      -138.675       138.675       1491.51       1630.18    
   9  0.511643     -0.670128      -86.1225       86.1225       1469.94       1556.06    
  10  0.628202     -0.464894      -59.7465       59.7465       1569.48       1629.22    
  11  0.672886E-01  -2.69876      -346.836       346.836       1537.79       1884.63    
  12  0.518493     -0.656829      -84.4134       84.4134       1552.58       1636.99    
  13  0.994926     -0.508642E-02 -0.653688      0.653688       1618.35       1619.00    
  14  0.733191     -0.310349      -39.8849       39.8849       1561.64       1601.53    
  15  0.952818     -0.483318E-01  -6.21144       6.21144       1649.67       1655.88    
  16  0.735955     -0.306586      -39.4014       39.4014       1453.78       1493.18    
  17  0.743149     -0.296859      -38.1513       38.1513       1215.97       1254.12    
  18  0.549375     -0.598975      -76.9781       76.9781       1597.26       1674.24    
  19  0.355140      -1.03524      -133.046       133.046       1576.52       1709.57    
  20  0.482165     -0.729469      -93.7487       93.7487       1445.36       1539.10    
  21  0.577197     -0.549571      -70.6290       70.6290       1584.73       1655.36    
  22  0.107316E-01  -4.53456      -582.766       582.766       1674.94       2257.71    
  23  0.923969     -0.790764E-01  -10.1626       10.1626       1739.04       1749.20    
  24  0.810451     -0.210164      -27.0095       27.0095       1758.00       1785.01    
  25  0.143346      -1.94249      -249.642       249.642       1733.08       1982.72    
  26  0.994184     -0.583318E-02 -0.749660      0.749660       1778.10       1778.85    
  27  0.870737     -0.138415      -17.7886       17.7886       1548.55       1566.34    
  28  0.970691     -0.297469E-01  -3.82297       3.82297       1744.49       1748.31    
  29  0.351269      -1.04620      -134.454       134.454       1716.14       1850.59    
  30  0.464982     -0.765756      -98.4122       98.4122       1730.88       1829.29    
  31  0.921785     -0.814432E-01  -10.4668       10.4668       1826.29       1836.76    
  32  0.110512      -2.20263      -283.074       283.074       1721.08       2004.16    
  33  0.261408      -1.34167      -172.427       172.427       1456.43       1628.86    
  34  0.908908     -0.955118E-01  -12.2748       12.2748       1743.72       1756.00    
  35  0.819412     -0.199168      -25.5964       25.5964       1508.93       1534.53    
  36  0.466482     -0.762536      -97.9984       97.9984       1713.55       1811.55    
  37  0.717237     -0.332349      -42.7123       42.7123       1789.28       1831.99    
  38  0.802331     -0.220234      -28.3036       28.3036       1848.90       1877.20    
  39  0.949390     -0.519355E-01  -6.67456       6.67456       1539.50       1546.17    
  40  0.258511      -1.35282      -173.859       173.859       1807.25       1981.10    
  41  0.270423      -1.30777      -168.070       168.070       1854.52       2022.59    
  42  0.366439      -1.00392      -129.021       129.021       1764.73       1893.75    
  43  0.934403     -0.678476E-01  -8.71953       8.71953       1494.23       1502.95    
  44  0.956654     -0.443133E-01  -5.69499       5.69499       1859.36       1865.06    
  45  0.377790     -0.973417      -125.100       125.100       1590.44       1715.54    
  46  0.203667      -1.59127      -204.505       204.505       1718.33       1922.83    
  47  0.673892     -0.394685      -50.7235       50.7235       1456.76       1507.48    
  48  0.347380      -1.05734      -135.885       135.885       1425.50       1561.39    
  49  0.144339      -1.93559      -248.755       248.755       1770.52       2019.28    
  50  0.728571     -0.316670      -40.6973       40.6973       1747.80       1788.49    
  51  0.243065      -1.41443      -181.777       181.777       1504.39       1686.17    
  52  0.686711     -0.375841      -48.3018       48.3018       1449.54       1497.84    
  53  0.159440      -1.83609      -235.968       235.968       1863.09       2099.06    
  54  0.426258     -0.852711      -109.587       109.587       1834.55       1944.14    
  55  0.929286     -0.733386E-01  -9.42522       9.42522       1558.02       1567.44    
  56  0.335987E-01  -3.39327      -436.091       436.091       1838.47       2274.56    
  57  0.539383     -0.617330      -79.3370       79.3370       1745.28       1824.61    
  58  0.384768     -0.955116      -122.748       122.748       1703.70       1826.45    
  59  0.267956      -1.31693      -169.247       169.247       1339.96       1509.21    
  60  0.116616      -2.14887      -276.165       276.165       1989.46       2265.63    
  61  0.852032     -0.160131      -20.5795       20.5795       2179.37       2199.94    
  62  0.456598     -0.783952      -100.751       100.751       1405.15       1505.90    
  63  0.157616      -1.84759      -237.446       237.446       2160.91       2398.36    
  64  0.928361     -0.743348E-01  -9.55325       9.55325       1187.13       1196.69    
loop,thermsimp(1:2)       83   63.7077       170.056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       1631.36         69.21          1.26         40.49          0.05          0.04        111.04
Just calling func    0   0        111.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1631.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       83
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       84
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      193     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -71.6506       71.6506       1187.13       1258.78    
   2  0.468879     -0.757411      -97.3398       97.3398       1215.97       1313.31    
   3  0.886741E-01  -2.42279      -311.368       311.368       1374.13       1685.50    
   4  0.211783      -1.55219      -199.482       199.482       1365.09       1564.58    
   5  0.573306     -0.556336      -71.4983       71.4983       1453.78       1525.28    
   6  0.401711     -0.912021      -117.210       117.210       1449.54       1566.75    
   7  0.505706     -0.681800      -87.6226       87.6226       1494.23       1581.85    
   8  0.603045     -0.505763      -64.9989       64.9989       1405.15       1470.15    
   9  0.696575     -0.361580      -46.4690       46.4690       1456.76       1503.23    
  10  0.294614      -1.22209      -157.059       157.059       1339.96       1497.02    
  11  0.527550     -0.639511      -82.1878       82.1878       1441.50       1523.69    
  12  0.657157     -0.419832      -53.9553       53.9553       1518.51       1572.47    
  13  0.627866     -0.465428      -59.8151       59.8151       1508.93       1568.75    
  14  0.993353E-02  -4.61184      -592.697       592.697       1445.36       2038.05    
  15  0.885166E-01  -2.42456      -311.597       311.597       1539.50       1851.10    
  16  0.265764      -1.32515      -170.303       170.303       1469.94       1640.25    
  17  0.446403     -0.806534      -103.653       103.653       1528.44       1632.09    
  18  0.287864      -1.24527      -160.037       160.037       1425.50       1585.54    
  19  0.926928E-01  -2.37846      -305.672       305.672       1548.55       1854.23    
  20  0.394849     -0.929252      -119.424       119.424       1558.02       1677.44    
  21  0.540746     -0.614805      -79.0126       79.0126       1410.23       1489.25    
  22  0.846435     -0.166721      -21.4265       21.4265       1561.64       1583.07    
  23  0.417037     -0.874580      -112.398       112.398       1618.35       1730.75    
  24  0.210713      -1.55726      -200.133       200.133       1456.43       1656.57    
  25  0.764669     -0.268312      -34.4825       34.4825       1569.48       1603.96    
  26  0.219471E-01  -3.81912      -490.820       490.820       1491.51       1982.33    
  27  0.200728      -1.60581      -206.373       206.373       1552.58       1758.95    
  28  0.572660     -0.557463      -71.6432       71.6432       1584.73       1656.37    
  29  0.599083E-01  -2.81494      -361.766       361.766       1649.67       2011.44    
  30  0.214614      -1.53891      -197.776       197.776       1597.26       1795.04    
  31  0.489389     -0.714598      -91.8376       91.8376       1504.39       1596.23    
  32  0.162616      -1.81636      -233.433       233.433       1500.10       1733.53    
  33  0.710022     -0.342459      -44.0116       44.0116       1576.52       1620.53    
  34  0.753583     -0.282916      -36.3594       36.3594       1590.44       1626.80    
  35  0.743317     -0.296633      -38.1222       38.1222       1744.49       1782.61    
  36  0.155416      -1.86165      -239.253       239.253       1739.04       1978.29    
  37  0.643355     -0.441059      -56.6833       56.6833       1743.72       1800.40    
  38  0.656098     -0.421444      -54.1625       54.1625       1778.10       1832.26    
  39  0.327550      -1.11611      -143.439       143.439       1758.00       1901.44    
  40  0.192244      -1.64899      -211.923       211.923       1747.80       1959.72    
  41  0.433590     -0.835657      -107.396       107.396       1713.55       1820.95    
  42  0.788561     -0.237545      -30.5285       30.5285       1745.28       1775.81    
  43  0.978028     -0.222173E-01  -2.85529       2.85529       1703.70       1706.56    
  44  0.110322      -2.20435      -283.296       283.296       1730.88       2014.18    
  45  0.795332     -0.228995      -29.4297       29.4297       1789.28       1818.71    
  46  0.497518E-01  -3.00071      -385.641       385.641       1826.29       2211.93    
  47  0.852459     -0.159631      -20.5152       20.5152       1716.14       1736.65    
  48  0.133240      -2.01560      -259.038       259.038       1859.36       2118.40    
  49  0.671163     -0.398743      -51.2451       51.2451       1848.90       1900.14    
  50  0.245122      -1.40600      -180.694       180.694       1537.79       1718.48    
  51  0.820498     -0.197843      -25.4261       25.4261       1764.73       1790.16    
  52  0.422422     -0.861751      -110.749       110.749       1718.33       1829.08    
  53  0.946612E-01  -2.35745      -302.971       302.971       1834.55       2137.53    
  54  0.902486     -0.102603      -13.1861       13.1861       1807.25       1820.43    
  55  0.858585     -0.152469      -19.5948       19.5948       1733.08       1752.67    
  56  0.713346     -0.337789      -43.4114       43.4114       1721.08       1764.49    
  57  0.497785     -0.697587      -89.6515       89.6515       1770.52       1860.17    
  58  0.971461     -0.289536E-01  -3.72102       3.72102       1854.52       1858.24    
  59  0.714587     -0.336051      -43.1881       43.1881       1863.09       1906.28    
  60  0.194565E-01  -3.93958      -506.300       506.300       2179.37       2685.67    
  61  0.675786E-01  -2.69446      -346.283       346.283       1674.94       2021.23    
  62  0.924162     -0.788681E-01  -10.1358       10.1358       1989.46       1999.60    
  63  0.988536     -0.115299E-01  -1.48178       1.48178       1838.47       1839.96    
  64  0.136917      -1.98838      -255.539       255.539       1631.36       1886.90    
loop,thermsimp(1:2)       84   71.6506       97.3398    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195       1489.44         68.81          1.16         40.58          0.35          0.05        110.94
Just calling func    0   0        110.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1489.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       84
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       85
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      194     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -208.457       208.457       1187.13       1395.59    
   2  0.793097     -0.231809      -29.7913       29.7913       1215.97       1245.76    
   3  0.261081      -1.34293      -172.588       172.588       1405.15       1577.74    
   4  0.912198     -0.918984E-01  -11.8105       11.8105       1410.23       1422.04    
   5  0.493539     -0.706153      -90.7523       90.7523       1339.96       1430.72    
   6  0.721001     -0.327115      -42.0396       42.0396       1456.76       1498.80    
   7  0.578790     -0.546816      -70.2749       70.2749       1441.50       1511.78    
   8  0.684127     -0.379612      -48.7864       48.7864       1453.78       1502.56    
   9  0.627712     -0.465674      -59.8468       59.8468       1365.09       1424.94    
  10  0.858540     -0.152522      -19.6016       19.6016       1449.54       1469.14    
  11  0.712254E-01  -2.64191      -339.528       339.528       1508.93       1848.46    
  12  0.927250     -0.755316E-01  -9.70706       9.70706       1518.51       1528.22    
  13  0.458073     -0.780727      -100.336       100.336       1494.23       1594.57    
  14  0.940004     -0.618714E-01  -7.95149       7.95149       1561.64       1569.59    
  15  0.322549      -1.13150      -145.416       145.416       1425.50       1570.92    
  16  0.939473     -0.624358E-01  -8.02403       8.02403       1504.39       1512.42    
  17  0.726080     -0.320095      -41.1375       41.1375       1569.48       1610.61    
  18  0.602088E-02  -5.11252      -657.043       657.043       1576.52       2233.56    
  19  0.735289     -0.307492      -39.5178       39.5178       1590.44       1629.95    
  20  0.847617     -0.165326      -21.2472       21.2472       1528.44       1549.69    
  21  0.747190E-01  -2.59402      -333.374       333.374       1469.94       1803.32    
  22  0.248374      -1.39282      -179.000       179.000       1584.73       1763.73    
  23  0.350184      -1.04930      -134.852       134.852       1456.43       1591.28    
  24  0.327739E-03  -8.02329      -1031.13       1031.13       1558.02       2589.14    
  25  0.130012      -2.04013      -262.190       262.190       1374.13       1636.32    
  26  0.609791     -0.494639      -63.5693       63.5693       1703.70       1767.27    
  27  0.793414     -0.231410      -29.7400       29.7400       1537.79       1567.53    
  28  0.962567     -0.381519E-01  -4.90315       4.90315       1618.35       1623.25    
  29  0.499469     -0.694211      -89.2175       89.2175       1500.10       1589.31    
  30  0.887491     -0.119357      -15.3394       15.3394       1716.14       1731.47    
  31  0.136374      -1.99236      -256.050       256.050       1733.08       1989.13    
  32  0.292356      -1.22978      -158.047       158.047       1552.58       1710.62    
  33  0.301564      -1.19877      -154.062       154.062       1721.08       1875.14    
  34  0.352543      -1.04258      -133.989       133.989       1745.28       1879.27    
  35  0.483726     -0.726236      -93.3333       93.3333       1744.49       1837.82    
  36  0.410499     -0.890381      -114.429       114.429       1764.73       1879.16    
  37  0.458111     -0.780644      -100.326       100.326       1597.26       1697.59    
  38  0.670071     -0.400372      -51.4544       51.4544       1743.72       1795.18    
  39  0.175486      -1.74020      -223.644       223.644       1789.28       2012.92    
  40  0.798907     -0.224511      -28.8533       28.8533       1807.25       1836.10    
  41  0.270487      -1.30753      -168.040       168.040       1713.55       1881.59    
  42  0.480368     -0.733202      -94.2285       94.2285       1718.33       1812.55    
  43  0.658406     -0.417933      -53.7113       53.7113       1778.10       1831.81    
  44  0.937976     -0.640304E-01  -8.22896       8.22896       1838.47       1846.70    
  45  0.710083     -0.342373      -44.0006       44.0006       1539.50       1583.50    
  46  0.567340     -0.566797      -72.8427       72.8427       1548.55       1621.40    
  47  0.201426      -1.60233      -205.926       205.926       1854.52       2060.45    
  48  0.660313     -0.415042      -53.3397       53.3397       1770.52       1823.86    
  49  0.524008     -0.646249      -83.0537       83.0537       1631.36       1714.41    
  50  0.513616     -0.666280      -85.6280       85.6280       1848.90       1934.52    
  51  0.951218     -0.500122E-01  -6.42740       6.42740       1758.00       1764.43    
  52  0.703465     -0.351737      -45.2041       45.2041       1863.09       1908.30    
  53  0.702859     -0.352600      -45.3149       45.3149       1747.80       1793.11    
  54  0.453067     -0.791715      -101.748       101.748       1739.04       1840.79    
  55  0.202116      -1.59891      -205.487       205.487       1491.51       1696.99    
  56  0.491988     -0.709301      -91.1569       91.1569       1989.46       2080.62    
  57  0.632131     -0.458659      -58.9452       58.9452       1649.67       1708.62    
  58  0.911086     -0.931178E-01  -11.9672       11.9672       1730.88       1742.85    
  59  0.888750     -0.117939      -15.1571       15.1571       1674.94       1690.10    
  60  0.468235     -0.758785      -97.5164       97.5164       1445.36       1542.87    
  61  0.971366     -0.290520E-01  -3.73367       3.73367       1859.36       1863.10    
  62  0.622947     -0.473294      -60.8261       60.8261       1834.55       1895.38    
  63  0.837000     -0.177932      -22.8671       22.8671       1826.29       1849.16    
  64  0.495636     -0.701913      -90.2073       90.2073       1489.44       1579.65    
loop,thermsimp(1:2)       85   208.457       29.7913    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       1354.87         68.99          1.21         40.70          0.12          0.05        111.07
Just calling func    0   0        111.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197       1389.67         69.43          1.29         40.16          0.04          0.05        110.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1354.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       85
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       86
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      196     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -98.4403       98.4403       1215.97       1314.41    
   2  0.948887     -0.524654E-01  -6.74267       6.74267       1187.13       1193.88    
   3  0.532332     -0.630488      -81.0281       81.0281       1410.23       1491.26    
   4  0.374267     -0.982785      -126.304       126.304       1365.09       1491.40    
   5  0.694531     -0.364519      -46.8467       46.8467       1339.96       1386.81    
   6  0.414371     -0.880994      -113.222       113.222       1449.54       1562.76    
   7  0.208827E-01  -3.86883      -497.209       497.209       1456.76       1953.97    
   8  0.627187     -0.466511      -59.9543       59.9543       1453.78       1513.73    
   9  0.148799E-01  -4.20774      -540.764       540.764       1441.50       1982.27    
  10  0.809008     -0.211946      -27.2386       27.2386       1504.39       1531.63    
  11  0.647680     -0.434359      -55.8223       55.8223       1518.51       1574.34    
  12  0.289351      -1.24012      -159.375       159.375       1445.36       1604.73    
  13  0.222457      -1.50302      -193.163       193.163       1528.44       1721.60    
  14  0.374268     -0.982782      -126.304       126.304       1537.79       1664.09    
  15  0.785765     -0.241097      -30.9849       30.9849       1561.64       1592.63    
  16  0.298051      -1.21049      -155.568       155.568       1425.50       1581.07    
  17  0.725075     -0.321480      -41.3155       41.3155       1405.15       1446.46    
  18  0.386364     -0.950976      -122.216       122.216       1489.44       1611.66    
  19  0.631686     -0.459363      -59.0356       59.0356       1539.50       1598.54    
  20  0.688282     -0.373557      -48.0083       48.0083       1500.10       1548.10    
  21  0.373817     -0.983990      -126.459       126.459       1456.43       1582.89    
  22  0.219845      -1.51483      -194.681       194.681       1494.23       1688.91    
  23  0.926271     -0.765889E-01  -9.84293       9.84293       1569.48       1579.32    
  24  0.618127     -0.481061      -61.8243       61.8243       1548.55       1610.38    
  25  0.176216      -1.73604      -223.110       223.110       1618.35       1841.46    
  26  0.742943     -0.297136      -38.1869       38.1869       1590.44       1628.62    
  27  0.357690      -1.02809      -132.126       132.126       1374.13       1506.25    
  28  0.478359     -0.737394      -94.7673       94.7673       1674.94       1769.71    
  29  0.395976     -0.926401      -119.058       119.058       1491.51       1610.56    
  30  0.803186     -0.219169      -28.1668       28.1668       1597.26       1625.43    
  31  0.231845      -1.46168      -187.850       187.850       1649.67       1837.52    
  32  0.808968     -0.211996      -27.2450       27.2450       1552.58       1579.82    
  33  0.579217     -0.546078      -70.1800       70.1800       1631.36       1701.54    
  34  0.384357     -0.956183      -122.885       122.885       1716.14       1839.02    
  35  0.856367     -0.155057      -19.9274       19.9274       1730.88       1750.81    
  36  0.265661      -1.32553      -170.353       170.353       1584.73       1755.08    
  37  0.288915      -1.24162      -159.569       159.569       1758.00       1917.57    
  38  0.224915      -1.49203      -191.751       191.751       1703.70       1895.45    
  39  0.685944     -0.376959      -48.4455       48.4455       1747.80       1796.24    
  40  0.265936      -1.32450      -170.220       170.220       1743.72       1913.94    
  41  0.412966     -0.884389      -113.659       113.659       1469.94       1583.60    
  42  0.440796     -0.819173      -105.277       105.277       1718.33       1823.60    
  43  0.572522     -0.557705      -71.6742       71.6742       1770.52       1842.20    
  44  0.798412     -0.225131      -28.9331       28.9331       1778.10       1807.03    
  45  0.127097      -2.06281      -265.104       265.104       1807.25       2072.35    
  46  0.243397      -1.41306      -181.602       181.602       1744.49       1926.09    
  47  0.322195      -1.13260      -145.557       145.557       1739.04       1884.59    
  48  0.512728     -0.668011      -85.8504       85.8504       1838.47       1924.32    
  49  0.786191     -0.240556      -30.9154       30.9154       1508.93       1539.85    
  50  0.733079     -0.310501      -39.9045       39.9045       1826.29       1866.19    
  51  0.601364     -0.508554      -65.3576       65.3576       1859.36       1924.72    
  52  0.348529      -1.05403      -135.461       135.461       1721.08       1856.54    
  53  0.923986     -0.790584E-01  -10.1603       10.1603       1764.73       1774.89    
  54  0.843742     -0.169908      -21.8360       21.8360       1745.28       1767.11    
  55  0.723581     -0.323543      -41.5806       41.5806       1713.55       1755.13    
  56  0.378158     -0.972444      -124.975       124.975       1834.55       1959.53    
  57  0.463644     -0.768638      -98.7827       98.7827       1863.09       1961.88    
  58  0.427569     -0.849641      -109.193       109.193       1848.90       1958.09    
  59  0.235852      -1.44455      -185.648       185.648       1733.08       1918.72    
  60  0.203797      -1.59063      -204.422       204.422       1789.28       1993.70    
  61  0.146982E-02  -6.52261      -838.263       838.263       1854.52       2692.78    
  62  0.681525     -0.383422      -49.2761       49.2761       1989.46       2038.74    
  63  0.931276     -0.711992E-01  -9.15027       9.15027       1576.52       1585.67    
  64  0.581849     -0.541545      -69.5974       69.5974       1354.87       1424.47    
loop,thermsimp(1:2)       86   98.4403       6.74267    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198       2233.95         68.97          1.18         40.40          0.44          0.05        111.04
Just calling func    0   0        111.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199       1717.46         69.05          1.25         40.44          0.06          0.05        110.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1717.46
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       86
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       87
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      198     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -218.277       218.277       1187.13       1405.41    
   2  0.721345     -0.326637      -41.9783       41.9783       1215.97       1257.95    
   3  0.842493     -0.171390      -22.0264       22.0264       1339.96       1361.99    
   4  0.260540      -1.34500      -172.854       172.854       1354.87       1527.72    
   5  0.782605     -0.245127      -31.5029       31.5029       1405.15       1436.65    
   6  0.208492      -1.56785      -201.495       201.495       1410.23       1611.73    
   7  0.290568E-01  -3.53850      -454.756       454.756       1365.09       1819.85    
   8  0.673682     -0.394997      -50.7636       50.7636       1374.13       1424.89    
   9  0.399393     -0.917808      -117.953       117.953       1453.78       1571.73    
  10  0.966971     -0.335863E-01  -4.31640       4.31640       1504.39       1508.71    
  11  0.390645     -0.939956      -120.800       120.800       1508.93       1629.73    
  12  0.259548      -1.34881      -173.345       173.345       1500.10       1673.44    
  13  0.260765      -1.34413      -172.743       172.743       1449.54       1622.28    
  14  0.110601E-01  -4.50441      -578.891       578.891       1518.51       2097.41    
  15  0.727710     -0.317852      -40.8492       40.8492       1569.48       1610.32    
  16  0.717076     -0.332574      -42.7412       42.7412       1552.58       1595.32    
  17  0.612129     -0.490811      -63.0774       63.0774       1425.50       1488.58    
  18  0.589376     -0.528691      -67.9455       67.9455       1456.43       1524.38    
  19  0.541615     -0.613199      -78.8062       78.8062       1469.94       1548.75    
  20  0.330403      -1.10744      -142.324       142.324       1576.52       1718.85    
  21  0.229530      -1.47172      -189.140       189.140       1561.64       1750.78    
  22  0.564010     -0.572684      -73.5993       73.5993       1539.50       1613.10    
  23  0.454226     -0.789161      -101.420       101.420       1445.36       1546.78    
  24  0.579528     -0.545541      -70.1110       70.1110       1548.55       1618.67    
  25  0.245500      -1.40446      -180.496       180.496       1491.51       1672.00    
  26  0.708019     -0.345284      -44.3746       44.3746       1489.44       1533.81    
  27  0.300215      -1.20326      -154.638       154.638       1597.26       1751.90    
  28  0.721461     -0.326478      -41.9577       41.9577       1590.44       1632.39    
  29  0.326772      -1.11849      -143.745       143.745       1537.79       1681.54    
  30  0.580879     -0.543212      -69.8117       69.8117       1494.23       1564.04    
  31  0.963075     -0.376241E-01  -4.83532       4.83532       1631.36       1636.19    
  32  0.656935     -0.420170      -53.9987       53.9987       1528.44       1582.44    
  33  0.908335     -0.961416E-01  -12.3558       12.3558       1730.88       1743.24    
  34  0.765938     -0.266654      -34.2695       34.2695       1584.73       1619.00    
  35  0.497301     -0.698561      -89.7765       89.7765       1713.55       1803.33    
  36  0.833603     -0.181997      -23.3897       23.3897       1745.28       1768.67    
  37  0.433057     -0.836886      -107.554       107.554       1674.94       1782.50    
  38  0.349547      -1.05112      -135.086       135.086       1764.73       1899.82    
  39  0.142838      -1.94604      -250.099       250.099       1747.80       1997.90    
  40  0.326780      -1.11847      -143.742       143.742       1778.10       1921.84    
  41  0.707709     -0.345723      -44.4311       44.4311       1718.33       1762.76    
  42  0.914339     -0.895538E-01  -11.5091       11.5091       1649.67       1661.18    
  43  0.392800     -0.934454      -120.093       120.093       1716.14       1836.23    
  44  0.434772     -0.832933      -107.046       107.046       1618.35       1725.39    
  45  0.229545      -1.47165      -189.132       189.132       1770.52       1959.66    
  46  0.661281     -0.413577      -53.1515       53.1515       1721.08       1774.23    
  47  0.459966     -0.776602      -99.8062       99.8062       1826.29       1926.10    
  48  0.352439      -1.04288      -134.027       134.027       1739.04       1873.06    
  49  0.490345     -0.712647      -91.5868       91.5868       1703.70       1795.29    
  50  0.837788     -0.176990      -22.7461       22.7461       1743.72       1766.47    
  51  0.247493      -1.39637      -179.457       179.457       1758.00       1937.46    
  52  0.221382      -1.50787      -193.786       193.786       1733.08       1926.86    
  53  0.374412     -0.982399      -126.254       126.254       1838.47       1964.73    
  54  0.170580      -1.76855      -227.288       227.288       1859.36       2086.65    
  55  0.464054     -0.767755      -98.6691       98.6691       1744.49       1843.16    
  56  0.936961     -0.651140E-01  -8.36822       8.36822       1456.76       1465.13    
  57  0.302357      -1.19615      -153.725       153.725       1848.90       2002.62    
  58  0.572748E-01  -2.85990      -367.544       367.544       1834.55       2202.10    
  59  0.495156     -0.702883      -90.3321       90.3321       1863.09       1953.43    
  60  0.101162      -2.29104      -294.436       294.436       1441.50       1735.94    
  61  0.786435E-02  -4.84542      -622.716       622.716       1789.28       2412.00    
  62  0.960492     -0.403100E-01  -5.18049       5.18049       1989.46       1994.64    
  63  0.902616     -0.102458      -13.1676       13.1676       1807.25       1820.41    
  64  0.646986     -0.435430      -55.9599       55.9599       1717.46       1773.42    
loop,thermsimp(1:2)       87   218.277       41.9783    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       1364.08         69.50          1.27         39.92          0.28          0.05        111.02
Just calling func    0   0        111.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    201       1489.35         69.41          1.26         40.25          0.04          0.05        111.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    1489.3       0.6397     -4.177      3.704     -102.6    -0.5126    
                     -0.6106      1.266     -99.70      4.795     0.4198    

                      0.6921     0.3105      2.273      7954.      7000.    

                      -1.727      0.000      0.000      0.000     -1.221    



                      -1.871      0.000      0.000      7000.     -290.3    

                      -1.207     -2.406     -7.478     -1.581      3.295    

                      -6.612     -3.949     -7902.      0.000     0.1062E+05



                       2802.      8731.      8620.      4930.      1883.    

                       2369.     0.2883     0.3323     0.1597     0.3166    

                     -0.2486     0.2545     0.3131     0.3394     0.5100E-01



                      -1.154    -0.1108      0.000    -0.1002     0.4281E-02

                      0.1500     0.1999    -0.7116     0.3404     0.4140    

                      0.1029     0.2423    -0.6053    -0.9896      7000.    



                      -2.181     -1.460     -2.235     -2.324    -0.3807    

                     -0.3252      9.282      8.753    -0.1651E+05 -6.102    

                       0.000      0.000      9.097      8.578    -0.1969E+05



                      -6.000      0.000      0.000      8.838      9.190    

                     -0.1944E+05 -6.000      0.000      0.000      9.082    

                       8.970    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1364.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       87
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       88
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      200     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -194.485       194.485       1215.97       1410.46    
   2  0.246752E-01  -3.70196      -475.763       475.763       1339.96       1815.73    
   3  0.679039     -0.387076      -49.7457       49.7457       1187.13       1236.88    
   4  0.709027     -0.343862      -44.1919       44.1919       1374.13       1418.32    
   5  0.577754     -0.548608      -70.5052       70.5052       1405.15       1475.65    
   6  0.738694     -0.302871      -38.9240       38.9240       1456.76       1495.68    
   7  0.181723      -1.70527      -219.156       219.156       1425.50       1644.66    
   8  0.103748      -2.26579      -291.191       291.191       1504.39       1795.58    
   9  0.456811E-02  -5.38866      -692.531       692.531       1456.43       2148.96    
  10  0.303247      -1.19321      -153.347       153.347       1354.87       1508.22    
  11  0.284736      -1.25619      -161.441       161.441       1489.44       1650.88    
  12  0.900494     -0.104812      -13.4701       13.4701       1445.36       1458.83    
  13  0.691792     -0.368470      -47.3544       47.3544       1469.94       1517.30    
  14  0.502714     -0.687735      -88.3852       88.3852       1494.23       1582.61    
  15  0.305219      -1.18673      -152.514       152.514       1453.78       1606.29    
  16  0.412005     -0.886720      -113.958       113.958       1528.44       1642.40    
  17  0.412225     -0.886186      -113.889       113.889       1552.58       1666.47    
  18  0.121697      -2.10622      -270.684       270.684       1569.48       1840.16    
  19  0.465374     -0.764915      -98.3041       98.3041       1410.23       1508.54    
  20  0.273016      -1.29823      -166.843       166.843       1539.50       1706.34    
  21  0.502763     -0.687636      -88.3725       88.3725       1548.55       1636.93    
  22  0.516442     -0.660793      -84.9228       84.9228       1584.73       1669.65    
  23  0.554333     -0.589990      -75.8235       75.8235       1449.54       1525.36    
  24  0.192397E-01  -3.95078      -507.740       507.740       1508.93       2016.67    
  25  0.451279E-01  -3.09825      -398.177       398.177       1590.44       1988.61    
  26  0.457340     -0.782327      -100.542       100.542       1631.36       1731.90    
  27  0.325184      -1.12336      -144.371       144.371       1649.67       1794.04    
  28  0.700952     -0.355315      -45.6639       45.6639       1491.51       1537.17    
  29  0.961087     -0.396906E-01  -5.10090       5.10090       1500.10       1505.20    
  30  0.195966E-02  -6.23498      -801.298       801.298       1537.79       2339.09    
  31  0.766376     -0.266082      -34.1960       34.1960       1576.52       1610.72    
  32  0.398846     -0.919180      -118.130       118.130       1618.35       1736.48    
  33  0.675249     -0.392674      -50.4651       50.4651       1441.50       1491.97    
  34  0.189468      -1.66354      -213.792       213.792       1730.88       1944.67    
  35  0.444608     -0.810562      -104.171       104.171       1561.64       1665.81    
  36  0.514006     -0.665520      -85.5303       85.5303       1597.26       1682.79    
  37  0.575199     -0.553039      -71.0746       71.0746       1718.33       1789.40    
  38  0.121449      -2.10826      -270.947       270.947       1743.72       2014.67    
  39  0.209130      -1.56480      -201.102       201.102       1745.28       1946.38    
  40  0.466284E-01  -3.06555      -393.973       393.973       1717.46       2111.43    
  41  0.386630E-01  -3.25287      -418.048       418.048       1721.08       2139.13    
  42  0.335751E-01  -3.39397      -436.181       436.181       1674.94       2111.12    
  43  0.878126     -0.129965      -16.7027       16.7027       1703.70       1720.41    
  44  0.652938     -0.426273      -54.7830       54.7830       1713.55       1768.34    
  45  0.932456E-01  -2.37252      -304.908       304.908       1365.09       1670.00    
  46  0.662683     -0.411458      -52.8792       52.8792       1807.25       1860.12    
  47  0.204704      -1.58619      -203.852       203.852       1716.14       1919.99    
  48  0.985446     -0.146609E-01  -1.88417       1.88417       1744.49       1746.37    
  49  0.105847      -2.24576      -288.617       288.617       1739.04       2027.65    
  50  0.843201     -0.170550      -21.9185       21.9185       1764.73       1786.65    
  51  0.364087      -1.01036      -129.848       129.848       1778.10       1907.95    
  52  0.650651E-01  -2.73237      -351.154       351.154       1826.29       2177.44    
  53  0.968103     -0.324171E-01  -4.16613       4.16613       1733.08       1737.24    
  54  0.131933      -2.02546      -260.305       260.305       1758.00       2018.30    
  55  0.906847     -0.977815E-01  -12.5665       12.5665       1863.09       1875.66    
  56  0.443328E-01  -3.11603      -400.461       400.461       1770.52       2170.98    
  57  0.507045     -0.679156      -87.2828       87.2828       1838.47       1925.76    
  58  0.287709      -1.24581      -160.107       160.107       1989.46       2149.57    
  59  0.900299     -0.105028      -13.4979       13.4979       1747.80       1761.30    
  60  0.689829E-01  -2.67390      -343.640       343.640       1848.90       2192.54    
  61  0.876407     -0.131925      -16.9545       16.9545       1859.36       1876.32    
  62  0.718081     -0.331173      -42.5611       42.5611       1518.51       1561.08    
  63  0.177063      -1.73125      -222.494       222.494       1834.55       2057.05    
  64  0.749425E-01  -2.59103      -332.991       332.991       1364.08       1697.07    
loop,thermsimp(1:2)       88   194.485       475.763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    202       1448.36         69.24          1.25         40.19          0.23          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    203       1710.81         69.04          1.24         40.38          0.19          0.05        110.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1448.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       88
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       89
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      202     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -16.9027       16.9027       1187.13       1204.04    
   2  0.765270     -0.267527      -34.3816       34.3816       1215.97       1250.35    
   3  0.215687      -1.53393      -197.135       197.135       1374.13       1571.26    
   4  0.999601E-01  -2.30298      -295.971       295.971       1445.36       1741.33    
   5  0.706519     -0.347405      -44.6472       44.6472       1405.15       1449.80    
   6  0.201358      -1.60267      -205.970       205.970       1441.50       1647.47    
   7  0.450677     -0.797005      -102.428       102.428       1456.76       1559.19    
   8  0.897557     -0.108078      -13.8899       13.8899       1500.10       1513.99    
   9  0.161166      -1.82532      -234.583       234.583       1354.87       1589.45    
  10  0.972556E-01  -2.33041      -299.496       299.496       1410.23       1709.73    
  11  0.742112     -0.298255      -38.3306       38.3306       1469.94       1508.27    
  12  0.172377      -1.75807      -225.941       225.941       1449.54       1675.48    
  13  0.658751     -0.417410      -53.6440       53.6440       1491.51       1545.15    
  14  0.725340     -0.321114      -41.2685       41.2685       1518.51       1559.78    
  15  0.501488     -0.690175      -88.6988       88.6988       1494.23       1582.93    
  16  0.845372     -0.167978      -21.5880       21.5880       1453.78       1475.37    
  17  0.132369      -2.02216      -259.881       259.881       1576.52       1836.40    
  18  0.734515E-01  -2.61113      -335.573       335.573       1548.55       1884.13    
  19  0.391205     -0.938523      -120.616       120.616       1528.44       1649.05    
  20  0.376983     -0.975555      -125.375       125.375       1425.50       1550.88    
  21  0.315463      -1.15371      -148.271       148.271       1489.44       1637.71    
  22  0.267113      -1.32008      -169.652       169.652       1561.64       1731.29    
  23  0.965292     -0.353243E-01  -4.53976       4.53976       1552.58       1557.12    
  24  0.954592     -0.464714E-01  -5.97235       5.97235       1584.73       1590.70    
  25  0.992414     -0.761515E-02 -0.978672      0.978672       1365.09       1366.07    
  26  0.867953E-02  -4.74679      -610.040       610.040       1597.26       2207.30    
  27  0.829585     -0.186829      -24.0106       24.0106       1364.08       1388.09    
  28  0.349695      -1.05069      -135.032       135.032       1539.50       1674.53    
  29  0.673511     -0.395251      -50.7963       50.7963       1703.70       1754.50    
  30  0.340696      -1.07676      -138.382       138.382       1631.36       1769.74    
  31  0.558731     -0.582087      -74.8077       74.8077       1618.35       1693.15    
  32  0.747295     -0.291295      -37.4362       37.4362       1733.08       1770.51    
  33  0.123287      -2.09324      -269.016       269.016       1744.49       2013.51    
  34  0.355051      -1.03549      -133.078       133.078       1747.80       1880.88    
  35  0.511895     -0.669636      -86.0592       86.0592       1713.55       1799.61    
  36  0.571856E-01  -2.86145      -367.744       367.744       1764.73       2132.48    
  37  0.507517     -0.678226      -87.1632       87.1632       1718.33       1805.49    
  38  0.326770      -1.11850      -143.745       143.745       1649.67       1793.42    
  39  0.736001     -0.306523      -39.3933       39.3933       1504.39       1543.79    
  40  0.970046     -0.304120E-01  -3.90844       3.90844       1339.96       1343.87    
  41  0.673510     -0.395253      -50.7965       50.7965       1569.48       1620.27    
  42  0.335032      -1.09353      -140.537       140.537       1807.25       1947.78    
  43  0.872321E-01  -2.43918      -313.475       313.475       1863.09       2176.57    
  44  0.749956     -0.287741      -36.9794       36.9794       1859.36       1896.34    
  45  0.159001      -1.83884      -236.322       236.322       1778.10       2014.42    
  46  0.529687     -0.635468      -81.6681       81.6681       1716.14       1797.80    
  47  0.142415      -1.94901      -250.480       250.480       1838.47       2088.95    
  48  0.803387     -0.218919      -28.1346       28.1346       1730.88       1759.02    
  49  0.709133     -0.343713      -44.1728       44.1728       1745.28       1789.45    
  50  0.261172      -1.34258      -172.543       172.543       1590.44       1762.98    
  51  0.106599      -2.23868      -287.708       287.708       1743.72       2031.43    
  52  0.955666     -0.453468E-01  -5.82780       5.82780       1508.93       1514.76    
  53  0.376236     -0.977539      -125.630       125.630       1758.00       1883.63    
  54  0.890774     -0.115665      -14.8649       14.8649       1739.04       1753.90    
  55  0.554077     -0.590452      -75.8829       75.8829       1834.55       1910.44    
  56  0.892825E-01  -2.41595      -310.489       310.489       1674.94       1985.43    
  57  0.941033     -0.607774E-01  -7.81089       7.81089       1717.46       1725.27    
  58  0.209380E-01  -3.86619      -496.869       496.869       1721.08       2217.95    
  59  0.427794     -0.849113      -109.125       109.125       1456.43       1565.56    
  60  0.194887      -1.63533      -210.167       210.167       1989.46       2199.63    
  61  0.840289     -0.174009      -22.3630       22.3630       1770.52       1792.89    
  62  0.634527     -0.454875      -58.4590       58.4590       1826.29       1884.75    
  63  0.159135      -1.83800      -236.213       236.213       1848.90       2085.11    
  64  0.182987      -1.69834      -218.264       218.264       1448.36       1666.62    
loop,thermsimp(1:2)       89   16.9027       34.3816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204       1309.63         69.19          1.22         40.31          0.43          0.05        111.20
Just calling func    0   0        111.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1309.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       89
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       90
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      203     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -237.646       237.646       1187.13       1424.78    
   2  0.894146     -0.111886      -14.3792       14.3792       1215.97       1230.35    
   3  0.721270     -0.326741      -41.9916       41.9916       1339.96       1381.95    
   4  0.536866     -0.622006      -79.9380       79.9380       1365.09       1445.03    
   5  0.418107     -0.872017      -112.069       112.069       1364.08       1476.15    
   6  0.391189     -0.938564      -120.621       120.621       1405.15       1525.77    
   7  0.799669     -0.223558      -28.7308       28.7308       1453.78       1482.51    
   8  0.595070     -0.519076      -66.7099       66.7099       1469.94       1536.65    
   9  0.384356E-03  -7.86394      -1010.65       1010.65       1500.10       2510.74    
  10  0.654302     -0.424187      -54.5150       54.5150       1508.93       1563.45    
  11  0.873355     -0.135413      -17.4028       17.4028       1504.39       1521.80    
  12  0.303212      -1.19332      -153.361       153.361       1491.51       1644.87    
  13  0.434159     -0.834344      -107.227       107.227       1425.50       1532.73    
  14  0.970825     -0.296089E-01  -3.80524       3.80524       1552.58       1556.38    
  15  0.405896     -0.901659      -115.878       115.878       1456.76       1572.64    
  16  0.250423      -1.38461      -177.945       177.945       1518.51       1696.46    
  17  0.517030     -0.659654      -84.7763       84.7763       1456.43       1541.21    
  18  0.165468      -1.79897      -231.198       231.198       1374.13       1605.32    
  19  0.679403     -0.386541      -49.6768       49.6768       1494.23       1543.91    
  20  0.554013     -0.590567      -75.8976       75.8976       1354.87       1430.77    
  21  0.211764E-01  -3.85487      -495.414       495.414       1584.73       2080.15    
  22  0.453828     -0.790038      -101.533       101.533       1569.48       1671.01    
  23  0.377409     -0.974426      -125.230       125.230       1489.44       1614.67    
  24  0.496879     -0.699408      -89.8854       89.8854       1441.50       1531.39    
  25  0.214619      -1.53889      -197.773       197.773       1528.44       1726.21    
  26  0.724154     -0.322751      -41.4788       41.4788       1448.36       1489.84    
  27  0.385609     -0.952932      -122.467       122.467       1539.50       1661.97    
  28  0.777864     -0.251204      -32.2838       32.2838       1449.54       1481.82    
  29  0.709283     -0.343500      -44.1454       44.1454       1618.35       1662.49    
  30  0.191760      -1.65151      -212.246       212.246       1410.23       1622.48    
  31  0.347616      -1.05666      -135.798       135.798       1717.46       1853.26    
  32  0.191581      -1.65244      -212.366       212.366       1561.64       1774.01    
  33  0.770989     -0.260081      -33.4248       33.4248       1445.36       1478.78    
  34  0.788566E-01  -2.54012      -326.448       326.448       1739.04       2065.49    
  35  0.229474      -1.47197      -189.172       189.172       1703.70       1892.88    
  36  0.339326      -1.08079      -138.900       138.900       1730.88       1869.78    
  37  0.220886      -1.51011      -194.074       194.074       1590.44       1784.51    
  38  0.223644      -1.49770      -192.479       192.479       1631.36       1823.84    
  39  0.138287      -1.97842      -254.260       254.260       1733.08       1987.34    
  40  0.796402     -0.227651      -29.2569       29.2569       1745.28       1774.53    
  41  0.104384      -2.25968      -290.406       290.406       1770.52       2060.93    
  42  0.919642     -0.837713E-01  -10.7660       10.7660       1649.67       1660.44    
  43  0.360767      -1.01952      -131.026       131.026       1716.14       1847.16    
  44  0.924300     -0.787181E-01  -10.1166       10.1166       1713.55       1723.67    
  45  0.561139     -0.577786      -74.2550       74.2550       1718.33       1792.58    
  46  0.509073E-01  -2.97775      -382.690       382.690       1576.52       1959.21    
  47  0.715469     -0.334817      -43.0295       43.0295       1747.80       1790.83    
  48  0.294040E-01  -3.52662      -453.229       453.229       1758.00       2211.23    
  49  0.264026E-02  -5.93688      -762.986       762.986       1548.55       2311.54    
  50  0.634029     -0.455661      -58.5599       58.5599       1826.29       1884.85    
  51  0.319148      -1.14210      -146.779       146.779       1859.36       2006.14    
  52  0.495674     -0.701836      -90.1975       90.1975       1834.55       1924.75    
  53  0.838343     -0.176328      -22.6611       22.6611       1807.25       1829.91    
  54  0.240556      -1.42480      -183.110       183.110       1674.94       1858.05    
  55  0.919800     -0.835990E-01  -10.7439       10.7439       1744.49       1755.23    
  56  0.652899     -0.426332      -54.7907       54.7907       1778.10       1832.89    
  57  0.777375     -0.251832      -32.3646       32.3646       1743.72       1776.09    
  58  0.988137     -0.119340E-01  -1.53371       1.53371       1848.90       1850.43    
  59  0.771111     -0.259922      -33.4043       33.4043       1838.47       1871.88    
  60  0.980963     -0.192203E-01  -2.47012       2.47012       1764.73       1767.20    
  61  0.358823      -1.02493      -131.720       131.720       1863.09       1994.81    
  62  0.398479     -0.920100      -118.248       118.248       1989.46       2107.71    
  63  0.524779     -0.644778      -82.8646       82.8646       1597.26       1680.13    
  64  0.391693E-01  -3.23986      -416.376       416.376       1309.63       1726.01    
loop,thermsimp(1:2)       90   237.646       14.3792    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       1769.04         69.55          1.27         40.14          0.24          0.05        111.25
Just calling func    0   0        111.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1769.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       90
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       91
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      204     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -292.266       292.266       1215.97       1508.24    
   2  0.846291     -0.166892      -21.4484       21.4484       1339.96       1361.41    
   3  0.167054      -1.78944      -229.972       229.972       1187.13       1417.11    
   4  0.786038     -0.240750      -30.9404       30.9404       1354.87       1385.81    
   5  0.680218     -0.385341      -49.5227       49.5227       1365.09       1414.62    
   6  0.843894     -0.169729      -21.8130       21.8130       1364.08       1385.90    
   7  0.295559      -1.21889      -156.647       156.647       1445.36       1602.00    
   8  0.383493     -0.958433      -123.174       123.174       1449.54       1572.71    
   9  0.867247     -0.142431      -18.3047       18.3047       1453.78       1472.08    
  10  0.241960      -1.41898      -182.363       182.363       1448.36       1630.72    
  11  0.486925     -0.719645      -92.4862       92.4862       1504.39       1596.88    
  12  0.750166     -0.287460      -36.9434       36.9434       1405.15       1442.09    
  13  0.507045     -0.679156      -87.2827       87.2827       1441.50       1528.79    
  14  0.237743      -1.43656      -184.622       184.622       1425.50       1610.13    
  15  0.256837E-01  -3.66190      -470.614       470.614       1469.94       1940.56    
  16  0.776460     -0.253010      -32.5159       32.5159       1456.43       1488.95    
  17  0.316300      -1.15106      -147.931       147.931       1494.23       1642.16    
  18  0.493161     -0.706919      -90.8507       90.8507       1552.58       1643.43    
  19  0.807271     -0.214096      -27.5149       27.5149       1508.93       1536.45    
  20  0.338915      -1.08201      -139.056       139.056       1456.76       1595.82    
  21  0.132986      -2.01751      -259.283       259.283       1374.13       1633.41    
  22  0.409975     -0.891659      -114.593       114.593       1489.44       1604.03    
  23  0.525021     -0.644317      -82.8054       82.8054       1410.23       1493.04    
  24  0.393064     -0.933783      -120.007       120.007       1491.51       1611.51    
  25  0.176068      -1.73689      -223.219       223.219       1649.67       1872.89    
  26  0.965490     -0.351191E-01  -4.51339       4.51339       1539.50       1544.01    
  27  0.387767     -0.947350      -121.750       121.750       1618.35       1740.10    
  28  0.936248     -0.658753E-01  -8.46606       8.46606       1569.48       1577.94    
  29  0.914720     -0.891370E-01  -11.4556       11.4556       1597.26       1608.72    
  30  0.332171      -1.10211      -141.639       141.639       1518.51       1660.15    
  31  0.845314E-01  -2.47063      -317.517       317.517       1713.55       2031.07    
  32  0.687741     -0.374343      -48.1093       48.1093       1309.63       1357.74    
  33  0.899776     -0.105610      -13.5726       13.5726       1528.44       1542.01    
  34  0.558791     -0.581980      -74.7940       74.7940       1744.49       1819.28    
  35  0.882799     -0.124658      -16.0206       16.0206       1764.73       1780.75    
  36  0.235569      -1.44575      -185.803       185.803       1561.64       1747.44    
  37  0.533400     -0.628484      -80.7705       80.7705       1745.28       1826.05    
  38  0.147169      -1.91617      -246.259       246.259       1743.72       1989.98    
  39  0.966208E-01  -2.33696      -300.338       300.338       1590.44       1890.77    
  40  0.952887     -0.482588E-01  -6.20205       6.20205       1747.80       1754.00    
  41  0.155551      -1.86078      -239.141       239.141       1718.33       1957.47    
  42  0.645067     -0.438401      -56.3418       56.3418       1631.36       1687.70    
  43  0.394254     -0.930759      -119.618       119.618       1807.25       1926.86    
  44  0.546893     -0.603501      -77.5599       77.5599       1778.10       1855.66    
  45  0.390314     -0.940803      -120.909       120.909       1716.14       1837.04    
  46  0.311561      -1.16616      -149.871       149.871       1848.90       1998.77    
  47  0.752427E-01  -2.58704      -332.477       332.477       1717.46       2049.93    
  48  0.144673      -1.93328      -248.459       248.459       1674.94       1923.40    
  49  0.297567      -1.21212      -155.777       155.777       1730.88       1886.66    
  50  0.544131     -0.608565      -78.2107       78.2107       1838.47       1916.68    
  51  0.750603E-01  -2.58946      -332.789       332.789       1826.29       2159.08    
  52  0.127547      -2.05927      -264.650       264.650       1703.70       1968.35    
  53  0.839209     -0.175296      -22.5284       22.5284       1834.55       1857.08    
  54  0.718305     -0.330861      -42.5211       42.5211       1576.52       1619.04    
  55  0.246952      -1.39856      -179.738       179.738       1733.08       1912.81    
  56  0.550710     -0.596548      -76.6662       76.6662       1863.09       1939.76    
  57  0.588510     -0.530162      -68.1345       68.1345       1859.36       1927.50    
  58  0.361548      -1.01736      -130.747       130.747       1770.52       1901.27    
  59  0.962524     -0.381965E-01  -4.90888       4.90888       1739.04       1743.95    
  60  0.510442     -0.672478      -86.4244       86.4244       1584.73       1671.16    
  61  0.177498      -1.72880      -222.179       222.179       1989.46       2211.64    
  62  0.775349     -0.254441      -32.6999       32.6999       1758.00       1790.70    
  63  0.313518E-01  -3.46248      -444.986       444.986       1548.55       1993.54    
  64  0.136553      -1.99105      -255.882       255.882       1769.04       2024.92    
loop,thermsimp(1:2)       91   292.266       21.4484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       1516.34         69.39          1.28         40.68          0.04          0.05        111.45
Just calling func    0   0        111.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1516.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       91
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       92
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      205     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -195.396       195.396       1309.63       1505.03    
   2  0.389473     -0.942961      -121.186       121.186       1339.96       1461.15    
   3  0.919121     -0.843378E-01  -10.8388       10.8388       1354.87       1365.71    
   4  0.970518     -0.299250E-01  -3.84586       3.84586       1364.08       1367.93    
   5  0.713317     -0.337830      -43.4167       43.4167       1365.09       1408.51    
   6  0.639607     -0.446902      -57.4343       57.4343       1187.13       1244.57    
   7  0.712661     -0.338749      -43.5348       43.5348       1405.15       1448.68    
   8  0.212311      -1.54970      -199.163       199.163       1453.78       1652.94    
   9  0.831769     -0.184200      -23.6728       23.6728       1456.43       1480.11    
  10  0.794875     -0.229571      -29.5036       29.5036       1410.23       1439.74    
  11  0.909815     -0.945137E-01  -12.1466       12.1466       1215.97       1228.12    
  12  0.753651E-01  -2.58541      -332.268       332.268       1441.50       1773.77    
  13  0.676081     -0.391442      -50.3068       50.3068       1508.93       1559.24    
  14  0.597437     -0.515107      -66.1997       66.1997       1528.44       1594.64    
  15  0.146947      -1.91768      -246.454       246.454       1539.50       1785.95    
  16  0.854910     -0.156760      -20.1462       20.1462       1449.54       1469.68    
  17  0.984999     -0.151146E-01  -1.94247       1.94247       1569.48       1571.42    
  18  0.533419     -0.628448      -80.7659       80.7659       1456.76       1537.53    
  19  0.383774     -0.957703      -123.081       123.081       1504.39       1627.47    
  20  0.691729     -0.368561      -47.3662       47.3662       1445.36       1492.72    
  21  0.313732E-01  -3.46180      -444.898       444.898       1489.44       1934.34    
  22  0.415635     -0.877947      -112.831       112.831       1597.26       1710.09    
  23  0.288746      -1.24221      -159.644       159.644       1425.50       1585.15    
  24  0.176464      -1.73464      -222.929       222.929       1491.51       1714.44    
  25  0.881312     -0.126344      -16.2373       16.2373       1576.52       1592.76    
  26  0.962783     -0.379267E-01  -4.87421       4.87421       1448.36       1453.23    
  27  0.415450     -0.878393      -112.888       112.888       1374.13       1487.02    
  28  0.271836      -1.30256      -167.400       167.400       1494.23       1661.63    
  29  0.926655     -0.761736E-01  -9.78956       9.78956       1552.58       1562.37    
  30  0.277790      -1.28089      -164.616       164.616       1518.51       1683.13    
  31  0.189974      -1.66087      -213.449       213.449       1584.73       1798.18    
  32  0.410540     -0.890281      -114.416       114.416       1631.36       1745.77    
  33  0.952387     -0.487839E-01  -6.26953       6.26953       1618.35       1624.62    
  34  0.896015     -0.109798      -14.1108       14.1108       1739.04       1753.15    
  35  0.121549E-01  -4.41002      -566.760       566.760       1561.64       2128.40    
  36  0.723911     -0.323087      -41.5221       41.5221       1747.80       1789.32    
  37  0.759053     -0.275683      -35.4298       35.4298       1764.73       1800.16    
  38  0.969929     -0.305320E-01  -3.92387       3.92387       1758.00       1761.92    
  39  0.852636     -0.159422      -20.4884       20.4884       1744.49       1764.98    
  40  0.730471     -0.314065      -40.3626       40.3626       1745.28       1785.64    
  41  0.528358     -0.637981      -81.9910       81.9910       1716.14       1798.13    
  42  0.404403     -0.905344      -116.352       116.352       1778.10       1894.45    
  43  0.232822      -1.45748      -187.310       187.310       1834.55       2021.86    
  44  0.847643     -0.165296      -21.2432       21.2432       1649.67       1670.91    
  45  0.429393E-01  -3.14797      -404.566       404.566       1730.88       2135.45    
  46  0.673157     -0.395777      -50.8639       50.8639       1590.44       1641.30    
  47  0.806068E-01  -2.51817      -323.627       323.627       1770.52       2094.15    
  48  0.926018     -0.768619E-01  -9.87802       9.87802       1733.08       1742.95    
  49  0.167973      -1.78395      -229.267       229.267       1838.47       2067.74    
  50  0.780773     -0.247471      -31.8041       31.8041       1674.94       1706.75    
  51  0.565702E-01  -2.87227      -369.134       369.134       1807.25       2176.38    
  52  0.646011     -0.436939      -56.1539       56.1539       1859.36       1915.52    
  53  0.455316     -0.786763      -101.112       101.112       1863.09       1964.20    
  54  0.410066     -0.891437      -114.564       114.564       1469.94       1584.51    
  55  0.934064     -0.682104E-01  -8.76616       8.76616       1718.33       1727.09    
  56  0.511079     -0.671231      -86.2642       86.2642       1703.70       1789.97    
  57  0.578130     -0.547957      -70.4215       70.4215       1743.72       1814.14    
  58  0.458047     -0.780783      -100.344       100.344       1548.55       1648.90    
  59  0.223630      -1.49776      -192.487       192.487       1848.90       2041.38    
  60  0.952824E-01  -2.35091      -302.131       302.131       1769.04       2071.17    
  61  0.995385     -0.462583E-02 -0.594495      0.594495       1713.55       1714.15    
  62  0.675298     -0.392602      -50.4558       50.4558       1717.46       1767.91    
  63  0.728172     -0.317218      -40.7678       40.7678       1826.29       1867.06    
  64  0.240868      -1.42350      -182.944       182.944       1516.34       1699.29    
loop,thermsimp(1:2)       92   195.396       121.186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       1341.38         69.06          1.21         40.31          0.23          0.05        110.88
Just calling func    0   0        110.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208       2223.93         69.29          1.25         40.38          0.04          0.04        111.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1341.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       92
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       93
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      207     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -245.021       245.021       1215.97       1460.99    
   2  0.695074     -0.363738      -46.7463       46.7463       1187.13       1233.88    
   3  0.541180     -0.614003      -78.9095       78.9095       1354.87       1433.78    
   4  0.189791      -1.66183      -213.573       213.573       1364.08       1577.66    
   5  0.245553      -1.40424      -180.468       180.468       1365.09       1545.56    
   6  0.641474     -0.443986      -57.0596       57.0596       1410.23       1467.29    
   7  0.308462      -1.17616      -151.156       151.156       1405.15       1556.30    
   8  0.478005     -0.738133      -94.8623       94.8623       1448.36       1543.22    
   9  0.395759     -0.926951      -119.128       119.128       1339.96       1459.09    
  10  0.438776E-01  -3.12635      -401.788       401.788       1449.54       1851.33    
  11  0.294628E-01  -3.52463      -452.973       452.973       1456.43       1909.41    
  12  0.331052E-01  -3.40806      -437.992       437.992       1374.13       1812.12    
  13  0.916325E-01  -2.38997      -307.150       307.150       1445.36       1752.51    
  14  0.985908     -0.141919E-01  -1.82389       1.82389       1309.63       1311.46    
  15  0.511724     -0.669970      -86.1021       86.1021       1456.76       1542.86    
  16  0.185695      -1.68365      -216.377       216.377       1508.93       1725.31    
  17  0.830711     -0.185474      -23.8364       23.8364       1552.58       1576.41    
  18  0.765179E-04  -9.47799      -1218.08       1218.08       1569.48       2787.55    
  19  0.129365      -2.04512      -262.832       262.832       1469.94       1732.77    
  20  0.796363     -0.227700      -29.2631       29.2631       1425.50       1454.77    
  21  0.589256     -0.528895      -67.9718       67.9718       1576.52       1644.49    
  22  0.770995     -0.260073      -33.4237       33.4237       1528.44       1561.86    
  23  0.685430     -0.377709      -48.5419       48.5419       1618.35       1666.89    
  24  0.487688     -0.718080      -92.2851       92.2851       1504.39       1596.68    
  25  0.114898      -2.16371      -278.073       278.073       1590.44       1868.51    
  26  0.165093      -1.80124      -231.490       231.490       1548.55       1780.04    
  27  0.302275      -1.19642      -153.760       153.760       1453.78       1607.54    
  28  0.123669      -2.09014      -268.618       268.618       1494.23       1762.85    
  29  0.960526     -0.402739E-01  -5.17585       5.17585       1649.67       1654.85    
  30  0.744557     -0.294966      -37.9080       37.9080       1518.51       1556.42    
  31  0.418436     -0.871232      -111.968       111.968       1516.34       1628.31    
  32  0.624411     -0.470947      -60.5244       60.5244       1674.94       1735.47    
  33  0.920055     -0.833222E-01  -10.7083       10.7083       1597.26       1607.97    
  34  0.330507      -1.10713      -142.284       142.284       1713.55       1855.84    
  35  0.889566     -0.117022      -15.0392       15.0392       1491.51       1506.55    
  36  0.269410      -1.31152      -168.552       168.552       1718.33       1886.88    
  37  0.458780     -0.779184      -100.138       100.138       1733.08       1833.21    
  38  0.952588     -0.485730E-01  -6.24243       6.24243       1631.36       1637.60    
  39  0.213836      -1.54254      -198.242       198.242       1739.04       1937.28    
  40  0.460697     -0.775015      -99.6022       99.6022       1758.00       1857.60    
  41  0.571693     -0.559153      -71.8604       71.8604       1744.49       1816.35    
  42  0.201363      -1.60265      -205.967       205.967       1717.46       1923.42    
  43  0.707817     -0.345570      -44.4115       44.4115       1441.50       1485.92    
  44  0.927118     -0.756745E-01  -9.72542       9.72542       1745.28       1755.00    
  45  0.288916      -1.24162      -159.569       159.569       1539.50       1699.07    
  46  0.702737     -0.352773      -45.3371       45.3371       1747.80       1793.13    
  47  0.253190      -1.37362      -176.532       176.532       1703.70       1880.24    
  48  0.709086     -0.343779      -44.1812       44.1812       1716.14       1760.32    
  49  0.399421     -0.917738      -117.944       117.944       1584.73       1702.68    
  50  0.837301     -0.177572      -22.8210       22.8210       1764.73       1787.55    
  51  0.906694     -0.979507E-01  -12.5883       12.5883       1743.72       1756.31    
  52  0.479547     -0.734913      -94.4484       94.4484       1826.29       1920.74    
  53  0.573668     -0.555704      -71.4171       71.4171       1778.10       1849.52    
  54  0.616113     -0.484325      -62.2438       62.2438       1859.36       1921.61    
  55  0.899004     -0.106467      -13.6828       13.6828       1489.44       1503.12    
  56  0.668105     -0.403310      -51.8320       51.8320       1863.09       1914.92    
  57  0.464354     -0.767107      -98.5859       98.5859       1834.55       1933.14    
  58  0.298472E-01  -3.51166      -451.307       451.307       1848.90       2300.20    
  59  0.458507     -0.779779      -100.214       100.214       1838.47       1938.69    
  60  0.372295E-01  -3.29065      -422.903       422.903       1769.04       2191.94    
  61  0.349332      -1.05173      -135.165       135.165       1770.52       1905.69    
  62  0.396867     -0.924153      -118.769       118.769       1561.64       1680.41    
  63  0.599776     -0.511199      -65.6975       65.6975       1730.88       1796.58    
  64  0.175124      -1.74226      -223.909       223.909       1341.38       1565.29    
loop,thermsimp(1:2)       93   245.021       46.7463    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209       2814.21         69.18          1.23         40.36          0.43          0.05        111.25
Just calling func    0   0        111.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210       2199.64         68.71          1.13         40.69          0.72          0.04        111.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2199.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       93
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       94
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      209     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -22.0583       22.0583       1187.13       1209.19    
   2  0.478368     -0.737375      -94.7649       94.7649       1309.63       1404.40    
   3  0.283498      -1.26055      -162.002       162.002       1354.87       1516.87    
   4  0.520516     -0.652935      -83.9129       83.9129       1425.50       1509.42    
   5  0.703282E-01  -2.65458      -341.158       341.158       1339.96       1681.12    
   6  0.914137     -0.897748E-01  -11.5375       11.5375       1215.97       1227.51    
   7  0.479535     -0.734938      -94.4517       94.4517       1410.23       1504.69    
   8  0.921875     -0.813456E-01  -10.4543       10.4543       1441.50       1451.96    
   9  0.739547     -0.301718      -38.7757       38.7757       1489.44       1528.22    
  10  0.790753     -0.234770      -30.1718       30.1718       1491.51       1521.68    
  11  0.212247E-01  -3.85259      -495.121       495.121       1456.76       1951.88    
  12  0.286971      -1.24837      -160.437       160.437       1448.36       1608.80    
  13  0.695666     -0.362886      -46.6368       46.6368       1365.09       1411.73    
  14  0.534590     -0.626255      -80.4841       80.4841       1405.15       1485.63    
  15  0.945577     -0.559603E-01  -7.19182       7.19182       1518.51       1525.71    
  16  0.619446     -0.478930      -61.5504       61.5504       1528.44       1589.99    
  17  0.291083E-01  -3.53673      -454.528       454.528       1341.38       1795.91    
  18  0.372584E-01  -3.28988      -422.803       422.803       1552.58       1975.38    
  19  0.713241     -0.337936      -43.4303       43.4303       1364.08       1407.51    
  20  0.280281      -1.27196      -163.468       163.468       1504.39       1667.86    
  21  0.254796      -1.36729      -175.719       175.719       1453.78       1629.50    
  22  0.498598     -0.695955      -89.4417       89.4417       1597.26       1686.71    
  23  0.515261E-01  -2.96567      -381.137       381.137       1516.34       1897.48    
  24  0.347627      -1.05662      -135.794       135.794       1631.36       1767.15    
  25  0.696212     -0.362102      -46.5360       46.5360       1576.52       1623.06    
  26  0.707749E-01  -2.64825      -340.344       340.344       1649.67       1990.02    
  27  0.364523E-01  -3.31175      -425.614       425.614       1618.35       2043.96    
  28  0.895087E-02  -4.71600      -606.084       606.084       1561.64       2167.73    
  29  0.333194      -1.09903      -141.244       141.244       1539.50       1680.74    
  30  0.451375     -0.795457      -102.229       102.229       1584.73       1686.96    
  31  0.849961E-01  -2.46515      -316.812       316.812       1508.93       1825.75    
  32  0.524791     -0.644756      -82.8617       82.8617       1469.94       1552.80    
  33  0.641068     -0.444619      -57.1409       57.1409       1674.94       1732.08    
  34  0.757376     -0.277895      -35.7141       35.7141       1445.36       1481.07    
  35  0.760597     -0.273651      -35.1687       35.1687       1745.28       1780.45    
  36  0.709070     -0.343801      -44.1841       44.1841       1743.72       1787.90    
  37  0.794718     -0.229768      -29.5289       29.5289       1716.14       1745.66    
  38  0.869679     -0.139632      -17.9450       17.9450       1494.23       1512.17    
  39  0.229100E-01  -3.77618      -485.302       485.302       1548.55       2033.86    
  40  0.935590     -0.665776E-01  -8.55632       8.55632       1764.73       1773.29    
  41  0.889453     -0.117149      -15.0555       15.0555       1747.80       1762.85    
  42  0.529054     -0.636665      -81.8220       81.8220       1730.88       1812.70    
  43  0.907902     -0.966186E-01  -12.4171       12.4171       1374.13       1386.54    
  44  0.693802     -0.365568      -46.9815       46.9815       1744.49       1791.47    
  45  0.883803     -0.123521      -15.8745       15.8745       1733.08       1748.95    
  46  0.275134E-01  -3.59308      -461.770       461.770       1778.10       2239.87    
  47  0.324767      -1.12465      -144.536       144.536       1449.54       1594.07    
  48  0.853326     -0.158614      -20.3845       20.3845       1713.55       1733.94    
  49  0.325639      -1.12197      -144.191       144.191       1758.00       1902.19    
  50  0.773280     -0.257115      -33.0435       33.0435       1590.44       1623.48    
  51  0.108890      -2.21741      -284.974       284.974       1703.70       1988.68    
  52  0.188532E-01  -3.97107      -510.349       510.349       1718.33       2228.67    
  53  0.970927     -0.295045E-01  -3.79182       3.79182       1770.52       1774.32    
  54  0.549714     -0.598357      -76.8987       76.8987       1456.43       1533.33    
  55  0.937888E-01  -2.36671      -304.161       304.161       1863.09       2167.25    
  56  0.293516      -1.22582      -157.538       157.538       1826.29       1983.83    
  57  0.598789     -0.512846      -65.9091       65.9091       1859.36       1925.27    
  58  0.173412      -1.75209      -225.172       225.172       1717.46       1942.63    
  59  0.552776     -0.592802      -76.1848       76.1848       1834.55       1910.74    
  60  0.586717     -0.533213      -68.5267       68.5267       1739.04       1807.56    
  61  0.902886     -0.102159      -13.1291       13.1291       1838.47       1851.60    
  62  0.423679     -0.858778      -110.367       110.367       1769.04       1879.41    
  63  0.796344E-01  -2.53031      -325.186       325.186       1848.90       2174.08    
  64  0.894023     -0.112024      -14.3969       14.3969       2199.64       2214.04    
loop,thermsimp(1:2)       94   22.0583       94.7649    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       1969.94         69.45          1.23         40.26          0.00          0.05        111.00
Just calling func    0   0        111.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1969.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       94
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       95
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      210     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -37.8919       37.8919       1187.13       1225.03    
   2  0.739179     -0.302215      -38.8396       38.8396       1215.97       1254.81    
   3  0.131167      -2.03128      -261.053       261.053       1374.13       1635.18    
   4  0.523356     -0.647493      -83.2136       83.2136       1309.63       1392.85    
   5  0.660412     -0.414891      -53.3204       53.3204       1364.08       1417.40    
   6  0.433074E-01  -3.13943      -403.469       403.469       1365.09       1768.56    
   7  0.480352     -0.733236      -94.2329       94.2329       1441.50       1535.74    
   8  0.808114     -0.213053      -27.3808       27.3808       1445.36       1472.74    
   9  0.723804     -0.323235      -41.5410       41.5410       1405.15       1446.69    
  10  0.322682      -1.13109      -145.363       145.363       1410.23       1555.60    
  11  0.898907     -0.106576      -13.6968       13.6968       1425.50       1439.20    
  12  0.359972      -1.02173      -131.309       131.309       1494.23       1625.54    
  13  0.879118     -0.128836      -16.5575       16.5575       1354.87       1371.43    
  14  0.963559     -0.371220E-01  -4.77078       4.77078       1491.51       1496.28    
  15  0.662848     -0.411210      -52.8472       52.8472       1518.51       1571.36    
  16  0.648402     -0.433244      -55.6790       55.6790       1489.44       1545.12    
  17  0.375343     -0.979916      -125.935       125.935       1456.43       1582.37    
  18  0.812441     -0.207712      -26.6945       26.6945       1469.94       1496.64    
  19  0.248177E-01  -3.69620      -475.022       475.022       1528.44       2003.46    
  20  0.653530     -0.425366      -54.6666       54.6666       1449.54       1504.20    
  21  0.712244     -0.339334      -43.6100       43.6100       1448.36       1491.97    
  22  0.358229      -1.02658      -131.933       131.933       1576.52       1708.45    
  23  0.325518      -1.12234      -144.239       144.239       1590.44       1734.67    
  24  0.770349     -0.260912      -33.5314       33.5314       1453.78       1487.31    
  25  0.633518E-01  -2.75905      -354.584       354.584       1504.39       1858.98    
  26  0.168796      -1.77907      -228.639       228.639       1539.50       1768.14    
  27  0.562007     -0.576241      -74.0564       74.0564       1339.96       1414.02    
  28  0.156316      -1.85588      -238.511       238.511       1597.26       1835.78    
  29  0.967732     -0.328002E-01  -4.21537       4.21537       1584.73       1588.95    
  30  0.538071     -0.619766      -79.6501       79.6501       1674.94       1754.59    
  31  0.967495     -0.330453E-01  -4.24687       4.24687       1713.55       1717.80    
  32  0.771619     -0.259265      -33.3198       33.3198       1716.14       1749.46    
  33  0.246044      -1.40225      -180.212       180.212       1733.08       1913.29    
  34  0.700731     -0.355631      -45.7045       45.7045       1747.80       1793.50    
  35  0.382714     -0.960468      -123.436       123.436       1631.36       1754.79    
  36  0.580395     -0.544047      -69.9190       69.9190       1764.73       1834.65    
  37  0.305131      -1.18701      -152.551       152.551       1770.52       1923.07    
  38  0.624250     -0.471204      -60.5575       60.5575       1745.28       1805.83    
  39  0.575432     -0.552634      -71.0225       71.0225       1743.72       1814.74    
  40  0.701335     -0.354770      -45.5938       45.5938       1744.49       1790.08    
  41  0.290211      -1.23715      -158.994       158.994       1341.38       1500.37    
  42  0.140976      -1.95916      -251.785       251.785       1739.04       1990.82    
  43  0.275714      -1.28839      -165.580       165.580       1730.88       1896.46    
  44  0.856479     -0.154925      -19.9105       19.9105       1508.93       1528.84    
  45  0.994286     -0.573084E-02 -0.736507      0.736507       1838.47       1839.21    
  46  0.913008     -0.910102E-01  -11.6963       11.6963       1769.04       1780.74    
  47  0.204063      -1.58933      -204.255       204.255       1516.34       1720.60    
  48  0.388833     -0.944605      -121.397       121.397       1758.00       1879.40    
  49  0.781619     -0.246387      -31.6648       31.6648       1834.55       1866.22    
  50  0.373421     -0.985049      -126.595       126.595       1859.36       1985.96    
  51  0.834918     -0.180422      -23.1872       23.1872       1717.46       1740.65    
  52  0.174969      -1.74315      -224.023       224.023       1456.76       1680.78    
  53  0.531353     -0.632329      -81.2647       81.2647       1552.58       1633.84    
  54  0.339530      -1.08019      -138.823       138.823       1826.29       1965.11    
  55  0.929760     -0.728288E-01  -9.35970       9.35970       1703.70       1713.06    
  56  0.223523      -1.49824      -192.548       192.548       1649.67       1842.22    
  57  0.557869     -0.583631      -75.0061       75.0061       1548.55       1623.56    
  58  0.521577     -0.650898      -83.6512       83.6512       1618.35       1702.00    
  59  0.856336     -0.155092      -19.9319       19.9319       1863.09       1883.02    
  60  0.645536     -0.437674      -56.2483       56.2483       1561.64       1617.89    
  61  0.438677     -0.823992      -105.897       105.897       1848.90       1954.79    
  62  0.346732      -1.05920      -136.125       136.125       2199.64       2335.76    
  63  0.902848     -0.102201      -13.1345       13.1345       1718.33       1731.46    
  64  0.578219     -0.547803      -70.4017       70.4017       1969.94       2040.34    
loop,thermsimp(1:2)       95   37.8919       38.8396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212       1500.10         69.43          1.26         40.04          0.24          0.05        111.01
Just calling func    0   0        111.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1500.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       95
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   173.651    

hmean,hstd :    1582.01       173.651    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1582.01       173.651    
h(1),h(best1),h(np1) :    1187.13       1187.13       1500.10    
htherm(1),htherm(best1),htherm(np1) :    1225.03       1225.03       2335.76    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        1
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      211     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -499.882       499.882       1187.13       1687.02    
   2  0.977100     -0.231667E-01  -2.97730       2.97730       1215.97       1218.95    
   3  0.491467     -0.710361      -91.2930       91.2930       1354.87       1446.16    
   4  0.802113E-01  -2.52309      -324.259       324.259       1309.63       1633.89    
   5  0.891044     -0.115361      -14.8258       14.8258       1339.96       1354.79    
   6  0.397551     -0.922433      -118.548       118.548       1364.08       1482.63    
   7  0.121203      -2.11029      -271.207       271.207       1425.50       1696.71    
   8  0.789985E-01  -2.53833      -326.217       326.217       1405.15       1731.37    
   9  0.921855     -0.813679E-01  -10.4571       10.4571       1445.36       1455.81    
  10  0.252671      -1.37567      -176.796       176.796       1453.78       1630.57    
  11  0.787271     -0.239182      -30.7389       30.7389       1448.36       1479.10    
  12  0.634653     -0.454676      -58.4334       58.4334       1491.51       1549.94    
  13  0.706648     -0.347222      -44.6237       44.6237       1469.94       1514.57    
  14  0.349740E-01  -3.35315      -430.935       430.935       1341.38       1772.31    
  15  0.686787     -0.375731      -48.2876       48.2876       1449.54       1497.83    
  16  0.309348      -1.17329      -150.787       150.787       1508.93       1659.72    
  17  0.703748     -0.351336      -45.1524       45.1524       1441.50       1486.66    
  18  0.985092     -0.150207E-01  -1.93041       1.93041       1489.44       1491.37    
  19  0.440741     -0.819298      -105.293       105.293       1410.23       1515.53    
  20  0.796112     -0.228015      -29.3037       29.3037       1518.51       1547.82    
  21  0.451938     -0.794210      -102.069       102.069       1456.43       1558.50    
  22  0.230902      -1.46576      -188.374       188.374       1584.73       1773.11    
  23  0.760212     -0.274159      -35.2339       35.2339       1561.64       1596.88    
  24  0.250434E-02  -5.98973      -769.779       769.779       1548.55       2318.33    
  25  0.627913E-01  -2.76794      -355.726       355.726       1494.23       1849.95    
  26  0.263128      -1.33511      -171.584       171.584       1552.58       1724.16    
  27  0.177986      -1.72605      -221.826       221.826       1374.13       1595.95    
  28  0.919776     -0.836247E-01  -10.7472       10.7472       1456.76       1467.51    
  29  0.854272     -0.157506      -20.2421       20.2421       1618.35       1638.59    
  30  0.648187     -0.433576      -55.7216       55.7216       1576.52       1632.24    
  31  0.853797     -0.158061      -20.3135       20.3135       1703.70       1724.02    
  32  0.484551     -0.724533      -93.1144       93.1144       1713.55       1806.67    
  33  0.423817     -0.858454      -110.325       110.325       1516.34       1626.67    
  34  0.932015     -0.704065E-01  -9.04839       9.04839       1718.33       1727.37    
  35  0.161906      -1.82074      -233.995       233.995       1590.44       1824.43    
  36  0.812519     -0.207617      -26.6821       26.6821       1717.46       1744.14    
  37  0.346838      -1.05890      -136.086       136.086       1716.14       1852.22    
  38  0.477141     -0.739943      -95.0948       95.0948       1674.94       1770.04    
  39  0.931946     -0.704808E-01  -9.05795       9.05795       1631.36       1640.42    
  40  0.189794      -1.66182      -213.571       213.571       1539.50       1753.07    
  41  0.361902      -1.01638      -130.622       130.622       1365.09       1495.72    
  42  0.775630E-02  -4.85925      -624.494       624.494       1769.04       2393.53    
  43  0.292497      -1.22930      -157.985       157.985       1744.49       1902.47    
  44  0.264300      -1.33067      -171.013       171.013       1747.80       1918.81    
  45  0.529597     -0.635638      -81.6900       81.6900       1745.28       1826.97    
  46  0.163272      -1.81234      -232.915       232.915       1743.72       1976.64    
  47  0.212593      -1.54838      -198.992       198.992       1764.73       1963.73    
  48  0.359173      -1.02395      -131.595       131.595       1597.26       1728.86    
  49  0.993707     -0.631295E-02 -0.811318      0.811318       1838.47       1839.29    
  50  0.261479      -1.34140      -172.392       172.392       1649.67       1822.06    
  51  0.441392     -0.817822      -105.104       105.104       1504.39       1609.50    
  52  0.624656     -0.470554      -60.4740       60.4740       1834.55       1895.03    
  53  0.646784     -0.435743      -56.0001       56.0001       1758.00       1814.00    
  54  0.343734      -1.06789      -137.241       137.241       1863.09       2000.33    
  55  0.438651     -0.824052      -105.904       105.904       1730.88       1836.79    
  56  0.476250     -0.741811      -95.3350       95.3350       1733.08       1828.41    
  57  0.665451     -0.407291      -52.3436       52.3436       1770.52       1822.87    
  58  0.903561E-01  -2.40400      -308.953       308.953       1848.90       2157.85    
  59  0.899286     -0.106155      -13.6426       13.6426       1826.29       1839.93    
  60  0.822477     -0.195434      -25.1165       25.1165       1859.36       1884.48    
  61  0.824462E-01  -2.49561      -320.727       320.727       1739.04       2059.76    
  62  0.689460     -0.371846      -47.7883       47.7883       1528.44       1576.23    
  63  0.124471      -2.08368      -267.788       267.788       1969.94       2237.73    
  64  0.215598      -1.53434      -197.188       197.188       1500.10       1697.29    
loop,thermsimp(1:2)        1   499.882       2.97730    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213       1438.65         69.31          1.27         40.71          0.03          0.05        111.36
Just calling func    0   0        111.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1438.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        1
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        2
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      212     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -191.319       191.319       1215.97       1407.29    
   2  0.726663     -0.319292      -41.0343       41.0343       1339.96       1381.00    
   3  0.929061     -0.735808E-01  -9.45634       9.45634       1354.87       1364.33    
   4  0.764703     -0.268268      -34.4769       34.4769       1445.36       1479.83    
   5  0.119617      -2.12346      -272.900       272.900       1456.76       1729.66    
   6  0.369672     -0.995138      -127.892       127.892       1448.36       1576.25    
   7  0.875806     -0.132611      -17.0427       17.0427       1364.08       1381.13    
   8  0.657886     -0.418723      -53.8128       53.8128       1441.50       1495.32    
   9  0.387095E-01  -3.25167      -417.893       417.893       1489.44       1907.33    
  10  0.454078     -0.789485      -101.462       101.462       1365.09       1466.56    
  11  0.890470     -0.116006      -14.9086       14.9086       1449.54       1464.45    
  12  0.118445      -2.13331      -274.165       274.165       1469.94       1744.11    
  13  0.190238      -1.65948      -213.271       213.271       1410.23       1623.50    
  14  0.435624     -0.830976      -106.794       106.794       1518.51       1625.31    
  15  0.768655     -0.263114      -33.8144       33.8144       1491.51       1525.32    
  16  0.870896E-01  -2.44082      -313.685       313.685       1456.43       1770.12    
  17  0.936453     -0.656556E-01  -8.43782       8.43782       1528.44       1536.88    
  18  0.159312      -1.83689      -236.071       236.071       1374.13       1610.20    
  19  0.988165     -0.119051E-01  -1.53000       1.53000       1561.64       1563.17    
  20  0.713347     -0.337787      -43.4112       43.4112       1504.39       1547.80    
  21  0.417075     -0.874489      -112.386       112.386       1516.34       1628.73    
  22  0.719048     -0.329827      -42.3882       42.3882       1453.78       1496.17    
  23  0.785519     -0.241411      -31.0253       31.0253       1576.52       1607.55    
  24  0.356994      -1.03004      -132.376       132.376       1309.63       1442.01    
  25  0.357951      -1.02736      -132.033       132.033       1618.35       1750.38    
  26  0.154816      -1.86552      -239.750       239.750       1631.36       1871.11    
  27  0.246912      -1.39872      -179.759       179.759       1508.93       1688.69    
  28  0.553458     -0.591570      -76.0264       76.0264       1187.13       1263.16    
  29  0.729602     -0.315256      -40.5156       40.5156       1425.50       1466.02    
  30  0.605470     -0.501750      -64.4832       64.4832       1500.10       1564.58    
  31  0.278987E-01  -3.57918      -459.983       459.983       1703.70       2163.69    
  32  0.187991      -1.67136      -214.798       214.798       1552.58       1767.38    
  33  0.543158     -0.610355      -78.4407       78.4407       1718.33       1796.77    
  34  0.996749     -0.325625E-02 -0.418481      0.418481       1597.26       1597.68    
  35  0.540727     -0.614841      -79.0172       79.0172       1405.15       1484.17    
  36  0.833271E-01  -2.48498      -319.361       319.361       1717.46       2036.82    
  37  0.404538     -0.905011      -116.309       116.309       1539.50       1655.81    
  38  0.147302      -1.91527      -246.144       246.144       1674.94       1921.09    
  39  0.364226E-01  -3.31257      -425.719       425.719       1341.38       1767.10    
  40  0.381304     -0.964158      -123.910       123.910       1584.73       1708.64    
  41  0.737758     -0.304140      -39.0870       39.0870       1713.55       1752.64    
  42  0.179374      -1.71828      -220.827       220.827       1758.00       1978.83    
  43  0.281757      -1.26671      -162.793       162.793       1649.67       1812.46    
  44  0.192633      -1.64697      -211.662       211.662       1770.52       1982.19    
  45  0.954983     -0.460617E-01  -5.91969       5.91969       1590.44       1596.36    
  46  0.710258     -0.342127      -43.9690       43.9690       1745.28       1789.25    
  47  0.831769     -0.184201      -23.6729       23.6729       1733.08       1756.75    
  48  0.912541     -0.915218E-01  -11.7621       11.7621       1730.88       1742.64    
  49  0.221543      -1.50714      -193.692       193.692       1838.47       2032.17    
  50  0.690803E-02  -4.97507      -639.379       639.379       1826.29       2465.67    
  51  0.162616      -1.81637      -233.433       233.433       1494.23       1727.66    
  52  0.869433     -0.139913      -17.9812       17.9812       1716.14       1734.12    
  53  0.541563     -0.613295      -78.8185       78.8185       1859.36       1938.18    
  54  0.310811      -1.16857      -150.181       150.181       1834.55       1984.73    
  55  0.879573     -0.128319      -16.4911       16.4911       1744.49       1760.98    
  56  0.262339      -1.33812      -171.970       171.970       1747.80       1919.77    
  57  0.651476     -0.428515      -55.0712       55.0712       1764.73       1819.80    
  58  0.498193     -0.696767      -89.5461       89.5461       1743.72       1833.27    
  59  0.251241      -1.38134      -177.525       177.525       1863.09       2040.62    
  60  0.704518     -0.350242      -45.0118       45.0118       1739.04       1784.05    
  61  0.387431     -0.948219      -121.862       121.862       1848.90       1970.76    
  62  0.447312     -0.804500      -103.391       103.391       1969.94       2073.33    
  63  0.842599     -0.171264      -22.0102       22.0102       1548.55       1570.56    
  64  0.754683     -0.281457      -36.1719       36.1719       1438.65       1474.82    
loop,thermsimp(1:2)        2   191.319       41.0343    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       1553.35         69.44          1.28         40.11          0.00          0.04        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1553.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        2
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        3
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      213     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -112.862       112.862       1187.13       1300.00    
   2  0.117190E-02  -6.74913      -867.374       867.374       1354.87       2222.24    
   3  0.432199     -0.838870      -107.809       107.809       1339.96       1447.77    
   4  0.466381     -0.762753      -98.0264       98.0264       1364.08       1462.11    
   5  0.696685     -0.361422      -46.4486       46.4486       1215.97       1262.42    
   6  0.193714      -1.64137      -210.943       210.943       1309.63       1520.58    
   7  0.535145     -0.625217      -80.3507       80.3507       1449.54       1529.89    
   8  0.812984     -0.207044      -26.6086       26.6086       1425.50       1452.11    
   9  0.956789     -0.441723E-01  -5.67687       5.67687       1365.09       1370.77    
  10  0.496711E-01  -3.00233      -385.849       385.849       1438.65       1824.50    
  11  0.206308E-01  -3.88097      -498.769       498.769       1445.36       1944.12    
  12  0.423434     -0.859358      -110.442       110.442       1405.15       1515.59    
  13  0.216826      -1.52866      -196.458       196.458       1441.50       1637.96    
  14  0.792422     -0.232661      -29.9008       29.9008       1453.78       1483.68    
  15  0.265940      -1.32449      -170.218       170.218       1491.51       1661.73    
  16  0.993400     -0.662201E-02 -0.851038      0.851038       1528.44       1529.29    
  17  0.645200E-01  -2.74078      -352.235       352.235       1504.39       1856.63    
  18  0.651527     -0.428436      -55.0611       55.0611       1561.64       1616.70    
  19  0.858875     -0.152131      -19.5514       19.5514       1500.10       1519.65    
  20  0.126056      -2.07103      -266.161       266.161       1548.55       1814.72    
  21  0.772661E-01  -2.56050      -329.066       329.066       1448.36       1777.42    
  22  0.441429     -0.817737      -105.093       105.093       1590.44       1695.53    
  23  0.166586      -1.79224      -230.332       230.332       1597.26       1827.60    
  24  0.217490      -1.52560      -196.065       196.065       1576.52       1772.59    
  25  0.632871     -0.457488      -58.7948       58.7948       1374.13       1432.92    
  26  0.201694      -1.60100      -205.755       205.755       1410.23       1615.99    
  27  0.282690      -1.26341      -162.368       162.368       1518.51       1680.88    
  28  0.255086E-01  -3.66874      -471.494       471.494       1516.34       1987.83    
  29  0.562308     -0.575706      -73.9876       73.9876       1539.50       1613.49    
  30  0.283366E-01  -3.56360      -457.981       457.981       1508.93       1966.91    
  31  0.404254E-01  -3.20830      -412.319       412.319       1584.73       1997.05    
  32  0.170475      -1.76917      -227.367       227.367       1494.23       1721.60    
  33  0.141712      -1.95396      -251.115       251.115       1456.76       1707.88    
  34  0.773173     -0.257253      -33.0612       33.0612       1716.14       1749.20    
  35  0.255978      -1.36266      -175.125       175.125       1730.88       1906.01    
  36  0.823739     -0.193902      -24.9196       24.9196       1469.94       1494.86    
  37  0.166307      -1.79392      -230.548       230.548       1618.35       1848.90    
  38  0.676319     -0.391090      -50.2615       50.2615       1713.55       1763.81    
  39  0.144546      -1.93416      -248.571       248.571       1733.08       1981.65    
  40  0.593436     -0.521826      -67.0633       67.0633       1744.49       1811.55    
  41  0.762921     -0.270600      -34.7766       34.7766       1341.38       1376.16    
  42  0.855796     -0.155724      -20.0130       20.0130       1552.58       1572.59    
  43  0.433555     -0.835737      -107.406       107.406       1456.43       1563.84    
  44  0.252891      -1.37480      -176.684       176.684       1739.04       1915.72    
  45  0.942909     -0.587850E-01  -7.55484       7.55484       1745.28       1752.83    
  46  0.432313     -0.838605      -107.775       107.775       1718.33       1826.10    
  47  0.975713     -0.245869E-01  -3.15982       3.15982       1649.67       1652.83    
  48  0.541226     -0.613919      -78.8987       78.8987       1764.73       1843.63    
  49  0.255057      -1.36627      -175.588       175.588       1743.72       1919.31    
  50  0.202141      -1.59879      -205.471       205.471       1631.36       1836.83    
  51  0.949562     -0.517549E-01  -6.65136       6.65136       1489.44       1496.09    
  52  0.255660E-01  -3.66649      -471.205       471.205       1747.80       2219.00    
  53  0.306802      -1.18155      -151.849       151.849       1674.94       1826.79    
  54  0.243277E-01  -3.71614      -477.585       477.585       1859.36       2336.95    
  55  0.466793     -0.761870      -97.9129       97.9129       1848.90       1946.81    
  56  0.200407      -1.60740      -206.578       206.578       1758.00       1964.58    
  57  0.282970      -1.26241      -162.241       162.241       1770.52       1932.76    
  58  0.214232      -1.54069      -198.005       198.005       1834.55       2032.56    
  59  0.326606      -1.11900      -143.810       143.810       1838.47       1982.28    
  60  0.997507     -0.249621E-02 -0.320804      0.320804       1717.46       1717.78    
  61  0.426725     -0.851615      -109.447       109.447       1863.09       1972.54    
  62  0.862854     -0.147510      -18.9575       18.9575       1969.94       1988.90    
  63  0.737079     -0.305061      -39.2053       39.2053       1703.70       1742.91    
  64  0.976691     -0.235846E-01  -3.03101       3.03101       1553.35       1556.38    
loop,thermsimp(1:2)        3   112.862       867.374    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       1474.69         69.20          1.23         40.10          0.56          0.05        111.14
Just calling func    0   0        111.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1474.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        3
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        4
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      214     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -54.0592       54.0592       1215.97       1270.03    
   2  0.880966     -0.126736      -16.2876       16.2876       1187.13       1203.42    
   3  0.854972     -0.156687      -20.1368       20.1368       1365.09       1385.23    
   4  0.797101     -0.226774      -29.1442       29.1442       1341.38       1370.52    
   5  0.158477      -1.84214      -236.746       236.746       1374.13       1610.87    
   6  0.593839     -0.521148      -66.9760       66.9760       1339.96       1406.94    
   7  0.817101     -0.201993      -25.9594       25.9594       1425.50       1451.46    
   8  0.997190     -0.281377E-02 -0.361616      0.361616       1364.08       1364.45    
   9  0.402857     -0.909174      -116.844       116.844       1453.78       1570.62    
  10  0.690455     -0.370405      -47.6031       47.6031       1469.94       1517.54    
  11  0.609635     -0.494895      -63.6022       63.6022       1489.44       1553.04    
  12  0.491117     -0.711073      -91.3846       91.3846       1405.15       1496.53    
  13  0.990676     -0.936814E-02  -1.20396       1.20396       1500.10       1501.30    
  14  0.976919     -0.233519E-01  -3.00110       3.00110       1309.63       1312.64    
  15  0.692556     -0.367366      -47.2126       47.2126       1528.44       1575.65    
  16  0.549694     -0.598394      -76.9035       76.9035       1449.54       1526.44    
  17  0.538267E-01  -2.92199      -375.523       375.523       1553.35       1928.87    
  18  0.602193     -0.507178      -65.1807       65.1807       1456.43       1521.61    
  19  0.537276     -0.621243      -79.8400       79.8400       1552.58       1632.42    
  20  0.338220      -1.08406      -139.319       139.319       1539.50       1678.82    
  21  0.306772      -1.18165      -151.862       151.862       1410.23       1562.10    
  22  0.895389     -0.110497      -14.2007       14.2007       1561.64       1575.84    
  23  0.120096      -2.11946      -272.386       272.386       1441.50       1713.89    
  24  0.680166     -0.385418      -49.5325       49.5325       1649.67       1699.20    
  25  0.369434     -0.995782      -127.974       127.974       1491.51       1619.48    
  26  0.235484      -1.44611      -185.849       185.849       1518.51       1704.36    
  27  0.260836      -1.34386      -172.709       172.709       1590.44       1763.14    
  28  0.720259     -0.328144      -42.1720       42.1720       1456.76       1498.93    
  29  0.695069     -0.363744      -46.7471       46.7471       1717.46       1764.21    
  30  0.105076      -2.25307      -289.557       289.557       1494.23       1783.79    
  31  0.968349     -0.321628E-01  -4.13345       4.13345       1703.70       1707.84    
  32  0.974131     -0.262091E-01  -3.36830       3.36830       1716.14       1719.50    
  33  0.647785E-01  -2.73678      -351.721       351.721       1745.28       2097.00    
  34  0.910402     -0.938690E-01  -12.0637       12.0637       1713.55       1725.62    
  35  0.488733     -0.715939      -92.0099       92.0099       1576.52       1668.53    
  36  0.377436E-01  -3.27694      -421.141       421.141       1448.36       1869.50    
  37  0.154608      -1.86686      -239.923       239.923       1744.49       1984.41    
  38  0.277804      -1.28084      -164.609       164.609       1548.55       1713.16    
  39  0.969547     -0.309263E-01  -3.97454       3.97454       1438.65       1442.62    
  40  0.380083     -0.967367      -124.323       124.323       1718.33       1842.65    
  41  0.751822     -0.285256      -36.6601       36.6601       1674.94       1711.60    
  42  0.137692      -1.98274      -254.815       254.815       1597.26       1852.08    
  43  0.293470      -1.22598      -157.559       157.559       1631.36       1788.92    
  44  0.433705     -0.835390      -107.361       107.361       1764.73       1872.09    
  45  0.418034     -0.872194      -112.091       112.091       1618.35       1730.44    
  46  0.166728      -1.79139      -230.224       230.224       1504.39       1734.62    
  47  0.921960     -0.812537E-01  -10.4424       10.4424       1730.88       1741.32    
  48  0.412601     -0.885275      -113.772       113.772       1739.04       1852.81    
  49  0.925181     -0.777655E-01  -9.99415       9.99415       1743.72       1753.71    
  50  0.687711     -0.374386      -48.1148       48.1148       1770.52       1818.64    
  51  0.729890     -0.314862      -40.4650       40.4650       1445.36       1485.82    
  52  0.355028      -1.03556      -133.086       133.086       1848.90       1981.98    
  53  0.123338      -2.09283      -268.963       268.963       1758.00       2026.96    
  54  0.638370E-01  -2.75142      -353.603       353.603       1508.93       1862.54    
  55  0.379414     -0.969128      -124.549       124.549       1863.09       1987.64    
  56  0.643705     -0.440515      -56.6135       56.6135       1733.08       1789.69    
  57  0.172292      -1.75856      -226.004       226.004       1838.47       2064.48    
  58  0.996763     -0.324212E-02 -0.416665      0.416665       1516.34       1516.76    
  59  0.606366     -0.500272      -64.2932       64.2932       1969.94       2034.23    
  60  0.299698      -1.20498      -154.860       154.860       1584.73       1739.59    
  61  0.723907E-02  -4.92826      -633.363       633.363       1834.55       2467.92    
  62  0.197118      -1.62395      -208.704       208.704       1747.80       1956.50    
  63  0.316130      -1.15160      -148.000       148.000       1354.87       1502.87    
  64  0.115913      -2.15492      -276.943       276.943       1474.69       1751.64    
loop,thermsimp(1:2)        4   54.0592       16.2876    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216       1577.53         69.26          1.25         40.18          0.30          0.05        111.03
Just calling func    0   0        111.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1577.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        4
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        5
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      215     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -59.3325       59.3325       1187.13       1246.47    
   2  0.876370     -0.131967      -16.9599       16.9599       1215.97       1232.93    
   3  0.840080     -0.174259      -22.3951       22.3951       1309.63       1332.03    
   4  0.608986E-01  -2.79854      -359.659       359.659       1364.08       1723.74    
   5  0.311901      -1.16507      -149.730       149.730       1341.38       1491.11    
   6  0.937552E-01  -2.36707      -304.207       304.207       1365.09       1669.30    
   7  0.608418     -0.496893      -63.8590       63.8590       1339.96       1403.82    
   8  0.297707      -1.21164      -155.716       155.716       1438.65       1594.37    
   9  0.365777      -1.00573      -129.253       129.253       1425.50       1554.76    
  10  0.194673      -1.63643      -210.308       210.308       1445.36       1655.66    
  11  0.941388     -0.604003E-01  -7.76244       7.76244       1405.15       1412.91    
  12  0.984881     -0.152343E-01  -1.95786       1.95786       1456.76       1458.72    
  13  0.750245     -0.287355      -36.9298       36.9298       1500.10       1537.03    
  14  0.437446     -0.826803      -106.258       106.258       1354.87       1461.13    
  15  0.174754      -1.74437      -224.181       224.181       1516.34       1740.52    
  16  0.300465E-01  -3.50501      -450.451       450.451       1469.94       1920.39    
  17  0.372924     -0.986380      -126.766       126.766       1456.43       1583.20    
  18  0.803506     -0.218771      -28.1157       28.1157       1449.54       1477.65    
  19  0.232583      -1.45851      -187.442       187.442       1489.44       1676.88    
  20  0.383368     -0.958759      -123.216       123.216       1410.23       1533.45    
  21  0.622786     -0.473552      -60.8592       60.8592       1453.78       1514.64    
  22  0.356422      -1.03164      -132.583       132.583       1528.44       1661.02    
  23  0.919964     -0.834212E-01  -10.7210       10.7210       1561.64       1572.36    
  24  0.550740     -0.596492      -76.6591       76.6591       1374.13       1450.79    
  25  0.402627     -0.909745      -116.917       116.917       1491.51       1608.42    
  26  0.256265      -1.36154      -174.981       174.981       1552.58       1727.56    
  27  0.763510     -0.269828      -34.6774       34.6774       1576.52       1611.20    
  28  0.388963     -0.944271      -121.354       121.354       1539.50       1660.85    
  29  0.981923     -0.182423E-01  -2.34444       2.34444       1649.67       1652.02    
  30  0.656629     -0.420635      -54.0586       54.0586       1518.51       1572.57    
  31  0.932472     -0.699161E-01  -8.98538       8.98538       1703.70       1712.69    
  32  0.336775      -1.08834      -139.870       139.870       1674.94       1814.81    
  33  0.810758     -0.209786      -26.9609       26.9609       1548.55       1575.52    
  34  0.557014     -0.585166      -75.2034       75.2034       1441.50       1516.71    
  35  0.652747     -0.426565      -54.8206       54.8206       1716.14       1770.96    
  36  0.890774     -0.115665      -14.8648       14.8648       1713.55       1728.42    
  37  0.703035     -0.352349      -45.2827       45.2827       1618.35       1663.63    
  38  0.534296     -0.626805      -80.5547       80.5547       1504.39       1584.95    
  39  0.604162     -0.503914      -64.7612       64.7612       1584.73       1649.49    
  40  0.545557     -0.605948      -77.8743       77.8743       1730.88       1808.76    
  41  0.371346     -0.990620      -127.311       127.311       1474.69       1602.00    
  42  0.491801     -0.709680      -91.2056       91.2056       1743.72       1834.93    
  43  0.879731     -0.128139      -16.4680       16.4680       1590.44       1606.90    
  44  0.995113     -0.489866E-02 -0.629558      0.629558       1717.46       1718.09    
  45  0.467927     -0.759444      -97.6010       97.6010       1494.23       1591.83    
  46  0.355083      -1.03540      -133.066       133.066       1631.36       1764.42    
  47  0.216960      -1.52804      -196.378       196.378       1733.08       1929.45    
  48  0.276988      -1.28378      -164.987       164.987       1770.52       1935.51    
  49  0.905458     -0.993144E-01  -12.7635       12.7635       1718.33       1731.09    
  50  0.704241     -0.350635      -45.0623       45.0623       1597.26       1642.33    
  51  0.784564     -0.242627      -31.1816       31.1816       1739.04       1770.22    
  52  0.329376      -1.11055      -142.724       142.724       1508.93       1651.66    
  53  0.845894     -0.167361      -21.5086       21.5086       1448.36       1469.87    
  54  0.645172     -0.438238      -56.3208       56.3208       1764.73       1821.05    
  55  0.279949      -1.27315      -163.620       163.620       1553.35       1716.97    
  56  0.149089      -1.90321      -244.594       244.594       1747.80       1992.39    
  57  0.887681     -0.119143      -15.3118       15.3118       1848.90       1864.21    
  58  0.582426     -0.540553      -69.4700       69.4700       1744.49       1813.96    
  59  0.221293      -1.50827      -193.837       193.837       1863.09       2056.93    
  60  0.839449     -0.175010      -22.4917       22.4917       1758.00       1780.49    
  61  0.383721     -0.957840      -123.098       123.098       1969.94       2093.04    
  62  0.933136     -0.692040E-01  -8.89385       8.89385       1838.47       1847.37    
  63  0.148663      -1.90607      -244.962       244.962       1745.28       1990.24    
  64  0.788780     -0.237267      -30.4927       30.4927       1577.53       1608.02    
loop,thermsimp(1:2)        5   59.3325       16.9599    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217       1765.98         68.96          1.21         40.68          0.57          0.05        111.48
Just calling func    0   0        111.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1765.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        5
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        6
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      216     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -196.963       196.963       1215.97       1412.93    
   2  0.942431     -0.592928E-01  -7.62011       7.62011       1187.13       1194.75    
   3  0.193824      -1.64081      -210.871       210.871       1309.63       1520.51    
   4  0.162512      -1.81700      -233.515       233.515       1339.96       1573.48    
   5  0.625243     -0.469616      -60.3533       60.3533       1405.15       1465.50    
   6  0.499178     -0.694793      -89.2923       89.2923       1374.13       1463.42    
   7  0.706095     -0.348006      -44.7245       44.7245       1456.76       1501.49    
   8  0.527414     -0.639770      -82.2209       82.2209       1354.87       1437.09    
   9  0.575748     -0.552085      -70.9520       70.9520       1448.36       1519.31    
  10  0.490522     -0.712286      -91.5405       91.5405       1449.54       1541.08    
  11  0.306517      -1.18248      -151.969       151.969       1341.38       1493.35    
  12  0.798470     -0.225057      -28.9236       28.9236       1453.78       1482.70    
  13  0.333550      -1.09796      -141.106       141.106       1441.50       1582.61    
  14  0.166731      -1.79138      -230.221       230.221       1410.23       1640.45    
  15  0.443580     -0.812878      -104.468       104.468       1500.10       1604.57    
  16  0.669985     -0.400500      -51.4709       51.4709       1425.50       1476.97    
  17  0.339921      -1.07904      -138.675       138.675       1561.64       1700.32    
  18  0.201260      -1.60316      -206.032       206.032       1518.51       1724.55    
  19  0.772250     -0.258447      -33.2147       33.2147       1548.55       1581.77    
  20  0.401372E-01  -3.21545      -413.239       413.239       1456.43       1869.67    
  21  0.940962     -0.608526E-01  -7.82057       7.82057       1504.39       1512.21    
  22  0.115324      -2.16001      -277.597       277.597       1494.23       1771.83    
  23  0.939991E-01  -2.36447      -303.873       303.873       1438.65       1742.52    
  24  0.412221     -0.886196      -113.891       113.891       1474.69       1588.58    
  25  0.136462      -1.99171      -255.968       255.968       1590.44       1846.40    
  26  0.310095      -1.17088      -150.477       150.477       1577.53       1728.01    
  27  0.985727     -0.143755E-01  -1.84749       1.84749       1491.51       1493.35    
  28  0.900161     -0.105182      -13.5176       13.5176       1576.52       1590.04    
  29  0.250220      -1.38542      -178.049       178.049       1597.26       1775.31    
  30  0.780405     -0.247942      -31.8646       31.8646       1584.73       1616.60    
  31  0.228719      -1.47526      -189.595       189.595       1508.93       1698.53    
  32  0.407088     -0.898727      -115.501       115.501       1649.67       1765.17    
  33  0.975627     -0.246749E-01  -3.17113       3.17113       1445.36       1448.53    
  34  0.885140     -0.122009      -15.6802       15.6802       1539.50       1555.18    
  35  0.896135     -0.109664      -14.0937       14.0937       1528.44       1542.53    
  36  0.856661     -0.154713      -19.8832       19.8832       1618.35       1638.23    
  37  0.258643      -1.35231      -173.794       173.794       1365.09       1538.89    
  38  0.336283      -1.08980      -140.057       140.057       1489.44       1629.50    
  39  0.868205     -0.141327      -18.1628       18.1628       1703.70       1721.87    
  40  0.937935     -0.640747E-01  -8.23465       8.23465       1553.35       1561.59    
  41  0.418906     -0.870109      -111.823       111.823       1717.46       1829.28    
  42  0.351040      -1.04685      -134.538       134.538       1364.08       1498.62    
  43  0.611628E-01  -2.79422      -359.103       359.103       1552.58       1911.68    
  44  0.153518      -1.87394      -240.832       240.832       1713.55       1954.38    
  45  0.938341     -0.636423E-01  -8.17908       8.17908       1718.33       1726.51    
  46  0.598133     -0.513942      -66.0500       66.0500       1516.34       1582.39    
  47  0.795771     -0.228444      -29.3589       29.3589       1631.36       1660.72    
  48  0.295375      -1.21951      -156.727       156.727       1739.04       1895.76    
  49  0.804738     -0.217239      -27.9188       27.9188       1716.14       1744.05    
  50  0.260094      -1.34671      -173.075       173.075       1758.00       1931.07    
  51  0.640517     -0.445479      -57.2514       57.2514       1730.88       1788.13    
  52  0.221872      -1.50566      -193.502       193.502       1744.49       1937.99    
  53  0.837141     -0.177762      -22.8454       22.8454       1674.94       1697.79    
  54  0.212745      -1.54766      -198.900       198.900       1764.73       1963.63    
  55  0.162033      -1.81996      -233.895       233.895       1743.72       1977.62    
  56  0.631631     -0.459450      -59.0469       59.0469       1838.47       1897.52    
  57  0.816014E-01  -2.50591      -322.050       322.050       1848.90       2170.95    
  58  0.754954     -0.281099      -36.1258       36.1258       1469.94       1506.07    
  59  0.568761E-01  -2.86688      -368.441       368.441       1733.08       2101.52    
  60  0.610521     -0.493442      -63.4154       63.4154       1770.52       1833.94    
  61  0.691718     -0.368577      -47.3682       47.3682       1745.28       1792.64    
  62  0.330677      -1.10661      -142.218       142.218       1747.80       1890.02    
  63  0.669260     -0.401583      -51.6100       51.6100       1863.09       1914.70    
  64  0.677208     -0.389776      -50.0927       50.0927       1765.98       1816.07    
loop,thermsimp(1:2)        6   196.963       7.62011    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218       1358.23         69.37          1.23         40.03          0.37          0.05        111.05
Just calling func    0   0        111.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1358.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        6
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        7
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      217     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -171.055       171.055       1187.13       1358.19    
   2  0.401807     -0.911784      -117.179       117.179       1215.97       1333.15    
   3  0.418885     -0.870159      -111.830       111.830       1354.87       1466.70    
   4  0.753378     -0.283189      -36.3944       36.3944       1445.36       1481.75    
   5  0.792066     -0.233111      -29.9586       29.9586       1374.13       1404.09    
   6  0.868474     -0.141017      -18.1230       18.1230       1405.15       1423.27    
   7  0.318670      -1.14360      -146.971       146.971       1425.50       1572.47    
   8  0.863267     -0.147031      -18.8959       18.8959       1453.78       1472.67    
   9  0.589255     -0.528896      -67.9719       67.9719       1341.38       1409.35    
  10  0.632079E-01  -2.76133      -354.876       354.876       1491.51       1846.38    
  11  0.992270     -0.775975E-02 -0.997256      0.997256       1364.08       1365.08    
  12  0.466140     -0.763269      -98.0926       98.0926       1456.76       1554.85    
  13  0.177509      -1.72873      -222.170       222.170       1469.94       1692.11    
  14  0.933326     -0.690005E-01  -8.86771       8.86771       1504.39       1513.26    
  15  0.876357     -0.131982      -16.9618       16.9618       1448.36       1465.32    
  16  0.673496     -0.395274      -50.7992       50.7992       1309.63       1360.43    
  17  0.648708     -0.432773      -55.6184       55.6184       1365.09       1420.71    
  18  0.400813     -0.914259      -117.497       117.497       1449.54       1567.04    
  19  0.763164     -0.270282      -34.7357       34.7357       1528.44       1563.17    
  20  0.196240      -1.62842      -209.278       209.278       1539.50       1748.78    
  21  0.923666     -0.794046E-01  -10.2048       10.2048       1553.35       1563.56    
  22  0.999600     -0.400298E-03 -0.514448E-01  0.514448E-01   1339.96       1340.01    
  23  0.379715     -0.968335      -124.447       124.447       1548.55       1673.00    
  24  0.197375      -1.62265      -208.537       208.537       1516.34       1724.88    
  25  0.760736     -0.273468      -35.1452       35.1452       1441.50       1476.65    
  26  0.392182     -0.936030      -120.295       120.295       1474.69       1594.99    
  27  0.256208      -1.36177      -175.009       175.009       1576.52       1751.53    
  28  0.251796      -1.37914      -177.242       177.242       1500.10       1677.34    
  29  0.332089E-01  -3.40494      -437.591       437.591       1584.73       2022.32    
  30  0.970457     -0.299883E-01  -3.85399       3.85399       1489.44       1493.29    
  31  0.467370E-01  -3.06322      -393.674       393.674       1618.35       2012.02    
  32  0.716125     -0.333901      -42.9117       42.9117       1410.23       1453.15    
  33  0.757897     -0.277208      -35.6258       35.6258       1631.36       1666.98    
  34  0.765628     -0.267059      -34.3215       34.3215       1674.94       1709.26    
  35  0.323816      -1.12758      -144.913       144.913       1508.93       1653.85    
  36  0.909845     -0.944807E-01  -12.1423       12.1423       1561.64       1573.78    
  37  0.515782     -0.662071      -85.0870       85.0870       1703.70       1788.79    
  38  0.464370     -0.767074      -98.5816       98.5816       1518.51       1617.10    
  39  0.445707     -0.808094      -103.853       103.853       1718.33       1822.18    
  40  0.786320     -0.240391      -30.8943       30.8943       1577.53       1608.42    
  41  0.631860     -0.459087      -59.0002       59.0002       1438.65       1497.65    
  42  0.672488     -0.396772      -50.9917       50.9917       1716.14       1767.13    
  43  0.251717E-02  -5.98462      -769.122       769.122       1649.67       2418.79    
  44  0.245023      -1.40640      -180.746       180.746       1494.23       1674.98    
  45  0.252688      -1.37560      -176.787       176.787       1597.26       1774.05    
  46  0.268946      -1.31324      -168.773       168.773       1730.88       1899.65    
  47  0.550357     -0.597189      -76.7486       76.7486       1745.28       1822.03    
  48  0.826205     -0.190912      -24.5354       24.5354       1765.98       1790.51    
  49  0.964276     -0.363780E-01  -4.67517       4.67517       1717.46       1722.13    
  50  0.415479     -0.878324      -112.879       112.879       1770.52       1883.40    
  51  0.599143E-01  -2.81484      -361.753       361.753       1590.44       1952.19    
  52  0.348555      -1.05396      -135.451       135.451       1456.43       1591.88    
  53  0.243819      -1.41133      -181.379       181.379       1747.80       1929.18    
  54  0.233297      -1.45544      -187.048       187.048       1739.04       1926.09    
  55  0.705284     -0.349155      -44.8722       44.8722       1838.47       1883.35    
  56  0.258436      -1.35311      -173.897       173.897       1552.58       1726.47    
  57  0.328631      -1.11282      -143.016       143.016       1863.09       2006.11    
  58  0.676481     -0.390852      -50.2309       50.2309       1758.00       1808.23    
  59  0.784590     -0.242594      -31.1773       31.1773       1744.49       1775.67    
  60  0.546419E-01  -2.90695      -373.592       373.592       1713.55       2087.14    
  61  0.507256     -0.678740      -87.2292       87.2292       1764.73       1851.96    
  62  0.980797     -0.193899E-01  -2.49192       2.49192       1743.72       1746.21    
  63  0.193856      -1.64064      -210.849       210.849       1733.08       1943.93    
  64  0.101492      -2.28777      -294.016       294.016       1358.23       1652.24    
loop,thermsimp(1:2)        7   171.055       117.179    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       1535.33         69.25          1.28         40.37          0.04          0.04        110.98
Just calling func    0   0        110.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1535.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        7
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        8
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      218     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -288.659       288.659       1215.97       1504.63    
   2  0.476819     -0.740619      -95.1818       95.1818       1339.96       1435.14    
   3  0.564430     -0.571938      -73.5035       73.5035       1187.13       1260.64    
   4  0.211741      -1.55239      -199.508       199.508       1309.63       1509.14    
   5  0.154226E-01  -4.17192      -536.160       536.160       1364.08       1900.24    
   6  0.489577     -0.714213      -91.7881       91.7881       1374.13       1465.92    
   7  0.583965     -0.537914      -69.1308       69.1308       1341.38       1410.51    
   8  0.430258     -0.843370      -108.387       108.387       1365.09       1473.48    
   9  0.280982      -1.26946      -163.147       163.147       1405.15       1568.30    
  10  0.535183     -0.625146      -80.3416       80.3416       1410.23       1490.58    
  11  0.306750      -1.18172      -151.871       151.871       1448.36       1600.23    
  12  0.924930     -0.780370E-01  -10.0290       10.0290       1354.87       1364.90    
  13  0.829670E-01  -2.48931      -319.918       319.918       1453.78       1773.70    
  14  0.330275      -1.10783      -142.374       142.374       1441.50       1583.88    
  15  0.229751      -1.47076      -189.017       189.017       1445.36       1634.37    
  16  0.455737     -0.785839      -100.993       100.993       1489.44       1590.43    
  17  0.830949     -0.185187      -23.7996       23.7996       1438.65       1462.45    
  18  0.148624      -1.90634      -244.996       244.996       1504.39       1749.39    
  19  0.883001     -0.124429      -15.9912       15.9912       1456.76       1472.75    
  20  0.668001     -0.403466      -51.8520       51.8520       1528.44       1580.29    
  21  0.610583     -0.493341      -63.4025       63.4025       1553.35       1616.75    
  22  0.689050     -0.372441      -47.8648       47.8648       1449.54       1497.40    
  23  0.124417      -2.08412      -267.843       267.843       1425.50       1693.35    
  24  0.785584E-01  -2.54391      -326.935       326.935       1561.64       1888.58    
  25  0.936565     -0.655366E-01  -8.42253       8.42253       1456.43       1464.85    
  26  0.483719     -0.726252      -93.3353       93.3353       1474.69       1568.03    
  27  0.715685     -0.334515      -42.9907       42.9907       1577.53       1620.52    
  28  0.786437     -0.240243      -30.8752       30.8752       1518.51       1549.39    
  29  0.361023      -1.01881      -130.934       130.934       1358.23       1489.16    
  30  0.325559      -1.12221      -144.223       144.223       1508.93       1653.16    
  31  0.850460     -0.161978      -20.8168       20.8168       1631.36       1652.17    
  32  0.301358      -1.19946      -154.150       154.150       1548.55       1702.70    
  33  0.304725      -1.18834      -152.722       152.722       1494.23       1646.95    
  34  0.887065     -0.119838      -15.4011       15.4011       1500.10       1515.50    
  35  0.762822     -0.270730      -34.7933       34.7933       1469.94       1504.74    
  36  0.364130      -1.01024      -129.833       129.833       1674.94       1804.78    
  37  0.762041     -0.271754      -34.9249       34.9249       1717.46       1752.38    
  38  0.941180     -0.606207E-01  -7.79075       7.79075       1516.34       1524.13    
  39  0.449403     -0.799835      -102.792       102.792       1552.58       1655.37    
  40  0.743855     -0.295910      -38.0293       38.0293       1743.72       1781.75    
  41  0.743104     -0.296920      -38.1591       38.1591       1539.50       1577.66    
  42  0.350527      -1.04832      -134.726       134.726       1576.52       1711.25    
  43  0.607240     -0.498831      -64.1080       64.1080       1716.14       1780.24    
  44  0.557347     -0.584567      -75.1265       75.1265       1597.26       1672.39    
  45  0.217970      -1.52340      -195.782       195.782       1744.49       1940.27    
  46  0.364570      -1.00904      -129.678       129.678       1703.70       1833.38    
  47  0.330900      -1.10594      -142.131       142.131       1765.98       1908.11    
  48  0.861127     -0.149514      -19.2150       19.2150       1758.00       1777.21    
  49  0.710764E-01  -2.64400      -339.797       339.797       1745.28       2085.07    
  50  0.264543      -1.32975      -170.895       170.895       1718.33       1889.22    
  51  0.985836     -0.142654E-01  -1.83334       1.83334       1491.51       1493.34    
  52  0.296563      -1.21550      -156.211       156.211       1764.73       1920.94    
  53  0.875112     -0.133403      -17.1445       17.1445       1838.47       1855.62    
  54  0.808637     -0.212405      -27.2976       27.2976       1770.52       1797.82    
  55  0.394372     -0.930461      -119.580       119.580       1730.88       1850.46    
  56  0.209815      -1.56153      -200.683       200.683       1739.04       1939.72    
  57  0.154667      -1.86648      -239.873       239.873       1747.80       1987.67    
  58  0.741232     -0.299442      -38.4832       38.4832       1733.08       1771.56    
  59  0.386718E-01  -3.25265      -418.018       418.018       1590.44       2008.45    
  60  0.372867     -0.986533      -126.786       126.786       1863.09       1989.88    
  61  0.910828E-01  -2.39599      -307.924       307.924       1618.35       1926.27    
  62  0.660999     -0.414003      -53.2062       53.2062       1584.73       1637.94    
  63  0.631205E-01  -2.76271      -355.054       355.054       1713.55       2068.61    
  64  0.959104     -0.417554E-01  -5.36626       5.36626       1535.33       1540.69    
loop,thermsimp(1:2)        8   288.659       95.1818    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       1262.61         69.09          1.23         40.14          0.59          0.05        111.10
Just calling func    0   0        111.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221       1519.58         69.22          1.27         40.24          0.03          0.05        110.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    1519.6       0.6064     -4.377      3.838     -102.6    -0.3836    
                     -0.7972      1.181     -99.70      5.097     0.4275    

                      0.7583     0.1769      2.339      8587.      7000.    

                      -1.677      0.000      0.000      0.000     -1.221    



                      -1.879      0.000      0.000      7000.     -395.5    

                      -1.195     -2.516     -8.691     -1.899      3.796    

                      -7.201     -3.949      6776.      0.000     0.1091E+05



                       2521.      9332.      8777.     -5117.      1436.    

                       325.6     0.3383     0.3780     0.1719     0.2544    

                     -0.2486     0.2664     0.3286     0.3591     0.3847E-01



                      -1.191    -0.1224      0.000    -0.1207    -0.6968E-04

                      0.1511     0.2025    -0.7116     0.3536     0.4275    

                      0.3948E-01 0.2537    -0.6189    -0.9596      7000.    



                      -2.197     -1.410     -2.245     -2.332    -0.3807    

                     -0.3252      9.322      8.771    -0.1655E+05 -6.115    

                       0.000      0.000      9.155      8.653    -0.1969E+05



                      -6.000      0.000      0.000      8.831      9.203    

                     -0.1944E+05 -6.000      0.000      0.000      9.122    

                       8.958    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1262.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        8
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:        9
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      220     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -57.0700       57.0700       1187.13       1244.20    
   2  0.805197     -0.216668      -27.8454       27.8454       1354.87       1382.71    
   3  0.976428     -0.238543E-01  -3.06567       3.06567       1341.38       1344.44    
   4  0.599028     -0.512447      -65.8579       65.8579       1339.96       1405.82    
   5  0.591081     -0.525802      -67.5742       67.5742       1438.65       1506.22    
   6  0.151500      -1.88717      -242.532       242.532       1456.43       1698.96    
   7  0.565682     -0.569723      -73.2187       73.2187       1374.13       1447.35    
   8  0.345258      -1.06346      -136.673       136.673       1456.76       1593.43    
   9  0.658101     -0.418397      -53.7709       53.7709       1365.09       1418.86    
  10  0.691977E-01  -2.67079      -343.240       343.240       1358.23       1701.47    
  11  0.289062      -1.24111      -159.504       159.504       1410.23       1569.74    
  12  0.949819     -0.514835E-01  -6.61648       6.61648       1491.51       1498.12    
  13  0.791632     -0.233658      -30.0289       30.0289       1449.54       1479.57    
  14  0.400532     -0.914962      -117.588       117.588       1215.97       1333.56    
  15  0.241886      -1.41929      -182.402       182.402       1469.94       1652.34    
  16  0.383016     -0.959678      -123.334       123.334       1309.63       1432.97    
  17  0.993978     -0.604041E-02 -0.776292      0.776292       1500.10       1500.88    
  18  0.807089     -0.214322      -27.5439       27.5439       1516.34       1543.89    
  19  0.732161     -0.311755      -40.0656       40.0656       1535.33       1575.39    
  20  0.176507      -1.73440      -222.899       222.899       1518.51       1741.41    
  21  0.628098     -0.465059      -59.7677       59.7677       1474.69       1534.46    
  22  0.383392     -0.958697      -123.208       123.208       1405.15       1528.36    
  23  0.906421     -0.982517E-01  -12.6270       12.6270       1539.50       1552.13    
  24  0.329288      -1.11082      -142.759       142.759       1528.44       1671.20    
  25  0.869436     -0.139911      -17.9808       17.9808       1441.50       1459.49    
  26  0.354994      -1.03565      -133.099       133.099       1489.44       1622.54    
  27  0.127935      -2.05623      -264.260       264.260       1448.36       1712.62    
  28  0.840123     -0.174207      -22.3884       22.3884       1553.35       1575.74    
  29  0.625861     -0.468627      -60.2263       60.2263       1577.53       1637.75    
  30  0.488384     -0.716653      -92.1017       92.1017       1445.36       1537.46    
  31  0.888226E-01  -2.42111      -311.153       311.153       1584.73       1895.88    
  32  0.262955      -1.33577      -171.669       171.669       1494.23       1665.90    
  33  0.153205E-01  -4.17856      -537.014       537.014       1631.36       2168.37    
  34  0.432355     -0.838509      -107.762       107.762       1508.93       1616.70    
  35  0.225273      -1.49044      -191.546       191.546       1552.58       1744.12    
  36  0.812147     -0.208074      -26.7410       26.7410       1597.26       1624.01    
  37  0.832805E-01  -2.48554      -319.433       319.433       1425.50       1744.94    
  38  0.442280     -0.815813      -104.845       104.845       1548.55       1653.40    
  39  0.106639      -2.23831      -287.660       287.660       1576.52       1864.18    
  40  0.143053      -1.94454      -249.905       249.905       1504.39       1754.30    
  41  0.871774     -0.137225      -17.6357       17.6357       1717.46       1735.09    
  42  0.137692      -1.98273      -254.814       254.814       1733.08       1987.89    
  43  0.366512      -1.00372      -128.995       128.995       1453.78       1582.77    
  44  0.617157     -0.482633      -62.0262       62.0262       1758.00       1820.03    
  45  0.420337     -0.866700      -111.385       111.385       1716.14       1827.52    
  46  0.935846     -0.663044E-01  -8.52121       8.52121       1743.72       1752.24    
  47  0.979912     -0.202925E-01  -2.60791       2.60791       1770.52       1773.13    
  48  0.692793     -0.367024      -47.1687       47.1687       1674.94       1722.11    
  49  0.155424      -1.86160      -239.246       239.246       1703.70       1942.95    
  50  0.703218     -0.352088      -45.2492       45.2492       1730.88       1776.13    
  51  0.396734     -0.924489      -118.812       118.812       1838.47       1957.29    
  52  0.247863      -1.39488      -179.265       179.265       1561.64       1740.91    
  53  0.176690      -1.73336      -222.765       222.765       1718.33       1941.09    
  54  0.832421     -0.183417      -23.5721       23.5721       1364.08       1387.66    
  55  0.598900     -0.512660      -65.8852       65.8852       1765.98       1831.86    
  56  0.940005     -0.618702E-01  -7.95134       7.95134       1764.73       1772.68    
  57  0.556954     -0.585272      -75.2171       75.2171       1618.35       1693.56    
  58  0.920495     -0.828436E-01  -10.6468       10.6468       1739.04       1749.68    
  59  0.896932     -0.108775      -13.9794       13.9794       1744.49       1758.47    
  60  0.200022      -1.60933      -206.825       206.825       1747.80       1954.62    
  61  0.667904E-01  -2.70620      -347.791       347.791       1863.09       2210.88    
  62  0.146707      -1.91932      -246.664       246.664       1590.44       1837.10    
  63  0.305705      -1.18513      -152.309       152.309       1713.55       1865.86    
  64  0.975058     -0.252587E-01  -3.24616       3.24616       1262.61       1265.86    
loop,thermsimp(1:2)        9   57.0700       27.8454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       1663.06         68.86          1.15         40.81          0.07          0.05        110.93
Just calling func    0   0        110.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1663.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:        9
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       10
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      221     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -23.4575       23.4575       1187.13       1210.59    
   2  0.367543      -1.00091      -128.634       128.634       1262.61       1391.25    
   3  0.528755     -0.637231      -81.8947       81.8947       1215.97       1297.87    
   4  0.776829     -0.252535      -32.4549       32.4549       1341.38       1373.83    
   5  0.149594E-01  -4.20242      -540.080       540.080       1354.87       1894.95    
   6  0.892228     -0.114033      -14.6551       14.6551       1364.08       1378.74    
   7  0.191037      -1.65529      -212.732       212.732       1339.96       1552.69    
   8  0.516533     -0.660616      -84.9000       84.9000       1365.09       1449.99    
   9  0.273230      -1.29744      -166.743       166.743       1309.63       1476.38    
  10  0.822225     -0.195741      -25.1560       25.1560       1374.13       1399.28    
  11  0.359850      -1.02207      -131.353       131.353       1441.50       1572.86    
  12  0.611658     -0.491581      -63.1763       63.1763       1449.54       1512.71    
  13  0.249481      -1.38837      -178.428       178.428       1491.51       1669.94    
  14  0.441252     -0.818139      -105.144       105.144       1500.10       1605.24    
  15  0.910514E-01  -2.39633      -307.968       307.968       1438.65       1746.62    
  16  0.745146     -0.294175      -37.8063       37.8063       1405.15       1442.96    
  17  0.758301     -0.276675      -35.5573       35.5573       1474.69       1510.25    
  18  0.638521     -0.448601      -57.6526       57.6526       1445.36       1503.01    
  19  0.150180      -1.89592      -243.657       243.657       1516.34       1760.00    
  20  0.144147      -1.93692      -248.926       248.926       1539.50       1788.43    
  21  0.104928      -2.25448      -289.738       289.738       1410.23       1699.97    
  22  0.398120     -0.921002      -118.364       118.364       1535.33       1653.69    
  23  0.802258     -0.220325      -28.3154       28.3154       1553.35       1581.67    
  24  0.399299     -0.918044      -117.984       117.984       1453.78       1571.76    
  25  0.493060     -0.707124      -90.8771       90.8771       1456.76       1547.64    
  26  0.504407     -0.684372      -87.9531       87.9531       1508.93       1596.89    
  27  0.762058     -0.271733      -34.9221       34.9221       1489.44       1524.36    
  28  0.430267     -0.843350      -108.384       108.384       1597.26       1705.65    
  29  0.993832     -0.618725E-02 -0.795163      0.795163       1577.53       1578.32    
  30  0.705390     -0.349005      -44.8529       44.8529       1469.94       1514.79    
  31  0.969760     -0.307069E-01  -3.94634       3.94634       1548.55       1552.50    
  32  0.245618      -1.40398      -180.434       180.434       1494.23       1674.66    
  33  0.685790     -0.377184      -48.4744       48.4744       1528.44       1576.91    
  34  0.905089     -0.997222E-01  -12.8159       12.8159       1618.35       1631.16    
  35  0.414065     -0.881732      -113.317       113.317       1456.43       1569.75    
  36  0.714747E-01  -2.63841      -339.079       339.079       1358.23       1697.31    
  37  0.694510     -0.364548      -46.8505       46.8505       1448.36       1495.21    
  38  0.770213E-01  -2.56367      -329.474       329.474       1674.94       2004.42    
  39  0.846173     -0.167031      -21.4662       21.4662       1717.46       1738.92    
  40  0.485012     -0.723582      -92.9922       92.9922       1561.64       1654.63    
  41  0.345787      -1.06193      -136.476       136.476       1518.51       1654.99    
  42  0.851861     -0.160332      -20.6053       20.6053       1552.58       1573.18    
  43  0.774151     -0.255989      -32.8988       32.8988       1425.50       1458.40    
  44  0.512382     -0.668685      -85.9370       85.9370       1739.04       1824.97    
  45  0.839798     -0.174594      -22.4383       22.4383       1743.72       1766.16    
  46  0.430550     -0.842692      -108.300       108.300       1504.39       1612.69    
  47  0.988263     -0.118067E-01  -1.51735       1.51735       1744.49       1746.01    
  48  0.349495      -1.05127      -135.105       135.105       1764.73       1899.84    
  49  0.290701      -1.23546      -158.777       158.777       1770.52       1929.30    
  50  0.210466      -1.55843      -200.284       200.284       1730.88       1931.17    
  51  0.361038      -1.01877      -130.929       130.929       1758.00       1888.93    
  52  0.168890      -1.77851      -228.568       228.568       1716.14       1944.70    
  53  0.176000      -1.73727      -223.268       223.268       1765.98       1989.25    
  54  0.494423     -0.704364      -90.5224       90.5224       1590.44       1680.96    
  55  0.887313     -0.119558      -15.3651       15.3651       1576.52       1591.89    
  56  0.318781      -1.14325      -146.927       146.927       1713.55       1860.48    
  57  0.385435     -0.953382      -122.525       122.525       1584.73       1707.26    
  58  0.557906     -0.583564      -74.9976       74.9976       1718.33       1793.32    
  59  0.262507      -1.33748      -171.888       171.888       1703.70       1875.59    
  60  0.573408     -0.556157      -71.4754       71.4754       1747.80       1819.27    
  61  0.334195      -1.09603      -140.858       140.858       1838.47       1979.33    
  62  0.365463      -1.00659      -129.363       129.363       1733.08       1862.44    
  63  0.182452      -1.70127      -218.641       218.641       1631.36       1850.00    
  64  0.224434      -1.49418      -192.026       192.026       1663.06       1855.09    
loop,thermsimp(1:2)       10   23.4575       128.634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223       1312.30         68.87          1.18         40.57          0.44          0.04        111.10
Just calling func    0   0        111.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224       2539.85         69.32          1.28         40.26          0.04          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1312.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       10
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       11
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      223     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -10.8002       10.8002       1187.13       1197.93    
   2  0.309089      -1.17413      -150.895       150.895       1215.97       1366.87    
   3  0.237901      -1.43590      -184.537       184.537       1341.38       1525.92    
   4  0.542467     -0.611627      -78.6042       78.6042       1364.08       1442.69    
   5  0.523672     -0.646889      -83.1360       83.1360       1262.61       1345.75    
   6  0.850058     -0.162450      -20.8775       20.8775       1374.13       1395.00    
   7  0.589343     -0.528746      -67.9526       67.9526       1405.15       1473.10    
   8  0.979269     -0.209490E-01  -2.69229       2.69229       1365.09       1367.79    
   9  0.110419      -2.20347      -283.183       283.183       1425.50       1708.69    
  10  0.557914     -0.583550      -74.9958       74.9958       1309.63       1384.63    
  11  0.474464     -0.745569      -95.8178       95.8178       1448.36       1544.18    
  12  0.312482      -1.16321      -149.491       149.491       1445.36       1594.85    
  13  0.297011      -1.21399      -156.017       156.017       1474.69       1630.71    
  14  0.857571     -0.153651      -19.7467       19.7467       1449.54       1469.28    
  15  0.792567     -0.232479      -29.8773       29.8773       1469.94       1499.82    
  16  0.963006     -0.376958E-01  -4.84454       4.84454       1489.44       1494.28    
  17  0.294103      -1.22382      -157.282       157.282       1456.76       1614.04    
  18  0.403484     -0.907618      -116.644       116.644       1548.55       1665.20    
  19  0.449313     -0.800035      -102.818       102.818       1339.96       1442.78    
  20  0.721912     -0.325852      -41.8774       41.8774       1456.43       1498.31    
  21  0.512488     -0.668479      -85.9105       85.9105       1453.78       1539.69    
  22  0.885190     -0.121953      -15.6729       15.6729       1441.50       1457.18    
  23  0.694751E-01  -2.66679      -342.726       342.726       1552.58       1895.30    
  24  0.820879     -0.197380      -25.3666       25.3666       1528.44       1553.81    
  25  0.211527      -1.55340      -199.638       199.638       1577.53       1777.17    
  26  0.937420     -0.646236E-01  -8.30519       8.30519       1553.35       1561.66    
  27  0.515756E-01  -2.96471      -381.014       381.014       1576.52       1957.53    
  28  0.695222     -0.363525      -46.7189       46.7189       1508.93       1555.65    
  29  0.718776     -0.330205      -42.4368       42.4368       1500.10       1542.54    
  30  0.536080     -0.623471      -80.1263       80.1263       1504.39       1584.52    
  31  0.585855     -0.534682      -68.7155       68.7155       1618.35       1687.06    
  32  0.693572     -0.365900      -47.0242       47.0242       1535.33       1582.35    
  33  0.700823     -0.355500      -45.6875       45.6875       1561.64       1607.33    
  34  0.250985      -1.38236      -177.656       177.656       1518.51       1696.17    
  35  0.290600      -1.23581      -158.821       158.821       1491.51       1650.33    
  36  0.828609     -0.188007      -24.1620       24.1620       1494.23       1518.39    
  37  0.225820      -1.48802      -191.235       191.235       1590.44       1781.67    
  38  0.999674     -0.326354E-03 -0.419419E-01  0.419419E-01   1358.23       1358.27    
  39  0.878216     -0.129862      -16.6895       16.6895       1410.23       1426.92    
  40  0.685898E-01  -2.67961      -344.374       344.374       1597.26       1941.64    
  41  0.273860      -1.29514      -166.446       166.446       1584.73       1751.18    
  42  0.697655     -0.360030      -46.2698       46.2698       1717.46       1763.73    
  43  0.293168      -1.22701      -157.691       157.691       1744.49       1902.18    
  44  0.319476      -1.14107      -146.647       146.647       1438.65       1585.30    
  45  0.874681     -0.133896      -17.2079       17.2079       1516.34       1533.55    
  46  0.408697     -0.894781      -114.994       114.994       1743.72       1858.71    
  47  0.142130E-01  -4.25360      -546.657       546.657       1539.50       2086.16    
  48  0.164528      -1.80468      -231.931       231.931       1718.33       1950.26    
  49  0.652669     -0.426685      -54.8360       54.8360       1747.80       1802.63    
  50  0.492107     -0.709060      -91.1259       91.1259       1739.04       1830.16    
  51  0.542705     -0.611189      -78.5479       78.5479       1631.36       1709.91    
  52  0.798603     -0.224891      -28.9022       28.9022       1663.06       1691.97    
  53  0.474092E-01  -3.04894      -391.839       391.839       1713.55       2105.39    
  54  0.425084     -0.855468      -109.942       109.942       1733.08       1843.02    
  55  0.349722      -1.05062      -135.022       135.022       1703.70       1838.73    
  56  0.499235     -0.694678      -89.2776       89.2776       1758.00       1847.28    
  57  0.193091      -1.64459      -211.357       211.357       1354.87       1566.23    
  58  0.876894     -0.131369      -16.8831       16.8831       1764.73       1781.62    
  59  0.634591     -0.454774      -58.4459       58.4459       1770.52       1828.97    
  60  0.571394     -0.559676      -71.9276       71.9276       1730.88       1802.81    
  61  0.749680     -0.288108      -37.0267       37.0267       1716.14       1753.16    
  62  0.111050      -2.19777      -282.450       282.450       1838.47       2120.92    
  63  0.456811     -0.783485      -100.691       100.691       1765.98       1866.67    
  64  0.686362     -0.376350      -48.3672       48.3672       1312.30       1360.67    
loop,thermsimp(1:2)       11   10.8002       150.895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       1268.80         68.80          1.13         40.34          0.60          0.05        110.93
Just calling func    0   0        110.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226      20792.57         68.62          1.07         40.27          0.87          0.04        110.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1268.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       11
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       12
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      225     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -34.7856       34.7856       1187.13       1221.92    
   2  0.482922E-01  -3.03048      -389.467       389.467       1262.61       1652.08    
   3  0.612960     -0.489456      -62.9032       62.9032       1358.23       1421.13    
   4  0.910127     -0.941714E-01  -12.1026       12.1026       1312.30       1324.40    
   5  0.362433      -1.01492      -130.434       130.434       1215.97       1346.40    
   6  0.476779     -0.740702      -95.1925       95.1925       1365.09       1460.29    
   7  0.179006E-01  -4.02292      -517.011       517.011       1309.63       1826.65    
   8  0.589646     -0.528233      -67.8866       67.8866       1374.13       1442.01    
   9  0.926206     -0.766581E-01  -9.85183       9.85183       1410.23       1420.09    
  10  0.492629     -0.707999      -90.9896       90.9896       1364.08       1455.07    
  11  0.661123     -0.413815      -53.1820       53.1820       1339.96       1393.15    
  12  0.542248     -0.612032      -78.6562       78.6562       1441.50       1520.16    
  13  0.216527      -1.53004      -196.635       196.635       1449.54       1646.17    
  14  0.549832     -0.598143      -76.8712       76.8712       1405.15       1482.02    
  15  0.429556     -0.845003      -108.597       108.597       1489.44       1598.04    
  16  0.264838      -1.32864      -170.752       170.752       1456.43       1627.18    
  17  0.251706      -1.37949      -177.288       177.288       1469.94       1647.23    
  18  0.701724     -0.354215      -45.5224       45.5224       1494.23       1539.75    
  19  0.324289      -1.12612      -144.725       144.725       1341.38       1486.10    
  20  0.160749E-02  -6.43308      -826.757       826.757       1516.34       2343.10    
  21  0.533627     -0.628058      -80.7158       80.7158       1453.78       1534.49    
  22  0.883065     -0.124357      -15.9819       15.9819       1500.10       1516.08    
  23  0.484824     -0.723969      -93.0419       93.0419       1448.36       1541.40    
  24  0.724157     -0.322747      -41.4783       41.4783       1528.44       1569.92    
  25  0.847375     -0.165612      -21.2839       21.2839       1508.93       1530.22    
  26  0.167586      -1.78626      -229.564       229.564       1553.35       1782.92    
  27  0.890079     -0.116445      -14.9651       14.9651       1354.87       1369.83    
  28  0.235223      -1.44722      -185.992       185.992       1535.33       1721.32    
  29  0.206112      -1.57934      -202.971       202.971       1504.39       1707.36    
  30  0.463385     -0.769198      -98.8546       98.8546       1438.65       1537.50    
  31  0.487880E-01  -3.02027      -388.155       388.155       1445.36       1833.51    
  32  0.244157      -1.40994      -181.201       181.201       1561.64       1742.84    
  33  0.770602     -0.260583      -33.4892       33.4892       1456.76       1490.25    
  34  0.264159      -1.33120      -171.081       171.081       1474.69       1645.77    
  35  0.189030E-01  -3.96843      -510.009       510.009       1491.51       2001.52    
  36  0.635342     -0.453592      -58.2940       58.2940       1548.55       1606.85    
  37  0.139550      -1.96933      -253.091       253.091       1618.35       1871.44    
  38  0.561566     -0.577026      -74.1573       74.1573       1663.06       1737.22    
  39  0.951789     -0.494118E-01  -6.35023       6.35023       1518.51       1524.86    
  40  0.527693     -0.639242      -82.1531       82.1531       1425.50       1507.66    
  41  0.925337     -0.775972E-01  -9.97252       9.97252       1631.36       1641.33    
  42  0.795352     -0.228971      -29.4266       29.4266       1584.73       1614.16    
  43  0.530799     -0.633371      -81.3987       81.3987       1716.14       1797.53    
  44  0.642763     -0.441979      -56.8016       56.8016       1717.46       1774.26    
  45  0.485146     -0.723305      -92.9566       92.9566       1577.53       1670.48    
  46  0.795896     -0.228287      -29.3387       29.3387       1764.73       1794.07    
  47  0.519140     -0.655581      -84.2530       84.2530       1590.44       1674.69    
  48  0.694073E-01  -2.66776      -342.851       342.851       1747.80       2090.65    
  49  0.401486     -0.912583      -117.282       117.282       1730.88       1848.16    
  50  0.587982E-01  -2.83364      -364.170       364.170       1770.52       2134.69    
  51  0.752652     -0.284152      -36.5182       36.5182       1739.04       1775.56    
  52  0.139929      -1.96662      -252.744       252.744       1703.70       1956.45    
  53  0.136759      -1.98953      -255.688       255.688       1733.08       1988.76    
  54  0.690728     -0.370009      -47.5523       47.5523       1758.00       1805.55    
  55  0.409546     -0.892705      -114.727       114.727       1743.72       1858.45    
  56  0.422285     -0.862075      -110.791       110.791       1765.98       1876.77    
  57  0.160439      -1.82984      -235.165       235.165       1552.58       1787.74    
  58  0.230463      -1.46767      -188.619       188.619       1744.49       1933.11    
  59  0.836860     -0.178099      -22.8886       22.8886       1597.26       1620.15    
  60  0.635813     -0.452850      -58.1987       58.1987       1718.33       1776.52    
  61  0.464135     -0.767580      -98.6467       98.6467       1576.52       1675.17    
  62  0.999501     -0.498826E-03 -0.641074E-01  0.641074E-01   1539.50       1539.56    
  63  0.472031     -0.750710      -96.4785       96.4785       1713.55       1810.03    
  64  0.926290     -0.765681E-01  -9.84026       9.84026       1268.80       1278.64    
loop,thermsimp(1:2)       12   34.7856       389.467    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       1929.31         68.93          1.22         40.70          0.04          0.05        110.94
Just calling func    0   0        110.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228       9649.30         68.62          1.13         40.60          0.20          0.05        110.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1929.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       12
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       13
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      227     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -67.1992       67.1992       1187.13       1254.33    
   2  0.691791     -0.368472      -47.3547       47.3547       1268.80       1316.16    
   3  0.688173     -0.373715      -48.0285       48.0285       1312.30       1360.33    
   4  0.439966     -0.821058      -105.519       105.519       1215.97       1321.49    
   5  0.945690     -0.558403E-01  -7.17640       7.17640       1354.87       1362.05    
   6  0.238956      -1.43147      -183.968       183.968       1339.96       1523.93    
   7  0.280830E-01  -3.57259      -459.137       459.137       1410.23       1869.37    
   8  0.902031E-01  -2.40569      -309.171       309.171       1358.23       1667.40    
   9  0.198361      -1.61767      -207.897       207.897       1374.13       1582.02    
  10  0.201288      -1.60302      -206.014       206.014       1364.08       1570.10    
  11  0.710033     -0.342444      -44.0097       44.0097       1365.09       1409.10    
  12  0.182913      -1.69874      -218.317       218.317       1405.15       1623.47    
  13  0.817316     -0.201730      -25.9256       25.9256       1341.38       1367.30    
  14  0.894732     -0.111231      -14.2950       14.2950       1456.76       1471.06    
  15  0.854000     -0.157824      -20.2830       20.2830       1425.50       1445.79    
  16  0.248066      -1.39406      -179.160       179.160       1500.10       1679.26    
  17  0.670877     -0.399170      -51.2999       51.2999       1441.50       1492.80    
  18  0.701473     -0.354573      -45.5685       45.5685       1518.51       1564.08    
  19  0.199467      -1.61210      -207.182       207.182       1508.93       1716.12    
  20  0.391533     -0.937685      -120.508       120.508       1453.78       1574.29    
  21  0.586761     -0.533138      -68.5170       68.5170       1438.65       1507.17    
  22  0.163799      -1.80912      -232.501       232.501       1539.50       1772.00    
  23  0.955964     -0.450353E-01  -5.78777       5.78777       1494.23       1500.02    
  24  0.365727      -1.00587      -129.270       129.270       1448.36       1577.63    
  25  0.733577     -0.309822      -39.8173       39.8173       1528.44       1568.26    
  26  0.111597      -2.19286      -281.819       281.819       1489.44       1771.26    
  27  0.714895     -0.335619      -43.1326       43.1326       1548.55       1591.69    
  28  0.816688     -0.202498      -26.0243       26.0243       1584.73       1610.76    
  29  0.480603     -0.732714      -94.1658       94.1658       1597.26       1691.43    
  30  0.573891     -0.555316      -71.3672       71.3672       1456.43       1527.80    
  31  0.204452      -1.58742      -204.010       204.010       1631.36       1835.37    
  32  0.845356E-01  -2.47058      -317.510       317.510       1474.69       1792.20    
  33  0.524789E-01  -2.94734      -378.782       378.782       1449.54       1828.32    
  34  0.631781     -0.459213      -59.0164       59.0164       1469.94       1528.96    
  35  0.620363     -0.477450      -61.3602       61.3602       1262.61       1323.97    
  36  0.553551     -0.591402      -76.0049       76.0049       1577.53       1653.53    
  37  0.546271     -0.604640      -77.7062       77.7062       1590.44       1668.14    
  38  0.402204     -0.910797      -117.052       117.052       1576.52       1693.57    
  39  0.735174     -0.307648      -39.5378       39.5378       1504.39       1543.93    
  40  0.359565      -1.02286      -131.454       131.454       1535.33       1666.78    
  41  0.564111     -0.572504      -73.5763       73.5763       1663.06       1736.64    
  42  0.412661     -0.885128      -113.754       113.754       1561.64       1675.40    
  43  0.795853     -0.228341      -29.3456       29.3456       1717.46       1746.80    
  44  0.909991E-01  -2.39691      -308.042       308.042       1739.04       2047.08    
  45  0.830687     -0.185502      -23.8401       23.8401       1718.33       1742.17    
  46  0.592588     -0.523256      -67.2470       67.2470       1553.35       1620.60    
  47  0.489472     -0.714427      -91.8157       91.8157       1552.58       1644.39    
  48  0.992056     -0.797586E-02  -1.02503       1.02503       1764.73       1765.76    
  49  0.808208     -0.212936      -27.3657       27.3657       1716.14       1743.50    
  50  0.212569      -1.54849      -199.006       199.006       1758.00       1957.01    
  51  0.214041      -1.54159      -198.120       198.120       1713.55       1911.67    
  52  0.586527     -0.533536      -68.5682       68.5682       1309.63       1378.20    
  53  0.603460     -0.505075      -64.9104       64.9104       1445.36       1510.27    
  54  0.819887     -0.198589      -25.5219       25.5219       1730.88       1756.40    
  55  0.204248      -1.58842      -204.138       204.138       1743.72       1947.86    
  56  0.540917     -0.614489      -78.9720       78.9720       1618.35       1697.32    
  57  0.430522     -0.842757      -108.308       108.308       1765.98       1874.29    
  58  0.637009E-01  -2.75356      -353.877       353.877       1744.49       2098.37    
  59  0.872387     -0.136522      -17.5453       17.5453       1703.70       1721.25    
  60  0.740351     -0.300631      -38.6360       38.6360       1733.08       1771.71    
  61  0.844085     -0.169502      -21.7838       21.7838       1491.51       1513.29    
  62  0.574613     -0.554058      -71.2056       71.2056       1747.80       1819.00    
  63  0.382052     -0.962198      -123.658       123.658       1770.52       1894.18    
  64  0.564583     -0.571667      -73.4686       73.4686       1929.31       2002.78    
loop,thermsimp(1:2)       13   67.1992       47.3547    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229       1256.72         68.98          1.21         40.28          0.68          0.05        111.19
Just calling func    0   0        111.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230       1553.59         68.75          1.14         40.45          0.71          0.05        111.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1256.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       13
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       14
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      229     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -139.030       139.030       1187.13       1326.16    
   2  0.649641     -0.431335      -55.4336       55.4336       1268.80       1324.24    
   3  0.930116     -0.724456E-01  -9.31045       9.31045       1215.97       1225.28    
   4  0.297326      -1.21293      -155.881       155.881       1262.61       1418.49    
   5  0.751734     -0.285373      -36.6751       36.6751       1312.30       1348.97    
   6  0.409056     -0.893902      -114.881       114.881       1354.87       1469.75    
   7  0.115094      -2.16201      -277.854       277.854       1341.38       1619.23    
   8  0.606681     -0.499753      -64.2264       64.2264       1309.63       1373.86    
   9  0.140571      -1.96204      -252.155       252.155       1365.09       1617.25    
  10  0.447669E-01  -3.10629      -399.209       399.209       1425.50       1824.71    
  11  0.517394     -0.658951      -84.6861       84.6861       1456.76       1541.45    
  12  0.587057     -0.532633      -68.4521       68.4521       1441.50       1509.96    
  13  0.384993E-01  -3.25712      -418.593       418.593       1494.23       1912.82    
  14  0.829105E-01  -2.48999      -320.005       320.005       1438.65       1758.66    
  15  0.382179     -0.961866      -123.616       123.616       1445.36       1568.97    
  16  0.269516      -1.31113      -168.502       168.502       1491.51       1660.01    
  17  0.879580     -0.128311      -16.4900       16.4900       1339.96       1356.45    
  18  0.760503E-01  -2.57636      -331.105       331.105       1456.43       1787.54    
  19  0.482544     -0.728684      -93.6478       93.6478       1469.94       1563.59    
  20  0.561499     -0.577145      -74.1727       74.1727       1504.39       1578.57    
  21  0.254621      -1.36798      -175.808       175.808       1518.51       1694.32    
  22  0.479261     -0.735511      -94.5252       94.5252       1528.44       1622.96    
  23  0.638455     -0.448704      -57.6659       57.6659       1364.08       1421.75    
  24  0.289082      -1.24105      -159.495       159.495       1453.78       1613.27    
  25  0.656024     -0.421558      -54.1772       54.1772       1448.36       1502.54    
  26  0.597431     -0.515117      -66.2010       66.2010       1374.13       1440.33    
  27  0.859562     -0.151333      -19.4488       19.4488       1548.55       1568.00    
  28  0.554826     -0.589100      -75.7091       75.7091       1584.73       1660.44    
  29  0.128413      -2.05250      -263.781       263.781       1553.35       1817.13    
  30  0.311170      -1.16742      -150.032       150.032       1405.15       1555.18    
  31  0.606679     -0.499755      -64.2268       64.2268       1552.58       1616.80    
  32  0.923238     -0.798686E-01  -10.2644       10.2644       1577.53       1587.79    
  33  0.734154     -0.309037      -39.7164       39.7164       1535.33       1575.04    
  34  0.988670     -0.113947E-01  -1.46441       1.46441       1358.23       1359.69    
  35  0.136308      -1.99284      -256.112       256.112       1590.44       1846.55    
  36  0.345839      -1.06178      -136.457       136.457       1561.64       1698.10    
  37  0.349440      -1.05142      -135.125       135.125       1500.10       1635.22    
  38  0.625658E-01  -2.77154      -356.188       356.188       1597.26       1953.45    
  39  0.394804     -0.929365      -119.439       119.439       1576.52       1695.96    
  40  0.899667E-02  -4.71090      -605.428       605.428       1618.35       2223.78    
  41  0.823946     -0.193651      -24.8873       24.8873       1508.93       1533.82    
  42  0.834235     -0.181240      -23.2924       23.2924       1703.70       1727.00    
  43  0.777534     -0.251627      -32.3383       32.3383       1663.06       1695.40    
  44  0.384993     -0.954531      -122.673       122.673       1718.33       1841.00    
  45  0.247443E-01  -3.69916      -475.403       475.403       1716.14       2191.54    
  46  0.810695     -0.209863      -26.9709       26.9709       1717.46       1744.43    
  47  0.893618     -0.112477      -14.4551       14.4551       1730.88       1745.34    
  48  0.545617     -0.605837      -77.8601       77.8601       1764.73       1842.59    
  49  0.587193     -0.532402      -68.4225       68.4225       1489.44       1557.86    
  50  0.991207     -0.883185E-02  -1.13504       1.13504       1733.08       1734.21    
  51  0.477440     -0.739316      -95.0143       95.0143       1539.50       1634.51    
  52  0.444858     -0.810000      -104.098       104.098       1474.69       1578.79    
  53  0.103440      -2.26876      -291.573       291.573       1747.80       2039.37    
  54  0.320718      -1.13719      -146.148       146.148       1449.54       1595.69    
  55  0.161721      -1.82188      -234.142       234.142       1631.36       1865.50    
  56  0.912244     -0.918481E-01  -11.8040       11.8040       1410.23       1422.04    
  57  0.358583      -1.02559      -131.806       131.806       1765.98       1897.78    
  58  0.263871      -1.33229      -171.222       171.222       1770.52       1941.75    
  59  0.782230     -0.245606      -31.5645       31.5645       1713.55       1745.12    
  60  0.592946     -0.522652      -67.1694       67.1694       1743.72       1810.89    
  61  0.652732     -0.426589      -54.8237       54.8237       1758.00       1812.82    
  62  0.817021     -0.202091      -25.9720       25.9720       1929.31       1955.28    
  63  0.177213      -1.73040      -222.385       222.385       1739.04       1961.42    
  64  0.263258      -1.33462      -171.521       171.521       1256.72       1428.24    
loop,thermsimp(1:2)       14   139.030       55.4336    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231       1284.76         68.53          1.15         40.90          0.71          0.05        111.33
Just calling func    0   0        111.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1284.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       14
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       15
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      230     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -194.752       194.752       1215.97       1410.72    
   2  0.894567E-01  -2.41400      -310.239       310.239       1268.80       1579.04    
   3  0.863615     -0.146628      -18.8441       18.8441       1187.13       1205.98    
   4  0.807990     -0.213206      -27.4005       27.4005       1312.30       1339.70    
   5  0.318173      -1.14516      -147.172       147.172       1339.96       1487.14    
   6  0.464606     -0.766566      -98.5163       98.5163       1358.23       1456.74    
   7  0.574933     -0.553501      -71.1340       71.1340       1309.63       1380.77    
   8  0.974939     -0.253802E-01  -3.26178       3.26178       1262.61       1265.87    
   9  0.415757     -0.877653      -112.793       112.793       1364.08       1476.88    
  10  0.187109      -1.67606      -215.402       215.402       1410.23       1625.64    
  11  0.730515E-01  -2.61659      -336.275       336.275       1256.72       1592.99    
  12  0.209185      -1.56454      -201.069       201.069       1374.13       1575.20    
  13  0.496690     -0.699790      -89.9345       89.9345       1354.87       1444.80    
  14  0.862986     -0.147356      -18.9377       18.9377       1448.36       1467.30    
  15  0.888200     -0.118558      -15.2366       15.2366       1441.50       1456.74    
  16  0.380888     -0.965250      -124.051       124.051       1508.93       1632.98    
  17  0.135305      -2.00022      -257.061       257.061       1456.76       1713.82    
  18  0.927079     -0.757167E-01  -9.73084       9.73084       1405.15       1414.88    
  19  0.603067     -0.505727      -64.9942       64.9942       1489.44       1554.43    
  20  0.136202      -1.99362      -256.213       256.213       1469.94       1726.15    
  21  0.954653     -0.464076E-01  -5.96414       5.96414       1548.55       1554.52    
  22  0.151192      -1.88920      -242.794       242.794       1445.36       1688.15    
  23  0.449259     -0.800155      -102.833       102.833       1535.33       1638.16    
  24  0.780874     -0.247341      -31.7874       31.7874       1504.39       1536.18    
  25  0.456238     -0.784740      -100.852       100.852       1474.69       1575.54    
  26  0.163284      -1.81227      -232.906       232.906       1577.53       1810.43    
  27  0.821444     -0.196692      -25.2781       25.2781       1449.54       1474.82    
  28  0.861448     -0.149141      -19.1670       19.1670       1453.78       1472.95    
  29  0.924167     -0.788621E-01  -10.1351       10.1351       1552.58       1562.71    
  30  0.195059      -1.63445      -210.054       210.054       1365.09       1575.15    
  31  0.375134     -0.980472      -126.007       126.007       1341.38       1467.39    
  32  0.909862     -0.944628E-01  -12.1400       12.1400       1528.44       1540.58    
  33  0.831459     -0.184574      -23.7208       23.7208       1539.50       1563.22    
  34  0.627278     -0.466365      -59.9356       59.9356       1500.10       1560.04    
  35  0.918890     -0.845891E-01  -10.8711       10.8711       1491.51       1502.38    
  36  0.475784     -0.742791      -95.4609       95.4609       1584.73       1680.19    
  37  0.344524      -1.06559      -136.946       136.946       1518.51       1655.46    
  38  0.286778      -1.24905      -160.523       160.523       1663.06       1823.59    
  39  0.336148      -1.09020      -140.109       140.109       1576.52       1716.63    
  40  0.709840     -0.342716      -44.0447       44.0447       1561.64       1605.69    
  41  0.219827      -1.51491      -194.691       194.691       1703.70       1898.39    
  42  0.347594      -1.05672      -135.806       135.806       1733.08       1868.88    
  43  0.905734     -0.990099E-01  -12.7244       12.7244       1717.46       1730.18    
  44  0.826231     -0.190881      -24.5313       24.5313       1713.55       1738.08    
  45  0.400277     -0.915599      -117.670       117.670       1730.88       1848.55    
  46  0.555153     -0.588512      -75.6335       75.6335       1438.65       1514.28    
  47  0.864397     -0.145723      -18.7279       18.7279       1456.43       1475.16    
  48  0.277380E-01  -3.58495      -460.726       460.726       1743.72       2204.45    
  49  0.993968     -0.605015E-02 -0.777544      0.777544       1758.00       1758.78    
  50  0.717076     -0.332573      -42.7411       42.7411       1553.35       1596.09    
  51  0.736253     -0.306182      -39.3494       39.3494       1425.50       1464.85    
  52  0.278813      -1.27722      -164.143       164.143       1718.33       1882.47    
  53  0.646460     -0.436245      -56.0646       56.0646       1764.73       1820.80    
  54  0.600312     -0.510306      -65.5827       65.5827       1590.44       1656.02    
  55  0.295434      -1.21931      -156.702       156.702       1631.36       1788.06    
  56  0.946129     -0.553767E-01  -7.11682       7.11682       1765.98       1773.09    
  57  0.722008     -0.325719      -41.8603       41.8603       1494.23       1536.09    
  58  0.789514     -0.236338      -30.3733       30.3733       1770.52       1800.90    
  59  0.955429     -0.455949E-01  -5.85970       5.85970       1597.26       1603.12    
  60  0.693546     -0.365938      -47.0290       47.0290       1929.31       1976.34    
  61  0.979434     -0.207808E-01  -2.67068       2.67068       1739.04       1741.71    
  62  0.860966     -0.149700      -19.2389       19.2389       1747.80       1767.04    
  63  0.329063      -1.11151      -142.847       142.847       1716.14       1858.98    
  64  0.839540     -0.174902      -22.4777       22.4777       1284.76       1307.24    
loop,thermsimp(1:2)       15   194.752       310.239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       1808.05         69.24          1.26         40.36          0.04          0.05        110.93
Just calling func    0   0        110.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1808.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       15
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       16
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      231     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -187.918       187.918       1187.13       1375.05    
   2  0.641193     -0.444425      -57.1159       57.1159       1262.61       1319.73    
   3  0.353033      -1.04119      -133.811       133.811       1284.76       1418.57    
   4  0.928955     -0.736953E-01  -9.47106       9.47106       1312.30       1321.77    
   5  0.350257      -1.04909      -134.825       134.825       1309.63       1444.46    
   6  0.682617     -0.381821      -49.0703       49.0703       1215.97       1265.04    
   7  0.162763      -1.81546      -233.316       233.316       1405.15       1638.47    
   8  0.874032     -0.134639      -17.3033       17.3033       1354.87       1372.17    
   9  0.518909     -0.656027      -84.3103       84.3103       1441.50       1525.81    
  10  0.461984     -0.772226      -99.2438       99.2438       1358.23       1457.47    
  11  0.449468     -0.799691      -102.773       102.773       1425.50       1528.28    
  12  0.523281     -0.647637      -83.2321       83.2321       1448.36       1531.59    
  13  0.637377     -0.450394      -57.8831       57.8831       1341.38       1399.26    
  14  0.596329     -0.516963      -66.4383       66.4383       1453.78       1520.22    
  15  0.286246      -1.25090      -160.762       160.762       1449.54       1610.30    
  16  0.590425     -0.526913      -67.7171       67.7171       1456.43       1524.15    
  17  0.853637     -0.158249      -20.3376       20.3376       1364.08       1384.42    
  18  0.245572      -1.40416      -180.458       180.458       1339.96       1520.42    
  19  0.375654     -0.979088      -125.829       125.829       1491.51       1617.34    
  20  0.281654      -1.26708      -162.840       162.840       1438.65       1601.49    
  21  0.443392     -0.813302      -104.523       104.523       1494.23       1598.75    
  22  0.442934     -0.814335      -104.655       104.655       1504.39       1609.05    
  23  0.171790      -1.76149      -226.380       226.380       1528.44       1754.82    
  24  0.802582     -0.219921      -28.2635       28.2635       1489.44       1517.70    
  25  0.162733      -1.81564      -233.340       233.340       1548.55       1781.89    
  26  0.838320     -0.176355      -22.6645       22.6645       1500.10       1522.76    
  27  0.210754      -1.55706      -200.108       200.108       1552.58       1752.69    
  28  0.240377      -1.42554      -183.206       183.206       1539.50       1722.71    
  29  0.173042E-01  -4.05680      -521.366       521.366       1365.09       1886.46    
  30  0.640146     -0.446059      -57.3259       57.3259       1374.13       1431.45    
  31  0.749210     -0.288736      -37.1073       37.1073       1474.69       1511.80    
  32  0.666162     -0.406222      -52.2062       52.2062       1268.80       1321.01    
  33  0.601746     -0.507920      -65.2760       65.2760       1256.72       1321.99    
  34  0.677044     -0.390020      -50.1239       50.1239       1553.35       1603.48    
  35  0.290379      -1.23657      -158.919       158.919       1597.26       1756.18    
  36  0.439723     -0.821610      -105.590       105.590       1561.64       1667.23    
  37  0.680091     -0.385528      -49.5467       49.5467       1410.23       1459.78    
  38  0.803784     -0.218425      -28.0712       28.0712       1508.93       1537.00    
  39  0.507823     -0.677622      -87.0856       87.0856       1535.33       1622.41    
  40  0.894573     -0.111408      -14.3178       14.3178       1518.51       1532.83    
  41  0.826908     -0.190062      -24.4261       24.4261       1590.44       1614.86    
  42  0.815562     -0.203878      -26.2017       26.2017       1584.73       1610.93    
  43  0.352457      -1.04283      -134.021       134.021       1445.36       1579.38    
  44  0.104059      -2.26279      -290.806       290.806       1456.76       1747.57    
  45  0.601892     -0.507677      -65.2448       65.2448       1576.52       1641.77    
  46  0.988184     -0.118862E-01  -1.52757       1.52757       1469.94       1471.47    
  47  0.733912     -0.309366      -39.7586       39.7586       1717.46       1757.22    
  48  0.107394      -2.23125      -286.752       286.752       1713.55       2000.30    
  49  0.592150     -0.523995      -67.3420       67.3420       1739.04       1806.38    
  50  0.821901     -0.196136      -25.2067       25.2067       1758.00       1783.21    
  51  0.400070E-01  -3.21870      -413.656       413.656       1747.80       2161.45    
  52  0.271211      -1.30486      -167.696       167.696       1765.98       1933.67    
  53  0.296309      -1.21635      -156.321       156.321       1631.36       1787.68    
  54  0.436334     -0.829346      -106.585       106.585       1770.52       1877.11    
  55  0.372372     -0.987863      -126.957       126.957       1577.53       1704.48    
  56  0.806182     -0.215446      -27.6883       27.6883       1764.73       1792.42    
  57  0.194087      -1.63945      -210.696       210.696       1663.06       1873.76    
  58  0.739876     -0.301273      -38.7185       38.7185       1730.88       1769.60    
  59  0.348380      -1.05446      -135.516       135.516       1716.14       1851.65    
  60  0.850149     -0.162343      -20.8638       20.8638       1733.08       1753.94    
  61  0.123296      -2.09317      -269.006       269.006       1718.33       1987.33    
  62  0.855160     -0.156467      -20.1086       20.1086       1703.70       1723.81    
  63  0.959969E-01  -2.34344      -301.171       301.171       1929.31       2230.48    
  64  0.739916     -0.301218      -38.7115       38.7115       1808.05       1846.76    
loop,thermsimp(1:2)       16   187.918       57.1159    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       1512.18         69.26          1.24         40.15          0.41          0.05        111.11
Just calling func    0   0        111.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1512.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       16
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       17
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      232     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -32.4410       32.4410       1215.97       1248.41    
   2  0.350417      -1.04863      -134.766       134.766       1262.61       1397.38    
   3  0.533846     -0.627648      -80.6631       80.6631       1268.80       1349.47    
   4  0.622955     -0.473280      -60.8243       60.8243       1312.30       1373.12    
   5  0.661091E-01  -2.71645      -349.108       349.108       1256.72       1605.83    
   6  0.759206     -0.275482      -35.4040       35.4040       1354.87       1390.27    
   7  0.430535     -0.842727      -108.304       108.304       1187.13       1295.44    
   8  0.257678      -1.35604      -174.274       174.274       1364.08       1538.36    
   9  0.296561      -1.21550      -156.212       156.212       1341.38       1497.59    
  10  0.805929     -0.215760      -27.7287       27.7287       1284.76       1312.49    
  11  0.421616     -0.863661      -110.995       110.995       1374.13       1485.12    
  12  0.767803     -0.264223      -33.9570       33.9570       1309.63       1343.59    
  13  0.605260     -0.502097      -64.5277       64.5277       1358.23       1422.75    
  14  0.566784     -0.567776      -72.9686       72.9686       1410.23       1483.20    
  15  0.292740      -1.22847      -157.879       157.879       1469.94       1627.82    
  16  0.898463     -0.107069      -13.7602       13.7602       1474.69       1488.45    
  17  0.218067      -1.52295      -195.725       195.725       1489.44       1685.16    
  18  0.856756     -0.154603      -19.8690       19.8690       1453.78       1473.65    
  19  0.338883      -1.08210      -139.068       139.068       1339.96       1479.03    
  20  0.796034     -0.228113      -29.3163       29.3163       1500.10       1529.42    
  21  0.778636     -0.250212      -32.1563       32.1563       1456.43       1488.59    
  22  0.575989     -0.551667      -70.8984       70.8984       1441.50       1512.40    
  23  0.355531      -1.03414      -132.904       132.904       1425.50       1558.41    
  24  0.164949      -1.80212      -231.602       231.602       1448.36       1679.96    
  25  0.315998      -1.15202      -148.053       148.053       1518.51       1666.57    
  26  0.330933      -1.10584      -142.119       142.119       1508.93       1651.05    
  27  0.429436     -0.845283      -108.633       108.633       1445.36       1553.99    
  28  0.464808     -0.766130      -98.4604       98.4604       1494.23       1592.69    
  29  0.192211      -1.64916      -211.944       211.944       1438.65       1650.59    
  30  0.866849     -0.142891      -18.3638       18.3638       1553.35       1571.72    
  31  0.474973     -0.744498      -95.6803       95.6803       1504.39       1600.07    
  32  0.667713     -0.403897      -51.9074       51.9074       1449.54       1501.45    
  33  0.994155     -0.586200E-02 -0.753364      0.753364       1584.73       1585.48    
  34  0.577739     -0.548634      -70.5085       70.5085       1590.44       1660.94    
  35  0.381919     -0.962546      -123.703       123.703       1491.51       1615.21    
  36  0.733204     -0.310331      -39.8826       39.8826       1535.33       1575.21    
  37  0.492382     -0.708500      -91.0540       91.0540       1405.15       1496.20    
  38  0.188899E-01  -3.96913      -510.099       510.099       1576.52       2086.62    
  39  0.741920E-01  -2.60110      -334.284       334.284       1561.64       1895.93    
  40  0.210592      -1.55783      -200.207       200.207       1577.53       1777.74    
  41  0.682838     -0.381498      -49.0288       49.0288       1539.50       1588.53    
  42  0.656831     -0.420328      -54.0191       54.0191       1703.70       1757.72    
  43  0.444670     -0.810424      -104.153       104.153       1456.76       1560.91    
  44  0.872301     -0.136621      -17.5580       17.5580       1552.58       1570.14    
  45  0.932741     -0.696282E-01  -8.94837       8.94837       1733.08       1742.02    
  46  0.601727     -0.507951      -65.2801       65.2801       1528.44       1593.72    
  47  0.940344     -0.615097E-01  -7.90501       7.90501       1597.26       1605.17    
  48  0.208477E-01  -3.87051      -497.424       497.424       1717.46       2214.88    
  49  0.257831      -1.35545      -174.198       174.198       1730.88       1905.08    
  50  0.522803     -0.648550      -83.3493       83.3493       1548.55       1631.90    
  51  0.676437     -0.390915      -50.2391       50.2391       1758.00       1808.24    
  52  0.612346     -0.490458      -63.0319       63.0319       1631.36       1694.39    
  53  0.206854      -1.57574      -202.509       202.509       1764.73       1967.24    
  54  0.201156      -1.60367      -206.098       206.098       1739.04       1945.14    
  55  0.785118     -0.241921      -31.0908       31.0908       1808.05       1839.14    
  56  0.534951     -0.625580      -80.3973       80.3973       1716.14       1796.53    
  57  0.147432      -1.91439      -246.031       246.031       1663.06       1909.10    
  58  0.696605     -0.361537      -46.4635       46.4635       1770.52       1816.99    
  59  0.711810     -0.339944      -43.6884       43.6884       1365.09       1408.78    
  60  0.934269     -0.679906E-01  -8.73791       8.73791       1765.98       1774.72    
  61  0.821040     -0.197183      -25.3413       25.3413       1718.33       1743.67    
  62  0.682914     -0.381386      -49.0143       49.0143       1713.55       1762.57    
  63  0.660876     -0.414189      -53.2301       53.2301       1747.80       1801.03    
  64  0.653213     -0.425852      -54.7289       54.7289       1512.18       1566.91    
loop,thermsimp(1:2)       17   32.4410       134.766    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234       1360.24         68.83          1.18         40.71          0.51          0.05        111.27
Just calling func    0   0        111.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1360.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       17
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       18
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      233     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -183.196       183.196       1215.97       1399.17    
   2  0.711556E-02  -4.94547      -635.574       635.574       1187.13       1822.71    
   3  0.909796     -0.945347E-01  -12.1493       12.1493       1284.76       1296.91    
   4  0.659218     -0.416702      -53.5530       53.5530       1309.63       1363.19    
   5  0.833482     -0.182144      -23.4085       23.4085       1268.80       1292.21    
   6  0.726295E-01  -2.62238      -337.019       337.019       1312.30       1649.32    
   7  0.687091     -0.375288      -48.2307       48.2307       1354.87       1403.10    
   8  0.860775     -0.149922      -19.2674       19.2674       1262.61       1281.88    
   9  0.846215     -0.166982      -21.4599       21.4599       1365.09       1386.55    
  10  0.398551     -0.919919      -118.225       118.225       1358.23       1476.45    
  11  0.416092     -0.876849      -112.690       112.690       1453.78       1566.47    
  12  0.463389     -0.769189      -98.8535       98.8535       1339.96       1438.82    
  13  0.207356      -1.57332      -202.197       202.197       1410.23       1612.43    
  14  0.133003      -2.01738      -259.267       259.267       1374.13       1633.39    
  15  0.464971     -0.765779      -98.4152       98.4152       1474.69       1573.11    
  16  0.568281     -0.565140      -72.6298       72.6298       1456.43       1529.06    
  17  0.638811     -0.448147      -57.5942       57.5942       1405.15       1462.74    
  18  0.865664     -0.144259      -18.5396       18.5396       1341.38       1359.92    
  19  0.475002     -0.744436      -95.6723       95.6723       1449.54       1545.21    
  20  0.537086     -0.621597      -79.8855       79.8855       1441.50       1521.39    
  21  0.782345     -0.245459      -31.5455       31.5455       1500.10       1531.65    
  22  0.725469     -0.320937      -41.2457       41.2457       1364.08       1405.33    
  23  0.701426E-01  -2.65723      -341.497       341.497       1445.36       1786.85    
  24  0.297043      -1.21388      -156.004       156.004       1425.50       1581.51    
  25  0.444870     -0.809973      -104.095       104.095       1456.76       1560.86    
  26  0.685684     -0.377338      -48.4942       48.4942       1512.18       1560.68    
  27  0.651244     -0.428871      -55.1170       55.1170       1552.58       1607.69    
  28  0.269082      -1.31274      -168.709       168.709       1553.35       1722.06    
  29  0.177107      -1.73100      -222.462       222.462       1535.33       1757.79    
  30  0.766464     -0.265968      -34.1812       34.1812       1584.73       1618.91    
  31  0.801833     -0.220855      -28.3835       28.3835       1539.50       1567.88    
  32  0.759414     -0.275209      -35.3688       35.3688       1494.23       1529.60    
  33  0.566307     -0.568618      -73.0768       73.0768       1528.44       1601.52    
  34  0.297948      -1.21084      -155.612       155.612       1504.39       1660.01    
  35  0.430097E-01  -3.14633      -404.355       404.355       1597.26       2001.62    
  36  0.529414     -0.635984      -81.7344       81.7344       1256.72       1338.45    
  37  0.717133     -0.332494      -42.7309       42.7309       1491.51       1534.24    
  38  0.209457      -1.56323      -200.901       200.901       1469.94       1670.84    
  39  0.732428     -0.311390      -40.0187       40.0187       1548.55       1588.57    
  40  0.697782     -0.359849      -46.2465       46.2465       1438.65       1484.90    
  41  0.977227     -0.230362E-01  -2.96053       2.96053       1508.93       1511.89    
  42  0.744700     -0.294773      -37.8832       37.8832       1590.44       1628.32    
  43  0.713341     -0.337796      -43.4124       43.4124       1518.51       1561.93    
  44  0.497823     -0.697510      -89.6416       89.6416       1448.36       1538.00    
  45  0.968758     -0.317404E-01  -4.07916       4.07916       1489.44       1493.52    
  46  0.287665      -1.24596      -160.126       160.126       1631.36       1791.48    
  47  0.964672     -0.359674E-01  -4.62240       4.62240       1733.08       1737.70    
  48  0.733769     -0.309561      -39.7837       39.7837       1718.33       1758.11    
  49  0.692680     -0.367187      -47.1896       47.1896       1703.70       1750.89    
  50  0.328873      -1.11208      -142.921       142.921       1713.55       1856.47    
  51  0.744920     -0.294478      -37.8453       37.8453       1765.98       1803.82    
  52  0.655188     -0.422834      -54.3411       54.3411       1577.53       1631.87    
  53  0.255467      -1.36466      -175.381       175.381       1716.14       1891.52    
  54  0.262199E-02  -5.94382      -763.879       763.879       1747.80       2511.68    
  55  0.538310     -0.619321      -79.5929       79.5929       1758.00       1837.59    
  56  0.456270     -0.784671      -100.843       100.843       1770.52       1871.37    
  57  0.990209     -0.983957E-02  -1.26455       1.26455       1808.05       1809.32    
  58  0.262373      -1.33799      -171.953       171.953       1561.64       1733.60    
  59  0.645275     -0.438079      -56.3004       56.3004       1730.88       1787.18    
  60  0.423351     -0.859554      -110.467       110.467       1663.06       1773.53    
  61  0.353204      -1.04071      -133.748       133.748       1739.04       1872.79    
  62  0.721881     -0.325895      -41.8829       41.8829       1764.73       1806.62    
  63  0.213966      -1.54194      -198.164       198.164       1576.52       1774.69    
  64  0.176516      -1.73434      -222.892       222.892       1360.24       1583.13    
loop,thermsimp(1:2)       18   183.196       635.574    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       1365.33         68.81          1.17         40.29          0.85          0.04        111.16
Just calling func    0   0        111.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236       6391.58         69.00          1.22         40.46          0.18          0.05        110.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1365.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       18
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       19
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      235     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -41.8261       41.8261       1262.61       1304.44    
   2  0.240049      -1.42691      -183.382       183.382       1268.80       1452.19    
   3  0.365543      -1.00637      -129.335       129.335       1284.76       1414.10    
   4  0.399010     -0.918769      -118.077       118.077       1256.72       1374.80    
   5  0.685268     -0.377945      -48.5722       48.5722       1341.38       1389.95    
   6  0.335805E-01  -3.39381      -436.160       436.160       1309.63       1745.80    
   7  0.820520     -0.197817      -25.4227       25.4227       1365.09       1390.52    
   8  0.756560     -0.278973      -35.8527       35.8527       1215.97       1251.82    
   9  0.869461     -0.139882      -17.9772       17.9772       1354.87       1372.85    
  10  0.787378     -0.239047      -30.7214       30.7214       1364.08       1394.80    
  11  0.330926      -1.10586      -142.121       142.121       1339.96       1482.08    
  12  0.339084E-01  -3.38409      -434.912       434.912       1405.15       1840.06    
  13  0.672805     -0.396300      -50.9311       50.9311       1358.23       1409.16    
  14  0.822413     -0.195513      -25.1266       25.1266       1438.65       1463.78    
  15  0.928870     -0.737865E-01  -9.48277       9.48277       1489.44       1498.92    
  16  0.778944     -0.249816      -32.1055       32.1055       1508.93       1541.04    
  17  0.301602E-01  -3.50123      -449.966       449.966       1441.50       1891.47    
  18  0.292626      -1.22886      -157.929       157.929       1456.43       1614.36    
  19  0.149515      -1.90036      -244.227       244.227       1494.23       1738.46    
  20  0.500330E-01  -2.99507      -384.916       384.916       1500.10       1885.02    
  21  0.759114E-01  -2.57819      -331.340       331.340       1491.51       1822.85    
  22  0.613440     -0.488673      -62.8025       62.8025       1448.36       1511.16    
  23  0.132502      -2.02116      -259.752       259.752       1449.54       1709.29    
  24  0.189750E-02  -6.26722      -805.441       805.441       1512.18       2317.62    
  25  0.507622     -0.678018      -87.1365       87.1365       1456.76       1543.90    
  26  0.378733     -0.970924      -124.780       124.780       1518.51       1643.29    
  27  0.139411      -1.97033      -253.219       253.219       1453.78       1707.00    
  28  0.298599      -1.20865      -155.332       155.332       1539.50       1694.83    
  29  0.767617     -0.264464      -33.9880       33.9880       1474.69       1508.68    
  30  0.656077     -0.421478      -54.1668       54.1668       1425.50       1479.67    
  31  0.701883     -0.353988      -45.4933       45.4933       1360.24       1405.73    
  32  0.940950     -0.608655E-01  -7.82222       7.82222       1548.55       1556.38    
  33  0.621043     -0.476355      -61.2195       61.2195       1528.44       1589.66    
  34  0.622910     -0.473353      -60.8336       60.8336       1552.58       1613.41    
  35  0.525019     -0.644320      -82.8058       82.8058       1410.23       1493.04    
  36  0.871126     -0.137969      -17.7313       17.7313       1584.73       1602.46    
  37  0.475532     -0.743322      -95.5291       95.5291       1590.44       1685.96    
  38  0.320094      -1.13914      -146.398       146.398       1577.53       1723.93    
  39  0.688986     -0.372534      -47.8768       47.8768       1374.13       1422.00    
  40  0.831218     -0.184863      -23.7580       23.7580       1312.30       1336.06    
  41  0.639633     -0.446861      -57.4289       57.4289       1504.39       1561.82    
  42  0.628257     -0.464807      -59.7353       59.7353       1469.94       1529.68    
  43  0.925835     -0.770596E-01  -9.90342       9.90342       1553.35       1563.25    
  44  0.611089     -0.492512      -63.2959       63.2959       1561.64       1624.94    
  45  0.423003E-01  -3.16296      -406.493       406.493       1733.08       2139.57    
  46  0.430763     -0.842198      -108.236       108.236       1703.70       1811.94    
  47  0.374764     -0.981459      -126.134       126.134       1535.33       1661.46    
  48  0.109336      -2.21333      -284.449       284.449       1718.33       2002.78    
  49  0.642636E-02  -5.04735      -648.667       648.667       1663.06       2311.73    
  50  0.232984      -1.45679      -187.221       187.221       1576.52       1763.74    
  51  0.169005E-01  -4.08041      -524.400       524.400       1445.36       1969.76    
  52  0.183441      -1.69586      -217.946       217.946       1730.88       1948.83    
  53  0.257429      -1.35701      -174.398       174.398       1631.36       1805.76    
  54  0.784332     -0.242922      -31.2195       31.2195       1765.98       1797.20    
  55  0.417881     -0.872558      -112.138       112.138       1764.73       1876.87    
  56  0.597408E-01  -2.81774      -362.126       362.126       1808.05       2170.18    
  57  0.854186E-01  -2.46019      -316.175       316.175       1187.13       1503.31    
  58  0.484163     -0.725335      -93.2174       93.2174       1758.00       1851.22    
  59  0.392210     -0.935958      -120.286       120.286       1713.55       1833.84    
  60  0.544229     -0.608385      -78.1875       78.1875       1770.52       1848.71    
  61  0.846696     -0.166413      -21.3868       21.3868       1739.04       1760.42    
  62  0.273327      -1.29709      -166.697       166.697       1716.14       1882.83    
  63  0.253790      -1.37125      -176.228       176.228       1597.26       1773.49    
  64  0.683640     -0.380324      -48.8779       48.8779       1365.33       1414.20    
loop,thermsimp(1:2)       19   41.8261       183.382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       1946.17         68.88          1.18         40.55          0.13          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1946.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       19
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       20
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      236     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -149.749       149.749       1215.97       1365.72    
   2  0.362384      -1.01505      -130.451       130.451       1262.61       1393.06    
   3  0.900627     -0.104664      -13.4511       13.4511       1312.30       1325.75    
   4  0.233893      -1.45289      -186.720       186.720       1354.87       1541.59    
   5  0.183338      -1.69642      -218.018       218.018       1256.72       1474.74    
   6  0.351708      -1.04495      -134.294       134.294       1341.38       1475.67    
   7  0.979617     -0.205938E-01  -2.64664       2.64664       1365.09       1367.74    
   8  0.801294     -0.221527      -28.4699       28.4699       1364.08       1392.55    
   9  0.423893     -0.858275      -110.303       110.303       1360.24       1470.54    
  10  0.486446     -0.720630      -92.6129       92.6129       1358.23       1450.84    
  11  0.430531     -0.842736      -108.305       108.305       1284.76       1393.07    
  12  0.214629      -1.53884      -197.767       197.767       1365.33       1563.09    
  13  0.860310     -0.150463      -19.3370       19.3370       1374.13       1393.46    
  14  0.450659     -0.797045      -102.433       102.433       1268.80       1371.24    
  15  0.867432     -0.142218      -18.2774       18.2774       1438.65       1456.93    
  16  0.850327     -0.162134      -20.8369       20.8369       1425.50       1446.34    
  17  0.914193     -0.897130E-01  -11.5296       11.5296       1339.96       1351.49    
  18  0.908448     -0.960172E-01  -12.3398       12.3398       1410.23       1422.57    
  19  0.349788E-01  -3.35301      -430.917       430.917       1489.44       1920.36    
  20  0.825048     -0.192314      -24.7155       24.7155       1187.13       1211.85    
  21  0.628933     -0.463730      -59.5969       59.5969       1474.69       1534.29    
  22  0.756366     -0.279229      -35.8856       35.8856       1448.36       1484.24    
  23  0.545707     -0.605674      -77.8390       77.8390       1469.94       1547.78    
  24  0.653619     -0.425231      -54.6492       54.6492       1508.93       1563.58    
  25  0.781643     -0.246357      -31.6609       31.6609       1456.76       1488.42    
  26  0.444411     -0.811005      -104.227       104.227       1548.55       1652.78    
  27  0.223111      -1.50008      -192.785       192.785       1504.39       1697.18    
  28  0.143901      -1.93863      -249.146       249.146       1553.35       1802.50    
  29  0.419282E-01  -3.17180      -407.628       407.628       1528.44       1936.07    
  30  0.407367     -0.898040      -115.413       115.413       1584.73       1700.14    
  31  0.722138     -0.325538      -41.8370       41.8370       1552.58       1594.41    
  32  0.290143      -1.23738      -159.024       159.024       1456.43       1615.46    
  33  0.236931E-01  -3.74257      -480.982       480.982       1561.64       2042.62    
  34  0.198981      -1.61454      -207.496       207.496       1518.51       1726.01    
  35  0.765966     -0.266617      -34.2647       34.2647       1535.33       1569.59    
  36  0.522733     -0.648684      -83.3666       83.3666       1590.44       1673.80    
  37  0.297579E-01  -3.51466      -451.692       451.692       1539.50       1991.19    
  38  0.175475      -1.74026      -223.652       223.652       1453.78       1677.43    
  39  0.311931      -1.16497      -149.718       149.718       1449.54       1599.26    
  40  0.310920      -1.16822      -150.136       150.136       1577.53       1727.66    
  41  0.122272      -2.10150      -270.078       270.078       1494.23       1764.31    
  42  0.949359     -0.519686E-01  -6.67882       6.67882       1309.63       1316.31    
  43  0.500750     -0.691648      -88.8882       88.8882       1739.04       1827.93    
  44  0.729401E-01  -2.61812      -336.471       336.471       1576.52       1912.99    
  45  0.952528     -0.486360E-01  -6.25053       6.25053       1597.26       1603.51    
  46  0.718842     -0.330114      -42.4251       42.4251       1765.98       1808.40    
  47  0.529396     -0.636019      -81.7389       81.7389       1631.36       1713.10    
  48  0.314661      -1.15626      -148.598       148.598       1703.70       1852.30    
  49  0.947465     -0.539649E-01  -6.93538       6.93538       1491.51       1498.44    
  50  0.613869     -0.487974      -62.7127       62.7127       1713.55       1776.27    
  51  0.303056      -1.19384      -153.428       153.428       1405.15       1558.58    
  52  0.749186     -0.288769      -37.1115       37.1115       1770.52       1807.63    
  53  0.671119E-01  -2.70139      -347.174       347.174       1758.00       2105.17    
  54  0.545553E-02  -5.21113      -669.715       669.715       1764.73       2434.45    
  55  0.866985     -0.142734      -18.3436       18.3436       1716.14       1734.48    
  56  0.622088     -0.474673      -61.0034       61.0034       1500.10       1561.10    
  57  0.471050     -0.752790      -96.7460       96.7460       1441.50       1538.25    
  58  0.433456     -0.835964      -107.435       107.435       1730.88       1838.32    
  59  0.946573     -0.549070E-01  -7.05645       7.05645       1445.36       1452.41    
  60  0.795665     -0.228577      -29.3759       29.3759       1718.33       1747.70    
  61  0.536872E-01  -2.92458      -375.857       375.857       1733.08       2108.93    
  62  0.761403     -0.272592      -35.0326       35.0326       1808.05       1843.09    
  63  0.615271     -0.485692      -62.4194       62.4194       1663.06       1725.48    
  64  0.585500     -0.535288      -68.7934       68.7934       1946.17       2014.96    
loop,thermsimp(1:2)       20   149.749       130.451    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238       1383.55         69.12          1.23         40.30          0.56          0.05        111.27
Just calling func    0   0        111.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1383.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       20
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       21
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      237     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -151.685       151.685       1187.13       1338.82    
   2  0.575213     -0.553015      -71.0715       71.0715       1309.63       1380.71    
   3  0.632244     -0.458480      -58.9222       58.9222       1312.30       1371.22    
   4  0.819203     -0.199424      -25.6292       25.6292       1339.96       1365.59    
   5  0.137693E-02  -6.58790      -846.653       846.653       1215.97       2062.62    
   6  0.367814      -1.00018      -128.539       128.539       1365.09       1493.63    
   7  0.452636     -0.792666      -101.871       101.871       1268.80       1370.67    
   8  0.278102      -1.27977      -164.471       164.471       1364.08       1528.55    
   9  0.417803     -0.872745      -112.162       112.162       1262.61       1374.77    
  10  0.682140     -0.382521      -49.1603       49.1603       1284.76       1333.92    
  11  0.204733      -1.58605      -203.833       203.833       1374.13       1577.96    
  12  0.637442     -0.450292      -57.8700       57.8700       1410.23       1468.10    
  13  0.114518      -2.16702      -278.498       278.498       1425.50       1704.00    
  14  0.724207     -0.322678      -41.4695       41.4695       1358.23       1399.70    
  15  0.461399     -0.773492      -99.4065       99.4065       1445.36       1544.76    
  16  0.731739     -0.312332      -40.1398       40.1398       1438.65       1478.79    
  17  0.773272     -0.257124      -33.0447       33.0447       1360.24       1393.29    
  18  0.789195     -0.236742      -30.4253       30.4253       1256.72       1287.14    
  19  0.762001     -0.271807      -34.9317       34.9317       1341.38       1376.31    
  20  0.933384     -0.689386E-01  -8.85974       8.85974       1448.36       1457.22    
  21  0.694037     -0.365230      -46.9381       46.9381       1456.76       1503.70    
  22  0.423570     -0.859038      -110.400       110.400       1491.51       1601.91    
  23  0.272919      -1.29858      -166.889       166.889       1474.69       1641.58    
  24  0.535843     -0.623914      -80.1833       80.1833       1441.50       1521.69    
  25  0.902288     -0.102822      -13.2143       13.2143       1354.87       1368.08    
  26  0.479374     -0.735275      -94.4949       94.4949       1469.94       1564.44    
  27  0.494900E-01  -3.00599      -386.319       386.319       1405.15       1791.47    
  28  0.921867     -0.813539E-01  -10.4553       10.4553       1500.10       1510.55    
  29  0.132425      -2.02174      -259.826       259.826       1365.33       1625.15    
  30  0.640539     -0.445446      -57.2471       57.2471       1508.93       1566.18    
  31  0.215363      -1.53543      -197.328       197.328       1535.33       1732.66    
  32  0.437204E-01  -3.12994      -402.249       402.249       1552.58       1954.83    
  33  0.166028      -1.79560      -230.764       230.764       1449.54       1680.30    
  34  0.425825     -0.853727      -109.718       109.718       1597.26       1706.98    
  35  0.810393     -0.210235      -27.0187       27.0187       1456.43       1483.45    
  36  0.855958     -0.155534      -19.9887       19.9887       1548.55       1568.54    
  37  0.830452     -0.185786      -23.8765       23.8765       1590.44       1614.31    
  38  0.658784     -0.417359      -53.6376       53.6376       1453.78       1507.42    
  39  0.910965     -0.932509E-01  -11.9843       11.9843       1504.39       1516.38    
  40  0.603480     -0.505043      -64.9063       64.9063       1584.73       1649.64    
  41  0.702610     -0.352953      -45.3603       45.3603       1631.36       1676.72    
  42  0.329065      -1.11150      -142.846       142.846       1663.06       1805.91    
  43  0.790497     -0.235094      -30.2134       30.2134       1518.51       1548.73    
  44  0.641572     -0.443834      -57.0399       57.0399       1577.53       1634.57    
  45  0.650683     -0.429733      -55.2278       55.2278       1716.14       1771.36    
  46  0.194049E-02  -6.24481      -802.562       802.562       1718.33       2520.89    
  47  0.662053     -0.412409      -53.0014       53.0014       1494.23       1547.23    
  48  0.294846      -1.22130      -156.957       156.957       1713.55       1870.51    
  49  0.709874     -0.342668      -44.0385       44.0385       1553.35       1597.39    
  50  0.700314     -0.356226      -45.7809       45.7809       1770.52       1816.30    
  51  0.639811E-01  -2.74917      -353.313       353.313       1765.98       2119.29    
  52  0.251451      -1.38051      -177.418       177.418       1739.04       1916.46    
  53  0.828691     -0.187907      -24.1492       24.1492       1730.88       1755.03    
  54  0.962710     -0.380034E-01  -4.88407       4.88407       1808.05       1812.94    
  55  0.429583     -0.844940      -108.589       108.589       1703.70       1812.29    
  56  0.871108     -0.137990      -17.7340       17.7340       1576.52       1594.25    
  57  0.328516      -1.11317      -143.061       143.061       1489.44       1632.50    
  58  0.401423     -0.912741      -117.302       117.302       1528.44       1645.74    
  59  0.671285     -0.398562      -51.2218       51.2218       1539.50       1590.72    
  60  0.919587     -0.838302E-01  -10.7736       10.7736       1946.17       1956.94    
  61  0.209634      -1.56239      -200.793       200.793       1561.64       1762.44    
  62  0.894137     -0.111896      -14.3805       14.3805       1758.00       1772.38    
  63  0.623590     -0.472262      -60.6935       60.6935       1733.08       1793.77    
  64  0.469722     -0.755615      -97.1089       97.1089       1383.55       1480.66    
loop,thermsimp(1:2)       21   151.685       71.0715    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       1397.65         68.57          1.12         40.69          0.72          0.05        111.14
Just calling func    0   0        111.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1397.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       21
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       22
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      238     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -22.5759       22.5759       1256.72       1279.29    
   2  0.801853     -0.220830      -28.3803       28.3803       1284.76       1313.14    
   3  0.768645     -0.263126      -33.8160       33.8160       1187.13       1220.95    
   4  0.855557     -0.156003      -20.0489       20.0489       1339.96       1360.01    
   5  0.845591     -0.167720      -21.5548       21.5548       1354.87       1376.42    
   6  0.350050      -1.04968      -134.901       134.901       1268.80       1403.70    
   7  0.927608     -0.751463E-01  -9.65753       9.65753       1312.30       1321.96    
   8  0.655345E-01  -2.72518      -350.230       350.230       1262.61       1612.84    
   9  0.355481      -1.03428      -132.923       132.923       1341.38       1474.30    
  10  0.728523     -0.316737      -40.7059       40.7059       1309.63       1350.34    
  11  0.573220     -0.556486      -71.5176       71.5176       1360.24       1431.76    
  12  0.112478      -2.18499      -280.808       280.808       1358.23       1639.03    
  13  0.338739      -1.08253      -139.122       139.122       1448.36       1587.48    
  14  0.239648      -1.42858      -183.596       183.596       1410.23       1593.83    
  15  0.918959     -0.845134E-01  -10.8614       10.8614       1438.65       1449.51    
  16  0.283771      -1.25959      -161.878       161.878       1383.55       1545.43    
  17  0.414404     -0.880913      -113.212       113.212       1456.43       1569.64    
  18  0.716403     -0.333512      -42.8618       42.8618       1365.09       1407.96    
  19  0.317726      -1.14657      -147.353       147.353       1456.76       1604.11    
  20  0.339005      -1.08174      -139.021       139.021       1453.78       1592.80    
  21  0.163059      -1.81364      -233.083       233.083       1500.10       1733.18    
  22  0.477081     -0.740069      -95.1110       95.1110       1504.39       1599.50    
  23  0.105851      -2.24573      -288.613       288.613       1441.50       1730.12    
  24  0.840431     -0.173840      -22.3413       22.3413       1364.08       1386.42    
  25  0.235315      -1.44683      -185.942       185.942       1445.36       1631.30    
  26  0.865464     -0.144489      -18.5693       18.5693       1494.23       1512.80    
  27  0.909462     -0.949026E-01  -12.1965       12.1965       1518.51       1530.71    
  28  0.152105E-01  -4.18577      -537.940       537.940       1469.94       2007.88    
  29  0.962485     -0.382371E-01  -4.91410       4.91410       1508.93       1513.85    
  30  0.259410      -1.34934      -173.413       173.413       1548.55       1721.97    
  31  0.364880      -1.00819      -129.569       129.569       1374.13       1503.70    
  32  0.467235     -0.760923      -97.7911       97.7911       1539.50       1637.29    
  33  0.844908     -0.168527      -21.6585       21.6585       1576.52       1598.18    
  34  0.188232      -1.67008      -214.633       214.633       1553.35       1767.98    
  35  0.496585     -0.700000      -89.9615       89.9615       1491.51       1581.47    
  36  0.410505     -0.890367      -114.427       114.427       1590.44       1704.86    
  37  0.533875     -0.627594      -80.6561       80.6561       1365.33       1445.98    
  38  0.610668     -0.493202      -63.3845       63.3845       1489.44       1552.82    
  39  0.241933      -1.41910      -182.377       182.377       1577.53       1759.91    
  40  0.642629     -0.442188      -56.8284       56.8284       1474.69       1531.52    
  41  0.775072     -0.254799      -32.7459       32.7459       1528.44       1561.18    
  42  0.345343      -1.06322      -136.641       136.641       1584.73       1721.37    
  43  0.844097     -0.169488      -21.7820       21.7820       1631.36       1653.14    
  44  0.426886     -0.851239      -109.398       109.398       1449.54       1558.94    
  45  0.594109     -0.520693      -66.9176       66.9176       1425.50       1492.42    
  46  0.489527     -0.714316      -91.8014       91.8014       1597.26       1689.07    
  47  0.313882      -1.15874      -148.917       148.917       1535.33       1684.25    
  48  0.687066     -0.375325      -48.2355       48.2355       1730.88       1779.12    
  49  0.394505     -0.930124      -119.536       119.536       1561.64       1681.18    
  50  0.971200     -0.292233E-01  -3.75567       3.75567       1716.14       1719.89    
  51  0.916939     -0.867145E-01  -11.1442       11.1442       1758.00       1769.14    
  52  0.968457     -0.320511E-01  -4.11910       4.11910       1405.15       1409.27    
  53  0.437414     -0.826876      -106.267       106.267       1733.08       1839.34    
  54  0.647516     -0.434611      -55.8547       55.8547       1663.06       1718.92    
  55  0.181293      -1.70764      -219.460       219.460       1703.70       1923.16    
  56  0.836714     -0.178273      -22.9110       22.9110       1808.05       1830.96    
  57  0.940459     -0.613876E-01  -7.88931       7.88931       1770.52       1778.41    
  58  0.141896      -1.95266      -250.949       250.949       1713.55       1964.50    
  59  0.111323      -2.19532      -282.135       282.135       1739.04       2021.17    
  60  0.721494E-01  -2.62902      -337.872       337.872       1552.58       1890.45    
  61  0.618358     -0.480687      -61.7762       61.7762       1946.17       2007.94    
  62  0.825766     -0.191444      -24.6037       24.6037       1215.97       1240.57    
  63  0.438611     -0.824143      -105.916       105.916       1765.98       1871.89    
  64  0.158533      -1.84179      -236.700       236.700       1397.65       1634.35    
loop,thermsimp(1:2)       22   22.5759       28.3803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       1238.67         69.15          1.25         40.51          0.04          0.05        110.99
Just calling func    0   0        110.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241       1621.43         68.96          1.22         40.53          0.17          0.05        110.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    1621.4       0.5482     -4.682      4.332     -102.6    -0.4843    
                     -0.6818      1.280     -99.70      5.791     0.4828    

                      0.5753     0.1204E-01  2.493      8971.      7000.    

                      -1.677      0.000      0.000      0.000     -1.221    



                      -1.878      0.000      0.000      7000.     -556.2    

                      -1.164     -2.524     -10.83     -1.460      4.556    

                      -8.646     -3.949      7186.      0.000     0.1149E+05



                       2040.     0.1025E+05  8949.      5168.      480.7    

                      -935.6     0.3315     0.3803     0.1948     0.3364    

                     -0.2486     0.2720     0.3655     0.3927     0.2074E-01



                      -1.248    -0.1342      0.000    -0.1120     0.4934E-01

                      0.2245     0.2026    -0.7116     0.3787     0.4620    

                      0.1737E-01 0.2727    -0.6537     -1.833      7000.    



                      -2.166     -1.412     -2.270     -2.357    -0.3807    

                     -0.3252      9.383      8.804    -0.1668E+05 -6.159    

                       0.000      0.000      9.173      8.669    -0.1969E+05



                      -6.000      0.000      0.000      8.818      9.223    

                     -0.1944E+05 -6.000      0.000      0.000      9.183    

                       8.924    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1238.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       22
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       23
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      240     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -21.1353       21.1353       1187.13       1208.27    
   2  0.848474     -0.164316      -21.1173       21.1173       1215.97       1237.09    
   3  0.146795      -1.91872      -246.587       246.587       1256.72       1503.31    
   4  0.398624     -0.919738      -118.201       118.201       1284.76       1402.96    
   5  0.888093     -0.118679      -15.2522       15.2522       1312.30       1327.55    
   6  0.475009     -0.744421      -95.6704       95.6704       1309.63       1405.31    
   7  0.120824      -2.11342      -271.609       271.609       1339.96       1611.57    
   8  0.270052      -1.30914      -168.246       168.246       1354.87       1523.12    
   9  0.201748E-01  -3.90332      -501.641       501.641       1364.08       1865.72    
  10  0.999386     -0.614559E-03 -0.789809E-01  0.789809E-01   1268.80       1268.88    
  11  0.212655      -1.54808      -198.954       198.954       1365.09       1564.05    
  12  0.197911      -1.61994      -208.189       208.189       1405.15       1613.34    
  13  0.786394     -0.240297      -30.8822       30.8822       1360.24       1391.12    
  14  0.781263     -0.246844      -31.7235       31.7235       1365.33       1397.05    
  15  0.788011     -0.238244      -30.6182       30.6182       1438.65       1469.27    
  16  0.956387     -0.445927E-01  -5.73089       5.73089       1341.38       1347.11    
  17  0.717415     -0.332100      -42.6804       42.6804       1425.50       1468.18    
  18  0.808756     -0.212258      -27.2786       27.2786       1374.13       1401.41    
  19  0.756838     -0.278606      -35.8055       35.8055       1494.23       1530.03    
  20  0.570684     -0.560919      -72.0874       72.0874       1508.93       1581.02    
  21  0.946031     -0.554796E-01  -7.13005       7.13005       1518.51       1525.64    
  22  0.678634E-01  -2.69026      -345.742       345.742       1474.69       1820.44    
  23  0.631502     -0.459654      -59.0731       59.0731       1383.55       1442.62    
  24  0.114784E-01  -4.46729      -574.120       574.120       1489.44       2063.56    
  25  0.549681     -0.598417      -76.9065       76.9065       1449.54       1526.44    
  26  0.846433     -0.166725      -21.4269       21.4269       1528.44       1549.87    
  27  0.441841     -0.816805      -104.973       104.973       1456.43       1561.41    
  28  0.299100      -1.20698      -155.116       155.116       1491.51       1646.62    
  29  0.378130     -0.972517      -124.984       124.984       1448.36       1573.34    
  30  0.830469     -0.185764      -23.8738       23.8738       1453.78       1477.65    
  31  0.675108     -0.392883      -50.4920       50.4920       1410.23       1460.73    
  32  0.997619     -0.238377E-02 -0.306353      0.306353       1576.52       1576.83    
  33  0.897623     -0.108005      -13.8804       13.8804       1504.39       1518.27    
  34  0.591811E-01  -2.82715      -363.336       363.336       1456.76       1820.10    
  35  0.229825      -1.47044      -188.975       188.975       1262.61       1451.59    
  36  0.654017     -0.424622      -54.5710       54.5710       1445.36       1499.93    
  37  0.305777      -1.18490      -152.279       152.279       1397.65       1549.92    
  38  0.936135     -0.659954E-01  -8.48150       8.48150       1539.50       1547.98    
  39  0.698153     -0.359317      -46.1781       46.1781       1358.23       1404.40    
  40  0.829975     -0.186360      -23.9504       23.9504       1631.36       1655.31    
  41  0.951351     -0.498721E-01  -6.40938       6.40938       1561.64       1568.05    
  42  0.883299     -0.124092      -15.9479       15.9479       1535.33       1551.28    
  43  0.910087     -0.942154E-01  -12.1082       12.1082       1597.26       1609.37    
  44  0.590840     -0.526210      -67.6266       67.6266       1590.44       1658.06    
  45  0.146785      -1.91879      -246.596       246.596       1663.06       1909.66    
  46  0.830381E-01  -2.48846      -319.808       319.808       1716.14       2035.94    
  47  0.289482      -1.23966      -159.317       159.317       1584.73       1744.05    
  48  0.594462     -0.520098      -66.8412       66.8412       1548.55       1615.40    
  49  0.241311      -1.42167      -182.708       182.708       1441.50       1624.21    
  50  0.612368     -0.490422      -63.0273       63.0273       1500.10       1563.13    
  51  0.952207     -0.489727E-01  -6.29380       6.29380       1577.53       1583.82    
  52  0.857144     -0.154149      -19.8107       19.8107       1553.35       1573.16    
  53  0.221746      -1.50622      -193.574       193.574       1758.00       1951.57    
  54  0.874757     -0.133809      -17.1967       17.1967       1770.52       1787.72    
  55  0.474241     -0.746040      -95.8784       95.8784       1730.88       1826.76    
  56  0.679995E-01  -2.68826      -345.485       345.485       1808.05       2153.54    
  57  0.276977      -1.28382      -164.992       164.992       1733.08       1898.07    
  58  0.308562      -1.17583      -151.114       151.114       1765.98       1917.09    
  59  0.910099     -0.942023E-01  -12.1065       12.1065       1552.58       1564.68    
  60  0.189281      -1.66452      -213.919       213.919       1703.70       1917.62    
  61  0.759386     -0.275245      -35.3735       35.3735       1713.55       1748.93    
  62  0.464823     -0.766099      -98.4564       98.4564       1469.94       1568.40    
  63  0.428490     -0.847488      -108.916       108.916       1946.17       2055.08    
  64  0.377334     -0.974624      -125.255       125.255       1238.67       1363.92    
loop,thermsimp(1:2)       23   21.1353       21.1173    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       1690.37         69.37          1.24         40.13          0.34          0.05        111.13
Just calling func    0   0        111.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1690.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       23
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       24
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      241     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -293.343       293.343       1187.13       1480.48    
   2  0.372115     -0.988552      -127.045       127.045       1215.97       1343.02    
   3  0.732875     -0.310780      -39.9404       39.9404       1268.80       1308.74    
   4  0.341646      -1.07398      -138.024       138.024       1312.30       1450.32    
   5  0.406512     -0.900141      -115.683       115.683       1341.38       1457.06    
   6  0.271848      -1.30251      -167.394       167.394       1238.67       1406.06    
   7  0.738418     -0.303245      -38.9719       38.9719       1360.24       1399.21    
   8  0.903199     -0.101813      -13.0846       13.0846       1365.33       1378.41    
   9  0.511789     -0.669842      -86.0857       86.0857       1374.13       1460.21    
  10  0.202674      -1.59616      -205.133       205.133       1284.76       1489.89    
  11  0.325695      -1.12179      -144.169       144.169       1358.23       1502.40    
  12  0.719720     -0.328893      -42.2682       42.2682       1309.63       1351.90    
  13  0.715609     -0.334622      -43.0044       43.0044       1383.55       1426.55    
  14  0.973328     -0.270339E-01  -3.47430       3.47430       1262.61       1266.09    
  15  0.373998     -0.983504      -126.397       126.397       1410.23       1536.63    
  16  0.977965     -0.222815E-01  -2.86354       2.86354       1425.50       1428.37    
  17  0.105495      -2.24909      -289.045       289.045       1438.65       1727.70    
  18  0.729809     -0.314973      -40.4792       40.4792       1453.78       1494.26    
  19  0.378008     -0.972839      -125.026       125.026       1445.36       1570.38    
  20  0.678326     -0.388127      -49.8807       49.8807       1256.72       1306.60    
  21  0.671993     -0.397507      -51.0863       51.0863       1504.39       1555.48    
  22  0.515926     -0.661792      -85.0512       85.0512       1354.87       1439.92    
  23  0.363490      -1.01200      -130.059       130.059       1518.51       1648.57    
  24  0.206319      -1.57833      -202.841       202.841       1449.54       1652.38    
  25  0.755157E-01  -2.58341      -332.011       332.011       1494.23       1826.24    
  26  0.413763     -0.882461      -113.411       113.411       1539.50       1652.91    
  27  0.279023      -1.27646      -164.046       164.046       1528.44       1692.49    
  28  0.506422     -0.680385      -87.4407       87.4407       1397.65       1485.09    
  29  0.643082E-02  -5.04665      -648.578       648.578       1535.33       2183.91    
  30  0.285888E-01  -3.55474      -456.843       456.843       1456.43       1913.28    
  31  0.660419     -0.414880      -53.3189       53.3189       1500.10       1553.42    
  32  0.739369     -0.301959      -38.8067       38.8067       1365.09       1403.90    
  33  0.270269      -1.30834      -168.143       168.143       1552.58       1720.72    
  34  0.663889     -0.409640      -52.6455       52.6455       1561.64       1614.29    
  35  0.898739E-01  -2.40935      -309.641       309.641       1469.94       1779.58    
  36  0.832427     -0.183410      -23.5712       23.5712       1553.35       1576.92    
  37  0.723106     -0.324200      -41.6651       41.6651       1448.36       1490.02    
  38  0.986274     -0.138207E-01  -1.77619       1.77619       1576.52       1578.30    
  39  0.812861     -0.207195      -26.6280       26.6280       1508.93       1535.56    
  40  0.553236     -0.591971      -76.0780       76.0780       1577.53       1653.61    
  41  0.693785E-01  -2.66818      -342.905       342.905       1597.26       1940.17    
  42  0.117256      -2.14340      -275.462       275.462       1339.96       1615.43    
  43  0.807809     -0.213430      -27.4292       27.4292       1405.15       1432.58    
  44  0.900249     -0.105084      -13.5050       13.5050       1548.55       1562.06    
  45  0.753470     -0.283066      -36.3786       36.3786       1441.50       1477.88    
  46  0.127159      -2.06232      -265.042       265.042       1491.51       1756.55    
  47  0.535389     -0.624762      -80.2922       80.2922       1631.36       1711.65    
  48  0.957281     -0.436582E-01  -5.61079       5.61079       1590.44       1596.05    
  49  0.227700      -1.47973      -190.169       190.169       1584.73       1774.90    
  50  0.636404     -0.451921      -58.0793       58.0793       1713.55       1771.63    
  51  0.905015     -0.998042E-01  -12.8265       12.8265       1770.52       1783.35    
  52  0.555191     -0.588444      -75.6247       75.6247       1456.76       1532.39    
  53  0.687780     -0.374286      -48.1020       48.1020       1474.69       1522.79    
  54  0.759422E-01  -2.57778      -331.288       331.288       1730.88       2062.17    
  55  0.374598     -0.981902      -126.191       126.191       1364.08       1490.27    
  56  0.399521     -0.917488      -117.912       117.912       1733.08       1850.99    
  57  0.997363     -0.264016E-02 -0.339304      0.339304       1663.06       1663.40    
  58  0.164658      -1.80389      -231.829       231.829       1765.98       1997.81    
  59  0.697359     -0.360454      -46.3243       46.3243       1703.70       1750.03    
  60  0.822795     -0.195048      -25.0669       25.0669       1758.00       1783.07    
  61  0.755086     -0.280923      -36.1033       36.1033       1716.14       1752.24    
  62  0.912857     -0.911765E-01  -11.7177       11.7177       1946.17       1957.89    
  63  0.891590     -0.114749      -14.7472       14.7472       1489.44       1504.19    
  64  0.461859     -0.772496      -99.2785       99.2785       1690.37       1789.65    
loop,thermsimp(1:2)       24   293.343       127.045    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243       1549.85         69.17          1.23         40.62          0.17          0.05        111.24
Just calling func    0   0        111.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244       2741.58         69.13          1.23         40.44          0.04          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1549.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       24
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       25
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      243     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -4.87443       4.87443       1262.61       1267.49    
   2  0.355374      -1.03458      -132.961       132.961       1256.72       1389.68    
   3  0.294461      -1.22261      -157.125       157.125       1268.80       1425.93    
   4  0.644538     -0.439222      -56.4472       56.4472       1215.97       1272.42    
   5  0.741622     -0.298915      -38.4155       38.4155       1309.63       1348.05    
   6  0.805913E-01  -2.51837      -323.651       323.651       1365.33       1688.98    
   7  0.498180     -0.696794      -89.5495       89.5495       1360.24       1449.79    
   8  0.771004     -0.260061      -33.4221       33.4221       1365.09       1398.52    
   9  0.753480     -0.283053      -36.3769       36.3769       1238.67       1275.04    
  10  0.460525     -0.775387      -99.6500       99.6500       1383.55       1483.20    
  11  0.918626     -0.848759E-01  -10.9080       10.9080       1425.50       1436.41    
  12  0.355379      -1.03457      -132.959       132.959       1405.15       1538.11    
  13  0.664646     -0.408501      -52.4991       52.4991       1354.87       1407.37    
  14  0.328018      -1.11469      -143.256       143.256       1312.30       1455.55    
  15  0.529583     -0.635665      -81.6934       81.6934       1341.38       1423.07    
  16  0.259823      -1.34775      -173.208       173.208       1374.13       1547.34    
  17  0.463690E-01  -3.07112      -394.690       394.690       1441.50       1836.19    
  18  0.366509      -1.00373      -128.996       128.996       1187.13       1316.13    
  19  0.794534     -0.229999      -29.5587       29.5587       1397.65       1427.20    
  20  0.669373     -0.401413      -51.5882       51.5882       1284.76       1336.35    
  21  0.798901     -0.224518      -28.8543       28.8543       1448.36       1477.21    
  22  0.610403     -0.493636      -63.4404       63.4404       1364.08       1427.52    
  23  0.267818      -1.31745      -169.314       169.314       1453.78       1623.09    
  24  0.663049     -0.410906      -52.8082       52.8082       1358.23       1411.03    
  25  0.782871     -0.244788      -31.4593       31.4593       1489.44       1520.90    
  26  0.706545     -0.347368      -44.6425       44.6425       1474.69       1519.34    
  27  0.120119      -2.11927      -272.361       272.361       1456.76       1729.12    
  28  0.270575      -1.30721      -167.998       167.998       1508.93       1676.93    
  29  0.505391     -0.682422      -87.7025       87.7025       1410.23       1497.94    
  30  0.665734     -0.406865      -52.2888       52.2888       1500.10       1552.39    
  31  0.836788     -0.178185      -22.8997       22.8997       1504.39       1527.29    
  32  0.866983     -0.142736      -18.3439       18.3439       1548.55       1566.90    
  33  0.552904     -0.592571      -76.1551       76.1551       1445.36       1521.51    
  34  0.554153     -0.590314      -75.8651       75.8651       1553.35       1629.22    
  35  0.592407E-01  -2.82615      -363.206       363.206       1576.52       1939.73    
  36  0.902163     -0.102960      -13.2320       13.2320       1590.44       1603.67    
  37  0.266638E-01  -3.62445      -465.801       465.801       1561.64       2027.44    
  38  0.897053     -0.108640      -13.9620       13.9620       1339.96       1353.93    
  39  0.840496     -0.173763      -22.3314       22.3314       1518.51       1540.85    
  40  0.288358      -1.24355      -159.817       159.817       1449.54       1609.35    
  41  0.835972E-01  -2.48175      -318.945       318.945       1539.50       1858.45    
  42  0.412070     -0.886563      -113.938       113.938       1577.53       1691.47    
  43  0.725010     -0.321570      -41.3270       41.3270       1663.06       1704.39    
  44  0.316556      -1.15026      -147.827       147.827       1528.44       1676.27    
  45  0.486178     -0.721181      -92.6837       92.6837       1631.36       1724.04    
  46  0.143341      -1.94253      -249.647       249.647       1552.58       1802.22    
  47  0.956913     -0.440430E-01  -5.66025       5.66025       1438.65       1444.31    
  48  0.362697      -1.01419      -130.340       130.340       1703.70       1834.04    
  49  0.951746     -0.494572E-01  -6.35607       6.35607       1716.14       1722.49    
  50  0.511140     -0.671112      -86.2489       86.2489       1491.51       1577.76    
  51  0.364891E-01  -3.31074      -425.485       425.485       1713.55       2139.04    
  52  0.377076     -0.975308      -125.343       125.343       1584.73       1710.07    
  53  0.670030E-01  -2.70302      -347.382       347.382       1469.94       1817.32    
  54  0.448832     -0.801107      -102.955       102.955       1758.00       1860.95    
  55  0.252392      -1.37677      -176.938       176.938       1770.52       1947.46    
  56  0.910592     -0.936608E-01  -12.0370       12.0370       1690.37       1702.41    
  57  0.801917     -0.220751      -28.3701       28.3701       1494.23       1522.60    
  58  0.473432     -0.747746      -96.0977       96.0977       1733.08       1829.17    
  59  0.431618     -0.840214      -107.981       107.981       1456.43       1564.41    
  60  0.886774     -0.120166      -15.4433       15.4433       1597.26       1612.71    
  61  0.880132     -0.127683      -16.4094       16.4094       1946.17       1962.58    
  62  0.962190     -0.385439E-01  -4.95352       4.95352       1765.98       1770.93    
  63  0.618144     -0.481034      -61.8207       61.8207       1730.88       1792.70    
  64  0.169887      -1.77262      -227.811       227.811       1549.85       1777.66    
loop,thermsimp(1:2)       25   4.87443       132.961    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       1269.33         69.21          1.23         40.05          0.56          0.05        111.10
Just calling func    0   0        111.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246       1722.37         68.56          1.12         40.37          0.74          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1269.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       25
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       26
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      245     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -1.61351       1.61351       1262.61       1264.23    
   2  0.516099     -0.661457      -85.0081       85.0081       1215.97       1300.98    
   3  0.202206      -1.59847      -205.430       205.430       1238.67       1444.10    
   4  0.240260      -1.42603      -183.269       183.269       1187.13       1370.40    
   5  0.717263E-01  -2.63490      -338.628       338.628       1284.76       1623.39    
   6  0.395382     -0.927902      -119.251       119.251       1309.63       1428.89    
   7  0.494348     -0.704516      -90.5420       90.5420       1339.96       1430.51    
   8  0.970815     -0.296196E-01  -3.80661       3.80661       1256.72       1260.53    
   9  0.992795     -0.723105E-02 -0.929310      0.929310       1365.09       1366.02    
  10  0.387320     -0.948503      -121.898       121.898       1354.87       1476.77    
  11  0.586568     -0.533466      -68.5592       68.5592       1358.23       1426.79    
  12  0.119144      -2.12742      -273.409       273.409       1341.38       1614.79    
  13  0.145144      -1.93003      -248.040       248.040       1268.80       1516.84    
  14  0.767931     -0.264056      -33.9355       33.9355       1397.65       1431.58    
  15  0.415014     -0.879442      -113.023       113.023       1364.08       1477.11    
  16  0.994477     -0.553801E-02 -0.711725      0.711725       1425.50       1426.22    
  17  0.757243     -0.278071      -35.7367       35.7367       1438.65       1474.39    
  18  0.669290     -0.401537      -51.6042       51.6042       1360.24       1411.85    
  19  0.112026      -2.18903      -281.326       281.326       1312.30       1593.62    
  20  0.434244     -0.834148      -107.202       107.202       1448.36       1555.56    
  21  0.491828     -0.709627      -91.1987       91.1987       1383.55       1474.75    
  22  0.517535     -0.658677      -84.6509       84.6509       1410.23       1494.88    
  23  0.411147     -0.888804      -114.226       114.226       1474.69       1588.92    
  24  0.250164      -1.38564      -178.077       178.077       1489.44       1667.52    
  25  0.109742E-01  -4.51221      -579.893       579.893       1445.36       2025.25    
  26  0.559459     -0.580786      -74.6405       74.6405       1494.23       1568.87    
  27  0.289677      -1.23899      -159.230       159.230       1504.39       1663.62    
  28  0.835809     -0.179356      -23.0502       23.0502       1405.15       1428.20    
  29  0.236182      -1.44315      -185.469       185.469       1518.51       1703.98    
  30  0.700988     -0.355264      -45.6573       45.6573       1374.13       1419.78    
  31  0.886914     -0.120007      -15.4229       15.4229       1500.10       1515.52    
  32  0.182911      -1.69875      -218.318       218.318       1456.43       1674.75    
  33  0.693089     -0.366597      -47.1138       47.1138       1548.55       1595.67    
  34  0.108523      -2.22079      -285.408       285.408       1491.51       1776.91    
  35  0.141600      -1.95475      -251.217       251.217       1590.44       1841.65    
  36  0.168348E-01  -4.08431      -524.901       524.901       1449.54       1974.44    
  37  0.419419E-01  -3.17147      -407.586       407.586       1597.26       2004.85    
  38  0.244896      -1.40692      -180.813       180.813       1453.78       1634.59    
  39  0.360662      -1.01981      -131.063       131.063       1553.35       1684.41    
  40  0.927013     -0.757879E-01  -9.73999       9.73999       1528.44       1538.18    
  41  0.869067     -0.140335      -18.0353       18.0353       1508.93       1526.97    
  42  0.827083     -0.189851      -24.3989       24.3989       1365.33       1389.73    
  43  0.928403     -0.742893E-01  -9.54740       9.54740       1577.53       1587.08    
  44  0.513193     -0.667103      -85.7338       85.7338       1690.37       1776.11    
  45  0.809080     -0.211858      -27.2272       27.2272       1663.06       1690.29    
  46  0.341224E-02  -5.68039      -730.023       730.023       1584.73       2314.75    
  47  0.734431     -0.308659      -39.6678       39.6678       1716.14       1755.80    
  48  0.688454     -0.373307      -47.9761       47.9761       1631.36       1679.33    
  49  0.990614     -0.943067E-02  -1.21200       1.21200       1456.76       1457.97    
  50  0.143408      -1.94206      -249.587       249.587       1765.98       2015.56    
  51  0.868596     -0.140878      -18.1051       18.1051       1549.85       1567.96    
  52  0.244103      -1.41016      -181.229       181.229       1730.88       1912.11    
  53  0.207986      -1.57029      -201.807       201.807       1552.58       1754.38    
  54  0.426578E-01  -3.15455      -405.411       405.411       1469.94       1875.35    
  55  0.111938      -2.18981      -281.427       281.427       1733.08       2014.50    
  56  0.304345      -1.18959      -152.882       152.882       1703.70       1856.59    
  57  0.911041     -0.931671E-01  -11.9735       11.9735       1441.50       1453.48    
  58  0.144299      -1.93587      -248.791       248.791       1539.50       1788.29    
  59  0.306010      -1.18414      -152.181       152.181       1758.00       1910.18    
  60  0.633032     -0.457234      -58.7621       58.7621       1576.52       1635.28    
  61  0.737469E-02  -4.90970      -630.977       630.977       1770.52       2401.50    
  62  0.794623     -0.229887      -29.5442       29.5442       1946.17       1975.71    
  63  0.200033      -1.60927      -206.818       206.818       1561.64       1768.46    
  64  0.543825     -0.609128      -78.2830       78.2830       1269.33       1347.61    
loop,thermsimp(1:2)       26   1.61351       85.0081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       1270.13         68.60          1.13         40.63          0.61          0.05        111.03
Just calling func    0   0        111.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248       2038.40         68.46          1.13         40.67          0.45          0.05        110.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1270.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       26
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       27
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      247     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -207.091       207.091       1256.72       1463.81    
   2  0.983274     -0.168677E-01  -2.16777       2.16777       1262.61       1264.78    
   3  0.569108     -0.563685      -72.4428       72.4428       1215.97       1288.41    
   4  0.411179     -0.888728      -114.216       114.216       1269.33       1383.54    
   5  0.889241     -0.117387      -15.0861       15.0861       1365.09       1380.18    
   6  0.109537      -2.21149      -284.214       284.214       1187.13       1471.35    
   7  0.658027     -0.418509      -53.7854       53.7854       1365.33       1419.11    
   8  0.427534     -0.849722      -109.203       109.203       1360.24       1469.44    
   9  0.277803      -1.28084      -164.609       164.609       1374.13       1538.74    
  10  0.568421     -0.564892      -72.5980       72.5980       1425.50       1498.10    
  11  0.368489     -0.998346      -128.304       128.304       1358.23       1486.53    
  12  0.100945E-01  -4.59576      -590.631       590.631       1405.15       1995.78    
  13  0.811445     -0.208939      -26.8521       26.8521       1309.63       1336.49    
  14  0.135138      -2.00146      -257.220       257.220       1339.96       1597.18    
  15  0.600340     -0.510258      -65.5766       65.5766       1397.65       1463.22    
  16  0.537538     -0.620755      -79.7773       79.7773       1238.67       1318.45    
  17  0.923261     -0.798434E-01  -10.2612       10.2612       1441.50       1451.77    
  18  0.296505      -1.21569      -156.237       156.237       1456.76       1613.00    
  19  0.975666     -0.246348E-01  -3.16598       3.16598       1438.65       1441.82    
  20  0.102971      -2.27331      -292.158       292.158       1383.55       1675.71    
  21  0.110137      -2.20603      -283.511       283.511       1354.87       1638.38    
  22  0.874539     -0.134058      -17.2287       17.2287       1364.08       1381.31    
  23  0.887507     -0.119339      -15.3371       15.3371       1410.23       1425.57    
  24  0.811767     -0.208543      -26.8011       26.8011       1500.10       1526.90    
  25  0.304283      -1.18980      -152.908       152.908       1268.80       1421.71    
  26  0.304144      -1.19025      -152.967       152.967       1508.93       1661.90    
  27  0.854538     -0.157194      -20.2020       20.2020       1528.44       1548.64    
  28  0.543001     -0.610645      -78.4779       78.4779       1448.36       1526.84    
  29  0.808766     -0.212246      -27.2771       27.2771       1549.85       1577.13    
  30  0.286176      -1.25115      -160.793       160.793       1494.23       1655.02    
  31  0.328161      -1.11425      -143.199       143.199       1577.53       1720.73    
  32  0.563264     -0.574006      -73.7692       73.7692       1474.69       1548.46    
  33  0.180895      -1.70984      -219.742       219.742       1312.30       1532.04    
  34  0.977796     -0.224538E-01  -2.88568       2.88568       1548.55       1551.44    
  35  0.650784     -0.429577      -55.2077       55.2077       1341.38       1396.59    
  36  0.350586      -1.04815      -134.704       134.704       1284.76       1419.47    
  37  0.852996E-01  -2.46159      -316.354       316.354       1453.78       1770.13    
  38  0.363921      -1.01082      -129.907       129.907       1576.52       1706.43    
  39  0.715496E-01  -2.63737      -338.945       338.945       1504.39       1843.34    
  40  0.540542     -0.615184      -79.0612       79.0612       1489.44       1568.50    
  41  0.458744E-02  -5.38443      -691.988       691.988       1456.43       2148.42    
  42  0.684509     -0.379054      -48.7146       48.7146       1631.36       1680.07    
  43  0.827193     -0.189717      -24.3818       24.3818       1553.35       1577.73    
  44  0.430712     -0.842315      -108.251       108.251       1663.06       1771.32    
  45  0.925073     -0.778822E-01  -10.0092       10.0092       1518.51       1528.52    
  46  0.139567      -1.96921      -253.076       253.076       1552.58       1805.65    
  47  0.905138     -0.996680E-01  -12.8090       12.8090       1716.14       1728.94    
  48  0.230323      -1.46827      -188.697       188.697       1561.64       1750.34    
  49  0.854981     -0.156676      -20.1354       20.1354       1690.37       1710.51    
  50  0.526676     -0.641170      -82.4010       82.4010       1491.51       1573.91    
  51  0.425904     -0.853542      -109.694       109.694       1539.50       1649.19    
  52  0.770395     -0.260852      -33.5238       33.5238       1590.44       1623.96    
  53  0.222399      -1.50328      -193.197       193.197       1703.70       1896.90    
  54  0.849203     -0.163457      -21.0070       21.0070       1469.94       1490.95    
  55  0.409521     -0.892766      -114.735       114.735       1758.00       1872.73    
  56  0.526161     -0.642147      -82.5265       82.5265       1730.88       1813.41    
  57  0.705716     -0.348543      -44.7935       44.7935       1449.54       1494.33    
  58  0.548845E-03  -7.50769      -964.862       964.862       1946.17       2911.03    
  59  0.498314     -0.696524      -89.5148       89.5148       1597.26       1686.78    
  60  0.774749     -0.255216      -32.7995       32.7995       1733.08       1765.88    
  61  0.537402E-01  -2.92359      -375.730       375.730       1765.98       2141.71    
  62  0.708174     -0.345066      -44.3466       44.3466       1445.36       1489.70    
  63  0.272932      -1.29853      -166.883       166.883       1584.73       1751.61    
  64  0.701294     -0.354828      -45.6012       45.6012       1270.13       1315.73    
loop,thermsimp(1:2)       27   207.091       2.16777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       1452.28         69.29          1.23         40.29          0.09          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1452.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       27
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       28
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      248     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -187.950       187.950       1262.61       1450.56    
   2  0.922423     -0.807516E-01  -10.3779       10.3779       1215.97       1226.35    
   3  0.556007     -0.586974      -75.4358       75.4358       1270.13       1345.56    
   4  0.921345     -0.819211E-01  -10.5282       10.5282       1238.67       1249.20    
   5  0.623358     -0.472635      -60.7414       60.7414       1309.63       1370.38    
   6  0.967150     -0.334012E-01  -4.29260       4.29260       1365.09       1369.39    
   7  0.239844      -1.42777      -183.491       183.491       1364.08       1547.58    
   8  0.707370     -0.346201      -44.4925       44.4925       1269.33       1313.82    
   9  0.375591     -0.979256      -125.851       125.851       1341.38       1467.23    
  10  0.164915      -1.80233      -231.629       231.629       1365.33       1596.96    
  11  0.634729     -0.454558      -58.4182       58.4182       1284.76       1343.18    
  12  0.956585     -0.443852E-01  -5.70423       5.70423       1268.80       1274.51    
  13  0.281051      -1.26922      -163.115       163.115       1410.23       1573.35    
  14  0.332446      -1.10128      -141.532       141.532       1438.65       1580.18    
  15  0.417901     -0.872510      -112.132       112.132       1441.50       1553.64    
  16  0.454459     -0.788647      -101.354       101.354       1397.65       1499.00    
  17  0.163150      -1.81309      -233.012       233.012       1256.72       1489.73    
  18  0.412675     -0.885095      -113.749       113.749       1360.24       1473.99    
  19  0.510076     -0.673195      -86.5167       86.5167       1187.13       1273.65    
  20  0.159872E-02  -6.43855      -827.460       827.460       1358.23       2185.69    
  21  0.279094      -1.27620      -164.013       164.013       1445.36       1609.37    
  22  0.229843E-01  -3.77294      -484.885       484.885       1469.94       1954.83    
  23  0.829240E-02  -4.79242      -615.904       615.904       1449.54       2065.44    
  24  0.722732     -0.324717      -41.7315       41.7315       1425.50       1467.24    
  25  0.399402     -0.917787      -117.951       117.951       1448.36       1566.31    
  26  0.321457      -1.13489      -145.852       145.852       1500.10       1645.95    
  27  0.103147      -2.27160      -291.937       291.937       1518.51       1810.45    
  28  0.488570     -0.716273      -92.0529       92.0529       1312.30       1404.35    
  29  0.775391     -0.254388      -32.6930       32.6930       1374.13       1406.82    
  30  0.264831      -1.32866      -170.755       170.755       1474.69       1645.45    
  31  0.291634      -1.23225      -158.365       158.365       1528.44       1686.80    
  32  0.754799E-02  -4.88647      -627.992       627.992       1548.55       2176.55    
  33  0.403715     -0.907047      -116.570       116.570       1489.44       1606.01    
  34  0.794963     -0.229460      -29.4894       29.4894       1491.51       1521.00    
  35  0.482612E-01  -3.03113      -389.550       389.550       1549.85       1939.40    
  36  0.309506      -1.17278      -150.721       150.721       1553.35       1704.07    
  37  0.265676      -1.32548      -170.346       170.346       1339.96       1510.31    
  38  0.793358     -0.231480      -29.7490       29.7490       1456.76       1486.51    
  39  0.603192E-01  -2.80811      -360.888       360.888       1590.44       1951.32    
  40  0.516664     -0.660363      -84.8675       84.8675       1354.87       1439.74    
  41  0.524892E-01  -2.94715      -378.757       378.757       1539.50       1918.26    
  42  0.581500     -0.542144      -69.6745       69.6745       1494.23       1563.90    
  43  0.403805     -0.906823      -116.542       116.542       1508.93       1625.48    
  44  0.447829     -0.803344      -103.243       103.243       1383.55       1486.79    
  45  0.470604     -0.753737      -96.8677       96.8677       1631.36       1728.23    
  46  0.479088     -0.735871      -94.5715       94.5715       1597.26       1691.84    
  47  0.959223     -0.416322E-01  -5.35042       5.35042       1576.52       1581.87    
  48  0.527403     -0.639789      -82.2235       82.2235       1690.37       1772.60    
  49  0.731687     -0.312402      -40.1488       40.1488       1577.53       1617.68    
  50  0.682707     -0.381689      -49.0534       49.0534       1716.14       1765.19    
  51  0.386616     -0.950322      -122.132       122.132       1561.64       1683.77    
  52  0.120332      -2.11750      -272.134       272.134       1584.73       1856.86    
  53  0.285899      -1.25212      -160.917       160.917       1733.08       1893.99    
  54  0.798593     -0.224904      -28.9039       28.9039       1453.78       1482.68    
  55  0.305098      -1.18712      -152.565       152.565       1663.06       1815.63    
  56  0.274289      -1.29357      -166.245       166.245       1552.58       1718.82    
  57  0.805459     -0.216343      -27.8037       27.8037       1730.88       1758.68    
  58  0.665552     -0.407139      -52.3240       52.3240       1504.39       1556.72    
  59  0.721477     -0.326454      -41.9547       41.9547       1758.00       1799.95    
  60  0.563306     -0.573931      -73.7596       73.7596       1703.70       1777.46    
  61  0.253697      -1.37162      -176.275       176.275       1405.15       1581.42    
  62  0.714468     -0.336217      -43.2094       43.2094       1765.98       1809.19    
  63  0.106618      -2.23850      -287.685       287.685       1456.43       1744.12    
  64  0.116686      -2.14827      -276.088       276.088       1452.28       1728.37    
loop,thermsimp(1:2)       28   187.950       10.3779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250       1675.73         68.78          1.13         40.38          0.81          0.04        111.14
Just calling func    0   0        111.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1675.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       28
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       29
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      249     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -141.685       141.685       1215.97       1357.66    
   2  0.991191     -0.884791E-02  -1.13710       1.13710       1238.67       1239.80    
   3  0.752830     -0.283916      -36.4879       36.4879       1187.13       1223.62    
   4  0.718872     -0.330071      -42.4196       42.4196       1268.80       1311.22    
   5  0.362244      -1.01544      -130.501       130.501       1269.33       1399.83    
   6  0.993342E-01  -2.30927      -296.779       296.779       1284.76       1581.54    
   7  0.734379     -0.308729      -39.6768       39.6768       1270.13       1309.80    
   8  0.190509      -1.65806      -213.087       213.087       1365.09       1578.18    
   9  0.113713      -2.17408      -279.405       279.405       1309.63       1589.04    
  10  0.582158     -0.541014      -69.5292       69.5292       1312.30       1381.83    
  11  0.100405E-01  -4.60113      -591.321       591.321       1374.13       1965.45    
  12  0.614877     -0.486333      -62.5018       62.5018       1354.87       1417.37    
  13  0.996806     -0.319890E-02 -0.411112      0.411112       1262.61       1263.02    
  14  0.439871E-01  -3.12386      -401.467       401.467       1341.38       1742.85    
  15  0.610456     -0.493549      -63.4292       63.4292       1425.50       1488.93    
  16  0.676471     -0.390866      -50.2327       50.2327       1360.24       1410.47    
  17  0.263829      -1.33246      -171.242       171.242       1453.78       1625.02    
  18  0.761962     -0.271858      -34.9382       34.9382       1456.76       1491.70    
  19  0.405295     -0.903140      -116.068       116.068       1383.55       1499.62    
  20  0.184680      -1.68913      -217.081       217.081       1256.72       1473.80    
  21  0.695434     -0.363219      -46.6797       46.6797       1397.65       1444.32    
  22  0.597154     -0.515580      -66.2605       66.2605       1339.96       1406.22    
  23  0.254276      -1.36933      -175.982       175.982       1491.51       1667.49    
  24  0.777974     -0.251062      -32.2657       32.2657       1364.08       1396.35    
  25  0.597236     -0.515443      -66.2429       66.2429       1441.50       1507.75    
  26  0.658168     -0.418295      -53.7578       53.7578       1504.39       1558.15    
  27  0.917953     -0.856086E-01  -11.0021       11.0021       1494.23       1505.23    
  28  0.167567      -1.78637      -229.578       229.578       1448.36       1677.94    
  29  0.867739E-02  -4.74703      -610.072       610.072       1410.23       2020.31    
  30  0.157469      -1.84853      -237.566       237.566       1438.65       1676.22    
  31  0.947458     -0.539724E-01  -6.93634       6.93634       1405.15       1412.09    
  32  0.883772     -0.123556      -15.8790       15.8790       1576.52       1592.40    
  33  0.873100     -0.135705      -17.4403       17.4403       1365.33       1382.77    
  34  0.138043      -1.98019      -254.487       254.487       1489.44       1743.93    
  35  0.833185     -0.182500      -23.4542       23.4542       1445.36       1468.81    
  36  0.907894     -0.966275E-01  -12.4182       12.4182       1577.53       1589.95    
  37  0.858432     -0.152648      -19.6178       19.6178       1508.93       1528.55    
  38  0.192050      -1.65000      -212.052       212.052       1474.69       1686.74    
  39  0.890666     -0.115786      -14.8804       14.8804       1500.10       1514.98    
  40  0.389935     -0.941775      -121.034       121.034       1561.64       1682.68    
  41  0.842362     -0.171545      -22.0464       22.0464       1528.44       1550.49    
  42  0.143912      -1.93855      -249.136       249.136       1597.26       1846.40    
  43  0.678545     -0.387804      -49.8392       49.8392       1553.35       1603.19    
  44  0.621021     -0.476390      -61.2240       61.2240       1552.58       1613.80    
  45  0.533199     -0.628861      -80.8190       80.8190       1631.36       1712.18    
  46  0.891703     -0.114623      -14.7309       14.7309       1452.28       1467.01    
  47  0.675469     -0.392349      -50.4233       50.4233       1456.43       1506.86    
  48  0.757471     -0.277770      -35.6980       35.6980       1730.88       1766.58    
  49  0.855441     -0.156139      -20.0664       20.0664       1716.14       1736.20    
  50  0.737982     -0.303836      -39.0480       39.0480       1690.37       1729.42    
  51  0.630328     -0.461515      -59.3123       59.3123       1703.70       1763.02    
  52  0.701612     -0.354375      -45.5431       45.5431       1758.00       1803.54    
  53  0.161537E-01  -4.12561      -530.208       530.208       1765.98       2296.19    
  54  0.716145     -0.333873      -42.9082       42.9082       1518.51       1561.42    
  55  0.644842     -0.438751      -56.3867       56.3867       1663.06       1719.45    
  56  0.465420E-01  -3.06740      -394.212       394.212       1584.73       1978.94    
  57  0.644178     -0.439780      -56.5190       56.5190       1733.08       1789.59    
  58  0.297766      -1.21145      -155.691       155.691       1539.50       1695.19    
  59  0.877956     -0.130159      -16.7275       16.7275       1549.85       1566.58    
  60  0.373410     -0.985078      -126.599       126.599       1590.44       1717.03    
  61  0.162588      -1.81653      -233.454       233.454       1469.94       1703.40    
  62  0.634599     -0.454761      -58.4443       58.4443       1449.54       1507.98    
  63  0.762468     -0.271195      -34.8530       34.8530       1548.55       1583.41    
  64  0.237905      -1.43588      -184.535       184.535       1675.73       1860.27    
loop,thermsimp(1:2)       29   141.685       1.13710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       1967.35         69.21          1.20         40.38          0.00          0.04        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1967.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       29
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       30
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      250     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -237.494       237.494       1187.13       1424.63    
   2  0.553200     -0.592035      -76.0863       76.0863       1238.67       1314.75    
   3  0.825049     -0.192313      -24.7153       24.7153       1262.61       1287.33    
   4  0.767336     -0.264830      -34.0350       34.0350       1270.13       1304.16    
   5  0.966534     -0.340385E-01  -4.37450       4.37450       1268.80       1273.18    
   6  0.954430     -0.466410E-01  -5.99414       5.99414       1215.97       1221.96    
   7  0.780674     -0.247598      -31.8204       31.8204       1312.30       1344.12    
   8  0.312863      -1.16199      -149.335       149.335       1365.33       1514.66    
   9  0.990226     -0.982218E-02  -1.26231       1.26231       1364.08       1365.35    
  10  0.893872     -0.112193      -14.4186       14.4186       1269.33       1283.75    
  11  0.322320      -1.13221      -145.508       145.508       1339.96       1485.47    
  12  0.927465     -0.752997E-01  -9.67725       9.67725       1360.24       1369.92    
  13  0.539466     -0.617176      -79.3173       79.3173       1405.15       1484.47    
  14  0.461474     -0.773330      -99.3857       99.3857       1354.87       1454.25    
  15  0.745701     -0.293430      -37.7106       37.7106       1397.65       1435.36    
  16  0.703580     -0.351573      -45.1829       45.1829       1452.28       1497.46    
  17  0.917420E-01  -2.38878      -306.997       306.997       1445.36       1752.35    
  18  0.671661     -0.398001      -51.1497       51.1497       1256.72       1307.87    
  19  0.845179     -0.168207      -21.6174       21.6174       1425.50       1447.12    
  20  0.283605E-01  -3.56276      -457.873       457.873       1456.76       1914.63    
  21  0.108883E-01  -4.52006      -580.903       580.903       1383.55       1964.45    
  22  0.506006     -0.681208      -87.5464       87.5464       1494.23       1581.78    
  23  0.353918      -1.03869      -133.489       133.489       1456.43       1589.92    
  24  0.656862     -0.420282      -54.0131       54.0131       1441.50       1495.52    
  25  0.691560     -0.368806      -47.3976       47.3976       1449.54       1496.94    
  26  0.445402     -0.808779      -103.941       103.941       1500.10       1604.04    
  27  0.832700     -0.183081      -23.5290       23.5290       1508.93       1532.46    
  28  0.963063     -0.376360E-01  -4.83685       4.83685       1528.44       1533.28    
  29  0.422212     -0.862247      -110.813       110.813       1504.39       1615.21    
  30  0.917895     -0.856720E-01  -11.0103       11.0103       1518.51       1529.52    
  31  0.767210     -0.264994      -34.0561       34.0561       1549.85       1583.91    
  32  0.360836      -1.01933      -131.001       131.001       1365.09       1496.09    
  33  0.635930     -0.452667      -58.1751       58.1751       1284.76       1342.94    
  34  0.687292     -0.374995      -48.1931       48.1931       1548.55       1596.75    
  35  0.833832     -0.181724      -23.3545       23.3545       1309.63       1332.99    
  36  0.362075      -1.01590      -130.561       130.561       1577.53       1708.09    
  37  0.385764     -0.952530      -122.416       122.416       1576.52       1698.94    
  38  0.752556     -0.284279      -36.5346       36.5346       1553.35       1589.89    
  39  0.547433     -0.602515      -77.4330       77.4330       1552.58       1630.01    
  40  0.171004      -1.76607      -226.969       226.969       1453.78       1680.75    
  41  0.159022      -1.83871      -236.305       236.305       1491.51       1727.81    
  42  0.850806     -0.161571      -20.7645       20.7645       1438.65       1459.41    
  43  0.926075     -0.768001E-01  -9.87008       9.87008       1448.36       1458.23    
  44  0.584885     -0.536340      -68.9285       68.9285       1561.64       1630.57    
  45  0.547650     -0.602120      -77.3823       77.3823       1474.69       1552.08    
  46  0.864296     -0.145840      -18.7429       18.7429       1539.50       1558.24    
  47  0.384639     -0.955450      -122.791       122.791       1469.94       1592.73    
  48  0.359776      -1.02227      -131.379       131.379       1631.36       1762.74    
  49  0.147032      -1.91711      -246.380       246.380       1590.44       1836.82    
  50  0.649806     -0.431082      -55.4011       55.4011       1663.06       1718.47    
  51  0.909946     -0.943695E-01  -12.1280       12.1280       1690.37       1702.50    
  52  0.740699     -0.300161      -38.5756       38.5756       1716.14       1754.71    
  53  0.959446     -0.413992E-01  -5.32048       5.32048       1341.38       1346.70    
  54  0.993892     -0.612654E-02 -0.787361      0.787361       1489.44       1490.23    
  55  0.499875     -0.693397      -89.1129       89.1129       1703.70       1792.82    
  56  0.716813     -0.332941      -42.7884       42.7884       1730.88       1773.67    
  57  0.586555     -0.533488      -68.5620       68.5620       1733.08       1801.64    
  58  0.687999     -0.373968      -48.0610       48.0610       1758.00       1806.06    
  59  0.238056      -1.43525      -184.453       184.453       1597.26       1781.72    
  60  0.842319     -0.171596      -22.0530       22.0530       1675.73       1697.78    
  61  0.559244     -0.581169      -74.6898       74.6898       1374.13       1448.82    
  62  0.596920     -0.515973      -66.3110       66.3110       1584.73       1651.04    
  63  0.266753      -1.32143      -169.826       169.826       1410.23       1580.06    
  64  0.681727     -0.383126      -49.2380       49.2380       1967.35       2016.59    
loop,thermsimp(1:2)       30   237.494       76.0863    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       1765.98         69.11          1.22         40.29          0.49          0.05        111.16
Just calling func    0   0        111.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1765.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       30
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       31
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      251     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -164.744       164.744       1215.97       1380.71    
   2  0.202445      -1.59728      -205.277       205.277       1268.80       1474.08    
   3  0.927152     -0.756373E-01  -9.72064       9.72064       1269.33       1279.05    
   4  0.403144     -0.908460      -116.752       116.752       1262.61       1379.36    
   5  0.791838     -0.233398      -29.9955       29.9955       1270.13       1300.12    
   6  0.292576      -1.22903      -157.951       157.951       1256.72       1414.67    
   7  0.135578      -1.99821      -256.803       256.803       1238.67       1495.47    
   8  0.516570     -0.660545      -84.8910       84.8910       1309.63       1394.53    
   9  0.730579     -0.313918      -40.3436       40.3436       1284.76       1325.10    
  10  0.508248     -0.676786      -86.9782       86.9782       1312.30       1399.28    
  11  0.928455     -0.742338E-01  -9.54026       9.54026       1341.38       1350.92    
  12  0.696477     -0.361721      -46.4870       46.4870       1364.08       1410.57    
  13  0.465556     -0.764522      -98.2537       98.2537       1360.24       1458.49    
  14  0.194653      -1.63654      -210.322       210.322       1187.13       1397.46    
  15  0.650312     -0.430303      -55.3011       55.3011       1397.65       1452.95    
  16  0.555802     -0.587343      -75.4832       75.4832       1425.50       1500.99    
  17  0.985517     -0.145893E-01  -1.87496       1.87496       1374.13       1376.00    
  18  0.923066     -0.800544E-01  -10.2883       10.2883       1354.87       1365.16    
  19  0.658765     -0.417388      -53.6412       53.6412       1448.36       1502.00    
  20  0.197878      -1.62010      -208.210       208.210       1438.65       1646.86    
  21  0.449673     -0.799236      -102.715       102.715       1405.15       1507.86    
  22  0.208093      -1.56977      -201.742       201.742       1339.96       1541.70    
  23  0.102791      -2.27506      -292.383       292.383       1489.44       1781.82    
  24  0.650538     -0.429955      -55.2563       55.2563       1441.50       1496.76    
  25  0.223365      -1.49895      -192.640       192.640       1365.09       1557.73    
  26  0.520729     -0.652525      -83.8602       83.8602       1449.54       1533.40    
  27  0.919707E-01  -2.38629      -306.677       306.677       1452.28       1758.96    
  28  0.788427     -0.237716      -30.5504       30.5504       1365.33       1395.88    
  29  0.395754     -0.926961      -119.130       119.130       1518.51       1637.64    
  30  0.903388     -0.101603      -13.0577       13.0577       1508.93       1521.99    
  31  0.569415     -0.563145      -72.3734       72.3734       1528.44       1600.81    
  32  0.974677     -0.256496E-01  -3.29640       3.29640       1474.69       1477.99    
  33  0.376411     -0.977073      -125.570       125.570       1539.50       1665.07    
  34  0.309090      -1.17412      -150.894       150.894       1410.23       1561.13    
  35  0.248039      -1.39417      -179.174       179.174       1494.23       1673.40    
  36  0.941329     -0.604621E-01  -7.77038       7.77038       1549.85       1557.62    
  37  0.131879      -2.02587      -260.358       260.358       1553.35       1813.71    
  38  0.188022      -1.67120      -214.776       214.776       1456.43       1671.21    
  39  0.898649E-01  -2.40945      -309.654       309.654       1469.94       1779.60    
  40  0.853893     -0.157949      -20.2991       20.2991       1548.55       1568.85    
  41  0.643577     -0.440714      -56.6390       56.6390       1500.10       1556.74    
  42  0.664391     -0.408885      -52.5485       52.5485       1504.39       1556.94    
  43  0.825262     -0.192054      -24.6821       24.6821       1552.58       1577.26    
  44  0.611498     -0.491843      -63.2099       63.2099       1561.64       1624.85    
  45  0.284000      -1.25878      -161.774       161.774       1584.73       1746.50    
  46  0.108174      -2.22402      -285.823       285.823       1453.78       1739.60    
  47  0.293070      -1.22734      -157.734       157.734       1675.73       1833.46    
  48  0.412045     -0.886623      -113.946       113.946       1576.52       1690.47    
  49  0.464041     -0.767783      -98.6728       98.6728       1690.37       1789.05    
  50  0.711768     -0.340003      -43.6960       43.6960       1577.53       1621.22    
  51  0.919970     -0.834138E-01  -10.7201       10.7201       1663.06       1673.78    
  52  0.551321     -0.595437      -76.5235       76.5235       1491.51       1568.03    
  53  0.720690E-01  -2.63013      -338.015       338.015       1445.36       1783.37    
  54  0.788823     -0.237213      -30.4858       30.4858       1716.14       1746.62    
  55  0.339304      -1.08086      -138.908       138.908       1631.36       1770.27    
  56  0.824115     -0.193445      -24.8609       24.8609       1730.88       1755.74    
  57  0.564535     -0.571754      -73.4798       73.4798       1597.26       1670.74    
  58  0.608050     -0.497498      -63.9367       63.9367       1703.70       1767.64    
  59  0.696797     -0.361262      -46.4281       46.4281       1733.08       1779.50    
  60  0.287274      -1.24732      -160.301       160.301       1758.00       1918.30    
  61  0.302150E-01  -3.49942      -449.733       449.733       1590.44       2040.17    
  62  0.896370     -0.109402      -14.0600       14.0600       1456.76       1470.82    
  63  0.289059      -1.24112      -159.505       159.505       1383.55       1543.05    
  64  0.476596     -0.741086      -95.2417       95.2417       1765.98       1861.22    
loop,thermsimp(1:2)       31   164.744       205.277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       1232.73         68.84          1.16         41.09          0.01          0.05        111.15
Just calling func    0   0        111.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    254       1288.40         69.12          1.14         40.78          0.81          0.05        111.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1232.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       31
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       32
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      253     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -45.5923       45.5923       1269.33       1314.92    
   2  0.779682     -0.248869      -31.9838       31.9838       1270.13       1302.11    
   3  0.611645     -0.491604      -63.1792       63.1792       1284.76       1347.94    
   4  0.380626     -0.965937      -124.139       124.139       1341.38       1465.52    
   5  0.986599     -0.134915E-01  -1.73388       1.73388       1354.87       1356.60    
   6  0.699021     -0.358075      -46.0185       46.0185       1374.13       1420.15    
   7  0.981217E-01  -2.32155      -298.357       298.357       1262.61       1560.97    
   8  0.221199      -1.50869      -193.892       193.892       1215.97       1409.86    
   9  0.802460     -0.220073      -28.2830       28.2830       1309.63       1337.92    
  10  0.623430     -0.472519      -60.7264       60.7264       1365.33       1426.05    
  11  0.669862     -0.400684      -51.4945       51.4945       1187.13       1238.63    
  12  0.957999     -0.429090E-01  -5.51451       5.51451       1312.30       1317.81    
  13  0.569879E-01  -2.86492      -368.189       368.189       1364.08       1732.27    
  14  0.245244      -1.40550      -180.630       180.630       1256.72       1437.35    
  15  0.870123     -0.139121      -17.8793       17.8793       1397.65       1415.52    
  16  0.429679     -0.844716      -108.560       108.560       1360.24       1468.80    
  17  0.369880     -0.994577      -127.820       127.820       1456.76       1584.58    
  18  0.964882     -0.357490E-01  -4.59434       4.59434       1268.80       1273.40    
  19  0.625983     -0.468432      -60.2012       60.2012       1474.69       1534.89    
  20  0.508652     -0.675991      -86.8759       86.8759       1238.67       1325.54    
  21  0.694697     -0.364279      -46.8158       46.8158       1441.50       1488.32    
  22  0.817819     -0.201114      -25.8464       25.8464       1425.50       1451.35    
  23  0.655732     -0.422003      -54.2344       54.2344       1448.36       1502.59    
  24  0.658757     -0.417401      -53.6428       53.6428       1405.15       1458.79    
  25  0.325934      -1.12106      -144.075       144.075       1508.93       1653.01    
  26  0.849137     -0.163535      -21.0169       21.0169       1449.54       1470.55    
  27  0.953435     -0.476843E-01  -6.12822       6.12822       1339.96       1346.09    
  28  0.435049     -0.832297      -106.964       106.964       1383.55       1490.51    
  29  0.155341E-01  -4.16472      -535.235       535.235       1500.10       2035.33    
  30  0.390095     -0.941364      -120.981       120.981       1504.39       1625.37    
  31  0.400867E-02  -5.51929      -709.320       709.320       1549.85       2259.17    
  32  0.989750     -0.103025E-01  -1.32404       1.32404       1365.09       1366.42    
  33  0.194149      -1.63913      -210.655       210.655       1410.23       1620.89    
  34  0.573547     -0.555915      -71.4442       71.4442       1491.51       1562.95    
  35  0.570216     -0.561740      -72.1928       72.1928       1548.55       1620.75    
  36  0.802122     -0.220494      -28.3371       28.3371       1552.58       1580.91    
  37  0.831214E-01  -2.48745      -319.679       319.679       1528.44       1848.12    
  38  0.280368      -1.27165      -163.428       163.428       1577.53       1740.96    
  39  0.568263     -0.565171      -72.6338       72.6338       1561.64       1634.28    
  40  0.570544     -0.561165      -72.1189       72.1189       1518.51       1590.63    
  41  0.524202     -0.645877      -83.0059       83.0059       1438.65       1521.66    
  42  0.625335E-01  -2.77205      -356.254       356.254       1539.50       1895.75    
  43  0.717146     -0.332476      -42.7287       42.7287       1597.26       1639.99    
  44  0.234175      -1.45169      -186.566       186.566       1456.43       1643.00    
  45  0.366320      -1.00425      -129.063       129.063       1494.23       1623.29    
  46  0.458915     -0.778891      -100.100       100.100       1663.06       1763.16    
  47  0.379536     -0.968806      -124.508       124.508       1576.52       1701.03    
  48  0.854466     -0.157278      -20.2129       20.2129       1453.78       1473.99    
  49  0.452738E-01  -3.09503      -397.762       397.762       1584.73       1982.49    
  50  0.966525     -0.340477E-01  -4.37569       4.37569       1716.14       1720.51    
  51  0.400949     -0.913920      -117.454       117.454       1730.88       1848.33    
  52  0.563096     -0.574305      -73.8077       73.8077       1452.28       1526.09    
  53  0.612298     -0.490536      -63.0419       63.0419       1703.70       1766.75    
  54  0.395518     -0.927559      -119.207       119.207       1631.36       1750.56    
  55  0.693522     -0.365972      -47.0334       47.0334       1733.08       1780.11    
  56  0.270894      -1.30603      -167.846       167.846       1469.94       1637.79    
  57  0.885600     -0.121490      -15.6134       15.6134       1489.44       1505.05    
  58  0.862297     -0.148155      -19.0404       19.0404       1445.36       1464.40    
  59  0.483017     -0.727702      -93.5217       93.5217       1690.37       1783.90    
  60  0.594400     -0.520203      -66.8547       66.8547       1553.35       1620.21    
  61  0.351664      -1.04508      -134.310       134.310       1675.73       1810.04    
  62  0.402505     -0.910048      -116.956       116.956       1765.98       1882.93    
  63  0.272240      -1.30107      -167.209       167.209       1758.00       1925.21    
  64  0.234792      -1.44906      -186.228       186.228       1232.73       1418.96    
loop,thermsimp(1:2)       32   45.5923       31.9838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       1506.28         69.19          1.28         40.50          0.04          0.04        111.05
Just calling func    0   0        111.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1506.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    128.516               253
loop is:       32
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    128.516               253
loop is:       33
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    64.2582               316

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      254     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -58.2444       58.2444       1187.13       1245.38    
   2  0.598662     -0.513057      -32.9682       32.9682       1268.80       1301.77    
   3  0.165178      -1.80073      -115.712       115.712       1270.13       1385.84    
   4  0.785331     -0.241651      -15.5280       15.5280       1269.33       1284.86    
   5  0.422061     -0.862604      -55.4294       55.4294       1312.30       1367.73    
   6  0.343624      -1.06821      -68.6410       68.6410       1238.67       1307.31    
   7  0.988862     -0.112001E-01 -0.719698      0.719698       1309.63       1310.35    
   8  0.586093E-01  -2.83686      -182.292       182.292       1339.96       1522.25    
   9  0.324880      -1.12430      -72.2455       72.2455       1284.76       1357.01    
  10  0.869373     -0.139983      -8.99506       8.99506       1354.87       1363.86    
  11  0.314362      -1.15721      -74.3602       74.3602       1365.09       1439.45    
  12  0.635265     -0.453712      -29.1548       29.1548       1215.97       1245.13    
  13  0.800738     -0.222221      -14.2795       14.2795       1397.65       1411.92    
  14  0.234515      -1.45024      -93.1896       93.1896       1232.73       1325.92    
  15  0.818766     -0.199957      -12.8489       12.8489       1374.13       1386.98    
  16  0.480807     -0.732289      -47.0556       47.0556       1365.33       1412.38    
  17  0.173083      -1.75398      -112.708       112.708       1256.72       1369.43    
  18  0.544835     -0.607272      -39.0222       39.0222       1425.50       1464.53    
  19  0.955728     -0.452816E-01  -2.90971       2.90971       1405.15       1408.06    
  20  0.909631     -0.947157E-01  -6.08627       6.08627       1445.36       1451.44    
  21  0.538276     -0.619384      -39.8005       39.8005       1341.38       1381.18    
  22  0.640373     -0.445705      -28.6402       28.6402       1360.24       1388.88    
  23  0.588429     -0.530300      -34.0761       34.0761       1449.54       1483.61    
  24  0.954392     -0.466804E-01  -2.99960       2.99960       1453.78       1456.78    
  25  0.976738     -0.235363E-01  -1.51240       1.51240       1441.50       1443.02    
  26  0.801897     -0.220775      -14.1866       14.1866       1383.55       1397.73    
  27  0.679499     -0.386400      -24.8294       24.8294       1448.36       1473.19    
  28  0.303686      -1.19176      -76.5805       76.5805       1489.44       1566.02    
  29  0.907562     -0.969936E-01  -6.23264       6.23264       1438.65       1444.88    
  30  0.117971E-01  -4.43990      -285.300       285.300       1452.28       1737.58    
  31  0.324683      -1.12491      -72.2845       72.2845       1474.69       1546.98    
  32  0.662106     -0.412329      -26.4956       26.4956       1262.61       1289.11    
  33  0.334080      -1.09637      -70.4511       70.4511       1491.51       1561.96    
  34  0.307577      -1.17903      -75.7624       75.7624       1552.58       1628.34    
  35  0.539029     -0.617986      -39.7107       39.7107       1456.76       1496.47    
  36  0.822737     -0.195119      -12.5380       12.5380       1518.51       1531.05    
  37  0.973480     -0.268776E-01  -1.72711       1.72711       1553.35       1555.08    
  38  0.918970     -0.845018E-01  -5.42993       5.42993       1548.55       1553.98    
  39  0.203072      -1.59419      -102.440       102.440       1410.23       1512.67    
  40  0.467655     -0.760024      -48.8378       48.8378       1494.23       1543.07    
  41  0.323145      -1.12965      -72.5895       72.5895       1504.39       1576.98    
  42  0.505961     -0.681295      -43.7788       43.7788       1561.64       1605.42    
  43  0.699853E-01  -2.65947      -170.893       170.893       1469.94       1640.83    
  44  0.188263      -1.66991      -107.306       107.306       1597.26       1704.57    
  45  0.663178     -0.410711      -26.3916       26.3916       1456.43       1482.82    
  46  0.680233     -0.385320      -24.7600       24.7600       1508.93       1533.69    
  47  0.717812     -0.331548      -21.3047       21.3047       1576.52       1597.83    
  48  0.319374      -1.14139      -73.3439       73.3439       1716.14       1789.48    
  49  0.667076     -0.404851      -26.0150       26.0150       1364.08       1390.10    
  50  0.755360     -0.280560      -18.0283       18.0283       1577.53       1595.56    
  51  0.105804      -2.24617      -144.335       144.335       1631.36       1775.69    
  52  0.432752     -0.837590      -53.8220       53.8220       1663.06       1716.89    
  53  0.258710      -1.35205      -86.8801       86.8801       1703.70       1790.58    
  54  0.826410     -0.190665      -12.2518       12.2518       1733.08       1745.33    
  55  0.958430     -0.424590E-01  -2.72834       2.72834       1690.37       1693.10    
  56  0.898442     -0.107093      -6.88159       6.88159       1675.73       1682.61    
  57  0.794924     -0.229509      -14.7478       14.7478       1528.44       1543.19    
  58  0.191148      -1.65471      -106.329       106.329       1730.88       1837.21    
  59  0.920959     -0.823397E-01  -5.29101       5.29101       1765.98       1771.27    
  60  0.239714      -1.42831      -91.7806       91.7806       1539.50       1631.28    
  61  0.337561      -1.08601      -69.7850       69.7850       1758.00       1827.78    
  62  0.229537      -1.47169      -94.5684       94.5684       1584.73       1679.30    
  63  0.518941     -0.655965      -42.1512       42.1512       1500.10       1542.25    
  64  0.565096     -0.570759      -36.6760       36.6760       1506.28       1542.96    
loop,thermsimp(1:2)       33   58.2444       32.9682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256       1652.26         69.27          1.23         40.51          0.00          0.04        111.06
Just calling func    0   0        111.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1652.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       33
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       34
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      255     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -94.7401       94.7401       1215.97       1310.71    
   2  0.299376      -1.20605      -77.4989       77.4989       1187.13       1264.63    
   3  0.220114      -1.51361      -97.2618       97.2618       1269.33       1366.59    
   4  0.229209      -1.47312      -94.6603       94.6603       1262.61       1357.27    
   5  0.902477     -0.102612      -6.59370       6.59370       1268.80       1275.40    
   6  0.659052     -0.416953      -26.7926       26.7926       1238.67       1265.46    
   7  0.100321E-01  -4.60197      -295.714       295.714       1309.63       1605.35    
   8  0.588837     -0.529606      -34.0315       34.0315       1232.73       1266.76    
   9  0.270943      -1.30585      -83.9115       83.9115       1284.76       1368.67    
  10  0.505518     -0.682171      -43.8351       43.8351       1354.87       1398.70    
  11  0.264565      -1.32967      -85.4422       85.4422       1312.30       1397.74    
  12  0.806386     -0.215193      -13.8279       13.8279       1256.72       1270.55    
  13  0.340560      -1.07716      -69.2167       69.2167       1341.38       1410.60    
  14  0.906186     -0.985106E-01  -6.33011       6.33011       1270.13       1276.46    
  15  0.786070     -0.240709      -15.4676       15.4676       1374.13       1389.59    
  16  0.540508     -0.615247      -39.5347       39.5347       1360.24       1399.78    
  17  0.935065     -0.671392E-01  -4.31424       4.31424       1364.08       1368.40    
  18  0.915359     -0.884391E-01  -5.68294       5.68294       1383.55       1389.23    
  19  0.958261     -0.426353E-01  -2.73967       2.73967       1405.15       1407.89    
  20  0.935110     -0.670907E-01  -4.31113       4.31113       1397.65       1401.96    
  21  0.637755     -0.449800      -28.9034       28.9034       1365.33       1394.23    
  22  0.975714     -0.245861E-01  -1.57986       1.57986       1365.09       1366.67    
  23  0.797424     -0.226369      -14.5461       14.5461       1441.50       1456.05    
  24  0.214179      -1.54094      -99.0184       99.0184       1438.65       1537.67    
  25  0.372145     -0.988472      -63.5175       63.5175       1445.36       1508.87    
  26  0.925208     -0.777367E-01  -4.99522       4.99522       1453.78       1458.77    
  27  0.175897      -1.73786      -111.671       111.671       1425.50       1537.18    
  28  0.952033     -0.491554E-01  -3.15864       3.15864       1448.36       1451.52    
  29  0.158274E-01  -4.14601      -266.415       266.415       1456.43       1722.85    
  30  0.799308     -0.224008      -14.3944       14.3944       1449.54       1463.93    
  31  0.248227      -1.39341      -89.5381       89.5381       1456.76       1546.30    
  32  0.244914      -1.40685      -90.4015       90.4015       1410.23       1500.63    
  33  0.390842     -0.939452      -60.3675       60.3675       1339.96       1400.33    
  34  0.146784      -1.91879      -123.298       123.298       1518.51       1641.81    
  35  0.500975     -0.691199      -44.4152       44.4152       1508.93       1553.35    
  36  0.480131E-01  -3.03628      -195.106       195.106       1500.10       1695.21    
  37  0.124503      -2.08343      -133.877       133.877       1506.28       1640.16    
  38  0.670304     -0.400024      -25.7049       25.7049       1494.23       1519.93    
  39  0.997449     -0.255468E-02 -0.164159      0.164159       1528.44       1528.60    
  40  0.681761     -0.383076      -24.6158       24.6158       1474.69       1499.31    
  41  0.440529     -0.819778      -52.6775       52.6775       1548.55       1601.23    
  42  0.342489      -1.07152      -68.8538       68.8538       1553.35       1622.21    
  43  0.735753     -0.306861      -19.7183       19.7183       1491.51       1511.23    
  44  0.614752     -0.486537      -31.2640       31.2640       1489.44       1520.70    
  45  0.351660      -1.04509      -67.1557       67.1557       1504.39       1571.55    
  46  0.777165     -0.252103      -16.1997       16.1997       1577.53       1593.73    
  47  0.392618     -0.934919      -60.0762       60.0762       1576.52       1636.60    
  48  0.385647     -0.952832      -61.2273       61.2273       1561.64       1622.87    
  49  0.834392     -0.181052      -11.6341       11.6341       1552.58       1564.21    
  50  0.469158     -0.756815      -48.6316       48.6316       1539.50       1588.13    
  51  0.697320     -0.360511      -23.1658       23.1658       1469.94       1493.11    
  52  0.987150     -0.129333E-01 -0.831069      0.831069       1584.73       1585.56    
  53  0.512413     -0.668624      -42.9646       42.9646       1675.73       1718.70    
  54  0.781282     -0.246819      -15.8602       15.8602       1690.37       1706.24    
  55  0.290579      -1.23588      -79.4156       79.4156       1597.26       1676.68    
  56  0.921499     -0.817534E-01  -5.25333       5.25333       1663.06       1668.32    
  57  0.198558      -1.61668      -103.885       103.885       1452.28       1556.16    
  58  0.488340     -0.716743      -46.0566       46.0566       1733.08       1779.13    
  59  0.874587     -0.134003      -8.61083       8.61083       1765.98       1774.59    
  60  0.165334      -1.79979      -115.651       115.651       1631.36       1747.01    
  61  0.712283     -0.339280      -21.8015       21.8015       1716.14       1737.94    
  62  0.578012E-01  -2.85075      -183.184       183.184       1703.70       1886.89    
  63  0.700556     -0.355880      -22.8682       22.8682       1758.00       1780.87    
  64  0.502101     -0.688954      -44.2710       44.2710       1652.26       1696.53    
loop,thermsimp(1:2)       34   94.7401       77.4989    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257       1280.94         69.21          1.23         40.42          0.06          0.05        110.98
Just calling func    0   0        110.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258       5083.52         68.52          1.13         40.55          0.62          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1280.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       34
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       35
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      257     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -67.9690       67.9690       1187.13       1255.10    
   2  0.621479     -0.475653      -30.5646       30.5646       1238.67       1269.23    
   3  0.221273      -1.50836      -96.9245       96.9245       1232.73       1329.65    
   4  0.180626E-01  -4.01391      -257.927       257.927       1256.72       1514.65    
   5  0.216093      -1.53205      -98.4467       98.4467       1268.80       1367.25    
   6  0.351343      -1.04599      -67.2136       67.2136       1270.13       1337.34    
   7  0.360847      -1.01930      -65.4986       65.4986       1215.97       1281.47    
   8  0.439525     -0.822061      -52.8242       52.8242       1262.61       1315.44    
   9  0.910616E-01  -2.39622      -153.977       153.977       1269.33       1423.30    
  10  0.549745     -0.598300      -38.4457       38.4457       1365.09       1403.54    
  11  0.619825     -0.478318      -30.7359       30.7359       1364.08       1394.82    
  12  0.548169E-01  -2.90376      -186.590       186.590       1284.76       1471.35    
  13  0.947163     -0.542842E-01  -3.48821       3.48821       1383.55       1387.04    
  14  0.725459     -0.320951      -20.6237       20.6237       1374.13       1394.75    
  15  0.481613     -0.730615      -46.9480       46.9480       1365.33       1412.28    
  16  0.866286     -0.143540      -9.22366       9.22366       1312.30       1321.52    
  17  0.221988E-01  -3.80772      -244.677       244.677       1354.87       1599.55    
  18  0.980823     -0.193630E-01  -1.24424       1.24424       1360.24       1361.49    
  19  0.332549      -1.10097      -70.7462       70.7462       1339.96       1410.71    
  20  0.989035     -0.110256E-01 -0.708486      0.708486       1397.65       1398.35    
  21  0.364016      -1.01056      -64.9366       64.9366       1405.15       1470.09    
  22  0.861799     -0.148733      -9.55733       9.55733       1341.38       1350.94    
  23  0.622306     -0.474324      -30.4792       30.4792       1448.36       1478.84    
  24  0.575476     -0.552558      -35.5064       35.5064       1441.50       1477.01    
  25  0.205536      -1.58213      -101.665       101.665       1453.78       1555.44    
  26  0.124037      -2.08718      -134.118       134.118       1449.54       1583.66    
  27  0.467008     -0.761408      -48.9268       48.9268       1469.94       1518.87    
  28  0.273870      -1.29510      -83.2209       83.2209       1474.69       1557.91    
  29  0.842780     -0.171050      -10.9913       10.9913       1410.23       1421.22    
  30  0.709315     -0.343455      -22.0698       22.0698       1445.36       1467.43    
  31  0.677144     -0.389871      -25.0524       25.0524       1491.51       1516.56    
  32  0.656062     -0.421500      -27.0849       27.0849       1494.23       1521.31    
  33  0.721592     -0.326295      -20.9672       20.9672       1489.44       1510.41    
  34  0.120172      -2.11883      -136.153       136.153       1528.44       1664.59    
  35  0.832403     -0.183439      -11.7875       11.7875       1425.50       1437.29    
  36  0.607577     -0.498276      -32.0183       32.0183       1438.65       1470.67    
  37  0.169814      -1.77305      -113.933       113.933       1456.76       1570.69    
  38  0.578085     -0.548034      -35.2157       35.2157       1508.93       1544.15    
  39  0.201144      -1.60373      -103.053       103.053       1452.28       1555.33    
  40  0.922823     -0.803178E-01  -5.16108       5.16108       1552.58       1557.74    
  41  0.136644      -1.99038      -127.898       127.898       1504.39       1632.29    
  42  0.836366     -0.178689      -11.4822       11.4822       1584.73       1596.21    
  43  0.590669     -0.526499      -33.8319       33.8319       1539.50       1573.33    
  44  0.745946     -0.293102      -18.8342       18.8342       1577.53       1596.36    
  45  0.874736     -0.133833      -8.59987       8.59987       1548.55       1557.15    
  46  0.370232     -0.993625      -63.8486       63.8486       1309.63       1373.48    
  47  0.832293     -0.183570      -11.7959       11.7959       1553.35       1565.15    
  48  0.351566      -1.04536      -67.1729       67.1729       1561.64       1628.81    
  49  0.705870     -0.348324      -22.3827       22.3827       1576.52       1598.90    
  50  0.323816      -1.12758      -72.4563       72.4563       1506.28       1578.74    
  51  0.197269      -1.62319      -104.303       104.303       1518.51       1622.82    
  52  0.140686      -1.96123      -126.025       126.025       1663.06       1789.09    
  53  0.913651     -0.903067E-01  -5.80295       5.80295       1597.26       1603.07    
  54  0.515699     -0.662233      -42.5539       42.5539       1500.10       1542.65    
  55  0.217669      -1.52478      -97.9797       97.9797       1652.26       1750.24    
  56  0.234146      -1.45181      -93.2908       93.2908       1690.37       1783.67    
  57  0.948303     -0.530813E-01  -3.41091       3.41091       1675.73       1679.14    
  58  0.165683      -1.79768      -115.516       115.516       1456.43       1571.95    
  59  0.506186     -0.680851      -43.7503       43.7503       1716.14       1759.89    
  60  0.644381     -0.439466      -28.2393       28.2393       1631.36       1659.60    
  61  0.790610     -0.234950      -15.0975       15.0975       1765.98       1781.08    
  62  0.945427     -0.561185E-01  -3.60608       3.60608       1733.08       1736.68    
  63  0.195494      -1.63222      -104.884       104.884       1758.00       1862.88    
  64  0.478914     -0.736235      -47.3092       47.3092       1280.94       1328.25    
loop,thermsimp(1:2)       35   67.9690       30.5646    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       1436.92         69.18          1.22         40.32          0.05          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260       2286.82         68.97          1.26         40.38          0.05          0.05        110.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1436.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       35
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       36
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      259     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -93.4101       93.4101       1187.13       1280.54    
   2  0.607568     -0.498291      -32.0193       32.0193       1238.67       1270.69    
   3  0.905785     -0.989529E-01  -6.35854       6.35854       1215.97       1222.33    
   4  0.995938E-01  -2.30666      -148.222       148.222       1262.61       1410.83    
   5  0.851360     -0.160920      -10.3405       10.3405       1312.30       1322.64    
   6  0.730583     -0.313913      -20.1715       20.1715       1280.94       1301.11    
   7  0.426216     -0.852810      -54.8001       54.8001       1232.73       1287.53    
   8  0.285108      -1.25489      -80.6369       80.6369       1270.13       1350.76    
   9  0.839246     -0.175251      -11.2614       11.2614       1341.38       1352.64    
  10  0.217639      -1.52492      -97.9884       97.9884       1360.24       1458.23    
  11  0.183996E-02  -6.29801      -404.699       404.699       1268.80       1673.50    
  12  0.682631     -0.381801      -24.5339       24.5339       1309.63       1334.17    
  13  0.203596      -1.59162      -102.275       102.275       1383.55       1485.82    
  14  0.881164     -0.126512      -8.12944       8.12944       1374.13       1382.26    
  15  0.711431     -0.340477      -21.8784       21.8784       1364.08       1385.96    
  16  0.874326     -0.134302      -8.63000       8.63000       1397.65       1406.28    
  17  0.814222     -0.205523      -13.2065       13.2065       1365.09       1378.30    
  18  0.995668     -0.434126E-02 -0.278962      0.278962       1339.96       1340.24    
  19  0.693805     -0.365564      -23.4905       23.4905       1365.33       1388.82    
  20  0.958584     -0.422984E-01  -2.71802       2.71802       1410.23       1412.95    
  21  0.748022     -0.290323      -18.6557       18.6557       1269.33       1287.98    
  22  0.696703     -0.361396      -23.2227       23.2227       1425.50       1448.73    
  23  0.732990     -0.310623      -19.9601       19.9601       1445.36       1465.32    
  24  0.534749     -0.625958      -40.2229       40.2229       1405.15       1445.37    
  25  0.691641     -0.368688      -23.6912       23.6912       1438.65       1462.34    
  26  0.300458      -1.20245      -77.2671       77.2671       1284.76       1362.03    
  27  0.977116     -0.231502E-01  -1.48759       1.48759       1441.50       1442.99    
  28  0.542581     -0.611418      -39.2887       39.2887       1448.36       1487.65    
  29  0.266111      -1.32384      -85.0677       85.0677       1489.44       1574.51    
  30  0.692298     -0.367738      -23.6302       23.6302       1256.72       1280.35    
  31  0.664047     -0.409403      -26.3075       26.3075       1491.51       1517.81    
  32  0.542186     -0.612146      -39.3354       39.3354       1469.94       1509.28    
  33  0.362243      -1.01544      -65.2503       65.2503       1494.23       1559.48    
  34  0.578658     -0.547044      -35.1521       35.1521       1500.10       1535.25    
  35  0.489298     -0.714783      -45.9307       45.9307       1508.93       1554.86    
  36  0.617485     -0.482100      -30.9789       30.9789       1452.28       1483.26    
  37  0.368651     -0.997905      -64.1236       64.1236       1453.78       1517.90    
  38  0.198936      -1.61477      -103.762       103.762       1548.55       1652.32    
  39  0.505263     -0.682676      -43.8676       43.8676       1552.58       1596.44    
  40  0.983997     -0.161325E-01  -1.03665       1.03665       1474.69       1475.73    
  41  0.630553     -0.461159      -29.6332       29.6332       1553.35       1582.98    
  42  0.423821E-01  -3.16103      -203.122       203.122       1456.76       1659.88    
  43  0.488935     -0.715526      -45.9785       45.9785       1456.43       1502.41    
  44  0.402078     -0.911110      -58.5463       58.5463       1539.50       1598.05    
  45  0.380878     -0.965277      -62.0270       62.0270       1506.28       1568.31    
  46  0.260585E-01  -3.64741      -234.376       234.376       1449.54       1683.91    
  47  0.681660     -0.383224      -24.6253       24.6253       1584.73       1609.36    
  48  0.489074     -0.715241      -45.9601       45.9601       1577.53       1623.49    
  49  0.752363     -0.284536      -18.2838       18.2838       1576.52       1594.80    
  50  0.978934     -0.212911E-01  -1.36813       1.36813       1354.87       1356.24    
  51  0.297789      -1.21137      -77.8406       77.8406       1597.26       1675.10    
  52  0.551604     -0.594926      -38.2289       38.2289       1518.51       1556.74    
  53  0.546413     -0.604381      -38.8365       38.8365       1561.64       1600.48    
  54  0.831880     -0.184067      -11.8278       11.8278       1504.39       1516.22    
  55  0.873708     -0.135010      -8.67547       8.67547       1631.36       1640.03    
  56  0.169447      -1.77521      -114.072       114.072       1528.44       1642.51    
  57  0.434000     -0.834712      -53.6371       53.6371       1675.73       1729.37    
  58  0.506119     -0.680984      -43.7588       43.7588       1733.08       1776.83    
  59  0.168470      -1.78100      -114.444       114.444       1652.26       1766.71    
  60  0.820014     -0.198433      -12.7510       12.7510       1716.14       1728.89    
  61  0.973689     -0.266631E-01  -1.71332       1.71332       1765.98       1767.69    
  62  0.438579     -0.824215      -52.9626       52.9626       1690.37       1743.34    
  63  0.725095     -0.321452      -20.6560       20.6560       1663.06       1683.72    
  64  0.857338     -0.153923      -9.89083       9.89083       1436.92       1446.81    
loop,thermsimp(1:2)       36   93.4101       32.0193    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       1510.75         68.36          1.08         39.99          1.38          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    1510.7       0.8059     -3.646      3.070     -102.6     0.9593E-01
                     -0.1243     0.9875     -99.70      3.934     0.4215    

                       1.174     0.4331      2.198      7713.      7000.    

                      -1.876      0.000      0.000      0.000     -1.221    



                      -1.994      0.000      0.000      7000.     -191.3    

                      -1.320     -3.646     -4.641     -3.277      2.300    

                      -4.874     -3.949      5430.      0.000      8764.    



                       2990.      7054.      7987.      3871.      2896.    

                       1915.     0.1372     0.1840     0.1362     0.2103    

                     -0.2486     0.2372     0.2027     0.2600     0.9569E-01



                      -1.112    -0.1420      0.000     0.2533E-01 0.6836E-01

                      0.1270     0.1672    -0.7116     0.2661     0.3030    

                      0.5506E-01 0.1977    -0.5524     -1.075      7000.    



                      -2.058     -1.611     -2.202     -2.295    -0.3807    

                     -0.3252      9.202      9.257    -0.1619E+05 -5.981    

                       0.000      0.000      9.147      8.645    -0.1969E+05



                      -6.000      0.000      0.000      8.875      9.139    

                     -0.1944E+05 -6.000      0.000      0.000      9.002    

                       9.013    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1510.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       36
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       37
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      260     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -57.0891       57.0891       1215.97       1273.06    
   2  0.697205     -0.360676      -23.1764       23.1764       1238.67       1261.84    
   3  0.314648E-01  -3.45889      -222.262       222.262       1256.72       1478.98    
   4  0.857269     -0.154003      -9.89596       9.89596       1187.13       1197.03    
   5  0.652165     -0.427457      -27.4677       27.4677       1232.73       1260.20    
   6  0.510145     -0.673060      -43.2496       43.2496       1269.33       1312.58    
   7  0.175175      -1.74197      -111.936       111.936       1280.94       1392.87    
   8  0.373803     -0.984025      -63.2317       63.2317       1312.30       1375.53    
   9  0.514972     -0.663642      -42.6445       42.6445       1309.63       1352.28    
  10  0.548235     -0.601051      -38.6225       38.6225       1339.96       1378.59    
  11  0.541310     -0.613763      -39.4394       39.4394       1270.13       1309.57    
  12  0.734083     -0.309133      -19.8643       19.8643       1341.38       1361.24    
  13  0.422599     -0.861332      -55.3477       55.3477       1354.87       1410.22    
  14  0.287055      -1.24808      -80.1995       80.1995       1284.76       1364.96    
  15  0.885133     -0.122017      -7.84061       7.84061       1365.09       1372.93    
  16  0.391075     -0.938857      -60.3293       60.3293       1374.13       1434.46    
  17  0.473784     -0.747003      -48.0011       48.0011       1364.08       1412.08    
  18  0.691812     -0.368440      -23.6753       23.6753       1365.33       1389.00    
  19  0.644447     -0.439363      -28.2327       28.2327       1397.65       1425.88    
  20  0.805933     -0.215754      -13.8640       13.8640       1262.61       1276.48    
  21  0.393766     -0.931998      -59.8886       59.8886       1410.23       1470.12    
  22  0.907098E-01  -2.40009      -154.226       154.226       1441.50       1595.73    
  23  0.376515     -0.976796      -62.7672       62.7672       1405.15       1467.92    
  24  0.819190     -0.199439      -12.8156       12.8156       1436.92       1449.74    
  25  0.692438     -0.367536      -23.6172       23.6172       1425.50       1449.12    
  26  0.188370      -1.66935      -107.269       107.269       1360.24       1467.51    
  27  0.500532     -0.692083      -44.4721       44.4721       1438.65       1483.12    
  28  0.282311      -1.26475      -81.2704       81.2704       1445.36       1526.63    
  29  0.338061      -1.08453      -69.6899       69.6899       1474.69       1544.38    
  30  0.466208     -0.763123      -49.0370       49.0370       1452.28       1501.32    
  31  0.893084     -0.113075      -7.26599       7.26599       1383.55       1390.81    
  32  0.818806     -0.199908      -12.8458       12.8458       1448.36       1461.20    
  33  0.585066     -0.536031      -34.4444       34.4444       1456.43       1490.88    
  34  0.527412     -0.639774      -41.1108       41.1108       1469.94       1511.05    
  35  0.994295     -0.572143E-02 -0.367649      0.367649       1504.39       1504.76    
  36  0.739278     -0.302082      -19.4112       19.4112       1491.51       1510.92    
  37  0.230995      -1.46536      -94.1613       94.1613       1453.78       1547.94    
  38  0.414929     -0.879648      -56.5246       56.5246       1500.10       1556.62    
  39  0.378446     -0.971682      -62.4386       62.4386       1508.93       1571.37    
  40  0.368620     -0.997990      -64.1291       64.1291       1518.51       1582.64    
  41  0.301312      -1.19961      -77.0847       77.0847       1494.23       1571.31    
  42  0.105882E-01  -4.54801      -292.247       292.247       1506.28       1798.53    
  43  0.481885     -0.730049      -46.9117       46.9117       1489.44       1536.35    
  44  0.446716     -0.805833      -51.7814       51.7814       1553.35       1605.13    
  45  0.482098     -0.729608      -46.8833       46.8833       1576.52       1623.40    
  46  0.278892      -1.27693      -82.0534       82.0534       1552.58       1634.63    
  47  0.756484     -0.279074      -17.9328       17.9328       1539.50       1557.43    
  48  0.662766     -0.411334      -26.4316       26.4316       1561.64       1588.07    
  49  0.433861E-01  -3.13762      -201.618       201.618       1584.73       1786.35    
  50  0.825649E-02  -4.79676      -308.231       308.231       1577.53       1885.76    
  51  0.476679     -0.740911      -47.6097       47.6097       1631.36       1678.97    
  52  0.128614      -2.05094      -131.790       131.790       1528.44       1660.23    
  53  0.609086     -0.495797      -31.8590       31.8590       1548.55       1580.41    
  54  0.484878E-01  -3.02644      -194.474       194.474       1456.76       1651.23    
  55  0.287383E-02  -5.85211      -376.046       376.046       1268.80       1644.85    
  56  0.699724     -0.357070      -22.9447       22.9447       1597.26       1620.21    
  57  0.407524     -0.897655      -57.6817       57.6817       1663.06       1720.75    
  58  0.530107     -0.634677      -40.7832       40.7832       1449.54       1490.32    
  59  0.589469E-01  -2.83112      -181.923       181.923       1716.14       1898.06    
  60  0.357066E-01  -3.33242      -214.135       214.135       1675.73       1889.87    
  61  0.726760     -0.319159      -20.5086       20.5086       1690.37       1710.88    
  62  0.486103     -0.721334      -46.3517       46.3517       1652.26       1698.61    
  63  0.212811      -1.54735      -99.4300       99.4300       1765.98       1865.41    
  64  0.264725      -1.32906      -85.4033       85.4033       1510.75       1596.15    
loop,thermsimp(1:2)       37   57.0891       23.1764    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       1430.15         69.36          1.23         40.29          0.00          0.05        110.93
Just calling func    0   0        110.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1430.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       37
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       38
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      261     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -57.4727       57.4727       1187.13       1244.61    
   2  0.259700      -1.34823      -86.6347       86.6347       1232.73       1319.36    
   3  0.681144E-01  -2.68657      -172.634       172.634       1238.67       1411.30    
   4  0.158140      -1.84427      -118.510       118.510       1215.97       1334.48    
   5  0.497681     -0.697796      -44.8391       44.8391       1262.61       1307.45    
   6  0.800218     -0.222871      -14.3213       14.3213       1270.13       1284.45    
   7  0.831967     -0.183962      -11.8211       11.8211       1269.33       1281.15    
   8  0.707345     -0.346237      -22.2486       22.2486       1309.63       1331.88    
   9  0.265927      -1.32454      -85.1123       85.1123       1341.38       1426.49    
  10  0.659046     -0.416962      -26.7932       26.7932       1284.76       1311.55    
  11  0.654587E-01  -2.72634      -175.189       175.189       1365.09       1540.28    
  12  0.223329      -1.49911      -96.3303       96.3303       1312.30       1408.63    
  13  0.996019     -0.398855E-02 -0.256297      0.256297       1339.96       1340.22    
  14  0.553910     -0.590753      -37.9607       37.9607       1365.33       1403.29    
  15  0.218863      -1.51931      -97.6282       97.6282       1383.55       1481.18    
  16  0.414020     -0.881841      -56.6655       56.6655       1280.94       1337.60    
  17  0.229117      -1.47352      -94.6860       94.6860       1354.87       1449.56    
  18  0.341764      -1.07363      -68.9899       68.9899       1364.08       1433.07    
  19  0.357052      -1.02987      -66.1778       66.1778       1397.65       1463.82    
  20  0.780779     -0.247463      -15.9016       15.9016       1374.13       1390.03    
  21  0.382234     -0.961721      -61.7985       61.7985       1425.50       1487.30    
  22  0.123899      -2.08829      -134.190       134.190       1436.92       1571.11    
  23  0.393312     -0.933152      -59.9627       59.9627       1448.36       1508.32    
  24  0.481741     -0.730349      -46.9309       46.9309       1360.24       1407.17    
  25  0.120001      -2.12026      -136.244       136.244       1405.15       1541.39    
  26  0.506023     -0.681173      -43.7710       43.7710       1410.23       1454.00    
  27  0.891157     -0.115235      -7.40481       7.40481       1256.72       1264.12    
  28  0.584674     -0.536701      -34.4875       34.4875       1438.65       1473.14    
  29  0.313196      -1.16093      -74.5990       74.5990       1449.54       1524.14    
  30  0.507340     -0.678574      -43.6040       43.6040       1456.43       1500.04    
  31  0.985030     -0.150835E-01 -0.969242      0.969242       1452.28       1453.25    
  32  0.186570      -1.67895      -107.886       107.886       1504.39       1612.28    
  33  0.992622     -0.740493E-02 -0.475828      0.475828       1491.51       1491.98    
  34  0.344152      -1.06667      -68.5424       68.5424       1469.94       1538.48    
  35  0.327214      -1.11714      -71.7855       71.7855       1445.36       1517.14    
  36  0.722008     -0.325719      -20.9302       20.9302       1489.44       1510.37    
  37  0.471441     -0.751960      -48.3197       48.3197       1474.69       1523.01    
  38  0.483594     -0.726510      -46.6842       46.6842       1453.78       1500.46    
  39  0.799410     -0.223881      -14.3862       14.3862       1500.10       1514.49    
  40  0.864070     -0.146101      -9.38821       9.38821       1539.50       1548.89    
  41  0.326419      -1.11957      -71.9419       71.9419       1494.23       1566.17    
  42  0.970166E-01  -2.33287      -149.906       149.906       1508.93       1658.84    
  43  0.822479     -0.195432      -12.5581       12.5581       1548.55       1561.11    
  44  0.719858     -0.328701      -21.1218       21.1218       1518.51       1539.64    
  45  0.359763      -1.02231      -65.6919       65.6919       1561.64       1627.33    
  46  0.879180     -0.128765      -8.27424       8.27424       1441.50       1449.78    
  47  0.152514      -1.88050      -120.838       120.838       1510.75       1631.58    
  48  0.379430     -0.969085      -62.2717       62.2717       1553.35       1615.62    
  49  0.444703     -0.810349      -52.0716       52.0716       1597.26       1649.34    
  50  0.240485      -1.42510      -91.5743       91.5743       1576.52       1668.10    
  51  0.682479     -0.382024      -24.5482       24.5482       1552.58       1577.13    
  52  0.989508     -0.105479E-01 -0.677789      0.677789       1268.80       1269.48    
  53  0.626329E-01  -2.77046      -178.025       178.025       1456.76       1634.79    
  54  0.217806      -1.52415      -97.9393       97.9393       1528.44       1626.38    
  55  0.297102      -1.21368      -77.9890       77.9890       1631.36       1709.35    
  56  0.447982     -0.803002      -51.5995       51.5995       1652.26       1703.86    
  57  0.343456      -1.06870      -68.6725       68.6725       1690.37       1759.05    
  58  0.737340     -0.304706      -19.5799       19.5799       1663.06       1682.64    
  59  0.863080     -0.147248      -9.46187       9.46187       1584.73       1594.19    
  60  0.463462     -0.769030      -49.4165       49.4165       1506.28       1555.70    
  61  0.120067      -2.11970      -136.208       136.208       1765.98       1902.19    
  62  0.758415     -0.276525      -17.7690       17.7690       1577.53       1595.30    
  63  0.356867      -1.03039      -66.2111       66.2111       1675.73       1741.94    
  64  0.811695     -0.208631      -13.4063       13.4063       1430.15       1443.56    
loop,thermsimp(1:2)       38   57.4727       86.6347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       1884.61         69.22          1.21         40.46          0.11          0.05        111.06
Just calling func    0   0        111.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1884.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       38
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       39
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      262     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -133.586       133.586       1187.13       1320.72    
   2  0.274837      -1.29158      -82.9944       82.9944       1256.72       1339.71    
   3  0.305931E-01  -3.48698      -224.067       224.067       1268.80       1492.87    
   4  0.929157     -0.734779E-01  -4.72156       4.72156       1269.33       1274.05    
   5  0.995956     -0.405208E-02 -0.260379      0.260379       1270.13       1270.39    
   6  0.904971     -0.998521E-01  -6.41632       6.41632       1262.61       1269.03    
   7  0.189758      -1.66200      -106.798       106.798       1284.76       1391.56    
   8  0.134931      -2.00299      -128.709       128.709       1232.73       1361.44    
   9  0.302412      -1.19596      -76.8506       76.8506       1309.63       1386.49    
  10  0.389155     -0.943777      -60.6454       60.6454       1215.97       1276.62    
  11  0.947428     -0.540040E-01  -3.47020       3.47020       1280.94       1284.41    
  12  0.338357      -1.08365      -69.6336       69.6336       1339.96       1409.60    
  13  0.937476     -0.645645E-01  -4.14880       4.14880       1374.13       1378.28    
  14  0.399493     -0.917560      -58.9608       58.9608       1365.33       1424.29    
  15  0.527586     -0.639444      -41.0895       41.0895       1360.24       1401.33    
  16  0.297740      -1.21153      -77.8511       77.8511       1312.30       1390.15    
  17  0.557978     -0.583436      -37.4906       37.4906       1238.67       1276.16    
  18  0.267521      -1.31856      -84.7281       84.7281       1341.38       1426.11    
  19  0.637637     -0.449986      -28.9153       28.9153       1364.08       1393.00    
  20  0.838569     -0.176059      -11.3132       11.3132       1430.15       1441.46    
  21  0.132199E-01  -4.32603      -277.983       277.983       1354.87       1632.85    
  22  0.745606     -0.293557      -18.8635       18.8635       1441.50       1460.37    
  23  0.334504      -1.09511      -70.3696       70.3696       1452.28       1522.65    
  24  0.118852      -2.12987      -136.862       136.862       1410.23       1547.10    
  25  0.319911      -1.13971      -73.2360       73.2360       1397.65       1470.88    
  26  0.638302E-01  -2.75153      -176.808       176.808       1438.65       1615.46    
  27  0.173204      -1.75329      -112.663       112.663       1383.55       1496.21    
  28  0.885640     -0.121444      -7.80380       7.80380       1425.50       1433.31    
  29  0.710758     -0.341423      -21.9392       21.9392       1491.51       1513.45    
  30  0.938919     -0.630265E-01  -4.04997       4.04997       1456.43       1460.48    
  31  0.217740      -1.52445      -97.9586       97.9586       1453.78       1551.74    
  32  0.130036      -2.03994      -131.083       131.083       1448.36       1579.44    
  33  0.331090      -1.10537      -71.0289       71.0289       1489.44       1560.47    
  34  0.453525E-01  -3.09329      -198.769       198.769       1500.10       1698.87    
  35  0.494600     -0.704006      -45.2382       45.2382       1445.36       1490.59    
  36  0.488771E-01  -3.01845      -193.960       193.960       1474.69       1668.65    
  37  0.262916E-01  -3.63850      -233.804       233.804       1449.54       1683.34    
  38  0.975293     -0.250177E-01  -1.60760       1.60760       1469.94       1471.55    
  39  0.521026     -0.651955      -41.8935       41.8935       1518.51       1560.41    
  40  0.210960      -1.55609      -99.9914       99.9914       1365.09       1465.08    
  41  0.475166E-02  -5.34926      -343.734       343.734       1405.15       1748.88    
  42  0.675859     -0.391771      -25.1745       25.1745       1539.50       1564.67    
  43  0.691418     -0.369011      -23.7120       23.7120       1506.28       1529.99    
  44  0.425152     -0.855309      -54.9607       54.9607       1548.55       1603.52    
  45  0.141313      -1.95678      -125.739       125.739       1494.23       1619.97    
  46  0.902170     -0.102952      -6.61552       6.61552       1436.92       1443.54    
  47  0.794321     -0.230268      -14.7966       14.7966       1552.58       1567.37    
  48  0.685387     -0.377772      -24.2750       24.2750       1584.73       1609.01    
  49  0.273223      -1.29747      -83.3729       83.3729       1577.53       1660.90    
  50  0.784111     -0.243205      -15.6279       15.6279       1504.39       1520.02    
  51  0.824524     -0.192949      -12.3986       12.3986       1553.35       1565.75    
  52  0.855082     -0.156558      -10.0602       10.0602       1528.44       1538.50    
  53  0.744692E-01  -2.59737      -166.902       166.902       1561.64       1728.54    
  54  0.294857E-01  -3.52385      -226.436       226.436       1510.75       1737.18    
  55  0.225962      -1.48739      -95.5769       95.5769       1456.76       1552.34    
  56  0.211073      -1.55555      -99.9569       99.9569       1597.26       1697.22    
  57  0.525673E-01  -2.94566      -189.283       189.283       1508.93       1698.22    
  58  0.855455     -0.156122      -10.0321       10.0321       1576.52       1586.55    
  59  0.169262E-01  -4.07890      -262.103       262.103       1663.06       1925.17    
  60  0.578360     -0.547559      -35.1852       35.1852       1652.26       1687.45    
  61  0.753083     -0.283580      -18.2224       18.2224       1631.36       1649.58    
  62  0.942983     -0.587068E-01  -3.77240       3.77240       1675.73       1679.50    
  63  0.164299      -1.80607      -116.055       116.055       1690.37       1806.43    
  64  0.964876     -0.357557E-01  -2.29760       2.29760       1884.61       1886.90    
loop,thermsimp(1:2)       39   133.586       82.9944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       1474.05         68.92          1.22         40.62          0.03          0.05        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1474.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       39
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       40
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      263     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -49.1180       49.1180       1262.61       1311.73    
   2  0.310178      -1.17061      -75.2212       75.2212       1270.13       1345.35    
   3  0.883713     -0.123623      -7.94381       7.94381       1269.33       1277.27    
   4  0.641465     -0.444001      -28.5307       28.5307       1238.67       1267.20    
   5  0.458576E-01  -3.08222      -198.058       198.058       1215.97       1414.03    
   6  0.611421     -0.491970      -31.6131       31.6131       1280.94       1312.55    
   7  0.292603      -1.22894      -78.9694       78.9694       1187.13       1266.10    
   8  0.180818      -1.71026      -109.899       109.899       1256.72       1366.62    
   9  0.490648     -0.712028      -45.7537       45.7537       1232.73       1278.48    
  10  0.538601     -0.618781      -39.7618       39.7618       1374.13       1413.89    
  11  0.451209     -0.795824      -51.1382       51.1382       1309.63       1360.77    
  12  0.610260     -0.493870      -31.7352       31.7352       1312.30       1344.03    
  13  0.425113     -0.855401      -54.9665       54.9665       1284.76       1339.73    
  14  0.647858     -0.434084      -27.8935       27.8935       1364.08       1391.98    
  15  0.394937     -0.929029      -59.6978       59.6978       1360.24       1419.94    
  16  0.452279E-01  -3.09604      -198.946       198.946       1339.96       1538.91    
  17  0.954905     -0.461437E-01  -2.96511       2.96511       1365.33       1368.29    
  18  0.362548      -1.01460      -65.1962       65.1962       1341.38       1406.58    
  19  0.808078     -0.213097      -13.6932       13.6932       1425.50       1439.20    
  20  0.219348      -1.51709      -97.4858       97.4858       1430.15       1527.64    
  21  0.206981      -1.57513      -101.215       101.215       1436.92       1538.14    
  22  0.719933     -0.328597      -21.1151       21.1151       1441.50       1462.62    
  23  0.950238     -0.510432E-01  -3.27994       3.27994       1456.43       1459.71    
  24  0.845993     -0.167244      -10.7468       10.7468       1365.09       1375.84    
  25  0.157926      -1.84563      -118.597       118.597       1397.65       1516.24    
  26  0.430020     -0.843924      -54.2291       54.2291       1469.94       1524.17    
  27  0.624159     -0.471350      -30.2881       30.2881       1445.36       1475.64    
  28  0.355386      -1.03455      -66.4784       66.4784       1268.80       1335.28    
  29  0.297353      -1.21284      -77.9347       77.9347       1383.55       1461.48    
  30  0.185476      -1.68483      -108.264       108.264       1491.51       1599.77    
  31  0.406569     -0.900002      -57.8325       57.8325       1504.39       1562.23    
  32  0.147052      -1.91697      -123.181       123.181       1452.28       1575.46    
  33  0.205955      -1.58010      -101.534       101.534       1506.28       1607.81    
  34  0.383503     -0.958409      -61.5857       61.5857       1528.44       1590.02    
  35  0.514677E-01  -2.96680      -190.641       190.641       1410.23       1600.87    
  36  0.499194     -0.694760      -44.6440       44.6440       1453.78       1498.42    
  37  0.103172E-01  -4.57394      -293.913       293.913       1456.76       1750.67    
  38  0.470163     -0.754676      -48.4941       48.4941       1518.51       1567.01    
  39  0.983694     -0.164404E-01  -1.05643       1.05643       1489.44       1490.50    
  40  0.880425     -0.127351      -8.18333       8.18333       1539.50       1547.68    
  41  0.969759     -0.307072E-01  -1.97319       1.97319       1553.35       1555.32    
  42  0.761826E-01  -2.57462      -165.441       165.441       1552.58       1718.02    
  43  0.124427      -2.08404      -133.916       133.916       1448.36       1582.27    
  44  0.997702     -0.230032E-02 -0.147815      0.147815       1576.52       1576.67    
  45  0.213939      -1.54206      -99.0903       99.0903       1548.55       1647.64    
  46  0.471369     -0.752113      -48.3295       48.3295       1584.73       1633.06    
  47  0.421561E-01  -3.16638      -203.466       203.466       1438.65       1642.12    
  48  0.693092     -0.366592      -23.5566       23.5566       1494.23       1517.79    
  49  0.375157     -0.980409      -62.9994       62.9994       1354.87       1417.87    
  50  0.285659      -1.25296      -80.5127       80.5127       1631.36       1711.87    
  51  0.338951      -1.08190      -69.5211       69.5211       1577.53       1647.05    
  52  0.930127E-01  -2.37502      -152.615       152.615       1474.69       1627.31    
  53  0.840878     -0.173309      -11.1365       11.1365       1675.73       1686.87    
  54  0.384591     -0.955575      -61.4036       61.4036       1449.54       1510.94    
  55  0.212856      -1.54714      -99.4163       99.4163       1652.26       1751.68    
  56  0.878356     -0.129704      -8.33454       8.33454       1597.26       1605.60    
  57  0.623236E-01  -2.77542      -178.343       178.343       1508.93       1687.28    
  58  0.374221E-02  -5.58808      -359.080       359.080       1500.10       1859.18    
  59  0.851985     -0.160186      -10.2933       10.2933       1561.64       1571.94    
  60  0.779613     -0.248958      -15.9976       15.9976       1510.75       1526.74    
  61  0.991658     -0.837700E-02 -0.538291      0.538291       1405.15       1405.69    
  62  0.425290     -0.854985      -54.9398       54.9398       1690.37       1745.31    
  63  0.613403     -0.488733      -31.4051       31.4051       1884.61       1916.01    
  64  0.487347E-01  -3.02136      -194.148       194.148       1474.05       1668.20    
loop,thermsimp(1:2)       40   49.1180       75.2212    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265       1777.39         69.23          1.27         40.45          0.04          0.04        111.03
Just calling func    0   0        111.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1777.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       40
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       41
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      264     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -94.1391       94.1391       1187.13       1281.27    
   2  0.984723     -0.153953E-01 -0.989277      0.989277       1238.67       1239.66    
   3  0.689569     -0.371688      -23.8840       23.8840       1269.33       1293.21    
   4  0.539532     -0.617054      -39.6508       39.6508       1232.73       1272.38    
   5  0.103859      -2.26472      -145.527       145.527       1262.61       1408.14    
   6  0.403261     -0.908171      -58.3575       58.3575       1280.94       1339.30    
   7  0.545138     -0.606716      -38.9865       38.9865       1268.80       1307.79    
   8  0.211198      -1.55496      -99.9191       99.9191       1284.76       1384.68    
   9  0.533123     -0.629004      -40.4187       40.4187       1312.30       1352.72    
  10  0.891214     -0.115171      -7.40066       7.40066       1270.13       1277.53    
  11  0.604806     -0.502847      -32.3121       32.3121       1309.63       1341.95    
  12  0.176166      -1.73633      -111.574       111.574       1256.72       1368.29    
  13  0.733693     -0.309664      -19.8985       19.8985       1365.33       1385.23    
  14  0.248504      -1.39230      -89.4666       89.4666       1365.09       1454.56    
  15  0.183808      -1.69387      -108.845       108.845       1364.08       1472.93    
  16  0.308674E-02  -5.78064      -371.454       371.454       1405.15       1776.60    
  17  0.651025     -0.429207      -27.5801       27.5801       1341.38       1368.96    
  18  0.864353     -0.145775      -9.36722       9.36722       1374.13       1383.49    
  19  0.547352     -0.602664      -38.7261       38.7261       1215.97       1254.70    
  20  0.631248     -0.460057      -29.5625       29.5625       1354.87       1384.43    
  21  0.344368E-01  -3.36863      -216.462       216.462       1360.24       1576.70    
  22  0.876828     -0.131444      -8.44638       8.44638       1425.50       1433.95    
  23  0.884538     -0.122690      -7.88386       7.88386       1456.43       1464.32    
  24  0.926808     -0.760084E-01  -4.88417       4.88417       1383.55       1388.43    
  25  0.823462     -0.194237      -12.4814       12.4814       1441.50       1453.99    
  26  0.852580     -0.159489      -10.2485       10.2485       1445.36       1455.60    
  27  0.577707     -0.548689      -35.2578       35.2578       1489.44       1524.70    
  28  0.510093     -0.673163      -43.2563       43.2563       1453.78       1497.03    
  29  0.890288     -0.116210      -7.46745       7.46745       1449.54       1457.01    
  30  0.304875      -1.18785      -76.3293       76.3293       1397.65       1473.97    
  31  0.152164      -1.88279      -120.985       120.985       1494.23       1615.21    
  32  0.718687     -0.330329      -21.2264       21.2264       1469.94       1491.17    
  33  0.488128     -0.717177      -46.0845       46.0845       1510.75       1556.83    
  34  0.373052     -0.986038      -63.3611       63.3611       1430.15       1493.51    
  35  0.247351      -1.39695      -89.7654       89.7654       1436.92       1526.69    
  36  0.532108     -0.630909      -40.5411       40.5411       1339.96       1380.50    
  37  0.828879E-02  -4.79285      -307.980       307.980       1539.50       1847.48    
  38  0.168277      -1.78214      -114.517       114.517       1553.35       1667.87    
  39  0.253216      -1.37351      -88.2596       88.2596       1504.39       1592.65    
  40  0.458588     -0.779602      -50.0959       50.0959       1518.51       1568.61    
  41  0.725692     -0.320630      -20.6031       20.6031       1561.64       1582.24    
  42  0.283543      -1.26039      -80.9906       80.9906       1452.28       1533.27    
  43  0.798055     -0.225578      -14.4952       14.4952       1576.52       1591.02    
  44  0.805371     -0.216453      -13.9089       13.9089       1448.36       1462.27    
  45  0.580747     -0.543441      -34.9206       34.9206       1528.44       1563.36    
  46  0.581119     -0.542799      -34.8793       34.8793       1491.51       1526.39    
  47  0.305196      -1.18680      -76.2618       76.2618       1410.23       1486.50    
  48  0.905702     -0.990454E-01  -6.36448       6.36448       1597.26       1603.63    
  49  0.265633E-01  -3.62822      -233.143       233.143       1506.28       1739.42    
  50  0.114529E-01  -4.46951      -287.203       287.203       1474.69       1761.90    
  51  0.990634     -0.941033E-02 -0.604691      0.604691       1584.73       1585.34    
  52  0.609564     -0.495011      -31.8085       31.8085       1438.65       1470.46    
  53  0.380905     -0.965204      -62.0223       62.0223       1577.53       1639.55    
  54  0.902244     -0.102870      -6.61026       6.61026       1548.55       1555.16    
  55  0.841859     -0.172142      -11.0616       11.0616       1474.05       1485.11    
  56  0.954561     -0.465036E-01  -2.98824       2.98824       1675.73       1678.72    
  57  0.637314     -0.450492      -28.9478       28.9478       1508.93       1537.88    
  58  0.224695      -1.49301      -95.9382       95.9382       1631.36       1727.30    
  59  0.537548     -0.620738      -39.8875       39.8875       1552.58       1592.46    
  60  0.271295      -1.30455      -83.8281       83.8281       1690.37       1774.20    
  61  0.524725E-02  -5.25005      -337.359       337.359       1456.76       1794.12    
  62  0.194770      -1.63594      -105.122       105.122       1652.26       1757.38    
  63  0.833225E-01  -2.48504      -159.684       159.684       1500.10       1659.78    
  64  0.195984      -1.62972      -104.723       104.723       1777.39       1882.11    
loop,thermsimp(1:2)       41   94.1391      0.989277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266       1884.61         69.26          1.21         40.39          0.00          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    267       1238.11         69.48          1.26         39.99          0.05          0.05        110.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1238.11
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       41
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       42
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      266     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -200.284       200.284       1238.67       1438.95    
   2  0.196215      -1.62854      -104.647       104.647       1215.97       1320.62    
   3  0.501152     -0.690846      -44.3926       44.3926       1232.73       1277.12    
   4  0.288339      -1.24362      -79.9128       79.9128       1270.13       1350.04    
   5  0.773132     -0.257306      -16.5340       16.5340       1187.13       1203.67    
   6  0.417683     -0.873033      -56.0996       56.0996       1269.33       1325.43    
   7  0.229479      -1.47195      -94.5846       94.5846       1268.80       1363.39    
   8  0.964123     -0.365367E-01  -2.34778       2.34778       1280.94       1283.29    
   9  0.263782      -1.33263      -85.6326       85.6326       1309.63       1395.27    
  10  0.102960      -2.27342      -146.086       146.086       1312.30       1458.38    
  11  0.828790     -0.187788      -12.0669       12.0669       1256.72       1268.79    
  12  0.738697     -0.302868      -19.4617       19.4617       1341.38       1360.84    
  13  0.458595     -0.779589      -50.0950       50.0950       1339.96       1390.06    
  14  0.905176     -0.996260E-01  -6.40179       6.40179       1374.13       1380.53    
  15  0.147067      -1.91687      -123.174       123.174       1354.87       1478.04    
  16  0.142365      -1.94936      -125.262       125.262       1284.76       1410.02    
  17  0.483147     -0.727435      -46.7437       46.7437       1365.33       1412.07    
  18  0.640417     -0.445636      -28.6358       28.6358       1383.55       1412.18    
  19  0.719349     -0.329408      -21.1672       21.1672       1262.61       1283.78    
  20  0.714234     -0.336545      -21.6258       21.6258       1425.50       1447.13    
  21  0.825507     -0.191757      -12.3220       12.3220       1441.50       1453.83    
  22  0.155188      -1.86312      -119.721       119.721       1365.09       1484.81    
  23  0.248874      -1.39081      -89.3710       89.3710       1445.36       1534.73    
  24  0.107953      -2.22606      -143.043       143.043       1449.54       1592.58    
  25  0.349169      -1.05220      -67.6124       67.6124       1448.36       1515.97    
  26  0.967311     -0.332356E-01  -2.13566       2.13566       1456.43       1458.57    
  27  0.519506     -0.654877      -42.0813       42.0813       1438.65       1480.73    
  28  0.462662     -0.770758      -49.5276       49.5276       1364.08       1413.61    
  29  0.811438     -0.208948      -13.4266       13.4266       1397.65       1411.07    
  30  0.394710E-01  -3.23219      -207.695       207.695       1474.05       1681.75    
  31  0.482930     -0.727884      -46.7725       46.7725       1410.23       1457.01    
  32  0.520883     -0.652231      -41.9112       41.9112       1469.94       1511.85    
  33  0.980978E-01  -2.32179      -149.194       149.194       1430.15       1579.34    
  34  0.626549     -0.467529      -30.0426       30.0426       1453.78       1483.82    
  35  0.618402     -0.480616      -30.8836       30.8836       1489.44       1520.32    
  36  0.681438     -0.383550      -24.6462       24.6462       1491.51       1516.15    
  37  0.816820     -0.202336      -13.0018       13.0018       1436.92       1449.92    
  38  0.578487     -0.547340      -35.1711       35.1711       1452.28       1487.45    
  39  0.349734      -1.05058      -67.5085       67.5085       1508.93       1576.44    
  40  0.945672     -0.558596E-01  -3.58944       3.58944       1548.55       1552.14    
  41  0.767680     -0.264382      -16.9887       16.9887       1510.75       1527.74    
  42  0.122064      -2.10321      -135.148       135.148       1528.44       1663.59    
  43  0.211623      -1.55295      -99.7896       99.7896       1518.51       1618.30    
  44  0.969992E-01  -2.33305      -149.918       149.918       1360.24       1510.16    
  45  0.877482     -0.130699      -8.39850       8.39850       1561.64       1570.04    
  46  0.448991     -0.800752      -51.4549       51.4549       1584.73       1636.19    
  47  0.833113     -0.182586      -11.7327       11.7327       1576.52       1588.25    
  48  0.691765     -0.368508      -23.6797       23.6797       1552.58       1576.26    
  49  0.310664      -1.16904      -75.1207       75.1207       1504.39       1579.51    
  50  0.422283     -0.862080      -55.3958       55.3958       1597.26       1652.66    
  51  0.382184E-01  -3.26444      -209.767       209.767       1494.23       1704.00    
  52  0.679614E-01  -2.68882      -172.779       172.779       1577.53       1750.31    
  53  0.580404     -0.544031      -34.9585       34.9585       1500.10       1535.06    
  54  0.887981     -0.118805      -7.63418       7.63418       1553.35       1560.99    
  55  0.540749     -0.614799      -39.5059       39.5059       1675.73       1715.24    
  56  0.749712     -0.288066      -18.5106       18.5106       1631.36       1649.87    
  57  0.428385     -0.847733      -54.4738       54.4738       1506.28       1560.75    
  58  0.271790      -1.30272      -83.7107       83.7107       1652.26       1735.97    
  59  0.317865      -1.14613      -73.6482       73.6482       1474.69       1548.34    
  60  0.855566     -0.155992      -10.0238       10.0238       1690.37       1700.40    
  61  0.153120      -1.87653      -120.583       120.583       1405.15       1525.73    
  62  0.507684     -0.677896      -43.5604       43.5604       1456.76       1500.32    
  63  0.270723      -1.30666      -83.9635       83.9635       1539.50       1623.46    
  64  0.721736     -0.326096      -20.9543       20.9543       1238.11       1259.07    
loop,thermsimp(1:2)       42   200.284       104.647    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       1404.73         69.41          1.25         40.12          0.04          0.04        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1404.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       42
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    514.066      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    64.2582               316
loop is:       43
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      267     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -77.6670       77.6670       1187.13       1264.80    
   2  0.383173     -0.959268      -61.6409       61.6409       1238.11       1299.76    
   3  0.386205     -0.951387      -61.1345       61.1345       1256.72       1317.85    
   4  0.362178      -1.01562      -65.2619       65.2619       1232.73       1297.99    
   5  0.394462     -0.930233      -59.7752       59.7752       1280.94       1340.71    
   6  0.883072     -0.124349      -7.99043       7.99043       1262.61       1270.60    
   7  0.571477     -0.559531      -35.9545       35.9545       1215.97       1251.93    
   8  0.944036     -0.575912E-01  -3.70071       3.70071       1269.33       1273.03    
   9  0.326573      -1.11910      -71.9115       71.9115       1270.13       1342.04    
  10  0.467297     -0.760791      -48.8871       48.8871       1341.38       1390.27    
  11  0.828365     -0.188301      -12.0999       12.0999       1268.80       1280.90    
  12  0.826991     -0.189962      -12.2066       12.2066       1374.13       1386.33    
  13  0.675447E-01  -2.69497      -173.174       173.174       1339.96       1513.14    
  14  0.924113     -0.789214E-01  -5.07135       5.07135       1309.63       1314.71    
  15  0.810131     -0.210560      -13.5302       13.5302       1284.76       1298.29    
  16  0.410286     -0.890900      -57.2477       57.2477       1397.65       1454.89    
  17  0.334977      -1.09369      -70.2789       70.2789       1365.33       1435.61    
  18  0.119017      -2.12849      -136.773       136.773       1383.55       1520.32    
  19  0.447328     -0.804463      -51.6934       51.6934       1364.08       1415.78    
  20  0.324388E-02  -5.73098      -368.263       368.263       1238.67       1606.93    
  21  0.158272      -1.84344      -118.456       118.456       1425.50       1543.96    
  22  0.241219      -1.42205      -91.3785       91.3785       1436.92       1528.30    
  23  0.259790      -1.34788      -86.6125       86.6125       1441.50       1528.12    
  24  0.521973     -0.650139      -41.7768       41.7768       1410.23       1452.01    
  25  0.336335      -1.08965      -70.0188       70.0188       1312.30       1382.32    
  26  0.642248     -0.442780      -28.4523       28.4523       1456.43       1484.88    
  27  0.984615     -0.155047E-01 -0.996304      0.996304       1354.87       1355.87    
  28  0.373782     -0.984082      -63.2354       63.2354       1438.65       1501.89    
  29  0.932479     -0.699087E-01  -4.49221       4.49221       1453.78       1458.27    
  30  0.711360     -0.340577      -21.8849       21.8849       1365.09       1386.98    
  31  0.315363      -1.15403      -74.1561       74.1561       1452.28       1526.43    
  32  0.528583     -0.637556      -40.9682       40.9682       1456.76       1497.73    
  33  0.622355E-01  -2.77683      -178.434       178.434       1360.24       1538.68    
  34  0.144849      -1.93206      -124.151       124.151       1469.94       1594.09    
  35  0.868928     -0.140495      -9.02793       9.02793       1448.36       1457.39    
  36  0.243398      -1.41306      -90.8006       90.8006       1491.51       1582.31    
  37  0.936928     -0.651491E-01  -4.18637       4.18637       1489.44       1493.63    
  38  0.979804E-01  -2.32299      -149.271       149.271       1405.15       1554.42    
  39  0.805773     -0.215953      -13.8767       13.8767       1510.75       1524.62    
  40  0.210751      -1.55708      -100.055       100.055       1445.36       1545.41    
  41  0.497104     -0.698956      -44.9137       44.9137       1500.10       1545.01    
  42  0.532106     -0.630913      -40.5414       40.5414       1474.69       1515.23    
  43  0.898420     -0.107117      -6.88316       6.88316       1548.55       1555.44    
  44  0.579370     -0.545814      -35.0730       35.0730       1506.28       1541.35    
  45  0.191213      -1.65437      -106.307       106.307       1553.35       1659.66    
  46  0.491633     -0.710023      -45.6248       45.6248       1561.64       1607.27    
  47  0.989123     -0.109370E-01 -0.702792      0.702792       1552.58       1553.28    
  48  0.576855     -0.550164      -35.3525       35.3525       1508.93       1544.29    
  49  0.133368      -2.01464      -129.457       129.457       1430.15       1559.61    
  50  0.708426     -0.344710      -22.1504       22.1504       1504.39       1526.54    
  51  0.183469      -1.69571      -108.963       108.963       1576.52       1685.48    
  52  0.951201     -0.500300E-01  -3.21484       3.21484       1449.54       1452.75    
  53  0.380646E-01  -3.26847      -210.026       210.026       1518.51       1728.54    
  54  0.575108     -0.553198      -35.5475       35.5475       1539.50       1575.05    
  55  0.136357E-01  -4.29506      -275.993       275.993       1584.73       1860.72    
  56  0.665821E-01  -2.70932      -174.096       174.096       1631.36       1805.45    
  57  0.885471     -0.121635      -7.81605       7.81605       1597.26       1605.08    
  58  0.213600E-01  -3.84624      -247.152       247.152       1528.44       1775.59    
  59  0.740349     -0.300634      -19.3182       19.3182       1474.05       1493.37    
  60  0.290679      -1.23553      -79.3933       79.3933       1690.37       1769.77    
  61  0.895680     -0.110173      -7.07949       7.07949       1494.23       1501.31    
  62  0.956670     -0.442971E-01  -2.84645       2.84645       1675.73       1678.58    
  63  0.196231      -1.62846      -104.642       104.642       1652.26       1756.90    
  64  0.279139      -1.27605      -81.9965       81.9965       1404.73       1486.73    
loop,thermsimp(1:2)       43   77.6670       61.6409    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       3611.15         68.78          1.15         40.66          0.41          0.05        111.05
Just calling func    0   0        111.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270       2484.26         69.06          1.21         40.94          0.27          0.05        111.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4   1584.73
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    64.2582               316
loop is:       43
neval is:      269
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     270       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    271       1061.61         69.14          1.20         40.37          0.30          0.04        111.05
iter,obj,time:    272       1178.00         68.83          1.16         40.95          0.17          0.04        111.15
iter,obj,time:    273       1197.09         69.19          1.20         40.36          0.23          0.05        111.04
iter,obj,time:    274       1180.20         69.31          1.24         40.27          0.04          0.04        110.89
iter,obj,time:    275       1122.92         68.66          1.12         40.46          0.80          0.05        111.09
iter,obj,time:    276       1190.54         69.11          1.19         40.56          0.17          0.04        111.06
iter,obj,time:    277       1165.40         68.70          1.14         40.75          0.31          0.05        110.96
iter,obj,time:    278       1194.16         69.25          1.23         40.50          0.09          0.05        111.11
iter,obj,time:    279       1196.14         68.84          1.12         40.72          0.19          0.05        110.93
iter,obj,time:    280       1201.22         68.81          1.15         40.61          0.31          0.05        110.94
iter,obj,time:    281       1195.81         68.71          1.12         40.34          0.67          0.05        110.89
iter,obj,time:    282       1179.43         69.21          1.20         40.63          0.10          0.05        111.18
iter,obj,time:    283       1224.57         69.35          1.23         40.31          0.04          0.04        110.97
iter,obj,time:    284       1207.29         69.21          1.22         40.67          0.04          0.05        111.20
iter,obj,time:    285       1208.39         69.30          1.23         40.34          0.04          0.05        110.95
iter,obj,time:    286       1213.65         68.89          1.16         40.48          0.40          0.04        110.98
iter,obj,time:    287       1200.47         69.42          1.24         40.28          0.03          0.05        111.01
iter,obj,time:    288       1199.56         69.26          1.22         40.25          0.07          0.05        110.85
iter,obj,time:    289       1194.61         69.11          1.20         40.39          0.33          0.04        111.07
iter,obj,time:    290       1236.96         69.10          1.20         40.41          0.11          0.05        110.88
iter,obj,time:    291       1207.04         69.25          1.22         40.33          0.09          0.05        110.95
iter,obj,time:    292       1216.42         68.95          1.16         40.93          0.29          0.05        111.38
iter,obj,time:    293       1224.89         69.32          1.23         40.35          0.05          0.05        110.99
iter,obj,time:    294       1154.80         68.77          1.14         40.57          0.34          0.04        110.87
iter,obj,time:    295       1204.90         68.91          1.18         40.57          0.27          0.04        110.98
iter,obj,time:    296       1282.01         68.58          1.12         41.06          0.52          0.05        111.33
